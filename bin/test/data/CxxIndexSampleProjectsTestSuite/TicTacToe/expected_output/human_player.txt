FILE: human_player.cpp
FILE: human_player.h
FILE: player.h
FILE: field.h
FILE: game_object.h
FILE: io.h
SYMBOL_MACRO: _HUMAN_PLAYER_ [human_player.h <2:9 2:22>]
SYMBOL_MACRO: _PLAYER_ [player.h <2:9 2:16>]
SYMBOL_MACRO: _FIELD_ [field.h <2:9 2:15>]
SYMBOL_MACRO: _GAME_OBJECT_ [game_object.h <2:9 2:21>]
SYMBOL_MACRO: _IO_ [io.h <2:9 2:12>]
SYMBOL_CLASS: GameObject [game_object.h <4:1 <4:7 4:16> 8:1>]
SYMBOL_METHOD: public void GameObject::GameObject() [game_object.h <6:2 <6:2 <6:2 6:11> 6:13> 6:16>]
SYMBOL_METHOD: public void GameObject::~GameObject() [game_object.h <7:2 <7:2 <7:10 7:20> 7:22> 7:25>]
SYMBOL_METHOD: public GameObject & GameObject::operator=(const GameObject &) [game_object.h <4:7 <4:7 4:16> 4:16>]
SYMBOL_METHOD: public void GameObject::GameObject(const GameObject &) [game_object.h <4:7 <4:7 4:16> 4:16>]
QUALIFIER: Field [human_player.cpp <5:27 5:31>]
QUALIFIER: Field [human_player.cpp <12:1 12:5>]
QUALIFIER: Field [human_player.cpp <13:2 13:6>]
QUALIFIER: Field [human_player.cpp <25:1 25:5>]
QUALIFIER: Field [human_player.cpp <26:2 26:6>]
QUALIFIER: Field [human_player.cpp <40:52 40:56>]
QUALIFIER: Field [human_player.h <9:15 9:19>]
QUALIFIER: Field [human_player.h <12:10 12:14>]
QUALIFIER: Field [human_player.h <15:2 15:6>]
QUALIFIER: Field [human_player.h <17:40 17:44>]
QUALIFIER: Field [player.h <10:10 10:14>]
QUALIFIER: Field [player.h <13:10 13:14>]
QUALIFIER: Field [player.h <15:8 15:12>]
QUALIFIER: Field [player.h <19:8 19:12>]
SYMBOL_CLASS: Field [field.h <6:1 <6:7 6:11> 41:1>]
SYMBOL_ENUM: public Field::Token [field.h <8:2 <8:7 8:11> 12:2>]
SYMBOL_ENUM_CONSTANT: Field::Token::None [field.h <9:3 9:6>]
SYMBOL_ENUM_CONSTANT: Field::Token::PlayerA [field.h <10:3 10:9>]
SYMBOL_ENUM_CONSTANT: Field::Token::PlayerB [field.h <11:3 11:9>]
SYMBOL_METHOD: public static Field::Token Field::Opponent(Field::Token) [field.h <14:2 <14:15 14:22> 14:37>]
SYMBOL_STRUCT: public Field::Move [field.h <16:2 <16:9 16:12> 19:2>]
SYMBOL_FIELD: public int Field::Move::row [field.h <17:7 17:9>]
SYMBOL_BUILTIN_TYPE: int
SYMBOL_FIELD: public int Field::Move::col [field.h <18:7 18:9>]
SYMBOL_METHOD: public void Field::Move::Move() [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public void Field::Move::Move(const Field::Move &) [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public void Field::Move::Move(Field::Move &&) [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public void Field::Move::~Move() [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public Field::Move & Field::Move::operator=(const Field::Move &) [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public Field::Move & Field::Move::operator=(Field::Move &&) [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public void Field::Field() [field.h <21:2 <21:2 21:6> 21:8>]
SYMBOL_METHOD: public void Field::~Field() [field.h <22:2 <22:2 22:7> 22:9>]
SYMBOL_METHOD: public Field Field::Clone() const [field.h <24:2 <24:8 24:12> 24:20>]
SYMBOL_METHOD: public void Field::Clear() [field.h <25:2 <25:7 25:11> 25:13>]
SYMBOL_BUILTIN_TYPE: void
SYMBOL_METHOD: public void Field::Show() const [field.h <27:2 <27:7 27:10> 27:18>]
SYMBOL_METHOD: public int Field::SameInRow(Field::Token, int) const [field.h <29:2 <29:6 29:14> 29:47>]
SYMBOL_METHOD: public bool Field::InRange(const Field::Move &) const [field.h <31:2 <31:7 31:13> 31:39>]
SYMBOL_BUILTIN_TYPE: bool
SYMBOL_METHOD: public bool Field::IsEmpty(const Field::Move &) const [field.h <32:2 <32:7 32:13> 32:39>]
SYMBOL_METHOD: public bool Field::IsFull() const [field.h <33:2 <33:7 33:12> 33:20>]
SYMBOL_METHOD: public void Field::MakeMove(const Field::Move &, Field::Token) [field.h <35:2 <35:7 35:14> 35:47>]
SYMBOL_METHOD: public void Field::ClearMove(const Field::Move &) [field.h <36:2 <36:7 36:15> 36:35>]
SYMBOL_FIELD: private Field::Token * * Field::grid_ [field.h <39:10 39:14>]
SYMBOL_FIELD: private int Field::left_ [field.h <40:6 40:10>]
SYMBOL_METHOD: public void Field::Field(const Field &) [field.h <6:7 <6:7 6:11> 6:11>]
SYMBOL_METHOD: public Field & Field::operator=(const Field &) [field.h <6:7 <6:7 6:11> 6:11>]
SYMBOL_CLASS: Player [player.h <8:1 <8:7 8:12> 21:1>]
SYMBOL_METHOD: public void Player::Player(Field::Token, const char *) [player.h <10:2 <10:2 10:7> 10:47>]
SYMBOL_BUILTIN_TYPE: char
SYMBOL_METHOD: public void Player::~Player() [player.h <11:2 <11:10 11:16> 11:18>]
SYMBOL_METHOD: public Field::Move Player::Turn(const Field &) const [player.h <13:2 <13:22 13:25> 13:57>]
SYMBOL_METHOD: public const Field::Token & Player::getToken() const [player.h <15:2 <15:22 15:29> 15:37>]
SYMBOL_METHOD: public const char * Player::getName() const [player.h <16:2 <16:14 16:20> 16:28>]
SYMBOL_FIELD: protected const Field::Token Player::token_ [player.h <19:21 19:26>]
SYMBOL_FIELD: protected const char * Player::name_ [player.h <20:14 20:18>]
SYMBOL_METHOD: public void Player::Player(const Player &) [player.h <8:7 <8:7 8:12> 8:12>]
SYMBOL_METHOD: public Player & Player::operator=(const Player &) [player.h <8:7 <8:7 8:12> 8:12>]
QUALIFIER: HumanPlayer [human_player.cpp <5:1 5:11>]
QUALIFIER: HumanPlayer [human_player.cpp <9:1 9:11>]
QUALIFIER: HumanPlayer [human_player.cpp <12:13 12:23>]
QUALIFIER: HumanPlayer [human_player.cpp <25:13 25:23>]
QUALIFIER: HumanPlayer [human_player.cpp <40:6 40:16>]
SYMBOL_CLASS: HumanPlayer [human_player.h <7:1 <7:7 7:17> 18:1>]
SYMBOL_METHOD: public void HumanPlayer::HumanPlayer(Field::Token, const char *) [human_player.cpp <5:1 <5:14 5:24> 7:1>]
SYMBOL_METHOD: public void HumanPlayer::HumanPlayer(Field::Token, const char *) [human_player.h <9:2 <9:2 9:12> 9:53>]
SYMBOL_METHOD: public void HumanPlayer::~HumanPlayer() [human_player.cpp <9:1 <9:14 9:25> 10:1>]
SYMBOL_METHOD: public void HumanPlayer::~HumanPlayer() [human_player.h <10:2 <10:10 10:21> 10:23>]
SYMBOL_METHOD: public Field::Move HumanPlayer::Turn(const Field &) const [human_player.cpp <12:1 <12:2 <12:26 12:29> 12:53> 23:1>]
SYMBOL_METHOD: public Field::Move HumanPlayer::Turn(const Field &) const [human_player.h <12:1 <12:2 <12:22 12:25> 12:53> 23:1>]
SYMBOL_METHOD: private Field::Move HumanPlayer::Input() const [human_player.cpp <25:1 <25:26 25:30> 38:1>]
SYMBOL_METHOD: private Field::Move HumanPlayer::Input() const [human_player.h <15:2 <15:14 15:18> 15:26>]
SYMBOL_METHOD: private bool HumanPlayer::Check(const Field &, const Field::Move &) const [human_player.cpp <40:1 <40:19 40:23> 49:1>]
SYMBOL_METHOD: private bool HumanPlayer::Check(const Field &, const Field::Move &) const [human_player.h <17:2 <17:7 17:11> 17:64>]
SYMBOL_METHOD: public void HumanPlayer::HumanPlayer(const HumanPlayer &) [human_player.h <7:7 <7:7 7:17> 7:17>]
SYMBOL_METHOD: public HumanPlayer & HumanPlayer::operator=(const HumanPlayer &) [human_player.h <7:7 <7:7 7:17> 7:17>]
QUALIFIER: io [human_player.cpp <14:2 14:3>]
QUALIFIER: io [human_player.cpp <15:2 15:3>]
QUALIFIER: io [human_player.cpp <30:2 30:3>]
QUALIFIER: io [human_player.cpp <31:13 31:14>]
QUALIFIER: io [human_player.cpp <33:2 33:3>]
QUALIFIER: io [human_player.cpp <34:13 34:14>]
QUALIFIER: io [human_player.cpp <36:2 36:3>]
QUALIFIER: io [human_player.cpp <42:3 42:4>]
QUALIFIER: io [human_player.cpp <45:3 45:4>]
SYMBOL_NAMESPACE: io [io.h <4:1 <4:11 4:12> 11:1>]
SYMBOL_FUNCTION: int io::numberIn() [io.h <6:2 <6:6 6:13> 6:15>]
SYMBOL_FUNCTION: void io::numberOut(int) [io.h <7:2 <7:7 7:15> 7:24>]
SYMBOL_FUNCTION: void io::stringOut(const char *) [io.h <9:2 <9:7 9:15> 9:32>]
REFERENCE_INCLUDE: human_player.cpp -> human_player.h [human_player.cpp <1:10 1:25>]
REFERENCE_MACRO_USAGE: human_player.h -> _HUMAN_PLAYER_ [human_player.h <1:9 1:22>]
REFERENCE_INCLUDE: human_player.h -> player.h [human_player.h <4:10 4:19>]
REFERENCE_MACRO_USAGE: player.h -> _PLAYER_ [player.h <1:9 1:16>]
REFERENCE_INCLUDE: player.h -> field.h [player.h <4:10 4:18>]
REFERENCE_MACRO_USAGE: field.h -> _FIELD_ [field.h <1:9 1:15>]
REFERENCE_INCLUDE: field.h -> game_object.h [field.h <4:10 4:24>]
REFERENCE_MACRO_USAGE: game_object.h -> _GAME_OBJECT_ [game_object.h <1:9 1:21>]
REFERENCE_INCLUDE: player.h -> game_object.h [player.h <5:10 5:24>]
REFERENCE_INCLUDE: human_player.cpp -> io.h [human_player.cpp <3:10 3:15>]
REFERENCE_MACRO_USAGE: io.h -> _IO_ [io.h <1:9 1:12>]
REFERENCE_INHERITANCE: Field -> GameObject [field.h <6:22 6:31>]
REFERENCE_TYPE_USAGE: static Field::Token Field::Opponent(Field::Token) -> Field::Token [field.h <14:9 14:13>]
REFERENCE_TYPE_USAGE: static Field::Token Field::Opponent(Field::Token) -> Field::Token [field.h <14:25 14:29>]
REFERENCE_TYPE_USAGE: int Field::Move::row -> int [field.h <17:3 17:5>]
REFERENCE_TYPE_USAGE: int Field::Move::col -> int [field.h <18:3 18:5>]
REFERENCE_USAGE: void Field::Move::Move(Field::Move &&) -> int Field::Move::row [field.h <16:9 16:12>]
REFERENCE_TYPE_USAGE: void Field::Move::Move(Field::Move &&) -> Field::Move [field.h <16:9 16:12>]
REFERENCE_USAGE: void Field::Move::Move(Field::Move &&) -> int Field::Move::col [field.h <16:9 16:12>]
REFERENCE_USAGE: Field::Move & Field::Move::operator=(Field::Move &&) -> int Field::Move::row [field.h <16:9 16:12>]
REFERENCE_TYPE_USAGE: Field::Move & Field::Move::operator=(Field::Move &&) -> Field::Move [field.h <16:9 16:12>]
REFERENCE_USAGE: Field::Move & Field::Move::operator=(Field::Move &&) -> int Field::Move::col [field.h <16:9 16:12>]
REFERENCE_OVERRIDE: void Field::~Field() -> void GameObject::~GameObject() [field.h <22:2 22:2>]
REFERENCE_TYPE_USAGE: Field Field::Clone() const -> Field [field.h <24:2 24:6>]
REFERENCE_TYPE_USAGE: void Field::Clear() -> void [field.h <25:2 25:5>]
REFERENCE_TYPE_USAGE: void Field::Show() const -> void [field.h <27:2 27:5>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> int [field.h <29:2 29:4>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> int [field.h <29:30 29:32>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> Field::Token [field.h <29:17 29:21>]
REFERENCE_TYPE_USAGE: bool Field::InRange(const Field::Move &) const -> bool [field.h <31:2 31:5>]
REFERENCE_TYPE_USAGE: bool Field::InRange(const Field::Move &) const -> Field::Move [field.h <31:22 31:25>]
REFERENCE_TYPE_USAGE: bool Field::IsEmpty(const Field::Move &) const -> bool [field.h <32:2 32:5>]
REFERENCE_TYPE_USAGE: bool Field::IsEmpty(const Field::Move &) const -> Field::Move [field.h <32:22 32:25>]
REFERENCE_TYPE_USAGE: bool Field::IsFull() const -> bool [field.h <33:2 33:5>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> void [field.h <35:2 35:5>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> Field::Move [field.h <35:23 35:26>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> Field::Token [field.h <35:35 35:39>]
REFERENCE_TYPE_USAGE: void Field::ClearMove(const Field::Move &) -> void [field.h <36:2 36:5>]
REFERENCE_TYPE_USAGE: void Field::ClearMove(const Field::Move &) -> Field::Move [field.h <36:24 36:27>]
REFERENCE_TYPE_USAGE: Field::Token * * Field::grid_ -> Field::Token [field.h <39:2 39:6>]
REFERENCE_TYPE_USAGE: int Field::left_ -> int [field.h <40:2 40:4>]
REFERENCE_INHERITANCE: Player -> GameObject [player.h <8:23 8:32>]
REFERENCE_TYPE_USAGE: void Player::Player(Field::Token, const char *) -> Field::Token [player.h <10:17 10:21>]
REFERENCE_TYPE_USAGE: void Player::Player(Field::Token, const char *) -> char [player.h <10:36 10:39>]
REFERENCE_OVERRIDE: void Player::~Player() -> void GameObject::~GameObject() [player.h <11:10 11:10>]
REFERENCE_TYPE_USAGE: Field::Move Player::Turn(const Field &) const -> Field::Move [player.h <13:17 13:20>]
REFERENCE_TYPE_USAGE: Field::Move Player::Turn(const Field &) const -> Field [player.h <13:34 13:38>]
REFERENCE_TYPE_USAGE: const Field::Token & Player::getToken() const -> Field::Token [player.h <15:15 15:19>]
REFERENCE_TYPE_USAGE: const char * Player::getName() const -> char [player.h <16:8 16:11>]
REFERENCE_TYPE_USAGE: const Field::Token Player::token_ -> Field::Token [player.h <19:15 19:19>]
REFERENCE_TYPE_USAGE: const char * Player::name_ -> char [player.h <20:8 20:11>]
REFERENCE_INHERITANCE: HumanPlayer -> Player [human_player.h <7:28 7:33>]
REFERENCE_TYPE_USAGE: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> Field::Token [human_player.cpp <5:34 5:38>]
REFERENCE_TYPE_USAGE: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> Field::Token [human_player.h <9:22 9:26>]
REFERENCE_TYPE_USAGE: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> char [human_player.cpp <5:53 5:56>]
REFERENCE_TYPE_USAGE: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> char [human_player.h <9:41 9:44>]
REFERENCE_OVERRIDE: void HumanPlayer::~HumanPlayer() -> void Player::~Player() [human_player.cpp <9:14 9:14>]
REFERENCE_OVERRIDE: void HumanPlayer::~HumanPlayer() -> void Player::~Player() [human_player.h <10:10 10:10>]
REFERENCE_OVERRIDE: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move Player::Turn(const Field &) const [human_player.cpp <12:26 12:29>]
REFERENCE_OVERRIDE: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move Player::Turn(const Field &) const [human_player.h <12:22 12:25>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move [human_player.cpp <12:8 12:11>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move [human_player.cpp <13:9 13:12>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move [human_player.h <12:17 12:20>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> Field [human_player.cpp <12:38 12:42>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> Field [human_player.h <12:34 12:38>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Input() const -> Field::Move [human_player.cpp <25:8 25:11>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Input() const -> Field::Move [human_player.cpp <26:9 26:12>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Input() const -> Field::Move [human_player.h <15:9 15:12>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> bool [human_player.cpp <40:1 40:4>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> bool [human_player.h <17:2 17:5>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> Field [human_player.cpp <40:32 40:36>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> Field [human_player.h <17:20 17:24>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> Field::Move [human_player.cpp <40:59 40:62>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> Field::Move [human_player.h <17:47 17:50>]
REFERENCE_TYPE_USAGE: int io::numberIn() -> int [io.h <6:2 6:4>]
REFERENCE_TYPE_USAGE: void io::numberOut(int) -> void [io.h <7:2 7:5>]
REFERENCE_TYPE_USAGE: void io::numberOut(int) -> int [io.h <7:17 7:19>]
REFERENCE_TYPE_USAGE: void io::stringOut(const char *) -> void [io.h <9:2 9:5>]
REFERENCE_TYPE_USAGE: void io::stringOut(const char *) -> char [io.h <9:23 9:26>]
REFERENCE_TYPE_USAGE: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> Player [human_player.cpp <6:4 6:9>]
REFERENCE_CALL: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> void Player::Player(Field::Token, const char *) [human_player.cpp <6:4 6:9>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> void Field::Move::Move() [human_player.cpp <13:14 13:17>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> void io::stringOut(const char *) [human_player.cpp <14:6 14:14>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> void io::stringOut(const char *) [human_player.cpp <15:6 15:14>]
REFERENCE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> const char * Player::name_ [human_player.cpp <14:16 14:20>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move & Field::Move::operator=(Field::Move &&) [human_player.cpp <18:8 18:8>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move HumanPlayer::Input() const [human_player.cpp <18:10 18:14>]
REFERENCE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> int Field::Move::row [human_player.cpp <19:8 19:10>]
REFERENCE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> int Field::Move::col [human_player.cpp <20:8 20:10>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> bool HumanPlayer::Check(const Field &, const Field::Move &) const [human_player.cpp <21:13 21:17>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> void Field::Move::Move(Field::Move &&) [human_player.cpp <22:9 22:12>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> void Field::Move::Move() [human_player.cpp <26:14 26:17>]
REFERENCE_USAGE: Field::Move HumanPlayer::Input() const -> int Field::Move::row [human_player.cpp <27:7 27:9>]
REFERENCE_USAGE: Field::Move HumanPlayer::Input() const -> int Field::Move::row [human_player.cpp <31:7 31:9>]
REFERENCE_USAGE: Field::Move HumanPlayer::Input() const -> int Field::Move::col [human_player.cpp <28:7 28:9>]
REFERENCE_USAGE: Field::Move HumanPlayer::Input() const -> int Field::Move::col [human_player.cpp <34:7 34:9>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> void io::stringOut(const char *) [human_player.cpp <30:6 30:14>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> void io::stringOut(const char *) [human_player.cpp <33:6 33:14>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> void io::stringOut(const char *) [human_player.cpp <36:6 36:14>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> int io::numberIn() [human_player.cpp <31:17 31:24>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> int io::numberIn() [human_player.cpp <34:17 34:24>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> void Field::Move::Move(Field::Move &&) [human_player.cpp <37:9 37:12>]
REFERENCE_CALL: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> bool Field::InRange(const Field::Move &) const [human_player.cpp <41:14 41:20>]
REFERENCE_CALL: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> void io::stringOut(const char *) [human_player.cpp <42:7 42:15>]
REFERENCE_CALL: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> void io::stringOut(const char *) [human_player.cpp <45:7 45:15>]
REFERENCE_CALL: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> bool Field::IsEmpty(const Field::Move &) const [human_player.cpp <44:21 44:27>]
LOCAL_SYMBOL: field.h<14:31> [field.h <14:31 14:35>]
LOCAL_SYMBOL: field.h<16:14> [field.h <16:14 16:14>]
LOCAL_SYMBOL: field.h<16:14> [field.h <19:2 19:2>]
LOCAL_SYMBOL: field.h<16:9> [field.h <16:9 16:12>]
LOCAL_SYMBOL: field.h<29:23> [field.h <29:23 29:27>]
LOCAL_SYMBOL: field.h<29:34> [field.h <29:34 29:39>]
LOCAL_SYMBOL: field.h<31:28> [field.h <31:28 31:31>]
LOCAL_SYMBOL: field.h<32:28> [field.h <32:28 32:31>]
LOCAL_SYMBOL: field.h<35:29> [field.h <35:29 35:32>]
LOCAL_SYMBOL: field.h<35:41> [field.h <35:41 35:45>]
LOCAL_SYMBOL: field.h<36:30> [field.h <36:30 36:33>]
LOCAL_SYMBOL: field.h<6:33> [field.h <6:33 6:33>]
LOCAL_SYMBOL: field.h<6:33> [field.h <41:1 41:1>]
LOCAL_SYMBOL: field.h<8:13> [field.h <8:13 8:13>]
LOCAL_SYMBOL: field.h<8:13> [field.h <12:2 12:2>]
LOCAL_SYMBOL: game_object.h<4:18> [game_object.h <4:18 4:18>]
LOCAL_SYMBOL: game_object.h<4:18> [game_object.h <8:1 8:1>]
LOCAL_SYMBOL: game_object.h<6:15> [game_object.h <6:15 6:15>]
LOCAL_SYMBOL: game_object.h<6:15> [game_object.h <6:16 6:16>]
LOCAL_SYMBOL: game_object.h<7:24> [game_object.h <7:24 7:24>]
LOCAL_SYMBOL: game_object.h<7:24> [game_object.h <7:25 7:25>]
LOCAL_SYMBOL: human_player.cpp<12:45> [human_player.cpp <12:45 12:49>]
LOCAL_SYMBOL: human_player.cpp<12:45> [human_player.cpp <21:20 21:24>]
LOCAL_SYMBOL: human_player.cpp<12:59> [human_player.cpp <12:59 12:59>]
LOCAL_SYMBOL: human_player.cpp<12:59> [human_player.cpp <23:1 23:1>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <13:14 13:17>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <18:3 18:6>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <19:3 19:6>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <20:3 20:6>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <21:27 21:30>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <22:9 22:12>]
LOCAL_SYMBOL: human_player.cpp<17:5> [human_player.cpp <17:5 17:5>]
LOCAL_SYMBOL: human_player.cpp<17:5> [human_player.cpp <21:2 21:2>]
LOCAL_SYMBOL: human_player.cpp<25:40> [human_player.cpp <25:40 25:40>]
LOCAL_SYMBOL: human_player.cpp<25:40> [human_player.cpp <38:1 38:1>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <26:14 26:17>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <27:2 27:5>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <28:2 28:5>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <31:2 31:5>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <34:2 34:5>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <37:9 37:12>]
LOCAL_SYMBOL: human_player.cpp<40:39> [human_player.cpp <40:39 40:43>]
LOCAL_SYMBOL: human_player.cpp<40:39> [human_player.cpp <41:8 41:12>]
LOCAL_SYMBOL: human_player.cpp<40:39> [human_player.cpp <44:15 44:19>]
LOCAL_SYMBOL: human_player.cpp<40:65> [human_player.cpp <40:65 40:68>]
LOCAL_SYMBOL: human_player.cpp<40:65> [human_player.cpp <41:23 41:26>]
LOCAL_SYMBOL: human_player.cpp<40:65> [human_player.cpp <44:30 44:33>]
LOCAL_SYMBOL: human_player.cpp<40:78> [human_player.cpp <40:78 40:78>]
LOCAL_SYMBOL: human_player.cpp<40:78> [human_player.cpp <49:1 49:1>]
LOCAL_SYMBOL: human_player.cpp<41:32> [human_player.cpp <41:32 41:32>]
LOCAL_SYMBOL: human_player.cpp<41:32> [human_player.cpp <44:2 44:2>]
LOCAL_SYMBOL: human_player.cpp<44:39> [human_player.cpp <44:39 44:39>]
LOCAL_SYMBOL: human_player.cpp<44:39> [human_player.cpp <47:2 47:2>]
LOCAL_SYMBOL: human_player.cpp<5:40> [human_player.cpp <5:40 5:44>]
LOCAL_SYMBOL: human_player.cpp<5:40> [human_player.cpp <6:12 6:16>]
LOCAL_SYMBOL: human_player.cpp<5:59> [human_player.cpp <5:59 5:62>]
LOCAL_SYMBOL: human_player.cpp<5:59> [human_player.cpp <6:19 6:22>]
LOCAL_SYMBOL: human_player.cpp<6:26> [human_player.cpp <6:26 6:26>]
LOCAL_SYMBOL: human_player.cpp<6:26> [human_player.cpp <7:1 7:1>]
LOCAL_SYMBOL: human_player.cpp<9:29> [human_player.cpp <9:29 9:29>]
LOCAL_SYMBOL: human_player.cpp<9:29> [human_player.cpp <10:1 10:1>]
LOCAL_SYMBOL: human_player.h<12:41> [human_player.h <12:41 12:45>]
LOCAL_SYMBOL: human_player.h<17:27> [human_player.h <17:27 17:31>]
LOCAL_SYMBOL: human_player.h<17:53> [human_player.h <17:53 17:56>]
LOCAL_SYMBOL: human_player.h<7:35> [human_player.h <7:35 7:35>]
LOCAL_SYMBOL: human_player.h<7:35> [human_player.h <18:1 18:1>]
LOCAL_SYMBOL: human_player.h<9:28> [human_player.h <9:28 9:32>]
LOCAL_SYMBOL: human_player.h<9:47> [human_player.h <9:47 9:50>]
LOCAL_SYMBOL: io.h<4:14> [io.h <4:14 4:14>]
LOCAL_SYMBOL: io.h<4:14> [io.h <11:1 11:1>]
LOCAL_SYMBOL: io.h<7:21> [io.h <7:21 7:23>]
LOCAL_SYMBOL: io.h<9:29> [io.h <9:29 9:31>]
LOCAL_SYMBOL: player.h<10:23> [player.h <10:23 10:27>]
LOCAL_SYMBOL: player.h<10:42> [player.h <10:42 10:45>]
LOCAL_SYMBOL: player.h<13:41> [player.h <13:41 13:45>]
LOCAL_SYMBOL: player.h<8:34> [player.h <8:34 8:34>]
LOCAL_SYMBOL: player.h<8:34> [player.h <21:1 21:1>]
COMMENT: comment [human_player.h <20:8 20:25>]
COMMENT: comment [player.h <23:8 23:19>]
COMMENT: comment [field.h <43:8 43:18>]
COMMENT: comment [game_object.h <10:8 10:24>]
COMMENT: comment [io.h <13:8 13:15>]
