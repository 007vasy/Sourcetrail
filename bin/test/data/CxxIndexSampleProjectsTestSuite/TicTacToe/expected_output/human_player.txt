FILE: human_player.cpp
FILE: human_player.h non-indexed
FILE: player.h non-indexed
FILE: field.h non-indexed
FILE: game_object.h non-indexed
FILE: io.h non-indexed
SYMBOL_METHOD: public void HumanPlayer::HumanPlayer(Field::Token, const char *) [human_player.cpp <5:1 <5:14 5:24> 7:1>]
QUALIFIER: HumanPlayer [human_player.cpp <5:1 5:11>]
QUALIFIER: HumanPlayer [human_player.cpp <9:1 9:11>]
QUALIFIER: HumanPlayer [human_player.cpp <12:13 12:23>]
QUALIFIER: HumanPlayer [human_player.cpp <25:13 25:23>]
QUALIFIER: HumanPlayer [human_player.cpp <40:6 40:16>]
SYMBOL_CLASS: HumanPlayer
QUALIFIER: Field [human_player.cpp <5:27 5:31>]
QUALIFIER: Field [human_player.cpp <12:1 12:5>]
QUALIFIER: Field [human_player.cpp <13:2 13:6>]
QUALIFIER: Field [human_player.cpp <25:1 25:5>]
QUALIFIER: Field [human_player.cpp <26:2 26:6>]
QUALIFIER: Field [human_player.cpp <40:52 40:56>]
SYMBOL_CLASS: Field
SYMBOL_BUILTIN_TYPE: char
SYMBOL_FUNCTION: void Player::Player(Field::Token, const char *)
SYMBOL_METHOD: public void HumanPlayer::~HumanPlayer() [human_player.cpp <9:1 <9:14 9:25> 10:1>]
SYMBOL_FUNCTION: void Player::~Player()
SYMBOL_METHOD: public Field::Move HumanPlayer::Turn(const Field &) const [human_player.cpp <12:1 <12:26 12:29> 23:1>]
SYMBOL_FUNCTION: Field::Move Player::Turn(const Field &) const
SYMBOL_FUNCTION: void Field::Move::Move()
SYMBOL_FUNCTION: void io::stringOut(const char *)
QUALIFIER: io [human_player.cpp <14:2 14:3>]
QUALIFIER: io [human_player.cpp <15:2 15:3>]
QUALIFIER: io [human_player.cpp <30:2 30:3>]
QUALIFIER: io [human_player.cpp <31:13 31:14>]
QUALIFIER: io [human_player.cpp <33:2 33:3>]
QUALIFIER: io [human_player.cpp <34:13 34:14>]
QUALIFIER: io [human_player.cpp <36:2 36:3>]
QUALIFIER: io [human_player.cpp <42:3 42:4>]
QUALIFIER: io [human_player.cpp <45:3 45:4>]
SYMBOL_NAMESPACE: io
SYMBOL_FUNCTION: Field::Move & Field::Move::operator=(Field::Move &&)
SYMBOL_METHOD: private Field::Move HumanPlayer::Input() const [human_player.cpp <25:1 <25:26 25:30> 38:1>]
SYMBOL_METHOD: private bool HumanPlayer::Check(const Field &, const Field::Move &) const [human_player.cpp <40:1 <40:19 40:23> 49:1>]
SYMBOL_FUNCTION: void Field::Move::Move(Field::Move &&)
SYMBOL_FUNCTION: int io::numberIn()
SYMBOL_BUILTIN_TYPE: bool
SYMBOL_FUNCTION: bool Field::InRange(const Field::Move &) const
SYMBOL_FUNCTION: bool Field::IsEmpty(const Field::Move &) const
REFERENCE_INCLUDE: human_player.cpp -> human_player.h [human_player.cpp <1:10 1:25>]
REFERENCE_INCLUDE: human_player.h -> player.h [human_player.h <4:10 4:19>]
REFERENCE_INCLUDE: player.h -> field.h [player.h <4:10 4:18>]
REFERENCE_INCLUDE: field.h -> game_object.h [field.h <4:10 4:24>]
REFERENCE_INCLUDE: player.h -> game_object.h [player.h <5:10 5:24>]
REFERENCE_INCLUDE: human_player.cpp -> io.h [human_player.cpp <3:10 3:15>]
REFERENCE_TYPE_USAGE: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> Field::Token [human_player.cpp <5:34 5:38>]
REFERENCE_TYPE_USAGE: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> char [human_player.cpp <5:53 5:56>]
REFERENCE_TYPE_USAGE: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> Player [human_player.cpp <6:4 6:9>]
REFERENCE_CALL: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> void Player::Player(Field::Token, const char *) [human_player.cpp <6:4 6:9>]
REFERENCE_OVERRIDE: void HumanPlayer::~HumanPlayer() -> void Player::~Player() [human_player.cpp <9:14 9:14>]
REFERENCE_OVERRIDE: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move Player::Turn(const Field &) const [human_player.cpp <12:26 12:29>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move [human_player.cpp <12:8 12:11>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move [human_player.cpp <13:9 13:12>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> Field [human_player.cpp <12:38 12:42>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> void Field::Move::Move() [human_player.cpp <13:14 13:17>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> void io::stringOut(const char *) [human_player.cpp <14:6 14:14>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> void io::stringOut(const char *) [human_player.cpp <15:6 15:14>]
REFERENCE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> const char * Player::name_ [human_player.cpp <14:16 14:20>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move & Field::Move::operator=(Field::Move &&) [human_player.cpp <18:8 18:8>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move HumanPlayer::Input() const [human_player.cpp <18:10 18:14>]
REFERENCE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> int Field::Move::row [human_player.cpp <19:8 19:10>]
REFERENCE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> int Field::Move::col [human_player.cpp <20:8 20:10>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> bool HumanPlayer::Check(const Field &, const Field::Move &) const [human_player.cpp <21:13 21:17>]
REFERENCE_CALL: Field::Move HumanPlayer::Turn(const Field &) const -> void Field::Move::Move(Field::Move &&) [human_player.cpp <22:9 22:12>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Input() const -> Field::Move [human_player.cpp <25:8 25:11>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Input() const -> Field::Move [human_player.cpp <26:9 26:12>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> void Field::Move::Move() [human_player.cpp <26:14 26:17>]
REFERENCE_USAGE: Field::Move HumanPlayer::Input() const -> int Field::Move::row [human_player.cpp <27:7 27:9>]
REFERENCE_USAGE: Field::Move HumanPlayer::Input() const -> int Field::Move::row [human_player.cpp <31:7 31:9>]
REFERENCE_USAGE: Field::Move HumanPlayer::Input() const -> int Field::Move::col [human_player.cpp <28:7 28:9>]
REFERENCE_USAGE: Field::Move HumanPlayer::Input() const -> int Field::Move::col [human_player.cpp <34:7 34:9>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> void io::stringOut(const char *) [human_player.cpp <30:6 30:14>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> void io::stringOut(const char *) [human_player.cpp <33:6 33:14>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> void io::stringOut(const char *) [human_player.cpp <36:6 36:14>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> int io::numberIn() [human_player.cpp <31:17 31:24>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> int io::numberIn() [human_player.cpp <34:17 34:24>]
REFERENCE_CALL: Field::Move HumanPlayer::Input() const -> void Field::Move::Move(Field::Move &&) [human_player.cpp <37:9 37:12>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> bool [human_player.cpp <40:1 40:4>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> Field [human_player.cpp <40:32 40:36>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> Field::Move [human_player.cpp <40:59 40:62>]
REFERENCE_CALL: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> bool Field::InRange(const Field::Move &) const [human_player.cpp <41:14 41:20>]
REFERENCE_CALL: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> void io::stringOut(const char *) [human_player.cpp <42:7 42:15>]
REFERENCE_CALL: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> void io::stringOut(const char *) [human_player.cpp <45:7 45:15>]
REFERENCE_CALL: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> bool Field::IsEmpty(const Field::Move &) const [human_player.cpp <44:21 44:27>]
LOCAL_SYMBOL: human_player.cpp<12:45> [human_player.cpp <12:45 12:49>]
LOCAL_SYMBOL: human_player.cpp<12:45> [human_player.cpp <21:20 21:24>]
LOCAL_SYMBOL: human_player.cpp<12:59> [human_player.cpp <12:59 12:59>]
LOCAL_SYMBOL: human_player.cpp<12:59> [human_player.cpp <23:1 23:1>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <13:14 13:17>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <18:3 18:6>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <19:3 19:6>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <20:3 20:6>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <21:27 21:30>]
LOCAL_SYMBOL: human_player.cpp<13:14> [human_player.cpp <22:9 22:12>]
LOCAL_SYMBOL: human_player.cpp<17:5> [human_player.cpp <17:5 17:5>]
LOCAL_SYMBOL: human_player.cpp<17:5> [human_player.cpp <21:2 21:2>]
LOCAL_SYMBOL: human_player.cpp<25:40> [human_player.cpp <25:40 25:40>]
LOCAL_SYMBOL: human_player.cpp<25:40> [human_player.cpp <38:1 38:1>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <26:14 26:17>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <27:2 27:5>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <28:2 28:5>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <31:2 31:5>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <34:2 34:5>]
LOCAL_SYMBOL: human_player.cpp<26:14> [human_player.cpp <37:9 37:12>]
LOCAL_SYMBOL: human_player.cpp<40:39> [human_player.cpp <40:39 40:43>]
LOCAL_SYMBOL: human_player.cpp<40:39> [human_player.cpp <41:8 41:12>]
LOCAL_SYMBOL: human_player.cpp<40:39> [human_player.cpp <44:15 44:19>]
LOCAL_SYMBOL: human_player.cpp<40:65> [human_player.cpp <40:65 40:68>]
LOCAL_SYMBOL: human_player.cpp<40:65> [human_player.cpp <41:23 41:26>]
LOCAL_SYMBOL: human_player.cpp<40:65> [human_player.cpp <44:30 44:33>]
LOCAL_SYMBOL: human_player.cpp<40:78> [human_player.cpp <40:78 40:78>]
LOCAL_SYMBOL: human_player.cpp<40:78> [human_player.cpp <49:1 49:1>]
LOCAL_SYMBOL: human_player.cpp<41:32> [human_player.cpp <41:32 41:32>]
LOCAL_SYMBOL: human_player.cpp<41:32> [human_player.cpp <44:2 44:2>]
LOCAL_SYMBOL: human_player.cpp<44:39> [human_player.cpp <44:39 44:39>]
LOCAL_SYMBOL: human_player.cpp<44:39> [human_player.cpp <47:2 47:2>]
LOCAL_SYMBOL: human_player.cpp<5:40> [human_player.cpp <5:40 5:44>]
LOCAL_SYMBOL: human_player.cpp<5:40> [human_player.cpp <6:12 6:16>]
LOCAL_SYMBOL: human_player.cpp<5:59> [human_player.cpp <5:59 5:62>]
LOCAL_SYMBOL: human_player.cpp<5:59> [human_player.cpp <6:19 6:22>]
LOCAL_SYMBOL: human_player.cpp<6:26> [human_player.cpp <6:26 6:26>]
LOCAL_SYMBOL: human_player.cpp<6:26> [human_player.cpp <7:1 7:1>]
LOCAL_SYMBOL: human_player.cpp<9:29> [human_player.cpp <9:29 9:29>]
LOCAL_SYMBOL: human_player.cpp<9:29> [human_player.cpp <10:1 10:1>]
