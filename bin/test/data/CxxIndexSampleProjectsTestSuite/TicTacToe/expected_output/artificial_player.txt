FILE: artificial_player.cpp
FILE: artificial_player.h
FILE: player.h
FILE: field.h
FILE: game_object.h
SYMBOL_MACRO: _ARTIFICIAL_PLAYER_ [artificial_player.h <2:9 2:27>]
SYMBOL_MACRO: _PLAYER_ [player.h <2:9 2:16>]
SYMBOL_MACRO: _FIELD_ [field.h <2:9 2:15>]
SYMBOL_MACRO: _GAME_OBJECT_ [game_object.h <2:9 2:21>]
SYMBOL_CLASS: GameObject [game_object.h <4:1 <4:7 4:16> 8:1>]
SYMBOL_METHOD: public void GameObject::GameObject() [game_object.h <6:2 <6:2 <6:2 6:11> 6:13> 6:16>]
SYMBOL_METHOD: public void GameObject::~GameObject() [game_object.h <7:2 <7:2 <7:10 7:20> 7:22> 7:25>]
SYMBOL_METHOD: public GameObject & GameObject::operator=(const GameObject &) [game_object.h <4:7 <4:7 4:16> 4:16>]
SYMBOL_METHOD: public void GameObject::GameObject(const GameObject &) [game_object.h <4:7 <4:7 4:16> 4:16>]
QUALIFIER: Field [artificial_player.cpp <3:37 3:41>]
QUALIFIER: Field [artificial_player.cpp <10:1 10:5>]
QUALIFIER: Field [artificial_player.cpp <16:64 16:68>]
QUALIFIER: Field [artificial_player.cpp <20:2 20:6>]
QUALIFIER: Field [artificial_player.cpp <37:33 37:37>]
QUALIFIER: Field [artificial_player.cpp <58:53 58:57>]
QUALIFIER: Field [artificial_player.cpp <61:31 61:35>]
QUALIFIER: Field [artificial_player.h <8:20 8:24>]
QUALIFIER: Field [artificial_player.h <11:10 11:14>]
QUALIFIER: Field [artificial_player.h <15:3 15:7>]
QUALIFIER: Field [artificial_player.h <19:29 19:33>]
QUALIFIER: Field [artificial_player.h <21:36 21:40>]
QUALIFIER: Field [player.h <10:10 10:14>]
QUALIFIER: Field [player.h <13:10 13:14>]
QUALIFIER: Field [player.h <15:8 15:12>]
QUALIFIER: Field [player.h <19:8 19:12>]
SYMBOL_CLASS: Field [field.h <6:1 <6:7 6:11> 41:1>]
SYMBOL_ENUM: public Field::Token [field.h <8:2 <8:7 8:11> 12:2>]
SYMBOL_ENUM_CONSTANT: Field::Token::None [field.h <9:3 9:6>]
SYMBOL_ENUM_CONSTANT: Field::Token::PlayerA [field.h <10:3 10:9>]
SYMBOL_ENUM_CONSTANT: Field::Token::PlayerB [field.h <11:3 11:9>]
SYMBOL_METHOD: public static Field::Token Field::Opponent(Field::Token) [field.h <14:2 <14:15 14:22> 14:37>]
SYMBOL_STRUCT: public Field::Move [field.h <16:2 <16:9 16:12> 19:2>]
SYMBOL_FIELD: public int Field::Move::row [field.h <17:7 17:9>]
SYMBOL_BUILTIN_TYPE: int
SYMBOL_FIELD: public int Field::Move::col [field.h <18:7 18:9>]
SYMBOL_METHOD: public void Field::Move::~Move() [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public void Field::Move::Move() [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public void Field::Move::Move(const Field::Move &) [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public void Field::Move::Move(Field::Move &&) [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public Field::Move & Field::Move::operator=(const Field::Move &) [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public Field::Move & Field::Move::operator=(Field::Move &&) [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public void Field::Field() [field.h <21:2 <21:2 21:6> 21:8>]
SYMBOL_METHOD: public void Field::~Field() [field.h <22:2 <22:2 22:7> 22:9>]
SYMBOL_METHOD: public Field Field::Clone() const [field.h <24:2 <24:8 24:12> 24:20>]
SYMBOL_METHOD: public void Field::Clear() [field.h <25:2 <25:7 25:11> 25:13>]
SYMBOL_BUILTIN_TYPE: void
SYMBOL_METHOD: public void Field::Show() const [field.h <27:2 <27:7 27:10> 27:18>]
SYMBOL_METHOD: public int Field::SameInRow(Field::Token, int) const [field.h <29:2 <29:6 29:14> 29:47>]
SYMBOL_METHOD: public bool Field::InRange(const Field::Move &) const [field.h <31:2 <31:7 31:13> 31:39>]
SYMBOL_BUILTIN_TYPE: bool
SYMBOL_METHOD: public bool Field::IsEmpty(const Field::Move &) const [field.h <32:2 <32:7 32:13> 32:39>]
SYMBOL_METHOD: public bool Field::IsFull() const [field.h <33:2 <33:7 33:12> 33:20>]
SYMBOL_METHOD: public void Field::MakeMove(const Field::Move &, Field::Token) [field.h <35:2 <35:7 35:14> 35:47>]
SYMBOL_METHOD: public void Field::ClearMove(const Field::Move &) [field.h <36:2 <36:7 36:15> 36:35>]
SYMBOL_FIELD: private Field::Token * * Field::grid_ [field.h <39:10 39:14>]
SYMBOL_FIELD: private int Field::left_ [field.h <40:6 40:10>]
SYMBOL_METHOD: public void Field::Field(const Field &) [field.h <6:7 <6:7 6:11> 6:11>]
SYMBOL_METHOD: public Field & Field::operator=(const Field &) [field.h <6:7 <6:7 6:11> 6:11>]
SYMBOL_CLASS: Player [player.h <8:1 <8:7 8:12> 21:1>]
SYMBOL_METHOD: public void Player::Player(Field::Token, const char *) [player.h <10:2 <10:2 10:7> 10:47>]
SYMBOL_BUILTIN_TYPE: char
SYMBOL_METHOD: public void Player::~Player() [player.h <11:2 <11:10 11:16> 11:18>]
SYMBOL_METHOD: public Field::Move Player::Turn(const Field &) const [player.h <13:2 <13:22 13:25> 13:57>]
SYMBOL_METHOD: public const Field::Token & Player::getToken() const [player.h <15:2 <15:22 15:29> 15:37>]
SYMBOL_METHOD: public const char * Player::getName() const [player.h <16:2 <16:14 16:20> 16:28>]
SYMBOL_FIELD: protected const Field::Token Player::token_ [player.h <19:21 19:26>]
SYMBOL_FIELD: protected const char * Player::name_ [player.h <20:14 20:18>]
SYMBOL_METHOD: public void Player::Player(const Player &) [player.h <8:7 <8:7 8:12> 8:12>]
SYMBOL_METHOD: public Player & Player::operator=(const Player &) [player.h <8:7 <8:7 8:12> 8:12>]
QUALIFIER: ArtificialPlayer [artificial_player.cpp <3:1 3:16>]
QUALIFIER: ArtificialPlayer [artificial_player.cpp <7:1 7:16>]
QUALIFIER: ArtificialPlayer [artificial_player.cpp <10:13 10:28>]
QUALIFIER: ArtificialPlayer [artificial_player.cpp <16:1 16:16>]
QUALIFIER: ArtificialPlayer [artificial_player.cpp <16:24 16:39>]
QUALIFIER: ArtificialPlayer [artificial_player.cpp <58:5 58:20>]
SYMBOL_CLASS: ArtificialPlayer [artificial_player.h <6:1 <6:7 6:22> 22:1>]
SYMBOL_METHOD: public void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) [artificial_player.cpp <3:1 <3:19 3:34> 5:1>]
SYMBOL_METHOD: public void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) [artificial_player.h <8:2 <8:2 8:17> 8:58>]
SYMBOL_METHOD: public void ArtificialPlayer::~ArtificialPlayer() [artificial_player.cpp <7:1 <7:19 7:35> 8:1>]
SYMBOL_METHOD: public void ArtificialPlayer::~ArtificialPlayer() [artificial_player.h <9:2 <9:10 9:26> 9:28>]
SYMBOL_METHOD: public Field::Move ArtificialPlayer::Turn(const Field &) const [artificial_player.cpp <10:1 <10:31 10:34> 14:1>]
SYMBOL_METHOD: public Field::Move ArtificialPlayer::Turn(const Field &) const [artificial_player.h <10:1 <11:2 <11:22 11:25> 11:53> 14:1>]
SYMBOL_STRUCT: private ArtificialPlayer::Node [artificial_player.h <14:2 <14:9 14:12> 17:2>]
SYMBOL_FIELD: public Field::Move ArtificialPlayer::Node::move [artificial_player.h <15:15 15:18>]
SYMBOL_FIELD: public int ArtificialPlayer::Node::value [artificial_player.h <16:7 16:11>]
SYMBOL_METHOD: public void ArtificialPlayer::Node::~Node() [artificial_player.h <14:9 <14:9 14:12> 14:12>]
SYMBOL_METHOD: public void ArtificialPlayer::Node::Node() [artificial_player.h <14:9 <14:9 14:12> 14:12>]
SYMBOL_METHOD: public void ArtificialPlayer::Node::Node(const ArtificialPlayer::Node &) [artificial_player.h <14:9 <14:9 14:12> 14:12>]
SYMBOL_METHOD: public void ArtificialPlayer::Node::Node(ArtificialPlayer::Node &&) [artificial_player.h <14:9 <14:9 14:12> 14:12>]
SYMBOL_METHOD: private ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const [artificial_player.cpp <16:1 <16:42 16:47> 56:1>]
SYMBOL_METHOD: private ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const [artificial_player.h <16:1 <19:2 <19:7 19:12> 19:54> 56:1>]
SYMBOL_METHOD: private int ArtificialPlayer::Evaluate(const Field &, Field::Token) const [artificial_player.cpp <58:1 <58:23 58:30> 67:1>]
SYMBOL_METHOD: private int ArtificialPlayer::Evaluate(const Field &, Field::Token) const [artificial_player.h <21:2 <21:6 21:13> 21:61>]
SYMBOL_METHOD: public void ArtificialPlayer::ArtificialPlayer(const ArtificialPlayer &) [artificial_player.h <6:7 <6:7 6:22> 6:22>]
SYMBOL_METHOD: public ArtificialPlayer & ArtificialPlayer::operator=(const ArtificialPlayer &) [artificial_player.h <6:7 <6:7 6:22> 6:22>]
REFERENCE_INCLUDE: artificial_player.cpp -> artificial_player.h [artificial_player.cpp <1:10 1:30>]
REFERENCE_MACRO_USAGE: artificial_player.h -> _ARTIFICIAL_PLAYER_ [artificial_player.h <1:9 1:27>]
REFERENCE_INCLUDE: artificial_player.h -> player.h [artificial_player.h <4:10 4:19>]
REFERENCE_MACRO_USAGE: player.h -> _PLAYER_ [player.h <1:9 1:16>]
REFERENCE_INCLUDE: player.h -> field.h [player.h <4:10 4:18>]
REFERENCE_MACRO_USAGE: field.h -> _FIELD_ [field.h <1:9 1:15>]
REFERENCE_INCLUDE: field.h -> game_object.h [field.h <4:10 4:24>]
REFERENCE_MACRO_USAGE: game_object.h -> _GAME_OBJECT_ [game_object.h <1:9 1:21>]
REFERENCE_INCLUDE: player.h -> game_object.h [player.h <5:10 5:24>]
REFERENCE_INHERITANCE: Field -> GameObject [field.h <6:22 6:31>]
REFERENCE_TYPE_USAGE: static Field::Token Field::Opponent(Field::Token) -> Field::Token [field.h <14:9 14:13>]
REFERENCE_TYPE_USAGE: static Field::Token Field::Opponent(Field::Token) -> Field::Token [field.h <14:25 14:29>]
REFERENCE_TYPE_USAGE: int Field::Move::row -> int [field.h <17:3 17:5>]
REFERENCE_TYPE_USAGE: int Field::Move::col -> int [field.h <18:3 18:5>]
REFERENCE_USAGE: void Field::Move::Move(const Field::Move &) -> int Field::Move::row [field.h <16:9 16:12>]
REFERENCE_USAGE: void Field::Move::Move(const Field::Move &) -> int Field::Move::col [field.h <16:9 16:12>]
REFERENCE_USAGE: void Field::Move::Move(Field::Move &&) -> int Field::Move::row [field.h <16:9 16:12>]
REFERENCE_TYPE_USAGE: void Field::Move::Move(Field::Move &&) -> Field::Move [field.h <16:9 16:12>]
REFERENCE_USAGE: void Field::Move::Move(Field::Move &&) -> int Field::Move::col [field.h <16:9 16:12>]
REFERENCE_USAGE: Field::Move & Field::Move::operator=(const Field::Move &) -> int Field::Move::row [field.h <16:9 16:12>]
REFERENCE_USAGE: Field::Move & Field::Move::operator=(const Field::Move &) -> int Field::Move::col [field.h <16:9 16:12>]
REFERENCE_OVERRIDE: void Field::~Field() -> void GameObject::~GameObject() [field.h <22:2 22:2>]
REFERENCE_TYPE_USAGE: Field Field::Clone() const -> Field [field.h <24:2 24:6>]
REFERENCE_TYPE_USAGE: void Field::Clear() -> void [field.h <25:2 25:5>]
REFERENCE_TYPE_USAGE: void Field::Show() const -> void [field.h <27:2 27:5>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> int [field.h <29:2 29:4>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> int [field.h <29:30 29:32>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> Field::Token [field.h <29:17 29:21>]
REFERENCE_TYPE_USAGE: bool Field::InRange(const Field::Move &) const -> bool [field.h <31:2 31:5>]
REFERENCE_TYPE_USAGE: bool Field::InRange(const Field::Move &) const -> Field::Move [field.h <31:22 31:25>]
REFERENCE_TYPE_USAGE: bool Field::IsEmpty(const Field::Move &) const -> bool [field.h <32:2 32:5>]
REFERENCE_TYPE_USAGE: bool Field::IsEmpty(const Field::Move &) const -> Field::Move [field.h <32:22 32:25>]
REFERENCE_TYPE_USAGE: bool Field::IsFull() const -> bool [field.h <33:2 33:5>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> void [field.h <35:2 35:5>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> Field::Move [field.h <35:23 35:26>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> Field::Token [field.h <35:35 35:39>]
REFERENCE_TYPE_USAGE: void Field::ClearMove(const Field::Move &) -> void [field.h <36:2 36:5>]
REFERENCE_TYPE_USAGE: void Field::ClearMove(const Field::Move &) -> Field::Move [field.h <36:24 36:27>]
REFERENCE_TYPE_USAGE: Field::Token * * Field::grid_ -> Field::Token [field.h <39:2 39:6>]
REFERENCE_TYPE_USAGE: int Field::left_ -> int [field.h <40:2 40:4>]
REFERENCE_INHERITANCE: Player -> GameObject [player.h <8:23 8:32>]
REFERENCE_TYPE_USAGE: void Player::Player(Field::Token, const char *) -> Field::Token [player.h <10:17 10:21>]
REFERENCE_TYPE_USAGE: void Player::Player(Field::Token, const char *) -> char [player.h <10:36 10:39>]
REFERENCE_OVERRIDE: void Player::~Player() -> void GameObject::~GameObject() [player.h <11:10 11:10>]
REFERENCE_TYPE_USAGE: Field::Move Player::Turn(const Field &) const -> Field::Move [player.h <13:17 13:20>]
REFERENCE_TYPE_USAGE: Field::Move Player::Turn(const Field &) const -> Field [player.h <13:34 13:38>]
REFERENCE_TYPE_USAGE: const Field::Token & Player::getToken() const -> Field::Token [player.h <15:15 15:19>]
REFERENCE_TYPE_USAGE: const char * Player::getName() const -> char [player.h <16:8 16:11>]
REFERENCE_TYPE_USAGE: const Field::Token Player::token_ -> Field::Token [player.h <19:15 19:19>]
REFERENCE_TYPE_USAGE: const char * Player::name_ -> char [player.h <20:8 20:11>]
REFERENCE_INHERITANCE: ArtificialPlayer -> Player [artificial_player.h <6:33 6:38>]
REFERENCE_TYPE_USAGE: void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) -> Field::Token [artificial_player.cpp <3:44 3:48>]
REFERENCE_TYPE_USAGE: void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) -> Field::Token [artificial_player.h <8:27 8:31>]
REFERENCE_TYPE_USAGE: void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) -> char [artificial_player.cpp <3:63 3:66>]
REFERENCE_TYPE_USAGE: void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) -> char [artificial_player.h <8:46 8:49>]
REFERENCE_OVERRIDE: void ArtificialPlayer::~ArtificialPlayer() -> void Player::~Player() [artificial_player.cpp <7:19 7:19>]
REFERENCE_OVERRIDE: void ArtificialPlayer::~ArtificialPlayer() -> void Player::~Player() [artificial_player.h <9:10 9:10>]
REFERENCE_OVERRIDE: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field::Move Player::Turn(const Field &) const [artificial_player.cpp <10:31 10:34>]
REFERENCE_OVERRIDE: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field::Move Player::Turn(const Field &) const [artificial_player.h <11:22 11:25>]
REFERENCE_TYPE_USAGE: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field::Move [artificial_player.cpp <10:8 10:11>]
REFERENCE_TYPE_USAGE: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field::Move [artificial_player.h <11:17 11:20>]
REFERENCE_TYPE_USAGE: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field [artificial_player.cpp <10:43 10:47>]
REFERENCE_TYPE_USAGE: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field [artificial_player.cpp <11:2 11:6>]
REFERENCE_TYPE_USAGE: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field [artificial_player.h <11:34 11:38>]
REFERENCE_TYPE_USAGE: Field::Move ArtificialPlayer::Node::move -> Field::Move [artificial_player.h <15:10 15:13>]
REFERENCE_TYPE_USAGE: int ArtificialPlayer::Node::value -> int [artificial_player.h <16:3 16:5>]
REFERENCE_USAGE: void ArtificialPlayer::Node::Node() -> Field::Move ArtificialPlayer::Node::move [artificial_player.h <14:9 14:12>]
REFERENCE_CALL: void ArtificialPlayer::Node::Node() -> void Field::Move::Move() [artificial_player.h <14:9 14:12>]
REFERENCE_USAGE: void ArtificialPlayer::Node::Node(ArtificialPlayer::Node &&) -> Field::Move ArtificialPlayer::Node::move [artificial_player.h <14:9 14:12>]
REFERENCE_CALL: void ArtificialPlayer::Node::Node(ArtificialPlayer::Node &&) -> void Field::Move::Move(Field::Move &&) [artificial_player.h <14:9 14:12>]
REFERENCE_TYPE_USAGE: void ArtificialPlayer::Node::Node(ArtificialPlayer::Node &&) -> ArtificialPlayer::Node [artificial_player.h <14:9 14:12>]
REFERENCE_USAGE: void ArtificialPlayer::Node::Node(ArtificialPlayer::Node &&) -> int ArtificialPlayer::Node::value [artificial_player.h <14:9 14:12>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> ArtificialPlayer::Node [artificial_player.cpp <16:19 16:22>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> ArtificialPlayer::Node [artificial_player.cpp <17:2 17:5>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> ArtificialPlayer::Node [artificial_player.h <19:2 19:5>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> Field [artificial_player.cpp <16:50 16:54>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> Field [artificial_player.h <19:15 19:19>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> Field::Token [artificial_player.cpp <16:71 16:75>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> Field::Token [artificial_player.h <19:36 19:40>]
REFERENCE_TYPE_USAGE: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> int [artificial_player.cpp <58:1 58:3>]
REFERENCE_TYPE_USAGE: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> int [artificial_player.h <21:2 21:4>]
REFERENCE_TYPE_USAGE: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> Field [artificial_player.cpp <58:39 58:43>]
REFERENCE_TYPE_USAGE: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> Field [artificial_player.h <21:22 21:26>]
REFERENCE_TYPE_USAGE: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> Field::Token [artificial_player.cpp <58:60 58:64>]
REFERENCE_TYPE_USAGE: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> Field::Token [artificial_player.h <21:43 21:47>]
REFERENCE_TYPE_USAGE: void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) -> Player [artificial_player.cpp <4:4 4:9>]
REFERENCE_CALL: void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) -> void Player::Player(Field::Token, const char *) [artificial_player.cpp <4:4 4:9>]
REFERENCE_CALL: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field Field::Clone() const [artificial_player.cpp <11:26 11:30>]
REFERENCE_TYPE_USAGE: Field::Move ArtificialPlayer::Turn(const Field &) const -> ArtificialPlayer::Node [artificial_player.cpp <12:2 12:5>]
REFERENCE_CALL: Field::Move ArtificialPlayer::Turn(const Field &) const -> ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const [artificial_player.cpp <12:14 12:19>]
REFERENCE_USAGE: Field::Move ArtificialPlayer::Turn(const Field &) const -> const Field::Token Player::token_ [artificial_player.cpp <12:33 12:38>]
REFERENCE_CALL: Field::Move ArtificialPlayer::Turn(const Field &) const -> void Field::Move::Move(const Field::Move &) [artificial_player.cpp <13:14 13:17>]
REFERENCE_USAGE: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field::Move ArtificialPlayer::Node::move [artificial_player.cpp <13:14 13:17>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> void ArtificialPlayer::Node::Node() [artificial_player.cpp <17:7 17:10>]
REFERENCE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int ArtificialPlayer::Node::value [artificial_player.cpp <18:7 18:11>]
REFERENCE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int ArtificialPlayer::Node::value [artificial_player.cpp <37:60 37:64>]
REFERENCE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int ArtificialPlayer::Node::value [artificial_player.cpp <42:26 42:30>]
REFERENCE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int ArtificialPlayer::Node::value [artificial_player.cpp <44:10 44:14>]
REFERENCE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int ArtificialPlayer::Node::value [artificial_player.cpp <46:34 46:38>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> Field::Move [artificial_player.cpp <20:9 20:12>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> void Field::Move::Move() [artificial_player.cpp <20:14 20:17>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int [artificial_player.cpp <21:2 21:4>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int [artificial_player.cpp <23:8 23:10>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int [artificial_player.cpp <26:9 26:11>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int [artificial_player.cpp <35:4 35:6>]
REFERENCE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int Field::Move::row [artificial_player.cpp <24:8 24:10>]
REFERENCE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int Field::Move::col [artificial_player.cpp <27:9 27:11>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> bool Field::IsEmpty(const Field::Move &) const [artificial_player.cpp <29:16 29:22>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> void Field::MakeMove(const Field::Move &, Field::Token) [artificial_player.cpp <33:10 33:17>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> int ArtificialPlayer::Evaluate(const Field &, Field::Token) const [artificial_player.cpp <35:20 35:27>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> bool Field::IsFull() const [artificial_player.cpp <36:30 36:35>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const [artificial_player.cpp <37:18 37:23>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> static Field::Token Field::Opponent(Field::Token) [artificial_player.cpp <37:40 37:47>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> void Field::ClearMove(const Field::Move &) [artificial_player.cpp <40:10 40:18>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> Field::Move & Field::Move::operator=(const Field::Move &) [artificial_player.cpp <43:15 43:15>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> Field::Move & Field::Move::operator=(const Field::Move &) [artificial_player.cpp <49:16 49:16>]
REFERENCE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> Field::Move ArtificialPlayer::Node::move [artificial_player.cpp <43:10 43:13>]
REFERENCE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> Field::Move ArtificialPlayer::Node::move [artificial_player.cpp <49:11 49:14>]
REFERENCE_CALL: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> void ArtificialPlayer::Node::Node(ArtificialPlayer::Node &&) [artificial_player.cpp <55:9 55:12>]
REFERENCE_CALL: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> int Field::SameInRow(Field::Token, int) const [artificial_player.cpp <59:13 59:21>]
REFERENCE_CALL: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> int Field::SameInRow(Field::Token, int) const [artificial_player.cpp <61:20 61:28>]
REFERENCE_CALL: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> int Field::SameInRow(Field::Token, int) const [artificial_player.cpp <63:20 63:28>]
REFERENCE_CALL: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> static Field::Token Field::Opponent(Field::Token) [artificial_player.cpp <61:38 61:45>]
LOCAL_SYMBOL: artificial_player.cpp<10:50> [artificial_player.cpp <10:50 10:54>]
LOCAL_SYMBOL: artificial_player.cpp<10:50> [artificial_player.cpp <11:20 11:24>]
LOCAL_SYMBOL: artificial_player.cpp<10:64> [artificial_player.cpp <10:64 10:64>]
LOCAL_SYMBOL: artificial_player.cpp<10:64> [artificial_player.cpp <14:1 14:1>]
LOCAL_SYMBOL: artificial_player.cpp<11:8> [artificial_player.cpp <11:8 11:16>]
LOCAL_SYMBOL: artificial_player.cpp<11:8> [artificial_player.cpp <12:22 12:30>]
LOCAL_SYMBOL: artificial_player.cpp<12:7> [artificial_player.cpp <12:7 12:10>]
LOCAL_SYMBOL: artificial_player.cpp<12:7> [artificial_player.cpp <13:9 13:12>]
LOCAL_SYMBOL: artificial_player.cpp<16:57> [artificial_player.cpp <16:57 16:61>]
LOCAL_SYMBOL: artificial_player.cpp<16:57> [artificial_player.cpp <29:10 29:14>]
LOCAL_SYMBOL: artificial_player.cpp<16:57> [artificial_player.cpp <33:4 33:8>]
LOCAL_SYMBOL: artificial_player.cpp<16:57> [artificial_player.cpp <35:30 35:34>]
LOCAL_SYMBOL: artificial_player.cpp<16:57> [artificial_player.cpp <36:24 36:28>]
LOCAL_SYMBOL: artificial_player.cpp<16:57> [artificial_player.cpp <37:26 37:30>]
LOCAL_SYMBOL: artificial_player.cpp<16:57> [artificial_player.cpp <40:4 40:8>]
LOCAL_SYMBOL: artificial_player.cpp<16:77> [artificial_player.cpp <16:77 16:81>]
LOCAL_SYMBOL: artificial_player.cpp<16:77> [artificial_player.cpp <33:26 33:30>]
LOCAL_SYMBOL: artificial_player.cpp<16:77> [artificial_player.cpp <35:37 35:41>]
LOCAL_SYMBOL: artificial_player.cpp<16:77> [artificial_player.cpp <37:50 37:54>]
LOCAL_SYMBOL: artificial_player.cpp<16:91> [artificial_player.cpp <16:91 16:91>]
LOCAL_SYMBOL: artificial_player.cpp<16:91> [artificial_player.cpp <56:1 56:1>]
LOCAL_SYMBOL: artificial_player.cpp<17:7> [artificial_player.cpp <17:7 17:10>]
LOCAL_SYMBOL: artificial_player.cpp<17:7> [artificial_player.cpp <18:2 18:5>]
LOCAL_SYMBOL: artificial_player.cpp<17:7> [artificial_player.cpp <42:21 42:24>]
LOCAL_SYMBOL: artificial_player.cpp<17:7> [artificial_player.cpp <43:5 43:8>]
LOCAL_SYMBOL: artificial_player.cpp<17:7> [artificial_player.cpp <44:5 44:8>]
LOCAL_SYMBOL: artificial_player.cpp<17:7> [artificial_player.cpp <46:29 46:32>]
LOCAL_SYMBOL: artificial_player.cpp<17:7> [artificial_player.cpp <49:6 49:9>]
LOCAL_SYMBOL: artificial_player.cpp<17:7> [artificial_player.cpp <55:9 55:12>]
LOCAL_SYMBOL: artificial_player.cpp<20:14> [artificial_player.cpp <20:14 20:17>]
LOCAL_SYMBOL: artificial_player.cpp<20:14> [artificial_player.cpp <24:3 24:6>]
LOCAL_SYMBOL: artificial_player.cpp<20:14> [artificial_player.cpp <27:4 27:7>]
LOCAL_SYMBOL: artificial_player.cpp<20:14> [artificial_player.cpp <29:25 29:28>]
LOCAL_SYMBOL: artificial_player.cpp<20:14> [artificial_player.cpp <33:20 33:23>]
LOCAL_SYMBOL: artificial_player.cpp<20:14> [artificial_player.cpp <40:21 40:24>]
LOCAL_SYMBOL: artificial_player.cpp<20:14> [artificial_player.cpp <43:17 43:20>]
LOCAL_SYMBOL: artificial_player.cpp<20:14> [artificial_player.cpp <49:18 49:21>]
LOCAL_SYMBOL: artificial_player.cpp<21:6> [artificial_player.cpp <21:6 21:13>]
LOCAL_SYMBOL: artificial_player.cpp<21:6> [artificial_player.cpp <45:5 45:12>]
LOCAL_SYMBOL: artificial_player.cpp<21:6> [artificial_player.cpp <47:5 47:12>]
LOCAL_SYMBOL: artificial_player.cpp<21:6> [artificial_player.cpp <48:14 48:21>]
LOCAL_SYMBOL: artificial_player.cpp<23:12> [artificial_player.cpp <23:12 23:12>]
LOCAL_SYMBOL: artificial_player.cpp<23:12> [artificial_player.cpp <23:19 23:19>]
LOCAL_SYMBOL: artificial_player.cpp<23:12> [artificial_player.cpp <23:26 23:26>]
LOCAL_SYMBOL: artificial_player.cpp<23:12> [artificial_player.cpp <24:14 24:14>]
LOCAL_SYMBOL: artificial_player.cpp<23:32> [artificial_player.cpp <23:32 23:32>]
LOCAL_SYMBOL: artificial_player.cpp<23:32> [artificial_player.cpp <53:2 53:2>]
LOCAL_SYMBOL: artificial_player.cpp<26:13> [artificial_player.cpp <26:13 26:13>]
LOCAL_SYMBOL: artificial_player.cpp<26:13> [artificial_player.cpp <26:20 26:20>]
LOCAL_SYMBOL: artificial_player.cpp<26:13> [artificial_player.cpp <26:27 26:27>]
LOCAL_SYMBOL: artificial_player.cpp<26:13> [artificial_player.cpp <27:15 27:15>]
LOCAL_SYMBOL: artificial_player.cpp<26:33> [artificial_player.cpp <26:33 26:33>]
LOCAL_SYMBOL: artificial_player.cpp<26:33> [artificial_player.cpp <52:3 52:3>]
LOCAL_SYMBOL: artificial_player.cpp<29:34> [artificial_player.cpp <29:34 29:34>]
LOCAL_SYMBOL: artificial_player.cpp<29:34> [artificial_player.cpp <31:4 31:4>]
LOCAL_SYMBOL: artificial_player.cpp<35:8> [artificial_player.cpp <35:8 35:16>]
LOCAL_SYMBOL: artificial_player.cpp<35:8> [artificial_player.cpp <36:10 36:18>]
LOCAL_SYMBOL: artificial_player.cpp<35:8> [artificial_player.cpp <37:5 37:13>]
LOCAL_SYMBOL: artificial_player.cpp<35:8> [artificial_player.cpp <42:9 42:17>]
LOCAL_SYMBOL: artificial_player.cpp<35:8> [artificial_player.cpp <44:18 44:26>]
LOCAL_SYMBOL: artificial_player.cpp<35:8> [artificial_player.cpp <46:16 46:24>]
LOCAL_SYMBOL: artificial_player.cpp<36:41> [artificial_player.cpp <36:41 36:41>]
LOCAL_SYMBOL: artificial_player.cpp<36:41> [artificial_player.cpp <38:4 38:4>]
LOCAL_SYMBOL: artificial_player.cpp<3:50> [artificial_player.cpp <3:50 3:54>]
LOCAL_SYMBOL: artificial_player.cpp<3:50> [artificial_player.cpp <4:12 4:16>]
LOCAL_SYMBOL: artificial_player.cpp<3:69> [artificial_player.cpp <3:69 3:72>]
LOCAL_SYMBOL: artificial_player.cpp<3:69> [artificial_player.cpp <4:19 4:22>]
LOCAL_SYMBOL: artificial_player.cpp<42:34> [artificial_player.cpp <42:34 42:34>]
LOCAL_SYMBOL: artificial_player.cpp<42:34> [artificial_player.cpp <46:4 46:4>]
LOCAL_SYMBOL: artificial_player.cpp<46:42> [artificial_player.cpp <46:42 46:42>]
LOCAL_SYMBOL: artificial_player.cpp<46:42> [artificial_player.cpp <51:4 51:4>]
LOCAL_SYMBOL: artificial_player.cpp<48:30> [artificial_player.cpp <48:30 48:30>]
LOCAL_SYMBOL: artificial_player.cpp<48:30> [artificial_player.cpp <50:5 50:5>]
LOCAL_SYMBOL: artificial_player.cpp<4:26> [artificial_player.cpp <4:26 4:26>]
LOCAL_SYMBOL: artificial_player.cpp<4:26> [artificial_player.cpp <5:1 5:1>]
LOCAL_SYMBOL: artificial_player.cpp<58:46> [artificial_player.cpp <58:46 58:50>]
LOCAL_SYMBOL: artificial_player.cpp<58:46> [artificial_player.cpp <59:7 59:11>]
LOCAL_SYMBOL: artificial_player.cpp<58:46> [artificial_player.cpp <61:14 61:18>]
LOCAL_SYMBOL: artificial_player.cpp<58:46> [artificial_player.cpp <63:14 63:18>]
LOCAL_SYMBOL: artificial_player.cpp<58:66> [artificial_player.cpp <58:66 58:70>]
LOCAL_SYMBOL: artificial_player.cpp<58:66> [artificial_player.cpp <59:24 59:28>]
LOCAL_SYMBOL: artificial_player.cpp<58:66> [artificial_player.cpp <61:48 61:52>]
LOCAL_SYMBOL: artificial_player.cpp<58:66> [artificial_player.cpp <63:31 63:35>]
LOCAL_SYMBOL: artificial_player.cpp<58:80> [artificial_player.cpp <58:80 58:80>]
LOCAL_SYMBOL: artificial_player.cpp<58:80> [artificial_player.cpp <67:1 67:1>]
LOCAL_SYMBOL: artificial_player.cpp<59:37> [artificial_player.cpp <59:37 59:37>]
LOCAL_SYMBOL: artificial_player.cpp<59:37> [artificial_player.cpp <61:2 61:2>]
LOCAL_SYMBOL: artificial_player.cpp<61:63> [artificial_player.cpp <61:63 61:63>]
LOCAL_SYMBOL: artificial_player.cpp<61:63> [artificial_player.cpp <63:2 63:2>]
LOCAL_SYMBOL: artificial_player.cpp<63:48> [artificial_player.cpp <63:48 63:48>]
LOCAL_SYMBOL: artificial_player.cpp<63:48> [artificial_player.cpp <65:2 65:2>]
LOCAL_SYMBOL: artificial_player.cpp<7:39> [artificial_player.cpp <7:39 7:39>]
LOCAL_SYMBOL: artificial_player.cpp<7:39> [artificial_player.cpp <8:1 8:1>]
LOCAL_SYMBOL: artificial_player.h<11:41> [artificial_player.h <11:41 11:45>]
LOCAL_SYMBOL: artificial_player.h<14:14> [artificial_player.h <14:14 14:14>]
LOCAL_SYMBOL: artificial_player.h<14:14> [artificial_player.h <17:2 17:2>]
LOCAL_SYMBOL: artificial_player.h<14:9> [artificial_player.h <14:9 14:12>]
LOCAL_SYMBOL: artificial_player.h<19:22> [artificial_player.h <19:22 19:26>]
LOCAL_SYMBOL: artificial_player.h<19:42> [artificial_player.h <19:42 19:46>]
LOCAL_SYMBOL: artificial_player.h<21:29> [artificial_player.h <21:29 21:33>]
LOCAL_SYMBOL: artificial_player.h<21:49> [artificial_player.h <21:49 21:53>]
LOCAL_SYMBOL: artificial_player.h<6:40> [artificial_player.h <6:40 6:40>]
LOCAL_SYMBOL: artificial_player.h<6:40> [artificial_player.h <22:1 22:1>]
LOCAL_SYMBOL: artificial_player.h<8:33> [artificial_player.h <8:33 8:37>]
LOCAL_SYMBOL: artificial_player.h<8:52> [artificial_player.h <8:52 8:55>]
LOCAL_SYMBOL: field.h<14:31> [field.h <14:31 14:35>]
LOCAL_SYMBOL: field.h<16:14> [field.h <16:14 16:14>]
LOCAL_SYMBOL: field.h<16:14> [field.h <19:2 19:2>]
LOCAL_SYMBOL: field.h<16:9> [field.h <16:9 16:12>]
LOCAL_SYMBOL: field.h<29:23> [field.h <29:23 29:27>]
LOCAL_SYMBOL: field.h<29:34> [field.h <29:34 29:39>]
LOCAL_SYMBOL: field.h<31:28> [field.h <31:28 31:31>]
LOCAL_SYMBOL: field.h<32:28> [field.h <32:28 32:31>]
LOCAL_SYMBOL: field.h<35:29> [field.h <35:29 35:32>]
LOCAL_SYMBOL: field.h<35:41> [field.h <35:41 35:45>]
LOCAL_SYMBOL: field.h<36:30> [field.h <36:30 36:33>]
LOCAL_SYMBOL: field.h<6:33> [field.h <6:33 6:33>]
LOCAL_SYMBOL: field.h<6:33> [field.h <41:1 41:1>]
LOCAL_SYMBOL: field.h<8:13> [field.h <8:13 8:13>]
LOCAL_SYMBOL: field.h<8:13> [field.h <12:2 12:2>]
LOCAL_SYMBOL: game_object.h<4:18> [game_object.h <4:18 4:18>]
LOCAL_SYMBOL: game_object.h<4:18> [game_object.h <8:1 8:1>]
LOCAL_SYMBOL: game_object.h<6:15> [game_object.h <6:15 6:15>]
LOCAL_SYMBOL: game_object.h<6:15> [game_object.h <6:16 6:16>]
LOCAL_SYMBOL: game_object.h<7:24> [game_object.h <7:24 7:24>]
LOCAL_SYMBOL: game_object.h<7:24> [game_object.h <7:25 7:25>]
LOCAL_SYMBOL: player.h<10:23> [player.h <10:23 10:27>]
LOCAL_SYMBOL: player.h<10:42> [player.h <10:42 10:45>]
LOCAL_SYMBOL: player.h<13:41> [player.h <13:41 13:45>]
LOCAL_SYMBOL: player.h<8:34> [player.h <8:34 8:34>]
LOCAL_SYMBOL: player.h<8:34> [player.h <21:1 21:1>]
COMMENT: comment [artificial_player.h <24:8 24:30>]
COMMENT: comment [player.h <23:8 23:19>]
COMMENT: comment [field.h <43:8 43:18>]
COMMENT: comment [game_object.h <10:8 10:24>]
