FILE: main.cpp
FILE: tictactoe.h
FILE: field.h
FILE: game_object.h
FILE: player.h
SYMBOL_MACRO: _TIC_TAC_TOE_ [tictactoe.h <2:9 2:21>]
SYMBOL_MACRO: _FIELD_ [field.h <2:9 2:15>]
SYMBOL_MACRO: _GAME_OBJECT_ [game_object.h <2:9 2:21>]
SYMBOL_MACRO: _PLAYER_ [player.h <2:9 2:16>]
SYMBOL_CLASS: GameObject [game_object.h <4:1 <4:7 4:16> 8:1>]
SYMBOL_METHOD: public void GameObject::GameObject() [game_object.h <6:2 <6:2 <6:2 6:11> 6:13> 6:16>]
SYMBOL_METHOD: public void GameObject::~GameObject() [game_object.h <7:2 <7:2 <7:10 7:20> 7:22> 7:25>]
SYMBOL_METHOD: public GameObject & GameObject::operator=(const GameObject &) [game_object.h <4:7 <4:7 4:16> 4:16>]
SYMBOL_METHOD: public void GameObject::GameObject(const GameObject &) [game_object.h <4:7 <4:7 4:16> 4:16>]
QUALIFIER: Field [tictactoe.h <17:24 17:28>]
QUALIFIER: Field [player.h <10:10 10:14>]
QUALIFIER: Field [player.h <13:10 13:14>]
QUALIFIER: Field [player.h <15:8 15:12>]
QUALIFIER: Field [player.h <19:8 19:12>]
SYMBOL_CLASS: Field [field.h <6:1 <6:7 6:11> 41:1>]
SYMBOL_ENUM: public Field::Token [field.h <8:2 <8:7 8:11> 12:2>]
SYMBOL_ENUM_CONSTANT: Field::Token::None [field.h <9:3 9:6>]
SYMBOL_ENUM_CONSTANT: Field::Token::PlayerA [field.h <10:3 10:9>]
SYMBOL_ENUM_CONSTANT: Field::Token::PlayerB [field.h <11:3 11:9>]
SYMBOL_METHOD: public static Field::Token Field::Opponent(Field::Token) [field.h <14:2 <14:15 14:22> 14:37>]
SYMBOL_STRUCT: public Field::Move [field.h <16:2 <16:9 16:12> 19:2>]
SYMBOL_FIELD: public int Field::Move::row [field.h <17:7 17:9>]
SYMBOL_BUILTIN_TYPE: int
SYMBOL_FIELD: public int Field::Move::col [field.h <18:7 18:9>]
SYMBOL_METHOD: public void Field::Field() [field.h <21:2 <21:2 21:6> 21:8>]
SYMBOL_METHOD: public void Field::~Field() [field.h <22:2 <22:2 22:7> 22:9>]
SYMBOL_METHOD: public Field Field::Clone() const [field.h <24:2 <24:8 24:12> 24:20>]
SYMBOL_METHOD: public void Field::Clear() [field.h <25:2 <25:7 25:11> 25:13>]
SYMBOL_BUILTIN_TYPE: void
SYMBOL_METHOD: public void Field::Show() const [field.h <27:2 <27:7 27:10> 27:18>]
SYMBOL_METHOD: public int Field::SameInRow(Field::Token, int) const [field.h <29:2 <29:6 29:14> 29:47>]
SYMBOL_METHOD: public bool Field::InRange(const Field::Move &) const [field.h <31:2 <31:7 31:13> 31:39>]
SYMBOL_BUILTIN_TYPE: bool
SYMBOL_METHOD: public bool Field::IsEmpty(const Field::Move &) const [field.h <32:2 <32:7 32:13> 32:39>]
SYMBOL_METHOD: public bool Field::IsFull() const [field.h <33:2 <33:7 33:12> 33:20>]
SYMBOL_METHOD: public void Field::MakeMove(const Field::Move &, Field::Token) [field.h <35:2 <35:7 35:14> 35:47>]
SYMBOL_METHOD: public void Field::ClearMove(const Field::Move &) [field.h <36:2 <36:7 36:15> 36:35>]
SYMBOL_FIELD: private Field::Token * * Field::grid_ [field.h <39:10 39:14>]
SYMBOL_FIELD: private int Field::left_ [field.h <40:6 40:10>]
SYMBOL_METHOD: public void Field::Field(const Field &) [field.h <6:7 <6:7 6:11> 6:11>]
SYMBOL_METHOD: public Field & Field::operator=(const Field &) [field.h <6:7 <6:7 6:11> 6:11>]
SYMBOL_CLASS: Player [player.h <8:1 <8:7 8:12> 21:1>]
SYMBOL_METHOD: public void Player::Player(Field::Token, const char *) [player.h <10:2 <10:2 10:7> 10:47>]
SYMBOL_BUILTIN_TYPE: char
SYMBOL_METHOD: public void Player::~Player() [player.h <11:2 <11:10 11:16> 11:18>]
SYMBOL_METHOD: public Field::Move Player::Turn(const Field &) const [player.h <13:2 <13:22 13:25> 13:57>]
SYMBOL_METHOD: public const Field::Token & Player::getToken() const [player.h <15:2 <15:22 15:29> 15:37>]
SYMBOL_METHOD: public const char * Player::getName() const [player.h <16:2 <16:14 16:20> 16:28>]
SYMBOL_FIELD: protected const Field::Token Player::token_ [player.h <19:21 19:26>]
SYMBOL_FIELD: protected const char * Player::name_ [player.h <20:14 20:18>]
SYMBOL_METHOD: public void Player::Player(const Player &) [player.h <8:7 <8:7 8:12> 8:12>]
SYMBOL_METHOD: public Player & Player::operator=(const Player &) [player.h <8:7 <8:7 8:12> 8:12>]
SYMBOL_CLASS: TicTacToe [tictactoe.h <7:1 <7:7 7:15> 21:1>]
SYMBOL_METHOD: public void TicTacToe::TicTacToe() [tictactoe.h <9:2 <9:2 9:10> 9:12>]
SYMBOL_METHOD: public void TicTacToe::~TicTacToe() [tictactoe.h <10:2 <10:2 10:11> 10:13>]
SYMBOL_METHOD: public bool TicTacToe::Start() [tictactoe.h <12:2 <12:7 12:11> 12:13>]
SYMBOL_METHOD: public void TicTacToe::Run() [tictactoe.h <13:2 <13:7 13:9> 13:11>]
SYMBOL_METHOD: private void TicTacToe::Reset() [tictactoe.h <16:2 <16:7 16:11> 16:13>]
SYMBOL_METHOD: private Player * TicTacToe::SelectPlayer(Field::Token, const char *) const [tictactoe.h <17:2 <17:10 17:21> 17:67>]
SYMBOL_FIELD: private Player * [] TicTacToe::players_ [tictactoe.h <19:10 19:17>]
SYMBOL_FIELD: private Field TicTacToe::field_ [tictactoe.h <20:8 20:13>]
SYMBOL_METHOD: public void TicTacToe::TicTacToe(const TicTacToe &) [tictactoe.h <7:7 <7:7 7:15> 7:15>]
SYMBOL_FUNCTION: int main() [main.cpp <3:1 <3:1 <3:5 3:8> 3:10> 11:1>]
REFERENCE_INCLUDE: main.cpp -> tictactoe.h [main.cpp <1:10 1:22>]
REFERENCE_MACRO_USAGE: tictactoe.h -> _TIC_TAC_TOE_ [tictactoe.h <1:9 1:21>]
REFERENCE_INCLUDE: tictactoe.h -> field.h [tictactoe.h <4:10 4:18>]
REFERENCE_MACRO_USAGE: field.h -> _FIELD_ [field.h <1:9 1:15>]
REFERENCE_INCLUDE: field.h -> game_object.h [field.h <4:10 4:24>]
REFERENCE_MACRO_USAGE: game_object.h -> _GAME_OBJECT_ [game_object.h <1:9 1:21>]
REFERENCE_INCLUDE: tictactoe.h -> player.h [tictactoe.h <5:10 5:19>]
REFERENCE_MACRO_USAGE: player.h -> _PLAYER_ [player.h <1:9 1:16>]
REFERENCE_INCLUDE: player.h -> field.h [player.h <4:10 4:18>]
REFERENCE_INCLUDE: player.h -> game_object.h [player.h <5:10 5:24>]
REFERENCE_INHERITANCE: Field -> GameObject [field.h <6:22 6:31>]
REFERENCE_TYPE_USAGE: static Field::Token Field::Opponent(Field::Token) -> Field::Token [field.h <14:9 14:13>]
REFERENCE_TYPE_USAGE: static Field::Token Field::Opponent(Field::Token) -> Field::Token [field.h <14:25 14:29>]
REFERENCE_TYPE_USAGE: int Field::Move::row -> int [field.h <17:3 17:5>]
REFERENCE_TYPE_USAGE: int Field::Move::col -> int [field.h <18:3 18:5>]
REFERENCE_OVERRIDE: void Field::~Field() -> void GameObject::~GameObject() [field.h <22:2 22:2>]
REFERENCE_TYPE_USAGE: Field Field::Clone() const -> Field [field.h <24:2 24:6>]
REFERENCE_TYPE_USAGE: void Field::Clear() -> void [field.h <25:2 25:5>]
REFERENCE_TYPE_USAGE: void Field::Show() const -> void [field.h <27:2 27:5>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> int [field.h <29:2 29:4>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> int [field.h <29:30 29:32>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> Field::Token [field.h <29:17 29:21>]
REFERENCE_TYPE_USAGE: bool Field::InRange(const Field::Move &) const -> bool [field.h <31:2 31:5>]
REFERENCE_TYPE_USAGE: bool Field::InRange(const Field::Move &) const -> Field::Move [field.h <31:22 31:25>]
REFERENCE_TYPE_USAGE: bool Field::IsEmpty(const Field::Move &) const -> bool [field.h <32:2 32:5>]
REFERENCE_TYPE_USAGE: bool Field::IsEmpty(const Field::Move &) const -> Field::Move [field.h <32:22 32:25>]
REFERENCE_TYPE_USAGE: bool Field::IsFull() const -> bool [field.h <33:2 33:5>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> void [field.h <35:2 35:5>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> Field::Move [field.h <35:23 35:26>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> Field::Token [field.h <35:35 35:39>]
REFERENCE_TYPE_USAGE: void Field::ClearMove(const Field::Move &) -> void [field.h <36:2 36:5>]
REFERENCE_TYPE_USAGE: void Field::ClearMove(const Field::Move &) -> Field::Move [field.h <36:24 36:27>]
REFERENCE_TYPE_USAGE: Field::Token * * Field::grid_ -> Field::Token [field.h <39:2 39:6>]
REFERENCE_TYPE_USAGE: int Field::left_ -> int [field.h <40:2 40:4>]
REFERENCE_INHERITANCE: Player -> GameObject [player.h <8:23 8:32>]
REFERENCE_TYPE_USAGE: void Player::Player(Field::Token, const char *) -> Field::Token [player.h <10:17 10:21>]
REFERENCE_TYPE_USAGE: void Player::Player(Field::Token, const char *) -> char [player.h <10:36 10:39>]
REFERENCE_OVERRIDE: void Player::~Player() -> void GameObject::~GameObject() [player.h <11:10 11:10>]
REFERENCE_TYPE_USAGE: Field::Move Player::Turn(const Field &) const -> Field::Move [player.h <13:17 13:20>]
REFERENCE_TYPE_USAGE: Field::Move Player::Turn(const Field &) const -> Field [player.h <13:34 13:38>]
REFERENCE_TYPE_USAGE: const Field::Token & Player::getToken() const -> Field::Token [player.h <15:15 15:19>]
REFERENCE_TYPE_USAGE: const char * Player::getName() const -> char [player.h <16:8 16:11>]
REFERENCE_TYPE_USAGE: const Field::Token Player::token_ -> Field::Token [player.h <19:15 19:19>]
REFERENCE_TYPE_USAGE: const char * Player::name_ -> char [player.h <20:8 20:11>]
REFERENCE_TYPE_USAGE: bool TicTacToe::Start() -> bool [tictactoe.h <12:2 12:5>]
REFERENCE_TYPE_USAGE: void TicTacToe::Run() -> void [tictactoe.h <13:2 13:5>]
REFERENCE_TYPE_USAGE: void TicTacToe::Reset() -> void [tictactoe.h <16:2 16:5>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> Player [tictactoe.h <17:2 17:7>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> Field::Token [tictactoe.h <17:31 17:35>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> char [tictactoe.h <17:50 17:53>]
REFERENCE_TYPE_USAGE: Player * [] TicTacToe::players_ -> Player [tictactoe.h <19:2 19:7>]
REFERENCE_TYPE_USAGE: Field TicTacToe::field_ -> Field [tictactoe.h <20:2 20:6>]
REFERENCE_TYPE_USAGE: int main() -> int [main.cpp <3:1 3:3>]
REFERENCE_TYPE_USAGE: int main() -> TicTacToe [main.cpp <4:2 4:10>]
REFERENCE_CALL: int main() -> void TicTacToe::TicTacToe() [main.cpp <4:12 4:20>]
REFERENCE_CALL: int main() -> bool TicTacToe::Start() [main.cpp <6:20 6:24>]
REFERENCE_CALL: int main() -> void TicTacToe::Run() [main.cpp <7:13 7:15>]
LOCAL_SYMBOL: field.h<14:31> [field.h <14:31 14:35>]
LOCAL_SYMBOL: field.h<16:14> [field.h <16:14 16:14>]
LOCAL_SYMBOL: field.h<16:14> [field.h <19:2 19:2>]
LOCAL_SYMBOL: field.h<29:23> [field.h <29:23 29:27>]
LOCAL_SYMBOL: field.h<29:34> [field.h <29:34 29:39>]
LOCAL_SYMBOL: field.h<31:28> [field.h <31:28 31:31>]
LOCAL_SYMBOL: field.h<32:28> [field.h <32:28 32:31>]
LOCAL_SYMBOL: field.h<35:29> [field.h <35:29 35:32>]
LOCAL_SYMBOL: field.h<35:41> [field.h <35:41 35:45>]
LOCAL_SYMBOL: field.h<36:30> [field.h <36:30 36:33>]
LOCAL_SYMBOL: field.h<6:33> [field.h <6:33 6:33>]
LOCAL_SYMBOL: field.h<6:33> [field.h <41:1 41:1>]
LOCAL_SYMBOL: field.h<8:13> [field.h <8:13 8:13>]
LOCAL_SYMBOL: field.h<8:13> [field.h <12:2 12:2>]
LOCAL_SYMBOL: game_object.h<4:18> [game_object.h <4:18 4:18>]
LOCAL_SYMBOL: game_object.h<4:18> [game_object.h <8:1 8:1>]
LOCAL_SYMBOL: game_object.h<6:15> [game_object.h <6:15 6:15>]
LOCAL_SYMBOL: game_object.h<6:15> [game_object.h <6:16 6:16>]
LOCAL_SYMBOL: game_object.h<7:24> [game_object.h <7:24 7:24>]
LOCAL_SYMBOL: game_object.h<7:24> [game_object.h <7:25 7:25>]
LOCAL_SYMBOL: main.cpp<3:12> [main.cpp <3:12 3:12>]
LOCAL_SYMBOL: main.cpp<3:12> [main.cpp <11:1 11:1>]
LOCAL_SYMBOL: main.cpp<4:12> [main.cpp <4:12 4:20>]
LOCAL_SYMBOL: main.cpp<4:12> [main.cpp <6:10 6:18>]
LOCAL_SYMBOL: main.cpp<4:12> [main.cpp <7:3 7:11>]
LOCAL_SYMBOL: main.cpp<6:30> [main.cpp <6:30 6:30>]
LOCAL_SYMBOL: main.cpp<6:30> [main.cpp <8:2 8:2>]
LOCAL_SYMBOL: player.h<10:23> [player.h <10:23 10:27>]
LOCAL_SYMBOL: player.h<10:42> [player.h <10:42 10:45>]
LOCAL_SYMBOL: player.h<13:41> [player.h <13:41 13:45>]
LOCAL_SYMBOL: player.h<8:34> [player.h <8:34 8:34>]
LOCAL_SYMBOL: player.h<8:34> [player.h <21:1 21:1>]
LOCAL_SYMBOL: tictactoe.h<17:37> [tictactoe.h <17:37 17:41>]
LOCAL_SYMBOL: tictactoe.h<17:56> [tictactoe.h <17:56 17:59>]
LOCAL_SYMBOL: tictactoe.h<7:17> [tictactoe.h <7:17 7:17>]
LOCAL_SYMBOL: tictactoe.h<7:17> [tictactoe.h <21:1 21:1>]
COMMENT: comment [tictactoe.h <23:8 23:24>]
COMMENT: comment [field.h <43:8 43:18>]
COMMENT: comment [game_object.h <10:8 10:24>]
COMMENT: comment [player.h <23:8 23:19>]
