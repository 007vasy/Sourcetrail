FILE: tictactoe.cpp
FILE: tictactoe.h
FILE: field.h
FILE: game_object.h
FILE: player.h
FILE: artificial_player.h
FILE: human_player.h
FILE: io.h
SYMBOL_MACRO: _TIC_TAC_TOE_ [tictactoe.h <2:9 2:21>]
SYMBOL_MACRO: _FIELD_ [field.h <2:9 2:15>]
SYMBOL_MACRO: _GAME_OBJECT_ [game_object.h <2:9 2:21>]
SYMBOL_MACRO: _PLAYER_ [player.h <2:9 2:16>]
SYMBOL_MACRO: _ARTIFICIAL_PLAYER_ [artificial_player.h <2:9 2:27>]
SYMBOL_MACRO: _HUMAN_PLAYER_ [human_player.h <2:9 2:22>]
SYMBOL_MACRO: _IO_ [io.h <2:9 2:12>]
SYMBOL_CLASS: GameObject [game_object.h <4:1 <4:7 4:16> 8:1>]
SYMBOL_METHOD: public void GameObject::GameObject() [game_object.h <6:2 <6:2 <6:2 6:11> 6:13> 6:16>]
SYMBOL_METHOD: public void GameObject::~GameObject() [game_object.h <7:2 <7:2 <7:10 7:20> 7:22> 7:25>]
SYMBOL_METHOD: public GameObject & GameObject::operator=(const GameObject &) [game_object.h <4:7 <4:7 4:16> 4:16>]
SYMBOL_METHOD: public void GameObject::GameObject(const GameObject &) [game_object.h <4:7 <4:7 4:16> 4:16>]
QUALIFIER: Field [tictactoe.cpp <21:30 21:34>]
QUALIFIER: Field [tictactoe.cpp <26:30 26:34>]
QUALIFIER: Field [tictactoe.cpp <69:34 69:38>]
QUALIFIER: Field [tictactoe.h <17:24 17:28>]
QUALIFIER: Field [player.h <10:10 10:14>]
QUALIFIER: Field [player.h <13:10 13:14>]
QUALIFIER: Field [player.h <15:8 15:12>]
QUALIFIER: Field [player.h <19:8 19:12>]
QUALIFIER: Field [artificial_player.h <8:20 8:24>]
QUALIFIER: Field [artificial_player.h <11:10 11:14>]
QUALIFIER: Field [artificial_player.h <15:3 15:7>]
QUALIFIER: Field [artificial_player.h <19:29 19:33>]
QUALIFIER: Field [artificial_player.h <21:36 21:40>]
QUALIFIER: Field [human_player.h <9:15 9:19>]
QUALIFIER: Field [human_player.h <12:10 12:14>]
QUALIFIER: Field [human_player.h <15:2 15:6>]
QUALIFIER: Field [human_player.h <17:40 17:44>]
SYMBOL_CLASS: Field [field.h <6:1 <6:7 6:11> 41:1>]
SYMBOL_ENUM: public Field::Token [field.h <8:2 <8:7 8:11> 12:2>]
SYMBOL_ENUM_CONSTANT: Field::Token::None [field.h <9:3 9:6>]
SYMBOL_ENUM_CONSTANT: Field::Token::PlayerA [field.h <10:3 10:9>]
SYMBOL_ENUM_CONSTANT: Field::Token::PlayerB [field.h <11:3 11:9>]
SYMBOL_METHOD: public static Field::Token Field::Opponent(Field::Token) [field.h <14:2 <14:15 14:22> 14:37>]
SYMBOL_STRUCT: public Field::Move [field.h <16:2 <16:9 16:12> 19:2>]
SYMBOL_FIELD: public int Field::Move::row [field.h <17:7 17:9>]
SYMBOL_BUILTIN_TYPE: int
SYMBOL_FIELD: public int Field::Move::col [field.h <18:7 18:9>]
SYMBOL_METHOD: public void Field::Move::~Move() [field.h <16:9 <16:9 16:12> 16:12>]
SYMBOL_METHOD: public void Field::Field() [field.h <21:2 <21:2 21:6> 21:8>]
SYMBOL_METHOD: public void Field::~Field() [field.h <22:2 <22:2 22:7> 22:9>]
SYMBOL_METHOD: public Field Field::Clone() const [field.h <24:2 <24:8 24:12> 24:20>]
SYMBOL_METHOD: public void Field::Clear() [field.h <25:2 <25:7 25:11> 25:13>]
SYMBOL_BUILTIN_TYPE: void
SYMBOL_METHOD: public void Field::Show() const [field.h <27:2 <27:7 27:10> 27:18>]
SYMBOL_METHOD: public int Field::SameInRow(Field::Token, int) const [field.h <29:2 <29:6 29:14> 29:47>]
SYMBOL_METHOD: public bool Field::InRange(const Field::Move &) const [field.h <31:2 <31:7 31:13> 31:39>]
SYMBOL_BUILTIN_TYPE: bool
SYMBOL_METHOD: public bool Field::IsEmpty(const Field::Move &) const [field.h <32:2 <32:7 32:13> 32:39>]
SYMBOL_METHOD: public bool Field::IsFull() const [field.h <33:2 <33:7 33:12> 33:20>]
SYMBOL_METHOD: public void Field::MakeMove(const Field::Move &, Field::Token) [field.h <35:2 <35:7 35:14> 35:47>]
SYMBOL_METHOD: public void Field::ClearMove(const Field::Move &) [field.h <36:2 <36:7 36:15> 36:35>]
SYMBOL_FIELD: private Field::Token * * Field::grid_ [field.h <39:10 39:14>]
SYMBOL_FIELD: private int Field::left_ [field.h <40:6 40:10>]
SYMBOL_METHOD: public void Field::Field(const Field &) [field.h <6:7 <6:7 6:11> 6:11>]
SYMBOL_METHOD: public Field & Field::operator=(const Field &) [field.h <6:7 <6:7 6:11> 6:11>]
SYMBOL_CLASS: Player [player.h <8:1 <8:7 8:12> 21:1>]
SYMBOL_METHOD: public void Player::Player(Field::Token, const char *) [player.h <10:2 <10:2 10:7> 10:47>]
SYMBOL_BUILTIN_TYPE: char
SYMBOL_METHOD: public void Player::~Player() [player.h <11:2 <11:10 11:16> 11:18>]
SYMBOL_METHOD: public Field::Move Player::Turn(const Field &) const [player.h <13:2 <13:22 13:25> 13:57>]
SYMBOL_METHOD: public const Field::Token & Player::getToken() const [player.h <15:2 <15:22 15:29> 15:37>]
SYMBOL_METHOD: public const char * Player::getName() const [player.h <16:2 <16:14 16:20> 16:28>]
SYMBOL_FIELD: protected const Field::Token Player::token_ [player.h <19:21 19:26>]
SYMBOL_FIELD: protected const char * Player::name_ [player.h <20:14 20:18>]
SYMBOL_METHOD: public void Player::Player(const Player &) [player.h <8:7 <8:7 8:12> 8:12>]
SYMBOL_METHOD: public Player & Player::operator=(const Player &) [player.h <8:7 <8:7 8:12> 8:12>]
QUALIFIER: TicTacToe [tictactoe.cpp <7:1 7:9>]
QUALIFIER: TicTacToe [tictactoe.cpp <12:1 12:9>]
QUALIFIER: TicTacToe [tictactoe.cpp <17:6 17:14>]
QUALIFIER: TicTacToe [tictactoe.cpp <35:6 35:14>]
QUALIFIER: TicTacToe [tictactoe.cpp <58:6 58:14>]
QUALIFIER: TicTacToe [tictactoe.cpp <69:9 69:17>]
SYMBOL_CLASS: TicTacToe [tictactoe.h <7:1 <7:7 7:15> 21:1>]
SYMBOL_METHOD: public void TicTacToe::TicTacToe() [tictactoe.cpp <7:1 <7:12 7:20> 10:1>]
SYMBOL_METHOD: public void TicTacToe::TicTacToe() [tictactoe.h <7:1 <9:2 <9:2 9:10> 9:12> 10:1>]
SYMBOL_METHOD: public void TicTacToe::~TicTacToe() [tictactoe.cpp <12:1 <12:12 12:21> 14:1>]
SYMBOL_METHOD: public void TicTacToe::~TicTacToe() [tictactoe.h <10:2 <10:2 10:11> 10:13>]
SYMBOL_METHOD: public bool TicTacToe::Start() [tictactoe.cpp <17:1 <17:17 17:21> 33:1>]
SYMBOL_METHOD: public bool TicTacToe::Start() [tictactoe.h <12:2 <12:7 12:11> 12:13>]
SYMBOL_METHOD: public void TicTacToe::Run() [tictactoe.cpp <35:1 <35:17 35:19> 56:1>]
SYMBOL_METHOD: public void TicTacToe::Run() [tictactoe.h <13:2 <13:7 13:9> 13:11>]
SYMBOL_METHOD: private void TicTacToe::Reset() [tictactoe.cpp <58:1 <58:17 58:21> 67:1>]
SYMBOL_METHOD: private void TicTacToe::Reset() [tictactoe.h <16:2 <16:7 16:11> 16:13>]
SYMBOL_METHOD: private Player * TicTacToe::SelectPlayer(Field::Token, const char *) const [tictactoe.cpp <69:1 <69:20 69:31> 86:1>]
SYMBOL_METHOD: private Player * TicTacToe::SelectPlayer(Field::Token, const char *) const [tictactoe.h <17:2 <17:10 17:21> 17:67>]
SYMBOL_FIELD: private Player * [] TicTacToe::players_ [tictactoe.h <19:10 19:17>]
SYMBOL_FIELD: private Field TicTacToe::field_ [tictactoe.h <20:8 20:13>]
SYMBOL_METHOD: public void TicTacToe::TicTacToe(const TicTacToe &) [tictactoe.h <7:7 <7:7 7:15> 7:15>]
SYMBOL_CLASS: ArtificialPlayer [artificial_player.h <6:1 <6:7 6:22> 22:1>]
SYMBOL_METHOD: public void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) [artificial_player.h <8:2 <8:2 8:17> 8:58>]
SYMBOL_METHOD: public void ArtificialPlayer::~ArtificialPlayer() [artificial_player.h <9:2 <9:10 9:26> 9:28>]
SYMBOL_METHOD: public Field::Move ArtificialPlayer::Turn(const Field &) const [artificial_player.h <11:2 <11:22 11:25> 11:53>]
SYMBOL_STRUCT: private ArtificialPlayer::Node [artificial_player.h <14:2 <14:9 14:12> 17:2>]
SYMBOL_FIELD: public Field::Move ArtificialPlayer::Node::move [artificial_player.h <15:15 15:18>]
SYMBOL_FIELD: public int ArtificialPlayer::Node::value [artificial_player.h <16:7 16:11>]
SYMBOL_METHOD: private ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const [artificial_player.h <19:2 <19:7 19:12> 19:54>]
SYMBOL_METHOD: private int ArtificialPlayer::Evaluate(const Field &, Field::Token) const [artificial_player.h <21:2 <21:6 21:13> 21:61>]
SYMBOL_METHOD: public void ArtificialPlayer::ArtificialPlayer(const ArtificialPlayer &) [artificial_player.h <6:7 <6:7 6:22> 6:22>]
SYMBOL_METHOD: public ArtificialPlayer & ArtificialPlayer::operator=(const ArtificialPlayer &) [artificial_player.h <6:7 <6:7 6:22> 6:22>]
SYMBOL_CLASS: HumanPlayer [human_player.h <7:1 <7:7 7:17> 18:1>]
SYMBOL_METHOD: public void HumanPlayer::HumanPlayer(Field::Token, const char *) [human_player.h <9:2 <9:2 9:12> 9:53>]
SYMBOL_METHOD: public void HumanPlayer::~HumanPlayer() [human_player.h <10:2 <10:10 10:21> 10:23>]
SYMBOL_METHOD: public Field::Move HumanPlayer::Turn(const Field &) const [human_player.h <12:2 <12:22 12:25> 12:53>]
SYMBOL_METHOD: private Field::Move HumanPlayer::Input() const [human_player.h <15:2 <15:14 15:18> 15:26>]
SYMBOL_METHOD: private bool HumanPlayer::Check(const Field &, const Field::Move &) const [human_player.h <17:2 <17:7 17:11> 17:64>]
SYMBOL_METHOD: public void HumanPlayer::HumanPlayer(const HumanPlayer &) [human_player.h <7:7 <7:7 7:17> 7:17>]
SYMBOL_METHOD: public HumanPlayer & HumanPlayer::operator=(const HumanPlayer &) [human_player.h <7:7 <7:7 7:17> 7:17>]
QUALIFIER: io [tictactoe.cpp <19:2 19:3>]
QUALIFIER: io [tictactoe.cpp <31:2 31:3>]
QUALIFIER: io [tictactoe.cpp <47:4 47:5>]
QUALIFIER: io [tictactoe.cpp <48:4 48:5>]
QUALIFIER: io [tictactoe.cpp <55:2 55:3>]
QUALIFIER: io [tictactoe.cpp <73:3 73:4>]
QUALIFIER: io [tictactoe.cpp <74:3 74:4>]
QUALIFIER: io [tictactoe.cpp <75:3 75:4>]
QUALIFIER: io [tictactoe.cpp <77:15 77:16>]
QUALIFIER: io [tictactoe.cpp <83:14 83:15>]
SYMBOL_NAMESPACE: io [io.h <4:1 <4:11 4:12> 11:1>]
SYMBOL_FUNCTION: int io::numberIn() [io.h <6:2 <6:6 6:13> 6:15>]
SYMBOL_FUNCTION: void io::numberOut(int) [io.h <7:2 <7:7 7:15> 7:24>]
SYMBOL_FUNCTION: void io::stringOut(const char *) [io.h <9:2 <9:7 9:15> 9:32>]
REFERENCE_INCLUDE: tictactoe.cpp -> tictactoe.h [tictactoe.cpp <1:10 1:22>]
REFERENCE_MACRO_USAGE: tictactoe.h -> _TIC_TAC_TOE_ [tictactoe.h <1:9 1:21>]
REFERENCE_INCLUDE: tictactoe.h -> field.h [tictactoe.h <4:10 4:18>]
REFERENCE_MACRO_USAGE: field.h -> _FIELD_ [field.h <1:9 1:15>]
REFERENCE_INCLUDE: field.h -> game_object.h [field.h <4:10 4:24>]
REFERENCE_MACRO_USAGE: game_object.h -> _GAME_OBJECT_ [game_object.h <1:9 1:21>]
REFERENCE_INCLUDE: tictactoe.h -> player.h [tictactoe.h <5:10 5:19>]
REFERENCE_MACRO_USAGE: player.h -> _PLAYER_ [player.h <1:9 1:16>]
REFERENCE_INCLUDE: player.h -> field.h [player.h <4:10 4:18>]
REFERENCE_INCLUDE: player.h -> game_object.h [player.h <5:10 5:24>]
REFERENCE_INCLUDE: tictactoe.cpp -> artificial_player.h [tictactoe.cpp <3:10 3:30>]
REFERENCE_MACRO_USAGE: artificial_player.h -> _ARTIFICIAL_PLAYER_ [artificial_player.h <1:9 1:27>]
REFERENCE_INCLUDE: artificial_player.h -> player.h [artificial_player.h <4:10 4:19>]
REFERENCE_INCLUDE: tictactoe.cpp -> human_player.h [tictactoe.cpp <4:10 4:25>]
REFERENCE_MACRO_USAGE: human_player.h -> _HUMAN_PLAYER_ [human_player.h <1:9 1:22>]
REFERENCE_INCLUDE: human_player.h -> player.h [human_player.h <4:10 4:19>]
REFERENCE_INCLUDE: tictactoe.cpp -> io.h [tictactoe.cpp <5:10 5:15>]
REFERENCE_MACRO_USAGE: io.h -> _IO_ [io.h <1:9 1:12>]
REFERENCE_INHERITANCE: Field -> GameObject [field.h <6:22 6:31>]
REFERENCE_TYPE_USAGE: static Field::Token Field::Opponent(Field::Token) -> Field::Token [field.h <14:9 14:13>]
REFERENCE_TYPE_USAGE: static Field::Token Field::Opponent(Field::Token) -> Field::Token [field.h <14:25 14:29>]
REFERENCE_TYPE_USAGE: int Field::Move::row -> int [field.h <17:3 17:5>]
REFERENCE_TYPE_USAGE: int Field::Move::col -> int [field.h <18:3 18:5>]
REFERENCE_OVERRIDE: void Field::~Field() -> void GameObject::~GameObject() [field.h <22:2 22:2>]
REFERENCE_TYPE_USAGE: Field Field::Clone() const -> Field [field.h <24:2 24:6>]
REFERENCE_TYPE_USAGE: void Field::Clear() -> void [field.h <25:2 25:5>]
REFERENCE_TYPE_USAGE: void Field::Show() const -> void [field.h <27:2 27:5>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> int [field.h <29:2 29:4>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> int [field.h <29:30 29:32>]
REFERENCE_TYPE_USAGE: int Field::SameInRow(Field::Token, int) const -> Field::Token [field.h <29:17 29:21>]
REFERENCE_TYPE_USAGE: bool Field::InRange(const Field::Move &) const -> bool [field.h <31:2 31:5>]
REFERENCE_TYPE_USAGE: bool Field::InRange(const Field::Move &) const -> Field::Move [field.h <31:22 31:25>]
REFERENCE_TYPE_USAGE: bool Field::IsEmpty(const Field::Move &) const -> bool [field.h <32:2 32:5>]
REFERENCE_TYPE_USAGE: bool Field::IsEmpty(const Field::Move &) const -> Field::Move [field.h <32:22 32:25>]
REFERENCE_TYPE_USAGE: bool Field::IsFull() const -> bool [field.h <33:2 33:5>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> void [field.h <35:2 35:5>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> Field::Move [field.h <35:23 35:26>]
REFERENCE_TYPE_USAGE: void Field::MakeMove(const Field::Move &, Field::Token) -> Field::Token [field.h <35:35 35:39>]
REFERENCE_TYPE_USAGE: void Field::ClearMove(const Field::Move &) -> void [field.h <36:2 36:5>]
REFERENCE_TYPE_USAGE: void Field::ClearMove(const Field::Move &) -> Field::Move [field.h <36:24 36:27>]
REFERENCE_TYPE_USAGE: Field::Token * * Field::grid_ -> Field::Token [field.h <39:2 39:6>]
REFERENCE_TYPE_USAGE: int Field::left_ -> int [field.h <40:2 40:4>]
REFERENCE_INHERITANCE: Player -> GameObject [player.h <8:23 8:32>]
REFERENCE_TYPE_USAGE: void Player::Player(Field::Token, const char *) -> Field::Token [player.h <10:17 10:21>]
REFERENCE_TYPE_USAGE: void Player::Player(Field::Token, const char *) -> char [player.h <10:36 10:39>]
REFERENCE_OVERRIDE: void Player::~Player() -> void GameObject::~GameObject() [player.h <11:10 11:10>]
REFERENCE_TYPE_USAGE: Field::Move Player::Turn(const Field &) const -> Field::Move [player.h <13:17 13:20>]
REFERENCE_TYPE_USAGE: Field::Move Player::Turn(const Field &) const -> Field [player.h <13:34 13:38>]
REFERENCE_TYPE_USAGE: const Field::Token & Player::getToken() const -> Field::Token [player.h <15:15 15:19>]
REFERENCE_TYPE_USAGE: const char * Player::getName() const -> char [player.h <16:8 16:11>]
REFERENCE_TYPE_USAGE: const Field::Token Player::token_ -> Field::Token [player.h <19:15 19:19>]
REFERENCE_TYPE_USAGE: const char * Player::name_ -> char [player.h <20:8 20:11>]
REFERENCE_TYPE_USAGE: bool TicTacToe::Start() -> bool [tictactoe.cpp <17:1 17:4>]
REFERENCE_TYPE_USAGE: bool TicTacToe::Start() -> bool [tictactoe.h <12:2 12:5>]
REFERENCE_TYPE_USAGE: void TicTacToe::Run() -> void [tictactoe.cpp <35:1 35:4>]
REFERENCE_TYPE_USAGE: void TicTacToe::Run() -> void [tictactoe.h <13:2 13:5>]
REFERENCE_TYPE_USAGE: void TicTacToe::Reset() -> void [tictactoe.cpp <58:1 58:4>]
REFERENCE_TYPE_USAGE: void TicTacToe::Reset() -> void [tictactoe.h <16:2 16:5>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> Player [tictactoe.cpp <69:1 69:6>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> Player [tictactoe.h <17:2 17:7>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> Field::Token [tictactoe.cpp <69:41 69:45>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> Field::Token [tictactoe.h <17:31 17:35>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> char [tictactoe.cpp <69:60 69:63>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> char [tictactoe.h <17:50 17:53>]
REFERENCE_TYPE_USAGE: Player * [] TicTacToe::players_ -> Player [tictactoe.h <19:2 19:7>]
REFERENCE_TYPE_USAGE: Field TicTacToe::field_ -> Field [tictactoe.h <20:2 20:6>]
REFERENCE_INHERITANCE: ArtificialPlayer -> Player [artificial_player.h <6:33 6:38>]
REFERENCE_TYPE_USAGE: void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) -> Field::Token [artificial_player.h <8:27 8:31>]
REFERENCE_TYPE_USAGE: void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) -> char [artificial_player.h <8:46 8:49>]
REFERENCE_OVERRIDE: void ArtificialPlayer::~ArtificialPlayer() -> void Player::~Player() [artificial_player.h <9:10 9:10>]
REFERENCE_OVERRIDE: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field::Move Player::Turn(const Field &) const [artificial_player.h <11:22 11:25>]
REFERENCE_TYPE_USAGE: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field::Move [artificial_player.h <11:17 11:20>]
REFERENCE_TYPE_USAGE: Field::Move ArtificialPlayer::Turn(const Field &) const -> Field [artificial_player.h <11:34 11:38>]
REFERENCE_TYPE_USAGE: Field::Move ArtificialPlayer::Node::move -> Field::Move [artificial_player.h <15:10 15:13>]
REFERENCE_TYPE_USAGE: int ArtificialPlayer::Node::value -> int [artificial_player.h <16:3 16:5>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> ArtificialPlayer::Node [artificial_player.h <19:2 19:5>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> Field [artificial_player.h <19:15 19:19>]
REFERENCE_TYPE_USAGE: ArtificialPlayer::Node ArtificialPlayer::MinMax(Field &, Field::Token) const -> Field::Token [artificial_player.h <19:36 19:40>]
REFERENCE_TYPE_USAGE: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> int [artificial_player.h <21:2 21:4>]
REFERENCE_TYPE_USAGE: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> Field [artificial_player.h <21:22 21:26>]
REFERENCE_TYPE_USAGE: int ArtificialPlayer::Evaluate(const Field &, Field::Token) const -> Field::Token [artificial_player.h <21:43 21:47>]
REFERENCE_INHERITANCE: HumanPlayer -> Player [human_player.h <7:28 7:33>]
REFERENCE_TYPE_USAGE: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> Field::Token [human_player.h <9:22 9:26>]
REFERENCE_TYPE_USAGE: void HumanPlayer::HumanPlayer(Field::Token, const char *) -> char [human_player.h <9:41 9:44>]
REFERENCE_OVERRIDE: void HumanPlayer::~HumanPlayer() -> void Player::~Player() [human_player.h <10:10 10:10>]
REFERENCE_OVERRIDE: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move Player::Turn(const Field &) const [human_player.h <12:22 12:25>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> Field::Move [human_player.h <12:17 12:20>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Turn(const Field &) const -> Field [human_player.h <12:34 12:38>]
REFERENCE_TYPE_USAGE: Field::Move HumanPlayer::Input() const -> Field::Move [human_player.h <15:9 15:12>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> bool [human_player.h <17:2 17:5>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> Field [human_player.h <17:20 17:24>]
REFERENCE_TYPE_USAGE: bool HumanPlayer::Check(const Field &, const Field::Move &) const -> Field::Move [human_player.h <17:47 17:50>]
REFERENCE_TYPE_USAGE: int io::numberIn() -> int [io.h <6:2 6:4>]
REFERENCE_TYPE_USAGE: void io::numberOut(int) -> void [io.h <7:2 7:5>]
REFERENCE_TYPE_USAGE: void io::numberOut(int) -> int [io.h <7:17 7:19>]
REFERENCE_TYPE_USAGE: void io::stringOut(const char *) -> void [io.h <9:2 9:5>]
REFERENCE_TYPE_USAGE: void io::stringOut(const char *) -> char [io.h <9:23 9:26>]
REFERENCE_USAGE: void TicTacToe::TicTacToe() -> Field TicTacToe::field_ [tictactoe.cpp <7:12 7:20>]
REFERENCE_CALL: void TicTacToe::TicTacToe() -> void Field::Field() [tictactoe.cpp <7:12 7:20>]
REFERENCE_USAGE: void TicTacToe::TicTacToe() -> Player * [] TicTacToe::players_ [tictactoe.cpp <8:2 8:9>]
REFERENCE_USAGE: void TicTacToe::TicTacToe() -> Player * [] TicTacToe::players_ [tictactoe.cpp <9:2 9:9>]
REFERENCE_CALL: void TicTacToe::~TicTacToe() -> void TicTacToe::Reset() [tictactoe.cpp <13:2 13:6>]
REFERENCE_CALL: bool TicTacToe::Start() -> void TicTacToe::Reset() [tictactoe.cpp <18:2 18:6>]
REFERENCE_CALL: bool TicTacToe::Start() -> void io::stringOut(const char *) [tictactoe.cpp <19:6 19:14>]
REFERENCE_CALL: bool TicTacToe::Start() -> void io::stringOut(const char *) [tictactoe.cpp <31:6 31:14>]
REFERENCE_USAGE: bool TicTacToe::Start() -> Player * [] TicTacToe::players_ [tictactoe.cpp <21:2 21:9>]
REFERENCE_USAGE: bool TicTacToe::Start() -> Player * [] TicTacToe::players_ [tictactoe.cpp <22:8 22:15>]
REFERENCE_USAGE: bool TicTacToe::Start() -> Player * [] TicTacToe::players_ [tictactoe.cpp <26:2 26:9>]
REFERENCE_USAGE: bool TicTacToe::Start() -> Player * [] TicTacToe::players_ [tictactoe.cpp <27:8 27:15>]
REFERENCE_CALL: bool TicTacToe::Start() -> Player * TicTacToe::SelectPlayer(Field::Token, const char *) const [tictactoe.cpp <21:16 21:27>]
REFERENCE_CALL: bool TicTacToe::Start() -> Player * TicTacToe::SelectPlayer(Field::Token, const char *) const [tictactoe.cpp <26:16 26:27>]
REFERENCE_USAGE: bool TicTacToe::Start() -> Field::Token::PlayerA [tictactoe.cpp <21:37 21:43>]
REFERENCE_USAGE: bool TicTacToe::Start() -> Field::Token::PlayerB [tictactoe.cpp <26:37 26:43>]
REFERENCE_CALL: void TicTacToe::Run() -> void Field::Show() const [tictactoe.cpp <36:9 36:12>]
REFERENCE_CALL: void TicTacToe::Run() -> void Field::Show() const [tictactoe.cpp <44:10 44:13>]
REFERENCE_USAGE: void TicTacToe::Run() -> Field TicTacToe::field_ [tictactoe.cpp <36:2 36:7>]
REFERENCE_USAGE: void TicTacToe::Run() -> Field TicTacToe::field_ [tictactoe.cpp <43:3 43:8>]
REFERENCE_USAGE: void TicTacToe::Run() -> Field TicTacToe::field_ [tictactoe.cpp <43:33 43:38>]
REFERENCE_USAGE: void TicTacToe::Run() -> Field TicTacToe::field_ [tictactoe.cpp <44:3 44:8>]
REFERENCE_USAGE: void TicTacToe::Run() -> Field TicTacToe::field_ [tictactoe.cpp <46:8 46:13>]
REFERENCE_TYPE_USAGE: void TicTacToe::Run() -> int [tictactoe.cpp <38:2 38:4>]
REFERENCE_TYPE_USAGE: void TicTacToe::Run() -> int [tictactoe.cpp <40:8 40:10>]
REFERENCE_TYPE_USAGE: void TicTacToe::Run() -> Player [tictactoe.cpp <41:3 41:8>]
REFERENCE_USAGE: void TicTacToe::Run() -> Player * [] TicTacToe::players_ [tictactoe.cpp <41:21 41:28>]
REFERENCE_CALL: void TicTacToe::Run() -> void Field::MakeMove(const Field::Move &, Field::Token) [tictactoe.cpp <43:10 43:17>]
REFERENCE_CALL: void TicTacToe::Run() -> Field::Move Player::Turn(const Field &) const [tictactoe.cpp <43:27 43:30>]
REFERENCE_CALL: void TicTacToe::Run() -> const Field::Token & Player::getToken() const [tictactoe.cpp <43:50 43:57>]
REFERENCE_CALL: void TicTacToe::Run() -> const Field::Token & Player::getToken() const [tictactoe.cpp <46:33 46:40>]
REFERENCE_CALL: void TicTacToe::Run() -> int Field::SameInRow(Field::Token, int) const [tictactoe.cpp <46:15 46:23>]
REFERENCE_CALL: void TicTacToe::Run() -> void io::stringOut(const char *) [tictactoe.cpp <47:8 47:16>]
REFERENCE_CALL: void TicTacToe::Run() -> void io::stringOut(const char *) [tictactoe.cpp <48:8 48:16>]
REFERENCE_CALL: void TicTacToe::Run() -> void io::stringOut(const char *) [tictactoe.cpp <55:6 55:14>]
REFERENCE_CALL: void TicTacToe::Run() -> const char * Player::getName() const [tictactoe.cpp <47:25 47:31>]
REFERENCE_CALL: void TicTacToe::Reset() -> void Field::Clear() [tictactoe.cpp <59:9 59:13>]
REFERENCE_USAGE: void TicTacToe::Reset() -> Field TicTacToe::field_ [tictactoe.cpp <59:2 59:7>]
REFERENCE_TYPE_USAGE: void TicTacToe::Reset() -> int [tictactoe.cpp <61:8 61:10>]
REFERENCE_USAGE: void TicTacToe::Reset() -> Player * [] TicTacToe::players_ [tictactoe.cpp <62:8 62:15>]
REFERENCE_USAGE: void TicTacToe::Reset() -> Player * [] TicTacToe::players_ [tictactoe.cpp <63:11 63:18>]
REFERENCE_USAGE: void TicTacToe::Reset() -> Player * [] TicTacToe::players_ [tictactoe.cpp <64:4 64:11>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> int [tictactoe.cpp <70:2 70:4>]
REFERENCE_CALL: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> void io::stringOut(const char *) [tictactoe.cpp <73:7 73:15>]
REFERENCE_CALL: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> void io::stringOut(const char *) [tictactoe.cpp <74:7 74:15>]
REFERENCE_CALL: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> void io::stringOut(const char *) [tictactoe.cpp <75:7 75:15>]
REFERENCE_CALL: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> void io::stringOut(const char *) [tictactoe.cpp <83:18 83:26>]
REFERENCE_CALL: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> int io::numberIn() [tictactoe.cpp <77:19 77:26>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> HumanPlayer [tictactoe.cpp <80:24 80:34>]
REFERENCE_CALL: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> void HumanPlayer::HumanPlayer(Field::Token, const char *) [tictactoe.cpp <80:24 80:34>]
REFERENCE_TYPE_USAGE: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> ArtificialPlayer [tictactoe.cpp <81:24 81:39>]
REFERENCE_CALL: Player * TicTacToe::SelectPlayer(Field::Token, const char *) const -> void ArtificialPlayer::ArtificialPlayer(Field::Token, const char *) [tictactoe.cpp <81:24 81:39>]
LOCAL_SYMBOL: artificial_player.h<11:41> [artificial_player.h <11:41 11:45>]
LOCAL_SYMBOL: artificial_player.h<14:14> [artificial_player.h <14:14 14:14>]
LOCAL_SYMBOL: artificial_player.h<14:14> [artificial_player.h <17:2 17:2>]
LOCAL_SYMBOL: artificial_player.h<19:22> [artificial_player.h <19:22 19:26>]
LOCAL_SYMBOL: artificial_player.h<19:42> [artificial_player.h <19:42 19:46>]
LOCAL_SYMBOL: artificial_player.h<21:29> [artificial_player.h <21:29 21:33>]
LOCAL_SYMBOL: artificial_player.h<21:49> [artificial_player.h <21:49 21:53>]
LOCAL_SYMBOL: artificial_player.h<6:40> [artificial_player.h <6:40 6:40>]
LOCAL_SYMBOL: artificial_player.h<6:40> [artificial_player.h <22:1 22:1>]
LOCAL_SYMBOL: artificial_player.h<8:33> [artificial_player.h <8:33 8:37>]
LOCAL_SYMBOL: artificial_player.h<8:52> [artificial_player.h <8:52 8:55>]
LOCAL_SYMBOL: field.h<14:31> [field.h <14:31 14:35>]
LOCAL_SYMBOL: field.h<16:14> [field.h <16:14 16:14>]
LOCAL_SYMBOL: field.h<16:14> [field.h <19:2 19:2>]
LOCAL_SYMBOL: field.h<29:23> [field.h <29:23 29:27>]
LOCAL_SYMBOL: field.h<29:34> [field.h <29:34 29:39>]
LOCAL_SYMBOL: field.h<31:28> [field.h <31:28 31:31>]
LOCAL_SYMBOL: field.h<32:28> [field.h <32:28 32:31>]
LOCAL_SYMBOL: field.h<35:29> [field.h <35:29 35:32>]
LOCAL_SYMBOL: field.h<35:41> [field.h <35:41 35:45>]
LOCAL_SYMBOL: field.h<36:30> [field.h <36:30 36:33>]
LOCAL_SYMBOL: field.h<6:33> [field.h <6:33 6:33>]
LOCAL_SYMBOL: field.h<6:33> [field.h <41:1 41:1>]
LOCAL_SYMBOL: field.h<8:13> [field.h <8:13 8:13>]
LOCAL_SYMBOL: field.h<8:13> [field.h <12:2 12:2>]
LOCAL_SYMBOL: game_object.h<4:18> [game_object.h <4:18 4:18>]
LOCAL_SYMBOL: game_object.h<4:18> [game_object.h <8:1 8:1>]
LOCAL_SYMBOL: game_object.h<6:15> [game_object.h <6:15 6:15>]
LOCAL_SYMBOL: game_object.h<6:15> [game_object.h <6:16 6:16>]
LOCAL_SYMBOL: game_object.h<7:24> [game_object.h <7:24 7:24>]
LOCAL_SYMBOL: game_object.h<7:24> [game_object.h <7:25 7:25>]
LOCAL_SYMBOL: human_player.h<12:41> [human_player.h <12:41 12:45>]
LOCAL_SYMBOL: human_player.h<17:27> [human_player.h <17:27 17:31>]
LOCAL_SYMBOL: human_player.h<17:53> [human_player.h <17:53 17:56>]
LOCAL_SYMBOL: human_player.h<7:35> [human_player.h <7:35 7:35>]
LOCAL_SYMBOL: human_player.h<7:35> [human_player.h <18:1 18:1>]
LOCAL_SYMBOL: human_player.h<9:28> [human_player.h <9:28 9:32>]
LOCAL_SYMBOL: human_player.h<9:47> [human_player.h <9:47 9:50>]
LOCAL_SYMBOL: io.h<4:14> [io.h <4:14 4:14>]
LOCAL_SYMBOL: io.h<4:14> [io.h <11:1 11:1>]
LOCAL_SYMBOL: io.h<7:21> [io.h <7:21 7:23>]
LOCAL_SYMBOL: io.h<9:29> [io.h <9:29 9:31>]
LOCAL_SYMBOL: player.h<10:23> [player.h <10:23 10:27>]
LOCAL_SYMBOL: player.h<10:42> [player.h <10:42 10:45>]
LOCAL_SYMBOL: player.h<13:41> [player.h <13:41 13:45>]
LOCAL_SYMBOL: player.h<8:34> [player.h <8:34 8:34>]
LOCAL_SYMBOL: player.h<8:34> [player.h <21:1 21:1>]
LOCAL_SYMBOL: tictactoe.cpp<12:25> [tictactoe.cpp <12:25 12:25>]
LOCAL_SYMBOL: tictactoe.cpp<12:25> [tictactoe.cpp <14:1 14:1>]
LOCAL_SYMBOL: tictactoe.cpp<17:25> [tictactoe.cpp <17:25 17:25>]
LOCAL_SYMBOL: tictactoe.cpp<17:25> [tictactoe.cpp <33:1 33:1>]
LOCAL_SYMBOL: tictactoe.cpp<22:22> [tictactoe.cpp <22:22 22:22>]
LOCAL_SYMBOL: tictactoe.cpp<22:22> [tictactoe.cpp <24:2 24:2>]
LOCAL_SYMBOL: tictactoe.cpp<27:22> [tictactoe.cpp <27:22 27:22>]
LOCAL_SYMBOL: tictactoe.cpp<27:22> [tictactoe.cpp <29:2 29:2>]
LOCAL_SYMBOL: tictactoe.cpp<35:23> [tictactoe.cpp <35:23 35:23>]
LOCAL_SYMBOL: tictactoe.cpp<35:23> [tictactoe.cpp <56:1 56:1>]
LOCAL_SYMBOL: tictactoe.cpp<38:6> [tictactoe.cpp <38:6 38:16>]
LOCAL_SYMBOL: tictactoe.cpp<38:6> [tictactoe.cpp <41:30 41:40>]
LOCAL_SYMBOL: tictactoe.cpp<38:6> [tictactoe.cpp <52:3 52:13>]
LOCAL_SYMBOL: tictactoe.cpp<38:6> [tictactoe.cpp <52:19 52:29>]
LOCAL_SYMBOL: tictactoe.cpp<40:12> [tictactoe.cpp <40:12 40:12>]
LOCAL_SYMBOL: tictactoe.cpp<40:12> [tictactoe.cpp <40:19 40:19>]
LOCAL_SYMBOL: tictactoe.cpp<40:12> [tictactoe.cpp <40:26 40:26>]
LOCAL_SYMBOL: tictactoe.cpp<40:32> [tictactoe.cpp <40:32 40:32>]
LOCAL_SYMBOL: tictactoe.cpp<40:32> [tictactoe.cpp <53:2 53:2>]
LOCAL_SYMBOL: tictactoe.cpp<41:11> [tictactoe.cpp <41:11 41:16>]
LOCAL_SYMBOL: tictactoe.cpp<41:11> [tictactoe.cpp <43:20 43:25>]
LOCAL_SYMBOL: tictactoe.cpp<41:11> [tictactoe.cpp <43:43 43:48>]
LOCAL_SYMBOL: tictactoe.cpp<41:11> [tictactoe.cpp <46:26 46:31>]
LOCAL_SYMBOL: tictactoe.cpp<41:11> [tictactoe.cpp <47:18 47:23>]
LOCAL_SYMBOL: tictactoe.cpp<46:51> [tictactoe.cpp <46:51 46:51>]
LOCAL_SYMBOL: tictactoe.cpp<46:51> [tictactoe.cpp <50:3 50:3>]
LOCAL_SYMBOL: tictactoe.cpp<58:25> [tictactoe.cpp <58:25 58:25>]
LOCAL_SYMBOL: tictactoe.cpp<58:25> [tictactoe.cpp <67:1 67:1>]
LOCAL_SYMBOL: tictactoe.cpp<61:12> [tictactoe.cpp <61:12 61:12>]
LOCAL_SYMBOL: tictactoe.cpp<61:12> [tictactoe.cpp <61:19 61:19>]
LOCAL_SYMBOL: tictactoe.cpp<61:12> [tictactoe.cpp <61:26 61:26>]
LOCAL_SYMBOL: tictactoe.cpp<61:12> [tictactoe.cpp <62:17 62:17>]
LOCAL_SYMBOL: tictactoe.cpp<61:12> [tictactoe.cpp <63:20 63:20>]
LOCAL_SYMBOL: tictactoe.cpp<61:12> [tictactoe.cpp <64:13 64:13>]
LOCAL_SYMBOL: tictactoe.cpp<61:32> [tictactoe.cpp <61:32 61:32>]
LOCAL_SYMBOL: tictactoe.cpp<61:32> [tictactoe.cpp <66:2 66:2>]
LOCAL_SYMBOL: tictactoe.cpp<62:22> [tictactoe.cpp <62:22 62:22>]
LOCAL_SYMBOL: tictactoe.cpp<62:22> [tictactoe.cpp <65:3 65:3>]
LOCAL_SYMBOL: tictactoe.cpp<69:47> [tictactoe.cpp <69:47 69:51>]
LOCAL_SYMBOL: tictactoe.cpp<69:47> [tictactoe.cpp <80:37 80:41>]
LOCAL_SYMBOL: tictactoe.cpp<69:47> [tictactoe.cpp <81:42 81:46>]
LOCAL_SYMBOL: tictactoe.cpp<69:66> [tictactoe.cpp <69:66 69:69>]
LOCAL_SYMBOL: tictactoe.cpp<69:66> [tictactoe.cpp <74:17 74:20>]
LOCAL_SYMBOL: tictactoe.cpp<69:66> [tictactoe.cpp <80:44 80:47>]
LOCAL_SYMBOL: tictactoe.cpp<69:66> [tictactoe.cpp <81:49 81:52>]
LOCAL_SYMBOL: tictactoe.cpp<69:79> [tictactoe.cpp <69:79 69:79>]
LOCAL_SYMBOL: tictactoe.cpp<69:79> [tictactoe.cpp <86:1 86:1>]
LOCAL_SYMBOL: tictactoe.cpp<70:6> [tictactoe.cpp <70:6 70:14>]
LOCAL_SYMBOL: tictactoe.cpp<70:6> [tictactoe.cpp <77:3 77:11>]
LOCAL_SYMBOL: tictactoe.cpp<70:6> [tictactoe.cpp <79:12 79:20>]
LOCAL_SYMBOL: tictactoe.cpp<72:17> [tictactoe.cpp <72:17 72:17>]
LOCAL_SYMBOL: tictactoe.cpp<72:17> [tictactoe.cpp <85:2 85:2>]
LOCAL_SYMBOL: tictactoe.cpp<79:24> [tictactoe.cpp <79:24 79:24>]
LOCAL_SYMBOL: tictactoe.cpp<79:24> [tictactoe.cpp <84:3 84:3>]
LOCAL_SYMBOL: tictactoe.cpp<7:24> [tictactoe.cpp <7:24 7:24>]
LOCAL_SYMBOL: tictactoe.cpp<7:24> [tictactoe.cpp <10:1 10:1>]
LOCAL_SYMBOL: tictactoe.h<17:37> [tictactoe.h <17:37 17:41>]
LOCAL_SYMBOL: tictactoe.h<17:56> [tictactoe.h <17:56 17:59>]
LOCAL_SYMBOL: tictactoe.h<7:17> [tictactoe.h <7:17 7:17>]
LOCAL_SYMBOL: tictactoe.h<7:17> [tictactoe.h <21:1 21:1>]
COMMENT: comment [tictactoe.h <23:8 23:24>]
COMMENT: comment [field.h <43:8 43:18>]
COMMENT: comment [game_object.h <10:8 10:24>]
COMMENT: comment [player.h <23:8 23:19>]
COMMENT: comment [artificial_player.h <24:8 24:30>]
COMMENT: comment [human_player.h <20:8 20:25>]
COMMENT: comment [io.h <13:8 13:15>]
