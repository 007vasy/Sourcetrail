FILE: b3AlignedAllocator.cpp
COMMENT: comment [b3AlignedAllocator.cpp <1:1 14:3>]
REFERENCE_INCLUDE b3AlignedAllocator.cpp -> C:/sourcetrail/sourcetrail/bin/test/data/CxxIndexSampleProjectsTestSuite/Bullet3/src/Bullet3Common/b3AlignedAllocator.h [b3AlignedAllocator.cpp <16:10 16:31>]
FILE: b3AlignedAllocator.h
COMMENT: comment [b3AlignedAllocator.h <1:1 14:3>]
REFERENCE_MACRO_USAGE b3AlignedAllocator.h -> B3_ALIGNED_ALLOCATOR [b3AlignedAllocator.h <16:9 16:28>]
SYMBOL_MACRO B3_ALIGNED_ALLOCATOR [b3AlignedAllocator.h <17:9 <17:9 17:28> 17:8>]
COMMENT: comment [b3AlignedAllocator.h <19:1 19:66>]
COMMENT: comment [b3AlignedAllocator.h <20:1 20:64>]
COMMENT: comment [b3AlignedAllocator.h <21:1 21:48>]
REFERENCE_INCLUDE b3AlignedAllocator.h -> C:/sourcetrail/sourcetrail/bin/test/data/CxxIndexSampleProjectsTestSuite/Bullet3/src/Bullet3Common/b3Scalar.h [b3AlignedAllocator.h <23:10 23:21>]
FILE: b3Scalar.h
COMMENT: comment [b3Scalar.h <1:1 13:3>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_SCALAR_H [b3Scalar.h <17:9 17:19>]
SYMBOL_MACRO B3_SCALAR_H [b3Scalar.h <18:9 <18:9 18:19> 18:8>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_MANAGED_CODE [b3Scalar.h <20:8 20:22>]
COMMENT: comment [b3Scalar.h <28:20 28:41>]
COMMENT: comment [b3Scalar.h <31:1 31:67>]
SYMBOL_MACRO B3_BULLET_VERSION [b3Scalar.h <32:9 <32:9 32:25> 32:26>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_BULLET_VERSION [b3Scalar.h <36:9 36:25>]
REFERENCE_MACRO_USAGE b3Scalar.h -> DEBUG [b3Scalar.h <39:13 39:17>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _DEBUG [b3Scalar.h <39:32 39:37>]
COMMENT: comment [b3Scalar.h <43:23 43:36>]
REFERENCE_INCLUDE b3Scalar.h -> C:/sourcetrail/sourcetrail/bin/test/data/CxxIndexSampleProjectsTestSuite/Bullet3/src/Bullet3Common/b3Logging.h [b3Scalar.h <43:10 43:22>]
FILE: b3Logging.h
REFERENCE_MACRO_USAGE b3Logging.h -> B3_LOGGING_H [b3Logging.h <2:9 2:20>]
SYMBOL_MACRO B3_LOGGING_H [b3Logging.h <3:9 <3:9 3:20> 3:8>]
REFERENCE_MACRO_USAGE b3Logging.h -> __cplusplus [b3Logging.h <5:8 5:18>]
COMMENT: comment [b3Logging.h <9:1 9:102>]
COMMENT: comment [b3Logging.h <10:1 10:81>]
SYMBOL_MACRO b3Printf [b3Logging.h <11:9 <11:9 11:16> 11:63>]
COMMENT: comment [b3Logging.h <12:1 12:151>]
COMMENT: comment [b3Logging.h <13:1 13:49>]
COMMENT: comment [b3Logging.h <14:1 14:44>]
COMMENT: comment [b3Logging.h <15:1 15:24>]
SYMBOL_MACRO b3Warning [b3Logging.h <17:9 <17:9 17:17> 17:166>]
SYMBOL_MACRO b3Error [b3Logging.h <18:9 <18:9 18:15> 18:159>]
REFERENCE_MACRO_USAGE b3Logging.h -> B3_NO_PROFILE [b3Logging.h <21:9 21:21>]
REFERENCE_MACRO_USAGE b3Logging.h -> __cplusplus [b3Logging.h <25:8 25:18>]
SYMBOL_MACRO B3_PROFILE [b3Logging.h <41:9 <41:9 41:18> 41:59>]
COMMENT: comment [b3Logging.h <44:7 44:22>]
COMMENT: comment [b3Logging.h <50:8 50:31>]
COMMENT: comment [b3Logging.h <59:1 59:74>]
COMMENT: comment [b3Logging.h <64:1 64:59>]
COMMENT: comment [b3Logging.h <68:1 68:125>]
REFERENCE_MACRO_USAGE b3Logging.h -> __cplusplus [b3Logging.h <73:8 73:18>]
COMMENT: comment [b3Logging.h <77:7 77:21>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _WIN32 [b3Scalar.h <46:8 46:13>]
REFERENCE_MACRO_USAGE b3Scalar.h -> __MINGW32__ [b3Scalar.h <48:15 48:25>]
REFERENCE_MACRO_USAGE b3Scalar.h -> __CYGWIN__ [b3Scalar.h <48:39 48:48>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _MSC_VER [b3Scalar.h <48:64 48:71>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _MSC_VER [b3Scalar.h <48:77 48:84>]
COMMENT: comment [b3Scalar.h <55:4 55:38>]
COMMENT: comment [b3Scalar.h <56:36 56:62>]
COMMENT: comment [b3Scalar.h <57:1 57:98>]
COMMENT: comment [b3Scalar.h <58:34 58:81>]
COMMENT: comment [b3Scalar.h <59:1 59:80>]
SYMBOL_MACRO B3_FORCE_INLINE [b3Scalar.h <61:12 <61:12 61:26> 61:27>]
SYMBOL_MACRO B3_ATTRIBUTE_ALIGNED16 [b3Scalar.h <62:12 <62:12 62:33> 62:59>]
SYMBOL_MACRO B3_ATTRIBUTE_ALIGNED64 [b3Scalar.h <63:12 <63:12 63:33> 63:59>]
SYMBOL_MACRO B3_ATTRIBUTE_ALIGNED128 [b3Scalar.h <64:12 <64:12 64:34> 64:62>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _XBOX [b3Scalar.h <65:10 65:14>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _WIN32 [b3Scalar.h <73:15 73:20>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _MSC_VER [b3Scalar.h <73:27 73:34>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _MSC_VER [b3Scalar.h <73:40 73:47>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_DOUBLE_PRECISION [b3Scalar.h <73:72 73:94>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _M_IX86 [b3Scalar.h <74:16 74:22>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _M_X64 [b3Scalar.h <74:37 74:42>]
SYMBOL_MACRO B3_USE_SSE [b3Scalar.h <75:12 <75:12 75:21> 75:11>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_SSE [b3Scalar.h <76:11 76:20>]
COMMENT: comment [b3Scalar.h <77:4 77:70>]
COMMENT: comment [b3Scalar.h <78:4 78:81>]
COMMENT: comment [b3Scalar.h <79:4 79:78>]
COMMENT: comment [b3Scalar.h <80:4 80:45>]
COMMENT: comment [b3Scalar.h <81:4 81:122>]
COMMENT: comment [b3Scalar.h <82:4 82:135>]
COMMENT: comment [b3Scalar.h <83:4 83:31>]
COMMENT: comment [b3Scalar.h <84:11 84:23>]
COMMENT: comment [b3Scalar.h <89:9 89:16>]
COMMENT: comment [b3Scalar.h <91:10 91:23>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_DEBUG [b3Scalar.h <93:8 93:15>]
SYMBOL_MACRO b3Assert [b3Scalar.h <102:11 <102:11 102:18> 102:20>]
COMMENT: comment [b3Scalar.h <104:3 104:47>]
SYMBOL_MACRO b3FullAssert [b3Scalar.h <105:11 <105:11 105:22> 105:24>]
SYMBOL_MACRO b3Likely [b3Scalar.h <107:11 <107:11 107:18> 107:24>]
SYMBOL_MACRO b3Unlikely [b3Scalar.h <108:11 <108:11 108:20> 108:25>]
COMMENT: comment [b3Scalar.h <257:1 257:124>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_DOUBLE_PRECISION [b3Scalar.h <258:13 258:35>]
COMMENT: comment [b3Scalar.h <264:1 264:47>]
SYMBOL_MACRO B3_LARGE_FLOAT [b3Scalar.h <265:9 <265:9 265:22> 265:23>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_SSE [b3Scalar.h <268:8 268:17>]
COMMENT: comment [b3Scalar.h <270:7 270:19>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_SSE_IN_API [b3Scalar.h <272:13 272:29>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_SSE [b3Scalar.h <272:43 272:52>]
COMMENT: comment [b3Scalar.h <316:8 316:27>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_NEON [b3Scalar.h <318:8 318:18>]
SYMBOL_MACRO B3_DECLARE_ALIGNED_ALLOCATOR [b3Scalar.h <331:9 <331:9 331:36> 339:64>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_DOUBLE_PRECISION [b3Scalar.h <343:13 343:35>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_DOUBLE_FUNCTIONS [b3Scalar.h <343:49 343:73>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <361:1 361:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> USE_APPROXIMATION [b3Scalar.h <363:8 363:24>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <381:1 381:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <382:1 382:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <383:1 383:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <384:1 384:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <385:1 385:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <392:1 392:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <399:1 399:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <400:1 400:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <401:1 401:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <402:1 402:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <403:1 403:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <404:1 404:15>]
SYMBOL_MACRO B3_2_PI [b3Scalar.h <408:9 <408:9 408:15> 408:53>]
SYMBOL_MACRO B3_PI [b3Scalar.h <409:9 <409:9 409:13> 409:48>]
SYMBOL_MACRO B3_HALF_PI [b3Scalar.h <410:9 <410:9 410:18> 410:49>]
SYMBOL_MACRO B3_RADS_PER_DEG [b3Scalar.h <411:9 <411:9 411:23> 411:50>]
SYMBOL_MACRO B3_DEGS_PER_RAD [b3Scalar.h <412:9 <412:9 412:23> 412:51>]
SYMBOL_MACRO B3_SQRT12 [b3Scalar.h <413:9 <413:9 413:17> 413:63>]
COMMENT: comment [b3Scalar.h <415:73 415:101>]
SYMBOL_MACRO b3RecipSqrt [b3Scalar.h <415:9 <415:9 415:19> 415:69>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_DOUBLE_PRECISION [b3Scalar.h <418:8 418:30>]
SYMBOL_MACRO B3_EPSILON [b3Scalar.h <422:9 <422:9 422:18> 422:24>]
SYMBOL_MACRO B3_INFINITY [b3Scalar.h <423:9 <423:9 423:19> 423:24>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <426:1 426:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_PI [b3Scalar.h <428:21 428:25>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <409:26 409:32>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <442:1 442:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_EPSILON [b3Scalar.h <442:72 442:81>]
REFERENCE_MACRO_USAGE b3Scalar.h -> FLT_EPSILON [b3Scalar.h <422:25 422:35>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <444:1 444:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <447:1 447:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <452:1 452:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <456:1 456:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_RADS_PER_DEG [b3Scalar.h <456:61 456:75>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <411:26 411:32>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <457:1 457:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_DEGS_PER_RAD [b3Scalar.h <457:61 457:75>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <412:45 412:51>]
SYMBOL_MACRO B3_DECLARE_HANDLE [b3Scalar.h <459:9 <459:9 459:25> 459:73>]
REFERENCE_MACRO_USAGE b3Scalar.h -> b3Fsel [b3Scalar.h <461:9 461:14>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <462:1 462:15>]
SYMBOL_MACRO b3Fsels [b3Scalar.h <467:9 <467:9 467:15> 467:45>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <470:1 470:15>]
COMMENT: comment [b3Scalar.h <474:20 474:73>]
COMMENT: comment [b3Scalar.h <482:1 482:110>]
COMMENT: comment [b3Scalar.h <483:1 483:118>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <484:1 484:15>]
COMMENT: comment [b3Scalar.h <486:5 486:89>]
COMMENT: comment [b3Scalar.h <487:5 487:73>]
COMMENT: comment [b3Scalar.h <488:5 488:89>]
COMMENT: comment [b3Scalar.h <489:5 489:77>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <494:1 494:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <500:1 500:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_HAVE_NATIVE_FSEL [b3Scalar.h <502:8 502:26>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <509:22 509:36>]
COMMENT: comment [b3Scalar.h <517:1 517:33>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <518:1 518:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <523:1 523:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <528:1 528:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <533:1 533:15>]
COMMENT: comment [b3Scalar.h <538:1 538:63>]
COMMENT: comment [b3Scalar.h <539:1 539:120>]
COMMENT: comment [b3Scalar.h <540:1 540:101>]
COMMENT: comment [b3Scalar.h <541:1 541:127>]
COMMENT: comment [b3Scalar.h <542:1 542:143>]
COMMENT: comment [b3Scalar.h <543:1 543:79>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <544:1 544:15>]
COMMENT: comment [b3Scalar.h <557:1 557:30>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <558:1 558:15>]
COMMENT: comment [b3Scalar.h <573:1 573:28>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <574:1 574:15>]
COMMENT: comment [b3Scalar.h <589:1 589:30>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <590:1 590:15>]
COMMENT: comment [b3Scalar.h <607:1 607:53>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <608:1 608:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <610:42 610:48>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_PI [b3Scalar.h <611:23 611:27>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <613:27 613:33>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_PI [b3Scalar.h <615:27 615:31>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <617:27 617:33>]
COMMENT: comment [b3Scalar.h <625:1 625:42>]
COMMENT: comment [b3Scalar.h <641:1 641:54>]
COMMENT: comment [b3Scalar.h <663:8 663:21>]
COMMENT: comment [b3AlignedAllocator.h <24:1 24:40>]
REFERENCE_MACRO_USAGE b3AlignedAllocator.h -> B3_DEBUG_MEMORY_ALLOCATIONS [b3AlignedAllocator.h <25:8 25:34>]
SYMBOL_MACRO b3AlignedAlloc [b3AlignedAllocator.h <41:10 <41:10 41:23> 41:77>]
SYMBOL_MACRO b3AlignedFree [b3AlignedAllocator.h <42:10 <42:10 42:22> 42:53>]
COMMENT: comment [b3AlignedAllocator.h <52:1 52:123>]
COMMENT: comment [b3AlignedAllocator.h <54:1 54:220>]
COMMENT: comment [b3AlignedAllocator.h <58:1 58:78>]
COMMENT: comment [b3AlignedAllocator.h <59:1 59:171>]
COMMENT: comment [b3AlignedAllocator.h <67:2 67:27>]
COMMENT: comment [b3AlignedAllocator.h <69:2 71:4>]
REFERENCE_MACRO_USAGE b3AlignedAllocator.h -> b3AlignedAlloc [b3AlignedAllocator.h <86:38 86:51>]
REFERENCE_MACRO_USAGE b3AlignedAllocator.h -> b3AlignedFree [b3AlignedAllocator.h <90:3 90:15>]
COMMENT: comment [b3AlignedAllocator.h <106:8 106:30>]
COMMENT: comment [b3AlignedAllocator.cpp <20:37 20:58>]
REFERENCE_MACRO_USAGE b3AlignedAllocator.cpp -> B3_HAS_ALIGNED_ALLOCATOR [b3AlignedAllocator.cpp <37:14 37:37>]
REFERENCE_MACRO_USAGE b3AlignedAllocator.cpp -> __CELLOS_LV2__ [b3AlignedAllocator.cpp <48:15 48:28>]
REFERENCE_MACRO_USAGE b3AlignedAllocator.cpp -> B3_DEBUG_MEMORY_ALLOCATIONS [b3AlignedAllocator.cpp <107:8 107:34>]
COMMENT: comment [b3AlignedAllocator.cpp <157:7 157:36>]
COMMENT: comment [b3AlignedAllocator.cpp <164:1 164:57>]
COMMENT: comment [b3AlignedAllocator.cpp <176:1 176:47>]
COMMENT: comment [b3AlignedAllocator.cpp <180:8 180:37>]
SYMBOL_FUNCTION int b3GetVersion() [b3Scalar.h <34:1 <34:12 34:23> 37:1>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE int b3GetVersion() -> int [b3Scalar.h <34:8 34:10>]
SYMBOL_FUNCTION void b3EnterProfileZone(const char *) [b3Logging.h <23:6 23:23>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3EnterProfileZone(const char *) -> void [b3Logging.h <23:1 23:4>]
LOCAL_SYMBOL: b3Logging.h<23:37> [b3Logging.h <23:37 23:40>]
SYMBOL_BUILTIN_TYPE char
REFERENCE_TYPE_USAGE void b3EnterProfileZone(const char *) -> char [b3Logging.h <23:31 23:34>]
SYMBOL_FUNCTION void b3LeaveProfileZone() [b3Logging.h <24:6 24:23>]
REFERENCE_TYPE_USAGE void b3LeaveProfileZone() -> void [b3Logging.h <24:1 24:4>]
SYMBOL_CLASS b3ProfileZone [b3Logging.h <27:1 <27:7 27:19> 39:1>]
SYMBOL_METHOD public void b3ProfileZone::b3ProfileZone(const char *) [b3Logging.h <30:2 <30:2 30:14> 33:2>]
LOCAL_SYMBOL: b3Logging.h<30:28> [b3Logging.h <30:28 30:31>]
REFERENCE_TYPE_USAGE void b3ProfileZone::b3ProfileZone(const char *) -> char [b3Logging.h <30:22 30:25>]
SYMBOL_FUNCTION void b3EnterProfileZone(const char *)
REFERENCE_CALL void b3ProfileZone::b3ProfileZone(const char *) -> void b3EnterProfileZone(const char *) [b3Logging.h <32:3 32:20>]
LOCAL_SYMBOL: b3Logging.h<30:28> [b3Logging.h <32:23 32:26>]
SYMBOL_METHOD public void b3ProfileZone::~b3ProfileZone() [b3Logging.h <35:2 <35:2 35:15> 38:2>]
SYMBOL_FUNCTION void b3LeaveProfileZone()
REFERENCE_CALL void b3ProfileZone::~b3ProfileZone() -> void b3LeaveProfileZone() [b3Logging.h <37:3 37:20>]
SYMBOL_TYPEDEF b3PrintfFunc [b3Logging.h <53:15 53:26>]
REFERENCE_TYPE_USAGE b3PrintfFunc -> void [b3Logging.h <53:9 53:12>]
LOCAL_SYMBOL: b3Logging.h<53:41> [b3Logging.h <53:41 53:43>]
REFERENCE_TYPE_USAGE b3PrintfFunc -> char [b3Logging.h <53:35 53:38>]
SYMBOL_TYPEDEF b3WarningMessageFunc [b3Logging.h <54:15 54:34>]
REFERENCE_TYPE_USAGE b3WarningMessageFunc -> void [b3Logging.h <54:9 54:12>]
LOCAL_SYMBOL: b3Logging.h<54:49> [b3Logging.h <54:49 54:51>]
REFERENCE_TYPE_USAGE b3WarningMessageFunc -> char [b3Logging.h <54:43 54:46>]
SYMBOL_TYPEDEF b3ErrorMessageFunc [b3Logging.h <55:15 55:32>]
REFERENCE_TYPE_USAGE b3ErrorMessageFunc -> void [b3Logging.h <55:9 55:12>]
LOCAL_SYMBOL: b3Logging.h<55:47> [b3Logging.h <55:47 55:49>]
REFERENCE_TYPE_USAGE b3ErrorMessageFunc -> char [b3Logging.h <55:41 55:44>]
SYMBOL_TYPEDEF b3EnterProfileZoneFunc [b3Logging.h <56:15 56:36>]
REFERENCE_TYPE_USAGE b3EnterProfileZoneFunc -> void [b3Logging.h <56:9 56:12>]
LOCAL_SYMBOL: b3Logging.h<56:51> [b3Logging.h <56:51 56:53>]
REFERENCE_TYPE_USAGE b3EnterProfileZoneFunc -> char [b3Logging.h <56:45 56:48>]
SYMBOL_TYPEDEF b3LeaveProfileZoneFunc [b3Logging.h <57:15 57:36>]
REFERENCE_TYPE_USAGE b3LeaveProfileZoneFunc -> void [b3Logging.h <57:9 57:12>]
SYMBOL_FUNCTION void b3SetCustomPrintfFunc(b3PrintfFunc *) [b3Logging.h <60:6 60:26>]
REFERENCE_TYPE_USAGE void b3SetCustomPrintfFunc(b3PrintfFunc *) -> void [b3Logging.h <60:1 60:4>]
LOCAL_SYMBOL: b3Logging.h<60:42> [b3Logging.h <60:42 60:51>]
REFERENCE_TYPE_USAGE void b3SetCustomPrintfFunc(b3PrintfFunc *) -> b3PrintfFunc [b3Logging.h <60:28 60:39>]
SYMBOL_FUNCTION void b3SetCustomWarningMessageFunc(b3WarningMessageFunc *) [b3Logging.h <61:6 61:34>]
REFERENCE_TYPE_USAGE void b3SetCustomWarningMessageFunc(b3WarningMessageFunc *) -> void [b3Logging.h <61:1 61:4>]
LOCAL_SYMBOL: b3Logging.h<61:58> [b3Logging.h <61:58 61:71>]
REFERENCE_TYPE_USAGE void b3SetCustomWarningMessageFunc(b3WarningMessageFunc *) -> b3WarningMessageFunc [b3Logging.h <61:36 61:55>]
SYMBOL_FUNCTION void b3SetCustomErrorMessageFunc(b3ErrorMessageFunc *) [b3Logging.h <62:6 62:32>]
REFERENCE_TYPE_USAGE void b3SetCustomErrorMessageFunc(b3ErrorMessageFunc *) -> void [b3Logging.h <62:1 62:4>]
LOCAL_SYMBOL: b3Logging.h<62:54> [b3Logging.h <62:54 62:65>]
REFERENCE_TYPE_USAGE void b3SetCustomErrorMessageFunc(b3ErrorMessageFunc *) -> b3ErrorMessageFunc [b3Logging.h <62:34 62:51>]
SYMBOL_FUNCTION void b3SetCustomEnterProfileZoneFunc(b3EnterProfileZoneFunc *) [b3Logging.h <65:6 65:36>]
REFERENCE_TYPE_USAGE void b3SetCustomEnterProfileZoneFunc(b3EnterProfileZoneFunc *) -> void [b3Logging.h <65:1 65:4>]
LOCAL_SYMBOL: b3Logging.h<65:62> [b3Logging.h <65:62 65:70>]
REFERENCE_TYPE_USAGE void b3SetCustomEnterProfileZoneFunc(b3EnterProfileZoneFunc *) -> b3EnterProfileZoneFunc [b3Logging.h <65:38 65:59>]
SYMBOL_FUNCTION void b3SetCustomLeaveProfileZoneFunc(b3LeaveProfileZoneFunc *) [b3Logging.h <66:6 66:36>]
REFERENCE_TYPE_USAGE void b3SetCustomLeaveProfileZoneFunc(b3LeaveProfileZoneFunc *) -> void [b3Logging.h <66:1 66:4>]
LOCAL_SYMBOL: b3Logging.h<66:62> [b3Logging.h <66:62 66:70>]
REFERENCE_TYPE_USAGE void b3SetCustomLeaveProfileZoneFunc(b3LeaveProfileZoneFunc *) -> b3LeaveProfileZoneFunc [b3Logging.h <66:38 66:59>]
SYMBOL_FUNCTION void b3OutputPrintfVarArgsInternal(const char *) [b3Logging.h <69:6 69:34>]
REFERENCE_TYPE_USAGE void b3OutputPrintfVarArgsInternal(const char *) -> void [b3Logging.h <69:1 69:4>]
LOCAL_SYMBOL: b3Logging.h<69:48> [b3Logging.h <69:48 69:50>]
REFERENCE_TYPE_USAGE void b3OutputPrintfVarArgsInternal(const char *) -> char [b3Logging.h <69:42 69:45>]
SYMBOL_FUNCTION void b3OutputWarningMessageVarArgsInternal(const char *) [b3Logging.h <70:6 70:42>]
REFERENCE_TYPE_USAGE void b3OutputWarningMessageVarArgsInternal(const char *) -> void [b3Logging.h <70:1 70:4>]
LOCAL_SYMBOL: b3Logging.h<70:56> [b3Logging.h <70:56 70:58>]
REFERENCE_TYPE_USAGE void b3OutputWarningMessageVarArgsInternal(const char *) -> char [b3Logging.h <70:50 70:53>]
SYMBOL_FUNCTION void b3OutputErrorMessageVarArgsInternal(const char *) [b3Logging.h <71:6 71:40>]
REFERENCE_TYPE_USAGE void b3OutputErrorMessageVarArgsInternal(const char *) -> void [b3Logging.h <71:1 71:4>]
LOCAL_SYMBOL: b3Logging.h<71:54> [b3Logging.h <71:54 71:56>]
REFERENCE_TYPE_USAGE void b3OutputErrorMessageVarArgsInternal(const char *) -> char [b3Logging.h <71:48 71:51>]
SYMBOL_TYPEDEF b3Scalar [b3Scalar.h <263:15 263:22>]
SYMBOL_BUILTIN_TYPE float
REFERENCE_TYPE_USAGE b3Scalar -> float [b3Scalar.h <263:9 263:13>]
SYMBOL_TYPEDEF b3SimdFloat4 [b3Scalar.h <269:16 269:27>]
REFERENCE_TYPE_USAGE b3SimdFloat4 -> __m128 [b3Scalar.h <269:9 269:14>]
SYMBOL_FUNCTION b3Scalar b3Sqrt(b3Scalar) [b3Scalar.h <361:1 <361:26 361:31> 380:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Sqrt(b3Scalar) -> b3Scalar [b3Scalar.h <361:17 361:24>]
LOCAL_SYMBOL: b3Scalar.h<361:42> [b3Scalar.h <361:42 361:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Sqrt(b3Scalar) -> b3Scalar [b3Scalar.h <361:33 361:40>]
SYMBOL_FUNCTION float sqrtf(float)
REFERENCE_CALL b3Scalar b3Sqrt(b3Scalar) -> float sqrtf(float) [b3Scalar.h <378:9 378:13>]
LOCAL_SYMBOL: b3Scalar.h<361:42> [b3Scalar.h <378:15 378:15>]
SYMBOL_FUNCTION b3Scalar b3Fabs(b3Scalar) [b3Scalar.h <381:1 <381:26 381:31> 381:64>]
REFERENCE_TYPE_USAGE b3Scalar b3Fabs(b3Scalar) -> b3Scalar [b3Scalar.h <381:17 381:24>]
LOCAL_SYMBOL: b3Scalar.h<381:42> [b3Scalar.h <381:42 381:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Fabs(b3Scalar) -> b3Scalar [b3Scalar.h <381:33 381:40>]
SYMBOL_FUNCTION float fabsf(float)
REFERENCE_CALL b3Scalar b3Fabs(b3Scalar) -> float fabsf(float) [b3Scalar.h <381:54 381:58>]
LOCAL_SYMBOL: b3Scalar.h<381:42> [b3Scalar.h <381:60 381:60>]
SYMBOL_FUNCTION b3Scalar b3Cos(b3Scalar) [b3Scalar.h <382:1 <382:26 382:30> 382:62>]
REFERENCE_TYPE_USAGE b3Scalar b3Cos(b3Scalar) -> b3Scalar [b3Scalar.h <382:17 382:24>]
LOCAL_SYMBOL: b3Scalar.h<382:41> [b3Scalar.h <382:41 382:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Cos(b3Scalar) -> b3Scalar [b3Scalar.h <382:32 382:39>]
SYMBOL_FUNCTION float cosf(float)
REFERENCE_CALL b3Scalar b3Cos(b3Scalar) -> float cosf(float) [b3Scalar.h <382:53 382:56>]
LOCAL_SYMBOL: b3Scalar.h<382:41> [b3Scalar.h <382:58 382:58>]
SYMBOL_FUNCTION b3Scalar b3Sin(b3Scalar) [b3Scalar.h <383:1 <383:26 383:30> 383:62>]
REFERENCE_TYPE_USAGE b3Scalar b3Sin(b3Scalar) -> b3Scalar [b3Scalar.h <383:17 383:24>]
LOCAL_SYMBOL: b3Scalar.h<383:41> [b3Scalar.h <383:41 383:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Sin(b3Scalar) -> b3Scalar [b3Scalar.h <383:32 383:39>]
SYMBOL_FUNCTION float sinf(float)
REFERENCE_CALL b3Scalar b3Sin(b3Scalar) -> float sinf(float) [b3Scalar.h <383:53 383:56>]
LOCAL_SYMBOL: b3Scalar.h<383:41> [b3Scalar.h <383:58 383:58>]
SYMBOL_FUNCTION b3Scalar b3Tan(b3Scalar) [b3Scalar.h <384:1 <384:26 384:30> 384:62>]
REFERENCE_TYPE_USAGE b3Scalar b3Tan(b3Scalar) -> b3Scalar [b3Scalar.h <384:17 384:24>]
LOCAL_SYMBOL: b3Scalar.h<384:41> [b3Scalar.h <384:41 384:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Tan(b3Scalar) -> b3Scalar [b3Scalar.h <384:32 384:39>]
SYMBOL_FUNCTION float tanf(float)
REFERENCE_CALL b3Scalar b3Tan(b3Scalar) -> float tanf(float) [b3Scalar.h <384:53 384:56>]
LOCAL_SYMBOL: b3Scalar.h<384:41> [b3Scalar.h <384:58 384:58>]
SYMBOL_FUNCTION b3Scalar b3Acos(b3Scalar) [b3Scalar.h <385:1 <385:26 385:31> 391:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <385:17 385:24>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <385:42 385:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <385:33 385:40>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <386:6 386:6>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <386:8 386:15>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <387:3 387:3>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <387:5 387:12>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <388:6 388:6>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <388:8 388:15>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <389:3 389:3>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <389:5 389:12>]
SYMBOL_FUNCTION float acosf(float)
REFERENCE_CALL b3Scalar b3Acos(b3Scalar) -> float acosf(float) [b3Scalar.h <390:9 390:13>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <390:15 390:15>]
SYMBOL_FUNCTION b3Scalar b3Asin(b3Scalar) [b3Scalar.h <392:1 <392:26 392:31> 398:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <392:17 392:24>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <392:42 392:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <392:33 392:40>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <393:6 393:6>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <393:8 393:15>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <394:3 394:3>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <394:5 394:12>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <395:6 395:6>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <395:8 395:15>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <396:3 396:3>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <396:5 396:12>]
SYMBOL_FUNCTION float asinf(float)
REFERENCE_CALL b3Scalar b3Asin(b3Scalar) -> float asinf(float) [b3Scalar.h <397:9 397:13>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <397:15 397:15>]
SYMBOL_FUNCTION b3Scalar b3Atan(b3Scalar) [b3Scalar.h <399:1 <399:26 399:31> 399:64>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan(b3Scalar) -> b3Scalar [b3Scalar.h <399:17 399:24>]
LOCAL_SYMBOL: b3Scalar.h<399:42> [b3Scalar.h <399:42 399:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan(b3Scalar) -> b3Scalar [b3Scalar.h <399:33 399:40>]
SYMBOL_FUNCTION float atanf(float)
REFERENCE_CALL b3Scalar b3Atan(b3Scalar) -> float atanf(float) [b3Scalar.h <399:54 399:58>]
LOCAL_SYMBOL: b3Scalar.h<399:42> [b3Scalar.h <399:60 399:60>]
SYMBOL_FUNCTION b3Scalar b3Atan2(b3Scalar, b3Scalar) [b3Scalar.h <400:1 <400:26 400:32> 400:81>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <400:17 400:24>]
LOCAL_SYMBOL: b3Scalar.h<400:43> [b3Scalar.h <400:43 400:43>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <400:34 400:41>]
LOCAL_SYMBOL: b3Scalar.h<400:55> [b3Scalar.h <400:55 400:55>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <400:46 400:53>]
SYMBOL_FUNCTION float atan2f(float, float)
REFERENCE_CALL b3Scalar b3Atan2(b3Scalar, b3Scalar) -> float atan2f(float, float) [b3Scalar.h <400:67 400:72>]
LOCAL_SYMBOL: b3Scalar.h<400:43> [b3Scalar.h <400:74 400:74>]
LOCAL_SYMBOL: b3Scalar.h<400:55> [b3Scalar.h <400:77 400:77>]
SYMBOL_FUNCTION b3Scalar b3Exp(b3Scalar) [b3Scalar.h <401:1 <401:26 401:30> 401:62>]
REFERENCE_TYPE_USAGE b3Scalar b3Exp(b3Scalar) -> b3Scalar [b3Scalar.h <401:17 401:24>]
LOCAL_SYMBOL: b3Scalar.h<401:41> [b3Scalar.h <401:41 401:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Exp(b3Scalar) -> b3Scalar [b3Scalar.h <401:32 401:39>]
SYMBOL_FUNCTION float expf(float)
REFERENCE_CALL b3Scalar b3Exp(b3Scalar) -> float expf(float) [b3Scalar.h <401:53 401:56>]
LOCAL_SYMBOL: b3Scalar.h<401:41> [b3Scalar.h <401:58 401:58>]
SYMBOL_FUNCTION b3Scalar b3Log(b3Scalar) [b3Scalar.h <402:1 <402:26 402:30> 402:62>]
REFERENCE_TYPE_USAGE b3Scalar b3Log(b3Scalar) -> b3Scalar [b3Scalar.h <402:17 402:24>]
LOCAL_SYMBOL: b3Scalar.h<402:41> [b3Scalar.h <402:41 402:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Log(b3Scalar) -> b3Scalar [b3Scalar.h <402:32 402:39>]
SYMBOL_FUNCTION float logf(float)
REFERENCE_CALL b3Scalar b3Log(b3Scalar) -> float logf(float) [b3Scalar.h <402:53 402:56>]
LOCAL_SYMBOL: b3Scalar.h<402:41> [b3Scalar.h <402:58 402:58>]
SYMBOL_FUNCTION b3Scalar b3Pow(b3Scalar, b3Scalar) [b3Scalar.h <403:1 <403:26 403:30> 403:75>]
REFERENCE_TYPE_USAGE b3Scalar b3Pow(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <403:17 403:24>]
LOCAL_SYMBOL: b3Scalar.h<403:41> [b3Scalar.h <403:41 403:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Pow(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <403:32 403:39>]
LOCAL_SYMBOL: b3Scalar.h<403:52> [b3Scalar.h <403:52 403:52>]
REFERENCE_TYPE_USAGE b3Scalar b3Pow(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <403:43 403:50>]
SYMBOL_FUNCTION float powf(float, float)
REFERENCE_CALL b3Scalar b3Pow(b3Scalar, b3Scalar) -> float powf(float, float) [b3Scalar.h <403:64 403:67>]
LOCAL_SYMBOL: b3Scalar.h<403:41> [b3Scalar.h <403:69 403:69>]
LOCAL_SYMBOL: b3Scalar.h<403:52> [b3Scalar.h <403:71 403:71>]
SYMBOL_FUNCTION b3Scalar b3Fmod(b3Scalar, b3Scalar) [b3Scalar.h <404:1 <404:26 404:31> 404:77>]
REFERENCE_TYPE_USAGE b3Scalar b3Fmod(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <404:17 404:24>]
LOCAL_SYMBOL: b3Scalar.h<404:42> [b3Scalar.h <404:42 404:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Fmod(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <404:33 404:40>]
LOCAL_SYMBOL: b3Scalar.h<404:53> [b3Scalar.h <404:53 404:53>]
REFERENCE_TYPE_USAGE b3Scalar b3Fmod(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <404:44 404:51>]
SYMBOL_FUNCTION float fmodf(float, float)
REFERENCE_CALL b3Scalar b3Fmod(b3Scalar, b3Scalar) -> float fmodf(float, float) [b3Scalar.h <404:65 404:69>]
LOCAL_SYMBOL: b3Scalar.h<404:42> [b3Scalar.h <404:71 404:71>]
LOCAL_SYMBOL: b3Scalar.h<404:53> [b3Scalar.h <404:73 404:73>]
SYMBOL_FUNCTION b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) [b3Scalar.h <426:1 <426:26 426:36> 440:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <426:17 426:24>]
LOCAL_SYMBOL: b3Scalar.h<426:47> [b3Scalar.h <426:47 426:47>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <426:38 426:45>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <426:59 426:59>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <426:50 426:57>]
LOCAL_SYMBOL: b3Scalar.h<428:11> [b3Scalar.h <428:11 428:17>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <428:2 428:9>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <408:25 408:32>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <409:36 409:43>]
LOCAL_SYMBOL: b3Scalar.h<429:11> [b3Scalar.h <429:11 429:17>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <429:2 429:9>]
LOCAL_SYMBOL: b3Scalar.h<428:11> [b3Scalar.h <429:28 429:34>]
LOCAL_SYMBOL: b3Scalar.h<430:11> [b3Scalar.h <430:11 430:15>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <430:2 430:9>]
SYMBOL_FUNCTION b3Scalar b3Fabs(b3Scalar)
REFERENCE_CALL b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar b3Fabs(b3Scalar) [b3Scalar.h <430:19 430:24>]
LOCAL_SYMBOL: b3Scalar.h<426:47> [b3Scalar.h <430:26 430:26>]
LOCAL_SYMBOL: b3Scalar.h<431:11> [b3Scalar.h <431:11 431:15>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <431:2 431:9>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <432:6 432:6>]
LOCAL_SYMBOL: b3Scalar.h<433:12> [b3Scalar.h <433:12 433:12>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <433:3 433:10>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <433:17 433:17>]
LOCAL_SYMBOL: b3Scalar.h<430:11> [b3Scalar.h <433:21 433:25>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <433:31 433:31>]
LOCAL_SYMBOL: b3Scalar.h<430:11> [b3Scalar.h <433:35 433:39>]
LOCAL_SYMBOL: b3Scalar.h<431:11> [b3Scalar.h <434:3 434:7>]
LOCAL_SYMBOL: b3Scalar.h<428:11> [b3Scalar.h <434:11 434:17>]
LOCAL_SYMBOL: b3Scalar.h<428:11> [b3Scalar.h <434:21 434:27>]
LOCAL_SYMBOL: b3Scalar.h<433:12> [b3Scalar.h <434:31 434:31>]
LOCAL_SYMBOL: b3Scalar.h<436:12> [b3Scalar.h <436:12 436:12>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <436:3 436:10>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <436:17 436:17>]
LOCAL_SYMBOL: b3Scalar.h<430:11> [b3Scalar.h <436:21 436:25>]
LOCAL_SYMBOL: b3Scalar.h<430:11> [b3Scalar.h <436:31 436:35>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <436:39 436:39>]
LOCAL_SYMBOL: b3Scalar.h<431:11> [b3Scalar.h <437:3 437:7>]
LOCAL_SYMBOL: b3Scalar.h<429:11> [b3Scalar.h <437:11 437:17>]
LOCAL_SYMBOL: b3Scalar.h<428:11> [b3Scalar.h <437:21 437:27>]
LOCAL_SYMBOL: b3Scalar.h<436:12> [b3Scalar.h <437:31 437:31>]
LOCAL_SYMBOL: b3Scalar.h<426:47> [b3Scalar.h <439:10 439:10>]
LOCAL_SYMBOL: b3Scalar.h<431:11> [b3Scalar.h <439:23 439:27>]
LOCAL_SYMBOL: b3Scalar.h<431:11> [b3Scalar.h <439:31 439:35>]
SYMBOL_FUNCTION bool b3FuzzyZero(b3Scalar) [b3Scalar.h <442:1 <442:27 442:37> 442:84>]
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE bool b3FuzzyZero(b3Scalar) -> bool [b3Scalar.h <442:17 442:20>]
LOCAL_SYMBOL: b3Scalar.h<442:48> [b3Scalar.h <442:48 442:48>]
REFERENCE_TYPE_USAGE bool b3FuzzyZero(b3Scalar) -> b3Scalar [b3Scalar.h <442:39 442:46>]
REFERENCE_CALL bool b3FuzzyZero(b3Scalar) -> b3Scalar b3Fabs(b3Scalar) [b3Scalar.h <442:60 442:65>]
LOCAL_SYMBOL: b3Scalar.h<442:48> [b3Scalar.h <442:67 442:67>]
SYMBOL_FUNCTION bool b3Equal(b3Scalar, b3Scalar) [b3Scalar.h <444:1 <444:22 444:28> 446:1>]
REFERENCE_TYPE_USAGE bool b3Equal(b3Scalar, b3Scalar) -> bool [b3Scalar.h <444:17 444:20>]
LOCAL_SYMBOL: b3Scalar.h<444:39> [b3Scalar.h <444:39 444:39>]
REFERENCE_TYPE_USAGE bool b3Equal(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <444:30 444:37>]
LOCAL_SYMBOL: b3Scalar.h<444:51> [b3Scalar.h <444:51 444:53>]
REFERENCE_TYPE_USAGE bool b3Equal(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <444:42 444:49>]
LOCAL_SYMBOL: b3Scalar.h<444:39> [b3Scalar.h <445:12 445:12>]
LOCAL_SYMBOL: b3Scalar.h<444:51> [b3Scalar.h <445:18 445:20>]
LOCAL_SYMBOL: b3Scalar.h<444:39> [b3Scalar.h <445:29 445:29>]
LOCAL_SYMBOL: b3Scalar.h<444:51> [b3Scalar.h <445:35 445:37>]
SYMBOL_FUNCTION bool b3GreaterEqual(b3Scalar, b3Scalar) [b3Scalar.h <447:1 <447:22 447:35> 449:1>]
REFERENCE_TYPE_USAGE bool b3GreaterEqual(b3Scalar, b3Scalar) -> bool [b3Scalar.h <447:17 447:20>]
LOCAL_SYMBOL: b3Scalar.h<447:47> [b3Scalar.h <447:47 447:47>]
REFERENCE_TYPE_USAGE bool b3GreaterEqual(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <447:38 447:45>]
LOCAL_SYMBOL: b3Scalar.h<447:59> [b3Scalar.h <447:59 447:61>]
REFERENCE_TYPE_USAGE bool b3GreaterEqual(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <447:50 447:57>]
LOCAL_SYMBOL: b3Scalar.h<447:47> [b3Scalar.h <448:13 448:13>]
LOCAL_SYMBOL: b3Scalar.h<447:59> [b3Scalar.h <448:19 448:21>]
SYMBOL_FUNCTION int b3IsNegative(b3Scalar) [b3Scalar.h <452:1 <452:27 452:38> 454:1>]
REFERENCE_TYPE_USAGE int b3IsNegative(b3Scalar) -> int [b3Scalar.h <452:17 452:19>]
LOCAL_SYMBOL: b3Scalar.h<452:49> [b3Scalar.h <452:49 452:49>]
REFERENCE_TYPE_USAGE int b3IsNegative(b3Scalar) -> b3Scalar [b3Scalar.h <452:40 452:47>]
LOCAL_SYMBOL: b3Scalar.h<452:49> [b3Scalar.h <453:12 453:12>]
REFERENCE_TYPE_USAGE int b3IsNegative(b3Scalar) -> b3Scalar [b3Scalar.h <453:16 453:23>]
SYMBOL_FUNCTION b3Scalar b3Radians(b3Scalar) [b3Scalar.h <456:1 <456:26 456:34> 456:78>]
REFERENCE_TYPE_USAGE b3Scalar b3Radians(b3Scalar) -> b3Scalar [b3Scalar.h <456:17 456:24>]
LOCAL_SYMBOL: b3Scalar.h<456:45> [b3Scalar.h <456:45 456:45>]
REFERENCE_TYPE_USAGE b3Scalar b3Radians(b3Scalar) -> b3Scalar [b3Scalar.h <456:36 456:43>]
LOCAL_SYMBOL: b3Scalar.h<456:45> [b3Scalar.h <456:57 456:57>]
REFERENCE_TYPE_USAGE b3Scalar b3Radians(b3Scalar) -> b3Scalar [b3Scalar.h <408:25 408:32>]
REFERENCE_TYPE_USAGE b3Scalar b3Radians(b3Scalar) -> b3Scalar [b3Scalar.h <411:36 411:43>]
SYMBOL_FUNCTION b3Scalar b3Degrees(b3Scalar) [b3Scalar.h <457:1 <457:26 457:34> 457:78>]
REFERENCE_TYPE_USAGE b3Scalar b3Degrees(b3Scalar) -> b3Scalar [b3Scalar.h <457:17 457:24>]
LOCAL_SYMBOL: b3Scalar.h<457:45> [b3Scalar.h <457:45 457:45>]
REFERENCE_TYPE_USAGE b3Scalar b3Degrees(b3Scalar) -> b3Scalar [b3Scalar.h <457:36 457:43>]
LOCAL_SYMBOL: b3Scalar.h<457:45> [b3Scalar.h <457:57 457:57>]
REFERENCE_TYPE_USAGE b3Scalar b3Degrees(b3Scalar) -> b3Scalar [b3Scalar.h <412:27 412:34>]
REFERENCE_TYPE_USAGE b3Scalar b3Degrees(b3Scalar) -> b3Scalar [b3Scalar.h <408:25 408:32>]
SYMBOL_FUNCTION b3Scalar b3Fsel(b3Scalar, b3Scalar, b3Scalar) [b3Scalar.h <462:1 <462:26 462:31> 465:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Fsel(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <462:17 462:24>]
LOCAL_SYMBOL: b3Scalar.h<462:42> [b3Scalar.h <462:42 462:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Fsel(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <462:33 462:40>]
LOCAL_SYMBOL: b3Scalar.h<462:54> [b3Scalar.h <462:54 462:54>]
REFERENCE_TYPE_USAGE b3Scalar b3Fsel(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <462:45 462:52>]
LOCAL_SYMBOL: b3Scalar.h<462:66> [b3Scalar.h <462:66 462:66>]
REFERENCE_TYPE_USAGE b3Scalar b3Fsel(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <462:57 462:64>]
LOCAL_SYMBOL: b3Scalar.h<462:42> [b3Scalar.h <464:9 464:9>]
LOCAL_SYMBOL: b3Scalar.h<462:54> [b3Scalar.h <464:18 464:18>]
LOCAL_SYMBOL: b3Scalar.h<462:66> [b3Scalar.h <464:22 464:22>]
SYMBOL_FUNCTION bool b3MachineIsLittleEndian() [b3Scalar.h <470:1 <470:22 470:44> 478:1>]
REFERENCE_TYPE_USAGE bool b3MachineIsLittleEndian() -> bool [b3Scalar.h <470:17 470:20>]
LOCAL_SYMBOL: b3Scalar.h<472:13> [b3Scalar.h <472:13 472:13>]
SYMBOL_BUILTIN_TYPE long
REFERENCE_TYPE_USAGE bool b3MachineIsLittleEndian() -> long [b3Scalar.h <472:4 472:7>]
LOCAL_SYMBOL: b3Scalar.h<473:16> [b3Scalar.h <473:16 473:16>]
REFERENCE_TYPE_USAGE bool b3MachineIsLittleEndian() -> char [b3Scalar.h <473:10 473:13>]
REFERENCE_TYPE_USAGE bool b3MachineIsLittleEndian() -> char [b3Scalar.h <473:27 473:30>]
LOCAL_SYMBOL: b3Scalar.h<472:13> [b3Scalar.h <473:36 473:36>]
LOCAL_SYMBOL: b3Scalar.h<473:16> [b3Scalar.h <474:8 474:8>]
SYMBOL_FUNCTION unsigned int b3Select(unsigned int, unsigned int, unsigned int) [b3Scalar.h <484:1 <484:26 484:33> 493:1>]
SYMBOL_BUILTIN_TYPE unsigned int
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <484:17 484:24>]
LOCAL_SYMBOL: b3Scalar.h<484:44> [b3Scalar.h <484:44 484:52>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <484:35 484:42>]
LOCAL_SYMBOL: b3Scalar.h<484:64> [b3Scalar.h <484:64 484:86>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <484:55 484:62>]
LOCAL_SYMBOL: b3Scalar.h<484:98> [b3Scalar.h <484:98 484:117>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <484:89 484:96>]
LOCAL_SYMBOL: b3Scalar.h<490:14> [b3Scalar.h <490:14 490:19>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <490:5 490:12>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <490:24 490:31>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> int [b3Scalar.h <490:36 490:38>]
LOCAL_SYMBOL: b3Scalar.h<484:44> [b3Scalar.h <490:40 490:48>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> int [b3Scalar.h <490:54 490:56>]
LOCAL_SYMBOL: b3Scalar.h<484:44> [b3Scalar.h <490:58 490:66>]
LOCAL_SYMBOL: b3Scalar.h<491:14> [b3Scalar.h <491:14 491:20>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <491:5 491:12>]
LOCAL_SYMBOL: b3Scalar.h<490:14> [b3Scalar.h <491:25 491:30>]
LOCAL_SYMBOL: b3Scalar.h<484:64> [b3Scalar.h <492:14 492:36>]
LOCAL_SYMBOL: b3Scalar.h<490:14> [b3Scalar.h <492:40 492:45>]
LOCAL_SYMBOL: b3Scalar.h<484:98> [b3Scalar.h <492:51 492:70>]
LOCAL_SYMBOL: b3Scalar.h<491:14> [b3Scalar.h <492:74 492:80>]
SYMBOL_FUNCTION int b3Select(unsigned int, int, int) [b3Scalar.h <494:1 <494:21 494:28> 499:1>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <494:17 494:19>]
LOCAL_SYMBOL: b3Scalar.h<494:39> [b3Scalar.h <494:39 494:47>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> unsigned int [b3Scalar.h <494:30 494:37>]
LOCAL_SYMBOL: b3Scalar.h<494:54> [b3Scalar.h <494:54 494:76>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <494:50 494:52>]
LOCAL_SYMBOL: b3Scalar.h<494:83> [b3Scalar.h <494:83 494:102>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <494:79 494:81>]
LOCAL_SYMBOL: b3Scalar.h<496:14> [b3Scalar.h <496:14 496:19>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> unsigned int [b3Scalar.h <496:5 496:12>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> unsigned int [b3Scalar.h <496:24 496:31>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <496:36 496:38>]
LOCAL_SYMBOL: b3Scalar.h<494:39> [b3Scalar.h <496:40 496:48>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <496:54 496:56>]
LOCAL_SYMBOL: b3Scalar.h<494:39> [b3Scalar.h <496:58 496:66>]
LOCAL_SYMBOL: b3Scalar.h<497:14> [b3Scalar.h <497:14 497:20>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> unsigned int [b3Scalar.h <497:5 497:12>]
LOCAL_SYMBOL: b3Scalar.h<496:14> [b3Scalar.h <497:25 497:30>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <498:24 498:26>]
LOCAL_SYMBOL: b3Scalar.h<494:54> [b3Scalar.h <498:30 498:52>]
LOCAL_SYMBOL: b3Scalar.h<496:14> [b3Scalar.h <498:56 498:61>]
LOCAL_SYMBOL: b3Scalar.h<494:83> [b3Scalar.h <498:67 498:86>]
LOCAL_SYMBOL: b3Scalar.h<497:14> [b3Scalar.h <498:90 498:96>]
SYMBOL_FUNCTION float b3Select(unsigned int, float, float) [b3Scalar.h <500:1 <500:23 500:30> 507:1>]
REFERENCE_TYPE_USAGE float b3Select(unsigned int, float, float) -> float [b3Scalar.h <500:17 500:21>]
LOCAL_SYMBOL: b3Scalar.h<500:41> [b3Scalar.h <500:41 500:49>]
REFERENCE_TYPE_USAGE float b3Select(unsigned int, float, float) -> unsigned int [b3Scalar.h <500:32 500:39>]
LOCAL_SYMBOL: b3Scalar.h<500:58> [b3Scalar.h <500:58 500:80>]
REFERENCE_TYPE_USAGE float b3Select(unsigned int, float, float) -> float [b3Scalar.h <500:52 500:56>]
LOCAL_SYMBOL: b3Scalar.h<500:89> [b3Scalar.h <500:89 500:108>]
REFERENCE_TYPE_USAGE float b3Select(unsigned int, float, float) -> float [b3Scalar.h <500:83 500:87>]
LOCAL_SYMBOL: b3Scalar.h<500:41> [b3Scalar.h <505:13 505:21>]
LOCAL_SYMBOL: b3Scalar.h<500:58> [b3Scalar.h <505:31 505:53>]
LOCAL_SYMBOL: b3Scalar.h<500:89> [b3Scalar.h <505:57 505:76>]
SYMBOL_FUNCTION void b3Swap<typename T>(T &, T &) [b3Scalar.h <509:1 <509:43 509:48> 514:1>]
REFERENCE_TYPE_USAGE void b3Swap<typename T>(T &, T &) -> void [b3Scalar.h <509:38 509:41>]
LOCAL_SYMBOL: b3Scalar.h<509:53> [b3Scalar.h <509:53 509:53>]
REFERENCE_TYPE_USAGE void b3Swap<typename T>(T &, T &) -> b3Swap<typename T>::T [b3Scalar.h <509:50 509:50>]
LOCAL_SYMBOL: b3Scalar.h<509:59> [b3Scalar.h <509:59 509:59>]
REFERENCE_TYPE_USAGE void b3Swap<typename T>(T &, T &) -> b3Swap<typename T>::T [b3Scalar.h <509:56 509:56>]
LOCAL_SYMBOL: b3Scalar.h<511:4> [b3Scalar.h <511:4 511:6>]
REFERENCE_TYPE_USAGE void b3Swap<typename T>(T &, T &) -> b3Swap<typename T>::T [b3Scalar.h <511:2 511:2>]
LOCAL_SYMBOL: b3Scalar.h<509:53> [b3Scalar.h <511:10 511:10>]
LOCAL_SYMBOL: b3Scalar.h<509:53> [b3Scalar.h <512:2 512:2>]
LOCAL_SYMBOL: b3Scalar.h<509:59> [b3Scalar.h <512:6 512:6>]
LOCAL_SYMBOL: b3Scalar.h<509:59> [b3Scalar.h <513:2 513:2>]
LOCAL_SYMBOL: b3Scalar.h<511:4> [b3Scalar.h <513:6 513:8>]
SYMBOL_TEMPLATE_PARAMETER b3Swap<typename T>::T [b3Scalar.h <509:19 509:19>]
SYMBOL_FUNCTION unsigned int b3SwapEndian(unsigned int) [b3Scalar.h <518:1 <518:26 518:37> 521:1>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndian(unsigned int) -> unsigned int [b3Scalar.h <518:17 518:24>]
LOCAL_SYMBOL: b3Scalar.h<518:48> [b3Scalar.h <518:48 518:50>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndian(unsigned int) -> unsigned int [b3Scalar.h <518:39 518:46>]
LOCAL_SYMBOL: b3Scalar.h<518:48> [b3Scalar.h <520:12 520:14>]
LOCAL_SYMBOL: b3Scalar.h<518:48> [b3Scalar.h <520:41 520:43>]
LOCAL_SYMBOL: b3Scalar.h<518:48> [b3Scalar.h <520:69 520:71>]
LOCAL_SYMBOL: b3Scalar.h<518:48> [b3Scalar.h <520:98 520:100>]
SYMBOL_FUNCTION unsigned short b3SwapEndian(unsigned short) [b3Scalar.h <523:1 <523:32 523:43> 526:1>]
SYMBOL_BUILTIN_TYPE unsigned short
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(unsigned short) -> unsigned short [b3Scalar.h <523:17 523:24>]
LOCAL_SYMBOL: b3Scalar.h<523:60> [b3Scalar.h <523:60 523:62>]
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(unsigned short) -> unsigned short [b3Scalar.h <523:45 523:52>]
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(unsigned short) -> unsigned short [b3Scalar.h <525:21 525:28>]
LOCAL_SYMBOL: b3Scalar.h<523:60> [b3Scalar.h <525:39 525:41>]
LOCAL_SYMBOL: b3Scalar.h<523:60> [b3Scalar.h <525:63 525:65>]
SYMBOL_FUNCTION unsigned int b3SwapEndian(int) [b3Scalar.h <528:1 <528:26 528:37> 531:1>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndian(int) -> unsigned int [b3Scalar.h <528:17 528:24>]
LOCAL_SYMBOL: b3Scalar.h<528:43> [b3Scalar.h <528:43 528:45>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndian(int) -> int [b3Scalar.h <528:39 528:41>]
SYMBOL_FUNCTION unsigned int b3SwapEndian(unsigned int)
REFERENCE_CALL unsigned int b3SwapEndian(int) -> unsigned int b3SwapEndian(unsigned int) [b3Scalar.h <530:9 530:20>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndian(int) -> unsigned int [b3Scalar.h <530:23 530:30>]
LOCAL_SYMBOL: b3Scalar.h<528:43> [b3Scalar.h <530:32 530:34>]
SYMBOL_FUNCTION unsigned short b3SwapEndian(short) [b3Scalar.h <533:1 <533:32 533:43> 536:1>]
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(short) -> unsigned short [b3Scalar.h <533:17 533:24>]
LOCAL_SYMBOL: b3Scalar.h<533:51> [b3Scalar.h <533:51 533:53>]
SYMBOL_BUILTIN_TYPE short
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(short) -> short [b3Scalar.h <533:45 533:49>]
SYMBOL_FUNCTION unsigned short b3SwapEndian(unsigned short)
REFERENCE_CALL unsigned short b3SwapEndian(short) -> unsigned short b3SwapEndian(unsigned short) [b3Scalar.h <535:9 535:20>]
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(short) -> unsigned short [b3Scalar.h <535:23 535:30>]
LOCAL_SYMBOL: b3Scalar.h<533:51> [b3Scalar.h <535:39 535:41>]
SYMBOL_FUNCTION unsigned int b3SwapEndianFloat(float) [b3Scalar.h <544:1 <544:31 544:47> 555:1>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned int [b3Scalar.h <544:17 544:24>]
LOCAL_SYMBOL: b3Scalar.h<544:55> [b3Scalar.h <544:55 544:55>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> float [b3Scalar.h <544:49 544:53>]
LOCAL_SYMBOL: b3Scalar.h<546:18> [b3Scalar.h <546:18 546:18>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned int [b3Scalar.h <546:5 546:12>]
LOCAL_SYMBOL: b3Scalar.h<547:20> [b3Scalar.h <547:20 547:22>]
SYMBOL_BUILTIN_TYPE unsigned char
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned char [b3Scalar.h <547:5 547:12>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned char [b3Scalar.h <547:27 547:34>]
LOCAL_SYMBOL: b3Scalar.h<546:18> [b3Scalar.h <547:44 547:44>]
LOCAL_SYMBOL: b3Scalar.h<548:20> [b3Scalar.h <548:20 548:22>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned char [b3Scalar.h <548:5 548:12>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned char [b3Scalar.h <548:27 548:34>]
LOCAL_SYMBOL: b3Scalar.h<544:55> [b3Scalar.h <548:44 548:44>]
LOCAL_SYMBOL: b3Scalar.h<547:20> [b3Scalar.h <550:5 550:7>]
LOCAL_SYMBOL: b3Scalar.h<548:20> [b3Scalar.h <550:14 550:16>]
LOCAL_SYMBOL: b3Scalar.h<547:20> [b3Scalar.h <551:5 551:7>]
LOCAL_SYMBOL: b3Scalar.h<548:20> [b3Scalar.h <551:14 551:16>]
LOCAL_SYMBOL: b3Scalar.h<547:20> [b3Scalar.h <552:5 552:7>]
LOCAL_SYMBOL: b3Scalar.h<548:20> [b3Scalar.h <552:14 552:16>]
LOCAL_SYMBOL: b3Scalar.h<547:20> [b3Scalar.h <553:5 553:7>]
LOCAL_SYMBOL: b3Scalar.h<548:20> [b3Scalar.h <553:14 553:16>]
LOCAL_SYMBOL: b3Scalar.h<546:18> [b3Scalar.h <554:12 554:12>]
SYMBOL_FUNCTION float b3UnswapEndianFloat(unsigned int) [b3Scalar.h <558:1 <558:23 558:41> 570:1>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> float [b3Scalar.h <558:17 558:21>]
LOCAL_SYMBOL: b3Scalar.h<558:56> [b3Scalar.h <558:56 558:56>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> unsigned int [b3Scalar.h <558:43 558:50>]
LOCAL_SYMBOL: b3Scalar.h<560:11> [b3Scalar.h <560:11 560:11>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> float [b3Scalar.h <560:5 560:9>]
LOCAL_SYMBOL: b3Scalar.h<561:20> [b3Scalar.h <561:20 561:22>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> unsigned char [b3Scalar.h <561:5 561:12>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> unsigned char [b3Scalar.h <561:27 561:34>]
LOCAL_SYMBOL: b3Scalar.h<558:56> [b3Scalar.h <561:44 561:44>]
LOCAL_SYMBOL: b3Scalar.h<562:20> [b3Scalar.h <562:20 562:22>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> unsigned char [b3Scalar.h <562:5 562:12>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> unsigned char [b3Scalar.h <562:27 562:34>]
LOCAL_SYMBOL: b3Scalar.h<560:11> [b3Scalar.h <562:44 562:44>]
LOCAL_SYMBOL: b3Scalar.h<562:20> [b3Scalar.h <564:5 564:7>]
LOCAL_SYMBOL: b3Scalar.h<561:20> [b3Scalar.h <564:14 564:16>]
LOCAL_SYMBOL: b3Scalar.h<562:20> [b3Scalar.h <565:5 565:7>]
LOCAL_SYMBOL: b3Scalar.h<561:20> [b3Scalar.h <565:14 565:16>]
LOCAL_SYMBOL: b3Scalar.h<562:20> [b3Scalar.h <566:5 566:7>]
LOCAL_SYMBOL: b3Scalar.h<561:20> [b3Scalar.h <566:14 566:16>]
LOCAL_SYMBOL: b3Scalar.h<562:20> [b3Scalar.h <567:5 567:7>]
LOCAL_SYMBOL: b3Scalar.h<561:20> [b3Scalar.h <567:14 567:16>]
LOCAL_SYMBOL: b3Scalar.h<560:11> [b3Scalar.h <569:12 569:12>]
SYMBOL_FUNCTION void b3SwapEndianDouble(double, unsigned char *) [b3Scalar.h <574:1 <574:23 574:40> 587:1>]
REFERENCE_TYPE_USAGE void b3SwapEndianDouble(double, unsigned char *) -> void [b3Scalar.h <574:17 574:20>]
LOCAL_SYMBOL: b3Scalar.h<574:49> [b3Scalar.h <574:49 574:49>]
SYMBOL_BUILTIN_TYPE double
REFERENCE_TYPE_USAGE void b3SwapEndianDouble(double, unsigned char *) -> double [b3Scalar.h <574:42 574:47>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <574:67 574:69>]
REFERENCE_TYPE_USAGE void b3SwapEndianDouble(double, unsigned char *) -> unsigned char [b3Scalar.h <574:52 574:59>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <576:20 576:22>]
REFERENCE_TYPE_USAGE void b3SwapEndianDouble(double, unsigned char *) -> unsigned char [b3Scalar.h <576:5 576:12>]
REFERENCE_TYPE_USAGE void b3SwapEndianDouble(double, unsigned char *) -> unsigned char [b3Scalar.h <576:27 576:34>]
LOCAL_SYMBOL: b3Scalar.h<574:49> [b3Scalar.h <576:44 576:44>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <578:5 578:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <578:14 578:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <579:5 579:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <579:14 579:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <580:5 580:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <580:14 580:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <581:5 581:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <581:14 581:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <582:5 582:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <582:14 582:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <583:5 583:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <583:14 583:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <584:5 584:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <584:14 584:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <585:5 585:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <585:14 585:16>]
SYMBOL_FUNCTION double b3UnswapEndianDouble(const unsigned char *) [b3Scalar.h <590:1 <590:24 590:43> 605:1>]
REFERENCE_TYPE_USAGE double b3UnswapEndianDouble(const unsigned char *) -> double [b3Scalar.h <590:17 590:22>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <590:66 590:68>]
REFERENCE_TYPE_USAGE double b3UnswapEndianDouble(const unsigned char *) -> unsigned char [b3Scalar.h <590:51 590:58>]
LOCAL_SYMBOL: b3Scalar.h<592:12> [b3Scalar.h <592:12 592:12>]
REFERENCE_TYPE_USAGE double b3UnswapEndianDouble(const unsigned char *) -> double [b3Scalar.h <592:5 592:10>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <593:20 593:22>]
REFERENCE_TYPE_USAGE double b3UnswapEndianDouble(const unsigned char *) -> unsigned char [b3Scalar.h <593:5 593:12>]
REFERENCE_TYPE_USAGE double b3UnswapEndianDouble(const unsigned char *) -> unsigned char [b3Scalar.h <593:27 593:34>]
LOCAL_SYMBOL: b3Scalar.h<592:12> [b3Scalar.h <593:44 593:44>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <595:5 595:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <595:14 595:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <596:5 596:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <596:14 596:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <597:5 597:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <597:14 597:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <598:5 598:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <598:14 598:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <599:5 599:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <599:14 599:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <600:5 600:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <600:14 600:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <601:5 601:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <601:14 601:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <602:5 602:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <602:14 602:16>]
LOCAL_SYMBOL: b3Scalar.h<592:12> [b3Scalar.h <604:9 604:9>]
SYMBOL_FUNCTION b3Scalar b3NormalizeAngle(b3Scalar) [b3Scalar.h <608:1 <608:26 608:41> 623:1>]
REFERENCE_TYPE_USAGE b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar [b3Scalar.h <608:17 608:24>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <608:52 608:65>]
REFERENCE_TYPE_USAGE b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar [b3Scalar.h <608:43 608:50>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <610:2 610:15>]
SYMBOL_FUNCTION b3Scalar b3Fmod(b3Scalar, b3Scalar)
REFERENCE_CALL b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar b3Fmod(b3Scalar, b3Scalar) [b3Scalar.h <610:19 610:24>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <610:26 610:39>]
REFERENCE_TYPE_USAGE b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar [b3Scalar.h <408:25 408:32>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <611:5 611:18>]
REFERENCE_TYPE_USAGE b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar [b3Scalar.h <409:36 409:43>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <613:10 613:23>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <615:10 615:23>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <617:10 617:23>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <621:10 621:23>]
SYMBOL_STRUCT b3TypedObject [b3Scalar.h <626:1 <626:8 626:20> 637:1>]
SYMBOL_METHOD public void b3TypedObject::b3TypedObject(int) [b3Scalar.h <628:2 <628:2 628:14> 631:2>]
LOCAL_SYMBOL: b3Scalar.h<628:20> [b3Scalar.h <628:20 628:29>]
REFERENCE_TYPE_USAGE void b3TypedObject::b3TypedObject(int) -> int [b3Scalar.h <628:16 628:18>]
REFERENCE_USAGE void b3TypedObject::b3TypedObject(int) -> int b3TypedObject::m_objectType [b3Scalar.h <629:4 629:15>]
LOCAL_SYMBOL: b3Scalar.h<628:20> [b3Scalar.h <629:17 629:26>]
SYMBOL_FIELD public int b3TypedObject::m_objectType [b3Scalar.h <632:6 632:17>]
REFERENCE_TYPE_USAGE int b3TypedObject::m_objectType -> int [b3Scalar.h <632:2 632:4>]
SYMBOL_METHOD public int b3TypedObject::getObjectType() const [b3Scalar.h <633:2 <633:13 633:25> 636:2>]
REFERENCE_TYPE_USAGE int b3TypedObject::getObjectType() const -> int [b3Scalar.h <633:9 633:11>]
REFERENCE_USAGE int b3TypedObject::getObjectType() const -> int b3TypedObject::m_objectType [b3Scalar.h <635:10 635:21>]
SYMBOL_FUNCTION T * b3AlignPointer<typename T>(T *, size_t) [b3Scalar.h <642:1 <642:25 642:38> 661:1>]
REFERENCE_TYPE_USAGE T * b3AlignPointer<typename T>(T *, size_t) -> b3AlignPointer<typename T>::T [b3Scalar.h <642:22 642:22>]
LOCAL_SYMBOL: b3Scalar.h<642:43> [b3Scalar.h <642:43 642:54>]
REFERENCE_TYPE_USAGE T * b3AlignPointer<typename T>(T *, size_t) -> b3AlignPointer<typename T>::T [b3Scalar.h <642:40 642:40>]
LOCAL_SYMBOL: b3Scalar.h<642:64> [b3Scalar.h <642:64 642:72>]
REFERENCE_TYPE_USAGE T * b3AlignPointer<typename T>(T *, size_t) -> size_t [b3Scalar.h <642:57 642:62>]
SYMBOL_STRUCT b3AlignPointer<typename T>::b3ConvertPointerSizeT [b3Scalar.h <645:2 <645:9 645:29> 652:2>]
SYMBOL_UNION public b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) [b3Scalar.h <647:3 <647:3 647:7> 651:3>]
SYMBOL_FIELD public b3AlignPointer<typename T>::T * b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::ptr [b3Scalar.h <649:8 649:10>]
REFERENCE_TYPE_USAGE b3AlignPointer<typename T>::T * b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::ptr -> b3AlignPointer<typename T>::T [b3Scalar.h <649:5 649:5>]
SYMBOL_FIELD public size_t b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::integer [b3Scalar.h <650:12 650:18>]
REFERENCE_TYPE_USAGE size_t b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::integer -> size_t [b3Scalar.h <650:5 650:10>]
SYMBOL_FIELD public b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<typename T>::b3ConvertPointerSizeT:: [b3Scalar.h <647:3 647:7>]
REFERENCE_TYPE_USAGE b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<typename T>::b3ConvertPointerSizeT:: -> b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) [b3Scalar.h <647:3 647:7>]
LOCAL_SYMBOL: b3Scalar.h<653:27> [b3Scalar.h <653:27 653:35>]
REFERENCE_TYPE_USAGE T * b3AlignPointer<typename T>(T *, size_t) -> b3AlignPointer<typename T>::b3ConvertPointerSizeT [b3Scalar.h <653:5 653:25>]
LOCAL_SYMBOL: b3Scalar.h<656:15> [b3Scalar.h <656:15 656:22>]
REFERENCE_TYPE_USAGE T * b3AlignPointer<typename T>(T *, size_t) -> size_t [b3Scalar.h <656:8 656:13>]
LOCAL_SYMBOL: b3Scalar.h<642:64> [b3Scalar.h <656:28 656:36>]
LOCAL_SYMBOL: b3Scalar.h<653:27> [b3Scalar.h <657:5 657:13>]
LOCAL_SYMBOL: b3Scalar.h<642:43> [b3Scalar.h <657:21 657:32>]
LOCAL_SYMBOL: b3Scalar.h<653:27> [b3Scalar.h <658:2 658:10>]
LOCAL_SYMBOL: b3Scalar.h<642:64> [b3Scalar.h <658:23 658:31>]
LOCAL_SYMBOL: b3Scalar.h<653:27> [b3Scalar.h <659:2 659:10>]
LOCAL_SYMBOL: b3Scalar.h<656:15> [b3Scalar.h <659:23 659:30>]
LOCAL_SYMBOL: b3Scalar.h<653:27> [b3Scalar.h <660:9 660:17>]
SYMBOL_TEMPLATE_PARAMETER b3AlignPointer<typename T>::T [b3Scalar.h <642:20 642:20>]
SYMBOL_FUNCTION char * b3AlignPointer<char>(char *, size_t) [b3Scalar.h <642:22 <642:25 642:38> 661:1>]
SYMBOL_FUNCTION T * b3AlignPointer<typename T>(T *, size_t)
REFERENCE_TEMPLATE_SPECIALIZATION char * b3AlignPointer<char>(char *, size_t) -> T * b3AlignPointer<typename T>(T *, size_t) [b3Scalar.h <642:25 642:38>]
REFERENCE_TYPE_USAGE char * b3AlignPointer<char>(char *, size_t) -> size_t [b3Scalar.h <642:57 642:62>]
SYMBOL_STRUCT b3AlignPointer<char>::b3ConvertPointerSizeT [b3Scalar.h <645:2 <645:9 645:29> 652:2>]
SYMBOL_STRUCT b3AlignPointer<typename T>::b3ConvertPointerSizeT
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignPointer<char>::b3ConvertPointerSizeT -> b3AlignPointer<typename T>::b3ConvertPointerSizeT [b3Scalar.h <645:9 645:29>]
SYMBOL_UNION public b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) [b3Scalar.h <647:3 <647:3 647:7> 651:3>]
SYMBOL_UNION b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) -> b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) [b3Scalar.h <647:3 647:7>]
SYMBOL_FIELD public char * b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::ptr [b3Scalar.h <649:8 649:10>]
SYMBOL_FIELD b3AlignPointer<typename T>::T * b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::ptr
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION char * b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::ptr -> b3AlignPointer<typename T>::T * b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::ptr [b3Scalar.h <649:8 649:10>]
SYMBOL_FIELD public size_t b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::integer [b3Scalar.h <650:12 650:18>]
SYMBOL_FIELD size_t b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::integer
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION size_t b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::integer -> size_t b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::integer [b3Scalar.h <650:12 650:18>]
REFERENCE_TYPE_USAGE size_t b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::integer -> size_t [b3Scalar.h <650:5 650:10>]
SYMBOL_METHOD public void b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::(const b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) &) [b3Scalar.h <647:3 647:7>]
SYMBOL_METHOD public void b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::(b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) &&) [b3Scalar.h <647:3 647:7>]
SYMBOL_METHOD public void b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::() [b3Scalar.h <647:3 647:7>]
SYMBOL_FIELD public b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<char>::b3ConvertPointerSizeT:: [b3Scalar.h <647:3 647:7>]
SYMBOL_FIELD b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<typename T>::b3ConvertPointerSizeT::
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<char>::b3ConvertPointerSizeT:: -> b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<typename T>::b3ConvertPointerSizeT:: [b3Scalar.h <647:3 647:7>]
REFERENCE_TYPE_USAGE b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<char>::b3ConvertPointerSizeT:: -> b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) [b3Scalar.h <647:3 647:7>]
SYMBOL_METHOD public void b3AlignPointer<char>::b3ConvertPointerSizeT::b3ConvertPointerSizeT() [b3Scalar.h <645:9 <645:9 645:29> 645:29>]
SYMBOL_METHOD public void b3AlignPointer<char>::b3ConvertPointerSizeT::b3ConvertPointerSizeT(const b3AlignPointer<char>::b3ConvertPointerSizeT &) [b3Scalar.h <645:9 645:29>]
SYMBOL_METHOD public void b3AlignPointer<char>::b3ConvertPointerSizeT::b3ConvertPointerSizeT(b3AlignPointer<char>::b3ConvertPointerSizeT &&) [b3Scalar.h <645:9 645:29>]
REFERENCE_TYPE_USAGE char * b3AlignPointer<char>(char *, size_t) -> b3AlignPointer<char>::b3ConvertPointerSizeT [b3Scalar.h <653:5 653:25>]
SYMBOL_FUNCTION void b3AlignPointer<char>::b3ConvertPointerSizeT::b3ConvertPointerSizeT()
REFERENCE_CALL char * b3AlignPointer<char>(char *, size_t) -> void b3AlignPointer<char>::b3ConvertPointerSizeT::b3ConvertPointerSizeT() [b3Scalar.h <653:27 653:35>]
REFERENCE_TYPE_USAGE char * b3AlignPointer<char>(char *, size_t) -> size_t [b3Scalar.h <656:8 656:13>]
REFERENCE_USAGE char * b3AlignPointer<char>(char *, size_t) -> char * b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::ptr [b3Scalar.h <657:15 657:17>]
REFERENCE_USAGE char * b3AlignPointer<char>(char *, size_t) -> b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<char>::b3ConvertPointerSizeT:: [b3Scalar.h <657:15 657:17>]
REFERENCE_USAGE char * b3AlignPointer<char>(char *, size_t) -> size_t b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::integer [b3Scalar.h <658:12 658:18>]
REFERENCE_USAGE char * b3AlignPointer<char>(char *, size_t) -> b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<char>::b3ConvertPointerSizeT:: [b3Scalar.h <658:12 658:18>]
REFERENCE_USAGE char * b3AlignPointer<char>(char *, size_t) -> size_t b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::integer [b3Scalar.h <659:12 659:18>]
REFERENCE_USAGE char * b3AlignPointer<char>(char *, size_t) -> b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<char>::b3ConvertPointerSizeT:: [b3Scalar.h <659:12 659:18>]
REFERENCE_USAGE char * b3AlignPointer<char>(char *, size_t) -> char * b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::ptr [b3Scalar.h <660:19 660:21>]
REFERENCE_USAGE char * b3AlignPointer<char>(char *, size_t) -> b3AlignPointer<char>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<char>::b3ConvertPointerSizeT:: [b3Scalar.h <660:19 660:21>]
SYMBOL_FUNCTION void * b3AlignedAllocInternal(size_t, int) [b3AlignedAllocator.h <38:8 38:29>]
REFERENCE_TYPE_USAGE void * b3AlignedAllocInternal(size_t, int) -> void [b3AlignedAllocator.h <38:2 38:5>]
LOCAL_SYMBOL: b3AlignedAllocator.h<38:39> [b3AlignedAllocator.h <38:39 38:42>]
REFERENCE_TYPE_USAGE void * b3AlignedAllocInternal(size_t, int) -> size_t [b3AlignedAllocator.h <38:32 38:37>]
LOCAL_SYMBOL: b3AlignedAllocator.h<38:49> [b3AlignedAllocator.h <38:49 38:57>]
REFERENCE_TYPE_USAGE void * b3AlignedAllocInternal(size_t, int) -> int [b3AlignedAllocator.h <38:45 38:47>]
SYMBOL_FUNCTION void b3AlignedFreeInternal(void *) [b3AlignedAllocator.h <39:7 39:27>]
REFERENCE_TYPE_USAGE void b3AlignedFreeInternal(void *) -> void [b3AlignedAllocator.h <39:2 39:5>]
LOCAL_SYMBOL: b3AlignedAllocator.h<39:36> [b3AlignedAllocator.h <39:36 39:38>]
REFERENCE_TYPE_USAGE void b3AlignedFreeInternal(void *) -> void [b3AlignedAllocator.h <39:30 39:33>]
SYMBOL_TYPEDEF btSizeType [b3AlignedAllocator.h <45:13 45:22>]
REFERENCE_TYPE_USAGE btSizeType -> int [b3AlignedAllocator.h <45:9 45:11>]
SYMBOL_TYPEDEF b3AlignedAllocFunc [b3AlignedAllocator.h <47:16 47:33>]
REFERENCE_TYPE_USAGE b3AlignedAllocFunc -> void [b3AlignedAllocator.h <47:9 47:12>]
LOCAL_SYMBOL: b3AlignedAllocator.h<47:43> [b3AlignedAllocator.h <47:43 47:46>]
REFERENCE_TYPE_USAGE b3AlignedAllocFunc -> size_t [b3AlignedAllocator.h <47:36 47:41>]
LOCAL_SYMBOL: b3AlignedAllocator.h<47:53> [b3AlignedAllocator.h <47:53 47:61>]
REFERENCE_TYPE_USAGE b3AlignedAllocFunc -> int [b3AlignedAllocator.h <47:49 47:51>]
SYMBOL_TYPEDEF b3AlignedFreeFunc [b3AlignedAllocator.h <48:15 48:31>]
REFERENCE_TYPE_USAGE b3AlignedFreeFunc -> void [b3AlignedAllocator.h <48:9 48:12>]
LOCAL_SYMBOL: b3AlignedAllocator.h<48:40> [b3AlignedAllocator.h <48:40 48:47>]
REFERENCE_TYPE_USAGE b3AlignedFreeFunc -> void [b3AlignedAllocator.h <48:34 48:37>]
SYMBOL_TYPEDEF b3AllocFunc [b3AlignedAllocator.h <49:16 49:26>]
REFERENCE_TYPE_USAGE b3AllocFunc -> void [b3AlignedAllocator.h <49:9 49:12>]
LOCAL_SYMBOL: b3AlignedAllocator.h<49:36> [b3AlignedAllocator.h <49:36 49:39>]
REFERENCE_TYPE_USAGE b3AllocFunc -> size_t [b3AlignedAllocator.h <49:29 49:34>]
SYMBOL_TYPEDEF b3FreeFunc [b3AlignedAllocator.h <50:15 50:24>]
REFERENCE_TYPE_USAGE b3FreeFunc -> void [b3AlignedAllocator.h <50:9 50:12>]
LOCAL_SYMBOL: b3AlignedAllocator.h<50:33> [b3AlignedAllocator.h <50:33 50:40>]
REFERENCE_TYPE_USAGE b3FreeFunc -> void [b3AlignedAllocator.h <50:27 50:30>]
SYMBOL_FUNCTION void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) [b3AlignedAllocator.h <53:6 53:28>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> void [b3AlignedAllocator.h <53:1 53:4>]
LOCAL_SYMBOL: b3AlignedAllocator.h<53:43> [b3AlignedAllocator.h <53:43 53:51>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> b3AllocFunc [b3AlignedAllocator.h <53:30 53:40>]
LOCAL_SYMBOL: b3AlignedAllocator.h<53:66> [b3AlignedAllocator.h <53:66 53:73>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> b3FreeFunc [b3AlignedAllocator.h <53:54 53:63>]
SYMBOL_FUNCTION void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) [b3AlignedAllocator.h <55:6 55:35>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> void [b3AlignedAllocator.h <55:1 55:4>]
LOCAL_SYMBOL: b3AlignedAllocator.h<55:57> [b3AlignedAllocator.h <55:57 55:65>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> b3AlignedAllocFunc [b3AlignedAllocator.h <55:37 55:54>]
LOCAL_SYMBOL: b3AlignedAllocator.h<55:87> [b3AlignedAllocator.h <55:87 55:94>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> b3AlignedFreeFunc [b3AlignedAllocator.h <55:68 55:84>]
SYMBOL_CLASS b3AlignedAllocator<typename T, unsigned int Alignment> [b3AlignedAllocator.h <60:1 <61:7 61:24> 102:1>]
SYMBOL_TYPEDEF private b3AlignedAllocator<typename T, unsigned int Alignment>::self_type [b3AlignedAllocator.h <63:46 63:54>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::self_type -> b3AlignedAllocator<T, Alignment> [b3AlignedAllocator.h <63:10 63:27>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<T, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <63:30 63:30>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<T, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <63:34 63:42>]
SYMBOL_METHOD public void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment>() [b3AlignedAllocator.h <68:2 <68:2 68:19> 68:24>]
SYMBOL_METHOD public void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment><typename Other>(const b3AlignedAllocator<Other, Alignment> &) [b3AlignedAllocator.h <73:2 <74:2 74:19> 74:73>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment><typename Other>(const b3AlignedAllocator<Other, Alignment> &) -> b3AlignedAllocator<b3AlignedAllocator<T, Alignment><typename Other>::Other, Alignment> [b3AlignedAllocator.h <74:28 74:45>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<T, Alignment><typename Other>::Other, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment><typename Other>::Other [b3AlignedAllocator.h <74:48 74:52>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<T, Alignment><typename Other>::Other, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <74:56 74:64>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment><typename Other>::Other [b3AlignedAllocator.h <73:22 73:26>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer [b3AlignedAllocator.h <76:27 76:39>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <76:16 76:16>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference [b3AlignedAllocator.h <77:27 77:41>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <77:16 77:16>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <78:27 78:33>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <78:10 78:10>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::reference [b3AlignedAllocator.h <79:27 79:35>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::reference -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <79:10 79:10>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::value_type [b3AlignedAllocator.h <80:27 80:36>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::value_type -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <80:10 80:10>]
SYMBOL_METHOD public b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const [b3AlignedAllocator.h <82:2 <82:16 82:22> 82:98>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <82:2 82:8>]
LOCAL_SYMBOL: b3AlignedAllocator.h<82:45> [b3AlignedAllocator.h <82:45 82:47>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::reference [b3AlignedAllocator.h <82:28 82:36>]
LOCAL_SYMBOL: b3AlignedAllocator.h<82:45> [b3AlignedAllocator.h <82:93 82:95>]
SYMBOL_METHOD public b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const [b3AlignedAllocator.h <83:2 <83:16 83:22> 83:98>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer [b3AlignedAllocator.h <83:2 83:14>]
LOCAL_SYMBOL: b3AlignedAllocator.h<83:45> [b3AlignedAllocator.h <83:45 83:47>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference [b3AlignedAllocator.h <83:28 83:42>]
LOCAL_SYMBOL: b3AlignedAllocator.h<83:45> [b3AlignedAllocator.h <83:93 83:95>]
SYMBOL_METHOD public b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) [b3AlignedAllocator.h <84:2 <84:16 84:23> 87:2>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <84:2 84:8>]
LOCAL_SYMBOL: b3AlignedAllocator.h<84:46> [b3AlignedAllocator.h <84:46 84:46>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> btSizeType [b3AlignedAllocator.h <84:28 84:37>]
LOCAL_SYMBOL: b3AlignedAllocator.h<84:73> [b3AlignedAllocator.h <84:73 84:76>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer [b3AlignedAllocator.h <84:52 84:64>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> void [b3AlignedAllocator.h <85:4 85:7>]
LOCAL_SYMBOL: b3AlignedAllocator.h<84:73> [b3AlignedAllocator.h <85:9 85:12>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <86:28 86:34>]
SYMBOL_FUNCTION void * b3AlignedAllocInternal(size_t, int)
REFERENCE_CALL b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> void * b3AlignedAllocInternal(size_t, int) [b3AlignedAllocator.h <41:41 41:62>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::value_type [b3AlignedAllocator.h <86:61 86:70>]
LOCAL_SYMBOL: b3AlignedAllocator.h<84:46> [b3AlignedAllocator.h <86:75 86:75>]
REFERENCE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <86:79 86:87>]
SYMBOL_METHOD public void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) [b3AlignedAllocator.h <88:2 <88:16 88:24> 88:116>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) -> void [b3AlignedAllocator.h <88:2 88:5>]
LOCAL_SYMBOL: b3AlignedAllocator.h<88:45> [b3AlignedAllocator.h <88:45 88:47>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <88:28 88:34>]
LOCAL_SYMBOL: b3AlignedAllocator.h<88:72> [b3AlignedAllocator.h <88:72 88:76>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::value_type [b3AlignedAllocator.h <88:57 88:66>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::value_type [b3AlignedAllocator.h <88:95 88:104>]
LOCAL_SYMBOL: b3AlignedAllocator.h<88:72> [b3AlignedAllocator.h <88:107 88:111>]
LOCAL_SYMBOL: b3AlignedAllocator.h<88:45> [b3AlignedAllocator.h <88:90 88:92>]
SYMBOL_METHOD public void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <89:2 <89:16 89:25> 91:2>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> void [b3AlignedAllocator.h <89:2 89:5>]
LOCAL_SYMBOL: b3AlignedAllocator.h<89:45> [b3AlignedAllocator.h <89:45 89:47>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <89:28 89:34>]
SYMBOL_FUNCTION void b3AlignedFreeInternal(void *)
REFERENCE_CALL void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> void b3AlignedFreeInternal(void *) [b3AlignedAllocator.h <42:29 42:49>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> void [b3AlignedAllocator.h <90:36 90:39>]
LOCAL_SYMBOL: b3AlignedAllocator.h<89:45> [b3AlignedAllocator.h <90:46 90:48>]
SYMBOL_METHOD public void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <92:2 <92:16 92:22> 92:105>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> void [b3AlignedAllocator.h <92:2 92:5>]
LOCAL_SYMBOL: b3AlignedAllocator.h<92:45> [b3AlignedAllocator.h <92:45 92:47>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <92:28 92:34>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> b3AlignedAllocator<typename T, unsigned int Alignment>::value_type [b3AlignedAllocator.h <92:91 92:100>]
LOCAL_SYMBOL: b3AlignedAllocator.h<92:45> [b3AlignedAllocator.h <92:85 92:87>]
SYMBOL_STRUCT b3AlignedAllocator<typename T, unsigned int Alignment>::rebind<typename O> [b3AlignedAllocator.h <95:2 <95:33 95:38> 97:2>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::rebind<typename O>::other [b3AlignedAllocator.h <96:47 96:51>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::rebind<typename O>::other -> b3AlignedAllocator<rebind<typename O>::O, Alignment> [b3AlignedAllocator.h <96:11 96:28>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<rebind<typename O>::O, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::rebind<typename O>::O [b3AlignedAllocator.h <96:31 96:31>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<rebind<typename O>::O, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <96:35 96:43>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<typename T, unsigned int Alignment>::rebind<typename O>::O [b3AlignedAllocator.h <95:22 95:22>]
SYMBOL_METHOD public b3AlignedAllocator<typename T, unsigned int Alignment>::self_type & b3AlignedAllocator<typename T, unsigned int Alignment>::operator=<typename O>(const b3AlignedAllocator<O, Alignment> &) [b3AlignedAllocator.h <98:2 <99:14 99:22> 99:87>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::self_type & b3AlignedAllocator<typename T, unsigned int Alignment>::operator=<typename O>(const b3AlignedAllocator<O, Alignment> &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::self_type [b3AlignedAllocator.h <99:2 99:10>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::self_type & b3AlignedAllocator<typename T, unsigned int Alignment>::operator=<typename O>(const b3AlignedAllocator<O, Alignment> &) -> b3AlignedAllocator<operator=<typename O>::O, Alignment> [b3AlignedAllocator.h <99:31 99:48>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<operator=<typename O>::O, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::operator=<typename O>::O [b3AlignedAllocator.h <99:51 99:51>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<operator=<typename O>::O, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <99:55 99:63>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<typename T, unsigned int Alignment>::operator=<typename O>::O [b3AlignedAllocator.h <98:22 98:22>]
SYMBOL_FUNCTION public bool operator==(const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &, const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &) [b3AlignedAllocator.h <101:2 <101:14 101:23> 101:81>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &, const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &) -> bool [b3AlignedAllocator.h <101:9 101:12>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &, const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::self_type [b3AlignedAllocator.h <101:32 101:40>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &, const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::self_type [b3AlignedAllocator.h <101:52 101:60>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <60:21 60:21>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <60:34 60:42>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment -> unsigned int [b3AlignedAllocator.h <60:25 60:32>]
SYMBOL_GLOBAL_VARIABLE int b3g_numAlignedAllocs [b3AlignedAllocator.cpp <18:5 18:24>]
REFERENCE_TYPE_USAGE int b3g_numAlignedAllocs -> int [b3AlignedAllocator.cpp <18:1 18:3>]
SYMBOL_GLOBAL_VARIABLE int b3g_numAlignedFree [b3AlignedAllocator.cpp <19:5 19:22>]
REFERENCE_TYPE_USAGE int b3g_numAlignedFree -> int [b3AlignedAllocator.cpp <19:1 19:3>]
SYMBOL_GLOBAL_VARIABLE int b3g_totalBytesAlignedAllocs [b3AlignedAllocator.cpp <20:5 20:31>]
REFERENCE_TYPE_USAGE int b3g_totalBytesAlignedAllocs -> int [b3AlignedAllocator.cpp <20:1 20:3>]
SYMBOL_FUNCTION static void * b3AllocDefault(size_t) [b3AlignedAllocator.cpp <22:1 <22:14 22:27> 25:1>]
REFERENCE_TYPE_USAGE static void * b3AllocDefault(size_t) -> void [b3AlignedAllocator.cpp <22:8 22:11>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<22:36> [b3AlignedAllocator.cpp <22:36 22:39>]
REFERENCE_TYPE_USAGE static void * b3AllocDefault(size_t) -> size_t [b3AlignedAllocator.cpp <22:29 22:34>]
SYMBOL_FUNCTION void * malloc(size_t)
REFERENCE_CALL static void * b3AllocDefault(size_t) -> void * malloc(size_t) [b3AlignedAllocator.cpp <24:9 24:14>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<22:36> [b3AlignedAllocator.cpp <24:16 24:19>]
SYMBOL_FUNCTION static void b3FreeDefault(void *) [b3AlignedAllocator.cpp <27:1 <27:13 27:25> 30:1>]
REFERENCE_TYPE_USAGE static void b3FreeDefault(void *) -> void [b3AlignedAllocator.cpp <27:8 27:11>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<27:33> [b3AlignedAllocator.cpp <27:33 27:35>]
REFERENCE_TYPE_USAGE static void b3FreeDefault(void *) -> void [b3AlignedAllocator.cpp <27:27 27:30>]
SYMBOL_FUNCTION void free(void *)
REFERENCE_CALL static void b3FreeDefault(void *) -> void free(void *) [b3AlignedAllocator.cpp <29:2 29:5>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<27:33> [b3AlignedAllocator.cpp <29:7 29:9>]
SYMBOL_GLOBAL_VARIABLE b3AllocFunc * b3s_allocFunc [b3AlignedAllocator.cpp <32:21 32:33>]
REFERENCE_TYPE_USAGE b3AllocFunc * b3s_allocFunc -> b3AllocFunc [b3AlignedAllocator.cpp <32:8 32:18>]
REFERENCE_USAGE b3AllocFunc * b3s_allocFunc -> static void * b3AllocDefault(size_t) [b3AlignedAllocator.cpp <32:37 32:50>]
SYMBOL_GLOBAL_VARIABLE b3FreeFunc * b3s_freeFunc [b3AlignedAllocator.cpp <33:20 33:31>]
REFERENCE_TYPE_USAGE b3FreeFunc * b3s_freeFunc -> b3FreeFunc [b3AlignedAllocator.cpp <33:8 33:17>]
REFERENCE_USAGE b3FreeFunc * b3s_freeFunc -> static void b3FreeDefault(void *) [b3AlignedAllocator.cpp <33:35 33:47>]
SYMBOL_FUNCTION static void * b3AlignedAllocDefault(size_t, int) [b3AlignedAllocator.cpp <66:1 <66:21 66:41> 78:1>]
REFERENCE_TYPE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> void [b3AlignedAllocator.cpp <66:15 66:18>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<66:50> [b3AlignedAllocator.cpp <66:50 66:53>]
REFERENCE_TYPE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> size_t [b3AlignedAllocator.cpp <66:43 66:48>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<66:60> [b3AlignedAllocator.cpp <66:60 66:68>]
REFERENCE_TYPE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> int [b3AlignedAllocator.cpp <66:56 66:58>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<68:9> [b3AlignedAllocator.cpp <68:9 68:11>]
REFERENCE_TYPE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> void [b3AlignedAllocator.cpp <68:3 68:6>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<69:9> [b3AlignedAllocator.cpp <69:9 69:12>]
REFERENCE_TYPE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> char [b3AlignedAllocator.cpp <69:3 69:6>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<69:9> [b3AlignedAllocator.cpp <70:3 70:6>]
REFERENCE_TYPE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> char [b3AlignedAllocator.cpp <70:11 70:14>]
REFERENCE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> b3AllocFunc * b3s_allocFunc [b3AlignedAllocator.cpp <70:18 70:30>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<66:50> [b3AlignedAllocator.cpp <70:32 70:35>]
REFERENCE_TYPE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> void [b3AlignedAllocator.cpp <70:46 70:49>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<66:60> [b3AlignedAllocator.cpp <70:57 70:65>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<69:9> [b3AlignedAllocator.cpp <71:7 71:10>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<68:9> [b3AlignedAllocator.cpp <72:2 72:4>]
SYMBOL_FUNCTION char * b3AlignPointer<char>(char *, size_t)
REFERENCE_CALL static void * b3AlignedAllocDefault(size_t, int) -> char * b3AlignPointer<char>(char *, size_t) [b3AlignedAllocator.cpp <72:8 72:21>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<69:9> [b3AlignedAllocator.cpp <72:23 72:26>]
REFERENCE_TYPE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> void [b3AlignedAllocator.cpp <72:37 72:40>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<66:60> [b3AlignedAllocator.cpp <72:45 72:53>]
REFERENCE_TYPE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> void [b3AlignedAllocator.cpp <73:8 73:11>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<68:9> [b3AlignedAllocator.cpp <73:17 73:19>]
REFERENCE_TYPE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> void [b3AlignedAllocator.cpp <73:28 73:31>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<69:9> [b3AlignedAllocator.cpp <73:36 73:39>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<68:9> [b3AlignedAllocator.cpp <75:5 75:7>]
REFERENCE_TYPE_USAGE static void * b3AlignedAllocDefault(size_t, int) -> void [b3AlignedAllocator.cpp <75:12 75:15>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<69:9> [b3AlignedAllocator.cpp <75:20 75:23>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<68:9> [b3AlignedAllocator.cpp <77:11 77:13>]
SYMBOL_FUNCTION static void b3AlignedFreeDefault(void *) [b3AlignedAllocator.cpp <80:1 <80:20 80:39> 88:1>]
REFERENCE_TYPE_USAGE static void b3AlignedFreeDefault(void *) -> void [b3AlignedAllocator.cpp <80:15 80:18>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<80:47> [b3AlignedAllocator.cpp <80:47 80:49>]
REFERENCE_TYPE_USAGE static void b3AlignedFreeDefault(void *) -> void [b3AlignedAllocator.cpp <80:41 80:44>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<82:9> [b3AlignedAllocator.cpp <82:9 82:12>]
REFERENCE_TYPE_USAGE static void b3AlignedFreeDefault(void *) -> void [b3AlignedAllocator.cpp <82:3 82:6>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<80:47> [b3AlignedAllocator.cpp <84:7 84:9>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<82:9> [b3AlignedAllocator.cpp <85:5 85:8>]
REFERENCE_TYPE_USAGE static void b3AlignedFreeDefault(void *) -> void [b3AlignedAllocator.cpp <85:15 85:18>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<80:47> [b3AlignedAllocator.cpp <85:24 85:26>]
REFERENCE_USAGE static void b3AlignedFreeDefault(void *) -> b3FreeFunc * b3s_freeFunc [b3AlignedAllocator.cpp <86:5 86:16>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<82:9> [b3AlignedAllocator.cpp <86:18 86:21>]
SYMBOL_GLOBAL_VARIABLE b3AlignedAllocFunc * b3s_alignedAllocFunc [b3AlignedAllocator.cpp <92:28 92:47>]
REFERENCE_TYPE_USAGE b3AlignedAllocFunc * b3s_alignedAllocFunc -> b3AlignedAllocFunc [b3AlignedAllocator.cpp <92:8 92:25>]
REFERENCE_USAGE b3AlignedAllocFunc * b3s_alignedAllocFunc -> static void * b3AlignedAllocDefault(size_t, int) [b3AlignedAllocator.cpp <92:51 92:71>]
SYMBOL_GLOBAL_VARIABLE b3AlignedFreeFunc * b3s_alignedFreeFunc [b3AlignedAllocator.cpp <93:27 93:45>]
REFERENCE_TYPE_USAGE b3AlignedFreeFunc * b3s_alignedFreeFunc -> b3AlignedFreeFunc [b3AlignedAllocator.cpp <93:8 93:24>]
REFERENCE_USAGE b3AlignedFreeFunc * b3s_alignedFreeFunc -> static void b3AlignedFreeDefault(void *) [b3AlignedAllocator.cpp <93:49 93:68>]
SYMBOL_FUNCTION void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) [b3AlignedAllocator.cpp <95:1 <95:6 95:35> 99:1>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> void [b3AlignedAllocator.cpp <95:1 95:4>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<95:57> [b3AlignedAllocator.cpp <95:57 95:65>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> b3AlignedAllocFunc [b3AlignedAllocator.cpp <95:37 95:54>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<95:87> [b3AlignedAllocator.cpp <95:87 95:94>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> b3AlignedFreeFunc [b3AlignedAllocator.cpp <95:68 95:84>]
REFERENCE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> b3AlignedAllocFunc * b3s_alignedAllocFunc [b3AlignedAllocator.cpp <97:3 97:22>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<95:57> [b3AlignedAllocator.cpp <97:26 97:34>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<95:57> [b3AlignedAllocator.cpp <97:38 97:46>]
REFERENCE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> static void * b3AlignedAllocDefault(size_t, int) [b3AlignedAllocator.cpp <97:50 97:70>]
REFERENCE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> b3AlignedFreeFunc * b3s_alignedFreeFunc [b3AlignedAllocator.cpp <98:3 98:21>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<95:87> [b3AlignedAllocator.cpp <98:25 98:32>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<95:87> [b3AlignedAllocator.cpp <98:36 98:43>]
REFERENCE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> static void b3AlignedFreeDefault(void *) [b3AlignedAllocator.cpp <98:47 98:66>]
SYMBOL_FUNCTION void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) [b3AlignedAllocator.cpp <101:1 <101:6 101:28> 105:1>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> void [b3AlignedAllocator.cpp <101:1 101:4>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<101:43> [b3AlignedAllocator.cpp <101:43 101:51>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> b3AllocFunc [b3AlignedAllocator.cpp <101:30 101:40>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<101:66> [b3AlignedAllocator.cpp <101:66 101:73>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> b3FreeFunc [b3AlignedAllocator.cpp <101:54 101:63>]
REFERENCE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> b3AllocFunc * b3s_allocFunc [b3AlignedAllocator.cpp <103:3 103:15>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<101:43> [b3AlignedAllocator.cpp <103:19 103:27>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<101:43> [b3AlignedAllocator.cpp <103:31 103:39>]
REFERENCE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> static void * b3AllocDefault(size_t) [b3AlignedAllocator.cpp <103:43 103:56>]
REFERENCE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> b3FreeFunc * b3s_freeFunc [b3AlignedAllocator.cpp <104:3 104:14>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<101:66> [b3AlignedAllocator.cpp <104:18 104:25>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<101:66> [b3AlignedAllocator.cpp <104:29 104:36>]
REFERENCE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> static void b3FreeDefault(void *) [b3AlignedAllocator.cpp <104:40 104:52>]
SYMBOL_FUNCTION void * b3AlignedAllocInternal(size_t, int) [b3AlignedAllocator.cpp <159:1 <159:7 159:28> 166:1>]
REFERENCE_TYPE_USAGE void * b3AlignedAllocInternal(size_t, int) -> void [b3AlignedAllocator.cpp <159:1 159:4>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<159:38> [b3AlignedAllocator.cpp <159:38 159:41>]
REFERENCE_TYPE_USAGE void * b3AlignedAllocInternal(size_t, int) -> size_t [b3AlignedAllocator.cpp <159:31 159:36>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<159:48> [b3AlignedAllocator.cpp <159:48 159:56>]
REFERENCE_TYPE_USAGE void * b3AlignedAllocInternal(size_t, int) -> int [b3AlignedAllocator.cpp <159:44 159:46>]
REFERENCE_USAGE void * b3AlignedAllocInternal(size_t, int) -> int b3g_numAlignedAllocs [b3AlignedAllocator.cpp <161:2 161:21>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<162:8> [b3AlignedAllocator.cpp <162:8 162:10>]
REFERENCE_TYPE_USAGE void * b3AlignedAllocInternal(size_t, int) -> void [b3AlignedAllocator.cpp <162:2 162:5>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<162:8> [b3AlignedAllocator.cpp <163:2 163:4>]
REFERENCE_USAGE void * b3AlignedAllocInternal(size_t, int) -> b3AlignedAllocFunc * b3s_alignedAllocFunc [b3AlignedAllocator.cpp <163:8 163:27>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<159:38> [b3AlignedAllocator.cpp <163:29 163:32>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<159:48> [b3AlignedAllocator.cpp <163:35 163:43>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<162:8> [b3AlignedAllocator.cpp <165:9 165:11>]
SYMBOL_FUNCTION void b3AlignedFreeInternal(void *) [b3AlignedAllocator.cpp <168:1 <168:6 168:26> 178:1>]
REFERENCE_TYPE_USAGE void b3AlignedFreeInternal(void *) -> void [b3AlignedAllocator.cpp <168:1 168:4>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<168:35> [b3AlignedAllocator.cpp <168:35 168:37>]
REFERENCE_TYPE_USAGE void b3AlignedFreeInternal(void *) -> void [b3AlignedAllocator.cpp <168:29 168:32>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<168:35> [b3AlignedAllocator.cpp <170:7 170:9>]
REFERENCE_USAGE void b3AlignedFreeInternal(void *) -> int b3g_numAlignedFree [b3AlignedAllocator.cpp <175:2 175:19>]
REFERENCE_USAGE void b3AlignedFreeInternal(void *) -> b3AlignedFreeFunc * b3s_alignedFreeFunc [b3AlignedAllocator.cpp <177:2 177:20>]
LOCAL_SYMBOL: b3AlignedAllocator.cpp<168:35> [b3AlignedAllocator.cpp <177:22 177:24>]
