FILE: b3DynamicBvh.cpp
COMMENT: comment [b3DynamicBvh.cpp <1:1 14:3>]
COMMENT: comment [b3DynamicBvh.cpp <15:1 15:52>]
REFERENCE_INCLUDE b3DynamicBvh.cpp -> b3DynamicBvh.h [b3DynamicBvh.cpp <17:10 17:25>]
FILE: b3DynamicBvh.h
COMMENT: comment [b3DynamicBvh.h <1:1 14:3>]
COMMENT: comment [b3DynamicBvh.h <15:1 15:52>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DYNAMIC_BOUNDING_VOLUME_TREE_H [b3DynamicBvh.h <17:9 17:41>]
SYMBOL_MACRO B3_DYNAMIC_BOUNDING_VOLUME_TREE_H [b3DynamicBvh.h <18:9 <18:9 18:41> 18:8>]
REFERENCE_INCLUDE b3DynamicBvh.h -> b3AlignedObjectArray.h [b3DynamicBvh.h <20:10 20:47>]
FILE: b3AlignedObjectArray.h
COMMENT: comment [b3AlignedObjectArray.h <1:1 14:3>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_OBJECT_ARRAY__ [b3AlignedObjectArray.h <17:9 17:25>]
SYMBOL_MACRO B3_OBJECT_ARRAY__ [b3AlignedObjectArray.h <18:9 <18:9 18:25> 18:8>]
COMMENT: comment [b3AlignedObjectArray.h <20:23 20:62>]
REFERENCE_INCLUDE b3AlignedObjectArray.h -> b3Scalar.h [b3AlignedObjectArray.h <20:10 20:21>]
FILE: b3Scalar.h
COMMENT: comment [b3Scalar.h <1:1 13:3>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_SCALAR_H [b3Scalar.h <17:9 17:19>]
SYMBOL_MACRO B3_SCALAR_H [b3Scalar.h <18:9 <18:9 18:19> 18:8>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_MANAGED_CODE [b3Scalar.h <20:8 20:22>]
REFERENCE_INCLUDE b3Scalar.h -> math.h [b3Scalar.h <27:10 27:17>]
FILE: math.h non-indexed
REFERENCE_INCLUDE math.h -> corecrt.h [math.h <11:10 11:20>]
FILE: corecrt.h non-indexed
REFERENCE_INCLUDE corecrt.h -> vcruntime.h [corecrt.h <10:10 10:22>]
FILE: vcruntime.h non-indexed
REFERENCE_INCLUDE vcruntime.h -> sal.h [vcruntime.h <45:10 45:16>]
FILE: sal.h non-indexed
REFERENCE_INCLUDE sal.h -> concurrencysal.h [sal.h <2990:10 2990:27>]
FILE: concurrencysal.h non-indexed
REFERENCE_INCLUDE vcruntime.h -> vadefs.h [vcruntime.h <46:10 46:19>]
FILE: vadefs.h non-indexed
COMMENT: comment [b3Scalar.h <28:20 28:41>]
REFERENCE_INCLUDE b3Scalar.h -> stdlib.h [b3Scalar.h <28:10 28:19>]
FILE: stdlib.h non-indexed
REFERENCE_INCLUDE stdlib.h -> corecrt.h [stdlib.h <11:10 11:20>]
REFERENCE_INCLUDE stdlib.h -> corecrt_malloc.h [stdlib.h <12:10 12:27>]
FILE: corecrt_malloc.h non-indexed
REFERENCE_INCLUDE corecrt_malloc.h -> corecrt.h [corecrt_malloc.h <11:10 11:20>]
REFERENCE_INCLUDE stdlib.h -> corecrt_search.h [stdlib.h <13:10 13:27>]
FILE: corecrt_search.h non-indexed
REFERENCE_INCLUDE corecrt_search.h -> corecrt.h [corecrt_search.h <13:10 13:20>]
REFERENCE_INCLUDE corecrt_search.h -> stddef.h [corecrt_search.h <14:10 14:19>]
FILE: stddef.h non-indexed
REFERENCE_INCLUDE stddef.h -> corecrt.h [stddef.h <11:10 11:20>]
REFERENCE_INCLUDE stdlib.h -> corecrt_wstdlib.h [stdlib.h <14:10 14:28>]
FILE: corecrt_wstdlib.h non-indexed
REFERENCE_INCLUDE corecrt_wstdlib.h -> corecrt.h [corecrt_wstdlib.h <11:10 11:20>]
REFERENCE_INCLUDE stdlib.h -> limits.h [stdlib.h <15:10 15:19>]
FILE: limits.h non-indexed
REFERENCE_INCLUDE limits.h -> vcruntime.h [limits.h <11:10 11:22>]
REFERENCE_INCLUDE b3Scalar.h -> float.h [b3Scalar.h <29:10 29:18>]
FILE: float.h non-indexed
REFERENCE_INCLUDE float.h -> corecrt.h [float.h <12:10 12:20>]
COMMENT: comment [b3Scalar.h <31:1 31:67>]
SYMBOL_MACRO B3_BULLET_VERSION [b3Scalar.h <32:9 <32:9 32:25> 32:26>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_BULLET_VERSION [b3Scalar.h <36:9 36:25>]
REFERENCE_MACRO_USAGE b3Scalar.h -> DEBUG [b3Scalar.h <39:13 39:17>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _DEBUG [b3Scalar.h <39:32 39:37>]
COMMENT: comment [b3Scalar.h <43:23 43:36>]
REFERENCE_INCLUDE b3Scalar.h -> b3Logging.h [b3Scalar.h <43:10 43:22>]
FILE: b3Logging.h
REFERENCE_MACRO_USAGE b3Logging.h -> B3_LOGGING_H [b3Logging.h <2:9 2:20>]
SYMBOL_MACRO B3_LOGGING_H [b3Logging.h <3:9 <3:9 3:20> 3:8>]
REFERENCE_MACRO_USAGE b3Logging.h -> __cplusplus [b3Logging.h <5:8 5:18>]
COMMENT: comment [b3Logging.h <9:1 9:102>]
COMMENT: comment [b3Logging.h <10:1 10:81>]
SYMBOL_MACRO b3Printf [b3Logging.h <11:9 <11:9 11:16> 11:63>]
COMMENT: comment [b3Logging.h <12:1 12:151>]
COMMENT: comment [b3Logging.h <13:1 13:49>]
COMMENT: comment [b3Logging.h <14:1 14:44>]
COMMENT: comment [b3Logging.h <15:1 15:24>]
SYMBOL_MACRO b3Warning [b3Logging.h <17:9 <17:9 17:17> 17:166>]
SYMBOL_MACRO b3Error [b3Logging.h <18:9 <18:9 18:15> 18:159>]
REFERENCE_MACRO_USAGE b3Logging.h -> B3_NO_PROFILE [b3Logging.h <21:9 21:21>]
REFERENCE_MACRO_USAGE b3Logging.h -> __cplusplus [b3Logging.h <25:8 25:18>]
SYMBOL_MACRO B3_PROFILE [b3Logging.h <41:9 <41:9 41:18> 41:59>]
COMMENT: comment [b3Logging.h <44:7 44:22>]
COMMENT: comment [b3Logging.h <50:8 50:31>]
COMMENT: comment [b3Logging.h <59:1 59:74>]
COMMENT: comment [b3Logging.h <64:1 64:59>]
COMMENT: comment [b3Logging.h <68:1 68:125>]
REFERENCE_MACRO_USAGE b3Logging.h -> __cplusplus [b3Logging.h <73:8 73:18>]
COMMENT: comment [b3Logging.h <77:7 77:21>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _WIN32 [b3Scalar.h <46:8 46:13>]
REFERENCE_MACRO_USAGE b3Scalar.h -> __MINGW32__ [b3Scalar.h <48:15 48:25>]
REFERENCE_MACRO_USAGE b3Scalar.h -> __CYGWIN__ [b3Scalar.h <48:39 48:48>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _MSC_VER [b3Scalar.h <48:64 48:71>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _MSC_VER [b3Scalar.h <48:77 48:84>]
COMMENT: comment [b3Scalar.h <55:4 55:38>]
COMMENT: comment [b3Scalar.h <56:36 56:62>]
COMMENT: comment [b3Scalar.h <57:1 57:98>]
COMMENT: comment [b3Scalar.h <58:34 58:81>]
COMMENT: comment [b3Scalar.h <59:1 59:80>]
SYMBOL_MACRO B3_FORCE_INLINE [b3Scalar.h <61:12 <61:12 61:26> 61:27>]
SYMBOL_MACRO B3_ATTRIBUTE_ALIGNED16 [b3Scalar.h <62:12 <62:12 62:33> 62:59>]
SYMBOL_MACRO B3_ATTRIBUTE_ALIGNED64 [b3Scalar.h <63:12 <63:12 63:33> 63:59>]
SYMBOL_MACRO B3_ATTRIBUTE_ALIGNED128 [b3Scalar.h <64:12 <64:12 64:34> 64:62>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _XBOX [b3Scalar.h <65:10 65:14>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _WIN32 [b3Scalar.h <73:15 73:20>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _MSC_VER [b3Scalar.h <73:27 73:34>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _MSC_VER [b3Scalar.h <73:40 73:47>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_DOUBLE_PRECISION [b3Scalar.h <73:72 73:94>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _M_IX86 [b3Scalar.h <74:16 74:22>]
REFERENCE_MACRO_USAGE b3Scalar.h -> _M_X64 [b3Scalar.h <74:37 74:42>]
SYMBOL_MACRO B3_USE_SSE [b3Scalar.h <75:12 <75:12 75:21> 75:11>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_SSE [b3Scalar.h <76:11 76:20>]
COMMENT: comment [b3Scalar.h <77:4 77:70>]
COMMENT: comment [b3Scalar.h <78:4 78:81>]
COMMENT: comment [b3Scalar.h <79:4 79:78>]
COMMENT: comment [b3Scalar.h <80:4 80:45>]
COMMENT: comment [b3Scalar.h <81:4 81:122>]
COMMENT: comment [b3Scalar.h <82:4 82:135>]
COMMENT: comment [b3Scalar.h <83:4 83:31>]
COMMENT: comment [b3Scalar.h <84:11 84:23>]
REFERENCE_INCLUDE b3Scalar.h -> emmintrin.h [b3Scalar.h <85:13 85:25>]
FILE: emmintrin.h non-indexed
REFERENCE_INCLUDE emmintrin.h -> xmmintrin.h [emmintrin.h <42:10 42:22>]
FILE: xmmintrin.h non-indexed
REFERENCE_INCLUDE xmmintrin.h -> mmintrin.h [xmmintrin.h <46:10 46:21>]
FILE: mmintrin.h non-indexed
REFERENCE_INCLUDE xmmintrin.h -> malloc.h [xmmintrin.h <79:10 79:19>]
FILE: malloc.h non-indexed
REFERENCE_INCLUDE malloc.h -> corecrt.h [malloc.h <11:10 11:20>]
REFERENCE_INCLUDE malloc.h -> corecrt_malloc.h [malloc.h <12:10 12:27>]
COMMENT: comment [b3Scalar.h <89:9 89:16>]
COMMENT: comment [b3Scalar.h <91:10 91:23>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_DEBUG [b3Scalar.h <93:8 93:15>]
SYMBOL_MACRO b3Assert [b3Scalar.h <102:11 <102:11 102:18> 102:20>]
COMMENT: comment [b3Scalar.h <104:3 104:47>]
SYMBOL_MACRO b3FullAssert [b3Scalar.h <105:11 <105:11 105:22> 105:24>]
SYMBOL_MACRO b3Likely [b3Scalar.h <107:11 <107:11 107:18> 107:24>]
SYMBOL_MACRO b3Unlikely [b3Scalar.h <108:11 <108:11 108:20> 108:25>]
COMMENT: comment [b3Scalar.h <257:1 257:124>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_DOUBLE_PRECISION [b3Scalar.h <258:13 258:35>]
COMMENT: comment [b3Scalar.h <264:1 264:47>]
SYMBOL_MACRO B3_LARGE_FLOAT [b3Scalar.h <265:9 <265:9 265:22> 265:23>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_SSE [b3Scalar.h <268:8 268:17>]
COMMENT: comment [b3Scalar.h <270:7 270:19>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_SSE_IN_API [b3Scalar.h <272:13 272:29>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_SSE [b3Scalar.h <272:43 272:52>]
COMMENT: comment [b3Scalar.h <316:8 316:27>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_NEON [b3Scalar.h <318:8 318:18>]
SYMBOL_MACRO B3_DECLARE_ALIGNED_ALLOCATOR [b3Scalar.h <331:9 <331:9 331:36> 339:64>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_DOUBLE_PRECISION [b3Scalar.h <343:13 343:35>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_DOUBLE_FUNCTIONS [b3Scalar.h <343:49 343:73>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <361:1 361:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> USE_APPROXIMATION [b3Scalar.h <363:8 363:24>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <381:1 381:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <382:1 382:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <383:1 383:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <384:1 384:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <385:1 385:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <392:1 392:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <399:1 399:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <400:1 400:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <401:1 401:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <402:1 402:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <403:1 403:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <404:1 404:15>]
SYMBOL_MACRO B3_2_PI [b3Scalar.h <408:9 <408:9 408:15> 408:53>]
SYMBOL_MACRO B3_PI [b3Scalar.h <409:9 <409:9 409:13> 409:48>]
SYMBOL_MACRO B3_HALF_PI [b3Scalar.h <410:9 <410:9 410:18> 410:49>]
SYMBOL_MACRO B3_RADS_PER_DEG [b3Scalar.h <411:9 <411:9 411:23> 411:50>]
SYMBOL_MACRO B3_DEGS_PER_RAD [b3Scalar.h <412:9 <412:9 412:23> 412:51>]
SYMBOL_MACRO B3_SQRT12 [b3Scalar.h <413:9 <413:9 413:17> 413:63>]
COMMENT: comment [b3Scalar.h <415:73 415:101>]
SYMBOL_MACRO b3RecipSqrt [b3Scalar.h <415:9 <415:9 415:19> 415:69>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_USE_DOUBLE_PRECISION [b3Scalar.h <418:8 418:30>]
SYMBOL_MACRO B3_EPSILON [b3Scalar.h <422:9 <422:9 422:18> 422:24>]
SYMBOL_MACRO B3_INFINITY [b3Scalar.h <423:9 <423:9 423:19> 423:24>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <426:1 426:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_PI [b3Scalar.h <428:21 428:25>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <409:26 409:32>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <442:1 442:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_EPSILON [b3Scalar.h <442:72 442:81>]
REFERENCE_MACRO_USAGE b3Scalar.h -> FLT_EPSILON [b3Scalar.h <422:25 422:35>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <444:1 444:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <447:1 447:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <452:1 452:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <456:1 456:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_RADS_PER_DEG [b3Scalar.h <456:61 456:75>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <411:26 411:32>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <457:1 457:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_DEGS_PER_RAD [b3Scalar.h <457:61 457:75>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <412:45 412:51>]
SYMBOL_MACRO B3_DECLARE_HANDLE [b3Scalar.h <459:9 <459:9 459:25> 459:73>]
REFERENCE_MACRO_USAGE b3Scalar.h -> b3Fsel [b3Scalar.h <461:9 461:14>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <462:1 462:15>]
SYMBOL_MACRO b3Fsels [b3Scalar.h <467:9 <467:9 467:15> 467:45>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <470:1 470:15>]
COMMENT: comment [b3Scalar.h <474:20 474:73>]
COMMENT: comment [b3Scalar.h <482:1 482:110>]
COMMENT: comment [b3Scalar.h <483:1 483:118>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <484:1 484:15>]
COMMENT: comment [b3Scalar.h <486:5 486:89>]
COMMENT: comment [b3Scalar.h <487:5 487:73>]
COMMENT: comment [b3Scalar.h <488:5 488:89>]
COMMENT: comment [b3Scalar.h <489:5 489:77>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <494:1 494:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <500:1 500:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_HAVE_NATIVE_FSEL [b3Scalar.h <502:8 502:26>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <509:22 509:36>]
COMMENT: comment [b3Scalar.h <517:1 517:33>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <518:1 518:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <523:1 523:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <528:1 528:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <533:1 533:15>]
COMMENT: comment [b3Scalar.h <538:1 538:63>]
COMMENT: comment [b3Scalar.h <539:1 539:120>]
COMMENT: comment [b3Scalar.h <540:1 540:101>]
COMMENT: comment [b3Scalar.h <541:1 541:127>]
COMMENT: comment [b3Scalar.h <542:1 542:143>]
COMMENT: comment [b3Scalar.h <543:1 543:79>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <544:1 544:15>]
COMMENT: comment [b3Scalar.h <557:1 557:30>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <558:1 558:15>]
COMMENT: comment [b3Scalar.h <573:1 573:28>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <574:1 574:15>]
COMMENT: comment [b3Scalar.h <589:1 589:30>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <590:1 590:15>]
COMMENT: comment [b3Scalar.h <607:1 607:53>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <608:1 608:15>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <610:42 610:48>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_PI [b3Scalar.h <611:23 611:27>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <613:27 613:33>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_PI [b3Scalar.h <615:27 615:31>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <617:27 617:33>]
COMMENT: comment [b3Scalar.h <625:1 625:42>]
COMMENT: comment [b3Scalar.h <641:1 641:54>]
COMMENT: comment [b3Scalar.h <663:8 663:21>]
REFERENCE_INCLUDE b3AlignedObjectArray.h -> b3AlignedAllocator.h [b3AlignedObjectArray.h <21:10 21:31>]
FILE: b3AlignedAllocator.h
COMMENT: comment [b3AlignedAllocator.h <1:1 14:3>]
REFERENCE_MACRO_USAGE b3AlignedAllocator.h -> B3_ALIGNED_ALLOCATOR [b3AlignedAllocator.h <16:9 16:28>]
SYMBOL_MACRO B3_ALIGNED_ALLOCATOR [b3AlignedAllocator.h <17:9 <17:9 17:28> 17:8>]
COMMENT: comment [b3AlignedAllocator.h <19:1 19:66>]
COMMENT: comment [b3AlignedAllocator.h <20:1 20:64>]
COMMENT: comment [b3AlignedAllocator.h <21:1 21:48>]
REFERENCE_INCLUDE b3AlignedAllocator.h -> b3Scalar.h [b3AlignedAllocator.h <23:10 23:21>]
COMMENT: comment [b3AlignedAllocator.h <24:1 24:40>]
REFERENCE_MACRO_USAGE b3AlignedAllocator.h -> B3_DEBUG_MEMORY_ALLOCATIONS [b3AlignedAllocator.h <25:8 25:34>]
SYMBOL_MACRO b3AlignedAlloc [b3AlignedAllocator.h <41:10 <41:10 41:23> 41:77>]
SYMBOL_MACRO b3AlignedFree [b3AlignedAllocator.h <42:10 <42:10 42:22> 42:53>]
COMMENT: comment [b3AlignedAllocator.h <52:1 52:123>]
COMMENT: comment [b3AlignedAllocator.h <54:1 54:220>]
COMMENT: comment [b3AlignedAllocator.h <58:1 58:78>]
COMMENT: comment [b3AlignedAllocator.h <59:1 59:171>]
COMMENT: comment [b3AlignedAllocator.h <67:2 67:27>]
COMMENT: comment [b3AlignedAllocator.h <69:2 71:4>]
REFERENCE_MACRO_USAGE b3AlignedAllocator.h -> b3AlignedAlloc [b3AlignedAllocator.h <86:38 86:51>]
REFERENCE_MACRO_USAGE b3AlignedAllocator.h -> b3AlignedFree [b3AlignedAllocator.h <90:3 90:15>]
COMMENT: comment [b3AlignedAllocator.h <106:8 106:30>]
COMMENT: comment [b3AlignedObjectArray.h <23:1 23:87>]
COMMENT: comment [b3AlignedObjectArray.h <24:1 24:120>]
COMMENT: comment [b3AlignedObjectArray.h <25:1 25:106>]
COMMENT: comment [b3AlignedObjectArray.h <26:1 26:92>]
COMMENT: comment [b3AlignedObjectArray.h <27:1 27:71>]
SYMBOL_MACRO B3_USE_PLACEMENT_NEW [b3AlignedObjectArray.h <29:9 <29:9 29:28> 29:29>]
COMMENT: comment [b3AlignedObjectArray.h <30:1 30:171>]
COMMENT: comment [b3AlignedObjectArray.h <31:38 31:120>]
SYMBOL_MACRO B3_ALLOW_ARRAY_COPY_OPERATOR [b3AlignedObjectArray.h <31:9 <31:9 31:36> 31:8>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_USE_MEMCPY [b3AlignedObjectArray.h <33:8 33:20>]
COMMENT: comment [b3AlignedObjectArray.h <36:8 36:23>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_USE_PLACEMENT_NEW [b3AlignedObjectArray.h <38:8 38:27>]
COMMENT: comment [b3AlignedObjectArray.h <39:16 39:35>]
REFERENCE_INCLUDE b3AlignedObjectArray.h -> new [b3AlignedObjectArray.h <39:10 39:14>]
FILE: new non-indexed
REFERENCE_INCLUDE new -> exception [new <6:10 6:20>]
FILE: exception non-indexed
REFERENCE_INCLUDE exception -> type_traits [exception <7:10 7:22>]
FILE: type_traits non-indexed
REFERENCE_INCLUDE type_traits -> xstddef [type_traits <6:10 6:18>]
FILE: xstddef non-indexed
REFERENCE_INCLUDE xstddef -> cstddef [xstddef <6:10 6:18>]
FILE: cstddef non-indexed
REFERENCE_INCLUDE cstddef -> yvals.h [cstddef <5:10 5:18>]
FILE: yvals.h non-indexed
REFERENCE_INCLUDE yvals.h -> xkeycheck.h [yvals.h <7:10 7:22>]
FILE: xkeycheck.h non-indexed
REFERENCE_INCLUDE yvals.h -> crtdefs.h [yvals.h <8:10 8:20>]
FILE: crtdefs.h non-indexed
REFERENCE_INCLUDE crtdefs.h -> vcruntime.h [crtdefs.h <9:10 9:22>]
REFERENCE_INCLUDE crtdefs.h -> corecrt.h [crtdefs.h <10:10 10:20>]
REFERENCE_INCLUDE yvals.h -> use_ansi.h [yvals.h <412:10 412:21>]
FILE: use_ansi.h non-indexed
REFERENCE_INCLUDE cstddef -> stddef.h [cstddef <13:11 13:20>]
REFERENCE_INCLUDE xstddef -> cstdlib [xstddef <7:10 7:18>]
FILE: cstdlib non-indexed
REFERENCE_INCLUDE cstdlib -> yvals.h [cstdlib <5:10 5:18>]
REFERENCE_INCLUDE cstdlib -> stdlib.h [cstdlib <13:11 13:20>]
REFERENCE_INCLUDE xstddef -> initializer_list [xstddef <9:10 9:27>]
FILE: initializer_list non-indexed
REFERENCE_INCLUDE initializer_list -> cstddef [initializer_list <6:10 6:18>]
REFERENCE_INCLUDE xstddef -> xtr1common [xstddef <11:10 11:21>]
FILE: xtr1common non-indexed
REFERENCE_INCLUDE xtr1common -> cstdlib [xtr1common <6:10 6:18>]
REFERENCE_INCLUDE exception -> malloc.h [exception <40:10 40:19>]
REFERENCE_INCLUDE exception -> vcruntime_exception.h [exception <41:10 41:32>]
FILE: vcruntime_exception.h non-indexed
REFERENCE_INCLUDE vcruntime_exception.h -> eh.h [vcruntime_exception.h <10:10 10:15>]
FILE: eh.h non-indexed
REFERENCE_INCLUDE eh.h -> corecrt_terminate.h [eh.h <11:10 11:30>]
FILE: corecrt_terminate.h non-indexed
REFERENCE_INCLUDE corecrt_terminate.h -> corecrt.h [corecrt_terminate.h <10:10 10:20>]
REFERENCE_INCLUDE new -> vcruntime_new.h [new <7:10 7:26>]
FILE: vcruntime_new.h non-indexed
REFERENCE_INCLUDE vcruntime_new.h -> vcruntime.h [vcruntime_new.h <10:10 10:22>]
COMMENT: comment [b3AlignedObjectArray.h <40:8 40:30>]
COMMENT: comment [b3AlignedObjectArray.h <43:1 43:102>]
COMMENT: comment [b3AlignedObjectArray.h <44:1 44:123>]
COMMENT: comment [b3AlignedObjectArray.h <46:1 46:22>]
COMMENT: comment [b3AlignedObjectArray.h <54:2 54:24>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_ALLOW_ARRAY_COPY_OPERATOR [b3AlignedObjectArray.h <57:8 57:35>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <59:2 59:16>]
COMMENT: comment [b3AlignedObjectArray.h <64:6 64:36>]
COMMENT: comment [b3AlignedObjectArray.h <67:7 67:37>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <70:3 70:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <74:3 74:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_USE_PLACEMENT_NEW [b3AlignedObjectArray.h <78:8 78:27>]
COMMENT: comment [b3AlignedObjectArray.h <82:8 82:30>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <85:3 85:17>]
COMMENT: comment [b3AlignedObjectArray.h <87:4 87:26>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <93:3 93:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <102:3 102:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <109:3 109:17>]
COMMENT: comment [b3AlignedObjectArray.h <112:5 112:51>]
COMMENT: comment [b3AlignedObjectArray.h <136:3 136:140>]
COMMENT: comment [b3AlignedObjectArray.h <148:3 148:49>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <149:3 149:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <154:3 154:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> b3Assert [b3AlignedObjectArray.h <156:4 156:11>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> b3Assert [b3AlignedObjectArray.h <157:4 157:11>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <161:3 161:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> b3Assert [b3AlignedObjectArray.h <163:4 163:11>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> b3Assert [b3AlignedObjectArray.h <164:4 164:11>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <168:3 168:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> b3Assert [b3AlignedObjectArray.h <170:4 170:11>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> b3Assert [b3AlignedObjectArray.h <171:4 171:11>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <175:3 175:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> b3Assert [b3AlignedObjectArray.h <177:4 177:11>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> b3Assert [b3AlignedObjectArray.h <178:4 178:11>]
COMMENT: comment [b3AlignedObjectArray.h <183:3 183:156>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <184:3 184:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <193:3 193:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> b3Assert [b3AlignedObjectArray.h <195:4 195:11>]
COMMENT: comment [b3AlignedObjectArray.h <201:3 201:157>]
COMMENT: comment [b3AlignedObjectArray.h <202:3 202:177>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <203:3 203:17>]
COMMENT: comment [b3AlignedObjectArray.h <215:5 215:31>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <220:3 220:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_USE_PLACEMENT_NEW [b3AlignedObjectArray.h <236:8 236:27>]
COMMENT: comment [b3AlignedObjectArray.h <241:8 241:30>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <247:3 247:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <260:3 260:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_USE_PLACEMENT_NEW [b3AlignedObjectArray.h <268:8 268:27>]
COMMENT: comment [b3AlignedObjectArray.h <269:36 269:94>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <276:3 276:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_USE_PLACEMENT_NEW [b3AlignedObjectArray.h <284:8 284:27>]
COMMENT: comment [b3AlignedObjectArray.h <288:8 288:30>]
COMMENT: comment [b3AlignedObjectArray.h <294:3 294:135>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <295:3 295:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_FORCE_INLINE [b3AlignedObjectArray.h <300:3 300:17>]
COMMENT: comment [b3AlignedObjectArray.h <301:5 301:57>]
COMMENT: comment [b3AlignedObjectArray.h <303:6 303:36>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> b3Assert [b3AlignedObjectArray.h <305:5 305:12>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> b3Error [b3AlignedObjectArray.h <308:6 308:12>]
REFERENCE_MACRO_USAGE b3Logging.h -> __FILE__ [b3Logging.h <18:82 18:89>]
REFERENCE_MACRO_USAGE b3Logging.h -> __LINE__ [b3Logging.h <18:91 18:98>]
COMMENT: comment [b3AlignedObjectArray.h <318:5 318:27>]
COMMENT: comment [b3AlignedObjectArray.h <343:3 343:51>]
COMMENT: comment [b3AlignedObjectArray.h <344:3 344:52>]
COMMENT: comment [b3AlignedObjectArray.h <348:4 348:17>]
COMMENT: comment [b3AlignedObjectArray.h <362:4 362:17>]
COMMENT: comment [b3AlignedObjectArray.h <373:4 373:32>]
COMMENT: comment [b3AlignedObjectArray.h <381:3 381:79>]
COMMENT: comment [b3AlignedObjectArray.h <385:4 385:35>]
COMMENT: comment [b3AlignedObjectArray.h <386:4 386:35>]
COMMENT: comment [b3AlignedObjectArray.h <389:4 389:24>]
COMMENT: comment [b3AlignedObjectArray.h <398:5 398:28>]
COMMENT: comment [b3AlignedObjectArray.h <401:6 401:25>]
COMMENT: comment [b3AlignedObjectArray.h <411:5 411:17>]
REFERENCE_MACRO_USAGE b3AlignedObjectArray.h -> B3_USE_MEMCPY [b3AlignedObjectArray.h <415:8 415:20>]
COMMENT: comment [b3AlignedObjectArray.h <424:8 424:30>]
COMMENT: comment [b3AlignedObjectArray.h <431:3 431:39>]
COMMENT: comment [b3AlignedObjectArray.h <439:3 439:30>]
COMMENT: comment [b3AlignedObjectArray.h <442:17 442:43>]
COMMENT: comment [b3AlignedObjectArray.h <446:4 446:32>]
COMMENT: comment [b3AlignedObjectArray.h <451:2 451:54>]
COMMENT: comment [b3AlignedObjectArray.h <457:3 457:24>]
COMMENT: comment [b3AlignedObjectArray.h <459:35 459:56>]
COMMENT: comment [b3AlignedObjectArray.h <461:23 461:52>]
COMMENT: comment [b3AlignedObjectArray.h <463:21 463:53>]
COMMENT: comment [b3AlignedObjectArray.h <465:21 465:55>]
COMMENT: comment [b3AlignedObjectArray.h <467:21 467:42>]
COMMENT: comment [b3AlignedObjectArray.h <514:2 514:23>]
COMMENT: comment [b3AlignedObjectArray.h <533:8 533:27>]
REFERENCE_INCLUDE b3DynamicBvh.h -> b3Vector3.h [b3DynamicBvh.h <21:10 21:36>]
FILE: b3Vector3.h
COMMENT: comment [b3Vector3.h <1:1 13:3>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_VECTOR3_H [b3Vector3.h <17:9 17:20>]
SYMBOL_MACRO B3_VECTOR3_H [b3Vector3.h <18:9 <18:9 18:20> 18:8>]
COMMENT: comment [b3Vector3.h <20:1 20:22>]
REFERENCE_INCLUDE b3Vector3.h -> b3Scalar.h [b3Vector3.h <21:10 21:21>]
REFERENCE_INCLUDE b3Vector3.h -> b3MinMax.h [b3Vector3.h <22:10 22:21>]
FILE: b3MinMax.h
COMMENT: comment [b3MinMax.h <1:1 13:3>]
REFERENCE_MACRO_USAGE b3MinMax.h -> B3_GEN_MINMAX_H [b3MinMax.h <17:9 17:23>]
SYMBOL_MACRO B3_GEN_MINMAX_H [b3MinMax.h <18:9 <18:9 18:23> 18:8>]
REFERENCE_INCLUDE b3MinMax.h -> b3Scalar.h [b3MinMax.h <20:10 20:21>]
REFERENCE_MACRO_USAGE b3MinMax.h -> B3_FORCE_INLINE [b3MinMax.h <23:1 23:15>]
REFERENCE_MACRO_USAGE b3MinMax.h -> B3_FORCE_INLINE [b3MinMax.h <29:1 29:15>]
REFERENCE_MACRO_USAGE b3MinMax.h -> B3_FORCE_INLINE [b3MinMax.h <35:1 35:15>]
REFERENCE_MACRO_USAGE b3MinMax.h -> B3_FORCE_INLINE [b3MinMax.h <41:1 41:15>]
REFERENCE_MACRO_USAGE b3MinMax.h -> B3_FORCE_INLINE [b3MinMax.h <50:1 50:15>]
REFERENCE_MACRO_USAGE b3MinMax.h -> B3_FORCE_INLINE [b3MinMax.h <59:1 59:15>]
COMMENT: comment [b3MinMax.h <71:8 71:25>]
REFERENCE_INCLUDE b3Vector3.h -> b3AlignedAllocator.h [b3Vector3.h <23:10 23:31>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_DOUBLE_PRECISION [b3Vector3.h <25:8 25:30>]
SYMBOL_MACRO b3Vector3Data [b3Vector3.h <29:9 <29:9 29:21> 29:22>]
SYMBOL_MACRO b3Vector3DataName [b3Vector3.h <30:9 <30:9 30:25> 30:26>]
COMMENT: comment [b3Vector3.h <31:8 31:33>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <33:13 33:22>]
COMMENT: comment [b3Vector3.h <35:1 35:63>]
REFERENCE_MACRO_USAGE b3Vector3.h -> _MSC_VER [b3Vector3.h <37:8 37:15>]
COMMENT: comment [b3Vector3.h <38:32 38:111>]
SYMBOL_MACRO B3_SHUFFLE [b3Vector3.h <42:9 <42:9 42:18> 42:59>]
COMMENT: comment [b3Vector3.h <43:1 43:88>]
SYMBOL_MACRO b3_pshufd_ps [b3Vector3.h <44:9 <44:9 44:20> 44:69>]
SYMBOL_MACRO b3_splat3_ps [b3Vector3.h <45:9 <45:9 45:20> 45:74>]
SYMBOL_MACRO b3_splat_ps [b3Vector3.h <46:9 <46:9 46:19> 46:74>]
SYMBOL_MACRO b3v3AbsiMask [b3Vector3.h <48:9 <48:9 48:20> 48:83>]
SYMBOL_MACRO b3vAbsMask [b3Vector3.h <49:9 <49:9 49:18> 49:82>]
SYMBOL_MACRO b3vFFF0Mask [b3Vector3.h <50:9 <50:9 50:19> 50:82>]
SYMBOL_MACRO b3v3AbsfMask [b3Vector3.h <51:9 <51:9 51:20> 51:47>]
SYMBOL_MACRO b3vFFF0fMask [b3Vector3.h <52:9 <52:9 52:20> 52:46>]
SYMBOL_MACRO b3vxyzMaskf [b3Vector3.h <53:9 <53:9 53:19> 53:20>]
SYMBOL_MACRO b3vAbsfMask [b3Vector3.h <54:9 <54:9 54:19> 54:44>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_ATTRIBUTE_ALIGNED16 [b3Vector3.h <58:14 58:35>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_ATTRIBUTE_ALIGNED16 [b3Vector3.h <59:14 59:35>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_ATTRIBUTE_ALIGNED16 [b3Vector3.h <60:14 60:35>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_ATTRIBUTE_ALIGNED16 [b3Vector3.h <61:14 61:35>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <65:8 65:18>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <77:13 77:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <77:44 77:53>]
COMMENT: comment [b3Vector3.h <88:1 91:4>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_ATTRIBUTE_ALIGNED16 [b3Vector3.h <92:1 92:22>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <95:14 95:23>]
COMMENT: comment [b3Vector3.h <95:50 95:66>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <95:37 95:47>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_DECLARE_ALIGNED_ALLOCATOR [b3Vector3.h <113:2 113:29>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <332:4 332:18>]
REFERENCE_MACRO_USAGE b3Scalar.h -> b3AlignedAlloc [b3Scalar.h <332:70 332:83>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <333:4 333:18>]
REFERENCE_MACRO_USAGE b3Scalar.h -> b3AlignedFree [b3Scalar.h <333:63 333:75>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <334:4 334:18>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <335:4 335:18>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <336:4 336:18>]
REFERENCE_MACRO_USAGE b3Scalar.h -> b3AlignedAlloc [b3Scalar.h <336:72 336:85>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <337:4 337:18>]
REFERENCE_MACRO_USAGE b3Scalar.h -> b3AlignedFree [b3Scalar.h <337:65 337:77>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <338:4 338:18>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_FORCE_INLINE [b3Scalar.h <339:4 339:18>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <115:14 115:23>]
COMMENT: comment [b3Vector3.h <115:50 115:66>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <115:37 115:47>]
COMMENT: comment [b3Vector3.h <117:2 120:4>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <122:5 122:19>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <126:5 126:19>]
COMMENT: comment [b3Vector3.h <136:1 137:43>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <138:2 138:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <140:13 140:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <140:44 140:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <142:15 142:25>]
COMMENT: comment [b3Vector3.h <153:3 154:38>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <155:2 155:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <157:13 157:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <157:44 157:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <159:15 159:25>]
COMMENT: comment [b3Vector3.h <169:3 170:30>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <171:2 171:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <173:13 173:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <173:44 173:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <177:15 177:25>]
COMMENT: comment [b3Vector3.h <187:3 188:43>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <189:2 189:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> b3FullAssert [b3Vector3.h <191:3 191:14>]
COMMENT: comment [b3Vector3.h <193:7 193:35>]
COMMENT: comment [b3Vector3.h <207:3 208:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <209:2 209:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <211:13 211:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <211:44 211:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <218:15 218:25>]
COMMENT: comment [b3Vector3.h <230:3 230:55>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <231:2 231:16>]
COMMENT: comment [b3Vector3.h <236:3 236:47>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <237:2 237:16>]
COMMENT: comment [b3Vector3.h <242:3 243:62>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <244:2 244:16>]
COMMENT: comment [b3Vector3.h <246:3 247:62>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <248:2 248:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <250:2 250:16>]
COMMENT: comment [b3Vector3.h <253:3 253:27>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_EPSILON [b3Vector3.h <254:13 254:22>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_EPSILON [b3Vector3.h <254:24 254:33>]
COMMENT: comment [b3Vector3.h <265:3 266:28>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <267:2 267:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <269:13 269:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <269:44 269:53>]
COMMENT: comment [b3Vector3.h <309:3 309:58>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <310:2 310:16>]
COMMENT: comment [b3Vector3.h <312:3 314:44>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <315:2 315:16>]
COMMENT: comment [b3Vector3.h <317:3 318:34>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <319:2 319:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> b3FullAssert [b3Vector3.h <322:3 322:14>]
COMMENT: comment [b3Vector3.h <326:3 326:72>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <327:2 327:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <329:13 329:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <329:44 329:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <331:15 331:25>]
COMMENT: comment [b3Vector3.h <341:3 342:34>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <343:2 343:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <345:13 345:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <345:44 345:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <357:15 357:25>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <382:2 382:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <384:13 384:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <384:44 384:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <403:15 403:25>]
COMMENT: comment [b3Vector3.h <432:3 433:52>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <434:2 434:16>]
COMMENT: comment [b3Vector3.h <439:3 440:52>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <441:2 441:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <446:2 446:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <451:2 451:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <457:2 457:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <459:13 459:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <459:44 459:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <469:15 469:25>]
COMMENT: comment [b3Vector3.h <478:3 478:36>]
COMMENT: comment [b3Vector3.h <479:3 479:40>]
COMMENT: comment [b3Vector3.h <483:3 485:85>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <486:2 486:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <488:13 488:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <488:44 488:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <496:15 496:25>]
COMMENT: comment [b3Vector3.h <510:3 511:34>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <512:2 512:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <514:13 514:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <514:44 514:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <516:15 516:25>]
COMMENT: comment [b3Vector3.h <526:3 526:34>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <527:3 527:17>]
COMMENT: comment [b3Vector3.h <528:3 528:34>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <529:3 529:17>]
COMMENT: comment [b3Vector3.h <530:3 530:34>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <531:3 531:17>]
COMMENT: comment [b3Vector3.h <532:1 532:32>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <533:3 533:17>]
COMMENT: comment [b3Vector3.h <535:3 535:31>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <536:3 536:17>]
COMMENT: comment [b3Vector3.h <537:3 537:31>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <538:3 538:17>]
COMMENT: comment [b3Vector3.h <539:3 539:31>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <540:3 540:17>]
COMMENT: comment [b3Vector3.h <541:3 541:31>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <542:3 542:17>]
COMMENT: comment [b3Vector3.h <544:2 544:89>]
COMMENT: comment [b3Vector3.h <545:2 545:89>]
COMMENT: comment [b3Vector3.h <546:2 546:140>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <547:2 547:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <548:2 548:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <550:2 550:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <552:13 552:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <552:44 552:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <562:2 562:16>]
COMMENT: comment [b3Vector3.h <567:3 569:6>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <570:2 570:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <572:13 572:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <572:44 572:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <574:15 574:25>]
COMMENT: comment [b3Vector3.h <584:3 586:6>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <587:2 587:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <589:13 589:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <589:44 589:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <591:15 591:25>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <601:2 601:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <611:13 611:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <611:44 611:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <634:13 634:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <634:44 634:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <636:15 636:25>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <644:2 644:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <649:2 649:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_EPSILON [b3Vector3.h <651:22 651:31>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <654:2 654:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> b3Vector3Data [b3Vector3.h <654:40 654:52>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <656:2 656:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> b3Vector3Data [b3Vector3.h <656:48 656:60>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <658:2 658:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <660:2 660:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <662:2 662:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <664:2 664:16>]
COMMENT: comment [b3Vector3.h <666:9 669:52>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <670:9 670:23>]
COMMENT: comment [b3Vector3.h <672:9 675:52>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <676:9 676:23>]
COMMENT: comment [b3Vector3.h <678:5 678:122>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <679:5 679:19>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <681:13 681:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <681:44 681:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <695:15 695:25>]
COMMENT: comment [b3Vector3.h <711:1 711:60>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <712:1 712:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <715:13 715:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <715:44 715:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <717:15 717:25>]
COMMENT: comment [b3Vector3.h <727:1 727:59>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <728:1 728:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <731:13 731:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <731:44 731:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <733:15 733:25>]
COMMENT: comment [b3Vector3.h <743:1 743:55>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <744:1 744:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <747:14 747:30>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <747:45 747:54>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <752:15 752:25>]
COMMENT: comment [b3Vector3.h <763:1 763:47>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <764:1 764:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <767:14 767:30>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <767:45 767:54>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <770:15 770:25>]
COMMENT: comment [b3Vector3.h <777:1 777:43>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <778:1 778:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <781:13 781:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <781:44 781:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <785:15 785:25>]
COMMENT: comment [b3Vector3.h <793:1 793:43>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <794:1 794:15>]
COMMENT: comment [b3Vector3.h <800:1 800:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <801:1 801:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> b3FullAssert [b3Vector3.h <804:2 804:13>]
COMMENT: comment [b3Vector3.h <805:7 805:35>]
COMMENT: comment [b3Vector3.h <817:1 817:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <818:1 818:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <821:14 821:30>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <821:44 821:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <825:15 825:25>]
COMMENT: comment [b3Vector3.h <847:1 847:56>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <848:1 848:15>]
COMMENT: comment [b3Vector3.h <855:1 855:61>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <856:1 856:15>]
COMMENT: comment [b3Vector3.h <863:1 863:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <864:1 864:15>]
COMMENT: comment [b3Vector3.h <870:1 870:50>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <871:1 871:15>]
COMMENT: comment [b3Vector3.h <877:1 877:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <878:1 878:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <884:1 884:15>]
COMMENT: comment [b3Vector3.h <890:1 893:78>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <894:1 894:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <902:1 902:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <907:1 907:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <912:1 912:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <914:13 914:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <914:44 914:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <923:1 923:15>]
COMMENT: comment [b3Vector3.h <925:2 925:39>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <927:13 927:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <927:44 927:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <965:1 965:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <967:14 967:23>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <967:38 967:48>]
REFERENCE_MACRO_USAGE b3Vector3.h -> _WIN32 [b3Vector3.h <968:17 968:22>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <968:36 968:45>]
COMMENT: comment [b3Vector3.h <978:7 978:34>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_INFINITY [b3Vector3.h <980:28 980:38>]
REFERENCE_MACRO_USAGE b3Scalar.h -> FLT_MAX [b3Scalar.h <423:25 423:31>]
REFERENCE_MACRO_USAGE b3Vector3.h -> b3Assert [b3Vector3.h <994:3 994:10>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <1002:14 1002:23>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <1002:38 1002:48>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1007:1 1007:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <1009:14 1009:23>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <1009:38 1009:48>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <1010:17 1010:26>]
COMMENT: comment [b3Vector3.h <1021:7 1021:34>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_INFINITY [b3Vector3.h <1023:28 1023:38>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <1042:14 1042:23>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <1042:38 1042:48>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1057:2 1057:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <1059:13 1059:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <1059:44 1059:53>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_NEON [b3Vector3.h <1061:15 1061:25>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1076:3 1076:17>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_LARGE_FLOAT [b3Vector3.h <1079:31 1079:44>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1105:2 1105:16>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_LARGE_FLOAT [b3Vector3.h <1108:30 1108:43>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1134:2 1134:16>]
COMMENT: comment [b3Vector3.h <1142:3 1146:6>]
COMMENT: comment [b3Vector3.h <1149:1 1155:3>]
COMMENT: comment [b3Vector3.h <1156:1 1161:6>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1162:3 1162:17>]
COMMENT: comment [b3Vector3.h <1174:1 1174:100>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1175:1 1175:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_DOUBLE_PRECISION [b3Vector3.h <1177:9 1177:31>]
COMMENT: comment [b3Vector3.h <1195:8 1195:33>]
COMMENT: comment [b3Vector3.h <1197:1 1197:100>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1198:1 1198:15>]
COMMENT: comment [b3Vector3.h <1207:1 1207:102>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1208:1 1208:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1220:1 1220:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_SQRT12 [b3Vector3.h <1222:22 1222:30>]
COMMENT: comment [b3Vector3.h <1223:5 1223:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> b3RecipSqrt [b3Vector3.h <1225:18 1225:28>]
COMMENT: comment [b3Vector3.h <1229:5 1229:21>]
COMMENT: comment [b3Vector3.h <1235:5 1235:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> b3RecipSqrt [b3Vector3.h <1237:18 1237:28>]
COMMENT: comment [b3Vector3.h <1241:5 1241:21>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1260:1 1260:15>]
COMMENT: comment [b3Vector3.h <1262:2 1262:52>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1267:1 1267:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1274:1 1274:15>]
COMMENT: comment [b3Vector3.h <1276:2 1276:52>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1281:1 1281:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1288:1 1288:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> b3Vector3Data [b3Vector3.h <1288:50 1288:62>]
COMMENT: comment [b3Vector3.h <1290:2 1290:52>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_FORCE_INLINE [b3Vector3.h <1295:1 1295:15>]
REFERENCE_MACRO_USAGE b3Vector3.h -> b3Vector3Data [b3Vector3.h <1295:58 1295:70>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE_IN_API [b3Vector3.h <1326:13 1326:29>]
REFERENCE_MACRO_USAGE b3Vector3.h -> B3_USE_SSE [b3Vector3.h <1326:44 1326:53>]
COMMENT: comment [b3Vector3.h <1345:8 1345:22>]
REFERENCE_INCLUDE b3DynamicBvh.h -> b3Transform.h [b3DynamicBvh.h <22:10 22:38>]
FILE: b3Transform.h
COMMENT: comment [b3Transform.h <1:1 13:3>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_TRANSFORM_H [b3Transform.h <16:9 16:22>]
SYMBOL_MACRO B3_TRANSFORM_H [b3Transform.h <17:9 <17:9 17:22> 17:8>]
REFERENCE_INCLUDE b3Transform.h -> b3Matrix3x3.h [b3Transform.h <20:10 20:24>]
FILE: b3Matrix3x3.h
COMMENT: comment [b3Matrix3x3.h <1:1 13:3>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_MATRIX3x3_H [b3Matrix3x3.h <16:9 16:22>]
SYMBOL_MACRO B3_MATRIX3x3_H [b3Matrix3x3.h <17:9 <17:9 17:22> 17:8>]
REFERENCE_INCLUDE b3Matrix3x3.h -> b3Vector3.h [b3Matrix3x3.h <19:10 19:22>]
REFERENCE_INCLUDE b3Matrix3x3.h -> b3Quaternion.h [b3Matrix3x3.h <20:10 20:25>]
FILE: b3Quaternion.h
COMMENT: comment [b3Quaternion.h <1:1 13:3>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_SIMD__QUATERNION_H_ [b3Quaternion.h <17:9 17:30>]
SYMBOL_MACRO B3_SIMD__QUATERNION_H_ [b3Quaternion.h <18:9 <18:9 18:30> 18:8>]
REFERENCE_INCLUDE b3Quaternion.h -> b3Vector3.h [b3Quaternion.h <21:10 21:22>]
REFERENCE_INCLUDE b3Quaternion.h -> b3QuadWord.h [b3Quaternion.h <22:10 22:23>]
FILE: b3QuadWord.h
COMMENT: comment [b3QuadWord.h <1:1 13:3>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_SIMD_QUADWORD_H [b3QuadWord.h <16:9 16:26>]
SYMBOL_MACRO B3_SIMD_QUADWORD_H [b3QuadWord.h <17:9 <17:9 17:26> 17:8>]
REFERENCE_INCLUDE b3QuadWord.h -> b3Scalar.h [b3QuadWord.h <19:10 19:21>]
REFERENCE_INCLUDE b3QuadWord.h -> b3MinMax.h [b3QuadWord.h <20:10 20:21>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> __CELLOS_LV2 [b3QuadWord.h <26:14 26:25>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> __SPU__ [b3QuadWord.h <26:40 26:46>]
COMMENT: comment [b3QuadWord.h <30:1 32:4>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> USE_LIBSPE2 [b3QuadWord.h <33:9 33:19>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_ATTRIBUTE_ALIGNED16 [b3QuadWord.h <34:1 34:22>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> __SPU__ [b3QuadWord.h <41:14 41:20>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> __CELLOS_LV2__ [b3QuadWord.h <41:35 41:48>]
COMMENT: comment [b3QuadWord.h <52:7 52:31>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_USE_SSE [b3QuadWord.h <54:13 54:22>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_USE_NEON [b3QuadWord.h <54:36 54:46>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <62:2 62:16>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <66:2 66:16>]
COMMENT: comment [b3QuadWord.h <77:8 77:21>]
COMMENT: comment [b3QuadWord.h <79:8 79:32>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_USE_SSE [b3QuadWord.h <83:13 83:22>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_USE_NEON [b3QuadWord.h <83:36 83:46>]
COMMENT: comment [b3QuadWord.h <85:2 85:16>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <86:2 86:16>]
COMMENT: comment [b3QuadWord.h <91:2 91:21>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <92:2 92:16>]
COMMENT: comment [b3QuadWord.h <97:2 97:24>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <98:2 98:16>]
COMMENT: comment [b3QuadWord.h <108:3 108:34>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <109:3 109:17>]
COMMENT: comment [b3QuadWord.h <110:3 110:34>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <111:3 111:17>]
COMMENT: comment [b3QuadWord.h <112:3 112:34>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <113:3 113:17>]
COMMENT: comment [b3QuadWord.h <114:3 114:31>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <115:3 115:17>]
COMMENT: comment [b3QuadWord.h <116:3 116:31>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <117:3 117:17>]
COMMENT: comment [b3QuadWord.h <118:3 118:31>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <119:3 119:17>]
COMMENT: comment [b3QuadWord.h <120:3 120:31>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <121:3 121:17>]
COMMENT: comment [b3QuadWord.h <122:3 122:34>]
COMMENT: comment [b3QuadWord.h <125:2 125:95>]
COMMENT: comment [b3QuadWord.h <126:2 126:89>]
COMMENT: comment [b3QuadWord.h <127:2 127:140>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <128:2 128:16>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <129:2 129:16>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <131:2 131:16>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_USE_SSE [b3QuadWord.h <133:8 133:17>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <143:2 143:16>]
COMMENT: comment [b3QuadWord.h <148:3 152:6>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <153:3 153:17>]
COMMENT: comment [b3QuadWord.h <161:1 167:3>]
COMMENT: comment [b3QuadWord.h <168:1 173:6>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <174:3 174:17>]
COMMENT: comment [b3QuadWord.h <181:3 181:45>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <182:3 182:17>]
COMMENT: comment [b3QuadWord.h <183:3 183:110>]
COMMENT: comment [b3QuadWord.h <187:3 191:6>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <192:3 192:17>]
COMMENT: comment [b3QuadWord.h <197:1 202:6>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <203:3 203:17>]
COMMENT: comment [b3QuadWord.h <208:3 210:6>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <211:3 211:17>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_USE_SSE [b3QuadWord.h <213:16 213:25>]
COMMENT: comment [b3QuadWord.h <224:3 226:6>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_FORCE_INLINE [b3QuadWord.h <227:3 227:17>]
REFERENCE_MACRO_USAGE b3QuadWord.h -> B3_USE_SSE [b3QuadWord.h <229:16 229:25>]
COMMENT: comment [b3QuadWord.h <245:8 245:28>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <28:8 28:17>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_ATTRIBUTE_ALIGNED16 [b3Quaternion.h <30:14 30:35>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <34:13 34:22>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <34:36 34:46>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_ATTRIBUTE_ALIGNED16 [b3Quaternion.h <36:20 36:41>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_ATTRIBUTE_ALIGNED16 [b3Quaternion.h <37:20 37:41>]
COMMENT: comment [b3Quaternion.h <41:1 41:148>]
COMMENT: comment [b3Quaternion.h <44:3 44:45>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <47:14 47:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <47:44 47:53>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <47:67 47:77>]
COMMENT: comment [b3Quaternion.h <71:2 71:34>]
COMMENT: comment [b3Quaternion.h <72:2 72:69>]
COMMENT: comment [b3Quaternion.h <73:3 73:40>]
COMMENT: comment [b3Quaternion.h <77:3 77:67>]
COMMENT: comment [b3Quaternion.h <79:3 81:78>]
COMMENT: comment [b3Quaternion.h <86:3 89:78>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_EULER_DEFAULT_ZYX [b3Quaternion.h <92:9 92:28>]
COMMENT: comment [b3Quaternion.h <98:3 100:62>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> b3Assert [b3Quaternion.h <104:3 104:10>]
COMMENT: comment [b3Quaternion.h <109:3 112:35>]
COMMENT: comment [b3Quaternion.h <130:2 133:35>]
COMMENT: comment [b3Quaternion.h <145:71 145:74>]
COMMENT: comment [b3Quaternion.h <146:85 146:88>]
COMMENT: comment [b3Quaternion.h <147:85 147:88>]
COMMENT: comment [b3Quaternion.h <148:86 148:100>]
COMMENT: comment [b3Quaternion.h <152:4 155:36>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_PI [b3Quaternion.h <169:54 169:58>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_PI [b3Quaternion.h <169:102 169:106>]
COMMENT: comment [b3Quaternion.h <173:3 174:51>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <175:2 175:16>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <177:14 177:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <177:45 177:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <179:15 179:25>]
COMMENT: comment [b3Quaternion.h <190:3 191:58>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <194:14 194:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <194:45 194:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <196:15 196:25>]
COMMENT: comment [b3Quaternion.h <207:3 208:40>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <211:14 211:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <211:45 211:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <215:15 215:25>]
COMMENT: comment [b3Quaternion.h <226:3 228:38>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <231:14 231:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <231:45 231:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <257:15 257:25>]
COMMENT: comment [b3Quaternion.h <310:3 311:38>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <314:14 314:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <314:45 314:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <325:15 325:25>]
COMMENT: comment [b3Quaternion.h <338:3 338:59>]
COMMENT: comment [b3Quaternion.h <344:3 344:51>]
COMMENT: comment [b3Quaternion.h <350:3 351:43>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <354:14 354:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <354:45 354:54>]
COMMENT: comment [b3Quaternion.h <375:3 376:34>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <377:2 377:16>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <380:14 380:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <380:45 380:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <385:15 385:25>]
COMMENT: comment [b3Quaternion.h <392:3 393:42>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> b3Assert [b3Quaternion.h <396:3 396:10>]
COMMENT: comment [b3Quaternion.h <400:3 401:34>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> b3Assert [b3Quaternion.h <404:3 404:10>]
COMMENT: comment [b3Quaternion.h <408:3 408:62>]
COMMENT: comment [b3Quaternion.h <413:3 414:38>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> b3Assert [b3Quaternion.h <418:3 418:10>]
COMMENT: comment [b3Quaternion.h <421:3 421:75>]
COMMENT: comment [b3Quaternion.h <428:2 428:77>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_EPSILON [b3Quaternion.h <433:35 433:44>]
COMMENT: comment [b3Quaternion.h <433:47 433:73>]
COMMENT: comment [b3Quaternion.h <434:42 434:54>]
COMMENT: comment [b3Quaternion.h <439:2 439:52>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <442:14 442:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <442:45 442:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <444:15 444:25>]
COMMENT: comment [b3Quaternion.h <451:3 452:39>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <453:2 453:16>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <456:14 456:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <456:45 456:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <458:15 458:25>]
COMMENT: comment [b3Quaternion.h <466:3 467:39>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <468:2 468:16>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <471:14 471:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <471:45 471:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <473:15 473:25>]
COMMENT: comment [b3Quaternion.h <481:3 482:41>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <483:2 483:16>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <485:14 485:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <485:45 485:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <487:15 487:25>]
COMMENT: comment [b3Quaternion.h <494:3 494:41>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <495:2 495:16>]
COMMENT: comment [b3Quaternion.h <505:2 505:40>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <506:2 506:16>]
COMMENT: comment [b3Quaternion.h <517:3 520:56>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> b3Assert [b3Quaternion.h <524:4 524:11>]
COMMENT: comment [b3Quaternion.h <529:7 529:77>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <555:2 555:16>]
COMMENT: comment [b3Quaternion.h <564:1 564:51>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <565:1 565:15>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <568:14 568:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <568:45 568:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <599:15 599:25>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <653:1 653:15>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <656:14 656:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <656:45 656:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <682:15 682:25>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <736:1 736:15>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <739:14 739:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <739:45 739:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <765:15 765:25>]
COMMENT: comment [b3Quaternion.h <819:1 819:63>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <820:1 820:15>]
COMMENT: comment [b3Quaternion.h <827:1 827:47>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <828:1 828:15>]
COMMENT: comment [b3Quaternion.h <834:1 834:53>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <835:1 835:15>]
COMMENT: comment [b3Quaternion.h <841:1 841:47>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <842:1 842:15>]
COMMENT: comment [b3Quaternion.h <848:1 852:57>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <853:1 853:15>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <859:1 859:15>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <865:1 865:15>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <873:1 873:15>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE_IN_API [b3Quaternion.h <878:14 878:30>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_SSE [b3Quaternion.h <878:45 878:54>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_USE_NEON [b3Quaternion.h <880:15 880:25>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <887:1 887:15>]
COMMENT: comment [b3Quaternion.h <888:61 888:122>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_EPSILON [b3Quaternion.h <893:17 893:26>]
COMMENT: comment [b3Quaternion.h <897:57 897:105>]
REFERENCE_MACRO_USAGE b3Quaternion.h -> B3_FORCE_INLINE [b3Quaternion.h <907:1 907:15>]
COMMENT: comment [b3Quaternion.h <915:8 915:32>]
REFERENCE_INCLUDE b3Matrix3x3.h -> stdio.h [b3Matrix3x3.h <21:10 21:18>]
FILE: stdio.h non-indexed
REFERENCE_INCLUDE stdio.h -> corecrt.h [stdio.h <11:10 11:20>]
REFERENCE_INCLUDE stdio.h -> corecrt_wstdio.h [stdio.h <12:10 12:27>]
FILE: corecrt_wstdio.h non-indexed
REFERENCE_INCLUDE corecrt_wstdio.h -> corecrt.h [corecrt_wstdio.h <12:10 12:20>]
REFERENCE_INCLUDE corecrt_wstdio.h -> corecrt_stdio_config.h [corecrt_wstdio.h <13:10 13:33>]
FILE: corecrt_stdio_config.h non-indexed
REFERENCE_INCLUDE corecrt_stdio_config.h -> corecrt.h [corecrt_stdio_config.h <10:10 10:20>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <23:8 23:17>]
COMMENT: comment [b3Matrix3x3.h <24:1 24:75>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_ATTRIBUTE_ALIGNED16 [b3Matrix3x3.h <25:14 25:35>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <28:13 28:22>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <28:36 28:46>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_ATTRIBUTE_ALIGNED16 [b3Matrix3x3.h <29:20 29:41>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_ATTRIBUTE_ALIGNED16 [b3Matrix3x3.h <30:20 30:41>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_ATTRIBUTE_ALIGNED16 [b3Matrix3x3.h <31:20 31:41>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_DOUBLE_PRECISION [b3Matrix3x3.h <34:8 34:30>]
SYMBOL_MACRO b3Matrix3x3Data [b3Matrix3x3.h <37:9 <37:9 37:23> 37:24>]
COMMENT: comment [b3Matrix3x3.h <38:8 38:33>]
COMMENT: comment [b3Matrix3x3.h <41:1 42:73>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_ATTRIBUTE_ALIGNED16 [b3Matrix3x3.h <43:1 43:22>]
COMMENT: comment [b3Matrix3x3.h <45:2 45:68>]
COMMENT: comment [b3Matrix3x3.h <49:2 49:44>]
COMMENT: comment [b3Matrix3x3.h <52:2 52:76>]
COMMENT: comment [b3Matrix3x3.h <54:2 54:42>]
COMMENT: comment [b3Matrix3x3.h <56:2 62:4>]
COMMENT: comment [b3Matrix3x3.h <63:2 63:53>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <73:15 73:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <73:46 73:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <73:70 73:80>]
COMMENT: comment [b3Matrix3x3.h <108:2 108:32>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <109:2 109:16>]
COMMENT: comment [b3Matrix3x3.h <116:2 116:35>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <117:2 117:16>]
COMMENT: comment [b3Matrix3x3.h <127:2 128:40>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <129:2 129:16>]
COMMENT: comment [b3Matrix3x3.h <135:2 136:37>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <137:2 137:16>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> b3FullAssert [b3Matrix3x3.h <139:3 139:14>]
COMMENT: comment [b3Matrix3x3.h <143:2 144:37>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <145:2 145:16>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> b3FullAssert [b3Matrix3x3.h <147:3 147:14>]
COMMENT: comment [b3Matrix3x3.h <151:2 152:37>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <153:2 153:16>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> b3FullAssert [b3Matrix3x3.h <155:3 155:14>]
COMMENT: comment [b3Matrix3x3.h <159:2 161:36>]
COMMENT: comment [b3Matrix3x3.h <164:2 166:36>]
COMMENT: comment [b3Matrix3x3.h <169:2 171:36>]
COMMENT: comment [b3Matrix3x3.h <174:2 175:66>]
COMMENT: comment [b3Matrix3x3.h <183:2 192:29>]
COMMENT: comment [b3Matrix3x3.h <202:2 203:40>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> b3FullAssert [b3Matrix3x3.h <207:3 207:14>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <210:18 210:34>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <210:49 210:58>]
COMMENT: comment [b3Matrix3x3.h <274:2 278:4>]
COMMENT: comment [b3Matrix3x3.h <284:2 292:5>]
COMMENT: comment [b3Matrix3x3.h <294:3 294:129>]
COMMENT: comment [b3Matrix3x3.h <311:2 311:45>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <314:14 314:30>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <314:44 314:53>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <314:68 314:78>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <327:14 327:30>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <327:44 327:53>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <327:68 327:78>]
COMMENT: comment [b3Matrix3x3.h <340:2 341:38>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <344:14 344:30>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <344:45 344:54>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <363:15 363:25>]
COMMENT: comment [b3Matrix3x3.h <393:2 394:48>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <397:15 397:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <397:46 397:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <397:70 397:80>]
COMMENT: comment [b3Matrix3x3.h <483:2 486:32>]
COMMENT: comment [b3Matrix3x3.h <490:3 490:35>]
COMMENT: comment [b3Matrix3x3.h <495:3 495:26>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_HALF_PI [b3Matrix3x3.h <496:22 496:31>]
REFERENCE_MACRO_USAGE b3Scalar.h -> B3_2_PI [b3Scalar.h <410:26 410:32>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_PI [b3Matrix3x3.h <499:10 499:14>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_PI [b3Matrix3x3.h <501:10 501:14>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_PI [b3Matrix3x3.h <504:11 504:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_PI [b3Matrix3x3.h <506:11 506:15>]
COMMENT: comment [b3Matrix3x3.h <511:2 515:99>]
COMMENT: comment [b3Matrix3x3.h <526:21 526:38>]
COMMENT: comment [b3Matrix3x3.h <527:3 527:36>]
COMMENT: comment [b3Matrix3x3.h <529:3 529:46>]
COMMENT: comment [b3Matrix3x3.h <535:4 535:40>]
COMMENT: comment [b3Matrix3x3.h <537:29 537:47>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_PI [b3Matrix3x3.h <539:23 539:27>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_PI [b3Matrix3x3.h <540:24 540:28>]
COMMENT: comment [b3Matrix3x3.h <544:9 544:30>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_PI [b3Matrix3x3.h <546:24 546:28>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_PI [b3Matrix3x3.h <547:25 547:29>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_PI [b3Matrix3x3.h <555:23 555:27>]
COMMENT: comment [b3Matrix3x3.h <582:2 583:80>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <587:15 587:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <587:46 587:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <587:70 587:80>]
COMMENT: comment [b3Matrix3x3.h <597:2 597:51>]
COMMENT: comment [b3Matrix3x3.h <599:2 599:47>]
COMMENT: comment [b3Matrix3x3.h <601:2 601:61>]
COMMENT: comment [b3Matrix3x3.h <603:2 603:49>]
COMMENT: comment [b3Matrix3x3.h <605:2 605:47>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <611:2 611:16>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <615:2 615:16>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <619:2 619:16>]
COMMENT: comment [b3Matrix3x3.h <625:2 633:4>]
COMMENT: comment [b3Matrix3x3.h <639:4 639:62>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_EPSILON [b3Matrix3x3.h <663:16 663:25>]
COMMENT: comment [b3Matrix3x3.h <670:4 670:74>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_EPSILON [b3Matrix3x3.h <676:40 676:49>]
COMMENT: comment [b3Matrix3x3.h <685:5 685:75>]
COMMENT: comment [b3Matrix3x3.h <691:4 691:55>]
COMMENT: comment [b3Matrix3x3.h <700:4 700:44>]
COMMENT: comment [b3Matrix3x3.h <715:2 721:4>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> b3Matrix3x3Data [b3Matrix3x3.h <727:24 727:38>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> b3Matrix3x3Data [b3Matrix3x3.h <731:32 731:46>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <740:1 740:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <743:14 743:30>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <743:45 743:54>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <792:15 792:25>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <830:1 830:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <833:15 833:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <833:46 833:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <833:70 833:80>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <852:1 852:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <855:15 855:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <855:46 855:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <861:15 861:25>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <874:1 874:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <877:15 877:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <877:46 877:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <877:70 877:80>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <898:1 898:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <901:15 901:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <901:46 901:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <901:70 901:80>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <923:1 923:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <926:15 926:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <926:46 926:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <926:70 926:80>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <946:1 946:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <953:1 953:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <956:15 956:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <956:46 956:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <961:15 961:25>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <974:1 974:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <977:15 977:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <977:46 977:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <994:15 994:25>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1011:1 1011:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1019:1 1019:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> b3FullAssert [b3Matrix3x3.h <1024:2 1024:13>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1031:1 1031:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <1034:15 1034:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <1034:46 1034:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <1054:15 1054:25>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1087:1 1087:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <1090:15 1090:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <1090:46 1090:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <1111:15 1111:25>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1140:1 1140:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <1143:15 1143:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <1143:46 1143:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <1143:70 1143:80>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1151:1 1151:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <1154:15 1154:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <1154:46 1154:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <1168:15 1168:25>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1191:1 1191:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <1194:15 1194:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <1194:46 1194:55>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_NEON [b3Matrix3x3.h <1240:15 1240:25>]
COMMENT: comment [b3Matrix3x3.h <1276:1 1289:3>]
COMMENT: comment [b3Matrix3x3.h <1291:1 1292:43>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1293:1 1293:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE_IN_API [b3Matrix3x3.h <1295:15 1295:31>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_USE_SSE [b3Matrix3x3.h <1295:46 1295:55>]
COMMENT: comment [b3Matrix3x3.h <1315:1 1315:21>]
COMMENT: comment [b3Matrix3x3.h <1321:1 1321:21>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1330:1 1330:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> b3Matrix3x3Data [b3Matrix3x3.h <1330:52 1330:66>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1336:1 1336:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1343:1 1343:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> b3Matrix3x3Data [b3Matrix3x3.h <1343:60 1343:74>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1349:1 1349:15>]
REFERENCE_MACRO_USAGE b3Matrix3x3.h -> B3_FORCE_INLINE [b3Matrix3x3.h <1355:1 1355:15>]
COMMENT: comment [b3Matrix3x3.h <1361:8 1361:24>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_USE_DOUBLE_PRECISION [b3Transform.h <22:8 22:30>]
SYMBOL_MACRO b3TransformData [b3Transform.h <25:9 <25:9 25:23> 25:24>]
COMMENT: comment [b3Transform.h <31:1 32:104>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_ATTRIBUTE_ALIGNED16 [b3Transform.h <33:1 33:22>]
COMMENT: comment [b3Transform.h <35:3 35:30>]
COMMENT: comment [b3Transform.h <37:3 37:33>]
COMMENT: comment [b3Transform.h <42:3 42:45>]
COMMENT: comment [b3Transform.h <44:3 46:57>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <47:11 47:25>]
COMMENT: comment [b3Transform.h <53:3 55:56>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <56:11 56:25>]
COMMENT: comment [b3Transform.h <61:3 61:32>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <62:2 62:16>]
COMMENT: comment [b3Transform.h <67:3 67:35>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <68:2 68:16>]
COMMENT: comment [b3Transform.h <76:3 79:39>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <80:3 80:17>]
COMMENT: comment [b3Transform.h <85:1 90:5>]
COMMENT: comment [b3Transform.h <92:1 92:48>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <93:2 93:16>]
COMMENT: comment [b3Transform.h <98:3 98:50>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <99:2 99:16>]
COMMENT: comment [b3Transform.h <104:3 104:56>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <105:2 105:16>]
COMMENT: comment [b3Transform.h <110:3 110:56>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <111:2 111:16>]
COMMENT: comment [b3Transform.h <112:3 112:56>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <113:2 113:16>]
COMMENT: comment [b3Transform.h <115:3 115:52>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <116:2 116:16>]
COMMENT: comment [b3Transform.h <117:3 117:52>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <118:2 118:16>]
COMMENT: comment [b3Transform.h <120:3 120:61>]
COMMENT: comment [b3Transform.h <128:3 129:117>]
COMMENT: comment [b3Transform.h <136:3 137:117>]
COMMENT: comment [b3Transform.h <147:3 148:59>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <149:2 149:16>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <154:2 154:16>]
COMMENT: comment [b3Transform.h <157:3 157:57>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <158:2 158:16>]
COMMENT: comment [b3Transform.h <163:3 163:58>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <164:2 164:16>]
COMMENT: comment [b3Transform.h <170:3 170:55>]
COMMENT: comment [b3Transform.h <177:3 178:37>]
COMMENT: comment [b3Transform.h <186:3 186:52>]
COMMENT: comment [b3Transform.h <193:3 195:42>]
COMMENT: comment [b3Transform.h <198:3 198:66>]
COMMENT: comment [b3Transform.h <201:3 201:44>]
REFERENCE_MACRO_USAGE b3Transform.h -> b3TransformData [b3Transform.h <208:24 208:38>]
REFERENCE_MACRO_USAGE b3Transform.h -> b3TransformData [b3Transform.h <212:32 212:46>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <221:1 221:15>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <228:1 228:15>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <236:1 236:15>]
COMMENT: comment [b3Transform.h <243:1 243:60>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <244:1 244:15>]
COMMENT: comment [b3Transform.h <251:1 251:21>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <266:1 266:15>]
REFERENCE_MACRO_USAGE b3Transform.h -> b3TransformData [b3Transform.h <266:45 266:59>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <272:1 272:15>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <279:1 279:15>]
REFERENCE_MACRO_USAGE b3Transform.h -> b3TransformData [b3Transform.h <279:53 279:67>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <285:1 285:15>]
REFERENCE_MACRO_USAGE b3Transform.h -> B3_FORCE_INLINE [b3Transform.h <291:1 291:15>]
COMMENT: comment [b3Transform.h <298:8 298:24>]
REFERENCE_INCLUDE b3DynamicBvh.h -> b3AabbUtil.h [b3DynamicBvh.h <23:10 23:39>]
FILE: b3AabbUtil.h
COMMENT: comment [b3AabbUtil.h <1:1 13:3>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_AABB_UTIL2 [b3AabbUtil.h <17:9 17:21>]
SYMBOL_MACRO B3_AABB_UTIL2 [b3AabbUtil.h <18:9 <18:9 18:21> 18:8>]
REFERENCE_INCLUDE b3AabbUtil.h -> b3Transform.h [b3AabbUtil.h <20:10 20:38>]
REFERENCE_INCLUDE b3AabbUtil.h -> b3Vector3.h [b3AabbUtil.h <21:10 21:36>]
REFERENCE_INCLUDE b3AabbUtil.h -> b3MinMax.h [b3AabbUtil.h <22:10 22:35>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_FORCE_INLINE [b3AabbUtil.h <26:1 26:15>]
COMMENT: comment [b3AabbUtil.h <35:1 35:52>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_FORCE_INLINE [b3AabbUtil.h <36:1 36:15>]
COMMENT: comment [b3AabbUtil.h <47:1 47:52>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_FORCE_INLINE [b3AabbUtil.h <48:1 48:15>]
COMMENT: comment [b3AabbUtil.h <58:1 58:60>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_FORCE_INLINE [b3AabbUtil.h <59:1 59:15>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_FORCE_INLINE [b3AabbUtil.h <78:1 78:15>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_FORCE_INLINE [b3AabbUtil.h <90:1 90:15>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_FORCE_INLINE [b3AabbUtil.h <125:1 125:15>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_FORCE_INLINE [b3AabbUtil.h <182:1 182:15>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_FORCE_INLINE [b3AabbUtil.h <193:1 193:15>]
COMMENT: comment [b3AabbUtil.h <195:3 195:58>]
COMMENT: comment [b3AabbUtil.h <196:3 196:58>]
COMMENT: comment [b3AabbUtil.h <197:3 197:58>]
SYMBOL_MACRO B3_USE_BANCHLESS [b3AabbUtil.h <209:9 <209:9 209:24> 209:25>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_USE_BANCHLESS [b3AabbUtil.h <210:8 210:23>]
COMMENT: comment [b3AabbUtil.h <211:2 211:155>]
REFERENCE_MACRO_USAGE b3AabbUtil.h -> B3_FORCE_INLINE [b3AabbUtil.h <212:2 212:16>]
COMMENT: comment [b3AabbUtil.h <228:8 228:26>]
COMMENT: comment [b3AabbUtil.h <230:8 230:23>]
COMMENT: comment [b3DynamicBvh.h <25:1 25:3>]
COMMENT: comment [b3DynamicBvh.h <26:1 26:30>]
COMMENT: comment [b3DynamicBvh.h <27:1 27:3>]
COMMENT: comment [b3DynamicBvh.h <30:1 30:27>]
COMMENT: comment [b3DynamicBvh.h <31:33 31:59>]
SYMBOL_MACRO B3_DBVT_IMPL_GENERIC [b3DynamicBvh.h <31:9 <31:9 31:28> 31:30>]
COMMENT: comment [b3DynamicBvh.h <32:30 32:36>]
SYMBOL_MACRO B3_DBVT_IMPL_SSE [b3DynamicBvh.h <32:9 <32:9 32:24> 32:27>]
COMMENT: comment [b3DynamicBvh.h <34:1 34:39>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> _WIN32 [b3DynamicBvh.h <35:8 35:13>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> _MSC_VER [b3DynamicBvh.h <36:15 36:22>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> _MSC_VER [b3DynamicBvh.h <36:28 36:35>]
SYMBOL_MACRO B3_DBVT_USE_TEMPLATE [b3DynamicBvh.h <37:9 <37:9 37:28> 37:30>]
COMMENT: comment [b3DynamicBvh.h <45:1 45:45>]
SYMBOL_MACRO B3_DBVT_USE_INTRINSIC_SSE [b3DynamicBvh.h <46:9 <46:9 46:33> 46:34>]
COMMENT: comment [b3DynamicBvh.h <48:1 48:31>]
SYMBOL_MACRO B3_DBVT_USE_MEMMOVE [b3DynamicBvh.h <49:9 <49:9 49:27> 49:29>]
COMMENT: comment [b3DynamicBvh.h <51:1 51:28>]
SYMBOL_MACRO B3_DBVT_ENABLE_BENCHMARK [b3DynamicBvh.h <52:9 <52:9 52:32> 52:33>]
COMMENT: comment [b3DynamicBvh.h <54:1 54:12>]
SYMBOL_MACRO B3_DBVT_INLINE [b3DynamicBvh.h <55:9 <55:9 55:22> 55:26>]
COMMENT: comment [b3DynamicBvh.h <57:1 57:35>]
COMMENT: comment [b3DynamicBvh.h <59:1 59:33>]
COMMENT: comment [b3DynamicBvh.h <60:26 60:47>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_USE_SSE [b3DynamicBvh.h <60:14 60:23>]
SYMBOL_MACRO B3_DBVT_SELECT_IMPL [b3DynamicBvh.h <61:9 <61:9 61:27> 61:29>]
SYMBOL_MACRO B3_DBVT_MERGE_IMPL [b3DynamicBvh.h <62:9 <62:9 62:26> 62:29>]
SYMBOL_MACRO B3_DBVT_INT0_IMPL [b3DynamicBvh.h <63:9 <63:9 63:25> 63:28>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_SELECT_IMPL [b3DynamicBvh.h <70:6 70:24>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IMPL_SSE [b3DynamicBvh.h <61:30 61:45>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IMPL_SSE [b3DynamicBvh.h <70:27 70:42>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_MERGE_IMPL [b3DynamicBvh.h <71:3 71:20>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IMPL_SSE [b3DynamicBvh.h <62:30 62:45>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IMPL_SSE [b3DynamicBvh.h <71:23 71:38>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INT0_IMPL [b3DynamicBvh.h <72:3 72:19>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IMPL_SSE [b3DynamicBvh.h <63:29 63:44>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IMPL_SSE [b3DynamicBvh.h <72:22 72:37>]
REFERENCE_INCLUDE b3DynamicBvh.h -> emmintrin.h [b3DynamicBvh.h <73:10 73:22>]
COMMENT: comment [b3DynamicBvh.h <76:1 76:3>]
COMMENT: comment [b3DynamicBvh.h <77:1 77:26>]
COMMENT: comment [b3DynamicBvh.h <78:1 78:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_USE_TEMPLATE [b3DynamicBvh.h <80:5 80:24>]
SYMBOL_MACRO B3_DBVT_VIRTUAL [b3DynamicBvh.h <81:9 <81:9 81:23> 81:8>]
SYMBOL_MACRO B3_DBVT_VIRTUAL_DTOR [b3DynamicBvh.h <82:9 <82:9 82:28> 82:30>]
SYMBOL_MACRO B3_DBVT_PREFIX [b3DynamicBvh.h <83:9 <83:9 83:22> 83:47>]
SYMBOL_MACRO B3_DBVT_IPOLICY [b3DynamicBvh.h <84:9 <84:9 84:23> 84:30>]
SYMBOL_MACRO B3_DBVT_CHECKTYPE [b3DynamicBvh.h <85:9 <85:9 85:25> 85:88>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_USE_MEMMOVE [b3DynamicBvh.h <94:5 94:23>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> __CELLOS_LV2__ [b3DynamicBvh.h <95:15 95:28>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> __MWERKS__ [b3DynamicBvh.h <95:43 95:52>]
REFERENCE_INCLUDE b3DynamicBvh.h -> memory.h [b3DynamicBvh.h <96:10 96:19>]
FILE: memory.h non-indexed
REFERENCE_INCLUDE memory.h -> corecrt_memory.h [memory.h <11:10 11:27>]
FILE: corecrt_memory.h non-indexed
REFERENCE_INCLUDE corecrt_memory.h -> corecrt.h [corecrt_memory.h <13:10 13:20>]
REFERENCE_INCLUDE corecrt_memory.h -> corecrt_memcpy_s.h [corecrt_memory.h <14:10 14:29>]
FILE: corecrt_memcpy_s.h non-indexed
REFERENCE_INCLUDE corecrt_memcpy_s.h -> corecrt.h [corecrt_memcpy_s.h <10:10 10:20>]
REFERENCE_INCLUDE corecrt_memcpy_s.h -> errno.h [corecrt_memcpy_s.h <11:10 11:18>]
FILE: errno.h non-indexed
REFERENCE_INCLUDE errno.h -> corecrt.h [errno.h <11:10 11:20>]
REFERENCE_INCLUDE corecrt_memcpy_s.h -> vcruntime_string.h [corecrt_memcpy_s.h <12:10 12:29>]
FILE: vcruntime_string.h non-indexed
REFERENCE_INCLUDE vcruntime_string.h -> vcruntime.h [vcruntime_string.h <10:10 10:22>]
REFERENCE_INCLUDE corecrt_memory.h -> vcruntime_string.h [corecrt_memory.h <15:10 15:29>]
REFERENCE_INCLUDE b3DynamicBvh.h -> string.h [b3DynamicBvh.h <98:10 98:19>]
FILE: string.h non-indexed
REFERENCE_INCLUDE string.h -> corecrt.h [string.h <11:10 11:20>]
REFERENCE_INCLUDE string.h -> corecrt_memory.h [string.h <12:10 12:27>]
REFERENCE_INCLUDE string.h -> corecrt_wstring.h [string.h <13:10 13:28>]
FILE: corecrt_wstring.h non-indexed
REFERENCE_INCLUDE corecrt_wstring.h -> corecrt.h [corecrt_wstring.h <11:10 11:20>]
REFERENCE_INCLUDE corecrt_wstring.h -> vcruntime_string.h [corecrt_wstring.h <12:10 12:29>]
REFERENCE_INCLUDE string.h -> vcruntime_string.h [string.h <14:10 14:29>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_USE_TEMPLATE [b3DynamicBvh.h <101:9 101:28>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_USE_MEMMOVE [b3DynamicBvh.h <105:9 105:27>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_ENABLE_BENCHMARK [b3DynamicBvh.h <109:9 109:32>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_SELECT_IMPL [b3DynamicBvh.h <113:9 113:27>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_MERGE_IMPL [b3DynamicBvh.h <117:9 117:26>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INT0_IMPL [b3DynamicBvh.h <121:9 121:25>]
COMMENT: comment [b3DynamicBvh.h <125:1 125:3>]
COMMENT: comment [b3DynamicBvh.h <126:1 126:20>]
COMMENT: comment [b3DynamicBvh.h <127:1 127:3>]
COMMENT: comment [b3DynamicBvh.h <129:1 129:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <132:2 132:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_FORCE_INLINE [b3DynamicBvh.h <55:27 55:41>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <133:2 133:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <134:2 134:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <135:2 135:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <136:2 136:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <142:2 142:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <143:2 143:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <144:2 144:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <145:2 145:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <146:2 146:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <147:2 147:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <150:2 150:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <153:2 153:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <155:2 155:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <158:2 158:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <161:2 161:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <164:5 164:18>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <165:2 165:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <168:2 168:15>]
COMMENT: comment [b3DynamicBvh.h <173:1 173:10>]
COMMENT: comment [b3DynamicBvh.h <176:1 176:20>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <181:2 181:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <182:2 182:15>]
COMMENT: comment [b3DynamicBvh.h <191:1 191:123>]
COMMENT: comment [b3DynamicBvh.h <192:1 192:149>]
COMMENT: comment [b3DynamicBvh.h <193:1 193:139>]
COMMENT: comment [b3DynamicBvh.h <196:2 196:21>]
COMMENT: comment [b3DynamicBvh.h <224:2 224:24>]
COMMENT: comment [b3DynamicBvh.h <226:2 226:16>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_VIRTUAL_DTOR [b3DynamicBvh.h <229:3 229:22>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_VIRTUAL [b3DynamicBvh.h <230:4 230:18>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_VIRTUAL [b3DynamicBvh.h <231:3 231:17>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_VIRTUAL [b3DynamicBvh.h <232:3 232:17>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_VIRTUAL [b3DynamicBvh.h <233:3 233:17>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_VIRTUAL [b3DynamicBvh.h <234:3 234:17>]
COMMENT: comment [b3DynamicBvh.h <236:2 236:15>]
COMMENT: comment [b3DynamicBvh.h <244:2 244:14>]
COMMENT: comment [b3DynamicBvh.h <251:2 251:14>]
COMMENT: comment [b3DynamicBvh.h <257:2 257:11>]
COMMENT: comment [b3DynamicBvh.h <269:2 269:12>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_ENABLE_BENCHMARK [b3DynamicBvh.h <289:5 289:28>]
COMMENT: comment [b3DynamicBvh.h <294:2 294:59>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <295:2 295:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <297:3 297:17>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <298:2 298:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <300:3 300:17>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <301:2 301:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <304:3 304:17>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <306:2 306:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <309:5 309:19>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <324:2 324:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <327:3 327:17>]
COMMENT: comment [b3DynamicBvh.h <328:2 328:132>]
COMMENT: comment [b3DynamicBvh.h <329:2 329:158>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <330:2 330:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <334:3 334:17>]
COMMENT: comment [b3DynamicBvh.h <335:2 335:182>]
COMMENT: comment [b3DynamicBvh.h <336:2 336:84>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <337:2 337:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <346:9 346:23>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <348:2 348:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <353:3 353:17>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <354:2 354:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <360:3 360:17>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <362:2 362:15>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <364:3 364:17>]
COMMENT: comment [b3DynamicBvh.h <365:2 365:13>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <366:9 366:22>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <376:9 376:22>]
COMMENT: comment [b3DynamicBvh.h <387:2 387:4>]
COMMENT: comment [b3DynamicBvh.h <392:1 392:3>]
COMMENT: comment [b3DynamicBvh.h <393:1 393:12>]
COMMENT: comment [b3DynamicBvh.h <394:1 394:3>]
COMMENT: comment [b3DynamicBvh.h <396:1 396:3>]
COMMENT: comment [b3DynamicBvh.h <404:1 404:3>]
COMMENT: comment [b3DynamicBvh.h <410:1 410:3>]
COMMENT: comment [b3DynamicBvh.h <418:1 418:3>]
COMMENT: comment [b3DynamicBvh.h <431:1 431:3>]
COMMENT: comment [b3DynamicBvh.h <444:1 444:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <445:1 445:14>]
COMMENT: comment [b3DynamicBvh.h <450:1 450:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <451:1 451:14>]
COMMENT: comment [b3DynamicBvh.h <458:1 458:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <459:1 459:14>]
COMMENT: comment [b3DynamicBvh.h <469:1 469:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <470:1 470:14>]
COMMENT: comment [b3DynamicBvh.h <497:1 497:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <498:1 498:14>]
COMMENT: comment [b3DynamicBvh.h <507:1 507:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <508:1 508:14>]
COMMENT: comment [b3DynamicBvh.h <519:1 519:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <520:1 520:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INT0_IMPL [b3DynamicBvh.h <523:5 523:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IMPL_SSE [b3DynamicBvh.h <523:26 523:41>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> _WIN32 [b3DynamicBvh.h <526:14 526:19>]
COMMENT: comment [b3DynamicBvh.h <544:1 544:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <545:1 545:14>]
COMMENT: comment [b3DynamicBvh.h <560:1 560:39>]
COMMENT: comment [b3DynamicBvh.h <563:1 563:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <564:1 564:14>]
COMMENT: comment [b3DynamicBvh.h <573:1 573:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <574:1 574:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_SELECT_IMPL [b3DynamicBvh.h <578:5 578:23>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IMPL_SSE [b3DynamicBvh.h <578:28 578:43>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> _WIN32 [b3DynamicBvh.h <580:14 580:19>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_ATTRIBUTE_ALIGNED16 [b3DynamicBvh.h <581:9 581:30>]
COMMENT: comment [b3DynamicBvh.h <585:2 585:47>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_USE_INTRINSIC_SSE [b3DynamicBvh.h <586:5 586:29>]
COMMENT: comment [b3DynamicBvh.h <588:19 588:100>]
COMMENT: comment [b3DynamicBvh.h <652:1 652:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <653:1 653:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_MERGE_IMPL [b3DynamicBvh.h <657:5 657:22>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IMPL_SSE [b3DynamicBvh.h <657:25 657:40>]
COMMENT: comment [b3DynamicBvh.h <675:1 675:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INLINE [b3DynamicBvh.h <676:1 676:14>]
COMMENT: comment [b3DynamicBvh.h <687:1 687:3>]
COMMENT: comment [b3DynamicBvh.h <688:1 688:12>]
COMMENT: comment [b3DynamicBvh.h <689:1 689:3>]
COMMENT: comment [b3DynamicBvh.h <691:1 691:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <692:1 692:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <694:11 694:25>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_CHECKTYPE [b3DynamicBvh.h <696:2 696:18>]
COMMENT: comment [b3DynamicBvh.h <705:1 705:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <706:1 706:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <708:12 708:26>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_CHECKTYPE [b3DynamicBvh.h <710:2 710:18>]
COMMENT: comment [b3DynamicBvh.h <722:1 722:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <723:1 723:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <726:11 726:25>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_CHECKTYPE [b3DynamicBvh.h <728:2 728:18>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <788:1 788:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <791:11 791:25>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_CHECKTYPE [b3DynamicBvh.h <793:2 793:18>]
COMMENT: comment [b3DynamicBvh.h <920:1 920:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <921:1 921:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <924:11 924:25>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_CHECKTYPE [b3DynamicBvh.h <926:2 926:18>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_ATTRIBUTE_ALIGNED16 [b3DynamicBvh.h <929:4 929:25>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <953:1 953:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <962:9 962:23>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_CHECKTYPE [b3DynamicBvh.h <965:2 965:18>]
COMMENT: comment [b3DynamicBvh.h <1003:1 1003:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <1004:1 1004:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <1008:9 1008:23>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_CHECKTYPE [b3DynamicBvh.h <1010:2 1010:18>]
COMMENT: comment [b3DynamicBvh.h <1016:4 1016:86>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_LARGE_FLOAT [b3DynamicBvh.h <1018:67 1018:80>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_LARGE_FLOAT [b3DynamicBvh.h <1019:67 1019:80>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_LARGE_FLOAT [b3DynamicBvh.h <1020:67 1020:80>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> COMPARE_BTRAY_AABB2 [b3DynamicBvh.h <1024:8 1024:26>]
COMMENT: comment [b3DynamicBvh.h <1026:7 1026:28>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> COMPARE_BTRAY_AABB2 [b3DynamicBvh.h <1045:8 1045:26>]
COMMENT: comment [b3DynamicBvh.h <1049:8 1049:26>]
COMMENT: comment [b3DynamicBvh.h <1073:1 1073:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <1074:1 1074:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <1079:10 1079:24>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_CHECKTYPE [b3DynamicBvh.h <1081:2 1081:18>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> b3Assert [b3DynamicBvh.h <1087:4 1087:11>]
COMMENT: comment [b3DynamicBvh.h <1128:1 1128:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <1129:1 1129:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <1135:12 1135:26>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_CHECKTYPE [b3DynamicBvh.h <1138:2 1138:18>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> b3Assert [b3DynamicBvh.h <1149:4 1149:11>]
COMMENT: comment [b3DynamicBvh.h <1192:8 1192:22>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_USE_MEMMOVE [b3DynamicBvh.h <1195:5 1195:23>]
COMMENT: comment [b3DynamicBvh.h <1201:8 1201:22>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_USE_MEMMOVE [b3DynamicBvh.h <1204:5 1204:23>]
COMMENT: comment [b3DynamicBvh.h <1226:1 1226:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <1227:1 1227:14>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <1229:11 1229:25>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_CHECKTYPE [b3DynamicBvh.h <1231:2 1231:18>]
COMMENT: comment [b3DynamicBvh.h <1251:1 1251:3>]
COMMENT: comment [b3DynamicBvh.h <1252:1 1252:14>]
COMMENT: comment [b3DynamicBvh.h <1253:1 1253:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_USE_MEMMOVE [b3DynamicBvh.h <1255:8 1255:26>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_USE_TEMPLATE [b3DynamicBvh.h <1256:8 1256:27>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_VIRTUAL_DTOR [b3DynamicBvh.h <1257:8 1257:27>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_VIRTUAL [b3DynamicBvh.h <1258:8 1258:22>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_PREFIX [b3DynamicBvh.h <1259:8 1259:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IPOLICY [b3DynamicBvh.h <1260:8 1260:22>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_CHECKTYPE [b3DynamicBvh.h <1261:8 1261:24>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IMPL_GENERIC [b3DynamicBvh.h <1262:8 1262:27>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_IMPL_SSE [b3DynamicBvh.h <1263:8 1263:23>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_USE_INTRINSIC_SSE [b3DynamicBvh.h <1264:8 1264:32>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_SELECT_IMPL [b3DynamicBvh.h <1265:8 1265:26>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_MERGE_IMPL [b3DynamicBvh.h <1266:8 1266:25>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_DBVT_INT0_IMPL [b3DynamicBvh.h <1267:8 1267:24>]
COMMENT: comment [b3DynamicBvh.cpp <19:1 19:3>]
COMMENT: comment [b3DynamicBvh.cpp <23:1 23:3>]
COMMENT: comment [b3DynamicBvh.cpp <30:1 30:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <31:8 31:21>]
COMMENT: comment [b3DynamicBvh.cpp <36:1 36:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <37:8 37:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_ATTRIBUTE_ALIGNED16 [b3DynamicBvh.cpp <41:2 41:23>]
COMMENT: comment [b3DynamicBvh.cpp <50:1 50:23>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <51:8 51:21>]
COMMENT: comment [b3DynamicBvh.cpp <58:1 58:3>]
COMMENT: comment [b3DynamicBvh.cpp <68:1 68:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <69:8 69:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> b3AlignedFree [b3DynamicBvh.cpp <72:2 72:14>]
COMMENT: comment [b3DynamicBvh.cpp <76:1 76:3>]
COMMENT: comment [b3DynamicBvh.cpp <89:1 89:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <90:8 90:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> b3AlignedAlloc [b3DynamicBvh.cpp <98:13 98:26>]
COMMENT: comment [b3DynamicBvh.cpp <105:1 105:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <106:8 106:21>]
COMMENT: comment [b3DynamicBvh.cpp <116:1 116:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <117:8 117:21>]
COMMENT: comment [b3DynamicBvh.cpp <128:1 128:3>]
COMMENT: comment [b3DynamicBvh.cpp <172:1 172:3>]
COMMENT: comment [b3DynamicBvh.cpp <212:1 212:3>]
COMMENT: comment [b3DynamicBvh.cpp <230:1 230:3>]
COMMENT: comment [b3DynamicBvh.cpp <248:1 248:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_ATTRIBUTE_ALIGNED16 [b3DynamicBvh.cpp <252:2 252:23>]
COMMENT: comment [b3DynamicBvh.cpp <265:1 265:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_INFINITY [b3DynamicBvh.cpp <271:20 271:30>]
COMMENT: comment [b3DynamicBvh.cpp <298:1 298:3>]
COMMENT: comment [b3DynamicBvh.cpp <368:1 368:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <369:8 369:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> b3Assert [b3DynamicBvh.cpp <372:2 372:9>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> b3Assert [b3DynamicBvh.cpp <379:3 379:10>]
COMMENT: comment [b3DynamicBvh.cpp <404:1 404:3>]
COMMENT: comment [b3DynamicBvh.cpp <405:1 405:7>]
COMMENT: comment [b3DynamicBvh.cpp <406:1 406:3>]
COMMENT: comment [b3DynamicBvh.cpp <408:1 408:3>]
COMMENT: comment [b3DynamicBvh.cpp <418:1 418:3>]
COMMENT: comment [b3DynamicBvh.cpp <424:1 424:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> b3AlignedFree [b3DynamicBvh.cpp <429:2 429:14>]
COMMENT: comment [b3DynamicBvh.cpp <437:1 437:3>]
COMMENT: comment [b3DynamicBvh.cpp <450:1 450:3>]
COMMENT: comment [b3DynamicBvh.cpp <462:1 462:3>]
COMMENT: comment [b3DynamicBvh.cpp <482:1 482:3>]
COMMENT: comment [b3DynamicBvh.cpp <491:1 491:3>]
COMMENT: comment [b3DynamicBvh.cpp <508:1 508:3>]
COMMENT: comment [b3DynamicBvh.cpp <526:1 526:3>]
COMMENT: comment [b3DynamicBvh.cpp <536:1 536:3>]
COMMENT: comment [b3DynamicBvh.cpp <545:1 545:3>]
COMMENT: comment [b3DynamicBvh.cpp <554:1 554:3>]
COMMENT: comment [b3DynamicBvh.cpp <562:1 562:3>]
COMMENT: comment [b3DynamicBvh.cpp <587:1 587:3>]
COMMENT: comment [b3DynamicBvh.cpp <618:1 618:3>]
COMMENT: comment [b3DynamicBvh.cpp <626:1 626:3>]
COMMENT: comment [b3DynamicBvh.cpp <635:1 635:3>]
COMMENT: comment [b3DynamicBvh.cpp <649:1 649:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_ENABLE_BENCHMARK [b3DynamicBvh.cpp <650:5 650:28>]
SYMBOL_FUNCTION int b3GetVersion() [b3Scalar.h <34:1 <34:12 34:23> 37:1>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE int b3GetVersion() -> int [b3Scalar.h <34:8 34:10>]
LOCAL_SYMBOL: b3Scalar.h<35:1> [b3Scalar.h <35:1 35:1>]
LOCAL_SYMBOL: b3Scalar.h<35:1> [b3Scalar.h <37:1 37:1>]
SYMBOL_FUNCTION void b3EnterProfileZone(const char *) [b3Logging.h <23:6 23:23>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3EnterProfileZone(const char *) -> void [b3Logging.h <23:1 23:4>]
LOCAL_SYMBOL: b3Logging.h<23:37> [b3Logging.h <23:37 23:40>]
SYMBOL_BUILTIN_TYPE char
REFERENCE_TYPE_USAGE void b3EnterProfileZone(const char *) -> char [b3Logging.h <23:31 23:34>]
SYMBOL_FUNCTION void b3LeaveProfileZone() [b3Logging.h <24:6 24:23>]
REFERENCE_TYPE_USAGE void b3LeaveProfileZone() -> void [b3Logging.h <24:1 24:4>]
SYMBOL_CLASS b3ProfileZone [b3Logging.h <27:1 <27:7 27:19> 39:1>]
LOCAL_SYMBOL: b3Logging.h<28:1> [b3Logging.h <28:1 28:1>]
LOCAL_SYMBOL: b3Logging.h<28:1> [b3Logging.h <39:1 39:1>]
SYMBOL_METHOD public void b3ProfileZone::b3ProfileZone(const char *) [b3Logging.h <30:2 <30:2 30:14> 33:2>]
LOCAL_SYMBOL: b3Logging.h<30:28> [b3Logging.h <30:28 30:31>]
REFERENCE_TYPE_USAGE void b3ProfileZone::b3ProfileZone(const char *) -> char [b3Logging.h <30:22 30:25>]
LOCAL_SYMBOL: b3Logging.h<31:2> [b3Logging.h <31:2 31:2>]
LOCAL_SYMBOL: b3Logging.h<31:2> [b3Logging.h <33:2 33:2>]
SYMBOL_FUNCTION void b3EnterProfileZone(const char *)
REFERENCE_CALL void b3ProfileZone::b3ProfileZone(const char *) -> void b3EnterProfileZone(const char *) [b3Logging.h <32:3 32:20>]
LOCAL_SYMBOL: b3Logging.h<30:28> [b3Logging.h <32:23 32:26>]
SYMBOL_METHOD public void b3ProfileZone::~b3ProfileZone() [b3Logging.h <35:2 <35:2 35:15> 38:2>]
LOCAL_SYMBOL: b3Logging.h<36:2> [b3Logging.h <36:2 36:2>]
LOCAL_SYMBOL: b3Logging.h<36:2> [b3Logging.h <38:2 38:2>]
SYMBOL_FUNCTION void b3LeaveProfileZone()
REFERENCE_CALL void b3ProfileZone::~b3ProfileZone() -> void b3LeaveProfileZone() [b3Logging.h <37:3 37:20>]
SYMBOL_TYPEDEF b3PrintfFunc [b3Logging.h <53:15 53:26>]
REFERENCE_TYPE_USAGE b3PrintfFunc -> void [b3Logging.h <53:9 53:12>]
LOCAL_SYMBOL: b3Logging.h<53:41> [b3Logging.h <53:41 53:43>]
REFERENCE_TYPE_USAGE b3PrintfFunc -> char [b3Logging.h <53:35 53:38>]
SYMBOL_TYPEDEF b3WarningMessageFunc [b3Logging.h <54:15 54:34>]
REFERENCE_TYPE_USAGE b3WarningMessageFunc -> void [b3Logging.h <54:9 54:12>]
LOCAL_SYMBOL: b3Logging.h<54:49> [b3Logging.h <54:49 54:51>]
REFERENCE_TYPE_USAGE b3WarningMessageFunc -> char [b3Logging.h <54:43 54:46>]
SYMBOL_TYPEDEF b3ErrorMessageFunc [b3Logging.h <55:15 55:32>]
REFERENCE_TYPE_USAGE b3ErrorMessageFunc -> void [b3Logging.h <55:9 55:12>]
LOCAL_SYMBOL: b3Logging.h<55:47> [b3Logging.h <55:47 55:49>]
REFERENCE_TYPE_USAGE b3ErrorMessageFunc -> char [b3Logging.h <55:41 55:44>]
SYMBOL_TYPEDEF b3EnterProfileZoneFunc [b3Logging.h <56:15 56:36>]
REFERENCE_TYPE_USAGE b3EnterProfileZoneFunc -> void [b3Logging.h <56:9 56:12>]
LOCAL_SYMBOL: b3Logging.h<56:51> [b3Logging.h <56:51 56:53>]
REFERENCE_TYPE_USAGE b3EnterProfileZoneFunc -> char [b3Logging.h <56:45 56:48>]
SYMBOL_TYPEDEF b3LeaveProfileZoneFunc [b3Logging.h <57:15 57:36>]
REFERENCE_TYPE_USAGE b3LeaveProfileZoneFunc -> void [b3Logging.h <57:9 57:12>]
SYMBOL_FUNCTION void b3SetCustomPrintfFunc(b3PrintfFunc *) [b3Logging.h <60:6 60:26>]
REFERENCE_TYPE_USAGE void b3SetCustomPrintfFunc(b3PrintfFunc *) -> void [b3Logging.h <60:1 60:4>]
LOCAL_SYMBOL: b3Logging.h<60:42> [b3Logging.h <60:42 60:51>]
REFERENCE_TYPE_USAGE void b3SetCustomPrintfFunc(b3PrintfFunc *) -> b3PrintfFunc [b3Logging.h <60:28 60:39>]
SYMBOL_FUNCTION void b3SetCustomWarningMessageFunc(b3WarningMessageFunc *) [b3Logging.h <61:6 61:34>]
REFERENCE_TYPE_USAGE void b3SetCustomWarningMessageFunc(b3WarningMessageFunc *) -> void [b3Logging.h <61:1 61:4>]
LOCAL_SYMBOL: b3Logging.h<61:58> [b3Logging.h <61:58 61:71>]
REFERENCE_TYPE_USAGE void b3SetCustomWarningMessageFunc(b3WarningMessageFunc *) -> b3WarningMessageFunc [b3Logging.h <61:36 61:55>]
SYMBOL_FUNCTION void b3SetCustomErrorMessageFunc(b3ErrorMessageFunc *) [b3Logging.h <62:6 62:32>]
REFERENCE_TYPE_USAGE void b3SetCustomErrorMessageFunc(b3ErrorMessageFunc *) -> void [b3Logging.h <62:1 62:4>]
LOCAL_SYMBOL: b3Logging.h<62:54> [b3Logging.h <62:54 62:65>]
REFERENCE_TYPE_USAGE void b3SetCustomErrorMessageFunc(b3ErrorMessageFunc *) -> b3ErrorMessageFunc [b3Logging.h <62:34 62:51>]
SYMBOL_FUNCTION void b3SetCustomEnterProfileZoneFunc(b3EnterProfileZoneFunc *) [b3Logging.h <65:6 65:36>]
REFERENCE_TYPE_USAGE void b3SetCustomEnterProfileZoneFunc(b3EnterProfileZoneFunc *) -> void [b3Logging.h <65:1 65:4>]
LOCAL_SYMBOL: b3Logging.h<65:62> [b3Logging.h <65:62 65:70>]
REFERENCE_TYPE_USAGE void b3SetCustomEnterProfileZoneFunc(b3EnterProfileZoneFunc *) -> b3EnterProfileZoneFunc [b3Logging.h <65:38 65:59>]
SYMBOL_FUNCTION void b3SetCustomLeaveProfileZoneFunc(b3LeaveProfileZoneFunc *) [b3Logging.h <66:6 66:36>]
REFERENCE_TYPE_USAGE void b3SetCustomLeaveProfileZoneFunc(b3LeaveProfileZoneFunc *) -> void [b3Logging.h <66:1 66:4>]
LOCAL_SYMBOL: b3Logging.h<66:62> [b3Logging.h <66:62 66:70>]
REFERENCE_TYPE_USAGE void b3SetCustomLeaveProfileZoneFunc(b3LeaveProfileZoneFunc *) -> b3LeaveProfileZoneFunc [b3Logging.h <66:38 66:59>]
SYMBOL_FUNCTION void b3OutputPrintfVarArgsInternal(const char *) [b3Logging.h <69:6 69:34>]
REFERENCE_TYPE_USAGE void b3OutputPrintfVarArgsInternal(const char *) -> void [b3Logging.h <69:1 69:4>]
LOCAL_SYMBOL: b3Logging.h<69:48> [b3Logging.h <69:48 69:50>]
REFERENCE_TYPE_USAGE void b3OutputPrintfVarArgsInternal(const char *) -> char [b3Logging.h <69:42 69:45>]
SYMBOL_FUNCTION void b3OutputWarningMessageVarArgsInternal(const char *) [b3Logging.h <70:6 70:42>]
REFERENCE_TYPE_USAGE void b3OutputWarningMessageVarArgsInternal(const char *) -> void [b3Logging.h <70:1 70:4>]
LOCAL_SYMBOL: b3Logging.h<70:56> [b3Logging.h <70:56 70:58>]
REFERENCE_TYPE_USAGE void b3OutputWarningMessageVarArgsInternal(const char *) -> char [b3Logging.h <70:50 70:53>]
SYMBOL_FUNCTION void b3OutputErrorMessageVarArgsInternal(const char *) [b3Logging.h <71:6 71:40>]
REFERENCE_TYPE_USAGE void b3OutputErrorMessageVarArgsInternal(const char *) -> void [b3Logging.h <71:1 71:4>]
LOCAL_SYMBOL: b3Logging.h<71:54> [b3Logging.h <71:54 71:56>]
REFERENCE_TYPE_USAGE void b3OutputErrorMessageVarArgsInternal(const char *) -> char [b3Logging.h <71:48 71:51>]
SYMBOL_TYPEDEF b3Scalar [b3Scalar.h <263:15 263:22>]
SYMBOL_BUILTIN_TYPE float
REFERENCE_TYPE_USAGE b3Scalar -> float [b3Scalar.h <263:9 263:13>]
SYMBOL_TYPEDEF b3SimdFloat4 [b3Scalar.h <269:16 269:27>]
REFERENCE_TYPE_USAGE b3SimdFloat4 -> __m128 [b3Scalar.h <269:9 269:14>]
SYMBOL_FUNCTION b3Scalar b3Sqrt(b3Scalar) [b3Scalar.h <361:1 <361:26 361:31> 380:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Sqrt(b3Scalar) -> b3Scalar [b3Scalar.h <361:17 361:24>]
LOCAL_SYMBOL: b3Scalar.h<361:42> [b3Scalar.h <361:42 361:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Sqrt(b3Scalar) -> b3Scalar [b3Scalar.h <361:33 361:40>]
LOCAL_SYMBOL: b3Scalar.h<362:1> [b3Scalar.h <362:1 362:1>]
LOCAL_SYMBOL: b3Scalar.h<362:1> [b3Scalar.h <380:1 380:1>]
SYMBOL_FUNCTION float sqrtf(float)
REFERENCE_CALL b3Scalar b3Sqrt(b3Scalar) -> float sqrtf(float) [b3Scalar.h <378:9 378:13>]
LOCAL_SYMBOL: b3Scalar.h<361:42> [b3Scalar.h <378:15 378:15>]
SYMBOL_FUNCTION b3Scalar b3Fabs(b3Scalar) [b3Scalar.h <381:1 <381:26 381:31> 381:64>]
REFERENCE_TYPE_USAGE b3Scalar b3Fabs(b3Scalar) -> b3Scalar [b3Scalar.h <381:17 381:24>]
LOCAL_SYMBOL: b3Scalar.h<381:42> [b3Scalar.h <381:42 381:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Fabs(b3Scalar) -> b3Scalar [b3Scalar.h <381:33 381:40>]
LOCAL_SYMBOL: b3Scalar.h<381:45> [b3Scalar.h <381:45 381:45>]
LOCAL_SYMBOL: b3Scalar.h<381:45> [b3Scalar.h <381:64 381:64>]
SYMBOL_FUNCTION float fabsf(float)
REFERENCE_CALL b3Scalar b3Fabs(b3Scalar) -> float fabsf(float) [b3Scalar.h <381:54 381:58>]
LOCAL_SYMBOL: b3Scalar.h<381:42> [b3Scalar.h <381:60 381:60>]
SYMBOL_FUNCTION b3Scalar b3Cos(b3Scalar) [b3Scalar.h <382:1 <382:26 382:30> 382:62>]
REFERENCE_TYPE_USAGE b3Scalar b3Cos(b3Scalar) -> b3Scalar [b3Scalar.h <382:17 382:24>]
LOCAL_SYMBOL: b3Scalar.h<382:41> [b3Scalar.h <382:41 382:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Cos(b3Scalar) -> b3Scalar [b3Scalar.h <382:32 382:39>]
LOCAL_SYMBOL: b3Scalar.h<382:44> [b3Scalar.h <382:44 382:44>]
LOCAL_SYMBOL: b3Scalar.h<382:44> [b3Scalar.h <382:62 382:62>]
SYMBOL_FUNCTION float cosf(float)
REFERENCE_CALL b3Scalar b3Cos(b3Scalar) -> float cosf(float) [b3Scalar.h <382:53 382:56>]
LOCAL_SYMBOL: b3Scalar.h<382:41> [b3Scalar.h <382:58 382:58>]
SYMBOL_FUNCTION b3Scalar b3Sin(b3Scalar) [b3Scalar.h <383:1 <383:26 383:30> 383:62>]
REFERENCE_TYPE_USAGE b3Scalar b3Sin(b3Scalar) -> b3Scalar [b3Scalar.h <383:17 383:24>]
LOCAL_SYMBOL: b3Scalar.h<383:41> [b3Scalar.h <383:41 383:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Sin(b3Scalar) -> b3Scalar [b3Scalar.h <383:32 383:39>]
LOCAL_SYMBOL: b3Scalar.h<383:44> [b3Scalar.h <383:44 383:44>]
LOCAL_SYMBOL: b3Scalar.h<383:44> [b3Scalar.h <383:62 383:62>]
SYMBOL_FUNCTION float sinf(float)
REFERENCE_CALL b3Scalar b3Sin(b3Scalar) -> float sinf(float) [b3Scalar.h <383:53 383:56>]
LOCAL_SYMBOL: b3Scalar.h<383:41> [b3Scalar.h <383:58 383:58>]
SYMBOL_FUNCTION b3Scalar b3Tan(b3Scalar) [b3Scalar.h <384:1 <384:26 384:30> 384:62>]
REFERENCE_TYPE_USAGE b3Scalar b3Tan(b3Scalar) -> b3Scalar [b3Scalar.h <384:17 384:24>]
LOCAL_SYMBOL: b3Scalar.h<384:41> [b3Scalar.h <384:41 384:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Tan(b3Scalar) -> b3Scalar [b3Scalar.h <384:32 384:39>]
LOCAL_SYMBOL: b3Scalar.h<384:44> [b3Scalar.h <384:44 384:44>]
LOCAL_SYMBOL: b3Scalar.h<384:44> [b3Scalar.h <384:62 384:62>]
SYMBOL_FUNCTION float tanf(float)
REFERENCE_CALL b3Scalar b3Tan(b3Scalar) -> float tanf(float) [b3Scalar.h <384:53 384:56>]
LOCAL_SYMBOL: b3Scalar.h<384:41> [b3Scalar.h <384:58 384:58>]
SYMBOL_FUNCTION b3Scalar b3Acos(b3Scalar) [b3Scalar.h <385:1 <385:26 385:31> 391:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <385:17 385:24>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <385:42 385:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <385:33 385:40>]
LOCAL_SYMBOL: b3Scalar.h<385:45> [b3Scalar.h <385:45 385:45>]
LOCAL_SYMBOL: b3Scalar.h<385:45> [b3Scalar.h <391:1 391:1>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <386:6 386:6>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <386:8 386:15>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <387:3 387:3>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <387:5 387:12>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <388:6 388:6>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <388:8 388:15>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <389:3 389:3>]
REFERENCE_TYPE_USAGE b3Scalar b3Acos(b3Scalar) -> b3Scalar [b3Scalar.h <389:5 389:12>]
SYMBOL_FUNCTION float acosf(float)
REFERENCE_CALL b3Scalar b3Acos(b3Scalar) -> float acosf(float) [b3Scalar.h <390:9 390:13>]
LOCAL_SYMBOL: b3Scalar.h<385:42> [b3Scalar.h <390:15 390:15>]
SYMBOL_FUNCTION b3Scalar b3Asin(b3Scalar) [b3Scalar.h <392:1 <392:26 392:31> 398:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <392:17 392:24>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <392:42 392:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <392:33 392:40>]
LOCAL_SYMBOL: b3Scalar.h<392:45> [b3Scalar.h <392:45 392:45>]
LOCAL_SYMBOL: b3Scalar.h<392:45> [b3Scalar.h <398:1 398:1>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <393:6 393:6>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <393:8 393:15>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <394:3 394:3>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <394:5 394:12>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <395:6 395:6>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <395:8 395:15>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <396:3 396:3>]
REFERENCE_TYPE_USAGE b3Scalar b3Asin(b3Scalar) -> b3Scalar [b3Scalar.h <396:5 396:12>]
SYMBOL_FUNCTION float asinf(float)
REFERENCE_CALL b3Scalar b3Asin(b3Scalar) -> float asinf(float) [b3Scalar.h <397:9 397:13>]
LOCAL_SYMBOL: b3Scalar.h<392:42> [b3Scalar.h <397:15 397:15>]
SYMBOL_FUNCTION b3Scalar b3Atan(b3Scalar) [b3Scalar.h <399:1 <399:26 399:31> 399:64>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan(b3Scalar) -> b3Scalar [b3Scalar.h <399:17 399:24>]
LOCAL_SYMBOL: b3Scalar.h<399:42> [b3Scalar.h <399:42 399:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan(b3Scalar) -> b3Scalar [b3Scalar.h <399:33 399:40>]
LOCAL_SYMBOL: b3Scalar.h<399:45> [b3Scalar.h <399:45 399:45>]
LOCAL_SYMBOL: b3Scalar.h<399:45> [b3Scalar.h <399:64 399:64>]
SYMBOL_FUNCTION float atanf(float)
REFERENCE_CALL b3Scalar b3Atan(b3Scalar) -> float atanf(float) [b3Scalar.h <399:54 399:58>]
LOCAL_SYMBOL: b3Scalar.h<399:42> [b3Scalar.h <399:60 399:60>]
SYMBOL_FUNCTION b3Scalar b3Atan2(b3Scalar, b3Scalar) [b3Scalar.h <400:1 <400:26 400:32> 400:81>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <400:17 400:24>]
LOCAL_SYMBOL: b3Scalar.h<400:43> [b3Scalar.h <400:43 400:43>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <400:34 400:41>]
LOCAL_SYMBOL: b3Scalar.h<400:55> [b3Scalar.h <400:55 400:55>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <400:46 400:53>]
LOCAL_SYMBOL: b3Scalar.h<400:58> [b3Scalar.h <400:58 400:58>]
LOCAL_SYMBOL: b3Scalar.h<400:58> [b3Scalar.h <400:81 400:81>]
SYMBOL_FUNCTION float atan2f(float, float)
REFERENCE_CALL b3Scalar b3Atan2(b3Scalar, b3Scalar) -> float atan2f(float, float) [b3Scalar.h <400:67 400:72>]
LOCAL_SYMBOL: b3Scalar.h<400:43> [b3Scalar.h <400:74 400:74>]
LOCAL_SYMBOL: b3Scalar.h<400:55> [b3Scalar.h <400:77 400:77>]
SYMBOL_FUNCTION b3Scalar b3Exp(b3Scalar) [b3Scalar.h <401:1 <401:26 401:30> 401:62>]
REFERENCE_TYPE_USAGE b3Scalar b3Exp(b3Scalar) -> b3Scalar [b3Scalar.h <401:17 401:24>]
LOCAL_SYMBOL: b3Scalar.h<401:41> [b3Scalar.h <401:41 401:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Exp(b3Scalar) -> b3Scalar [b3Scalar.h <401:32 401:39>]
LOCAL_SYMBOL: b3Scalar.h<401:44> [b3Scalar.h <401:44 401:44>]
LOCAL_SYMBOL: b3Scalar.h<401:44> [b3Scalar.h <401:62 401:62>]
SYMBOL_FUNCTION float expf(float)
REFERENCE_CALL b3Scalar b3Exp(b3Scalar) -> float expf(float) [b3Scalar.h <401:53 401:56>]
LOCAL_SYMBOL: b3Scalar.h<401:41> [b3Scalar.h <401:58 401:58>]
SYMBOL_FUNCTION b3Scalar b3Log(b3Scalar) [b3Scalar.h <402:1 <402:26 402:30> 402:62>]
REFERENCE_TYPE_USAGE b3Scalar b3Log(b3Scalar) -> b3Scalar [b3Scalar.h <402:17 402:24>]
LOCAL_SYMBOL: b3Scalar.h<402:41> [b3Scalar.h <402:41 402:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Log(b3Scalar) -> b3Scalar [b3Scalar.h <402:32 402:39>]
LOCAL_SYMBOL: b3Scalar.h<402:44> [b3Scalar.h <402:44 402:44>]
LOCAL_SYMBOL: b3Scalar.h<402:44> [b3Scalar.h <402:62 402:62>]
SYMBOL_FUNCTION float logf(float)
REFERENCE_CALL b3Scalar b3Log(b3Scalar) -> float logf(float) [b3Scalar.h <402:53 402:56>]
LOCAL_SYMBOL: b3Scalar.h<402:41> [b3Scalar.h <402:58 402:58>]
SYMBOL_FUNCTION b3Scalar b3Pow(b3Scalar, b3Scalar) [b3Scalar.h <403:1 <403:26 403:30> 403:75>]
REFERENCE_TYPE_USAGE b3Scalar b3Pow(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <403:17 403:24>]
LOCAL_SYMBOL: b3Scalar.h<403:41> [b3Scalar.h <403:41 403:41>]
REFERENCE_TYPE_USAGE b3Scalar b3Pow(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <403:32 403:39>]
LOCAL_SYMBOL: b3Scalar.h<403:52> [b3Scalar.h <403:52 403:52>]
REFERENCE_TYPE_USAGE b3Scalar b3Pow(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <403:43 403:50>]
LOCAL_SYMBOL: b3Scalar.h<403:55> [b3Scalar.h <403:55 403:55>]
LOCAL_SYMBOL: b3Scalar.h<403:55> [b3Scalar.h <403:75 403:75>]
SYMBOL_FUNCTION float powf(float, float)
REFERENCE_CALL b3Scalar b3Pow(b3Scalar, b3Scalar) -> float powf(float, float) [b3Scalar.h <403:64 403:67>]
LOCAL_SYMBOL: b3Scalar.h<403:41> [b3Scalar.h <403:69 403:69>]
LOCAL_SYMBOL: b3Scalar.h<403:52> [b3Scalar.h <403:71 403:71>]
SYMBOL_FUNCTION b3Scalar b3Fmod(b3Scalar, b3Scalar) [b3Scalar.h <404:1 <404:26 404:31> 404:77>]
REFERENCE_TYPE_USAGE b3Scalar b3Fmod(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <404:17 404:24>]
LOCAL_SYMBOL: b3Scalar.h<404:42> [b3Scalar.h <404:42 404:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Fmod(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <404:33 404:40>]
LOCAL_SYMBOL: b3Scalar.h<404:53> [b3Scalar.h <404:53 404:53>]
REFERENCE_TYPE_USAGE b3Scalar b3Fmod(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <404:44 404:51>]
LOCAL_SYMBOL: b3Scalar.h<404:56> [b3Scalar.h <404:56 404:56>]
LOCAL_SYMBOL: b3Scalar.h<404:56> [b3Scalar.h <404:77 404:77>]
SYMBOL_FUNCTION float fmodf(float, float)
REFERENCE_CALL b3Scalar b3Fmod(b3Scalar, b3Scalar) -> float fmodf(float, float) [b3Scalar.h <404:65 404:69>]
LOCAL_SYMBOL: b3Scalar.h<404:42> [b3Scalar.h <404:71 404:71>]
LOCAL_SYMBOL: b3Scalar.h<404:53> [b3Scalar.h <404:73 404:73>]
SYMBOL_FUNCTION b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) [b3Scalar.h <426:1 <426:26 426:36> 440:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <426:17 426:24>]
LOCAL_SYMBOL: b3Scalar.h<426:47> [b3Scalar.h <426:47 426:47>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <426:38 426:45>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <426:59 426:59>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <426:50 426:57>]
LOCAL_SYMBOL: b3Scalar.h<427:1> [b3Scalar.h <427:1 427:1>]
LOCAL_SYMBOL: b3Scalar.h<427:1> [b3Scalar.h <440:1 440:1>]
LOCAL_SYMBOL: b3Scalar.h<428:11> [b3Scalar.h <428:11 428:17>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <428:2 428:9>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <428:21 428:25>]
LOCAL_SYMBOL: b3Scalar.h<429:11> [b3Scalar.h <429:11 429:17>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <429:2 429:9>]
LOCAL_SYMBOL: b3Scalar.h<428:11> [b3Scalar.h <429:28 429:34>]
LOCAL_SYMBOL: b3Scalar.h<430:11> [b3Scalar.h <430:11 430:15>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <430:2 430:9>]
SYMBOL_FUNCTION b3Scalar b3Fabs(b3Scalar)
REFERENCE_CALL b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar b3Fabs(b3Scalar) [b3Scalar.h <430:19 430:24>]
LOCAL_SYMBOL: b3Scalar.h<426:47> [b3Scalar.h <430:26 430:26>]
LOCAL_SYMBOL: b3Scalar.h<431:11> [b3Scalar.h <431:11 431:15>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <431:2 431:9>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <432:6 432:6>]
LOCAL_SYMBOL: b3Scalar.h<432:17> [b3Scalar.h <432:17 432:17>]
LOCAL_SYMBOL: b3Scalar.h<432:17> [b3Scalar.h <435:2 435:2>]
LOCAL_SYMBOL: b3Scalar.h<433:12> [b3Scalar.h <433:12 433:12>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <433:3 433:10>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <433:17 433:17>]
LOCAL_SYMBOL: b3Scalar.h<430:11> [b3Scalar.h <433:21 433:25>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <433:31 433:31>]
LOCAL_SYMBOL: b3Scalar.h<430:11> [b3Scalar.h <433:35 433:39>]
LOCAL_SYMBOL: b3Scalar.h<431:11> [b3Scalar.h <434:3 434:7>]
LOCAL_SYMBOL: b3Scalar.h<428:11> [b3Scalar.h <434:11 434:17>]
LOCAL_SYMBOL: b3Scalar.h<428:11> [b3Scalar.h <434:21 434:27>]
LOCAL_SYMBOL: b3Scalar.h<433:12> [b3Scalar.h <434:31 434:31>]
LOCAL_SYMBOL: b3Scalar.h<435:9> [b3Scalar.h <435:9 435:9>]
LOCAL_SYMBOL: b3Scalar.h<435:9> [b3Scalar.h <438:2 438:2>]
LOCAL_SYMBOL: b3Scalar.h<436:12> [b3Scalar.h <436:12 436:12>]
REFERENCE_TYPE_USAGE b3Scalar b3Atan2Fast(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <436:3 436:10>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <436:17 436:17>]
LOCAL_SYMBOL: b3Scalar.h<430:11> [b3Scalar.h <436:21 436:25>]
LOCAL_SYMBOL: b3Scalar.h<430:11> [b3Scalar.h <436:31 436:35>]
LOCAL_SYMBOL: b3Scalar.h<426:59> [b3Scalar.h <436:39 436:39>]
LOCAL_SYMBOL: b3Scalar.h<431:11> [b3Scalar.h <437:3 437:7>]
LOCAL_SYMBOL: b3Scalar.h<429:11> [b3Scalar.h <437:11 437:17>]
LOCAL_SYMBOL: b3Scalar.h<428:11> [b3Scalar.h <437:21 437:27>]
LOCAL_SYMBOL: b3Scalar.h<436:12> [b3Scalar.h <437:31 437:31>]
LOCAL_SYMBOL: b3Scalar.h<426:47> [b3Scalar.h <439:10 439:10>]
LOCAL_SYMBOL: b3Scalar.h<431:11> [b3Scalar.h <439:23 439:27>]
LOCAL_SYMBOL: b3Scalar.h<431:11> [b3Scalar.h <439:31 439:35>]
SYMBOL_FUNCTION bool b3FuzzyZero(b3Scalar) [b3Scalar.h <442:1 <442:27 442:37> 442:84>]
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE bool b3FuzzyZero(b3Scalar) -> bool [b3Scalar.h <442:17 442:20>]
LOCAL_SYMBOL: b3Scalar.h<442:48> [b3Scalar.h <442:48 442:48>]
REFERENCE_TYPE_USAGE bool b3FuzzyZero(b3Scalar) -> b3Scalar [b3Scalar.h <442:39 442:46>]
LOCAL_SYMBOL: b3Scalar.h<442:51> [b3Scalar.h <442:51 442:51>]
LOCAL_SYMBOL: b3Scalar.h<442:51> [b3Scalar.h <442:84 442:84>]
REFERENCE_CALL bool b3FuzzyZero(b3Scalar) -> b3Scalar b3Fabs(b3Scalar) [b3Scalar.h <442:60 442:65>]
LOCAL_SYMBOL: b3Scalar.h<442:48> [b3Scalar.h <442:67 442:67>]
SYMBOL_FUNCTION bool b3Equal(b3Scalar, b3Scalar) [b3Scalar.h <444:1 <444:22 444:28> 446:1>]
REFERENCE_TYPE_USAGE bool b3Equal(b3Scalar, b3Scalar) -> bool [b3Scalar.h <444:17 444:20>]
LOCAL_SYMBOL: b3Scalar.h<444:39> [b3Scalar.h <444:39 444:39>]
REFERENCE_TYPE_USAGE bool b3Equal(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <444:30 444:37>]
LOCAL_SYMBOL: b3Scalar.h<444:51> [b3Scalar.h <444:51 444:53>]
REFERENCE_TYPE_USAGE bool b3Equal(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <444:42 444:49>]
LOCAL_SYMBOL: b3Scalar.h<444:56> [b3Scalar.h <444:56 444:56>]
LOCAL_SYMBOL: b3Scalar.h<444:56> [b3Scalar.h <446:1 446:1>]
LOCAL_SYMBOL: b3Scalar.h<444:39> [b3Scalar.h <445:12 445:12>]
LOCAL_SYMBOL: b3Scalar.h<444:51> [b3Scalar.h <445:18 445:20>]
LOCAL_SYMBOL: b3Scalar.h<444:39> [b3Scalar.h <445:29 445:29>]
LOCAL_SYMBOL: b3Scalar.h<444:51> [b3Scalar.h <445:35 445:37>]
SYMBOL_FUNCTION bool b3GreaterEqual(b3Scalar, b3Scalar) [b3Scalar.h <447:1 <447:22 447:35> 449:1>]
REFERENCE_TYPE_USAGE bool b3GreaterEqual(b3Scalar, b3Scalar) -> bool [b3Scalar.h <447:17 447:20>]
LOCAL_SYMBOL: b3Scalar.h<447:47> [b3Scalar.h <447:47 447:47>]
REFERENCE_TYPE_USAGE bool b3GreaterEqual(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <447:38 447:45>]
LOCAL_SYMBOL: b3Scalar.h<447:59> [b3Scalar.h <447:59 447:61>]
REFERENCE_TYPE_USAGE bool b3GreaterEqual(b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <447:50 447:57>]
LOCAL_SYMBOL: b3Scalar.h<447:64> [b3Scalar.h <447:64 447:64>]
LOCAL_SYMBOL: b3Scalar.h<447:64> [b3Scalar.h <449:1 449:1>]
LOCAL_SYMBOL: b3Scalar.h<447:47> [b3Scalar.h <448:13 448:13>]
LOCAL_SYMBOL: b3Scalar.h<447:59> [b3Scalar.h <448:19 448:21>]
SYMBOL_FUNCTION int b3IsNegative(b3Scalar) [b3Scalar.h <452:1 <452:27 452:38> 454:1>]
REFERENCE_TYPE_USAGE int b3IsNegative(b3Scalar) -> int [b3Scalar.h <452:17 452:19>]
LOCAL_SYMBOL: b3Scalar.h<452:49> [b3Scalar.h <452:49 452:49>]
REFERENCE_TYPE_USAGE int b3IsNegative(b3Scalar) -> b3Scalar [b3Scalar.h <452:40 452:47>]
LOCAL_SYMBOL: b3Scalar.h<452:52> [b3Scalar.h <452:52 452:52>]
LOCAL_SYMBOL: b3Scalar.h<452:52> [b3Scalar.h <454:1 454:1>]
LOCAL_SYMBOL: b3Scalar.h<452:49> [b3Scalar.h <453:12 453:12>]
REFERENCE_TYPE_USAGE int b3IsNegative(b3Scalar) -> b3Scalar [b3Scalar.h <453:16 453:23>]
SYMBOL_FUNCTION b3Scalar b3Radians(b3Scalar) [b3Scalar.h <456:1 <456:26 456:34> 456:78>]
REFERENCE_TYPE_USAGE b3Scalar b3Radians(b3Scalar) -> b3Scalar [b3Scalar.h <456:17 456:24>]
LOCAL_SYMBOL: b3Scalar.h<456:45> [b3Scalar.h <456:45 456:45>]
REFERENCE_TYPE_USAGE b3Scalar b3Radians(b3Scalar) -> b3Scalar [b3Scalar.h <456:36 456:43>]
LOCAL_SYMBOL: b3Scalar.h<456:48> [b3Scalar.h <456:48 456:48>]
LOCAL_SYMBOL: b3Scalar.h<456:48> [b3Scalar.h <456:78 456:78>]
LOCAL_SYMBOL: b3Scalar.h<456:45> [b3Scalar.h <456:57 456:57>]
REFERENCE_TYPE_USAGE b3Scalar b3Radians(b3Scalar) -> b3Scalar [b3Scalar.h <456:61 456:75>]
SYMBOL_FUNCTION b3Scalar b3Degrees(b3Scalar) [b3Scalar.h <457:1 <457:26 457:34> 457:78>]
REFERENCE_TYPE_USAGE b3Scalar b3Degrees(b3Scalar) -> b3Scalar [b3Scalar.h <457:17 457:24>]
LOCAL_SYMBOL: b3Scalar.h<457:45> [b3Scalar.h <457:45 457:45>]
REFERENCE_TYPE_USAGE b3Scalar b3Degrees(b3Scalar) -> b3Scalar [b3Scalar.h <457:36 457:43>]
LOCAL_SYMBOL: b3Scalar.h<457:48> [b3Scalar.h <457:48 457:48>]
LOCAL_SYMBOL: b3Scalar.h<457:48> [b3Scalar.h <457:78 457:78>]
LOCAL_SYMBOL: b3Scalar.h<457:45> [b3Scalar.h <457:57 457:57>]
REFERENCE_TYPE_USAGE b3Scalar b3Degrees(b3Scalar) -> b3Scalar [b3Scalar.h <457:61 457:75>]
SYMBOL_FUNCTION b3Scalar b3Fsel(b3Scalar, b3Scalar, b3Scalar) [b3Scalar.h <462:1 <462:26 462:31> 465:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Fsel(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <462:17 462:24>]
LOCAL_SYMBOL: b3Scalar.h<462:42> [b3Scalar.h <462:42 462:42>]
REFERENCE_TYPE_USAGE b3Scalar b3Fsel(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <462:33 462:40>]
LOCAL_SYMBOL: b3Scalar.h<462:54> [b3Scalar.h <462:54 462:54>]
REFERENCE_TYPE_USAGE b3Scalar b3Fsel(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <462:45 462:52>]
LOCAL_SYMBOL: b3Scalar.h<462:66> [b3Scalar.h <462:66 462:66>]
REFERENCE_TYPE_USAGE b3Scalar b3Fsel(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Scalar.h <462:57 462:64>]
LOCAL_SYMBOL: b3Scalar.h<463:1> [b3Scalar.h <463:1 463:1>]
LOCAL_SYMBOL: b3Scalar.h<463:1> [b3Scalar.h <465:1 465:1>]
LOCAL_SYMBOL: b3Scalar.h<462:42> [b3Scalar.h <464:9 464:9>]
LOCAL_SYMBOL: b3Scalar.h<462:54> [b3Scalar.h <464:18 464:18>]
LOCAL_SYMBOL: b3Scalar.h<462:66> [b3Scalar.h <464:22 464:22>]
SYMBOL_FUNCTION bool b3MachineIsLittleEndian() [b3Scalar.h <470:1 <470:22 470:44> 478:1>]
REFERENCE_TYPE_USAGE bool b3MachineIsLittleEndian() -> bool [b3Scalar.h <470:17 470:20>]
LOCAL_SYMBOL: b3Scalar.h<471:1> [b3Scalar.h <471:1 471:1>]
LOCAL_SYMBOL: b3Scalar.h<471:1> [b3Scalar.h <478:1 478:1>]
LOCAL_SYMBOL: b3Scalar.h<472:13> [b3Scalar.h <472:13 472:13>]
SYMBOL_BUILTIN_TYPE long
REFERENCE_TYPE_USAGE bool b3MachineIsLittleEndian() -> long [b3Scalar.h <472:4 472:7>]
LOCAL_SYMBOL: b3Scalar.h<473:16> [b3Scalar.h <473:16 473:16>]
REFERENCE_TYPE_USAGE bool b3MachineIsLittleEndian() -> char [b3Scalar.h <473:10 473:13>]
REFERENCE_TYPE_USAGE bool b3MachineIsLittleEndian() -> char [b3Scalar.h <473:27 473:30>]
LOCAL_SYMBOL: b3Scalar.h<472:13> [b3Scalar.h <473:36 473:36>]
LOCAL_SYMBOL: b3Scalar.h<473:16> [b3Scalar.h <474:8 474:8>]
SYMBOL_FUNCTION unsigned int b3Select(unsigned int, unsigned int, unsigned int) [b3Scalar.h <484:1 <484:26 484:33> 493:1>]
SYMBOL_BUILTIN_TYPE unsigned int
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <484:17 484:24>]
LOCAL_SYMBOL: b3Scalar.h<484:44> [b3Scalar.h <484:44 484:52>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <484:35 484:42>]
LOCAL_SYMBOL: b3Scalar.h<484:64> [b3Scalar.h <484:64 484:86>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <484:55 484:62>]
LOCAL_SYMBOL: b3Scalar.h<484:98> [b3Scalar.h <484:98 484:117>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <484:89 484:96>]
LOCAL_SYMBOL: b3Scalar.h<485:1> [b3Scalar.h <485:1 485:1>]
LOCAL_SYMBOL: b3Scalar.h<485:1> [b3Scalar.h <493:1 493:1>]
LOCAL_SYMBOL: b3Scalar.h<490:14> [b3Scalar.h <490:14 490:19>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <490:5 490:12>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <490:24 490:31>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> int [b3Scalar.h <490:36 490:38>]
LOCAL_SYMBOL: b3Scalar.h<484:44> [b3Scalar.h <490:40 490:48>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> int [b3Scalar.h <490:54 490:56>]
LOCAL_SYMBOL: b3Scalar.h<484:44> [b3Scalar.h <490:58 490:66>]
LOCAL_SYMBOL: b3Scalar.h<491:14> [b3Scalar.h <491:14 491:20>]
REFERENCE_TYPE_USAGE unsigned int b3Select(unsigned int, unsigned int, unsigned int) -> unsigned int [b3Scalar.h <491:5 491:12>]
LOCAL_SYMBOL: b3Scalar.h<490:14> [b3Scalar.h <491:25 491:30>]
LOCAL_SYMBOL: b3Scalar.h<484:64> [b3Scalar.h <492:14 492:36>]
LOCAL_SYMBOL: b3Scalar.h<490:14> [b3Scalar.h <492:40 492:45>]
LOCAL_SYMBOL: b3Scalar.h<484:98> [b3Scalar.h <492:51 492:70>]
LOCAL_SYMBOL: b3Scalar.h<491:14> [b3Scalar.h <492:74 492:80>]
SYMBOL_FUNCTION int b3Select(unsigned int, int, int) [b3Scalar.h <494:1 <494:21 494:28> 499:1>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <494:17 494:19>]
LOCAL_SYMBOL: b3Scalar.h<494:39> [b3Scalar.h <494:39 494:47>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> unsigned int [b3Scalar.h <494:30 494:37>]
LOCAL_SYMBOL: b3Scalar.h<494:54> [b3Scalar.h <494:54 494:76>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <494:50 494:52>]
LOCAL_SYMBOL: b3Scalar.h<494:83> [b3Scalar.h <494:83 494:102>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <494:79 494:81>]
LOCAL_SYMBOL: b3Scalar.h<495:1> [b3Scalar.h <495:1 495:1>]
LOCAL_SYMBOL: b3Scalar.h<495:1> [b3Scalar.h <499:1 499:1>]
LOCAL_SYMBOL: b3Scalar.h<496:14> [b3Scalar.h <496:14 496:19>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> unsigned int [b3Scalar.h <496:5 496:12>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> unsigned int [b3Scalar.h <496:24 496:31>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <496:36 496:38>]
LOCAL_SYMBOL: b3Scalar.h<494:39> [b3Scalar.h <496:40 496:48>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <496:54 496:56>]
LOCAL_SYMBOL: b3Scalar.h<494:39> [b3Scalar.h <496:58 496:66>]
LOCAL_SYMBOL: b3Scalar.h<497:14> [b3Scalar.h <497:14 497:20>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> unsigned int [b3Scalar.h <497:5 497:12>]
LOCAL_SYMBOL: b3Scalar.h<496:14> [b3Scalar.h <497:25 497:30>]
REFERENCE_TYPE_USAGE int b3Select(unsigned int, int, int) -> int [b3Scalar.h <498:24 498:26>]
LOCAL_SYMBOL: b3Scalar.h<494:54> [b3Scalar.h <498:30 498:52>]
LOCAL_SYMBOL: b3Scalar.h<496:14> [b3Scalar.h <498:56 498:61>]
LOCAL_SYMBOL: b3Scalar.h<494:83> [b3Scalar.h <498:67 498:86>]
LOCAL_SYMBOL: b3Scalar.h<497:14> [b3Scalar.h <498:90 498:96>]
SYMBOL_FUNCTION float b3Select(unsigned int, float, float) [b3Scalar.h <500:1 <500:23 500:30> 507:1>]
REFERENCE_TYPE_USAGE float b3Select(unsigned int, float, float) -> float [b3Scalar.h <500:17 500:21>]
LOCAL_SYMBOL: b3Scalar.h<500:41> [b3Scalar.h <500:41 500:49>]
REFERENCE_TYPE_USAGE float b3Select(unsigned int, float, float) -> unsigned int [b3Scalar.h <500:32 500:39>]
LOCAL_SYMBOL: b3Scalar.h<500:58> [b3Scalar.h <500:58 500:80>]
REFERENCE_TYPE_USAGE float b3Select(unsigned int, float, float) -> float [b3Scalar.h <500:52 500:56>]
LOCAL_SYMBOL: b3Scalar.h<500:89> [b3Scalar.h <500:89 500:108>]
REFERENCE_TYPE_USAGE float b3Select(unsigned int, float, float) -> float [b3Scalar.h <500:83 500:87>]
LOCAL_SYMBOL: b3Scalar.h<501:1> [b3Scalar.h <501:1 501:1>]
LOCAL_SYMBOL: b3Scalar.h<501:1> [b3Scalar.h <507:1 507:1>]
LOCAL_SYMBOL: b3Scalar.h<500:41> [b3Scalar.h <505:13 505:21>]
LOCAL_SYMBOL: b3Scalar.h<500:58> [b3Scalar.h <505:31 505:53>]
LOCAL_SYMBOL: b3Scalar.h<500:89> [b3Scalar.h <505:57 505:76>]
SYMBOL_TEMPLATE_PARAMETER b3Swap<typename T>::T [b3Scalar.h <509:19 509:19>]
SYMBOL_FUNCTION void b3Swap<typename T>(T &, T &) [b3Scalar.h <509:1 <509:43 509:48> 514:1>]
REFERENCE_TYPE_USAGE void b3Swap<typename T>(T &, T &) -> void [b3Scalar.h <509:38 509:41>]
LOCAL_SYMBOL: b3Scalar.h<509:53> [b3Scalar.h <509:53 509:53>]
REFERENCE_TYPE_USAGE void b3Swap<typename T>(T &, T &) -> b3Swap<typename T>::T [b3Scalar.h <509:50 509:50>]
LOCAL_SYMBOL: b3Scalar.h<509:59> [b3Scalar.h <509:59 509:59>]
REFERENCE_TYPE_USAGE void b3Swap<typename T>(T &, T &) -> b3Swap<typename T>::T [b3Scalar.h <509:56 509:56>]
LOCAL_SYMBOL: b3Scalar.h<510:1> [b3Scalar.h <510:1 510:1>]
LOCAL_SYMBOL: b3Scalar.h<510:1> [b3Scalar.h <514:1 514:1>]
LOCAL_SYMBOL: b3Scalar.h<511:4> [b3Scalar.h <511:4 511:6>]
REFERENCE_TYPE_USAGE void b3Swap<typename T>(T &, T &) -> b3Swap<typename T>::T [b3Scalar.h <511:2 511:2>]
LOCAL_SYMBOL: b3Scalar.h<509:53> [b3Scalar.h <511:10 511:10>]
LOCAL_SYMBOL: b3Scalar.h<509:53> [b3Scalar.h <512:2 512:2>]
LOCAL_SYMBOL: b3Scalar.h<509:59> [b3Scalar.h <512:6 512:6>]
LOCAL_SYMBOL: b3Scalar.h<509:59> [b3Scalar.h <513:2 513:2>]
LOCAL_SYMBOL: b3Scalar.h<511:4> [b3Scalar.h <513:6 513:8>]
SYMBOL_FUNCTION void b3Swap<b3DbvtAabbMm>(b3DbvtAabbMm &, b3DbvtAabbMm &) [b3Scalar.h <509:22 <509:43 509:48> 514:1>]
SYMBOL_FUNCTION void b3Swap<typename T>(T &, T &)
REFERENCE_TEMPLATE_SPECIALIZATION void b3Swap<b3DbvtAabbMm>(b3DbvtAabbMm &, b3DbvtAabbMm &) -> void b3Swap<typename T>(T &, T &) [b3Scalar.h <509:43 509:48>]
REFERENCE_TYPE_USAGE void b3Swap<b3DbvtAabbMm>(b3DbvtAabbMm &, b3DbvtAabbMm &) -> void [b3Scalar.h <509:38 509:41>]
SYMBOL_FUNCTION void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &)
REFERENCE_CALL void b3Swap<b3DbvtAabbMm>(b3DbvtAabbMm &, b3DbvtAabbMm &) -> void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) [b3Scalar.h <511:10 511:10>]
SYMBOL_FUNCTION b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &)
REFERENCE_CALL void b3Swap<b3DbvtAabbMm>(b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) [b3Scalar.h <512:4 512:4>]
REFERENCE_CALL void b3Swap<b3DbvtAabbMm>(b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) [b3Scalar.h <513:4 513:4>]
SYMBOL_FUNCTION unsigned int b3SwapEndian(unsigned int) [b3Scalar.h <518:1 <518:26 518:37> 521:1>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndian(unsigned int) -> unsigned int [b3Scalar.h <518:17 518:24>]
LOCAL_SYMBOL: b3Scalar.h<518:48> [b3Scalar.h <518:48 518:50>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndian(unsigned int) -> unsigned int [b3Scalar.h <518:39 518:46>]
LOCAL_SYMBOL: b3Scalar.h<519:1> [b3Scalar.h <519:1 519:1>]
LOCAL_SYMBOL: b3Scalar.h<519:1> [b3Scalar.h <521:1 521:1>]
LOCAL_SYMBOL: b3Scalar.h<518:48> [b3Scalar.h <520:12 520:14>]
LOCAL_SYMBOL: b3Scalar.h<518:48> [b3Scalar.h <520:41 520:43>]
LOCAL_SYMBOL: b3Scalar.h<518:48> [b3Scalar.h <520:69 520:71>]
LOCAL_SYMBOL: b3Scalar.h<518:48> [b3Scalar.h <520:98 520:100>]
SYMBOL_FUNCTION unsigned short b3SwapEndian(unsigned short) [b3Scalar.h <523:1 <523:32 523:43> 526:1>]
SYMBOL_BUILTIN_TYPE unsigned short
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(unsigned short) -> unsigned short [b3Scalar.h <523:17 523:24>]
LOCAL_SYMBOL: b3Scalar.h<523:60> [b3Scalar.h <523:60 523:62>]
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(unsigned short) -> unsigned short [b3Scalar.h <523:45 523:52>]
LOCAL_SYMBOL: b3Scalar.h<524:1> [b3Scalar.h <524:1 524:1>]
LOCAL_SYMBOL: b3Scalar.h<524:1> [b3Scalar.h <526:1 526:1>]
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(unsigned short) -> unsigned short [b3Scalar.h <525:21 525:28>]
LOCAL_SYMBOL: b3Scalar.h<523:60> [b3Scalar.h <525:39 525:41>]
LOCAL_SYMBOL: b3Scalar.h<523:60> [b3Scalar.h <525:63 525:65>]
SYMBOL_FUNCTION unsigned int b3SwapEndian(int) [b3Scalar.h <528:1 <528:26 528:37> 531:1>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndian(int) -> unsigned int [b3Scalar.h <528:17 528:24>]
LOCAL_SYMBOL: b3Scalar.h<528:43> [b3Scalar.h <528:43 528:45>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndian(int) -> int [b3Scalar.h <528:39 528:41>]
LOCAL_SYMBOL: b3Scalar.h<529:1> [b3Scalar.h <529:1 529:1>]
LOCAL_SYMBOL: b3Scalar.h<529:1> [b3Scalar.h <531:1 531:1>]
SYMBOL_FUNCTION unsigned int b3SwapEndian(unsigned int)
REFERENCE_CALL unsigned int b3SwapEndian(int) -> unsigned int b3SwapEndian(unsigned int) [b3Scalar.h <530:9 530:20>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndian(int) -> unsigned int [b3Scalar.h <530:23 530:30>]
LOCAL_SYMBOL: b3Scalar.h<528:43> [b3Scalar.h <530:32 530:34>]
SYMBOL_FUNCTION unsigned short b3SwapEndian(short) [b3Scalar.h <533:1 <533:32 533:43> 536:1>]
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(short) -> unsigned short [b3Scalar.h <533:17 533:24>]
LOCAL_SYMBOL: b3Scalar.h<533:51> [b3Scalar.h <533:51 533:53>]
SYMBOL_BUILTIN_TYPE short
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(short) -> short [b3Scalar.h <533:45 533:49>]
LOCAL_SYMBOL: b3Scalar.h<534:1> [b3Scalar.h <534:1 534:1>]
LOCAL_SYMBOL: b3Scalar.h<534:1> [b3Scalar.h <536:1 536:1>]
SYMBOL_FUNCTION unsigned short b3SwapEndian(unsigned short)
REFERENCE_CALL unsigned short b3SwapEndian(short) -> unsigned short b3SwapEndian(unsigned short) [b3Scalar.h <535:9 535:20>]
REFERENCE_TYPE_USAGE unsigned short b3SwapEndian(short) -> unsigned short [b3Scalar.h <535:23 535:30>]
LOCAL_SYMBOL: b3Scalar.h<533:51> [b3Scalar.h <535:39 535:41>]
SYMBOL_FUNCTION unsigned int b3SwapEndianFloat(float) [b3Scalar.h <544:1 <544:31 544:47> 555:1>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned int [b3Scalar.h <544:17 544:24>]
LOCAL_SYMBOL: b3Scalar.h<544:55> [b3Scalar.h <544:55 544:55>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> float [b3Scalar.h <544:49 544:53>]
LOCAL_SYMBOL: b3Scalar.h<545:1> [b3Scalar.h <545:1 545:1>]
LOCAL_SYMBOL: b3Scalar.h<545:1> [b3Scalar.h <555:1 555:1>]
LOCAL_SYMBOL: b3Scalar.h<546:18> [b3Scalar.h <546:18 546:18>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned int [b3Scalar.h <546:5 546:12>]
LOCAL_SYMBOL: b3Scalar.h<547:20> [b3Scalar.h <547:20 547:22>]
SYMBOL_BUILTIN_TYPE unsigned char
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned char [b3Scalar.h <547:5 547:12>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned char [b3Scalar.h <547:27 547:34>]
LOCAL_SYMBOL: b3Scalar.h<546:18> [b3Scalar.h <547:44 547:44>]
LOCAL_SYMBOL: b3Scalar.h<548:20> [b3Scalar.h <548:20 548:22>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned char [b3Scalar.h <548:5 548:12>]
REFERENCE_TYPE_USAGE unsigned int b3SwapEndianFloat(float) -> unsigned char [b3Scalar.h <548:27 548:34>]
LOCAL_SYMBOL: b3Scalar.h<544:55> [b3Scalar.h <548:44 548:44>]
LOCAL_SYMBOL: b3Scalar.h<547:20> [b3Scalar.h <550:5 550:7>]
LOCAL_SYMBOL: b3Scalar.h<548:20> [b3Scalar.h <550:14 550:16>]
LOCAL_SYMBOL: b3Scalar.h<547:20> [b3Scalar.h <551:5 551:7>]
LOCAL_SYMBOL: b3Scalar.h<548:20> [b3Scalar.h <551:14 551:16>]
LOCAL_SYMBOL: b3Scalar.h<547:20> [b3Scalar.h <552:5 552:7>]
LOCAL_SYMBOL: b3Scalar.h<548:20> [b3Scalar.h <552:14 552:16>]
LOCAL_SYMBOL: b3Scalar.h<547:20> [b3Scalar.h <553:5 553:7>]
LOCAL_SYMBOL: b3Scalar.h<548:20> [b3Scalar.h <553:14 553:16>]
LOCAL_SYMBOL: b3Scalar.h<546:18> [b3Scalar.h <554:12 554:12>]
SYMBOL_FUNCTION float b3UnswapEndianFloat(unsigned int) [b3Scalar.h <558:1 <558:23 558:41> 570:1>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> float [b3Scalar.h <558:17 558:21>]
LOCAL_SYMBOL: b3Scalar.h<558:56> [b3Scalar.h <558:56 558:56>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> unsigned int [b3Scalar.h <558:43 558:50>]
LOCAL_SYMBOL: b3Scalar.h<559:1> [b3Scalar.h <559:1 559:1>]
LOCAL_SYMBOL: b3Scalar.h<559:1> [b3Scalar.h <570:1 570:1>]
LOCAL_SYMBOL: b3Scalar.h<560:11> [b3Scalar.h <560:11 560:11>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> float [b3Scalar.h <560:5 560:9>]
LOCAL_SYMBOL: b3Scalar.h<561:20> [b3Scalar.h <561:20 561:22>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> unsigned char [b3Scalar.h <561:5 561:12>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> unsigned char [b3Scalar.h <561:27 561:34>]
LOCAL_SYMBOL: b3Scalar.h<558:56> [b3Scalar.h <561:44 561:44>]
LOCAL_SYMBOL: b3Scalar.h<562:20> [b3Scalar.h <562:20 562:22>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> unsigned char [b3Scalar.h <562:5 562:12>]
REFERENCE_TYPE_USAGE float b3UnswapEndianFloat(unsigned int) -> unsigned char [b3Scalar.h <562:27 562:34>]
LOCAL_SYMBOL: b3Scalar.h<560:11> [b3Scalar.h <562:44 562:44>]
LOCAL_SYMBOL: b3Scalar.h<562:20> [b3Scalar.h <564:5 564:7>]
LOCAL_SYMBOL: b3Scalar.h<561:20> [b3Scalar.h <564:14 564:16>]
LOCAL_SYMBOL: b3Scalar.h<562:20> [b3Scalar.h <565:5 565:7>]
LOCAL_SYMBOL: b3Scalar.h<561:20> [b3Scalar.h <565:14 565:16>]
LOCAL_SYMBOL: b3Scalar.h<562:20> [b3Scalar.h <566:5 566:7>]
LOCAL_SYMBOL: b3Scalar.h<561:20> [b3Scalar.h <566:14 566:16>]
LOCAL_SYMBOL: b3Scalar.h<562:20> [b3Scalar.h <567:5 567:7>]
LOCAL_SYMBOL: b3Scalar.h<561:20> [b3Scalar.h <567:14 567:16>]
LOCAL_SYMBOL: b3Scalar.h<560:11> [b3Scalar.h <569:12 569:12>]
SYMBOL_FUNCTION void b3SwapEndianDouble(double, unsigned char *) [b3Scalar.h <574:1 <574:23 574:40> 587:1>]
REFERENCE_TYPE_USAGE void b3SwapEndianDouble(double, unsigned char *) -> void [b3Scalar.h <574:17 574:20>]
LOCAL_SYMBOL: b3Scalar.h<574:49> [b3Scalar.h <574:49 574:49>]
SYMBOL_BUILTIN_TYPE double
REFERENCE_TYPE_USAGE void b3SwapEndianDouble(double, unsigned char *) -> double [b3Scalar.h <574:42 574:47>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <574:67 574:69>]
REFERENCE_TYPE_USAGE void b3SwapEndianDouble(double, unsigned char *) -> unsigned char [b3Scalar.h <574:52 574:59>]
LOCAL_SYMBOL: b3Scalar.h<575:1> [b3Scalar.h <575:1 575:1>]
LOCAL_SYMBOL: b3Scalar.h<575:1> [b3Scalar.h <587:1 587:1>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <576:20 576:22>]
REFERENCE_TYPE_USAGE void b3SwapEndianDouble(double, unsigned char *) -> unsigned char [b3Scalar.h <576:5 576:12>]
REFERENCE_TYPE_USAGE void b3SwapEndianDouble(double, unsigned char *) -> unsigned char [b3Scalar.h <576:27 576:34>]
LOCAL_SYMBOL: b3Scalar.h<574:49> [b3Scalar.h <576:44 576:44>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <578:5 578:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <578:14 578:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <579:5 579:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <579:14 579:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <580:5 580:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <580:14 580:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <581:5 581:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <581:14 581:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <582:5 582:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <582:14 582:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <583:5 583:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <583:14 583:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <584:5 584:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <584:14 584:16>]
LOCAL_SYMBOL: b3Scalar.h<574:67> [b3Scalar.h <585:5 585:7>]
LOCAL_SYMBOL: b3Scalar.h<576:20> [b3Scalar.h <585:14 585:16>]
SYMBOL_FUNCTION double b3UnswapEndianDouble(const unsigned char *) [b3Scalar.h <590:1 <590:24 590:43> 605:1>]
REFERENCE_TYPE_USAGE double b3UnswapEndianDouble(const unsigned char *) -> double [b3Scalar.h <590:17 590:22>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <590:66 590:68>]
REFERENCE_TYPE_USAGE double b3UnswapEndianDouble(const unsigned char *) -> unsigned char [b3Scalar.h <590:51 590:58>]
LOCAL_SYMBOL: b3Scalar.h<591:1> [b3Scalar.h <591:1 591:1>]
LOCAL_SYMBOL: b3Scalar.h<591:1> [b3Scalar.h <605:1 605:1>]
LOCAL_SYMBOL: b3Scalar.h<592:12> [b3Scalar.h <592:12 592:12>]
REFERENCE_TYPE_USAGE double b3UnswapEndianDouble(const unsigned char *) -> double [b3Scalar.h <592:5 592:10>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <593:20 593:22>]
REFERENCE_TYPE_USAGE double b3UnswapEndianDouble(const unsigned char *) -> unsigned char [b3Scalar.h <593:5 593:12>]
REFERENCE_TYPE_USAGE double b3UnswapEndianDouble(const unsigned char *) -> unsigned char [b3Scalar.h <593:27 593:34>]
LOCAL_SYMBOL: b3Scalar.h<592:12> [b3Scalar.h <593:44 593:44>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <595:5 595:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <595:14 595:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <596:5 596:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <596:14 596:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <597:5 597:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <597:14 597:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <598:5 598:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <598:14 598:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <599:5 599:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <599:14 599:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <600:5 600:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <600:14 600:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <601:5 601:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <601:14 601:16>]
LOCAL_SYMBOL: b3Scalar.h<593:20> [b3Scalar.h <602:5 602:7>]
LOCAL_SYMBOL: b3Scalar.h<590:66> [b3Scalar.h <602:14 602:16>]
LOCAL_SYMBOL: b3Scalar.h<592:12> [b3Scalar.h <604:9 604:9>]
SYMBOL_FUNCTION b3Scalar b3NormalizeAngle(b3Scalar) [b3Scalar.h <608:1 <608:26 608:41> 623:1>]
REFERENCE_TYPE_USAGE b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar [b3Scalar.h <608:17 608:24>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <608:52 608:65>]
REFERENCE_TYPE_USAGE b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar [b3Scalar.h <608:43 608:50>]
LOCAL_SYMBOL: b3Scalar.h<609:1> [b3Scalar.h <609:1 609:1>]
LOCAL_SYMBOL: b3Scalar.h<609:1> [b3Scalar.h <623:1 623:1>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <610:2 610:15>]
SYMBOL_FUNCTION b3Scalar b3Fmod(b3Scalar, b3Scalar)
REFERENCE_CALL b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar b3Fmod(b3Scalar, b3Scalar) [b3Scalar.h <610:19 610:24>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <610:26 610:39>]
REFERENCE_TYPE_USAGE b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar [b3Scalar.h <610:42 610:48>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <611:5 611:18>]
REFERENCE_TYPE_USAGE b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar [b3Scalar.h <611:23 611:27>]
LOCAL_SYMBOL: b3Scalar.h<612:2> [b3Scalar.h <612:2 612:2>]
LOCAL_SYMBOL: b3Scalar.h<612:2> [b3Scalar.h <614:2 614:2>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <613:10 613:23>]
REFERENCE_TYPE_USAGE b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar [b3Scalar.h <613:27 613:33>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <615:10 615:23>]
REFERENCE_TYPE_USAGE b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar [b3Scalar.h <615:27 615:31>]
LOCAL_SYMBOL: b3Scalar.h<616:2> [b3Scalar.h <616:2 616:2>]
LOCAL_SYMBOL: b3Scalar.h<616:2> [b3Scalar.h <618:2 618:2>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <617:10 617:23>]
REFERENCE_TYPE_USAGE b3Scalar b3NormalizeAngle(b3Scalar) -> b3Scalar [b3Scalar.h <617:27 617:33>]
LOCAL_SYMBOL: b3Scalar.h<620:2> [b3Scalar.h <620:2 620:2>]
LOCAL_SYMBOL: b3Scalar.h<620:2> [b3Scalar.h <622:2 622:2>]
LOCAL_SYMBOL: b3Scalar.h<608:52> [b3Scalar.h <621:10 621:23>]
SYMBOL_STRUCT b3TypedObject [b3Scalar.h <626:1 <626:8 626:20> 637:1>]
LOCAL_SYMBOL: b3Scalar.h<627:1> [b3Scalar.h <627:1 627:1>]
LOCAL_SYMBOL: b3Scalar.h<627:1> [b3Scalar.h <637:1 637:1>]
SYMBOL_METHOD public void b3TypedObject::b3TypedObject(int) [b3Scalar.h <628:2 <628:2 628:14> 631:2>]
LOCAL_SYMBOL: b3Scalar.h<628:20> [b3Scalar.h <628:20 628:29>]
REFERENCE_TYPE_USAGE void b3TypedObject::b3TypedObject(int) -> int [b3Scalar.h <628:16 628:18>]
REFERENCE_USAGE void b3TypedObject::b3TypedObject(int) -> int b3TypedObject::m_objectType [b3Scalar.h <629:4 629:15>]
LOCAL_SYMBOL: b3Scalar.h<628:20> [b3Scalar.h <629:17 629:26>]
LOCAL_SYMBOL: b3Scalar.h<630:2> [b3Scalar.h <630:2 630:2>]
LOCAL_SYMBOL: b3Scalar.h<630:2> [b3Scalar.h <631:2 631:2>]
SYMBOL_FIELD public int b3TypedObject::m_objectType [b3Scalar.h <632:6 632:17>]
REFERENCE_TYPE_USAGE int b3TypedObject::m_objectType -> int [b3Scalar.h <632:2 632:4>]
SYMBOL_METHOD public int b3TypedObject::getObjectType() const [b3Scalar.h <633:2 <633:13 633:25> 636:2>]
REFERENCE_TYPE_USAGE int b3TypedObject::getObjectType() const -> int [b3Scalar.h <633:9 633:11>]
LOCAL_SYMBOL: b3Scalar.h<634:2> [b3Scalar.h <634:2 634:2>]
LOCAL_SYMBOL: b3Scalar.h<634:2> [b3Scalar.h <636:2 636:2>]
REFERENCE_USAGE int b3TypedObject::getObjectType() const -> int b3TypedObject::m_objectType [b3Scalar.h <635:10 635:21>]
SYMBOL_TEMPLATE_PARAMETER b3AlignPointer<typename T>::T [b3Scalar.h <642:20 642:20>]
SYMBOL_FUNCTION T * b3AlignPointer<typename T>(T *, size_t) [b3Scalar.h <642:1 <642:25 642:38> 661:1>]
REFERENCE_TYPE_USAGE T * b3AlignPointer<typename T>(T *, size_t) -> b3AlignPointer<typename T>::T [b3Scalar.h <642:22 642:22>]
LOCAL_SYMBOL: b3Scalar.h<642:43> [b3Scalar.h <642:43 642:54>]
REFERENCE_TYPE_USAGE T * b3AlignPointer<typename T>(T *, size_t) -> b3AlignPointer<typename T>::T [b3Scalar.h <642:40 642:40>]
LOCAL_SYMBOL: b3Scalar.h<642:64> [b3Scalar.h <642:64 642:72>]
REFERENCE_TYPE_USAGE T * b3AlignPointer<typename T>(T *, size_t) -> size_t [b3Scalar.h <642:57 642:62>]
LOCAL_SYMBOL: b3Scalar.h<643:1> [b3Scalar.h <643:1 643:1>]
LOCAL_SYMBOL: b3Scalar.h<643:1> [b3Scalar.h <661:1 661:1>]
SYMBOL_STRUCT b3AlignPointer<typename T>::b3ConvertPointerSizeT [b3Scalar.h <645:2 <645:9 645:29> 652:2>]
LOCAL_SYMBOL: b3Scalar.h<646:2> [b3Scalar.h <646:2 646:2>]
LOCAL_SYMBOL: b3Scalar.h<646:2> [b3Scalar.h <652:2 652:2>]
SYMBOL_UNION public b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) [b3Scalar.h <647:3 <647:3 647:7> 651:3>]
LOCAL_SYMBOL: b3Scalar.h<648:3> [b3Scalar.h <648:3 648:3>]
LOCAL_SYMBOL: b3Scalar.h<648:3> [b3Scalar.h <651:3 651:3>]
SYMBOL_FIELD public b3AlignPointer<typename T>::T * b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::ptr [b3Scalar.h <649:8 649:10>]
REFERENCE_TYPE_USAGE b3AlignPointer<typename T>::T * b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::ptr -> b3AlignPointer<typename T>::T [b3Scalar.h <649:5 649:5>]
SYMBOL_FIELD public size_t b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::integer [b3Scalar.h <650:12 650:18>]
REFERENCE_TYPE_USAGE size_t b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>)::integer -> size_t [b3Scalar.h <650:5 650:10>]
SYMBOL_FIELD public b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<typename T>::b3ConvertPointerSizeT:: [b3Scalar.h <647:3 647:7>]
REFERENCE_TYPE_USAGE b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) b3AlignPointer<typename T>::b3ConvertPointerSizeT:: -> b3AlignPointer<typename T>::b3ConvertPointerSizeT::anonymous union (b3Scalar.h<647:3>) [b3Scalar.h <647:3 647:7>]
LOCAL_SYMBOL: b3Scalar.h<653:27> [b3Scalar.h <653:27 653:35>]
REFERENCE_TYPE_USAGE T * b3AlignPointer<typename T>(T *, size_t) -> b3AlignPointer<typename T>::b3ConvertPointerSizeT [b3Scalar.h <653:5 653:25>]
LOCAL_SYMBOL: b3Scalar.h<656:15> [b3Scalar.h <656:15 656:22>]
REFERENCE_TYPE_USAGE T * b3AlignPointer<typename T>(T *, size_t) -> size_t [b3Scalar.h <656:8 656:13>]
LOCAL_SYMBOL: b3Scalar.h<642:64> [b3Scalar.h <656:28 656:36>]
LOCAL_SYMBOL: b3Scalar.h<653:27> [b3Scalar.h <657:5 657:13>]
LOCAL_SYMBOL: b3Scalar.h<642:43> [b3Scalar.h <657:21 657:32>]
LOCAL_SYMBOL: b3Scalar.h<653:27> [b3Scalar.h <658:2 658:10>]
LOCAL_SYMBOL: b3Scalar.h<642:64> [b3Scalar.h <658:23 658:31>]
LOCAL_SYMBOL: b3Scalar.h<653:27> [b3Scalar.h <659:2 659:10>]
LOCAL_SYMBOL: b3Scalar.h<656:15> [b3Scalar.h <659:23 659:30>]
LOCAL_SYMBOL: b3Scalar.h<653:27> [b3Scalar.h <660:9 660:17>]
SYMBOL_FUNCTION void * b3AlignedAllocInternal(size_t, int) [b3AlignedAllocator.h <38:8 38:29>]
REFERENCE_TYPE_USAGE void * b3AlignedAllocInternal(size_t, int) -> void [b3AlignedAllocator.h <38:2 38:5>]
LOCAL_SYMBOL: b3AlignedAllocator.h<38:39> [b3AlignedAllocator.h <38:39 38:42>]
REFERENCE_TYPE_USAGE void * b3AlignedAllocInternal(size_t, int) -> size_t [b3AlignedAllocator.h <38:32 38:37>]
LOCAL_SYMBOL: b3AlignedAllocator.h<38:49> [b3AlignedAllocator.h <38:49 38:57>]
REFERENCE_TYPE_USAGE void * b3AlignedAllocInternal(size_t, int) -> int [b3AlignedAllocator.h <38:45 38:47>]
SYMBOL_FUNCTION void b3AlignedFreeInternal(void *) [b3AlignedAllocator.h <39:7 39:27>]
REFERENCE_TYPE_USAGE void b3AlignedFreeInternal(void *) -> void [b3AlignedAllocator.h <39:2 39:5>]
LOCAL_SYMBOL: b3AlignedAllocator.h<39:36> [b3AlignedAllocator.h <39:36 39:38>]
REFERENCE_TYPE_USAGE void b3AlignedFreeInternal(void *) -> void [b3AlignedAllocator.h <39:30 39:33>]
SYMBOL_TYPEDEF btSizeType [b3AlignedAllocator.h <45:13 45:22>]
REFERENCE_TYPE_USAGE btSizeType -> int [b3AlignedAllocator.h <45:9 45:11>]
SYMBOL_TYPEDEF b3AlignedAllocFunc [b3AlignedAllocator.h <47:16 47:33>]
REFERENCE_TYPE_USAGE b3AlignedAllocFunc -> void [b3AlignedAllocator.h <47:9 47:12>]
LOCAL_SYMBOL: b3AlignedAllocator.h<47:43> [b3AlignedAllocator.h <47:43 47:46>]
REFERENCE_TYPE_USAGE b3AlignedAllocFunc -> size_t [b3AlignedAllocator.h <47:36 47:41>]
LOCAL_SYMBOL: b3AlignedAllocator.h<47:53> [b3AlignedAllocator.h <47:53 47:61>]
REFERENCE_TYPE_USAGE b3AlignedAllocFunc -> int [b3AlignedAllocator.h <47:49 47:51>]
SYMBOL_TYPEDEF b3AlignedFreeFunc [b3AlignedAllocator.h <48:15 48:31>]
REFERENCE_TYPE_USAGE b3AlignedFreeFunc -> void [b3AlignedAllocator.h <48:9 48:12>]
LOCAL_SYMBOL: b3AlignedAllocator.h<48:40> [b3AlignedAllocator.h <48:40 48:47>]
REFERENCE_TYPE_USAGE b3AlignedFreeFunc -> void [b3AlignedAllocator.h <48:34 48:37>]
SYMBOL_TYPEDEF b3AllocFunc [b3AlignedAllocator.h <49:16 49:26>]
REFERENCE_TYPE_USAGE b3AllocFunc -> void [b3AlignedAllocator.h <49:9 49:12>]
LOCAL_SYMBOL: b3AlignedAllocator.h<49:36> [b3AlignedAllocator.h <49:36 49:39>]
REFERENCE_TYPE_USAGE b3AllocFunc -> size_t [b3AlignedAllocator.h <49:29 49:34>]
SYMBOL_TYPEDEF b3FreeFunc [b3AlignedAllocator.h <50:15 50:24>]
REFERENCE_TYPE_USAGE b3FreeFunc -> void [b3AlignedAllocator.h <50:9 50:12>]
LOCAL_SYMBOL: b3AlignedAllocator.h<50:33> [b3AlignedAllocator.h <50:33 50:40>]
REFERENCE_TYPE_USAGE b3FreeFunc -> void [b3AlignedAllocator.h <50:27 50:30>]
SYMBOL_FUNCTION void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) [b3AlignedAllocator.h <53:6 53:28>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> void [b3AlignedAllocator.h <53:1 53:4>]
LOCAL_SYMBOL: b3AlignedAllocator.h<53:43> [b3AlignedAllocator.h <53:43 53:51>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> b3AllocFunc [b3AlignedAllocator.h <53:30 53:40>]
LOCAL_SYMBOL: b3AlignedAllocator.h<53:66> [b3AlignedAllocator.h <53:66 53:73>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustom(b3AllocFunc *, b3FreeFunc *) -> b3FreeFunc [b3AlignedAllocator.h <53:54 53:63>]
SYMBOL_FUNCTION void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) [b3AlignedAllocator.h <55:6 55:35>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> void [b3AlignedAllocator.h <55:1 55:4>]
LOCAL_SYMBOL: b3AlignedAllocator.h<55:57> [b3AlignedAllocator.h <55:57 55:65>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> b3AlignedAllocFunc [b3AlignedAllocator.h <55:37 55:54>]
LOCAL_SYMBOL: b3AlignedAllocator.h<55:87> [b3AlignedAllocator.h <55:87 55:94>]
REFERENCE_TYPE_USAGE void b3AlignedAllocSetCustomAligned(b3AlignedAllocFunc *, b3AlignedFreeFunc *) -> b3AlignedFreeFunc [b3AlignedAllocator.h <55:68 55:84>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <60:21 60:21>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <60:34 60:42>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment -> unsigned int [b3AlignedAllocator.h <60:25 60:32>]
SYMBOL_CLASS b3AlignedAllocator<typename T, unsigned int Alignment> [b3AlignedAllocator.h <60:1 <61:7 61:24> 102:1>]
LOCAL_SYMBOL: b3AlignedAllocator.h<61:26> [b3AlignedAllocator.h <61:26 61:26>]
LOCAL_SYMBOL: b3AlignedAllocator.h<61:26> [b3AlignedAllocator.h <102:1 102:1>]
SYMBOL_TYPEDEF private b3AlignedAllocator<typename T, unsigned int Alignment>::self_type [b3AlignedAllocator.h <63:46 63:54>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::self_type -> b3AlignedAllocator<T, Alignment> [b3AlignedAllocator.h <63:10 63:27>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<T, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <63:30 63:30>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<T, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <63:34 63:42>]
SYMBOL_METHOD public void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment>() [b3AlignedAllocator.h <68:2 <68:2 68:19> 68:24>]
LOCAL_SYMBOL: b3AlignedAllocator.h<68:23> [b3AlignedAllocator.h <68:23 68:23>]
LOCAL_SYMBOL: b3AlignedAllocator.h<68:23> [b3AlignedAllocator.h <68:24 68:24>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment><typename Other>::Other [b3AlignedAllocator.h <73:22 73:26>]
SYMBOL_METHOD public void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment><typename Other>(const b3AlignedAllocator<Other, Alignment> &) [b3AlignedAllocator.h <73:2 <74:2 74:19> 74:73>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment><typename Other>(const b3AlignedAllocator<Other, Alignment> &) -> b3AlignedAllocator<b3AlignedAllocator<T, Alignment><typename Other>::Other, Alignment> [b3AlignedAllocator.h <74:28 74:45>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<T, Alignment><typename Other>::Other, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment><typename Other>::Other [b3AlignedAllocator.h <74:48 74:52>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<T, Alignment><typename Other>::Other, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <74:56 74:64>]
LOCAL_SYMBOL: b3AlignedAllocator.h<74:72> [b3AlignedAllocator.h <74:72 74:72>]
LOCAL_SYMBOL: b3AlignedAllocator.h<74:72> [b3AlignedAllocator.h <74:73 74:73>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer [b3AlignedAllocator.h <76:27 76:39>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <76:16 76:16>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference [b3AlignedAllocator.h <77:27 77:41>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <77:16 77:16>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <78:27 78:33>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <78:10 78:10>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::reference [b3AlignedAllocator.h <79:27 79:35>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::reference -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <79:10 79:10>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::value_type [b3AlignedAllocator.h <80:27 80:36>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::value_type -> b3AlignedAllocator<typename T, unsigned int Alignment>::T [b3AlignedAllocator.h <80:10 80:10>]
SYMBOL_METHOD public b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const [b3AlignedAllocator.h <82:2 <82:16 82:22> 82:98>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <82:2 82:8>]
LOCAL_SYMBOL: b3AlignedAllocator.h<82:45> [b3AlignedAllocator.h <82:45 82:47>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::reference [b3AlignedAllocator.h <82:28 82:36>]
LOCAL_SYMBOL: b3AlignedAllocator.h<82:83> [b3AlignedAllocator.h <82:83 82:83>]
LOCAL_SYMBOL: b3AlignedAllocator.h<82:83> [b3AlignedAllocator.h <82:98 82:98>]
LOCAL_SYMBOL: b3AlignedAllocator.h<82:45> [b3AlignedAllocator.h <82:93 82:95>]
SYMBOL_METHOD public b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const [b3AlignedAllocator.h <83:2 <83:16 83:22> 83:98>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer [b3AlignedAllocator.h <83:2 83:14>]
LOCAL_SYMBOL: b3AlignedAllocator.h<83:45> [b3AlignedAllocator.h <83:45 83:47>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference [b3AlignedAllocator.h <83:28 83:42>]
LOCAL_SYMBOL: b3AlignedAllocator.h<83:83> [b3AlignedAllocator.h <83:83 83:83>]
LOCAL_SYMBOL: b3AlignedAllocator.h<83:83> [b3AlignedAllocator.h <83:98 83:98>]
LOCAL_SYMBOL: b3AlignedAllocator.h<83:45> [b3AlignedAllocator.h <83:93 83:95>]
SYMBOL_METHOD public b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) [b3AlignedAllocator.h <84:2 <84:16 84:23> 87:2>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <84:2 84:8>]
LOCAL_SYMBOL: b3AlignedAllocator.h<84:46> [b3AlignedAllocator.h <84:46 84:46>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> btSizeType [b3AlignedAllocator.h <84:28 84:37>]
LOCAL_SYMBOL: b3AlignedAllocator.h<84:73> [b3AlignedAllocator.h <84:73 84:76>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer [b3AlignedAllocator.h <84:52 84:64>]
LOCAL_SYMBOL: b3AlignedAllocator.h<84:84> [b3AlignedAllocator.h <84:84 84:84>]
LOCAL_SYMBOL: b3AlignedAllocator.h<84:84> [b3AlignedAllocator.h <87:2 87:2>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> void [b3AlignedAllocator.h <85:4 85:7>]
LOCAL_SYMBOL: b3AlignedAllocator.h<84:73> [b3AlignedAllocator.h <85:9 85:12>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <86:28 86:34>]
SYMBOL_FUNCTION void * b3AlignedAllocInternal(size_t, int)
REFERENCE_CALL b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> void * b3AlignedAllocInternal(size_t, int) [b3AlignedAllocator.h <86:38 86:51>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::value_type [b3AlignedAllocator.h <86:61 86:70>]
LOCAL_SYMBOL: b3AlignedAllocator.h<84:46> [b3AlignedAllocator.h <86:75 86:75>]
REFERENCE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <86:79 86:87>]
SYMBOL_METHOD public void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) [b3AlignedAllocator.h <88:2 <88:16 88:24> 88:116>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) -> void [b3AlignedAllocator.h <88:2 88:5>]
LOCAL_SYMBOL: b3AlignedAllocator.h<88:45> [b3AlignedAllocator.h <88:45 88:47>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <88:28 88:34>]
LOCAL_SYMBOL: b3AlignedAllocator.h<88:72> [b3AlignedAllocator.h <88:72 88:76>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::value_type [b3AlignedAllocator.h <88:57 88:66>]
LOCAL_SYMBOL: b3AlignedAllocator.h<88:83> [b3AlignedAllocator.h <88:83 88:83>]
LOCAL_SYMBOL: b3AlignedAllocator.h<88:83> [b3AlignedAllocator.h <88:116 88:116>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::value_type [b3AlignedAllocator.h <88:95 88:104>]
LOCAL_SYMBOL: b3AlignedAllocator.h<88:72> [b3AlignedAllocator.h <88:107 88:111>]
LOCAL_SYMBOL: b3AlignedAllocator.h<88:45> [b3AlignedAllocator.h <88:90 88:92>]
SYMBOL_METHOD public void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <89:2 <89:16 89:25> 91:2>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> void [b3AlignedAllocator.h <89:2 89:5>]
LOCAL_SYMBOL: b3AlignedAllocator.h<89:45> [b3AlignedAllocator.h <89:45 89:47>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <89:28 89:34>]
LOCAL_SYMBOL: b3AlignedAllocator.h<89:51> [b3AlignedAllocator.h <89:51 89:51>]
LOCAL_SYMBOL: b3AlignedAllocator.h<89:51> [b3AlignedAllocator.h <91:2 91:2>]
SYMBOL_FUNCTION void b3AlignedFreeInternal(void *)
REFERENCE_CALL void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> void b3AlignedFreeInternal(void *) [b3AlignedAllocator.h <90:3 90:15>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> void [b3AlignedAllocator.h <90:36 90:39>]
LOCAL_SYMBOL: b3AlignedAllocator.h<89:45> [b3AlignedAllocator.h <90:46 90:48>]
SYMBOL_METHOD public void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <92:2 <92:16 92:22> 92:105>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> void [b3AlignedAllocator.h <92:2 92:5>]
LOCAL_SYMBOL: b3AlignedAllocator.h<92:45> [b3AlignedAllocator.h <92:45 92:47>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer [b3AlignedAllocator.h <92:28 92:34>]
LOCAL_SYMBOL: b3AlignedAllocator.h<92:83> [b3AlignedAllocator.h <92:83 92:83>]
LOCAL_SYMBOL: b3AlignedAllocator.h<92:83> [b3AlignedAllocator.h <92:105 92:105>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) -> b3AlignedAllocator<typename T, unsigned int Alignment>::value_type [b3AlignedAllocator.h <92:91 92:100>]
LOCAL_SYMBOL: b3AlignedAllocator.h<92:45> [b3AlignedAllocator.h <92:85 92:87>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<typename T, unsigned int Alignment>::rebind<typename O>::O [b3AlignedAllocator.h <95:22 95:22>]
SYMBOL_STRUCT b3AlignedAllocator<typename T, unsigned int Alignment>::rebind<typename O> [b3AlignedAllocator.h <95:2 <95:33 95:38> 97:2>]
LOCAL_SYMBOL: b3AlignedAllocator.h<95:40> [b3AlignedAllocator.h <95:40 95:40>]
LOCAL_SYMBOL: b3AlignedAllocator.h<95:40> [b3AlignedAllocator.h <97:2 97:2>]
SYMBOL_TYPEDEF public b3AlignedAllocator<typename T, unsigned int Alignment>::rebind<typename O>::other [b3AlignedAllocator.h <96:47 96:51>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::rebind<typename O>::other -> b3AlignedAllocator<rebind<typename O>::O, Alignment> [b3AlignedAllocator.h <96:11 96:28>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<rebind<typename O>::O, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::rebind<typename O>::O [b3AlignedAllocator.h <96:31 96:31>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<rebind<typename O>::O, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <96:35 96:43>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<typename T, unsigned int Alignment>::operator=<typename O>::O [b3AlignedAllocator.h <98:22 98:22>]
SYMBOL_METHOD public b3AlignedAllocator<typename T, unsigned int Alignment>::self_type & b3AlignedAllocator<typename T, unsigned int Alignment>::operator=<typename O>(const b3AlignedAllocator<O, Alignment> &) [b3AlignedAllocator.h <98:2 <99:14 99:22> 99:87>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::self_type & b3AlignedAllocator<typename T, unsigned int Alignment>::operator=<typename O>(const b3AlignedAllocator<O, Alignment> &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::self_type [b3AlignedAllocator.h <99:2 99:10>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<typename T, unsigned int Alignment>::self_type & b3AlignedAllocator<typename T, unsigned int Alignment>::operator=<typename O>(const b3AlignedAllocator<O, Alignment> &) -> b3AlignedAllocator<operator=<typename O>::O, Alignment> [b3AlignedAllocator.h <99:31 99:48>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<operator=<typename O>::O, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::operator=<typename O>::O [b3AlignedAllocator.h <99:51 99:51>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<operator=<typename O>::O, Alignment> -> b3AlignedAllocator<typename T, unsigned int Alignment>::Alignment [b3AlignedAllocator.h <99:55 99:63>]
LOCAL_SYMBOL: b3AlignedAllocator.h<99:71> [b3AlignedAllocator.h <99:71 99:71>]
LOCAL_SYMBOL: b3AlignedAllocator.h<99:71> [b3AlignedAllocator.h <99:87 99:87>]
SYMBOL_FUNCTION public bool operator==(const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &, const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &) [b3AlignedAllocator.h <101:2 <101:14 101:23> 101:81>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &, const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &) -> bool [b3AlignedAllocator.h <101:9 101:12>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &, const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::self_type [b3AlignedAllocator.h <101:32 101:40>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &, const b3AlignedAllocator<typename T, unsigned int Alignment>::self_type &) -> b3AlignedAllocator<typename T, unsigned int Alignment>::self_type [b3AlignedAllocator.h <101:52 101:60>]
LOCAL_SYMBOL: b3AlignedAllocator.h<101:66> [b3AlignedAllocator.h <101:66 101:66>]
LOCAL_SYMBOL: b3AlignedAllocator.h<101:66> [b3AlignedAllocator.h <101:81 101:81>]
SYMBOL_CLASS b3AlignedAllocator<b3DynamicBvh::sStkNN, 16> [b3AlignedAllocator.h <60:1 <61:7 61:24> 102:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNN, 16> -> b3AlignedAllocator<typename T, unsigned int Alignment> [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_TYPEDEF private b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type [b3AlignedAllocator.h <63:46 63:54>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16> [b3AlignedAllocator.h <63:10 63:27>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator() [b3AlignedAllocator.h <68:2 <68:2 68:19> 68:24>]
SYMBOL_FUNCTION void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment>()
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator() -> void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment>() [b3AlignedAllocator.h <68:2 68:19>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <73:22 73:26>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) [b3AlignedAllocator.h <74:2 74:19>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator<typename Other>::Other, 16U> [b3AlignedAllocator.h <74:28 74:45>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator<typename Other>::Other, 16U> -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <74:48 74:52>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer [b3AlignedAllocator.h <76:27 76:39>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_reference [b3AlignedAllocator.h <77:27 77:41>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer [b3AlignedAllocator.h <78:27 78:33>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::reference [b3AlignedAllocator.h <79:27 79:35>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::value_type [b3AlignedAllocator.h <80:27 80:36>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
SYMBOL_FUNCTION b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer [b3AlignedAllocator.h <82:2 82:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::reference [b3AlignedAllocator.h <82:28 82:36>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
SYMBOL_FUNCTION b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer [b3AlignedAllocator.h <83:2 83:14>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_reference [b3AlignedAllocator.h <83:28 83:42>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer *) [b3AlignedAllocator.h <84:16 84:23>]
SYMBOL_FUNCTION b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) [b3AlignedAllocator.h <84:16 84:23>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer [b3AlignedAllocator.h <84:2 84:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer *) -> btSizeType [b3AlignedAllocator.h <84:28 84:37>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::const_pointer [b3AlignedAllocator.h <84:52 84:64>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
SYMBOL_FUNCTION void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::value_type &) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::value_type &) -> void [b3AlignedAllocator.h <88:2 88:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::value_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer [b3AlignedAllocator.h <88:28 88:34>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::value_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::value_type [b3AlignedAllocator.h <88:57 88:66>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer) [b3AlignedAllocator.h <89:2 <89:16 89:25> 91:2>]
SYMBOL_FUNCTION void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <89:16 89:25>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer) -> void [b3AlignedAllocator.h <89:2 89:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer) -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer [b3AlignedAllocator.h <89:28 89:34>]
REFERENCE_CALL void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer) -> void b3AlignedFreeInternal(void *) [b3AlignedAllocator.h <90:3 90:15>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer) -> void [b3AlignedAllocator.h <90:36 90:39>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
SYMBOL_FUNCTION void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer) -> void [b3AlignedAllocator.h <92:2 92:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer) -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer [b3AlignedAllocator.h <92:28 92:34>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::rebind<typename O>::O [b3AlignedAllocator.h <95:22 95:22>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::operator=<typename O>::O [b3AlignedAllocator.h <98:22 98:22>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) [b3AlignedAllocator.h <99:14 99:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type [b3AlignedAllocator.h <99:2 99:10>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::operator=<typename O>::O, 16U> [b3AlignedAllocator.h <99:31 99:48>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::operator=<typename O>::O, 16U> -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::operator=<typename O>::O [b3AlignedAllocator.h <99:51 99:51>]
SYMBOL_FUNCTION bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type &) [b3AlignedAllocator.h <101:14 101:23>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type &) -> bool [b3AlignedAllocator.h <101:9 101:12>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type [b3AlignedAllocator.h <101:32 101:40>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::self_type [b3AlignedAllocator.h <101:52 101:60>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::~b3AlignedAllocator() [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator(const b3AlignedAllocator<b3DynamicBvh::sStkNN, 16> &) [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16> &&) [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_CLASS b3AlignedAllocator<const b3DbvtNode *, 16> [b3AlignedAllocator.h <60:1 <61:7 61:24> 102:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedAllocator<const b3DbvtNode *, 16> -> b3AlignedAllocator<typename T, unsigned int Alignment> [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_TYPEDEF private b3AlignedAllocator<const b3DbvtNode *, 16>::self_type [b3AlignedAllocator.h <63:46 63:54>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::self_type -> b3AlignedAllocator<const b3DbvtNode *, 16> [b3AlignedAllocator.h <63:10 63:27>]
SYMBOL_METHOD public void b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator() [b3AlignedAllocator.h <68:2 <68:2 68:19> 68:24>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator() -> void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment>() [b3AlignedAllocator.h <68:2 68:19>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <73:22 73:26>]
SYMBOL_METHOD public void b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) [b3AlignedAllocator.h <74:2 74:19>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>::Other, 16U> [b3AlignedAllocator.h <74:28 74:45>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>::Other, 16U> -> b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <74:48 74:52>]
SYMBOL_TYPEDEF public b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer [b3AlignedAllocator.h <76:27 76:39>]
SYMBOL_TYPEDEF public b3AlignedAllocator<const b3DbvtNode *, 16>::const_reference [b3AlignedAllocator.h <77:27 77:41>]
SYMBOL_TYPEDEF public b3AlignedAllocator<const b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <78:27 78:33>]
SYMBOL_TYPEDEF public b3AlignedAllocator<const b3DbvtNode *, 16>::reference [b3AlignedAllocator.h <79:27 79:35>]
SYMBOL_TYPEDEF public b3AlignedAllocator<const b3DbvtNode *, 16>::value_type [b3AlignedAllocator.h <80:27 80:36>]
SYMBOL_METHOD public b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::address(b3AlignedAllocator<const b3DbvtNode *, 16>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::address(b3AlignedAllocator<const b3DbvtNode *, 16>::reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::address(b3AlignedAllocator<const b3DbvtNode *, 16>::reference) const -> b3AlignedAllocator<const b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <82:2 82:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::address(b3AlignedAllocator<const b3DbvtNode *, 16>::reference) const -> b3AlignedAllocator<const b3DbvtNode *, 16>::reference [b3AlignedAllocator.h <82:28 82:36>]
SYMBOL_METHOD public b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer b3AlignedAllocator<const b3DbvtNode *, 16>::address(b3AlignedAllocator<const b3DbvtNode *, 16>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer b3AlignedAllocator<const b3DbvtNode *, 16>::address(b3AlignedAllocator<const b3DbvtNode *, 16>::const_reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer b3AlignedAllocator<const b3DbvtNode *, 16>::address(b3AlignedAllocator<const b3DbvtNode *, 16>::const_reference) const -> b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer [b3AlignedAllocator.h <83:2 83:14>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer b3AlignedAllocator<const b3DbvtNode *, 16>::address(b3AlignedAllocator<const b3DbvtNode *, 16>::const_reference) const -> b3AlignedAllocator<const b3DbvtNode *, 16>::const_reference [b3AlignedAllocator.h <83:28 83:42>]
SYMBOL_METHOD public b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer *) [b3AlignedAllocator.h <84:2 <84:16 84:23> 87:2>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) [b3AlignedAllocator.h <84:16 84:23>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer *) -> b3AlignedAllocator<const b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <84:2 84:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer *) -> btSizeType [b3AlignedAllocator.h <84:28 84:37>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer *) -> b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer [b3AlignedAllocator.h <84:52 84:64>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer *) -> void [b3AlignedAllocator.h <85:4 85:7>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer *) -> b3AlignedAllocator<const b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <86:28 86:34>]
REFERENCE_CALL b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer *) -> void * b3AlignedAllocInternal(size_t, int) [b3AlignedAllocator.h <86:38 86:51>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer *) -> b3AlignedAllocator<const b3DbvtNode *, 16>::value_type [b3AlignedAllocator.h <86:61 86:70>]
SYMBOL_METHOD public void b3AlignedAllocator<const b3DbvtNode *, 16>::construct(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer, const b3AlignedAllocator<const b3DbvtNode *, 16>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<const b3DbvtNode *, 16>::construct(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer, const b3AlignedAllocator<const b3DbvtNode *, 16>::value_type &) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<const b3DbvtNode *, 16>::construct(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer, const b3AlignedAllocator<const b3DbvtNode *, 16>::value_type &) -> void [b3AlignedAllocator.h <88:2 88:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<const b3DbvtNode *, 16>::construct(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer, const b3AlignedAllocator<const b3DbvtNode *, 16>::value_type &) -> b3AlignedAllocator<const b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <88:28 88:34>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<const b3DbvtNode *, 16>::construct(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer, const b3AlignedAllocator<const b3DbvtNode *, 16>::value_type &) -> b3AlignedAllocator<const b3DbvtNode *, 16>::value_type [b3AlignedAllocator.h <88:57 88:66>]
SYMBOL_METHOD public void b3AlignedAllocator<const b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer) [b3AlignedAllocator.h <89:2 <89:16 89:25> 91:2>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<const b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <89:16 89:25>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<const b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer) -> void [b3AlignedAllocator.h <89:2 89:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<const b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer) -> b3AlignedAllocator<const b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <89:28 89:34>]
REFERENCE_CALL void b3AlignedAllocator<const b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer) -> void b3AlignedFreeInternal(void *) [b3AlignedAllocator.h <90:3 90:15>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<const b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer) -> void [b3AlignedAllocator.h <90:36 90:39>]
SYMBOL_METHOD public void b3AlignedAllocator<const b3DbvtNode *, 16>::destroy(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<const b3DbvtNode *, 16>::destroy(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<const b3DbvtNode *, 16>::destroy(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer) -> void [b3AlignedAllocator.h <92:2 92:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<const b3DbvtNode *, 16>::destroy(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer) -> b3AlignedAllocator<const b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <92:28 92:34>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<const b3DbvtNode *, 16>::rebind<typename O>::O [b3AlignedAllocator.h <95:22 95:22>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<const b3DbvtNode *, 16>::operator=<typename O>::O [b3AlignedAllocator.h <98:22 98:22>]
SYMBOL_METHOD public b3AlignedAllocator<const b3DbvtNode *, 16>::self_type & b3AlignedAllocator<const b3DbvtNode *, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) [b3AlignedAllocator.h <99:14 99:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::self_type & b3AlignedAllocator<const b3DbvtNode *, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<const b3DbvtNode *, 16>::self_type [b3AlignedAllocator.h <99:2 99:10>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16>::self_type & b3AlignedAllocator<const b3DbvtNode *, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<const b3DbvtNode *, 16>::operator=<typename O>::O, 16U> [b3AlignedAllocator.h <99:31 99:48>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<const b3DbvtNode *, 16>::operator=<typename O>::O, 16U> -> b3AlignedAllocator<const b3DbvtNode *, 16>::operator=<typename O>::O [b3AlignedAllocator.h <99:51 99:51>]
SYMBOL_FUNCTION bool operator==(const b3AlignedAllocator<const b3DbvtNode *, 16>::self_type &, const b3AlignedAllocator<const b3DbvtNode *, 16>::self_type &) [b3AlignedAllocator.h <101:14 101:23>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<const b3DbvtNode *, 16>::self_type &, const b3AlignedAllocator<const b3DbvtNode *, 16>::self_type &) -> bool [b3AlignedAllocator.h <101:9 101:12>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<const b3DbvtNode *, 16>::self_type &, const b3AlignedAllocator<const b3DbvtNode *, 16>::self_type &) -> b3AlignedAllocator<const b3DbvtNode *, 16>::self_type [b3AlignedAllocator.h <101:32 101:40>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<const b3DbvtNode *, 16>::self_type &, const b3AlignedAllocator<const b3DbvtNode *, 16>::self_type &) -> b3AlignedAllocator<const b3DbvtNode *, 16>::self_type [b3AlignedAllocator.h <101:52 101:60>]
SYMBOL_METHOD public void b3AlignedAllocator<const b3DbvtNode *, 16>::~b3AlignedAllocator() [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_METHOD public void b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator(const b3AlignedAllocator<const b3DbvtNode *, 16> &) [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_METHOD public void b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator(b3AlignedAllocator<const b3DbvtNode *, 16> &&) [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_CLASS b3AlignedAllocator<int, 16> [b3AlignedAllocator.h <60:1 <61:7 61:24> 102:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedAllocator<int, 16> -> b3AlignedAllocator<typename T, unsigned int Alignment> [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_TYPEDEF private b3AlignedAllocator<int, 16>::self_type [b3AlignedAllocator.h <63:46 63:54>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<int, 16>::self_type -> b3AlignedAllocator<int, 16> [b3AlignedAllocator.h <63:10 63:27>]
SYMBOL_METHOD public void b3AlignedAllocator<int, 16>::b3AlignedAllocator() [b3AlignedAllocator.h <68:2 68:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<int, 16>::b3AlignedAllocator() -> void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment>() [b3AlignedAllocator.h <68:2 68:19>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<int, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <73:22 73:26>]
SYMBOL_METHOD public void b3AlignedAllocator<int, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) [b3AlignedAllocator.h <74:2 74:19>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<int, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<int, 16>::b3AlignedAllocator<typename Other>::Other, 16U> [b3AlignedAllocator.h <74:28 74:45>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<int, 16>::b3AlignedAllocator<typename Other>::Other, 16U> -> b3AlignedAllocator<int, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <74:48 74:52>]
SYMBOL_TYPEDEF public b3AlignedAllocator<int, 16>::const_pointer [b3AlignedAllocator.h <76:27 76:39>]
SYMBOL_TYPEDEF public b3AlignedAllocator<int, 16>::const_reference [b3AlignedAllocator.h <77:27 77:41>]
SYMBOL_TYPEDEF public b3AlignedAllocator<int, 16>::pointer [b3AlignedAllocator.h <78:27 78:33>]
SYMBOL_TYPEDEF public b3AlignedAllocator<int, 16>::reference [b3AlignedAllocator.h <79:27 79:35>]
SYMBOL_TYPEDEF public b3AlignedAllocator<int, 16>::value_type [b3AlignedAllocator.h <80:27 80:36>]
SYMBOL_METHOD public b3AlignedAllocator<int, 16>::pointer b3AlignedAllocator<int, 16>::address(b3AlignedAllocator<int, 16>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<int, 16>::pointer b3AlignedAllocator<int, 16>::address(b3AlignedAllocator<int, 16>::reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<int, 16>::pointer b3AlignedAllocator<int, 16>::address(b3AlignedAllocator<int, 16>::reference) const -> b3AlignedAllocator<int, 16>::pointer [b3AlignedAllocator.h <82:2 82:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<int, 16>::pointer b3AlignedAllocator<int, 16>::address(b3AlignedAllocator<int, 16>::reference) const -> b3AlignedAllocator<int, 16>::reference [b3AlignedAllocator.h <82:28 82:36>]
SYMBOL_METHOD public b3AlignedAllocator<int, 16>::const_pointer b3AlignedAllocator<int, 16>::address(b3AlignedAllocator<int, 16>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<int, 16>::const_pointer b3AlignedAllocator<int, 16>::address(b3AlignedAllocator<int, 16>::const_reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<int, 16>::const_pointer b3AlignedAllocator<int, 16>::address(b3AlignedAllocator<int, 16>::const_reference) const -> b3AlignedAllocator<int, 16>::const_pointer [b3AlignedAllocator.h <83:2 83:14>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<int, 16>::const_pointer b3AlignedAllocator<int, 16>::address(b3AlignedAllocator<int, 16>::const_reference) const -> b3AlignedAllocator<int, 16>::const_reference [b3AlignedAllocator.h <83:28 83:42>]
SYMBOL_METHOD public b3AlignedAllocator<int, 16>::pointer b3AlignedAllocator<int, 16>::allocate(btSizeType, b3AlignedAllocator<int, 16>::const_pointer *) [b3AlignedAllocator.h <84:16 84:23>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<int, 16>::pointer b3AlignedAllocator<int, 16>::allocate(btSizeType, b3AlignedAllocator<int, 16>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) [b3AlignedAllocator.h <84:16 84:23>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<int, 16>::pointer b3AlignedAllocator<int, 16>::allocate(btSizeType, b3AlignedAllocator<int, 16>::const_pointer *) -> b3AlignedAllocator<int, 16>::pointer [b3AlignedAllocator.h <84:2 84:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<int, 16>::pointer b3AlignedAllocator<int, 16>::allocate(btSizeType, b3AlignedAllocator<int, 16>::const_pointer *) -> btSizeType [b3AlignedAllocator.h <84:28 84:37>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<int, 16>::pointer b3AlignedAllocator<int, 16>::allocate(btSizeType, b3AlignedAllocator<int, 16>::const_pointer *) -> b3AlignedAllocator<int, 16>::const_pointer [b3AlignedAllocator.h <84:52 84:64>]
SYMBOL_METHOD public void b3AlignedAllocator<int, 16>::construct(b3AlignedAllocator<int, 16>::pointer, const b3AlignedAllocator<int, 16>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<int, 16>::construct(b3AlignedAllocator<int, 16>::pointer, const b3AlignedAllocator<int, 16>::value_type &) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<int, 16>::construct(b3AlignedAllocator<int, 16>::pointer, const b3AlignedAllocator<int, 16>::value_type &) -> void [b3AlignedAllocator.h <88:2 88:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<int, 16>::construct(b3AlignedAllocator<int, 16>::pointer, const b3AlignedAllocator<int, 16>::value_type &) -> b3AlignedAllocator<int, 16>::pointer [b3AlignedAllocator.h <88:28 88:34>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<int, 16>::construct(b3AlignedAllocator<int, 16>::pointer, const b3AlignedAllocator<int, 16>::value_type &) -> b3AlignedAllocator<int, 16>::value_type [b3AlignedAllocator.h <88:57 88:66>]
SYMBOL_METHOD public void b3AlignedAllocator<int, 16>::deallocate(b3AlignedAllocator<int, 16>::pointer) [b3AlignedAllocator.h <89:16 89:25>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<int, 16>::deallocate(b3AlignedAllocator<int, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <89:16 89:25>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<int, 16>::deallocate(b3AlignedAllocator<int, 16>::pointer) -> void [b3AlignedAllocator.h <89:2 89:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<int, 16>::deallocate(b3AlignedAllocator<int, 16>::pointer) -> b3AlignedAllocator<int, 16>::pointer [b3AlignedAllocator.h <89:28 89:34>]
SYMBOL_METHOD public void b3AlignedAllocator<int, 16>::destroy(b3AlignedAllocator<int, 16>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<int, 16>::destroy(b3AlignedAllocator<int, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<int, 16>::destroy(b3AlignedAllocator<int, 16>::pointer) -> void [b3AlignedAllocator.h <92:2 92:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<int, 16>::destroy(b3AlignedAllocator<int, 16>::pointer) -> b3AlignedAllocator<int, 16>::pointer [b3AlignedAllocator.h <92:28 92:34>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<int, 16>::rebind<typename O>::O [b3AlignedAllocator.h <95:22 95:22>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<int, 16>::operator=<typename O>::O [b3AlignedAllocator.h <98:22 98:22>]
SYMBOL_METHOD public b3AlignedAllocator<int, 16>::self_type & b3AlignedAllocator<int, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) [b3AlignedAllocator.h <99:14 99:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<int, 16>::self_type & b3AlignedAllocator<int, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<int, 16>::self_type [b3AlignedAllocator.h <99:2 99:10>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<int, 16>::self_type & b3AlignedAllocator<int, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<int, 16>::operator=<typename O>::O, 16U> [b3AlignedAllocator.h <99:31 99:48>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<int, 16>::operator=<typename O>::O, 16U> -> b3AlignedAllocator<int, 16>::operator=<typename O>::O [b3AlignedAllocator.h <99:51 99:51>]
SYMBOL_FUNCTION bool operator==(const b3AlignedAllocator<int, 16>::self_type &, const b3AlignedAllocator<int, 16>::self_type &) [b3AlignedAllocator.h <101:14 101:23>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<int, 16>::self_type &, const b3AlignedAllocator<int, 16>::self_type &) -> bool [b3AlignedAllocator.h <101:9 101:12>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<int, 16>::self_type &, const b3AlignedAllocator<int, 16>::self_type &) -> b3AlignedAllocator<int, 16>::self_type [b3AlignedAllocator.h <101:32 101:40>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<int, 16>::self_type &, const b3AlignedAllocator<int, 16>::self_type &) -> b3AlignedAllocator<int, 16>::self_type [b3AlignedAllocator.h <101:52 101:60>]
SYMBOL_METHOD public void b3AlignedAllocator<int, 16>::~b3AlignedAllocator() [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_CLASS b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16> [b3AlignedAllocator.h <60:1 <61:7 61:24> 102:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16> -> b3AlignedAllocator<typename T, unsigned int Alignment> [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_TYPEDEF private b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type [b3AlignedAllocator.h <63:46 63:54>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16> [b3AlignedAllocator.h <63:10 63:27>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::b3AlignedAllocator() [b3AlignedAllocator.h <68:2 68:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::b3AlignedAllocator() -> void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment>() [b3AlignedAllocator.h <68:2 68:19>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <73:22 73:26>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) [b3AlignedAllocator.h <74:2 74:19>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::b3AlignedAllocator<typename Other>::Other, 16U> [b3AlignedAllocator.h <74:28 74:45>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::b3AlignedAllocator<typename Other>::Other, 16U> -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <74:48 74:52>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer [b3AlignedAllocator.h <76:27 76:39>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_reference [b3AlignedAllocator.h <77:27 77:41>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer [b3AlignedAllocator.h <78:27 78:33>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::reference [b3AlignedAllocator.h <79:27 79:35>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::value_type [b3AlignedAllocator.h <80:27 80:36>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer [b3AlignedAllocator.h <82:2 82:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::reference [b3AlignedAllocator.h <82:28 82:36>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer [b3AlignedAllocator.h <83:2 83:14>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_reference [b3AlignedAllocator.h <83:28 83:42>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer *) [b3AlignedAllocator.h <84:2 <84:16 84:23> 87:2>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) [b3AlignedAllocator.h <84:16 84:23>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer [b3AlignedAllocator.h <84:2 84:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer *) -> btSizeType [b3AlignedAllocator.h <84:28 84:37>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer [b3AlignedAllocator.h <84:52 84:64>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer *) -> void [b3AlignedAllocator.h <85:4 85:7>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer [b3AlignedAllocator.h <86:28 86:34>]
REFERENCE_CALL b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer *) -> void * b3AlignedAllocInternal(size_t, int) [b3AlignedAllocator.h <86:38 86:51>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::value_type [b3AlignedAllocator.h <86:61 86:70>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::value_type &) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::value_type &) -> void [b3AlignedAllocator.h <88:2 88:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::value_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer [b3AlignedAllocator.h <88:28 88:34>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::value_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::value_type [b3AlignedAllocator.h <88:57 88:66>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer) [b3AlignedAllocator.h <89:2 <89:16 89:25> 91:2>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <89:16 89:25>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer) -> void [b3AlignedAllocator.h <89:2 89:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer [b3AlignedAllocator.h <89:28 89:34>]
REFERENCE_CALL void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer) -> void b3AlignedFreeInternal(void *) [b3AlignedAllocator.h <90:3 90:15>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer) -> void [b3AlignedAllocator.h <90:36 90:39>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer) -> void [b3AlignedAllocator.h <92:2 92:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer [b3AlignedAllocator.h <92:28 92:34>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::rebind<typename O>::O [b3AlignedAllocator.h <95:22 95:22>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::operator=<typename O>::O [b3AlignedAllocator.h <98:22 98:22>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) [b3AlignedAllocator.h <99:14 99:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type [b3AlignedAllocator.h <99:2 99:10>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::operator=<typename O>::O, 16U> [b3AlignedAllocator.h <99:31 99:48>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::operator=<typename O>::O, 16U> -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::operator=<typename O>::O [b3AlignedAllocator.h <99:51 99:51>]
SYMBOL_FUNCTION bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type &) [b3AlignedAllocator.h <101:14 101:23>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type &) -> bool [b3AlignedAllocator.h <101:9 101:12>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type [b3AlignedAllocator.h <101:32 101:40>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::self_type [b3AlignedAllocator.h <101:52 101:60>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::~b3AlignedAllocator() [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_CLASS b3AlignedAllocator<b3DynamicBvh::sStkNP, 16> [b3AlignedAllocator.h <60:1 <61:7 61:24> 102:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNP, 16> -> b3AlignedAllocator<typename T, unsigned int Alignment> [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_TYPEDEF private b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type [b3AlignedAllocator.h <63:46 63:54>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16> [b3AlignedAllocator.h <63:10 63:27>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::b3AlignedAllocator() [b3AlignedAllocator.h <68:2 68:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::b3AlignedAllocator() -> void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment>() [b3AlignedAllocator.h <68:2 68:19>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <73:22 73:26>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) [b3AlignedAllocator.h <74:2 74:19>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::b3AlignedAllocator<typename Other>::Other, 16U> [b3AlignedAllocator.h <74:28 74:45>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::b3AlignedAllocator<typename Other>::Other, 16U> -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <74:48 74:52>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer [b3AlignedAllocator.h <76:27 76:39>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_reference [b3AlignedAllocator.h <77:27 77:41>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer [b3AlignedAllocator.h <78:27 78:33>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::reference [b3AlignedAllocator.h <79:27 79:35>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::value_type [b3AlignedAllocator.h <80:27 80:36>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer [b3AlignedAllocator.h <82:2 82:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::reference [b3AlignedAllocator.h <82:28 82:36>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer [b3AlignedAllocator.h <83:2 83:14>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_reference [b3AlignedAllocator.h <83:28 83:42>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer *) [b3AlignedAllocator.h <84:16 84:23>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) [b3AlignedAllocator.h <84:16 84:23>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer [b3AlignedAllocator.h <84:2 84:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer *) -> btSizeType [b3AlignedAllocator.h <84:28 84:37>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::const_pointer [b3AlignedAllocator.h <84:52 84:64>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::value_type &) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::value_type &) -> void [b3AlignedAllocator.h <88:2 88:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::value_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer [b3AlignedAllocator.h <88:28 88:34>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::value_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::value_type [b3AlignedAllocator.h <88:57 88:66>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer) [b3AlignedAllocator.h <89:16 89:25>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <89:16 89:25>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer) -> void [b3AlignedAllocator.h <89:2 89:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer) -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer [b3AlignedAllocator.h <89:28 89:34>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer) -> void [b3AlignedAllocator.h <92:2 92:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer) -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::pointer [b3AlignedAllocator.h <92:28 92:34>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::rebind<typename O>::O [b3AlignedAllocator.h <95:22 95:22>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::operator=<typename O>::O [b3AlignedAllocator.h <98:22 98:22>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) [b3AlignedAllocator.h <99:14 99:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type [b3AlignedAllocator.h <99:2 99:10>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::operator=<typename O>::O, 16U> [b3AlignedAllocator.h <99:31 99:48>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::operator=<typename O>::O, 16U> -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::operator=<typename O>::O [b3AlignedAllocator.h <99:51 99:51>]
SYMBOL_FUNCTION bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type &) [b3AlignedAllocator.h <101:14 101:23>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type &) -> bool [b3AlignedAllocator.h <101:9 101:12>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type [b3AlignedAllocator.h <101:32 101:40>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::self_type [b3AlignedAllocator.h <101:52 101:60>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkNP, 16>::~b3AlignedAllocator() [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_CLASS b3AlignedAllocator<b3DbvtNode *, 16> [b3AlignedAllocator.h <60:1 <61:7 61:24> 102:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedAllocator<b3DbvtNode *, 16> -> b3AlignedAllocator<typename T, unsigned int Alignment> [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_TYPEDEF private b3AlignedAllocator<b3DbvtNode *, 16>::self_type [b3AlignedAllocator.h <63:46 63:54>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::self_type -> b3AlignedAllocator<b3DbvtNode *, 16> [b3AlignedAllocator.h <63:10 63:27>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator() [b3AlignedAllocator.h <68:2 <68:2 68:19> 68:24>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator() -> void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment>() [b3AlignedAllocator.h <68:2 68:19>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <73:22 73:26>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) [b3AlignedAllocator.h <74:2 74:19>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>::Other, 16U> [b3AlignedAllocator.h <74:28 74:45>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>::Other, 16U> -> b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <74:48 74:52>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer [b3AlignedAllocator.h <76:27 76:39>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DbvtNode *, 16>::const_reference [b3AlignedAllocator.h <77:27 77:41>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <78:27 78:33>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DbvtNode *, 16>::reference [b3AlignedAllocator.h <79:27 79:35>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DbvtNode *, 16>::value_type [b3AlignedAllocator.h <80:27 80:36>]
SYMBOL_METHOD public b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::address(b3AlignedAllocator<b3DbvtNode *, 16>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::address(b3AlignedAllocator<b3DbvtNode *, 16>::reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::address(b3AlignedAllocator<b3DbvtNode *, 16>::reference) const -> b3AlignedAllocator<b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <82:2 82:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::address(b3AlignedAllocator<b3DbvtNode *, 16>::reference) const -> b3AlignedAllocator<b3DbvtNode *, 16>::reference [b3AlignedAllocator.h <82:28 82:36>]
SYMBOL_METHOD public b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer b3AlignedAllocator<b3DbvtNode *, 16>::address(b3AlignedAllocator<b3DbvtNode *, 16>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer b3AlignedAllocator<b3DbvtNode *, 16>::address(b3AlignedAllocator<b3DbvtNode *, 16>::const_reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer b3AlignedAllocator<b3DbvtNode *, 16>::address(b3AlignedAllocator<b3DbvtNode *, 16>::const_reference) const -> b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer [b3AlignedAllocator.h <83:2 83:14>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer b3AlignedAllocator<b3DbvtNode *, 16>::address(b3AlignedAllocator<b3DbvtNode *, 16>::const_reference) const -> b3AlignedAllocator<b3DbvtNode *, 16>::const_reference [b3AlignedAllocator.h <83:28 83:42>]
SYMBOL_METHOD public b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer *) [b3AlignedAllocator.h <84:2 <84:16 84:23> 87:2>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) [b3AlignedAllocator.h <84:16 84:23>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer *) -> b3AlignedAllocator<b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <84:2 84:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer *) -> btSizeType [b3AlignedAllocator.h <84:28 84:37>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer *) -> b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer [b3AlignedAllocator.h <84:52 84:64>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer *) -> void [b3AlignedAllocator.h <85:4 85:7>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer *) -> b3AlignedAllocator<b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <86:28 86:34>]
REFERENCE_CALL b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer *) -> void * b3AlignedAllocInternal(size_t, int) [b3AlignedAllocator.h <86:38 86:51>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer *) -> b3AlignedAllocator<b3DbvtNode *, 16>::value_type [b3AlignedAllocator.h <86:61 86:70>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DbvtNode *, 16>::construct(b3AlignedAllocator<b3DbvtNode *, 16>::pointer, const b3AlignedAllocator<b3DbvtNode *, 16>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DbvtNode *, 16>::construct(b3AlignedAllocator<b3DbvtNode *, 16>::pointer, const b3AlignedAllocator<b3DbvtNode *, 16>::value_type &) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DbvtNode *, 16>::construct(b3AlignedAllocator<b3DbvtNode *, 16>::pointer, const b3AlignedAllocator<b3DbvtNode *, 16>::value_type &) -> void [b3AlignedAllocator.h <88:2 88:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DbvtNode *, 16>::construct(b3AlignedAllocator<b3DbvtNode *, 16>::pointer, const b3AlignedAllocator<b3DbvtNode *, 16>::value_type &) -> b3AlignedAllocator<b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <88:28 88:34>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DbvtNode *, 16>::construct(b3AlignedAllocator<b3DbvtNode *, 16>::pointer, const b3AlignedAllocator<b3DbvtNode *, 16>::value_type &) -> b3AlignedAllocator<b3DbvtNode *, 16>::value_type [b3AlignedAllocator.h <88:57 88:66>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<b3DbvtNode *, 16>::pointer) [b3AlignedAllocator.h <89:2 <89:16 89:25> 91:2>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<b3DbvtNode *, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <89:16 89:25>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<b3DbvtNode *, 16>::pointer) -> void [b3AlignedAllocator.h <89:2 89:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<b3DbvtNode *, 16>::pointer) -> b3AlignedAllocator<b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <89:28 89:34>]
REFERENCE_CALL void b3AlignedAllocator<b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<b3DbvtNode *, 16>::pointer) -> void b3AlignedFreeInternal(void *) [b3AlignedAllocator.h <90:3 90:15>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<b3DbvtNode *, 16>::pointer) -> void [b3AlignedAllocator.h <90:36 90:39>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DbvtNode *, 16>::destroy(b3AlignedAllocator<b3DbvtNode *, 16>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DbvtNode *, 16>::destroy(b3AlignedAllocator<b3DbvtNode *, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DbvtNode *, 16>::destroy(b3AlignedAllocator<b3DbvtNode *, 16>::pointer) -> void [b3AlignedAllocator.h <92:2 92:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DbvtNode *, 16>::destroy(b3AlignedAllocator<b3DbvtNode *, 16>::pointer) -> b3AlignedAllocator<b3DbvtNode *, 16>::pointer [b3AlignedAllocator.h <92:28 92:34>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DbvtNode *, 16>::rebind<typename O>::O [b3AlignedAllocator.h <95:22 95:22>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DbvtNode *, 16>::operator=<typename O>::O [b3AlignedAllocator.h <98:22 98:22>]
SYMBOL_METHOD public b3AlignedAllocator<b3DbvtNode *, 16>::self_type & b3AlignedAllocator<b3DbvtNode *, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) [b3AlignedAllocator.h <99:14 99:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::self_type & b3AlignedAllocator<b3DbvtNode *, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3DbvtNode *, 16>::self_type [b3AlignedAllocator.h <99:2 99:10>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16>::self_type & b3AlignedAllocator<b3DbvtNode *, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<b3DbvtNode *, 16>::operator=<typename O>::O, 16U> [b3AlignedAllocator.h <99:31 99:48>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<b3DbvtNode *, 16>::operator=<typename O>::O, 16U> -> b3AlignedAllocator<b3DbvtNode *, 16>::operator=<typename O>::O [b3AlignedAllocator.h <99:51 99:51>]
SYMBOL_FUNCTION bool operator==(const b3AlignedAllocator<b3DbvtNode *, 16>::self_type &, const b3AlignedAllocator<b3DbvtNode *, 16>::self_type &) [b3AlignedAllocator.h <101:14 101:23>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DbvtNode *, 16>::self_type &, const b3AlignedAllocator<b3DbvtNode *, 16>::self_type &) -> bool [b3AlignedAllocator.h <101:9 101:12>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DbvtNode *, 16>::self_type &, const b3AlignedAllocator<b3DbvtNode *, 16>::self_type &) -> b3AlignedAllocator<b3DbvtNode *, 16>::self_type [b3AlignedAllocator.h <101:32 101:40>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DbvtNode *, 16>::self_type &, const b3AlignedAllocator<b3DbvtNode *, 16>::self_type &) -> b3AlignedAllocator<b3DbvtNode *, 16>::self_type [b3AlignedAllocator.h <101:52 101:60>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DbvtNode *, 16>::~b3AlignedAllocator() [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator(const b3AlignedAllocator<b3DbvtNode *, 16> &) [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator(b3AlignedAllocator<b3DbvtNode *, 16> &&) [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_CLASS b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> [b3AlignedAllocator.h <60:1 <61:7 61:24> 102:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> -> b3AlignedAllocator<typename T, unsigned int Alignment> [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_TYPEDEF private b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type [b3AlignedAllocator.h <63:46 63:54>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> [b3AlignedAllocator.h <63:10 63:27>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator() [b3AlignedAllocator.h <68:2 <68:2 68:19> 68:24>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator() -> void b3AlignedAllocator<typename T, unsigned int Alignment>::b3AlignedAllocator<T, Alignment>() [b3AlignedAllocator.h <68:2 68:19>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <73:22 73:26>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) [b3AlignedAllocator.h <74:2 74:19>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator<typename Other>(const b3AlignedAllocator<Other, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator<typename Other>::Other, 16U> [b3AlignedAllocator.h <74:28 74:45>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator<typename Other>::Other, 16U> -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator<typename Other>::Other [b3AlignedAllocator.h <74:48 74:52>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer [b3AlignedAllocator.h <76:27 76:39>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_reference [b3AlignedAllocator.h <77:27 77:41>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer [b3AlignedAllocator.h <78:27 78:33>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::reference [b3AlignedAllocator.h <79:27 79:35>]
SYMBOL_TYPEDEF public b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::value_type [b3AlignedAllocator.h <80:27 80:36>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::reference) const [b3AlignedAllocator.h <82:16 82:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer [b3AlignedAllocator.h <82:2 82:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::reference [b3AlignedAllocator.h <82:28 82:36>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_reference) const -> b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer b3AlignedAllocator<typename T, unsigned int Alignment>::address(b3AlignedAllocator<typename T, unsigned int Alignment>::const_reference) const [b3AlignedAllocator.h <83:16 83:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer [b3AlignedAllocator.h <83:2 83:14>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::address(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_reference) const -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_reference [b3AlignedAllocator.h <83:28 83:42>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer *) [b3AlignedAllocator.h <84:2 <84:16 84:23> 87:2>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer *) -> b3AlignedAllocator<typename T, unsigned int Alignment>::pointer b3AlignedAllocator<typename T, unsigned int Alignment>::allocate(btSizeType, b3AlignedAllocator<typename T, unsigned int Alignment>::const_pointer *) [b3AlignedAllocator.h <84:16 84:23>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer [b3AlignedAllocator.h <84:2 84:8>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer *) -> btSizeType [b3AlignedAllocator.h <84:28 84:37>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer [b3AlignedAllocator.h <84:52 84:64>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer *) -> void [b3AlignedAllocator.h <85:4 85:7>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer [b3AlignedAllocator.h <86:28 86:34>]
REFERENCE_CALL b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer *) -> void * b3AlignedAllocInternal(size_t, int) [b3AlignedAllocator.h <86:38 86:51>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer *) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::value_type [b3AlignedAllocator.h <86:61 86:70>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::value_type &) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::construct(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer, const b3AlignedAllocator<typename T, unsigned int Alignment>::value_type &) [b3AlignedAllocator.h <88:16 88:24>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::value_type &) -> void [b3AlignedAllocator.h <88:2 88:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::value_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer [b3AlignedAllocator.h <88:28 88:34>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::construct(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer, const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::value_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::value_type [b3AlignedAllocator.h <88:57 88:66>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer) [b3AlignedAllocator.h <89:2 <89:16 89:25> 91:2>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::deallocate(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <89:16 89:25>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer) -> void [b3AlignedAllocator.h <89:2 89:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer [b3AlignedAllocator.h <89:28 89:34>]
REFERENCE_CALL void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer) -> void b3AlignedFreeInternal(void *) [b3AlignedAllocator.h <90:3 90:15>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer) -> void [b3AlignedAllocator.h <90:36 90:39>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer) -> void b3AlignedAllocator<typename T, unsigned int Alignment>::destroy(b3AlignedAllocator<typename T, unsigned int Alignment>::pointer) [b3AlignedAllocator.h <92:16 92:22>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer) -> void [b3AlignedAllocator.h <92:2 92:5>]
REFERENCE_TYPE_USAGE void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::destroy(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer [b3AlignedAllocator.h <92:28 92:34>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::rebind<typename O>::O [b3AlignedAllocator.h <95:22 95:22>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::operator=<typename O>::O [b3AlignedAllocator.h <98:22 98:22>]
SYMBOL_METHOD public b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) [b3AlignedAllocator.h <99:14 99:22>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type [b3AlignedAllocator.h <99:2 99:10>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type & b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::operator=<typename O>(const b3AlignedAllocator<O, 16U> &) -> b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::operator=<typename O>::O, 16U> [b3AlignedAllocator.h <99:31 99:48>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::operator=<typename O>::O, 16U> -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::operator=<typename O>::O [b3AlignedAllocator.h <99:51 99:51>]
SYMBOL_FUNCTION bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type &) [b3AlignedAllocator.h <101:14 101:23>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type &) -> bool [b3AlignedAllocator.h <101:9 101:12>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type [b3AlignedAllocator.h <101:32 101:40>]
REFERENCE_TYPE_USAGE bool operator==(const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type &, const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type &) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::self_type [b3AlignedAllocator.h <101:52 101:60>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::~b3AlignedAllocator() [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator(const b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> &) [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_METHOD public void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> &&) [b3AlignedAllocator.h <61:7 61:24>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <45:20 45:20>]
SYMBOL_CLASS b3AlignedObjectArray<typename T> [b3AlignedObjectArray.h <45:1 <47:7 47:26> 531:1>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<48:1> [b3AlignedObjectArray.h <48:1 48:1>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<48:1> [b3AlignedObjectArray.h <531:1 531:1>]
SYMBOL_FIELD private b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator -> b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> [b3AlignedObjectArray.h <49:2 49:19>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <49:21 49:21>]
SYMBOL_FIELD private int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::m_size -> int [b3AlignedObjectArray.h <51:2 51:4>]
SYMBOL_FIELD private int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::m_capacity -> int [b3AlignedObjectArray.h <52:2 52:4>]
SYMBOL_FIELD private b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <53:2 53:2>]
SYMBOL_FIELD private bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TYPE_USAGE bool b3AlignedObjectArray<typename T>::m_ownsMemory -> bool [b3AlignedObjectArray.h <55:2 55:5>]
SYMBOL_METHOD public b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <59:2 <59:43 59:51> 63:2>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &) -> b3AlignedObjectArray<T> [b3AlignedObjectArray.h <59:18 59:37>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<T> -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <59:39 59:39>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<59:84> [b3AlignedObjectArray.h <59:84 59:88>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &) -> b3AlignedObjectArray<T> [b3AlignedObjectArray.h <59:59 59:78>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<T> -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <59:80 59:80>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<60:2> [b3AlignedObjectArray.h <60:2 60:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<60:2> [b3AlignedObjectArray.h <63:2 63:2>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &)
REFERENCE_CALL b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &) -> void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <61:3 61:15>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<59:84> [b3AlignedObjectArray.h <61:17 61:21>]
SYMBOL_METHOD protected int b3AlignedObjectArray<typename T>::allocSize(int) [b3AlignedObjectArray.h <70:3 <70:23 70:31> 73:3>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::allocSize(int) -> int [b3AlignedObjectArray.h <70:19 70:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<70:37> [b3AlignedObjectArray.h <70:37 70:40>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::allocSize(int) -> int [b3AlignedObjectArray.h <70:33 70:35>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<71:3> [b3AlignedObjectArray.h <71:3 71:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<71:3> [b3AlignedObjectArray.h <73:3 73:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<70:37> [b3AlignedObjectArray.h <72:12 72:15>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<70:37> [b3AlignedObjectArray.h <72:19 72:22>]
SYMBOL_METHOD protected void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const [b3AlignedObjectArray.h <74:3 <74:24 74:27> 83:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const -> void [b3AlignedObjectArray.h <74:19 74:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<74:33> [b3AlignedObjectArray.h <74:33 74:37>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const -> int [b3AlignedObjectArray.h <74:29 74:31>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<74:43> [b3AlignedObjectArray.h <74:43 74:45>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const -> int [b3AlignedObjectArray.h <74:39 74:41>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<74:51> [b3AlignedObjectArray.h <74:51 74:54>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <74:48 74:48>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<75:3> [b3AlignedObjectArray.h <75:3 75:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<75:3> [b3AlignedObjectArray.h <83:3 83:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<76:8> [b3AlignedObjectArray.h <76:8 76:8>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const -> int [b3AlignedObjectArray.h <76:4 76:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<76:8> [b3AlignedObjectArray.h <77:9 77:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<74:33> [b3AlignedObjectArray.h <77:11 77:15>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<76:8> [b3AlignedObjectArray.h <77:17 77:17>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<74:43> [b3AlignedObjectArray.h <77:19 77:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<76:8> [b3AlignedObjectArray.h <77:25 77:25>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <79:20 79:20>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <79:22 79:27>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<76:8> [b3AlignedObjectArray.h <79:29 79:29>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<74:51> [b3AlignedObjectArray.h <79:11 79:14>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<76:8> [b3AlignedObjectArray.h <79:16 79:16>]
SYMBOL_METHOD protected void b3AlignedObjectArray<typename T>::init() [b3AlignedObjectArray.h <85:3 <85:24 85:27> 92:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::init() -> void [b3AlignedObjectArray.h <85:19 85:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<86:3> [b3AlignedObjectArray.h <86:3 86:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<86:3> [b3AlignedObjectArray.h <92:3 92:3>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::init() -> bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <88:4 88:15>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::init() -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <89:4 89:9>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::init() -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <90:4 90:9>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::init() -> int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <91:4 91:13>]
SYMBOL_METHOD protected void b3AlignedObjectArray<typename T>::destroy(int, int) [b3AlignedObjectArray.h <93:3 <93:24 93:30> 100:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::destroy(int, int) -> void [b3AlignedObjectArray.h <93:19 93:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<93:36> [b3AlignedObjectArray.h <93:36 93:40>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:32 93:34>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<93:46> [b3AlignedObjectArray.h <93:46 93:49>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:42 93:44>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<94:3> [b3AlignedObjectArray.h <94:3 94:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<94:3> [b3AlignedObjectArray.h <100:3 100:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<95:8> [b3AlignedObjectArray.h <95:8 95:8>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::destroy(int, int) -> int [b3AlignedObjectArray.h <95:4 95:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<95:8> [b3AlignedObjectArray.h <96:9 96:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<93:36> [b3AlignedObjectArray.h <96:11 96:15>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<95:8> [b3AlignedObjectArray.h <96:18 96:18>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<93:46> [b3AlignedObjectArray.h <96:20 96:23>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<95:8> [b3AlignedObjectArray.h <96:25 96:25>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<97:4> [b3AlignedObjectArray.h <97:4 97:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<97:4> [b3AlignedObjectArray.h <99:4 99:4>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::destroy(int, int) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <98:16 98:16>]
SYMBOL_FUNCTION b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data
REFERENCE_CALL void b3AlignedObjectArray<typename T>::destroy(int, int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <98:5 98:10>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<95:8> [b3AlignedObjectArray.h <98:12 98:12>]
SYMBOL_METHOD protected void * b3AlignedObjectArray<typename T>::allocate(int) [b3AlignedObjectArray.h <102:3 <102:25 102:32> 107:3>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<typename T>::allocate(int) -> void [b3AlignedObjectArray.h <102:19 102:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<102:38> [b3AlignedObjectArray.h <102:38 102:41>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<typename T>::allocate(int) -> int [b3AlignedObjectArray.h <102:34 102:36>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<103:3> [b3AlignedObjectArray.h <103:3 103:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<103:3> [b3AlignedObjectArray.h <107:3 107:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<102:38> [b3AlignedObjectArray.h <104:8 104:11>]
REFERENCE_USAGE void * b3AlignedObjectArray<typename T>::allocate(int) -> b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator [b3AlignedObjectArray.h <105:12 105:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<102:38> [b3AlignedObjectArray.h <105:33 105:36>]
SYMBOL_METHOD protected void b3AlignedObjectArray<typename T>::deallocate() [b3AlignedObjectArray.h <109:3 <109:24 109:33> 119:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::deallocate() -> void [b3AlignedObjectArray.h <109:19 109:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<110:3> [b3AlignedObjectArray.h <110:3 110:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<110:3> [b3AlignedObjectArray.h <119:3 119:3>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::deallocate() -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <111:7 111:12>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<111:15> [b3AlignedObjectArray.h <111:15 111:15>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<111:15> [b3AlignedObjectArray.h <118:4 118:4>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::deallocate() -> bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <113:9 113:20>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<114:5> [b3AlignedObjectArray.h <114:5 114:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<114:5> [b3AlignedObjectArray.h <116:5 116:5>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::deallocate() -> b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator [b3AlignedObjectArray.h <115:6 115:16>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::deallocate() -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <115:29 115:34>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::deallocate() -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <117:5 117:10>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <126:3 <126:3 126:22> 129:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<127:3> [b3AlignedObjectArray.h <127:3 127:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<127:3> [b3AlignedObjectArray.h <129:3 129:3>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::init()
REFERENCE_CALL void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>() -> void b3AlignedObjectArray<typename T>::init() [b3AlignedObjectArray.h <128:4 128:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::~b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <131:3 <131:3 131:23> 134:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<132:3> [b3AlignedObjectArray.h <132:3 132:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<132:3> [b3AlignedObjectArray.h <134:3 134:3>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::clear()
REFERENCE_CALL void b3AlignedObjectArray<typename T>::~b3AlignedObjectArray<T>() -> void b3AlignedObjectArray<typename T>::clear() [b3AlignedObjectArray.h <133:4 133:8>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <137:3 <137:3 137:22> 144:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<137:52> [b3AlignedObjectArray.h <137:52 137:61>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) -> b3AlignedObjectArray<T> [b3AlignedObjectArray.h <137:30 137:49>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<138:3> [b3AlignedObjectArray.h <138:3 138:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<138:3> [b3AlignedObjectArray.h <144:3 144:3>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) -> void b3AlignedObjectArray<typename T>::init() [b3AlignedObjectArray.h <139:4 139:7>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<141:8> [b3AlignedObjectArray.h <141:8 141:16>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) -> int [b3AlignedObjectArray.h <141:4 141:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<137:52> [b3AlignedObjectArray.h <141:20 141:29>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &)
REFERENCE_CALL void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) -> void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <142:4 142:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<141:8> [b3AlignedObjectArray.h <142:12 142:20>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<137:52> [b3AlignedObjectArray.h <143:4 143:13>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<141:8> [b3AlignedObjectArray.h <143:23 143:31>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <143:34 143:39>]
SYMBOL_METHOD public int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <149:3 <149:23 149:26> 152:3>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::size() const -> int [b3AlignedObjectArray.h <149:19 149:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<150:3> [b3AlignedObjectArray.h <150:3 150:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<150:3> [b3AlignedObjectArray.h <152:3 152:3>]
REFERENCE_USAGE int b3AlignedObjectArray<typename T>::size() const -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <151:11 151:16>]
SYMBOL_METHOD public const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const [b3AlignedObjectArray.h <154:3 <154:28 154:29> 159:3>]
REFERENCE_TYPE_USAGE const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <154:25 154:25>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<154:35> [b3AlignedObjectArray.h <154:35 154:35>]
REFERENCE_TYPE_USAGE const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const -> int [b3AlignedObjectArray.h <154:31 154:33>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<155:3> [b3AlignedObjectArray.h <155:3 155:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<155:3> [b3AlignedObjectArray.h <159:3 159:3>]
REFERENCE_USAGE const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <158:11 158:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<154:35> [b3AlignedObjectArray.h <158:18 158:18>]
SYMBOL_METHOD public b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) [b3AlignedObjectArray.h <161:3 <161:22 161:23> 166:3>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <161:19 161:19>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<161:29> [b3AlignedObjectArray.h <161:29 161:29>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) -> int [b3AlignedObjectArray.h <161:25 161:27>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<162:3> [b3AlignedObjectArray.h <162:3 162:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<162:3> [b3AlignedObjectArray.h <166:3 166:3>]
REFERENCE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <165:11 165:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<161:29> [b3AlignedObjectArray.h <165:18 165:18>]
SYMBOL_METHOD public const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const [b3AlignedObjectArray.h <168:3 <168:28 168:37> 173:3>]
REFERENCE_TYPE_USAGE const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <168:25 168:25>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<168:43> [b3AlignedObjectArray.h <168:43 168:43>]
REFERENCE_TYPE_USAGE const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const -> int [b3AlignedObjectArray.h <168:39 168:41>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<169:3> [b3AlignedObjectArray.h <169:3 169:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<169:3> [b3AlignedObjectArray.h <173:3 173:3>]
REFERENCE_USAGE const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <172:11 172:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<168:43> [b3AlignedObjectArray.h <172:18 172:18>]
SYMBOL_METHOD public b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) [b3AlignedObjectArray.h <175:3 <175:22 175:31> 180:3>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <175:19 175:19>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<175:37> [b3AlignedObjectArray.h <175:37 175:37>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) -> int [b3AlignedObjectArray.h <175:33 175:35>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<176:3> [b3AlignedObjectArray.h <176:3 176:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<176:3> [b3AlignedObjectArray.h <180:3 180:3>]
REFERENCE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <179:11 179:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<175:37> [b3AlignedObjectArray.h <179:18 179:18>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::clear() [b3AlignedObjectArray.h <184:3 <184:24 184:28> 191:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::clear() -> void [b3AlignedObjectArray.h <184:19 184:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<185:3> [b3AlignedObjectArray.h <185:3 185:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<185:3> [b3AlignedObjectArray.h <191:3 191:3>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::destroy(int, int)
REFERENCE_CALL void b3AlignedObjectArray<typename T>::clear() -> void b3AlignedObjectArray<typename T>::destroy(int, int) [b3AlignedObjectArray.h <186:4 186:10>]
SYMBOL_FUNCTION int b3AlignedObjectArray<typename T>::size() const
REFERENCE_CALL void b3AlignedObjectArray<typename T>::clear() -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <186:14 186:17>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::deallocate()
REFERENCE_CALL void b3AlignedObjectArray<typename T>::clear() -> void b3AlignedObjectArray<typename T>::deallocate() [b3AlignedObjectArray.h <188:4 188:13>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::clear() -> void b3AlignedObjectArray<typename T>::init() [b3AlignedObjectArray.h <190:4 190:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::pop_back() [b3AlignedObjectArray.h <193:3 <193:24 193:31> 198:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::pop_back() -> void [b3AlignedObjectArray.h <193:19 193:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<194:3> [b3AlignedObjectArray.h <194:3 194:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<194:3> [b3AlignedObjectArray.h <198:3 198:3>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::pop_back() -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <196:4 196:9>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::pop_back() -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <197:20 197:20>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::pop_back() -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <197:4 197:9>]
SYMBOL_FUNCTION int b3AlignedObjectArray<typename T>::m_size
REFERENCE_CALL void b3AlignedObjectArray<typename T>::pop_back() -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <197:11 197:16>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:3 <203:24 203:41> 218:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) -> void [b3AlignedObjectArray.h <203:19 203:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<203:47> [b3AlignedObjectArray.h <203:47 203:53>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) -> int [b3AlignedObjectArray.h <203:43 203:45>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<204:3> [b3AlignedObjectArray.h <204:3 204:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<204:3> [b3AlignedObjectArray.h <218:3 218:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<205:8> [b3AlignedObjectArray.h <205:8 205:14>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) -> int [b3AlignedObjectArray.h <205:4 205:6>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <205:18 205:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<203:47> [b3AlignedObjectArray.h <207:8 207:14>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<205:8> [b3AlignedObjectArray.h <207:18 207:24>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<208:4> [b3AlignedObjectArray.h <208:4 208:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<208:4> [b3AlignedObjectArray.h <209:4 209:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<210:4> [b3AlignedObjectArray.h <210:4 210:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<210:4> [b3AlignedObjectArray.h <216:4 216:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<203:47> [b3AlignedObjectArray.h <211:9 211:15>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <211:19 211:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<212:5> [b3AlignedObjectArray.h <212:5 212:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<212:5> [b3AlignedObjectArray.h <214:5 214:5>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::reserve(int)
REFERENCE_CALL void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <213:6 213:12>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<203:47> [b3AlignedObjectArray.h <213:14 213:20>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <217:4 217:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<203:47> [b3AlignedObjectArray.h <217:13 217:19>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <220:3 <220:24 220:29> 246:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> void [b3AlignedObjectArray.h <220:19 220:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<220:35> [b3AlignedObjectArray.h <220:35 220:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> int [b3AlignedObjectArray.h <220:31 220:33>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<220:53> [b3AlignedObjectArray.h <220:53 220:60>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <220:50 220:50>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <220:62 220:62>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<221:3> [b3AlignedObjectArray.h <221:3 221:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<221:3> [b3AlignedObjectArray.h <246:3 246:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<222:8> [b3AlignedObjectArray.h <222:8 222:14>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> int [b3AlignedObjectArray.h <222:4 222:6>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <222:18 222:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<220:35> [b3AlignedObjectArray.h <224:8 224:14>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<222:8> [b3AlignedObjectArray.h <224:18 224:24>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<225:4> [b3AlignedObjectArray.h <225:4 225:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<225:4> [b3AlignedObjectArray.h <230:4 230:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<226:13> [b3AlignedObjectArray.h <226:13 226:13>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> int [b3AlignedObjectArray.h <226:9 226:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<220:35> [b3AlignedObjectArray.h <226:17 226:23>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<226:13> [b3AlignedObjectArray.h <226:26 226:26>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<222:8> [b3AlignedObjectArray.h <226:30 226:36>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<226:13> [b3AlignedObjectArray.h <226:39 226:39>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<227:5> [b3AlignedObjectArray.h <227:5 227:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<227:5> [b3AlignedObjectArray.h <229:5 229:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <228:17 228:17>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <228:6 228:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<226:13> [b3AlignedObjectArray.h <228:13 228:13>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<231:4> [b3AlignedObjectArray.h <231:4 231:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<231:4> [b3AlignedObjectArray.h <243:4 243:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<220:35> [b3AlignedObjectArray.h <232:9 232:15>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <232:19 232:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<233:5> [b3AlignedObjectArray.h <233:5 233:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<233:5> [b3AlignedObjectArray.h <235:5 235:5>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <234:6 234:12>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<220:35> [b3AlignedObjectArray.h <234:14 234:20>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<237:14> [b3AlignedObjectArray.h <237:14 237:14>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> int [b3AlignedObjectArray.h <237:10 237:12>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<222:8> [b3AlignedObjectArray.h <237:16 237:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<237:14> [b3AlignedObjectArray.h <237:24 237:24>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<220:35> [b3AlignedObjectArray.h <237:26 237:32>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<237:14> [b3AlignedObjectArray.h <237:34 237:34>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<238:5> [b3AlignedObjectArray.h <238:5 238:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<238:5> [b3AlignedObjectArray.h <240:5 240:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <239:24 239:24>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<220:53> [b3AlignedObjectArray.h <239:26 239:33>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <239:13 239:18>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<237:14> [b3AlignedObjectArray.h <239:20 239:20>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <245:4 245:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<220:35> [b3AlignedObjectArray.h <245:13 245:19>]
SYMBOL_METHOD public b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() [b3AlignedObjectArray.h <247:3 <247:23 247:43> 257:3>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <247:19 247:19>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<248:3> [b3AlignedObjectArray.h <248:3 248:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<248:3> [b3AlignedObjectArray.h <257:3 257:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<249:8> [b3AlignedObjectArray.h <249:8 249:9>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() -> int [b3AlignedObjectArray.h <249:4 249:6>]
REFERENCE_CALL b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <249:13 249:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<249:8> [b3AlignedObjectArray.h <250:8 250:9>]
SYMBOL_FUNCTION int b3AlignedObjectArray<typename T>::capacity() const
REFERENCE_CALL b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() -> int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <250:14 250:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<251:4> [b3AlignedObjectArray.h <251:4 251:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<251:4> [b3AlignedObjectArray.h <253:4 253:4>]
REFERENCE_CALL b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <252:5 252:11>]
SYMBOL_FUNCTION int b3AlignedObjectArray<typename T>::allocSize(int)
REFERENCE_CALL b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() -> int b3AlignedObjectArray<typename T>::allocSize(int) [b3AlignedObjectArray.h <252:14 252:22>]
REFERENCE_CALL b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <252:24 252:27>]
REFERENCE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <254:4 254:9>]
REFERENCE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <256:11 256:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<249:8> [b3AlignedObjectArray.h <256:18 256:19>]
SYMBOL_METHOD public b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <260:3 <260:23 260:28> 273:3>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <260:19 260:19>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<260:40> [b3AlignedObjectArray.h <260:40 260:48>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <260:37 260:37>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <260:50 260:50>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<261:3> [b3AlignedObjectArray.h <261:3 261:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<261:3> [b3AlignedObjectArray.h <273:3 273:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<262:8> [b3AlignedObjectArray.h <262:8 262:9>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> int [b3AlignedObjectArray.h <262:4 262:6>]
REFERENCE_CALL b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <262:13 262:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<262:8> [b3AlignedObjectArray.h <263:8 263:9>]
REFERENCE_CALL b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <263:14 263:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<264:4> [b3AlignedObjectArray.h <264:4 264:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<264:4> [b3AlignedObjectArray.h <266:4 266:4>]
REFERENCE_CALL b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <265:5 265:11>]
REFERENCE_CALL b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::allocSize(int) [b3AlignedObjectArray.h <265:14 265:22>]
REFERENCE_CALL b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <265:24 265:27>]
REFERENCE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <267:4 267:9>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <269:22 269:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<260:40> [b3AlignedObjectArray.h <269:24 269:32>]
REFERENCE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <269:10 269:15>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<262:8> [b3AlignedObjectArray.h <269:17 269:18>]
REFERENCE_USAGE b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <272:11 272:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<262:8> [b3AlignedObjectArray.h <272:18 272:19>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <276:3 <276:24 276:32> 291:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> void [b3AlignedObjectArray.h <276:19 276:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<276:43> [b3AlignedObjectArray.h <276:43 276:46>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <276:40 276:40>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<277:3> [b3AlignedObjectArray.h <277:3 277:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<277:3> [b3AlignedObjectArray.h <291:3 291:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<278:8> [b3AlignedObjectArray.h <278:8 278:9>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> int [b3AlignedObjectArray.h <278:4 278:6>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <278:13 278:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<278:8> [b3AlignedObjectArray.h <279:8 279:9>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <279:14 279:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<280:4> [b3AlignedObjectArray.h <280:4 280:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<280:4> [b3AlignedObjectArray.h <282:4 282:4>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <281:5 281:11>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::allocSize(int) [b3AlignedObjectArray.h <281:14 281:22>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <281:24 281:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <285:28 285:28>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<276:43> [b3AlignedObjectArray.h <285:30 285:33>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <285:11 285:16>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <285:18 285:23>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <290:4 290:9>]
SYMBOL_METHOD public int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <295:3 <295:23 295:30> 298:3>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::capacity() const -> int [b3AlignedObjectArray.h <295:19 295:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<296:3> [b3AlignedObjectArray.h <296:3 296:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<296:3> [b3AlignedObjectArray.h <298:3 298:3>]
REFERENCE_USAGE int b3AlignedObjectArray<typename T>::capacity() const -> int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <297:11 297:20>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <300:3 <300:24 300:30> 326:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::reserve(int) -> void [b3AlignedObjectArray.h <300:19 300:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<300:36> [b3AlignedObjectArray.h <300:36 300:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::reserve(int) -> int [b3AlignedObjectArray.h <300:32 300:34>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<301:3> [b3AlignedObjectArray.h <301:3 301:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<301:3> [b3AlignedObjectArray.h <326:3 326:3>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::reserve(int) -> int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <302:8 302:15>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<300:36> [b3AlignedObjectArray.h <302:21 302:26>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<303:4> [b3AlignedObjectArray.h <303:4 303:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<303:4> [b3AlignedObjectArray.h <325:4 325:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<304:8> [b3AlignedObjectArray.h <304:8 304:8>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::reserve(int) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <304:5 304:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::reserve(int) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <304:13 304:13>]
SYMBOL_FUNCTION void * b3AlignedObjectArray<typename T>::allocate(int)
REFERENCE_CALL void b3AlignedObjectArray<typename T>::reserve(int) -> void * b3AlignedObjectArray<typename T>::allocate(int) [b3AlignedObjectArray.h <304:16 304:23>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<300:36> [b3AlignedObjectArray.h <304:25 304:30>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<304:8> [b3AlignedObjectArray.h <306:9 306:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<307:5> [b3AlignedObjectArray.h <307:5 307:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<307:5> [b3AlignedObjectArray.h <311:5 311:5>]
SYMBOL_FUNCTION void b3OutputErrorMessageVarArgsInternal(const char *)
REFERENCE_CALL void b3AlignedObjectArray<typename T>::reserve(int) -> void b3OutputErrorMessageVarArgsInternal(const char *) [b3AlignedObjectArray.h <308:6 308:12>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<300:36> [b3AlignedObjectArray.h <309:6 309:11>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::reserve(int) -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <310:6 310:11>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const
REFERENCE_CALL void b3AlignedObjectArray<typename T>::reserve(int) -> void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const [b3AlignedObjectArray.h <312:5 312:8>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::reserve(int) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <312:13 312:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<304:8> [b3AlignedObjectArray.h <312:21 312:21>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::reserve(int) -> void b3AlignedObjectArray<typename T>::destroy(int, int) [b3AlignedObjectArray.h <314:5 314:11>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::reserve(int) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <314:15 314:18>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::reserve(int) -> void b3AlignedObjectArray<typename T>::deallocate() [b3AlignedObjectArray.h <316:5 316:14>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::reserve(int) -> bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <319:5 319:16>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::reserve(int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <321:5 321:10>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<304:8> [b3AlignedObjectArray.h <321:14 321:14>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::reserve(int) -> int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <323:5 323:14>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<300:36> [b3AlignedObjectArray.h <323:18 323:23>]
SYMBOL_CLASS public b3AlignedObjectArray<typename T>::less [b3AlignedObjectArray.h <329:3 <329:9 329:12> 337:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<330:3> [b3AlignedObjectArray.h <330:3 330:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<330:3> [b3AlignedObjectArray.h <337:3 337:3>]
SYMBOL_METHOD public bool b3AlignedObjectArray<typename T>::less::operator()(const b3AlignedObjectArray<typename T>::T &, const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <333:5 <333:10 333:19> 336:5>]
REFERENCE_TYPE_USAGE bool b3AlignedObjectArray<typename T>::less::operator()(const b3AlignedObjectArray<typename T>::T &, const b3AlignedObjectArray<typename T>::T &) -> bool [b3AlignedObjectArray.h <333:5 333:8>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<333:32> [b3AlignedObjectArray.h <333:32 333:32>]
REFERENCE_TYPE_USAGE bool b3AlignedObjectArray<typename T>::less::operator()(const b3AlignedObjectArray<typename T>::T &, const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <333:29 333:29>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<333:44> [b3AlignedObjectArray.h <333:44 333:44>]
REFERENCE_TYPE_USAGE bool b3AlignedObjectArray<typename T>::less::operator()(const b3AlignedObjectArray<typename T>::T &, const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <333:41 333:41>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<334:5> [b3AlignedObjectArray.h <334:5 334:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<334:5> [b3AlignedObjectArray.h <336:5 336:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<333:32> [b3AlignedObjectArray.h <335:15 335:15>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<333:44> [b3AlignedObjectArray.h <335:19 335:19>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<typename T>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <340:22 340:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::quickSortInternal<typename L>(const L &, int, int) [b3AlignedObjectArray.h <340:3 <341:8 341:24> 367:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::quickSortInternal<typename L>(const L &, int, int) -> void [b3AlignedObjectArray.h <341:3 341:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:35> [b3AlignedObjectArray.h <341:35 341:45>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<typename T>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <341:32 341:32>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:51> [b3AlignedObjectArray.h <341:51 341:52>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:47 341:49>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:59> [b3AlignedObjectArray.h <341:59 341:60>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:55 341:57>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<342:3> [b3AlignedObjectArray.h <342:3 342:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<342:3> [b3AlignedObjectArray.h <367:3 367:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:8> [b3AlignedObjectArray.h <345:8 345:8>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <345:4 345:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:51> [b3AlignedObjectArray.h <345:10 345:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:14> [b3AlignedObjectArray.h <345:14 345:14>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:59> [b3AlignedObjectArray.h <345:16 345:17>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<346:6> [b3AlignedObjectArray.h <346:6 346:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <346:4 346:4>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <346:8 346:13>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:51> [b3AlignedObjectArray.h <346:16 346:17>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:59> [b3AlignedObjectArray.h <346:19 346:20>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<350:4> [b3AlignedObjectArray.h <350:4 350:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<350:4> [b3AlignedObjectArray.h <360:4 360:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:35> [b3AlignedObjectArray.h <351:12 351:22>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <351:24 351:29>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:8> [b3AlignedObjectArray.h <351:31 351:31>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<346:6> [b3AlignedObjectArray.h <351:34 351:34>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:8> [b3AlignedObjectArray.h <352:6 352:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:35> [b3AlignedObjectArray.h <353:12 353:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<346:6> [b3AlignedObjectArray.h <353:24 353:24>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <353:26 353:31>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:14> [b3AlignedObjectArray.h <353:33 353:33>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:14> [b3AlignedObjectArray.h <354:6 354:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:8> [b3AlignedObjectArray.h <355:9 355:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:14> [b3AlignedObjectArray.h <355:12 355:12>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<356:5> [b3AlignedObjectArray.h <356:5 356:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<356:5> [b3AlignedObjectArray.h <359:5 359:5>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::swap(int, int)
REFERENCE_CALL void b3AlignedObjectArray<typename T>::quickSortInternal<typename L>(const L &, int, int) -> void b3AlignedObjectArray<typename T>::swap(int, int) [b3AlignedObjectArray.h <357:6 357:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:8> [b3AlignedObjectArray.h <357:11 357:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:14> [b3AlignedObjectArray.h <357:13 357:13>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:8> [b3AlignedObjectArray.h <358:6 358:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:14> [b3AlignedObjectArray.h <358:11 358:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:8> [b3AlignedObjectArray.h <360:13 360:13>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:14> [b3AlignedObjectArray.h <360:16 360:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:51> [b3AlignedObjectArray.h <363:8 363:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:14> [b3AlignedObjectArray.h <363:11 363:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:35> [b3AlignedObjectArray.h <364:24 364:34>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:51> [b3AlignedObjectArray.h <364:37 364:38>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:14> [b3AlignedObjectArray.h <364:41 364:41>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:8> [b3AlignedObjectArray.h <365:8 365:8>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:59> [b3AlignedObjectArray.h <365:10 365:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:35> [b3AlignedObjectArray.h <366:24 366:34>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<345:8> [b3AlignedObjectArray.h <366:37 366:37>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<341:59> [b3AlignedObjectArray.h <366:40 366:41>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<typename T>::quickSort<typename L>::L [b3AlignedObjectArray.h <370:22 370:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::quickSort<typename L>(const L &) [b3AlignedObjectArray.h <370:3 <371:8 371:16> 378:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::quickSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <371:3 371:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<371:27> [b3AlignedObjectArray.h <371:27 371:37>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::quickSort<typename L>(const L &) -> b3AlignedObjectArray<typename T>::quickSort<typename L>::L [b3AlignedObjectArray.h <371:24 371:24>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<372:3> [b3AlignedObjectArray.h <372:3 372:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<372:3> [b3AlignedObjectArray.h <378:3 378:3>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::quickSort<typename L>(const L &) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <374:8 374:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<375:4> [b3AlignedObjectArray.h <375:4 375:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<375:4> [b3AlignedObjectArray.h <377:4 377:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<371:27> [b3AlignedObjectArray.h <376:23 376:33>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::quickSort<typename L>(const L &) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <376:37 376:40>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<typename T>::downHeap<typename L>::L [b3AlignedObjectArray.h <382:22 382:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::downHeap<typename L>(b3AlignedObjectArray<typename T>::T *, int, int, const L &) [b3AlignedObjectArray.h <382:3 <383:8 383:15> 411:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::downHeap<typename L>(b3AlignedObjectArray<typename T>::T *, int, int, const L &) -> void [b3AlignedObjectArray.h <383:3 383:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:20> [b3AlignedObjectArray.h <383:20 383:23>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::downHeap<typename L>(b3AlignedObjectArray<typename T>::T *, int, int, const L &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <383:17 383:17>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:30> [b3AlignedObjectArray.h <383:30 383:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::downHeap<typename L>(b3AlignedObjectArray<typename T>::T *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:26 383:28>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:37> [b3AlignedObjectArray.h <383:37 383:37>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::downHeap<typename L>(b3AlignedObjectArray<typename T>::T *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:33 383:35>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:49> [b3AlignedObjectArray.h <383:49 383:59>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::downHeap<typename L>(b3AlignedObjectArray<typename T>::T *, int, int, const L &) -> b3AlignedObjectArray<typename T>::downHeap<typename L>::L [b3AlignedObjectArray.h <383:46 383:46>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<384:3> [b3AlignedObjectArray.h <384:3 384:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<384:3> [b3AlignedObjectArray.h <411:3 411:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<388:6> [b3AlignedObjectArray.h <388:6 388:9>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::downHeap<typename L>(b3AlignedObjectArray<typename T>::T *, int, int, const L &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <388:4 388:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:20> [b3AlignedObjectArray.h <388:13 388:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:30> [b3AlignedObjectArray.h <388:18 388:18>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:30> [b3AlignedObjectArray.h <390:11 390:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:37> [b3AlignedObjectArray.h <390:16 390:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<391:4> [b3AlignedObjectArray.h <391:4 391:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<391:4> [b3AlignedObjectArray.h <409:4 409:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<392:9> [b3AlignedObjectArray.h <392:9 392:13>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::downHeap<typename L>(b3AlignedObjectArray<typename T>::T *, int, int, const L &) -> int [b3AlignedObjectArray.h <392:5 392:7>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:30> [b3AlignedObjectArray.h <392:19 392:19>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<392:9> [b3AlignedObjectArray.h <394:10 394:14>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:37> [b3AlignedObjectArray.h <394:18 394:18>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:49> [b3AlignedObjectArray.h <394:24 394:34>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:20> [b3AlignedObjectArray.h <394:36 394:39>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<392:9> [b3AlignedObjectArray.h <394:41 394:45>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:20> [b3AlignedObjectArray.h <394:54 394:57>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<392:9> [b3AlignedObjectArray.h <394:59 394:63>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<395:5> [b3AlignedObjectArray.h <395:5 395:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<395:5> [b3AlignedObjectArray.h <397:5 397:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<392:9> [b3AlignedObjectArray.h <396:6 396:10>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:49> [b3AlignedObjectArray.h <399:9 399:19>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<388:6> [b3AlignedObjectArray.h <399:21 399:24>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:20> [b3AlignedObjectArray.h <399:28 399:31>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<392:9> [b3AlignedObjectArray.h <399:33 399:37>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<400:5> [b3AlignedObjectArray.h <400:5 400:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<400:5> [b3AlignedObjectArray.h <404:5 404:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:20> [b3AlignedObjectArray.h <402:6 402:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:30> [b3AlignedObjectArray.h <402:11 402:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:20> [b3AlignedObjectArray.h <402:20 402:23>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<392:9> [b3AlignedObjectArray.h <402:25 402:29>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:30> [b3AlignedObjectArray.h <403:6 403:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<392:9> [b3AlignedObjectArray.h <403:10 403:14>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<406:5> [b3AlignedObjectArray.h <406:5 406:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<406:5> [b3AlignedObjectArray.h <408:5 408:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:20> [b3AlignedObjectArray.h <410:4 410:7>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<383:30> [b3AlignedObjectArray.h <410:9 410:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<388:6> [b3AlignedObjectArray.h <410:18 410:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::swap(int, int) [b3AlignedObjectArray.h <413:3 <413:8 413:11> 426:3>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::swap(int, int) -> void [b3AlignedObjectArray.h <413:3 413:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<413:17> [b3AlignedObjectArray.h <413:17 413:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::swap(int, int) -> int [b3AlignedObjectArray.h <413:13 413:15>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<413:28> [b3AlignedObjectArray.h <413:28 413:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::swap(int, int) -> int [b3AlignedObjectArray.h <413:24 413:26>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<414:3> [b3AlignedObjectArray.h <414:3 414:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<414:3> [b3AlignedObjectArray.h <426:3 426:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<421:6> [b3AlignedObjectArray.h <421:6 421:9>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::swap(int, int) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <421:4 421:4>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::swap(int, int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <421:13 421:18>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<413:17> [b3AlignedObjectArray.h <421:20 421:25>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::swap(int, int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <422:4 422:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<413:17> [b3AlignedObjectArray.h <422:11 422:16>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::swap(int, int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <422:21 422:26>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<413:28> [b3AlignedObjectArray.h <422:28 422:33>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::swap(int, int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <423:4 423:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<413:28> [b3AlignedObjectArray.h <423:11 423:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<421:6> [b3AlignedObjectArray.h <423:21 423:24>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<typename T>::heapSort<typename L>::L [b3AlignedObjectArray.h <428:21 428:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::heapSort<typename L>(const L &) [b3AlignedObjectArray.h <428:2 <429:7 429:14> 449:2>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::heapSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <429:2 429:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<429:25> [b3AlignedObjectArray.h <429:25 429:35>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::heapSort<typename L>(const L &) -> b3AlignedObjectArray<typename T>::heapSort<typename L>::L [b3AlignedObjectArray.h <429:22 429:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<430:2> [b3AlignedObjectArray.h <430:2 430:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<430:2> [b3AlignedObjectArray.h <449:2 449:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<432:7> [b3AlignedObjectArray.h <432:7 432:7>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::heapSort<typename L>(const L &) -> int [b3AlignedObjectArray.h <432:3 432:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<433:7> [b3AlignedObjectArray.h <433:7 433:7>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::heapSort<typename L>(const L &) -> int [b3AlignedObjectArray.h <433:3 433:5>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::heapSort<typename L>(const L &) -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <433:11 433:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<432:7> [b3AlignedObjectArray.h <434:8 434:8>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<433:7> [b3AlignedObjectArray.h <434:12 434:12>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<432:7> [b3AlignedObjectArray.h <434:17 434:17>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<432:7> [b3AlignedObjectArray.h <434:24 434:24>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<435:3> [b3AlignedObjectArray.h <435:3 435:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<435:3> [b3AlignedObjectArray.h <437:3 437:3>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::heapSort<typename L>(const L &) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <436:13 436:18>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<432:7> [b3AlignedObjectArray.h <436:21 436:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<433:7> [b3AlignedObjectArray.h <436:24 436:24>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<429:25> [b3AlignedObjectArray.h <436:27 436:37>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<433:7> [b3AlignedObjectArray.h <440:11 440:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<441:3> [b3AlignedObjectArray.h <441:3 441:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<441:3> [b3AlignedObjectArray.h <448:3 448:3>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::heapSort<typename L>(const L &) -> void b3AlignedObjectArray<typename T>::swap(int, int) [b3AlignedObjectArray.h <442:4 442:7>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<433:7> [b3AlignedObjectArray.h <442:11 442:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<433:7> [b3AlignedObjectArray.h <445:4 445:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<433:7> [b3AlignedObjectArray.h <445:8 445:8>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::heapSort<typename L>(const L &) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <447:13 447:18>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<433:7> [b3AlignedObjectArray.h <447:24 447:24>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<429:25> [b3AlignedObjectArray.h <447:27 447:37>]
SYMBOL_METHOD public int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <452:2 <452:6 452:21> 468:2>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const -> int [b3AlignedObjectArray.h <452:2 452:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<452:32> [b3AlignedObjectArray.h <452:32 452:34>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <452:29 452:29>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<453:2> [b3AlignedObjectArray.h <453:2 453:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<453:2> [b3AlignedObjectArray.h <468:2 468:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<454:7> [b3AlignedObjectArray.h <454:7 454:11>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const -> int [b3AlignedObjectArray.h <454:3 454:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<455:7> [b3AlignedObjectArray.h <455:7 455:10>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const -> int [b3AlignedObjectArray.h <455:3 455:5>]
REFERENCE_CALL int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <455:14 455:17>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<454:7> [b3AlignedObjectArray.h <458:10 458:14>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<455:7> [b3AlignedObjectArray.h <458:19 458:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<458:25> [b3AlignedObjectArray.h <458:25 458:25>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<458:25> [b3AlignedObjectArray.h <466:3 466:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<459:8> [b3AlignedObjectArray.h <459:8 459:10>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const -> int [b3AlignedObjectArray.h <459:4 459:6>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<454:7> [b3AlignedObjectArray.h <459:15 459:19>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<455:7> [b3AlignedObjectArray.h <459:23 459:26>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<452:32> [b3AlignedObjectArray.h <460:8 460:10>]
REFERENCE_USAGE int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <460:14 460:19>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<459:8> [b3AlignedObjectArray.h <460:21 460:23>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<454:7> [b3AlignedObjectArray.h <461:5 461:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<459:8> [b3AlignedObjectArray.h <461:13 461:15>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<452:32> [b3AlignedObjectArray.h <462:13 462:15>]
REFERENCE_USAGE int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <462:19 462:24>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<459:8> [b3AlignedObjectArray.h <462:26 462:28>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<455:7> [b3AlignedObjectArray.h <463:5 463:8>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<459:8> [b3AlignedObjectArray.h <463:12 463:14>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<459:8> [b3AlignedObjectArray.h <465:12 465:14>]
REFERENCE_CALL int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <467:10 467:13>]
SYMBOL_METHOD public int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <471:2 <471:6 471:21> 485:2>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const -> int [b3AlignedObjectArray.h <471:2 471:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<471:32> [b3AlignedObjectArray.h <471:32 471:34>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <471:29 471:29>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<472:2> [b3AlignedObjectArray.h <472:2 472:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<472:2> [b3AlignedObjectArray.h <485:2 485:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<473:7> [b3AlignedObjectArray.h <473:7 473:11>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const -> int [b3AlignedObjectArray.h <473:3 473:5>]
REFERENCE_CALL int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <473:13 473:16>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<474:7> [b3AlignedObjectArray.h <474:7 474:7>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const -> int [b3AlignedObjectArray.h <474:3 474:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<474:7> [b3AlignedObjectArray.h <476:8 476:8>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<474:7> [b3AlignedObjectArray.h <476:12 476:12>]
REFERENCE_CALL int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <476:14 476:17>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<474:7> [b3AlignedObjectArray.h <476:21 476:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<477:3> [b3AlignedObjectArray.h <477:3 477:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<477:3> [b3AlignedObjectArray.h <483:3 483:3>]
REFERENCE_USAGE int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <478:8 478:13>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<474:7> [b3AlignedObjectArray.h <478:15 478:15>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<471:32> [b3AlignedObjectArray.h <478:21 478:23>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<479:4> [b3AlignedObjectArray.h <479:4 479:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<479:4> [b3AlignedObjectArray.h <482:4 482:4>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<473:7> [b3AlignedObjectArray.h <480:5 480:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<474:7> [b3AlignedObjectArray.h <480:13 480:13>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<473:7> [b3AlignedObjectArray.h <484:10 484:14>]
SYMBOL_METHOD public int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <487:5 <487:9 487:25> 501:5>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const -> int [b3AlignedObjectArray.h <487:5 487:7>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<487:36> [b3AlignedObjectArray.h <487:36 487:38>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <487:33 487:33>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<488:5> [b3AlignedObjectArray.h <488:5 488:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<488:5> [b3AlignedObjectArray.h <501:5 501:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<489:13> [b3AlignedObjectArray.h <489:13 489:17>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const -> int [b3AlignedObjectArray.h <489:9 489:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<490:13> [b3AlignedObjectArray.h <490:13 490:13>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const -> int [b3AlignedObjectArray.h <490:9 490:11>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<490:13> [b3AlignedObjectArray.h <492:14 492:14>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<490:13> [b3AlignedObjectArray.h <492:18 492:18>]
REFERENCE_CALL int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <492:20 492:23>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<490:13> [b3AlignedObjectArray.h <492:27 492:27>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<493:9> [b3AlignedObjectArray.h <493:9 493:9>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<493:9> [b3AlignedObjectArray.h <499:9 499:9>]
REFERENCE_USAGE int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <494:17 494:22>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<490:13> [b3AlignedObjectArray.h <494:24 494:24>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<487:36> [b3AlignedObjectArray.h <494:30 494:32>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<495:13> [b3AlignedObjectArray.h <495:13 495:13>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<495:13> [b3AlignedObjectArray.h <498:13 498:13>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<489:13> [b3AlignedObjectArray.h <496:17 496:21>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<490:13> [b3AlignedObjectArray.h <496:25 496:25>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<489:13> [b3AlignedObjectArray.h <500:16 500:20>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <503:2 <503:7 503:12> 512:2>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) -> void [b3AlignedObjectArray.h <503:2 503:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<503:23> [b3AlignedObjectArray.h <503:23 503:25>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <503:20 503:20>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<504:2> [b3AlignedObjectArray.h <504:2 504:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<504:2> [b3AlignedObjectArray.h <512:2 512:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<506:7> [b3AlignedObjectArray.h <506:7 506:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) -> int [b3AlignedObjectArray.h <506:3 506:5>]
SYMBOL_FUNCTION int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const
REFERENCE_CALL void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <506:19 506:34>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<503:23> [b3AlignedObjectArray.h <506:36 506:38>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<506:7> [b3AlignedObjectArray.h <507:7 507:15>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <507:17 507:20>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<508:3> [b3AlignedObjectArray.h <508:3 508:3>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<508:3> [b3AlignedObjectArray.h <511:3 511:3>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) -> void b3AlignedObjectArray<typename T>::swap(int, int) [b3AlignedObjectArray.h <509:4 509:7>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<506:7> [b3AlignedObjectArray.h <509:10 509:18>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <509:20 509:23>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::pop_back()
REFERENCE_CALL void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) -> void b3AlignedObjectArray<typename T>::pop_back() [b3AlignedObjectArray.h <510:4 510:11>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:2 <515:7 515:26> 522:2>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:2 515:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<515:34> [b3AlignedObjectArray.h <515:34 515:39>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:28 515:31>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<515:46> [b3AlignedObjectArray.h <515:46 515:49>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:42 515:44>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<515:56> [b3AlignedObjectArray.h <515:56 515:63>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:52 515:54>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<516:2> [b3AlignedObjectArray.h <516:2 516:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<516:2> [b3AlignedObjectArray.h <522:2 522:2>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) -> void b3AlignedObjectArray<typename T>::clear() [b3AlignedObjectArray.h <517:3 517:7>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) -> bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <518:3 518:14>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <519:3 519:8>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <519:13 519:13>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<515:34> [b3AlignedObjectArray.h <519:16 519:21>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <520:3 520:8>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<515:46> [b3AlignedObjectArray.h <520:12 520:15>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) -> int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <521:3 521:12>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<515:56> [b3AlignedObjectArray.h <521:16 521:23>]
SYMBOL_METHOD public void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <524:2 <524:7 524:19> 529:2>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) -> void [b3AlignedObjectArray.h <524:2 524:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<524:49> [b3AlignedObjectArray.h <524:49 524:58>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) -> b3AlignedObjectArray<T> [b3AlignedObjectArray.h <524:27 524:46>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<525:2> [b3AlignedObjectArray.h <525:2 525:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<525:2> [b3AlignedObjectArray.h <529:2 529:2>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<526:7> [b3AlignedObjectArray.h <526:7 526:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) -> int [b3AlignedObjectArray.h <526:3 526:5>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<524:49> [b3AlignedObjectArray.h <526:19 526:28>]
REFERENCE_CALL void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) -> void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <527:3 527:8>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<526:7> [b3AlignedObjectArray.h <527:11 527:19>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<524:49> [b3AlignedObjectArray.h <528:3 528:12>]
LOCAL_SYMBOL: b3AlignedObjectArray.h<526:7> [b3AlignedObjectArray.h <528:22 528:30>]
REFERENCE_USAGE void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <528:33 528:38>]
SYMBOL_CLASS b3AlignedObjectArray<b3DynamicBvh::sStkNN> [b3AlignedObjectArray.h <45:1 <47:7 47:26> 531:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkNN> -> b3AlignedObjectArray<typename T> [b3AlignedObjectArray.h <47:7 47:26>]
SYMBOL_FIELD private b3AlignedAllocator<b3DynamicBvh::sStkNN, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
SYMBOL_FIELD b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNN, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_allocator -> b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNN, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_allocator -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16> [b3AlignedObjectArray.h <49:2 49:19>]
SYMBOL_FIELD private int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
SYMBOL_FIELD int b3AlignedObjectArray<typename T>::m_size
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_size -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_size -> int [b3AlignedObjectArray.h <51:2 51:4>]
SYMBOL_FIELD private int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
SYMBOL_FIELD int b3AlignedObjectArray<typename T>::m_capacity
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_capacity -> int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_capacity -> int [b3AlignedObjectArray.h <52:2 52:4>]
SYMBOL_FIELD private b3DynamicBvh::sStkNN * b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
SYMBOL_FIELD b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNN * b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_data -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
SYMBOL_FIELD private bool b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
SYMBOL_FIELD bool b3AlignedObjectArray<typename T>::m_ownsMemory
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION bool b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_ownsMemory -> bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TYPE_USAGE bool b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_ownsMemory -> bool [b3AlignedObjectArray.h <55:2 55:5>]
SYMBOL_METHOD public b3AlignedObjectArray<b3DynamicBvh::sStkNN> & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNN> &) [b3AlignedObjectArray.h <59:43 59:51>]
SYMBOL_FUNCTION b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkNN> & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNN> &) -> b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <59:43 59:50>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<b3DynamicBvh::sStkNN> & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNN> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> [b3AlignedObjectArray.h <59:18 59:37>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<b3DynamicBvh::sStkNN> & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNN> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> [b3AlignedObjectArray.h <59:59 59:78>]
SYMBOL_METHOD protected int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::allocSize(int) [b3AlignedObjectArray.h <70:23 70:31>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::allocSize(int) -> int b3AlignedObjectArray<typename T>::allocSize(int) [b3AlignedObjectArray.h <70:23 70:31>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::allocSize(int) -> int [b3AlignedObjectArray.h <70:19 70:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::allocSize(int) -> int [b3AlignedObjectArray.h <70:33 70:35>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::copy(int, int, b3DynamicBvh::sStkNN *) const [b3AlignedObjectArray.h <74:24 74:27>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::copy(int, int, b3DynamicBvh::sStkNN *) const -> void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const [b3AlignedObjectArray.h <74:24 74:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::copy(int, int, b3DynamicBvh::sStkNN *) const -> void [b3AlignedObjectArray.h <74:19 74:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::copy(int, int, b3DynamicBvh::sStkNN *) const -> int [b3AlignedObjectArray.h <74:29 74:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::copy(int, int, b3DynamicBvh::sStkNN *) const -> int [b3AlignedObjectArray.h <74:39 74:41>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::init() [b3AlignedObjectArray.h <85:3 <85:24 85:27> 92:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::init() -> void b3AlignedObjectArray<typename T>::init() [b3AlignedObjectArray.h <85:24 85:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::init() -> void [b3AlignedObjectArray.h <85:19 85:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::init() -> bool b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_ownsMemory [b3AlignedObjectArray.h <88:4 88:15>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::init() -> b3DynamicBvh::sStkNN * b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_data [b3AlignedObjectArray.h <89:4 89:9>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::init() -> int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_size [b3AlignedObjectArray.h <90:4 90:9>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::init() -> int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_capacity [b3AlignedObjectArray.h <91:4 91:13>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::destroy(int, int) [b3AlignedObjectArray.h <93:3 <93:24 93:30> 100:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::destroy(int, int) -> void b3AlignedObjectArray<typename T>::destroy(int, int) [b3AlignedObjectArray.h <93:24 93:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::destroy(int, int) -> void [b3AlignedObjectArray.h <93:19 93:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:32 93:34>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:42 93:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::destroy(int, int) -> int [b3AlignedObjectArray.h <95:4 95:6>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkNN::~sStkNN()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::destroy(int, int) -> void b3DynamicBvh::sStkNN::~sStkNN() [b3AlignedObjectArray.h <98:16 98:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::destroy(int, int) -> b3DynamicBvh::sStkNN * b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_data [b3AlignedObjectArray.h <98:5 98:10>]
SYMBOL_METHOD protected void * b3AlignedObjectArray<b3DynamicBvh::sStkNN>::allocate(int) [b3AlignedObjectArray.h <102:25 102:32>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void * b3AlignedObjectArray<b3DynamicBvh::sStkNN>::allocate(int) -> void * b3AlignedObjectArray<typename T>::allocate(int) [b3AlignedObjectArray.h <102:25 102:32>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<b3DynamicBvh::sStkNN>::allocate(int) -> void [b3AlignedObjectArray.h <102:19 102:22>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<b3DynamicBvh::sStkNN>::allocate(int) -> int [b3AlignedObjectArray.h <102:34 102:36>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::deallocate() [b3AlignedObjectArray.h <109:3 <109:24 109:33> 119:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::deallocate() -> void b3AlignedObjectArray<typename T>::deallocate() [b3AlignedObjectArray.h <109:24 109:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::deallocate() -> void [b3AlignedObjectArray.h <109:19 109:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::deallocate() -> b3DynamicBvh::sStkNN * b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_data [b3AlignedObjectArray.h <111:7 111:12>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::deallocate() -> bool b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_ownsMemory [b3AlignedObjectArray.h <113:9 113:20>]
SYMBOL_FUNCTION void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::deallocate() -> void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::pointer) [b3AlignedObjectArray.h <115:18 115:27>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::deallocate() -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_allocator [b3AlignedObjectArray.h <115:6 115:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::deallocate() -> b3DynamicBvh::sStkNN * b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_data [b3AlignedObjectArray.h <115:29 115:34>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::deallocate() -> b3DynamicBvh::sStkNN * b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_data [b3AlignedObjectArray.h <117:5 117:10>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray() [b3AlignedObjectArray.h <126:3 <126:3 126:22> 129:3>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>()
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <126:3 126:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray() -> b3AlignedAllocator<b3DynamicBvh::sStkNN, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_allocator [b3AlignedObjectArray.h <126:3 126:22>]
SYMBOL_FUNCTION void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray() -> void b3AlignedAllocator<b3DynamicBvh::sStkNN, 16>::b3AlignedAllocator() [b3AlignedObjectArray.h <126:3 126:22>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::init()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray() -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::init() [b3AlignedObjectArray.h <128:4 128:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::~b3AlignedObjectArray() [b3AlignedObjectArray.h <131:3 <131:3 131:23> 134:3>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::~b3AlignedObjectArray<T>()
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::~b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::~b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <131:3 131:3>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::~b3AlignedObjectArray() -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear() [b3AlignedObjectArray.h <133:4 133:8>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNN> &) [b3AlignedObjectArray.h <137:3 137:22>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNN> &) -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNN> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> [b3AlignedObjectArray.h <137:30 137:49>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::size() const [b3AlignedObjectArray.h <149:3 <149:23 149:26> 152:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::size() const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <149:23 149:26>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::size() const -> int [b3AlignedObjectArray.h <149:19 149:21>]
REFERENCE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::size() const -> int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::m_size [b3AlignedObjectArray.h <151:11 151:16>]
SYMBOL_METHOD public const b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
SYMBOL_FUNCTION const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::at(int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TYPE_USAGE const b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::at(int) const -> int [b3AlignedObjectArray.h <154:31 154:33>]
SYMBOL_METHOD public b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
SYMBOL_FUNCTION b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::at(int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::at(int) -> int [b3AlignedObjectArray.h <161:25 161:27>]
SYMBOL_METHOD public const b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:37>]
SYMBOL_FUNCTION const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:35>]
REFERENCE_TYPE_USAGE const b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) const -> int [b3AlignedObjectArray.h <168:39 168:41>]
SYMBOL_METHOD public b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3AlignedObjectArray.h <175:22 175:31>]
SYMBOL_FUNCTION b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) [b3AlignedObjectArray.h <175:22 175:29>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) -> int [b3AlignedObjectArray.h <175:33 175:35>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear() [b3AlignedObjectArray.h <184:3 <184:24 184:28> 191:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear() -> void b3AlignedObjectArray<typename T>::clear() [b3AlignedObjectArray.h <184:24 184:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear() -> void [b3AlignedObjectArray.h <184:19 184:22>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::destroy(int, int)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear() -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::destroy(int, int) [b3AlignedObjectArray.h <186:4 186:10>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::size() const
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear() -> int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::size() const [b3AlignedObjectArray.h <186:14 186:17>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::deallocate()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear() -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::deallocate() [b3AlignedObjectArray.h <188:4 188:13>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear() -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::init() [b3AlignedObjectArray.h <190:4 190:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::pop_back() [b3AlignedObjectArray.h <193:24 193:31>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::pop_back() -> void b3AlignedObjectArray<typename T>::pop_back() [b3AlignedObjectArray.h <193:24 193:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::pop_back() -> void [b3AlignedObjectArray.h <193:19 193:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::resizeNoInitialize(int)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resizeNoInitialize(int) -> void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resizeNoInitialize(int) -> void [b3AlignedObjectArray.h <203:19 203:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resizeNoInitialize(int) -> int [b3AlignedObjectArray.h <203:43 203:45>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resize(int, const b3DynamicBvh::sStkNN &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resize(int, const b3DynamicBvh::sStkNN &) -> void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resize(int, const b3DynamicBvh::sStkNN &) -> void [b3AlignedObjectArray.h <220:19 220:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resize(int, const b3DynamicBvh::sStkNN &) -> int [b3AlignedObjectArray.h <220:31 220:33>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkNN::sStkNN()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resize(int, const b3DynamicBvh::sStkNN &) -> void b3DynamicBvh::sStkNN::sStkNN() [b3AlignedObjectArray.h <220:62 220:62>]
SYMBOL_METHOD public b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
SYMBOL_FUNCTION b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing()
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::expandNonInitializing() -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
SYMBOL_METHOD public b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::expand(const b3DynamicBvh::sStkNN &) [b3AlignedObjectArray.h <260:23 260:28>]
SYMBOL_FUNCTION b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::expand(const b3DynamicBvh::sStkNN &) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::expand(const b3DynamicBvh::sStkNN &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <260:50 260:50>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::push_back(const b3DynamicBvh::sStkNN &) [b3AlignedObjectArray.h <276:24 276:32>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::push_back(const b3DynamicBvh::sStkNN &) -> void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <276:24 276:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::push_back(const b3DynamicBvh::sStkNN &) -> void [b3AlignedObjectArray.h <276:19 276:22>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::capacity() const [b3AlignedObjectArray.h <295:23 295:30>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::capacity() const -> int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <295:23 295:30>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::capacity() const -> int [b3AlignedObjectArray.h <295:19 295:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::reserve(int) [b3AlignedObjectArray.h <300:24 300:30>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::reserve(int) -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <300:24 300:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::reserve(int) -> void [b3AlignedObjectArray.h <300:19 300:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::reserve(int) -> int [b3AlignedObjectArray.h <300:32 300:34>]
SYMBOL_CLASS public b3AlignedObjectArray<b3DynamicBvh::sStkNN>::less [b3AlignedObjectArray.h <329:9 329:12>]
SYMBOL_CLASS b3AlignedObjectArray<typename T>::less
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkNN>::less -> b3AlignedObjectArray<typename T>::less [b3AlignedObjectArray.h <329:9 329:12>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <340:22 340:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSortInternal<typename L>(const L &, int, int) [b3AlignedObjectArray.h <341:8 341:24>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSortInternal<typename L>(const L &, int, int) -> void [b3AlignedObjectArray.h <341:3 341:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <341:32 341:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:47 341:49>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:55 341:57>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSort<typename L>::L [b3AlignedObjectArray.h <370:22 370:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSort<typename L>(const L &) [b3AlignedObjectArray.h <371:8 371:16>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <371:3 371:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSort<typename L>(const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN>::quickSort<typename L>::L [b3AlignedObjectArray.h <371:24 371:24>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNN>::downHeap<typename L>::L [b3AlignedObjectArray.h <382:22 382:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::downHeap<typename L>(b3DynamicBvh::sStkNN *, int, int, const L &) [b3AlignedObjectArray.h <383:8 383:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::downHeap<typename L>(b3DynamicBvh::sStkNN *, int, int, const L &) -> void [b3AlignedObjectArray.h <383:3 383:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::downHeap<typename L>(b3DynamicBvh::sStkNN *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:26 383:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::downHeap<typename L>(b3DynamicBvh::sStkNN *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:33 383:35>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::downHeap<typename L>(b3DynamicBvh::sStkNN *, int, int, const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN>::downHeap<typename L>::L [b3AlignedObjectArray.h <383:46 383:46>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::swap(int, int) -> void b3AlignedObjectArray<typename T>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::swap(int, int) -> void [b3AlignedObjectArray.h <413:3 413:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::swap(int, int) -> int [b3AlignedObjectArray.h <413:13 413:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::swap(int, int) -> int [b3AlignedObjectArray.h <413:24 413:26>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNN>::heapSort<typename L>::L [b3AlignedObjectArray.h <428:21 428:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::heapSort<typename L>(const L &) [b3AlignedObjectArray.h <429:7 429:14>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::heapSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <429:2 429:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::heapSort<typename L>(const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN>::heapSort<typename L>::L [b3AlignedObjectArray.h <429:22 429:22>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::findBinarySearch(const b3DynamicBvh::sStkNN &) const [b3AlignedObjectArray.h <452:6 452:21>]
SYMBOL_FUNCTION int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::findBinarySearch(const b3DynamicBvh::sStkNN &) const -> int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::findBinarySearch(const b3DynamicBvh::sStkNN &) const -> int [b3AlignedObjectArray.h <452:2 452:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::findLinearSearch(const b3DynamicBvh::sStkNN &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::findLinearSearch(const b3DynamicBvh::sStkNN &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::findLinearSearch(const b3DynamicBvh::sStkNN &) const -> int [b3AlignedObjectArray.h <471:2 471:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::findLinearSearch2(const b3DynamicBvh::sStkNN &) const [b3AlignedObjectArray.h <487:9 487:25>]
SYMBOL_FUNCTION int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::findLinearSearch2(const b3DynamicBvh::sStkNN &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::findLinearSearch2(const b3DynamicBvh::sStkNN &) const -> int [b3AlignedObjectArray.h <487:5 487:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::remove(const b3DynamicBvh::sStkNN &) [b3AlignedObjectArray.h <503:7 503:12>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::remove(const b3DynamicBvh::sStkNN &) -> void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::remove(const b3DynamicBvh::sStkNN &) -> void [b3AlignedObjectArray.h <503:2 503:5>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
SYMBOL_FUNCTION void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int)
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::initializeFromBuffer(void *, int, int) -> void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:2 515:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:28 515:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:42 515:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:52 515:54>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNN> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNN> &) -> void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNN> &) -> void [b3AlignedObjectArray.h <524:2 524:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNN> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> [b3AlignedObjectArray.h <524:27 524:46>]
SYMBOL_CLASS b3AlignedObjectArray<const b3DbvtNode *> [b3AlignedObjectArray.h <45:1 <47:7 47:26> 531:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedObjectArray<const b3DbvtNode *> -> b3AlignedObjectArray<typename T> [b3AlignedObjectArray.h <47:7 47:26>]
SYMBOL_FIELD private b3AlignedAllocator<const b3DbvtNode *, 16> b3AlignedObjectArray<const b3DbvtNode *>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<const b3DbvtNode *, 16> b3AlignedObjectArray<const b3DbvtNode *>::m_allocator -> b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<const b3DbvtNode *, 16> b3AlignedObjectArray<const b3DbvtNode *>::m_allocator -> b3AlignedAllocator<const b3DbvtNode *, 16> [b3AlignedObjectArray.h <49:2 49:19>]
SYMBOL_FIELD private int b3AlignedObjectArray<const b3DbvtNode *>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<const b3DbvtNode *>::m_size -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::m_size -> int [b3AlignedObjectArray.h <51:2 51:4>]
SYMBOL_FIELD private int b3AlignedObjectArray<const b3DbvtNode *>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<const b3DbvtNode *>::m_capacity -> int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::m_capacity -> int [b3AlignedObjectArray.h <52:2 52:4>]
SYMBOL_FIELD private const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
SYMBOL_FIELD private bool b3AlignedObjectArray<const b3DbvtNode *>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION bool b3AlignedObjectArray<const b3DbvtNode *>::m_ownsMemory -> bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TYPE_USAGE bool b3AlignedObjectArray<const b3DbvtNode *>::m_ownsMemory -> bool [b3AlignedObjectArray.h <55:2 55:5>]
SYMBOL_METHOD public b3AlignedObjectArray<const b3DbvtNode *> & b3AlignedObjectArray<const b3DbvtNode *>::operator=(const b3AlignedObjectArray<const b3DbvtNode *> &) [b3AlignedObjectArray.h <59:43 59:51>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<const b3DbvtNode *> & b3AlignedObjectArray<const b3DbvtNode *>::operator=(const b3AlignedObjectArray<const b3DbvtNode *> &) -> b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <59:43 59:50>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<const b3DbvtNode *> & b3AlignedObjectArray<const b3DbvtNode *>::operator=(const b3AlignedObjectArray<const b3DbvtNode *> &) -> b3AlignedObjectArray<const b3DbvtNode *> [b3AlignedObjectArray.h <59:18 59:37>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<const b3DbvtNode *> & b3AlignedObjectArray<const b3DbvtNode *>::operator=(const b3AlignedObjectArray<const b3DbvtNode *> &) -> b3AlignedObjectArray<const b3DbvtNode *> [b3AlignedObjectArray.h <59:59 59:78>]
SYMBOL_METHOD protected int b3AlignedObjectArray<const b3DbvtNode *>::allocSize(int) [b3AlignedObjectArray.h <70:3 <70:23 70:31> 73:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<const b3DbvtNode *>::allocSize(int) -> int b3AlignedObjectArray<typename T>::allocSize(int) [b3AlignedObjectArray.h <70:23 70:31>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::allocSize(int) -> int [b3AlignedObjectArray.h <70:19 70:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::allocSize(int) -> int [b3AlignedObjectArray.h <70:33 70:35>]
SYMBOL_METHOD protected void b3AlignedObjectArray<const b3DbvtNode *>::copy(int, int, const b3DbvtNode * *) const [b3AlignedObjectArray.h <74:3 <74:24 74:27> 83:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::copy(int, int, const b3DbvtNode * *) const -> void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const [b3AlignedObjectArray.h <74:24 74:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::copy(int, int, const b3DbvtNode * *) const -> void [b3AlignedObjectArray.h <74:19 74:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::copy(int, int, const b3DbvtNode * *) const -> int [b3AlignedObjectArray.h <74:29 74:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::copy(int, int, const b3DbvtNode * *) const -> int [b3AlignedObjectArray.h <74:39 74:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::copy(int, int, const b3DbvtNode * *) const -> int [b3AlignedObjectArray.h <76:4 76:6>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::copy(int, int, const b3DbvtNode * *) const -> const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data [b3AlignedObjectArray.h <79:22 79:27>]
SYMBOL_METHOD protected void b3AlignedObjectArray<const b3DbvtNode *>::init() [b3AlignedObjectArray.h <85:3 <85:24 85:27> 92:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::init() -> void b3AlignedObjectArray<typename T>::init() [b3AlignedObjectArray.h <85:24 85:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::init() -> void [b3AlignedObjectArray.h <85:19 85:22>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::init() -> bool b3AlignedObjectArray<const b3DbvtNode *>::m_ownsMemory [b3AlignedObjectArray.h <88:4 88:15>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::init() -> const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data [b3AlignedObjectArray.h <89:4 89:9>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::init() -> int b3AlignedObjectArray<const b3DbvtNode *>::m_size [b3AlignedObjectArray.h <90:4 90:9>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::init() -> int b3AlignedObjectArray<const b3DbvtNode *>::m_capacity [b3AlignedObjectArray.h <91:4 91:13>]
SYMBOL_METHOD protected void b3AlignedObjectArray<const b3DbvtNode *>::destroy(int, int) [b3AlignedObjectArray.h <93:3 <93:24 93:30> 100:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::destroy(int, int) -> void b3AlignedObjectArray<typename T>::destroy(int, int) [b3AlignedObjectArray.h <93:24 93:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::destroy(int, int) -> void [b3AlignedObjectArray.h <93:19 93:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:32 93:34>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:42 93:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::destroy(int, int) -> int [b3AlignedObjectArray.h <95:4 95:6>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::destroy(int, int) -> const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data [b3AlignedObjectArray.h <98:5 98:10>]
SYMBOL_METHOD protected void * b3AlignedObjectArray<const b3DbvtNode *>::allocate(int) [b3AlignedObjectArray.h <102:3 <102:25 102:32> 107:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void * b3AlignedObjectArray<const b3DbvtNode *>::allocate(int) -> void * b3AlignedObjectArray<typename T>::allocate(int) [b3AlignedObjectArray.h <102:25 102:32>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<const b3DbvtNode *>::allocate(int) -> void [b3AlignedObjectArray.h <102:19 102:22>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<const b3DbvtNode *>::allocate(int) -> int [b3AlignedObjectArray.h <102:34 102:36>]
SYMBOL_FUNCTION b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer *)
REFERENCE_CALL void * b3AlignedObjectArray<const b3DbvtNode *>::allocate(int) -> b3AlignedAllocator<const b3DbvtNode *, 16>::pointer b3AlignedAllocator<const b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<const b3DbvtNode *, 16>::const_pointer *) [b3AlignedObjectArray.h <105:24 105:31>]
REFERENCE_USAGE void * b3AlignedObjectArray<const b3DbvtNode *>::allocate(int) -> b3AlignedAllocator<const b3DbvtNode *, 16> b3AlignedObjectArray<const b3DbvtNode *>::m_allocator [b3AlignedObjectArray.h <105:12 105:22>]
SYMBOL_METHOD protected void b3AlignedObjectArray<const b3DbvtNode *>::deallocate() [b3AlignedObjectArray.h <109:3 <109:24 109:33> 119:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::deallocate() -> void b3AlignedObjectArray<typename T>::deallocate() [b3AlignedObjectArray.h <109:24 109:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::deallocate() -> void [b3AlignedObjectArray.h <109:19 109:22>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::deallocate() -> const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data [b3AlignedObjectArray.h <111:7 111:12>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::deallocate() -> bool b3AlignedObjectArray<const b3DbvtNode *>::m_ownsMemory [b3AlignedObjectArray.h <113:9 113:20>]
SYMBOL_FUNCTION void b3AlignedAllocator<const b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer)
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::deallocate() -> void b3AlignedAllocator<const b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<const b3DbvtNode *, 16>::pointer) [b3AlignedObjectArray.h <115:18 115:27>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::deallocate() -> b3AlignedAllocator<const b3DbvtNode *, 16> b3AlignedObjectArray<const b3DbvtNode *>::m_allocator [b3AlignedObjectArray.h <115:6 115:16>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::deallocate() -> const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data [b3AlignedObjectArray.h <115:29 115:34>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::deallocate() -> const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data [b3AlignedObjectArray.h <117:5 117:10>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() [b3AlignedObjectArray.h <126:3 <126:3 126:22> 129:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <126:3 126:22>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() -> b3AlignedAllocator<const b3DbvtNode *, 16> b3AlignedObjectArray<const b3DbvtNode *>::m_allocator [b3AlignedObjectArray.h <126:3 126:22>]
SYMBOL_FUNCTION void b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator()
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() -> void b3AlignedAllocator<const b3DbvtNode *, 16>::b3AlignedAllocator() [b3AlignedObjectArray.h <126:3 126:22>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::init()
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() -> void b3AlignedObjectArray<const b3DbvtNode *>::init() [b3AlignedObjectArray.h <128:4 128:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::~b3AlignedObjectArray() [b3AlignedObjectArray.h <131:3 <131:3 131:23> 134:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::~b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::~b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <131:3 131:3>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::clear()
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::~b3AlignedObjectArray() -> void b3AlignedObjectArray<const b3DbvtNode *>::clear() [b3AlignedObjectArray.h <133:4 133:8>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray(const b3AlignedObjectArray<const b3DbvtNode *> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray(const b3AlignedObjectArray<const b3DbvtNode *> &) -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray(const b3AlignedObjectArray<const b3DbvtNode *> &) -> b3AlignedObjectArray<const b3DbvtNode *> [b3AlignedObjectArray.h <137:30 137:49>]
SYMBOL_METHOD public int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3AlignedObjectArray.h <149:3 <149:23 149:26> 152:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<const b3DbvtNode *>::size() const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <149:23 149:26>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::size() const -> int [b3AlignedObjectArray.h <149:19 149:21>]
REFERENCE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::size() const -> int b3AlignedObjectArray<const b3DbvtNode *>::m_size [b3AlignedObjectArray.h <151:11 151:16>]
SYMBOL_METHOD public const b3DbvtNode * const & b3AlignedObjectArray<const b3DbvtNode *>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DbvtNode * const & b3AlignedObjectArray<const b3DbvtNode *>::at(int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TYPE_USAGE const b3DbvtNode * const & b3AlignedObjectArray<const b3DbvtNode *>::at(int) const -> int [b3AlignedObjectArray.h <154:31 154:33>]
SYMBOL_METHOD public const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::at(int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TYPE_USAGE const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::at(int) -> int [b3AlignedObjectArray.h <161:25 161:27>]
SYMBOL_METHOD public const b3DbvtNode * const & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:37>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DbvtNode * const & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:35>]
REFERENCE_TYPE_USAGE const b3DbvtNode * const & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) const -> int [b3AlignedObjectArray.h <168:39 168:41>]
SYMBOL_METHOD public const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3AlignedObjectArray.h <175:3 <175:22 175:31> 180:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) [b3AlignedObjectArray.h <175:22 175:29>]
REFERENCE_TYPE_USAGE const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) -> int [b3AlignedObjectArray.h <175:33 175:35>]
REFERENCE_USAGE const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) -> const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data [b3AlignedObjectArray.h <179:11 179:16>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::clear() [b3AlignedObjectArray.h <184:3 <184:24 184:28> 191:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::clear() -> void b3AlignedObjectArray<typename T>::clear() [b3AlignedObjectArray.h <184:24 184:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::clear() -> void [b3AlignedObjectArray.h <184:19 184:22>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::destroy(int, int)
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::clear() -> void b3AlignedObjectArray<const b3DbvtNode *>::destroy(int, int) [b3AlignedObjectArray.h <186:4 186:10>]
SYMBOL_FUNCTION int b3AlignedObjectArray<const b3DbvtNode *>::size() const
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::clear() -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3AlignedObjectArray.h <186:14 186:17>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::deallocate()
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::clear() -> void b3AlignedObjectArray<const b3DbvtNode *>::deallocate() [b3AlignedObjectArray.h <188:4 188:13>]
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::clear() -> void b3AlignedObjectArray<const b3DbvtNode *>::init() [b3AlignedObjectArray.h <190:4 190:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::pop_back() [b3AlignedObjectArray.h <193:24 193:31>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::pop_back() -> void b3AlignedObjectArray<typename T>::pop_back() [b3AlignedObjectArray.h <193:24 193:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::pop_back() -> void [b3AlignedObjectArray.h <193:19 193:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::resizeNoInitialize(int) -> void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::resizeNoInitialize(int) -> void [b3AlignedObjectArray.h <203:19 203:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::resizeNoInitialize(int) -> int [b3AlignedObjectArray.h <203:43 203:45>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::resize(int, const b3DbvtNode * const &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::resize(int, const b3DbvtNode * const &) -> void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::resize(int, const b3DbvtNode * const &) -> void [b3AlignedObjectArray.h <220:19 220:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::resize(int, const b3DbvtNode * const &) -> int [b3AlignedObjectArray.h <220:31 220:33>]
SYMBOL_METHOD public const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::expandNonInitializing() -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
SYMBOL_METHOD public const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::expand(const b3DbvtNode * const &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::expand(const b3DbvtNode * const &) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TYPE_USAGE const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::expand(const b3DbvtNode * const &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <260:50 260:50>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) [b3AlignedObjectArray.h <276:3 <276:24 276:32> 291:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) -> void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <276:24 276:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) -> void [b3AlignedObjectArray.h <276:19 276:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) -> int [b3AlignedObjectArray.h <278:4 278:6>]
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3AlignedObjectArray.h <278:13 278:16>]
SYMBOL_FUNCTION int b3AlignedObjectArray<const b3DbvtNode *>::capacity() const
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) -> int b3AlignedObjectArray<const b3DbvtNode *>::capacity() const [b3AlignedObjectArray.h <279:14 279:21>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int)
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) -> void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) [b3AlignedObjectArray.h <281:5 281:11>]
SYMBOL_FUNCTION int b3AlignedObjectArray<const b3DbvtNode *>::allocSize(int)
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) -> int b3AlignedObjectArray<const b3DbvtNode *>::allocSize(int) [b3AlignedObjectArray.h <281:14 281:22>]
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3AlignedObjectArray.h <281:24 281:27>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) -> const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data [b3AlignedObjectArray.h <285:11 285:16>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) -> int b3AlignedObjectArray<const b3DbvtNode *>::m_size [b3AlignedObjectArray.h <285:18 285:23>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) -> int b3AlignedObjectArray<const b3DbvtNode *>::m_size [b3AlignedObjectArray.h <290:4 290:9>]
SYMBOL_METHOD public int b3AlignedObjectArray<const b3DbvtNode *>::capacity() const [b3AlignedObjectArray.h <295:3 <295:23 295:30> 298:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<const b3DbvtNode *>::capacity() const -> int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <295:23 295:30>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::capacity() const -> int [b3AlignedObjectArray.h <295:19 295:21>]
REFERENCE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::capacity() const -> int b3AlignedObjectArray<const b3DbvtNode *>::m_capacity [b3AlignedObjectArray.h <297:11 297:20>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) [b3AlignedObjectArray.h <300:3 <300:24 300:30> 326:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <300:24 300:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> void [b3AlignedObjectArray.h <300:19 300:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> int [b3AlignedObjectArray.h <300:32 300:34>]
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> int b3AlignedObjectArray<const b3DbvtNode *>::capacity() const [b3AlignedObjectArray.h <302:8 302:15>]
SYMBOL_FUNCTION void * b3AlignedObjectArray<const b3DbvtNode *>::allocate(int)
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> void * b3AlignedObjectArray<const b3DbvtNode *>::allocate(int) [b3AlignedObjectArray.h <304:16 304:23>]
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> void b3OutputErrorMessageVarArgsInternal(const char *) [b3AlignedObjectArray.h <308:6 308:12>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> int b3AlignedObjectArray<const b3DbvtNode *>::m_size [b3AlignedObjectArray.h <310:6 310:11>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::copy(int, int, const b3DbvtNode * *) const
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> void b3AlignedObjectArray<const b3DbvtNode *>::copy(int, int, const b3DbvtNode * *) const [b3AlignedObjectArray.h <312:5 312:8>]
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3AlignedObjectArray.h <312:13 312:16>]
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> void b3AlignedObjectArray<const b3DbvtNode *>::destroy(int, int) [b3AlignedObjectArray.h <314:5 314:11>]
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3AlignedObjectArray.h <314:15 314:18>]
REFERENCE_CALL void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> void b3AlignedObjectArray<const b3DbvtNode *>::deallocate() [b3AlignedObjectArray.h <316:5 316:14>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> bool b3AlignedObjectArray<const b3DbvtNode *>::m_ownsMemory [b3AlignedObjectArray.h <319:5 319:16>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data [b3AlignedObjectArray.h <321:5 321:10>]
REFERENCE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) -> int b3AlignedObjectArray<const b3DbvtNode *>::m_capacity [b3AlignedObjectArray.h <323:5 323:14>]
SYMBOL_CLASS public b3AlignedObjectArray<const b3DbvtNode *>::less [b3AlignedObjectArray.h <329:9 329:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<const b3DbvtNode *>::less -> b3AlignedObjectArray<typename T>::less [b3AlignedObjectArray.h <329:9 329:12>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<const b3DbvtNode *>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <340:22 340:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::quickSortInternal<typename L>(const L &, int, int) [b3AlignedObjectArray.h <341:8 341:24>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::quickSortInternal<typename L>(const L &, int, int) -> void [b3AlignedObjectArray.h <341:3 341:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<const b3DbvtNode *>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <341:32 341:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:47 341:49>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:55 341:57>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<const b3DbvtNode *>::quickSort<typename L>::L [b3AlignedObjectArray.h <370:22 370:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::quickSort<typename L>(const L &) [b3AlignedObjectArray.h <371:8 371:16>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::quickSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <371:3 371:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::quickSort<typename L>(const L &) -> b3AlignedObjectArray<const b3DbvtNode *>::quickSort<typename L>::L [b3AlignedObjectArray.h <371:24 371:24>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<const b3DbvtNode *>::downHeap<typename L>::L [b3AlignedObjectArray.h <382:22 382:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::downHeap<typename L>(const b3DbvtNode * *, int, int, const L &) [b3AlignedObjectArray.h <383:8 383:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::downHeap<typename L>(const b3DbvtNode * *, int, int, const L &) -> void [b3AlignedObjectArray.h <383:3 383:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::downHeap<typename L>(const b3DbvtNode * *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:26 383:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::downHeap<typename L>(const b3DbvtNode * *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:33 383:35>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::downHeap<typename L>(const b3DbvtNode * *, int, int, const L &) -> b3AlignedObjectArray<const b3DbvtNode *>::downHeap<typename L>::L [b3AlignedObjectArray.h <383:46 383:46>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::swap(int, int) -> void b3AlignedObjectArray<typename T>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::swap(int, int) -> void [b3AlignedObjectArray.h <413:3 413:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::swap(int, int) -> int [b3AlignedObjectArray.h <413:13 413:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::swap(int, int) -> int [b3AlignedObjectArray.h <413:24 413:26>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<const b3DbvtNode *>::heapSort<typename L>::L [b3AlignedObjectArray.h <428:21 428:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::heapSort<typename L>(const L &) [b3AlignedObjectArray.h <429:7 429:14>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::heapSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <429:2 429:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::heapSort<typename L>(const L &) -> b3AlignedObjectArray<const b3DbvtNode *>::heapSort<typename L>::L [b3AlignedObjectArray.h <429:22 429:22>]
SYMBOL_METHOD public int b3AlignedObjectArray<const b3DbvtNode *>::findBinarySearch(const b3DbvtNode * const &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<const b3DbvtNode *>::findBinarySearch(const b3DbvtNode * const &) const -> int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::findBinarySearch(const b3DbvtNode * const &) const -> int [b3AlignedObjectArray.h <452:2 452:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const [b3AlignedObjectArray.h <471:2 <471:6 471:21> 485:2>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const -> int [b3AlignedObjectArray.h <471:2 471:4>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const -> int [b3AlignedObjectArray.h <473:3 473:5>]
REFERENCE_CALL int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3AlignedObjectArray.h <473:13 473:16>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const -> int [b3AlignedObjectArray.h <474:3 474:5>]
REFERENCE_CALL int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3AlignedObjectArray.h <476:14 476:17>]
REFERENCE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const -> const b3DbvtNode * * b3AlignedObjectArray<const b3DbvtNode *>::m_data [b3AlignedObjectArray.h <478:8 478:13>]
SYMBOL_METHOD public int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch2(const b3DbvtNode * const &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch2(const b3DbvtNode * const &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch2(const b3DbvtNode * const &) const -> int [b3AlignedObjectArray.h <487:5 487:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::remove(const b3DbvtNode * const &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::remove(const b3DbvtNode * const &) -> void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::remove(const b3DbvtNode * const &) -> void [b3AlignedObjectArray.h <503:2 503:5>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::initializeFromBuffer(void *, int, int) -> void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:2 515:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:28 515:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:42 515:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:52 515:54>]
SYMBOL_METHOD public void b3AlignedObjectArray<const b3DbvtNode *>::copyFromArray(const b3AlignedObjectArray<const b3DbvtNode *> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<const b3DbvtNode *>::copyFromArray(const b3AlignedObjectArray<const b3DbvtNode *> &) -> void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::copyFromArray(const b3AlignedObjectArray<const b3DbvtNode *> &) -> void [b3AlignedObjectArray.h <524:2 524:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<const b3DbvtNode *>::copyFromArray(const b3AlignedObjectArray<const b3DbvtNode *> &) -> b3AlignedObjectArray<const b3DbvtNode *> [b3AlignedObjectArray.h <524:27 524:46>]
SYMBOL_CLASS b3AlignedObjectArray<int> [b3AlignedObjectArray.h <45:1 <47:7 47:26> 531:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedObjectArray<int> -> b3AlignedObjectArray<typename T> [b3AlignedObjectArray.h <47:7 47:26>]
SYMBOL_FIELD private b3AlignedAllocator<int, 16> b3AlignedObjectArray<int>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<int, 16> b3AlignedObjectArray<int>::m_allocator -> b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<int, 16> b3AlignedObjectArray<int>::m_allocator -> b3AlignedAllocator<int, 16> [b3AlignedObjectArray.h <49:2 49:19>]
SYMBOL_FIELD private int b3AlignedObjectArray<int>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<int>::m_size -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<int>::m_size -> int [b3AlignedObjectArray.h <51:2 51:4>]
SYMBOL_FIELD private int b3AlignedObjectArray<int>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<int>::m_capacity -> int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<int>::m_capacity -> int [b3AlignedObjectArray.h <52:2 52:4>]
SYMBOL_FIELD private int * b3AlignedObjectArray<int>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int * b3AlignedObjectArray<int>::m_data -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
SYMBOL_FIELD private bool b3AlignedObjectArray<int>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION bool b3AlignedObjectArray<int>::m_ownsMemory -> bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TYPE_USAGE bool b3AlignedObjectArray<int>::m_ownsMemory -> bool [b3AlignedObjectArray.h <55:2 55:5>]
SYMBOL_METHOD public b3AlignedObjectArray<int> & b3AlignedObjectArray<int>::operator=(const b3AlignedObjectArray<int> &) [b3AlignedObjectArray.h <59:43 59:51>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<int> & b3AlignedObjectArray<int>::operator=(const b3AlignedObjectArray<int> &) -> b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <59:43 59:50>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<int> & b3AlignedObjectArray<int>::operator=(const b3AlignedObjectArray<int> &) -> b3AlignedObjectArray<int> [b3AlignedObjectArray.h <59:18 59:37>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<int> & b3AlignedObjectArray<int>::operator=(const b3AlignedObjectArray<int> &) -> b3AlignedObjectArray<int> [b3AlignedObjectArray.h <59:59 59:78>]
SYMBOL_METHOD protected int b3AlignedObjectArray<int>::allocSize(int) [b3AlignedObjectArray.h <70:23 70:31>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<int>::allocSize(int) -> int b3AlignedObjectArray<typename T>::allocSize(int) [b3AlignedObjectArray.h <70:23 70:31>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<int>::allocSize(int) -> int [b3AlignedObjectArray.h <70:19 70:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<int>::allocSize(int) -> int [b3AlignedObjectArray.h <70:33 70:35>]
SYMBOL_METHOD protected void b3AlignedObjectArray<int>::copy(int, int, int *) const [b3AlignedObjectArray.h <74:24 74:27>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::copy(int, int, int *) const -> void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const [b3AlignedObjectArray.h <74:24 74:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::copy(int, int, int *) const -> void [b3AlignedObjectArray.h <74:19 74:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::copy(int, int, int *) const -> int [b3AlignedObjectArray.h <74:29 74:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::copy(int, int, int *) const -> int [b3AlignedObjectArray.h <74:39 74:41>]
SYMBOL_METHOD protected void b3AlignedObjectArray<int>::init() [b3AlignedObjectArray.h <85:24 85:27>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::init() -> void b3AlignedObjectArray<typename T>::init() [b3AlignedObjectArray.h <85:24 85:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::init() -> void [b3AlignedObjectArray.h <85:19 85:22>]
SYMBOL_METHOD protected void b3AlignedObjectArray<int>::destroy(int, int) [b3AlignedObjectArray.h <93:24 93:30>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::destroy(int, int) -> void b3AlignedObjectArray<typename T>::destroy(int, int) [b3AlignedObjectArray.h <93:24 93:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::destroy(int, int) -> void [b3AlignedObjectArray.h <93:19 93:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:32 93:34>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:42 93:44>]
SYMBOL_METHOD protected void * b3AlignedObjectArray<int>::allocate(int) [b3AlignedObjectArray.h <102:25 102:32>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void * b3AlignedObjectArray<int>::allocate(int) -> void * b3AlignedObjectArray<typename T>::allocate(int) [b3AlignedObjectArray.h <102:25 102:32>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<int>::allocate(int) -> void [b3AlignedObjectArray.h <102:19 102:22>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<int>::allocate(int) -> int [b3AlignedObjectArray.h <102:34 102:36>]
SYMBOL_METHOD protected void b3AlignedObjectArray<int>::deallocate() [b3AlignedObjectArray.h <109:24 109:33>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::deallocate() -> void b3AlignedObjectArray<typename T>::deallocate() [b3AlignedObjectArray.h <109:24 109:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::deallocate() -> void [b3AlignedObjectArray.h <109:19 109:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::b3AlignedObjectArray() [b3AlignedObjectArray.h <126:3 126:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <126:3 126:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::~b3AlignedObjectArray() [b3AlignedObjectArray.h <131:3 131:23>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::~b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::~b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <131:3 131:3>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::b3AlignedObjectArray(const b3AlignedObjectArray<int> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::b3AlignedObjectArray(const b3AlignedObjectArray<int> &) -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::b3AlignedObjectArray(const b3AlignedObjectArray<int> &) -> b3AlignedObjectArray<int> [b3AlignedObjectArray.h <137:30 137:49>]
SYMBOL_METHOD public int b3AlignedObjectArray<int>::size() const [b3AlignedObjectArray.h <149:3 <149:23 149:26> 152:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<int>::size() const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <149:23 149:26>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<int>::size() const -> int [b3AlignedObjectArray.h <149:19 149:21>]
REFERENCE_USAGE int b3AlignedObjectArray<int>::size() const -> int b3AlignedObjectArray<int>::m_size [b3AlignedObjectArray.h <151:11 151:16>]
SYMBOL_METHOD public const int & b3AlignedObjectArray<int>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const int & b3AlignedObjectArray<int>::at(int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TYPE_USAGE const int & b3AlignedObjectArray<int>::at(int) const -> int [b3AlignedObjectArray.h <154:31 154:33>]
SYMBOL_METHOD public int & b3AlignedObjectArray<int>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int & b3AlignedObjectArray<int>::at(int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TYPE_USAGE int & b3AlignedObjectArray<int>::at(int) -> int [b3AlignedObjectArray.h <161:25 161:27>]
SYMBOL_METHOD public const int & b3AlignedObjectArray<int>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:37>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const int & b3AlignedObjectArray<int>::operator[](int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:35>]
REFERENCE_TYPE_USAGE const int & b3AlignedObjectArray<int>::operator[](int) const -> int [b3AlignedObjectArray.h <168:39 168:41>]
SYMBOL_METHOD public int & b3AlignedObjectArray<int>::operator[](int) [b3AlignedObjectArray.h <175:3 <175:22 175:31> 180:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int & b3AlignedObjectArray<int>::operator[](int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) [b3AlignedObjectArray.h <175:22 175:29>]
REFERENCE_TYPE_USAGE int & b3AlignedObjectArray<int>::operator[](int) -> int [b3AlignedObjectArray.h <175:33 175:35>]
REFERENCE_USAGE int & b3AlignedObjectArray<int>::operator[](int) -> int * b3AlignedObjectArray<int>::m_data [b3AlignedObjectArray.h <179:11 179:16>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::clear() [b3AlignedObjectArray.h <184:24 184:28>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::clear() -> void b3AlignedObjectArray<typename T>::clear() [b3AlignedObjectArray.h <184:24 184:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::clear() -> void [b3AlignedObjectArray.h <184:19 184:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::pop_back() [b3AlignedObjectArray.h <193:3 <193:24 193:31> 198:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::pop_back() -> void b3AlignedObjectArray<typename T>::pop_back() [b3AlignedObjectArray.h <193:24 193:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::pop_back() -> void [b3AlignedObjectArray.h <193:19 193:22>]
REFERENCE_USAGE void b3AlignedObjectArray<int>::pop_back() -> int b3AlignedObjectArray<int>::m_size [b3AlignedObjectArray.h <196:4 196:9>]
REFERENCE_USAGE void b3AlignedObjectArray<int>::pop_back() -> int * b3AlignedObjectArray<int>::m_data [b3AlignedObjectArray.h <197:4 197:9>]
REFERENCE_USAGE void b3AlignedObjectArray<int>::pop_back() -> int b3AlignedObjectArray<int>::m_size [b3AlignedObjectArray.h <197:11 197:16>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::resizeNoInitialize(int) -> void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::resizeNoInitialize(int) -> void [b3AlignedObjectArray.h <203:19 203:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::resizeNoInitialize(int) -> int [b3AlignedObjectArray.h <203:43 203:45>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::resize(int, const int &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::resize(int, const int &) -> void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::resize(int, const int &) -> void [b3AlignedObjectArray.h <220:19 220:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::resize(int, const int &) -> int [b3AlignedObjectArray.h <220:31 220:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::resize(int, const int &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <220:62 220:62>]
SYMBOL_METHOD public int & b3AlignedObjectArray<int>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int & b3AlignedObjectArray<int>::expandNonInitializing() -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
SYMBOL_METHOD public int & b3AlignedObjectArray<int>::expand(const int &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int & b3AlignedObjectArray<int>::expand(const int &) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TYPE_USAGE int & b3AlignedObjectArray<int>::expand(const int &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <260:50 260:50>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::push_back(const int &) [b3AlignedObjectArray.h <276:24 276:32>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::push_back(const int &) -> void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <276:24 276:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::push_back(const int &) -> void [b3AlignedObjectArray.h <276:19 276:22>]
SYMBOL_METHOD public int b3AlignedObjectArray<int>::capacity() const [b3AlignedObjectArray.h <295:23 295:30>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<int>::capacity() const -> int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <295:23 295:30>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<int>::capacity() const -> int [b3AlignedObjectArray.h <295:19 295:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::reserve(int) [b3AlignedObjectArray.h <300:24 300:30>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::reserve(int) -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <300:24 300:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::reserve(int) -> void [b3AlignedObjectArray.h <300:19 300:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::reserve(int) -> int [b3AlignedObjectArray.h <300:32 300:34>]
SYMBOL_CLASS public b3AlignedObjectArray<int>::less [b3AlignedObjectArray.h <329:9 329:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<int>::less -> b3AlignedObjectArray<typename T>::less [b3AlignedObjectArray.h <329:9 329:12>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<int>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <340:22 340:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::quickSortInternal<typename L>(const L &, int, int) [b3AlignedObjectArray.h <341:8 341:24>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::quickSortInternal<typename L>(const L &, int, int) -> void [b3AlignedObjectArray.h <341:3 341:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<int>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <341:32 341:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:47 341:49>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:55 341:57>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<int>::quickSort<typename L>::L [b3AlignedObjectArray.h <370:22 370:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::quickSort<typename L>(const L &) [b3AlignedObjectArray.h <371:8 371:16>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::quickSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <371:3 371:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::quickSort<typename L>(const L &) -> b3AlignedObjectArray<int>::quickSort<typename L>::L [b3AlignedObjectArray.h <371:24 371:24>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<int>::downHeap<typename L>::L [b3AlignedObjectArray.h <382:22 382:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::downHeap<typename L>(int *, int, int, const L &) [b3AlignedObjectArray.h <383:8 383:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::downHeap<typename L>(int *, int, int, const L &) -> void [b3AlignedObjectArray.h <383:3 383:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::downHeap<typename L>(int *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:26 383:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::downHeap<typename L>(int *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:33 383:35>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::downHeap<typename L>(int *, int, int, const L &) -> b3AlignedObjectArray<int>::downHeap<typename L>::L [b3AlignedObjectArray.h <383:46 383:46>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::swap(int, int) -> void b3AlignedObjectArray<typename T>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::swap(int, int) -> void [b3AlignedObjectArray.h <413:3 413:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::swap(int, int) -> int [b3AlignedObjectArray.h <413:13 413:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::swap(int, int) -> int [b3AlignedObjectArray.h <413:24 413:26>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<int>::heapSort<typename L>::L [b3AlignedObjectArray.h <428:21 428:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::heapSort<typename L>(const L &) [b3AlignedObjectArray.h <429:7 429:14>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::heapSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <429:2 429:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::heapSort<typename L>(const L &) -> b3AlignedObjectArray<int>::heapSort<typename L>::L [b3AlignedObjectArray.h <429:22 429:22>]
SYMBOL_METHOD public int b3AlignedObjectArray<int>::findBinarySearch(const int &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<int>::findBinarySearch(const int &) const -> int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<int>::findBinarySearch(const int &) const -> int [b3AlignedObjectArray.h <452:2 452:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<int>::findLinearSearch(const int &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<int>::findLinearSearch(const int &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<int>::findLinearSearch(const int &) const -> int [b3AlignedObjectArray.h <471:2 471:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<int>::findLinearSearch2(const int &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<int>::findLinearSearch2(const int &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<int>::findLinearSearch2(const int &) const -> int [b3AlignedObjectArray.h <487:5 487:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::remove(const int &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::remove(const int &) -> void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::remove(const int &) -> void [b3AlignedObjectArray.h <503:2 503:5>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::initializeFromBuffer(void *, int, int) -> void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:2 515:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:28 515:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:42 515:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:52 515:54>]
SYMBOL_METHOD public void b3AlignedObjectArray<int>::copyFromArray(const b3AlignedObjectArray<int> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<int>::copyFromArray(const b3AlignedObjectArray<int> &) -> void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::copyFromArray(const b3AlignedObjectArray<int> &) -> void [b3AlignedObjectArray.h <524:2 524:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<int>::copyFromArray(const b3AlignedObjectArray<int> &) -> b3AlignedObjectArray<int> [b3AlignedObjectArray.h <524:27 524:46>]
SYMBOL_CLASS b3AlignedObjectArray<b3DynamicBvh::sStkNPS> [b3AlignedObjectArray.h <45:1 <47:7 47:26> 531:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkNPS> -> b3AlignedObjectArray<typename T> [b3AlignedObjectArray.h <47:7 47:26>]
SYMBOL_FIELD private b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_allocator -> b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_allocator -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16> [b3AlignedObjectArray.h <49:2 49:19>]
SYMBOL_FIELD private int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_size -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_size -> int [b3AlignedObjectArray.h <51:2 51:4>]
SYMBOL_FIELD private int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_capacity -> int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_capacity -> int [b3AlignedObjectArray.h <52:2 52:4>]
SYMBOL_FIELD private b3DynamicBvh::sStkNPS * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNPS * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_data -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
SYMBOL_FIELD private bool b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION bool b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_ownsMemory -> bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TYPE_USAGE bool b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_ownsMemory -> bool [b3AlignedObjectArray.h <55:2 55:5>]
SYMBOL_METHOD public b3AlignedObjectArray<b3DynamicBvh::sStkNPS> & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &) [b3AlignedObjectArray.h <59:43 59:51>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkNPS> & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &) -> b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <59:43 59:50>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<b3DynamicBvh::sStkNPS> & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNPS> [b3AlignedObjectArray.h <59:18 59:37>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<b3DynamicBvh::sStkNPS> & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNPS> [b3AlignedObjectArray.h <59:59 59:78>]
SYMBOL_METHOD protected int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocSize(int) [b3AlignedObjectArray.h <70:3 <70:23 70:31> 73:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocSize(int) -> int b3AlignedObjectArray<typename T>::allocSize(int) [b3AlignedObjectArray.h <70:23 70:31>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocSize(int) -> int [b3AlignedObjectArray.h <70:19 70:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocSize(int) -> int [b3AlignedObjectArray.h <70:33 70:35>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copy(int, int, b3DynamicBvh::sStkNPS *) const [b3AlignedObjectArray.h <74:3 <74:24 74:27> 83:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copy(int, int, b3DynamicBvh::sStkNPS *) const -> void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const [b3AlignedObjectArray.h <74:24 74:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copy(int, int, b3DynamicBvh::sStkNPS *) const -> void [b3AlignedObjectArray.h <74:19 74:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copy(int, int, b3DynamicBvh::sStkNPS *) const -> int [b3AlignedObjectArray.h <74:29 74:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copy(int, int, b3DynamicBvh::sStkNPS *) const -> int [b3AlignedObjectArray.h <74:39 74:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copy(int, int, b3DynamicBvh::sStkNPS *) const -> int [b3AlignedObjectArray.h <76:4 76:6>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkNPS::sStkNPS(const b3DynamicBvh::sStkNPS &)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copy(int, int, b3DynamicBvh::sStkNPS *) const -> void b3DynamicBvh::sStkNPS::sStkNPS(const b3DynamicBvh::sStkNPS &) [b3AlignedObjectArray.h <79:20 79:20>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copy(int, int, b3DynamicBvh::sStkNPS *) const -> b3DynamicBvh::sStkNPS * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_data [b3AlignedObjectArray.h <79:22 79:27>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::init() [b3AlignedObjectArray.h <85:24 85:27>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::init() -> void b3AlignedObjectArray<typename T>::init() [b3AlignedObjectArray.h <85:24 85:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::init() -> void [b3AlignedObjectArray.h <85:19 85:22>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::destroy(int, int) [b3AlignedObjectArray.h <93:3 <93:24 93:30> 100:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::destroy(int, int) -> void b3AlignedObjectArray<typename T>::destroy(int, int) [b3AlignedObjectArray.h <93:24 93:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::destroy(int, int) -> void [b3AlignedObjectArray.h <93:19 93:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:32 93:34>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:42 93:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::destroy(int, int) -> int [b3AlignedObjectArray.h <95:4 95:6>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkNPS::~sStkNPS()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::destroy(int, int) -> void b3DynamicBvh::sStkNPS::~sStkNPS() [b3AlignedObjectArray.h <98:16 98:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::destroy(int, int) -> b3DynamicBvh::sStkNPS * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_data [b3AlignedObjectArray.h <98:5 98:10>]
SYMBOL_METHOD protected void * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocate(int) [b3AlignedObjectArray.h <102:3 <102:25 102:32> 107:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocate(int) -> void * b3AlignedObjectArray<typename T>::allocate(int) [b3AlignedObjectArray.h <102:25 102:32>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocate(int) -> void [b3AlignedObjectArray.h <102:19 102:22>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocate(int) -> int [b3AlignedObjectArray.h <102:34 102:36>]
SYMBOL_FUNCTION b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer *)
REFERENCE_CALL void * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocate(int) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::const_pointer *) [b3AlignedObjectArray.h <105:24 105:31>]
REFERENCE_USAGE void * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocate(int) -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_allocator [b3AlignedObjectArray.h <105:12 105:22>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::deallocate() [b3AlignedObjectArray.h <109:3 <109:24 109:33> 119:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::deallocate() -> void b3AlignedObjectArray<typename T>::deallocate() [b3AlignedObjectArray.h <109:24 109:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::deallocate() -> void [b3AlignedObjectArray.h <109:19 109:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::deallocate() -> b3DynamicBvh::sStkNPS * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_data [b3AlignedObjectArray.h <111:7 111:12>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::deallocate() -> bool b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_ownsMemory [b3AlignedObjectArray.h <113:9 113:20>]
SYMBOL_FUNCTION void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::deallocate() -> void b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16>::pointer) [b3AlignedObjectArray.h <115:18 115:27>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::deallocate() -> b3AlignedAllocator<b3DynamicBvh::sStkNPS, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_allocator [b3AlignedObjectArray.h <115:6 115:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::deallocate() -> b3DynamicBvh::sStkNPS * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_data [b3AlignedObjectArray.h <115:29 115:34>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::deallocate() -> b3DynamicBvh::sStkNPS * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_data [b3AlignedObjectArray.h <117:5 117:10>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::b3AlignedObjectArray() [b3AlignedObjectArray.h <126:3 126:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <126:3 126:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::~b3AlignedObjectArray() [b3AlignedObjectArray.h <131:3 131:23>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::~b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::~b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <131:3 131:3>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &) -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNPS> [b3AlignedObjectArray.h <137:30 137:49>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::size() const [b3AlignedObjectArray.h <149:3 <149:23 149:26> 152:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::size() const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <149:23 149:26>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::size() const -> int [b3AlignedObjectArray.h <149:19 149:21>]
REFERENCE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::size() const -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_size [b3AlignedObjectArray.h <151:11 151:16>]
SYMBOL_METHOD public const b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::at(int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TYPE_USAGE const b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::at(int) const -> int [b3AlignedObjectArray.h <154:31 154:33>]
SYMBOL_METHOD public b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::at(int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::at(int) -> int [b3AlignedObjectArray.h <161:25 161:27>]
SYMBOL_METHOD public const b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:37>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:35>]
REFERENCE_TYPE_USAGE const b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int) const -> int [b3AlignedObjectArray.h <168:39 168:41>]
SYMBOL_METHOD public b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int) [b3AlignedObjectArray.h <175:3 <175:22 175:31> 180:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) [b3AlignedObjectArray.h <175:22 175:29>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int) -> int [b3AlignedObjectArray.h <175:33 175:35>]
REFERENCE_USAGE b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int) -> b3DynamicBvh::sStkNPS * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_data [b3AlignedObjectArray.h <179:11 179:16>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::clear() [b3AlignedObjectArray.h <184:24 184:28>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::clear() -> void b3AlignedObjectArray<typename T>::clear() [b3AlignedObjectArray.h <184:24 184:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::clear() -> void [b3AlignedObjectArray.h <184:19 184:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::pop_back() [b3AlignedObjectArray.h <193:24 193:31>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::pop_back() -> void b3AlignedObjectArray<typename T>::pop_back() [b3AlignedObjectArray.h <193:24 193:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::pop_back() -> void [b3AlignedObjectArray.h <193:19 193:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::resizeNoInitialize(int) -> void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::resizeNoInitialize(int) -> void [b3AlignedObjectArray.h <203:19 203:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::resizeNoInitialize(int) -> int [b3AlignedObjectArray.h <203:43 203:45>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::resize(int, const b3DynamicBvh::sStkNPS &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::resize(int, const b3DynamicBvh::sStkNPS &) -> void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::resize(int, const b3DynamicBvh::sStkNPS &) -> void [b3AlignedObjectArray.h <220:19 220:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::resize(int, const b3DynamicBvh::sStkNPS &) -> int [b3AlignedObjectArray.h <220:31 220:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::resize(int, const b3DynamicBvh::sStkNPS &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <220:62 220:62>]
SYMBOL_METHOD public b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::expandNonInitializing() -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
SYMBOL_METHOD public b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::expand(const b3DynamicBvh::sStkNPS &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::expand(const b3DynamicBvh::sStkNPS &) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::expand(const b3DynamicBvh::sStkNPS &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <260:50 260:50>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) [b3AlignedObjectArray.h <276:3 <276:24 276:32> 291:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <276:24 276:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> void [b3AlignedObjectArray.h <276:19 276:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> int [b3AlignedObjectArray.h <278:4 278:6>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::size() const
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::size() const [b3AlignedObjectArray.h <278:13 278:16>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::capacity() const
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::capacity() const [b3AlignedObjectArray.h <279:14 279:21>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) [b3AlignedObjectArray.h <281:5 281:11>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocSize(int)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocSize(int) [b3AlignedObjectArray.h <281:14 281:22>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::size() const [b3AlignedObjectArray.h <281:24 281:27>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> void b3DynamicBvh::sStkNPS::sStkNPS(const b3DynamicBvh::sStkNPS &) [b3AlignedObjectArray.h <285:28 285:28>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> b3DynamicBvh::sStkNPS * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_data [b3AlignedObjectArray.h <285:11 285:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_size [b3AlignedObjectArray.h <285:18 285:23>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_size [b3AlignedObjectArray.h <290:4 290:9>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::capacity() const [b3AlignedObjectArray.h <295:3 <295:23 295:30> 298:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::capacity() const -> int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <295:23 295:30>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::capacity() const -> int [b3AlignedObjectArray.h <295:19 295:21>]
REFERENCE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::capacity() const -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_capacity [b3AlignedObjectArray.h <297:11 297:20>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) [b3AlignedObjectArray.h <300:3 <300:24 300:30> 326:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <300:24 300:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> void [b3AlignedObjectArray.h <300:19 300:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> int [b3AlignedObjectArray.h <300:32 300:34>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::capacity() const [b3AlignedObjectArray.h <302:8 302:15>]
SYMBOL_FUNCTION void * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocate(int)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> void * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::allocate(int) [b3AlignedObjectArray.h <304:16 304:23>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> void b3OutputErrorMessageVarArgsInternal(const char *) [b3AlignedObjectArray.h <308:6 308:12>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_size [b3AlignedObjectArray.h <310:6 310:11>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copy(int, int, b3DynamicBvh::sStkNPS *) const
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copy(int, int, b3DynamicBvh::sStkNPS *) const [b3AlignedObjectArray.h <312:5 312:8>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::size() const [b3AlignedObjectArray.h <312:13 312:16>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::destroy(int, int)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::destroy(int, int) [b3AlignedObjectArray.h <314:5 314:11>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::size() const [b3AlignedObjectArray.h <314:15 314:18>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::deallocate()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::deallocate() [b3AlignedObjectArray.h <316:5 316:14>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> bool b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_ownsMemory [b3AlignedObjectArray.h <319:5 319:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> b3DynamicBvh::sStkNPS * b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_data [b3AlignedObjectArray.h <321:5 321:10>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::m_capacity [b3AlignedObjectArray.h <323:5 323:14>]
SYMBOL_CLASS public b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::less [b3AlignedObjectArray.h <329:9 329:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::less -> b3AlignedObjectArray<typename T>::less [b3AlignedObjectArray.h <329:9 329:12>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <340:22 340:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSortInternal<typename L>(const L &, int, int) [b3AlignedObjectArray.h <341:8 341:24>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSortInternal<typename L>(const L &, int, int) -> void [b3AlignedObjectArray.h <341:3 341:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <341:32 341:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:47 341:49>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:55 341:57>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSort<typename L>::L [b3AlignedObjectArray.h <370:22 370:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSort<typename L>(const L &) [b3AlignedObjectArray.h <371:8 371:16>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <371:3 371:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSort<typename L>(const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::quickSort<typename L>::L [b3AlignedObjectArray.h <371:24 371:24>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::downHeap<typename L>::L [b3AlignedObjectArray.h <382:22 382:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::downHeap<typename L>(b3DynamicBvh::sStkNPS *, int, int, const L &) [b3AlignedObjectArray.h <383:8 383:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::downHeap<typename L>(b3DynamicBvh::sStkNPS *, int, int, const L &) -> void [b3AlignedObjectArray.h <383:3 383:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::downHeap<typename L>(b3DynamicBvh::sStkNPS *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:26 383:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::downHeap<typename L>(b3DynamicBvh::sStkNPS *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:33 383:35>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::downHeap<typename L>(b3DynamicBvh::sStkNPS *, int, int, const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::downHeap<typename L>::L [b3AlignedObjectArray.h <383:46 383:46>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::swap(int, int) -> void b3AlignedObjectArray<typename T>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::swap(int, int) -> void [b3AlignedObjectArray.h <413:3 413:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::swap(int, int) -> int [b3AlignedObjectArray.h <413:13 413:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::swap(int, int) -> int [b3AlignedObjectArray.h <413:24 413:26>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::heapSort<typename L>::L [b3AlignedObjectArray.h <428:21 428:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::heapSort<typename L>(const L &) [b3AlignedObjectArray.h <429:7 429:14>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::heapSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <429:2 429:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::heapSort<typename L>(const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::heapSort<typename L>::L [b3AlignedObjectArray.h <429:22 429:22>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::findBinarySearch(const b3DynamicBvh::sStkNPS &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::findBinarySearch(const b3DynamicBvh::sStkNPS &) const -> int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::findBinarySearch(const b3DynamicBvh::sStkNPS &) const -> int [b3AlignedObjectArray.h <452:2 452:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::findLinearSearch(const b3DynamicBvh::sStkNPS &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::findLinearSearch(const b3DynamicBvh::sStkNPS &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::findLinearSearch(const b3DynamicBvh::sStkNPS &) const -> int [b3AlignedObjectArray.h <471:2 471:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::findLinearSearch2(const b3DynamicBvh::sStkNPS &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::findLinearSearch2(const b3DynamicBvh::sStkNPS &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::findLinearSearch2(const b3DynamicBvh::sStkNPS &) const -> int [b3AlignedObjectArray.h <487:5 487:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::remove(const b3DynamicBvh::sStkNPS &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::remove(const b3DynamicBvh::sStkNPS &) -> void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::remove(const b3DynamicBvh::sStkNPS &) -> void [b3AlignedObjectArray.h <503:2 503:5>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::initializeFromBuffer(void *, int, int) -> void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:2 515:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:28 515:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:42 515:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:52 515:54>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &) -> void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &) -> void [b3AlignedObjectArray.h <524:2 524:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNPS> [b3AlignedObjectArray.h <524:27 524:46>]
SYMBOL_CLASS b3AlignedObjectArray<b3DynamicBvh::sStkNP> [b3AlignedObjectArray.h <45:1 <47:7 47:26> 531:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkNP> -> b3AlignedObjectArray<typename T> [b3AlignedObjectArray.h <47:7 47:26>]
SYMBOL_FIELD private b3AlignedAllocator<b3DynamicBvh::sStkNP, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkNP, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_allocator -> b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkNP, 16> b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_allocator -> b3AlignedAllocator<b3DynamicBvh::sStkNP, 16> [b3AlignedObjectArray.h <49:2 49:19>]
SYMBOL_FIELD private int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_size -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_size -> int [b3AlignedObjectArray.h <51:2 51:4>]
SYMBOL_FIELD private int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_capacity -> int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_capacity -> int [b3AlignedObjectArray.h <52:2 52:4>]
SYMBOL_FIELD private b3DynamicBvh::sStkNP * b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNP * b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_data -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
SYMBOL_FIELD private bool b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION bool b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_ownsMemory -> bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TYPE_USAGE bool b3AlignedObjectArray<b3DynamicBvh::sStkNP>::m_ownsMemory -> bool [b3AlignedObjectArray.h <55:2 55:5>]
SYMBOL_METHOD public b3AlignedObjectArray<b3DynamicBvh::sStkNP> & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNP> &) [b3AlignedObjectArray.h <59:43 59:51>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkNP> & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNP> &) -> b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <59:43 59:50>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<b3DynamicBvh::sStkNP> & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNP> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNP> [b3AlignedObjectArray.h <59:18 59:37>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<b3DynamicBvh::sStkNP> & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkNP> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNP> [b3AlignedObjectArray.h <59:59 59:78>]
SYMBOL_METHOD protected int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::allocSize(int) [b3AlignedObjectArray.h <70:23 70:31>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::allocSize(int) -> int b3AlignedObjectArray<typename T>::allocSize(int) [b3AlignedObjectArray.h <70:23 70:31>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::allocSize(int) -> int [b3AlignedObjectArray.h <70:19 70:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::allocSize(int) -> int [b3AlignedObjectArray.h <70:33 70:35>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::copy(int, int, b3DynamicBvh::sStkNP *) const [b3AlignedObjectArray.h <74:24 74:27>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::copy(int, int, b3DynamicBvh::sStkNP *) const -> void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const [b3AlignedObjectArray.h <74:24 74:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::copy(int, int, b3DynamicBvh::sStkNP *) const -> void [b3AlignedObjectArray.h <74:19 74:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::copy(int, int, b3DynamicBvh::sStkNP *) const -> int [b3AlignedObjectArray.h <74:29 74:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::copy(int, int, b3DynamicBvh::sStkNP *) const -> int [b3AlignedObjectArray.h <74:39 74:41>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::init() [b3AlignedObjectArray.h <85:24 85:27>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::init() -> void b3AlignedObjectArray<typename T>::init() [b3AlignedObjectArray.h <85:24 85:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::init() -> void [b3AlignedObjectArray.h <85:19 85:22>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::destroy(int, int) [b3AlignedObjectArray.h <93:24 93:30>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::destroy(int, int) -> void b3AlignedObjectArray<typename T>::destroy(int, int) [b3AlignedObjectArray.h <93:24 93:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::destroy(int, int) -> void [b3AlignedObjectArray.h <93:19 93:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:32 93:34>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:42 93:44>]
SYMBOL_METHOD protected void * b3AlignedObjectArray<b3DynamicBvh::sStkNP>::allocate(int) [b3AlignedObjectArray.h <102:25 102:32>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void * b3AlignedObjectArray<b3DynamicBvh::sStkNP>::allocate(int) -> void * b3AlignedObjectArray<typename T>::allocate(int) [b3AlignedObjectArray.h <102:25 102:32>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<b3DynamicBvh::sStkNP>::allocate(int) -> void [b3AlignedObjectArray.h <102:19 102:22>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<b3DynamicBvh::sStkNP>::allocate(int) -> int [b3AlignedObjectArray.h <102:34 102:36>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::deallocate() [b3AlignedObjectArray.h <109:24 109:33>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::deallocate() -> void b3AlignedObjectArray<typename T>::deallocate() [b3AlignedObjectArray.h <109:24 109:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::deallocate() -> void [b3AlignedObjectArray.h <109:19 109:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::b3AlignedObjectArray() [b3AlignedObjectArray.h <126:3 126:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <126:3 126:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::~b3AlignedObjectArray() [b3AlignedObjectArray.h <131:3 131:23>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::~b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::~b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <131:3 131:3>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNP> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNP> &) -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNP> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNP> [b3AlignedObjectArray.h <137:30 137:49>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::size() const [b3AlignedObjectArray.h <149:23 149:26>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::size() const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <149:23 149:26>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::size() const -> int [b3AlignedObjectArray.h <149:19 149:21>]
SYMBOL_METHOD public const b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::at(int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TYPE_USAGE const b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::at(int) const -> int [b3AlignedObjectArray.h <154:31 154:33>]
SYMBOL_METHOD public b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::at(int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::at(int) -> int [b3AlignedObjectArray.h <161:25 161:27>]
SYMBOL_METHOD public const b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:37>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator[](int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:35>]
REFERENCE_TYPE_USAGE const b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator[](int) const -> int [b3AlignedObjectArray.h <168:39 168:41>]
SYMBOL_METHOD public b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator[](int) [b3AlignedObjectArray.h <175:22 175:31>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator[](int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) [b3AlignedObjectArray.h <175:22 175:29>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator[](int) -> int [b3AlignedObjectArray.h <175:33 175:35>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::clear() [b3AlignedObjectArray.h <184:24 184:28>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::clear() -> void b3AlignedObjectArray<typename T>::clear() [b3AlignedObjectArray.h <184:24 184:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::clear() -> void [b3AlignedObjectArray.h <184:19 184:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::pop_back() [b3AlignedObjectArray.h <193:24 193:31>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::pop_back() -> void b3AlignedObjectArray<typename T>::pop_back() [b3AlignedObjectArray.h <193:24 193:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::pop_back() -> void [b3AlignedObjectArray.h <193:19 193:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::resizeNoInitialize(int) -> void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::resizeNoInitialize(int) -> void [b3AlignedObjectArray.h <203:19 203:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::resizeNoInitialize(int) -> int [b3AlignedObjectArray.h <203:43 203:45>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::resize(int, const b3DynamicBvh::sStkNP &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::resize(int, const b3DynamicBvh::sStkNP &) -> void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::resize(int, const b3DynamicBvh::sStkNP &) -> void [b3AlignedObjectArray.h <220:19 220:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::resize(int, const b3DynamicBvh::sStkNP &) -> int [b3AlignedObjectArray.h <220:31 220:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::resize(int, const b3DynamicBvh::sStkNP &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <220:62 220:62>]
SYMBOL_METHOD public b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::expandNonInitializing() -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
SYMBOL_METHOD public b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::expand(const b3DynamicBvh::sStkNP &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::expand(const b3DynamicBvh::sStkNP &) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::expand(const b3DynamicBvh::sStkNP &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <260:50 260:50>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::push_back(const b3DynamicBvh::sStkNP &) [b3AlignedObjectArray.h <276:24 276:32>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::push_back(const b3DynamicBvh::sStkNP &) -> void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <276:24 276:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::push_back(const b3DynamicBvh::sStkNP &) -> void [b3AlignedObjectArray.h <276:19 276:22>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::capacity() const [b3AlignedObjectArray.h <295:23 295:30>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::capacity() const -> int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <295:23 295:30>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::capacity() const -> int [b3AlignedObjectArray.h <295:19 295:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::reserve(int) [b3AlignedObjectArray.h <300:24 300:30>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::reserve(int) -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <300:24 300:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::reserve(int) -> void [b3AlignedObjectArray.h <300:19 300:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::reserve(int) -> int [b3AlignedObjectArray.h <300:32 300:34>]
SYMBOL_CLASS public b3AlignedObjectArray<b3DynamicBvh::sStkNP>::less [b3AlignedObjectArray.h <329:9 329:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkNP>::less -> b3AlignedObjectArray<typename T>::less [b3AlignedObjectArray.h <329:9 329:12>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <340:22 340:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSortInternal<typename L>(const L &, int, int) [b3AlignedObjectArray.h <341:8 341:24>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSortInternal<typename L>(const L &, int, int) -> void [b3AlignedObjectArray.h <341:3 341:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <341:32 341:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:47 341:49>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:55 341:57>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSort<typename L>::L [b3AlignedObjectArray.h <370:22 370:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSort<typename L>(const L &) [b3AlignedObjectArray.h <371:8 371:16>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <371:3 371:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSort<typename L>(const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNP>::quickSort<typename L>::L [b3AlignedObjectArray.h <371:24 371:24>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNP>::downHeap<typename L>::L [b3AlignedObjectArray.h <382:22 382:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::downHeap<typename L>(b3DynamicBvh::sStkNP *, int, int, const L &) [b3AlignedObjectArray.h <383:8 383:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::downHeap<typename L>(b3DynamicBvh::sStkNP *, int, int, const L &) -> void [b3AlignedObjectArray.h <383:3 383:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::downHeap<typename L>(b3DynamicBvh::sStkNP *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:26 383:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::downHeap<typename L>(b3DynamicBvh::sStkNP *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:33 383:35>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::downHeap<typename L>(b3DynamicBvh::sStkNP *, int, int, const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNP>::downHeap<typename L>::L [b3AlignedObjectArray.h <383:46 383:46>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::swap(int, int) -> void b3AlignedObjectArray<typename T>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::swap(int, int) -> void [b3AlignedObjectArray.h <413:3 413:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::swap(int, int) -> int [b3AlignedObjectArray.h <413:13 413:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::swap(int, int) -> int [b3AlignedObjectArray.h <413:24 413:26>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkNP>::heapSort<typename L>::L [b3AlignedObjectArray.h <428:21 428:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::heapSort<typename L>(const L &) [b3AlignedObjectArray.h <429:7 429:14>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::heapSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <429:2 429:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::heapSort<typename L>(const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNP>::heapSort<typename L>::L [b3AlignedObjectArray.h <429:22 429:22>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::findBinarySearch(const b3DynamicBvh::sStkNP &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::findBinarySearch(const b3DynamicBvh::sStkNP &) const -> int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::findBinarySearch(const b3DynamicBvh::sStkNP &) const -> int [b3AlignedObjectArray.h <452:2 452:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::findLinearSearch(const b3DynamicBvh::sStkNP &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::findLinearSearch(const b3DynamicBvh::sStkNP &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::findLinearSearch(const b3DynamicBvh::sStkNP &) const -> int [b3AlignedObjectArray.h <471:2 471:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::findLinearSearch2(const b3DynamicBvh::sStkNP &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::findLinearSearch2(const b3DynamicBvh::sStkNP &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::findLinearSearch2(const b3DynamicBvh::sStkNP &) const -> int [b3AlignedObjectArray.h <487:5 487:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::remove(const b3DynamicBvh::sStkNP &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::remove(const b3DynamicBvh::sStkNP &) -> void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::remove(const b3DynamicBvh::sStkNP &) -> void [b3AlignedObjectArray.h <503:2 503:5>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::initializeFromBuffer(void *, int, int) -> void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:2 515:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:28 515:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:42 515:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:52 515:54>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNP> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNP> &) -> void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNP> &) -> void [b3AlignedObjectArray.h <524:2 524:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkNP> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNP> [b3AlignedObjectArray.h <524:27 524:46>]
SYMBOL_CLASS b3AlignedObjectArray<b3DbvtNode *> [b3AlignedObjectArray.h <45:1 <47:7 47:26> 531:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedObjectArray<b3DbvtNode *> -> b3AlignedObjectArray<typename T> [b3AlignedObjectArray.h <47:7 47:26>]
SYMBOL_FIELD private b3AlignedAllocator<b3DbvtNode *, 16> b3AlignedObjectArray<b3DbvtNode *>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DbvtNode *, 16> b3AlignedObjectArray<b3DbvtNode *>::m_allocator -> b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DbvtNode *, 16> b3AlignedObjectArray<b3DbvtNode *>::m_allocator -> b3AlignedAllocator<b3DbvtNode *, 16> [b3AlignedObjectArray.h <49:2 49:19>]
SYMBOL_FIELD private int b3AlignedObjectArray<b3DbvtNode *>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DbvtNode *>::m_size -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DbvtNode *>::m_size -> int [b3AlignedObjectArray.h <51:2 51:4>]
SYMBOL_FIELD private int b3AlignedObjectArray<b3DbvtNode *>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DbvtNode *>::m_capacity -> int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DbvtNode *>::m_capacity -> int [b3AlignedObjectArray.h <52:2 52:4>]
SYMBOL_FIELD private b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
SYMBOL_FIELD private bool b3AlignedObjectArray<b3DbvtNode *>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION bool b3AlignedObjectArray<b3DbvtNode *>::m_ownsMemory -> bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TYPE_USAGE bool b3AlignedObjectArray<b3DbvtNode *>::m_ownsMemory -> bool [b3AlignedObjectArray.h <55:2 55:5>]
SYMBOL_METHOD public b3AlignedObjectArray<b3DbvtNode *> & b3AlignedObjectArray<b3DbvtNode *>::operator=(const b3AlignedObjectArray<b3DbvtNode *> &) [b3AlignedObjectArray.h <59:43 59:51>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<b3DbvtNode *> & b3AlignedObjectArray<b3DbvtNode *>::operator=(const b3AlignedObjectArray<b3DbvtNode *> &) -> b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <59:43 59:50>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<b3DbvtNode *> & b3AlignedObjectArray<b3DbvtNode *>::operator=(const b3AlignedObjectArray<b3DbvtNode *> &) -> b3AlignedObjectArray<b3DbvtNode *> [b3AlignedObjectArray.h <59:18 59:37>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<b3DbvtNode *> & b3AlignedObjectArray<b3DbvtNode *>::operator=(const b3AlignedObjectArray<b3DbvtNode *> &) -> b3AlignedObjectArray<b3DbvtNode *> [b3AlignedObjectArray.h <59:59 59:78>]
SYMBOL_METHOD protected int b3AlignedObjectArray<b3DbvtNode *>::allocSize(int) [b3AlignedObjectArray.h <70:3 <70:23 70:31> 73:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DbvtNode *>::allocSize(int) -> int b3AlignedObjectArray<typename T>::allocSize(int) [b3AlignedObjectArray.h <70:23 70:31>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DbvtNode *>::allocSize(int) -> int [b3AlignedObjectArray.h <70:19 70:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DbvtNode *>::allocSize(int) -> int [b3AlignedObjectArray.h <70:33 70:35>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DbvtNode *>::copy(int, int, b3DbvtNode * *) const [b3AlignedObjectArray.h <74:3 <74:24 74:27> 83:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::copy(int, int, b3DbvtNode * *) const -> void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const [b3AlignedObjectArray.h <74:24 74:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::copy(int, int, b3DbvtNode * *) const -> void [b3AlignedObjectArray.h <74:19 74:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::copy(int, int, b3DbvtNode * *) const -> int [b3AlignedObjectArray.h <74:29 74:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::copy(int, int, b3DbvtNode * *) const -> int [b3AlignedObjectArray.h <74:39 74:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::copy(int, int, b3DbvtNode * *) const -> int [b3AlignedObjectArray.h <76:4 76:6>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::copy(int, int, b3DbvtNode * *) const -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <79:22 79:27>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DbvtNode *>::init() [b3AlignedObjectArray.h <85:3 <85:24 85:27> 92:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::init() -> void b3AlignedObjectArray<typename T>::init() [b3AlignedObjectArray.h <85:24 85:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::init() -> void [b3AlignedObjectArray.h <85:19 85:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::init() -> bool b3AlignedObjectArray<b3DbvtNode *>::m_ownsMemory [b3AlignedObjectArray.h <88:4 88:15>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::init() -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <89:4 89:9>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::init() -> int b3AlignedObjectArray<b3DbvtNode *>::m_size [b3AlignedObjectArray.h <90:4 90:9>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::init() -> int b3AlignedObjectArray<b3DbvtNode *>::m_capacity [b3AlignedObjectArray.h <91:4 91:13>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DbvtNode *>::destroy(int, int) [b3AlignedObjectArray.h <93:3 <93:24 93:30> 100:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::destroy(int, int) -> void b3AlignedObjectArray<typename T>::destroy(int, int) [b3AlignedObjectArray.h <93:24 93:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::destroy(int, int) -> void [b3AlignedObjectArray.h <93:19 93:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:32 93:34>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:42 93:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::destroy(int, int) -> int [b3AlignedObjectArray.h <95:4 95:6>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::destroy(int, int) -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <98:5 98:10>]
SYMBOL_METHOD protected void * b3AlignedObjectArray<b3DbvtNode *>::allocate(int) [b3AlignedObjectArray.h <102:3 <102:25 102:32> 107:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void * b3AlignedObjectArray<b3DbvtNode *>::allocate(int) -> void * b3AlignedObjectArray<typename T>::allocate(int) [b3AlignedObjectArray.h <102:25 102:32>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<b3DbvtNode *>::allocate(int) -> void [b3AlignedObjectArray.h <102:19 102:22>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<b3DbvtNode *>::allocate(int) -> int [b3AlignedObjectArray.h <102:34 102:36>]
SYMBOL_FUNCTION b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer *)
REFERENCE_CALL void * b3AlignedObjectArray<b3DbvtNode *>::allocate(int) -> b3AlignedAllocator<b3DbvtNode *, 16>::pointer b3AlignedAllocator<b3DbvtNode *, 16>::allocate(btSizeType, b3AlignedAllocator<b3DbvtNode *, 16>::const_pointer *) [b3AlignedObjectArray.h <105:24 105:31>]
REFERENCE_USAGE void * b3AlignedObjectArray<b3DbvtNode *>::allocate(int) -> b3AlignedAllocator<b3DbvtNode *, 16> b3AlignedObjectArray<b3DbvtNode *>::m_allocator [b3AlignedObjectArray.h <105:12 105:22>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DbvtNode *>::deallocate() [b3AlignedObjectArray.h <109:3 <109:24 109:33> 119:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::deallocate() -> void b3AlignedObjectArray<typename T>::deallocate() [b3AlignedObjectArray.h <109:24 109:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::deallocate() -> void [b3AlignedObjectArray.h <109:19 109:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::deallocate() -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <111:7 111:12>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::deallocate() -> bool b3AlignedObjectArray<b3DbvtNode *>::m_ownsMemory [b3AlignedObjectArray.h <113:9 113:20>]
SYMBOL_FUNCTION void b3AlignedAllocator<b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<b3DbvtNode *, 16>::pointer)
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::deallocate() -> void b3AlignedAllocator<b3DbvtNode *, 16>::deallocate(b3AlignedAllocator<b3DbvtNode *, 16>::pointer) [b3AlignedObjectArray.h <115:18 115:27>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::deallocate() -> b3AlignedAllocator<b3DbvtNode *, 16> b3AlignedObjectArray<b3DbvtNode *>::m_allocator [b3AlignedObjectArray.h <115:6 115:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::deallocate() -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <115:29 115:34>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::deallocate() -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <117:5 117:10>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray() [b3AlignedObjectArray.h <126:3 <126:3 126:22> 129:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <126:3 126:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray() -> b3AlignedAllocator<b3DbvtNode *, 16> b3AlignedObjectArray<b3DbvtNode *>::m_allocator [b3AlignedObjectArray.h <126:3 126:22>]
SYMBOL_FUNCTION void b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator()
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray() -> void b3AlignedAllocator<b3DbvtNode *, 16>::b3AlignedAllocator() [b3AlignedObjectArray.h <126:3 126:22>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::init()
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray() -> void b3AlignedObjectArray<b3DbvtNode *>::init() [b3AlignedObjectArray.h <128:4 128:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::~b3AlignedObjectArray() [b3AlignedObjectArray.h <131:3 <131:3 131:23> 134:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::~b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::~b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <131:3 131:3>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::clear()
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::~b3AlignedObjectArray() -> void b3AlignedObjectArray<b3DbvtNode *>::clear() [b3AlignedObjectArray.h <133:4 133:8>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DbvtNode *> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DbvtNode *> &) -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DbvtNode *> &) -> b3AlignedObjectArray<b3DbvtNode *> [b3AlignedObjectArray.h <137:30 137:49>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3AlignedObjectArray.h <149:3 <149:23 149:26> 152:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DbvtNode *>::size() const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <149:23 149:26>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DbvtNode *>::size() const -> int [b3AlignedObjectArray.h <149:19 149:21>]
REFERENCE_USAGE int b3AlignedObjectArray<b3DbvtNode *>::size() const -> int b3AlignedObjectArray<b3DbvtNode *>::m_size [b3AlignedObjectArray.h <151:11 151:16>]
SYMBOL_METHOD public b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::at(int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TYPE_USAGE b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::at(int) const -> int [b3AlignedObjectArray.h <154:31 154:33>]
SYMBOL_METHOD public b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::at(int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TYPE_USAGE b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::at(int) -> int [b3AlignedObjectArray.h <161:25 161:27>]
SYMBOL_METHOD public b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const [b3AlignedObjectArray.h <168:3 <168:28 168:37> 173:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:35>]
REFERENCE_TYPE_USAGE b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const -> int [b3AlignedObjectArray.h <168:39 168:41>]
REFERENCE_USAGE b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <172:11 172:16>]
SYMBOL_METHOD public b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3AlignedObjectArray.h <175:3 <175:22 175:31> 180:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) [b3AlignedObjectArray.h <175:22 175:29>]
REFERENCE_TYPE_USAGE b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) -> int [b3AlignedObjectArray.h <175:33 175:35>]
REFERENCE_USAGE b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <179:11 179:16>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::clear() [b3AlignedObjectArray.h <184:3 <184:24 184:28> 191:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::clear() -> void b3AlignedObjectArray<typename T>::clear() [b3AlignedObjectArray.h <184:24 184:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::clear() -> void [b3AlignedObjectArray.h <184:19 184:22>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::destroy(int, int)
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::clear() -> void b3AlignedObjectArray<b3DbvtNode *>::destroy(int, int) [b3AlignedObjectArray.h <186:4 186:10>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::clear() -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3AlignedObjectArray.h <186:14 186:17>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::deallocate()
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::clear() -> void b3AlignedObjectArray<b3DbvtNode *>::deallocate() [b3AlignedObjectArray.h <188:4 188:13>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::clear() -> void b3AlignedObjectArray<b3DbvtNode *>::init() [b3AlignedObjectArray.h <190:4 190:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::pop_back() [b3AlignedObjectArray.h <193:3 <193:24 193:31> 198:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::pop_back() -> void b3AlignedObjectArray<typename T>::pop_back() [b3AlignedObjectArray.h <193:24 193:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::pop_back() -> void [b3AlignedObjectArray.h <193:19 193:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::pop_back() -> int b3AlignedObjectArray<b3DbvtNode *>::m_size [b3AlignedObjectArray.h <196:4 196:9>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::pop_back() -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <197:4 197:9>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::pop_back() -> int b3AlignedObjectArray<b3DbvtNode *>::m_size [b3AlignedObjectArray.h <197:11 197:16>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::resizeNoInitialize(int) -> void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::resizeNoInitialize(int) -> void [b3AlignedObjectArray.h <203:19 203:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::resizeNoInitialize(int) -> int [b3AlignedObjectArray.h <203:43 203:45>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) [b3AlignedObjectArray.h <220:3 <220:24 220:29> 246:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> void [b3AlignedObjectArray.h <220:19 220:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> int [b3AlignedObjectArray.h <220:31 220:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> int [b3AlignedObjectArray.h <222:4 222:6>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3AlignedObjectArray.h <222:18 222:21>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> int [b3AlignedObjectArray.h <226:9 226:11>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <228:6 228:11>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3AlignedObjectArray.h <232:19 232:22>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::reserve(int)
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3AlignedObjectArray.h <234:6 234:12>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> int [b3AlignedObjectArray.h <237:10 237:12>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <239:13 239:18>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) -> int b3AlignedObjectArray<b3DbvtNode *>::m_size [b3AlignedObjectArray.h <245:4 245:9>]
SYMBOL_METHOD public b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::expandNonInitializing() -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
SYMBOL_METHOD public b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::expand(b3DbvtNode * const &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::expand(b3DbvtNode * const &) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TYPE_USAGE b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::expand(b3DbvtNode * const &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <260:50 260:50>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) [b3AlignedObjectArray.h <276:3 <276:24 276:32> 291:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) -> void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <276:24 276:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) -> void [b3AlignedObjectArray.h <276:19 276:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) -> int [b3AlignedObjectArray.h <278:4 278:6>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3AlignedObjectArray.h <278:13 278:16>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::capacity() const
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) -> int b3AlignedObjectArray<b3DbvtNode *>::capacity() const [b3AlignedObjectArray.h <279:14 279:21>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3AlignedObjectArray.h <281:5 281:11>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::allocSize(int)
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) -> int b3AlignedObjectArray<b3DbvtNode *>::allocSize(int) [b3AlignedObjectArray.h <281:14 281:22>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3AlignedObjectArray.h <281:24 281:27>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <285:11 285:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) -> int b3AlignedObjectArray<b3DbvtNode *>::m_size [b3AlignedObjectArray.h <285:18 285:23>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) -> int b3AlignedObjectArray<b3DbvtNode *>::m_size [b3AlignedObjectArray.h <290:4 290:9>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DbvtNode *>::capacity() const [b3AlignedObjectArray.h <295:3 <295:23 295:30> 298:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DbvtNode *>::capacity() const -> int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <295:23 295:30>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DbvtNode *>::capacity() const -> int [b3AlignedObjectArray.h <295:19 295:21>]
REFERENCE_USAGE int b3AlignedObjectArray<b3DbvtNode *>::capacity() const -> int b3AlignedObjectArray<b3DbvtNode *>::m_capacity [b3AlignedObjectArray.h <297:11 297:20>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3AlignedObjectArray.h <300:3 <300:24 300:30> 326:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <300:24 300:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> void [b3AlignedObjectArray.h <300:19 300:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> int [b3AlignedObjectArray.h <300:32 300:34>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> int b3AlignedObjectArray<b3DbvtNode *>::capacity() const [b3AlignedObjectArray.h <302:8 302:15>]
SYMBOL_FUNCTION void * b3AlignedObjectArray<b3DbvtNode *>::allocate(int)
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> void * b3AlignedObjectArray<b3DbvtNode *>::allocate(int) [b3AlignedObjectArray.h <304:16 304:23>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> void b3OutputErrorMessageVarArgsInternal(const char *) [b3AlignedObjectArray.h <308:6 308:12>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> int b3AlignedObjectArray<b3DbvtNode *>::m_size [b3AlignedObjectArray.h <310:6 310:11>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::copy(int, int, b3DbvtNode * *) const
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> void b3AlignedObjectArray<b3DbvtNode *>::copy(int, int, b3DbvtNode * *) const [b3AlignedObjectArray.h <312:5 312:8>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3AlignedObjectArray.h <312:13 312:16>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> void b3AlignedObjectArray<b3DbvtNode *>::destroy(int, int) [b3AlignedObjectArray.h <314:5 314:11>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3AlignedObjectArray.h <314:15 314:18>]
REFERENCE_CALL void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> void b3AlignedObjectArray<b3DbvtNode *>::deallocate() [b3AlignedObjectArray.h <316:5 316:14>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> bool b3AlignedObjectArray<b3DbvtNode *>::m_ownsMemory [b3AlignedObjectArray.h <319:5 319:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <321:5 321:10>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) -> int b3AlignedObjectArray<b3DbvtNode *>::m_capacity [b3AlignedObjectArray.h <323:5 323:14>]
SYMBOL_CLASS public b3AlignedObjectArray<b3DbvtNode *>::less [b3AlignedObjectArray.h <329:9 329:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<b3DbvtNode *>::less -> b3AlignedObjectArray<typename T>::less [b3AlignedObjectArray.h <329:9 329:12>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DbvtNode *>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <340:22 340:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::quickSortInternal<typename L>(const L &, int, int) [b3AlignedObjectArray.h <341:8 341:24>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::quickSortInternal<typename L>(const L &, int, int) -> void [b3AlignedObjectArray.h <341:3 341:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<b3DbvtNode *>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <341:32 341:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:47 341:49>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:55 341:57>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DbvtNode *>::quickSort<typename L>::L [b3AlignedObjectArray.h <370:22 370:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::quickSort<typename L>(const L &) [b3AlignedObjectArray.h <371:8 371:16>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::quickSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <371:3 371:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::quickSort<typename L>(const L &) -> b3AlignedObjectArray<b3DbvtNode *>::quickSort<typename L>::L [b3AlignedObjectArray.h <371:24 371:24>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DbvtNode *>::downHeap<typename L>::L [b3AlignedObjectArray.h <382:22 382:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::downHeap<typename L>(b3DbvtNode * *, int, int, const L &) [b3AlignedObjectArray.h <383:8 383:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::downHeap<typename L>(b3DbvtNode * *, int, int, const L &) -> void [b3AlignedObjectArray.h <383:3 383:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::downHeap<typename L>(b3DbvtNode * *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:26 383:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::downHeap<typename L>(b3DbvtNode * *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:33 383:35>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::downHeap<typename L>(b3DbvtNode * *, int, int, const L &) -> b3AlignedObjectArray<b3DbvtNode *>::downHeap<typename L>::L [b3AlignedObjectArray.h <383:46 383:46>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int) [b3AlignedObjectArray.h <413:3 <413:8 413:11> 426:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int) -> void b3AlignedObjectArray<typename T>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int) -> void [b3AlignedObjectArray.h <413:3 413:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int) -> int [b3AlignedObjectArray.h <413:13 413:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int) -> int [b3AlignedObjectArray.h <413:24 413:26>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int) -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <421:13 421:18>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int) -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <422:4 422:9>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int) -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <422:21 422:26>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int) -> b3DbvtNode * * b3AlignedObjectArray<b3DbvtNode *>::m_data [b3AlignedObjectArray.h <423:4 423:9>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DbvtNode *>::heapSort<typename L>::L [b3AlignedObjectArray.h <428:21 428:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::heapSort<typename L>(const L &) [b3AlignedObjectArray.h <429:7 429:14>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::heapSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <429:2 429:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::heapSort<typename L>(const L &) -> b3AlignedObjectArray<b3DbvtNode *>::heapSort<typename L>::L [b3AlignedObjectArray.h <429:22 429:22>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DbvtNode *>::findBinarySearch(b3DbvtNode * const &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DbvtNode *>::findBinarySearch(b3DbvtNode * const &) const -> int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DbvtNode *>::findBinarySearch(b3DbvtNode * const &) const -> int [b3AlignedObjectArray.h <452:2 452:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DbvtNode *>::findLinearSearch(b3DbvtNode * const &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DbvtNode *>::findLinearSearch(b3DbvtNode * const &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DbvtNode *>::findLinearSearch(b3DbvtNode * const &) const -> int [b3AlignedObjectArray.h <471:2 471:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DbvtNode *>::findLinearSearch2(b3DbvtNode * const &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DbvtNode *>::findLinearSearch2(b3DbvtNode * const &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DbvtNode *>::findLinearSearch2(b3DbvtNode * const &) const -> int [b3AlignedObjectArray.h <487:5 487:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::remove(b3DbvtNode * const &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::remove(b3DbvtNode * const &) -> void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::remove(b3DbvtNode * const &) -> void [b3AlignedObjectArray.h <503:2 503:5>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::initializeFromBuffer(void *, int, int) -> void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:2 515:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:28 515:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:42 515:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:52 515:54>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DbvtNode *>::copyFromArray(const b3AlignedObjectArray<b3DbvtNode *> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DbvtNode *>::copyFromArray(const b3AlignedObjectArray<b3DbvtNode *> &) -> void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::copyFromArray(const b3AlignedObjectArray<b3DbvtNode *> &) -> void [b3AlignedObjectArray.h <524:2 524:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DbvtNode *>::copyFromArray(const b3AlignedObjectArray<b3DbvtNode *> &) -> b3AlignedObjectArray<b3DbvtNode *> [b3AlignedObjectArray.h <524:27 524:46>]
SYMBOL_CLASS b3AlignedObjectArray<b3DynamicBvh::sStkCLN> [b3AlignedObjectArray.h <45:1 <47:7 47:26> 531:1>]
REFERENCE_TEMPLATE_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkCLN> -> b3AlignedObjectArray<typename T> [b3AlignedObjectArray.h <47:7 47:26>]
SYMBOL_FIELD private b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_allocator -> b3AlignedAllocator<b3AlignedObjectArray<typename T>::T, 16> b3AlignedObjectArray<typename T>::m_allocator [b3AlignedObjectArray.h <49:29 49:39>]
REFERENCE_TYPE_USAGE b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_allocator -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> [b3AlignedObjectArray.h <49:2 49:19>]
SYMBOL_FIELD private int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_size -> int b3AlignedObjectArray<typename T>::m_size [b3AlignedObjectArray.h <51:10 51:15>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_size -> int [b3AlignedObjectArray.h <51:2 51:4>]
SYMBOL_FIELD private int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_capacity -> int b3AlignedObjectArray<typename T>::m_capacity [b3AlignedObjectArray.h <52:10 52:19>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_capacity -> int [b3AlignedObjectArray.h <52:2 52:4>]
SYMBOL_FIELD private b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data -> b3AlignedObjectArray<typename T>::T * b3AlignedObjectArray<typename T>::m_data [b3AlignedObjectArray.h <53:9 53:14>]
SYMBOL_FIELD private bool b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION bool b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_ownsMemory -> bool b3AlignedObjectArray<typename T>::m_ownsMemory [b3AlignedObjectArray.h <55:10 55:21>]
REFERENCE_TYPE_USAGE bool b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_ownsMemory -> bool [b3AlignedObjectArray.h <55:2 55:5>]
SYMBOL_METHOD public b3AlignedObjectArray<b3DynamicBvh::sStkCLN> & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkCLN> &) [b3AlignedObjectArray.h <59:43 59:51>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkCLN> & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkCLN> &) -> b3AlignedObjectArray<T> & b3AlignedObjectArray<typename T>::operator=(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <59:43 59:50>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<b3DynamicBvh::sStkCLN> & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkCLN> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkCLN> [b3AlignedObjectArray.h <59:18 59:37>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<b3DynamicBvh::sStkCLN> & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator=(const b3AlignedObjectArray<b3DynamicBvh::sStkCLN> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkCLN> [b3AlignedObjectArray.h <59:59 59:78>]
SYMBOL_METHOD protected int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocSize(int) [b3AlignedObjectArray.h <70:3 <70:23 70:31> 73:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocSize(int) -> int b3AlignedObjectArray<typename T>::allocSize(int) [b3AlignedObjectArray.h <70:23 70:31>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocSize(int) -> int [b3AlignedObjectArray.h <70:19 70:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocSize(int) -> int [b3AlignedObjectArray.h <70:33 70:35>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copy(int, int, b3DynamicBvh::sStkCLN *) const [b3AlignedObjectArray.h <74:3 <74:24 74:27> 83:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copy(int, int, b3DynamicBvh::sStkCLN *) const -> void b3AlignedObjectArray<typename T>::copy(int, int, b3AlignedObjectArray<typename T>::T *) const [b3AlignedObjectArray.h <74:24 74:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copy(int, int, b3DynamicBvh::sStkCLN *) const -> void [b3AlignedObjectArray.h <74:19 74:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copy(int, int, b3DynamicBvh::sStkCLN *) const -> int [b3AlignedObjectArray.h <74:29 74:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copy(int, int, b3DynamicBvh::sStkCLN *) const -> int [b3AlignedObjectArray.h <74:39 74:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copy(int, int, b3DynamicBvh::sStkCLN *) const -> int [b3AlignedObjectArray.h <76:4 76:6>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkCLN::sStkCLN(const b3DynamicBvh::sStkCLN &)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copy(int, int, b3DynamicBvh::sStkCLN *) const -> void b3DynamicBvh::sStkCLN::sStkCLN(const b3DynamicBvh::sStkCLN &) [b3AlignedObjectArray.h <79:20 79:20>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copy(int, int, b3DynamicBvh::sStkCLN *) const -> b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data [b3AlignedObjectArray.h <79:22 79:27>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::init() [b3AlignedObjectArray.h <85:3 <85:24 85:27> 92:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::init() -> void b3AlignedObjectArray<typename T>::init() [b3AlignedObjectArray.h <85:24 85:27>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::init() -> void [b3AlignedObjectArray.h <85:19 85:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::init() -> bool b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_ownsMemory [b3AlignedObjectArray.h <88:4 88:15>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::init() -> b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data [b3AlignedObjectArray.h <89:4 89:9>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::init() -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_size [b3AlignedObjectArray.h <90:4 90:9>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::init() -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_capacity [b3AlignedObjectArray.h <91:4 91:13>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::destroy(int, int) [b3AlignedObjectArray.h <93:3 <93:24 93:30> 100:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::destroy(int, int) -> void b3AlignedObjectArray<typename T>::destroy(int, int) [b3AlignedObjectArray.h <93:24 93:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::destroy(int, int) -> void [b3AlignedObjectArray.h <93:19 93:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:32 93:34>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::destroy(int, int) -> int [b3AlignedObjectArray.h <93:42 93:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::destroy(int, int) -> int [b3AlignedObjectArray.h <95:4 95:6>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkCLN::~sStkCLN()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::destroy(int, int) -> void b3DynamicBvh::sStkCLN::~sStkCLN() [b3AlignedObjectArray.h <98:16 98:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::destroy(int, int) -> b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data [b3AlignedObjectArray.h <98:5 98:10>]
SYMBOL_METHOD protected void * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocate(int) [b3AlignedObjectArray.h <102:3 <102:25 102:32> 107:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocate(int) -> void * b3AlignedObjectArray<typename T>::allocate(int) [b3AlignedObjectArray.h <102:25 102:32>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocate(int) -> void [b3AlignedObjectArray.h <102:19 102:22>]
REFERENCE_TYPE_USAGE void * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocate(int) -> int [b3AlignedObjectArray.h <102:34 102:36>]
SYMBOL_FUNCTION b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer *)
REFERENCE_CALL void * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocate(int) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::allocate(btSizeType, b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::const_pointer *) [b3AlignedObjectArray.h <105:24 105:31>]
REFERENCE_USAGE void * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocate(int) -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_allocator [b3AlignedObjectArray.h <105:12 105:22>]
SYMBOL_METHOD protected void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate() [b3AlignedObjectArray.h <109:3 <109:24 109:33> 119:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate() -> void b3AlignedObjectArray<typename T>::deallocate() [b3AlignedObjectArray.h <109:24 109:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate() -> void [b3AlignedObjectArray.h <109:19 109:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate() -> b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data [b3AlignedObjectArray.h <111:7 111:12>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate() -> bool b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_ownsMemory [b3AlignedObjectArray.h <113:9 113:20>]
SYMBOL_FUNCTION void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate() -> void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::deallocate(b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::pointer) [b3AlignedObjectArray.h <115:18 115:27>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate() -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_allocator [b3AlignedObjectArray.h <115:6 115:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate() -> b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data [b3AlignedObjectArray.h <115:29 115:34>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate() -> b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data [b3AlignedObjectArray.h <117:5 117:10>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray() [b3AlignedObjectArray.h <126:3 <126:3 126:22> 129:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <126:3 126:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray() -> b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16> b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_allocator [b3AlignedObjectArray.h <126:3 126:22>]
SYMBOL_FUNCTION void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray() -> void b3AlignedAllocator<b3DynamicBvh::sStkCLN, 16>::b3AlignedAllocator() [b3AlignedObjectArray.h <126:3 126:22>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::init()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray() -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::init() [b3AlignedObjectArray.h <128:4 128:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::~b3AlignedObjectArray() [b3AlignedObjectArray.h <131:3 <131:3 131:23> 134:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::~b3AlignedObjectArray() -> void b3AlignedObjectArray<typename T>::~b3AlignedObjectArray<T>() [b3AlignedObjectArray.h <131:3 131:3>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::clear()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::~b3AlignedObjectArray() -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::clear() [b3AlignedObjectArray.h <133:4 133:8>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkCLN> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkCLN> &) -> void b3AlignedObjectArray<typename T>::b3AlignedObjectArray<T>(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <137:3 137:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray(const b3AlignedObjectArray<b3DynamicBvh::sStkCLN> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkCLN> [b3AlignedObjectArray.h <137:30 137:49>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const [b3AlignedObjectArray.h <149:3 <149:23 149:26> 152:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const -> int b3AlignedObjectArray<typename T>::size() const [b3AlignedObjectArray.h <149:23 149:26>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const -> int [b3AlignedObjectArray.h <149:19 149:21>]
REFERENCE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_size [b3AlignedObjectArray.h <151:11 151:16>]
SYMBOL_METHOD public const b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::at(int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) const [b3AlignedObjectArray.h <154:28 154:29>]
REFERENCE_TYPE_USAGE const b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::at(int) const -> int [b3AlignedObjectArray.h <154:31 154:33>]
SYMBOL_METHOD public b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::at(int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::at(int) [b3AlignedObjectArray.h <161:22 161:23>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::at(int) -> int [b3AlignedObjectArray.h <161:25 161:27>]
SYMBOL_METHOD public const b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:37>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION const b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator[](int) const -> const b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) const [b3AlignedObjectArray.h <168:28 168:35>]
REFERENCE_TYPE_USAGE const b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator[](int) const -> int [b3AlignedObjectArray.h <168:39 168:41>]
SYMBOL_METHOD public b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator[](int) [b3AlignedObjectArray.h <175:3 <175:22 175:31> 180:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator[](int) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::operator[](int) [b3AlignedObjectArray.h <175:22 175:29>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator[](int) -> int [b3AlignedObjectArray.h <175:33 175:35>]
REFERENCE_USAGE b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator[](int) -> b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data [b3AlignedObjectArray.h <179:11 179:16>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::clear() [b3AlignedObjectArray.h <184:3 <184:24 184:28> 191:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::clear() -> void b3AlignedObjectArray<typename T>::clear() [b3AlignedObjectArray.h <184:24 184:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::clear() -> void [b3AlignedObjectArray.h <184:19 184:22>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::destroy(int, int)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::clear() -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::destroy(int, int) [b3AlignedObjectArray.h <186:4 186:10>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::clear() -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const [b3AlignedObjectArray.h <186:14 186:17>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate()
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::clear() -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate() [b3AlignedObjectArray.h <188:4 188:13>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::clear() -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::init() [b3AlignedObjectArray.h <190:4 190:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::pop_back() [b3AlignedObjectArray.h <193:3 <193:24 193:31> 198:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::pop_back() -> void b3AlignedObjectArray<typename T>::pop_back() [b3AlignedObjectArray.h <193:24 193:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::pop_back() -> void [b3AlignedObjectArray.h <193:19 193:22>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::pop_back() -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_size [b3AlignedObjectArray.h <196:4 196:9>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::pop_back() -> void b3DynamicBvh::sStkCLN::~sStkCLN() [b3AlignedObjectArray.h <197:20 197:20>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::pop_back() -> b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data [b3AlignedObjectArray.h <197:4 197:9>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::pop_back() -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_size [b3AlignedObjectArray.h <197:11 197:16>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::resizeNoInitialize(int) -> void b3AlignedObjectArray<typename T>::resizeNoInitialize(int) [b3AlignedObjectArray.h <203:24 203:41>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::resizeNoInitialize(int) -> void [b3AlignedObjectArray.h <203:19 203:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::resizeNoInitialize(int) -> int [b3AlignedObjectArray.h <203:43 203:45>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::resize(int, const b3DynamicBvh::sStkCLN &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::resize(int, const b3DynamicBvh::sStkCLN &) -> void b3AlignedObjectArray<typename T>::resize(int, const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <220:24 220:29>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::resize(int, const b3DynamicBvh::sStkCLN &) -> void [b3AlignedObjectArray.h <220:19 220:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::resize(int, const b3DynamicBvh::sStkCLN &) -> int [b3AlignedObjectArray.h <220:31 220:33>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::resize(int, const b3DynamicBvh::sStkCLN &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <220:62 220:62>]
SYMBOL_METHOD public b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::expandNonInitializing() -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expandNonInitializing() [b3AlignedObjectArray.h <247:23 247:43>]
SYMBOL_METHOD public b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::expand(const b3DynamicBvh::sStkCLN &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::expand(const b3DynamicBvh::sStkCLN &) -> b3AlignedObjectArray<typename T>::T & b3AlignedObjectArray<typename T>::expand(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <260:23 260:28>]
REFERENCE_TYPE_USAGE b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::expand(const b3DynamicBvh::sStkCLN &) -> b3AlignedObjectArray<typename T>::T [b3AlignedObjectArray.h <260:50 260:50>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) [b3AlignedObjectArray.h <276:3 <276:24 276:32> 291:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> void b3AlignedObjectArray<typename T>::push_back(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <276:24 276:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> void [b3AlignedObjectArray.h <276:19 276:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> int [b3AlignedObjectArray.h <278:4 278:6>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const [b3AlignedObjectArray.h <278:13 278:16>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::capacity() const
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::capacity() const [b3AlignedObjectArray.h <279:14 279:21>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) [b3AlignedObjectArray.h <281:5 281:11>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocSize(int)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocSize(int) [b3AlignedObjectArray.h <281:14 281:22>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const [b3AlignedObjectArray.h <281:24 281:27>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> void b3DynamicBvh::sStkCLN::sStkCLN(const b3DynamicBvh::sStkCLN &) [b3AlignedObjectArray.h <285:28 285:28>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data [b3AlignedObjectArray.h <285:11 285:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_size [b3AlignedObjectArray.h <285:18 285:23>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_size [b3AlignedObjectArray.h <290:4 290:9>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::capacity() const [b3AlignedObjectArray.h <295:3 <295:23 295:30> 298:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::capacity() const -> int b3AlignedObjectArray<typename T>::capacity() const [b3AlignedObjectArray.h <295:23 295:30>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::capacity() const -> int [b3AlignedObjectArray.h <295:19 295:21>]
REFERENCE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::capacity() const -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_capacity [b3AlignedObjectArray.h <297:11 297:20>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) [b3AlignedObjectArray.h <300:3 <300:24 300:30> 326:3>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> void b3AlignedObjectArray<typename T>::reserve(int) [b3AlignedObjectArray.h <300:24 300:30>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> void [b3AlignedObjectArray.h <300:19 300:22>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> int [b3AlignedObjectArray.h <300:32 300:34>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::capacity() const [b3AlignedObjectArray.h <302:8 302:15>]
SYMBOL_FUNCTION void * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocate(int)
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> void * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::allocate(int) [b3AlignedObjectArray.h <304:16 304:23>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> void b3OutputErrorMessageVarArgsInternal(const char *) [b3AlignedObjectArray.h <308:6 308:12>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_size [b3AlignedObjectArray.h <310:6 310:11>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copy(int, int, b3DynamicBvh::sStkCLN *) const
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copy(int, int, b3DynamicBvh::sStkCLN *) const [b3AlignedObjectArray.h <312:5 312:8>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const [b3AlignedObjectArray.h <312:13 312:16>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::destroy(int, int) [b3AlignedObjectArray.h <314:5 314:11>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const [b3AlignedObjectArray.h <314:15 314:18>]
REFERENCE_CALL void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::deallocate() [b3AlignedObjectArray.h <316:5 316:14>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> bool b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_ownsMemory [b3AlignedObjectArray.h <319:5 319:16>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> b3DynamicBvh::sStkCLN * b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_data [b3AlignedObjectArray.h <321:5 321:10>]
REFERENCE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::m_capacity [b3AlignedObjectArray.h <323:5 323:14>]
SYMBOL_CLASS public b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::less [b3AlignedObjectArray.h <329:9 329:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::less -> b3AlignedObjectArray<typename T>::less [b3AlignedObjectArray.h <329:9 329:12>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <340:22 340:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSortInternal<typename L>(const L &, int, int) [b3AlignedObjectArray.h <341:8 341:24>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSortInternal<typename L>(const L &, int, int) -> void [b3AlignedObjectArray.h <341:3 341:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSortInternal<typename L>(const L &, int, int) -> b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSortInternal<typename L>::L [b3AlignedObjectArray.h <341:32 341:32>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:47 341:49>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSortInternal<typename L>(const L &, int, int) -> int [b3AlignedObjectArray.h <341:55 341:57>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSort<typename L>::L [b3AlignedObjectArray.h <370:22 370:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSort<typename L>(const L &) [b3AlignedObjectArray.h <371:8 371:16>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <371:3 371:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSort<typename L>(const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::quickSort<typename L>::L [b3AlignedObjectArray.h <371:24 371:24>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::downHeap<typename L>::L [b3AlignedObjectArray.h <382:22 382:22>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::downHeap<typename L>(b3DynamicBvh::sStkCLN *, int, int, const L &) [b3AlignedObjectArray.h <383:8 383:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::downHeap<typename L>(b3DynamicBvh::sStkCLN *, int, int, const L &) -> void [b3AlignedObjectArray.h <383:3 383:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::downHeap<typename L>(b3DynamicBvh::sStkCLN *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:26 383:28>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::downHeap<typename L>(b3DynamicBvh::sStkCLN *, int, int, const L &) -> int [b3AlignedObjectArray.h <383:33 383:35>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::downHeap<typename L>(b3DynamicBvh::sStkCLN *, int, int, const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::downHeap<typename L>::L [b3AlignedObjectArray.h <383:46 383:46>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::swap(int, int) -> void b3AlignedObjectArray<typename T>::swap(int, int) [b3AlignedObjectArray.h <413:8 413:11>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::swap(int, int) -> void [b3AlignedObjectArray.h <413:3 413:6>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::swap(int, int) -> int [b3AlignedObjectArray.h <413:13 413:15>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::swap(int, int) -> int [b3AlignedObjectArray.h <413:24 413:26>]
SYMBOL_TEMPLATE_PARAMETER b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::heapSort<typename L>::L [b3AlignedObjectArray.h <428:21 428:21>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::heapSort<typename L>(const L &) [b3AlignedObjectArray.h <429:7 429:14>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::heapSort<typename L>(const L &) -> void [b3AlignedObjectArray.h <429:2 429:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::heapSort<typename L>(const L &) -> b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::heapSort<typename L>::L [b3AlignedObjectArray.h <429:22 429:22>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::findBinarySearch(const b3DynamicBvh::sStkCLN &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::findBinarySearch(const b3DynamicBvh::sStkCLN &) const -> int b3AlignedObjectArray<typename T>::findBinarySearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <452:6 452:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::findBinarySearch(const b3DynamicBvh::sStkCLN &) const -> int [b3AlignedObjectArray.h <452:2 452:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::findLinearSearch(const b3DynamicBvh::sStkCLN &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::findLinearSearch(const b3DynamicBvh::sStkCLN &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <471:6 471:21>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::findLinearSearch(const b3DynamicBvh::sStkCLN &) const -> int [b3AlignedObjectArray.h <471:2 471:4>]
SYMBOL_METHOD public int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::findLinearSearch2(const b3DynamicBvh::sStkCLN &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::findLinearSearch2(const b3DynamicBvh::sStkCLN &) const -> int b3AlignedObjectArray<typename T>::findLinearSearch2(const b3AlignedObjectArray<typename T>::T &) const [b3AlignedObjectArray.h <487:9 487:25>]
REFERENCE_TYPE_USAGE int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::findLinearSearch2(const b3DynamicBvh::sStkCLN &) const -> int [b3AlignedObjectArray.h <487:5 487:7>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::remove(const b3DynamicBvh::sStkCLN &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::remove(const b3DynamicBvh::sStkCLN &) -> void b3AlignedObjectArray<typename T>::remove(const b3AlignedObjectArray<typename T>::T &) [b3AlignedObjectArray.h <503:7 503:12>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::remove(const b3DynamicBvh::sStkCLN &) -> void [b3AlignedObjectArray.h <503:2 503:5>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::initializeFromBuffer(void *, int, int) -> void b3AlignedObjectArray<typename T>::initializeFromBuffer(void *, int, int) [b3AlignedObjectArray.h <515:7 515:26>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:2 515:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::initializeFromBuffer(void *, int, int) -> void [b3AlignedObjectArray.h <515:28 515:31>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:42 515:44>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::initializeFromBuffer(void *, int, int) -> int [b3AlignedObjectArray.h <515:52 515:54>]
SYMBOL_METHOD public void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkCLN> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkCLN> &) -> void b3AlignedObjectArray<typename T>::copyFromArray(const b3AlignedObjectArray<T> &) [b3AlignedObjectArray.h <524:7 524:19>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkCLN> &) -> void [b3AlignedObjectArray.h <524:2 524:5>]
REFERENCE_TYPE_USAGE void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::copyFromArray(const b3AlignedObjectArray<b3DynamicBvh::sStkCLN> &) -> b3AlignedObjectArray<b3DynamicBvh::sStkCLN> [b3AlignedObjectArray.h <524:27 524:46>]
SYMBOL_TEMPLATE_PARAMETER b3Min<class T>::T [b3MinMax.h <22:17 22:17>]
SYMBOL_FUNCTION const T & b3Min<class T>(const T &, const T &) [b3MinMax.h <22:1 <23:26 23:30> 26:1>]
REFERENCE_TYPE_USAGE const T & b3Min<class T>(const T &, const T &) -> b3Min<class T>::T [b3MinMax.h <23:23 23:23>]
LOCAL_SYMBOL: b3MinMax.h<23:41> [b3MinMax.h <23:41 23:41>]
REFERENCE_TYPE_USAGE const T & b3Min<class T>(const T &, const T &) -> b3Min<class T>::T [b3MinMax.h <23:38 23:38>]
LOCAL_SYMBOL: b3MinMax.h<23:53> [b3MinMax.h <23:53 23:53>]
REFERENCE_TYPE_USAGE const T & b3Min<class T>(const T &, const T &) -> b3Min<class T>::T [b3MinMax.h <23:50 23:50>]
LOCAL_SYMBOL: b3MinMax.h<24:1> [b3MinMax.h <24:1 24:1>]
LOCAL_SYMBOL: b3MinMax.h<24:1> [b3MinMax.h <26:1 26:1>]
LOCAL_SYMBOL: b3MinMax.h<23:41> [b3MinMax.h <25:10 25:10>]
LOCAL_SYMBOL: b3MinMax.h<23:53> [b3MinMax.h <25:14 25:14>]
LOCAL_SYMBOL: b3MinMax.h<23:41> [b3MinMax.h <25:18 25:18>]
LOCAL_SYMBOL: b3MinMax.h<23:53> [b3MinMax.h <25:22 25:22>]
SYMBOL_FUNCTION const float & b3Min<float>(const float &, const float &) [b3MinMax.h <23:1 <23:26 23:30> 26:1>]
SYMBOL_FUNCTION const T & b3Min<class T>(const T &, const T &)
REFERENCE_TEMPLATE_SPECIALIZATION const float & b3Min<float>(const float &, const float &) -> const T & b3Min<class T>(const T &, const T &) [b3MinMax.h <23:26 23:30>]
SYMBOL_TEMPLATE_PARAMETER b3Max<class T>::T [b3MinMax.h <28:17 28:17>]
SYMBOL_FUNCTION const T & b3Max<class T>(const T &, const T &) [b3MinMax.h <28:1 <29:26 29:30> 32:1>]
REFERENCE_TYPE_USAGE const T & b3Max<class T>(const T &, const T &) -> b3Max<class T>::T [b3MinMax.h <29:23 29:23>]
LOCAL_SYMBOL: b3MinMax.h<29:41> [b3MinMax.h <29:41 29:41>]
REFERENCE_TYPE_USAGE const T & b3Max<class T>(const T &, const T &) -> b3Max<class T>::T [b3MinMax.h <29:38 29:38>]
LOCAL_SYMBOL: b3MinMax.h<29:53> [b3MinMax.h <29:53 29:53>]
REFERENCE_TYPE_USAGE const T & b3Max<class T>(const T &, const T &) -> b3Max<class T>::T [b3MinMax.h <29:50 29:50>]
LOCAL_SYMBOL: b3MinMax.h<30:1> [b3MinMax.h <30:1 30:1>]
LOCAL_SYMBOL: b3MinMax.h<30:1> [b3MinMax.h <32:1 32:1>]
LOCAL_SYMBOL: b3MinMax.h<29:41> [b3MinMax.h <31:11 31:11>]
LOCAL_SYMBOL: b3MinMax.h<29:53> [b3MinMax.h <31:15 31:15>]
LOCAL_SYMBOL: b3MinMax.h<29:41> [b3MinMax.h <31:19 31:19>]
LOCAL_SYMBOL: b3MinMax.h<29:53> [b3MinMax.h <31:23 31:23>]
SYMBOL_FUNCTION const float & b3Max<float>(const float &, const float &) [b3MinMax.h <29:1 <29:26 29:30> 32:1>]
SYMBOL_FUNCTION const T & b3Max<class T>(const T &, const T &)
REFERENCE_TEMPLATE_SPECIALIZATION const float & b3Max<float>(const float &, const float &) -> const T & b3Max<class T>(const T &, const T &) [b3MinMax.h <29:26 29:30>]
SYMBOL_FUNCTION const int & b3Max<int>(const int &, const int &) [b3MinMax.h <29:1 <29:26 29:30> 32:1>]
REFERENCE_TEMPLATE_SPECIALIZATION const int & b3Max<int>(const int &, const int &) -> const T & b3Max<class T>(const T &, const T &) [b3MinMax.h <29:26 29:30>]
SYMBOL_TEMPLATE_PARAMETER b3Clamped<class T>::T [b3MinMax.h <34:17 34:17>]
SYMBOL_FUNCTION const T & b3Clamped<class T>(const T &, const T &, const T &) [b3MinMax.h <34:1 <35:26 35:34> 38:1>]
REFERENCE_TYPE_USAGE const T & b3Clamped<class T>(const T &, const T &, const T &) -> b3Clamped<class T>::T [b3MinMax.h <35:23 35:23>]
LOCAL_SYMBOL: b3MinMax.h<35:45> [b3MinMax.h <35:45 35:45>]
REFERENCE_TYPE_USAGE const T & b3Clamped<class T>(const T &, const T &, const T &) -> b3Clamped<class T>::T [b3MinMax.h <35:42 35:42>]
LOCAL_SYMBOL: b3MinMax.h<35:57> [b3MinMax.h <35:57 35:58>]
REFERENCE_TYPE_USAGE const T & b3Clamped<class T>(const T &, const T &, const T &) -> b3Clamped<class T>::T [b3MinMax.h <35:54 35:54>]
LOCAL_SYMBOL: b3MinMax.h<35:70> [b3MinMax.h <35:70 35:71>]
REFERENCE_TYPE_USAGE const T & b3Clamped<class T>(const T &, const T &, const T &) -> b3Clamped<class T>::T [b3MinMax.h <35:67 35:67>]
LOCAL_SYMBOL: b3MinMax.h<36:1> [b3MinMax.h <36:1 36:1>]
LOCAL_SYMBOL: b3MinMax.h<36:1> [b3MinMax.h <38:1 38:1>]
LOCAL_SYMBOL: b3MinMax.h<35:45> [b3MinMax.h <37:9 37:9>]
LOCAL_SYMBOL: b3MinMax.h<35:57> [b3MinMax.h <37:13 37:14>]
LOCAL_SYMBOL: b3MinMax.h<35:57> [b3MinMax.h <37:18 37:19>]
LOCAL_SYMBOL: b3MinMax.h<35:70> [b3MinMax.h <37:24 37:25>]
LOCAL_SYMBOL: b3MinMax.h<35:45> [b3MinMax.h <37:29 37:29>]
LOCAL_SYMBOL: b3MinMax.h<35:70> [b3MinMax.h <37:33 37:34>]
LOCAL_SYMBOL: b3MinMax.h<35:45> [b3MinMax.h <37:38 37:38>]
SYMBOL_TEMPLATE_PARAMETER b3SetMin<class T>::T [b3MinMax.h <40:17 40:17>]
SYMBOL_FUNCTION void b3SetMin<class T>(T &, const T &) [b3MinMax.h <40:1 <41:22 41:29> 47:1>]
REFERENCE_TYPE_USAGE void b3SetMin<class T>(T &, const T &) -> void [b3MinMax.h <41:17 41:20>]
LOCAL_SYMBOL: b3MinMax.h<41:34> [b3MinMax.h <41:34 41:34>]
REFERENCE_TYPE_USAGE void b3SetMin<class T>(T &, const T &) -> b3SetMin<class T>::T [b3MinMax.h <41:31 41:31>]
LOCAL_SYMBOL: b3MinMax.h<41:46> [b3MinMax.h <41:46 41:46>]
REFERENCE_TYPE_USAGE void b3SetMin<class T>(T &, const T &) -> b3SetMin<class T>::T [b3MinMax.h <41:43 41:43>]
LOCAL_SYMBOL: b3MinMax.h<42:1> [b3MinMax.h <42:1 42:1>]
LOCAL_SYMBOL: b3MinMax.h<42:1> [b3MinMax.h <47:1 47:1>]
LOCAL_SYMBOL: b3MinMax.h<41:46> [b3MinMax.h <43:9 43:9>]
LOCAL_SYMBOL: b3MinMax.h<41:34> [b3MinMax.h <43:13 43:13>]
LOCAL_SYMBOL: b3MinMax.h<44:2> [b3MinMax.h <44:2 44:2>]
LOCAL_SYMBOL: b3MinMax.h<44:2> [b3MinMax.h <46:2 46:2>]
LOCAL_SYMBOL: b3MinMax.h<41:34> [b3MinMax.h <45:3 45:3>]
LOCAL_SYMBOL: b3MinMax.h<41:46> [b3MinMax.h <45:7 45:7>]
SYMBOL_FUNCTION void b3SetMin<float>(float &, const float &) [b3MinMax.h <41:1 <41:22 41:29> 47:1>]
SYMBOL_FUNCTION void b3SetMin<class T>(T &, const T &)
REFERENCE_TEMPLATE_SPECIALIZATION void b3SetMin<float>(float &, const float &) -> void b3SetMin<class T>(T &, const T &) [b3MinMax.h <41:22 41:29>]
REFERENCE_TYPE_USAGE void b3SetMin<float>(float &, const float &) -> void [b3MinMax.h <41:17 41:20>]
SYMBOL_TEMPLATE_PARAMETER b3SetMax<class T>::T [b3MinMax.h <49:17 49:17>]
SYMBOL_FUNCTION void b3SetMax<class T>(T &, const T &) [b3MinMax.h <49:1 <50:22 50:29> 56:1>]
REFERENCE_TYPE_USAGE void b3SetMax<class T>(T &, const T &) -> void [b3MinMax.h <50:17 50:20>]
LOCAL_SYMBOL: b3MinMax.h<50:34> [b3MinMax.h <50:34 50:34>]
REFERENCE_TYPE_USAGE void b3SetMax<class T>(T &, const T &) -> b3SetMax<class T>::T [b3MinMax.h <50:31 50:31>]
LOCAL_SYMBOL: b3MinMax.h<50:46> [b3MinMax.h <50:46 50:46>]
REFERENCE_TYPE_USAGE void b3SetMax<class T>(T &, const T &) -> b3SetMax<class T>::T [b3MinMax.h <50:43 50:43>]
LOCAL_SYMBOL: b3MinMax.h<51:1> [b3MinMax.h <51:1 51:1>]
LOCAL_SYMBOL: b3MinMax.h<51:1> [b3MinMax.h <56:1 56:1>]
LOCAL_SYMBOL: b3MinMax.h<50:34> [b3MinMax.h <52:9 52:9>]
LOCAL_SYMBOL: b3MinMax.h<50:46> [b3MinMax.h <52:13 52:13>]
LOCAL_SYMBOL: b3MinMax.h<53:2> [b3MinMax.h <53:2 53:2>]
LOCAL_SYMBOL: b3MinMax.h<53:2> [b3MinMax.h <55:2 55:2>]
LOCAL_SYMBOL: b3MinMax.h<50:34> [b3MinMax.h <54:3 54:3>]
LOCAL_SYMBOL: b3MinMax.h<50:46> [b3MinMax.h <54:7 54:7>]
SYMBOL_FUNCTION void b3SetMax<float>(float &, const float &) [b3MinMax.h <50:1 <50:22 50:29> 56:1>]
SYMBOL_FUNCTION void b3SetMax<class T>(T &, const T &)
REFERENCE_TEMPLATE_SPECIALIZATION void b3SetMax<float>(float &, const float &) -> void b3SetMax<class T>(T &, const T &) [b3MinMax.h <50:22 50:29>]
REFERENCE_TYPE_USAGE void b3SetMax<float>(float &, const float &) -> void [b3MinMax.h <50:17 50:20>]
SYMBOL_TEMPLATE_PARAMETER b3Clamp<class T>::T [b3MinMax.h <58:17 58:17>]
SYMBOL_FUNCTION void b3Clamp<class T>(T &, const T &, const T &) [b3MinMax.h <58:1 <59:22 59:28> 69:1>]
REFERENCE_TYPE_USAGE void b3Clamp<class T>(T &, const T &, const T &) -> void [b3MinMax.h <59:17 59:20>]
LOCAL_SYMBOL: b3MinMax.h<59:33> [b3MinMax.h <59:33 59:33>]
REFERENCE_TYPE_USAGE void b3Clamp<class T>(T &, const T &, const T &) -> b3Clamp<class T>::T [b3MinMax.h <59:30 59:30>]
LOCAL_SYMBOL: b3MinMax.h<59:45> [b3MinMax.h <59:45 59:46>]
REFERENCE_TYPE_USAGE void b3Clamp<class T>(T &, const T &, const T &) -> b3Clamp<class T>::T [b3MinMax.h <59:42 59:42>]
LOCAL_SYMBOL: b3MinMax.h<59:58> [b3MinMax.h <59:58 59:59>]
REFERENCE_TYPE_USAGE void b3Clamp<class T>(T &, const T &, const T &) -> b3Clamp<class T>::T [b3MinMax.h <59:55 59:55>]
LOCAL_SYMBOL: b3MinMax.h<60:1> [b3MinMax.h <60:1 60:1>]
LOCAL_SYMBOL: b3MinMax.h<60:1> [b3MinMax.h <69:1 69:1>]
LOCAL_SYMBOL: b3MinMax.h<59:33> [b3MinMax.h <61:6 61:6>]
LOCAL_SYMBOL: b3MinMax.h<59:45> [b3MinMax.h <61:10 61:11>]
LOCAL_SYMBOL: b3MinMax.h<62:2> [b3MinMax.h <62:2 62:2>]
LOCAL_SYMBOL: b3MinMax.h<62:2> [b3MinMax.h <64:2 64:2>]
LOCAL_SYMBOL: b3MinMax.h<59:33> [b3MinMax.h <63:3 63:3>]
LOCAL_SYMBOL: b3MinMax.h<59:45> [b3MinMax.h <63:7 63:8>]
LOCAL_SYMBOL: b3MinMax.h<59:58> [b3MinMax.h <65:11 65:12>]
LOCAL_SYMBOL: b3MinMax.h<59:33> [b3MinMax.h <65:16 65:16>]
LOCAL_SYMBOL: b3MinMax.h<66:2> [b3MinMax.h <66:2 66:2>]
LOCAL_SYMBOL: b3MinMax.h<66:2> [b3MinMax.h <68:2 68:2>]
LOCAL_SYMBOL: b3MinMax.h<59:33> [b3MinMax.h <67:3 67:3>]
LOCAL_SYMBOL: b3MinMax.h<59:58> [b3MinMax.h <67:7 67:8>]
SYMBOL_GLOBAL_VARIABLE const __m128 b3vMzeroMask [b3Vector3.h <58:37 58:48>]
REFERENCE_TYPE_USAGE const __m128 b3vMzeroMask -> __m128 [b3Vector3.h <58:7 58:12>]
LOCAL_SYMBOL: b3Vector3.h<58:53> [b3Vector3.h <58:53 58:53>]
LOCAL_SYMBOL: b3Vector3.h<58:53> [b3Vector3.h <58:80 58:80>]
LOCAL_SYMBOL: b3Vector3.h<58:54> [b3Vector3.h <58:54 58:54>]
SYMBOL_GLOBAL_VARIABLE const __m128 b3v1110 [b3Vector3.h <59:37 59:43>]
REFERENCE_TYPE_USAGE const __m128 b3v1110 -> __m128 [b3Vector3.h <59:7 59:12>]
LOCAL_SYMBOL: b3Vector3.h<59:48> [b3Vector3.h <59:48 59:48>]
LOCAL_SYMBOL: b3Vector3.h<59:48> [b3Vector3.h <59:71 59:71>]
SYMBOL_GLOBAL_VARIABLE const __m128 b3vHalf [b3Vector3.h <60:37 60:43>]
REFERENCE_TYPE_USAGE const __m128 b3vHalf -> __m128 [b3Vector3.h <60:7 60:12>]
LOCAL_SYMBOL: b3Vector3.h<60:48> [b3Vector3.h <60:48 60:48>]
LOCAL_SYMBOL: b3Vector3.h<60:48> [b3Vector3.h <60:71 60:71>]
SYMBOL_GLOBAL_VARIABLE const __m128 b3v1_5 [b3Vector3.h <61:37 61:42>]
REFERENCE_TYPE_USAGE const __m128 b3v1_5 -> __m128 [b3Vector3.h <61:7 61:12>]
LOCAL_SYMBOL: b3Vector3.h<61:48> [b3Vector3.h <61:48 61:48>]
LOCAL_SYMBOL: b3Vector3.h<61:48> [b3Vector3.h <61:71 61:71>]
SYMBOL_CLASS b3Vector3 [b3Vector3.h <74:7 74:15>]
SYMBOL_CLASS b3Vector4 [b3Vector3.h <75:7 75:15>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <83:18 83:30>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> b3Vector3 [b3Vector3.h <83:8 83:16>]
LOCAL_SYMBOL: b3Vector3.h<83:41> [b3Vector3.h <83:41 83:41>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <83:32 83:39>]
LOCAL_SYMBOL: b3Vector3.h<83:52> [b3Vector3.h <83:52 83:52>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <83:43 83:50>]
LOCAL_SYMBOL: b3Vector3.h<83:63> [b3Vector3.h <83:63 83:63>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <83:54 83:61>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <84:18 84:30>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Vector3 [b3Vector3.h <84:8 84:16>]
LOCAL_SYMBOL: b3Vector3.h<84:41> [b3Vector3.h <84:41 84:41>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <84:32 84:39>]
LOCAL_SYMBOL: b3Vector3.h<84:52> [b3Vector3.h <84:52 84:52>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <84:43 84:50>]
LOCAL_SYMBOL: b3Vector3.h<84:63> [b3Vector3.h <84:63 84:63>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <84:54 84:61>]
LOCAL_SYMBOL: b3Vector3.h<84:75> [b3Vector3.h <84:75 84:75>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <84:66 84:73>]
SYMBOL_FUNCTION b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <85:18 85:30>]
REFERENCE_TYPE_USAGE b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Vector4 [b3Vector3.h <85:8 85:16>]
LOCAL_SYMBOL: b3Vector3.h<85:41> [b3Vector3.h <85:41 85:41>]
REFERENCE_TYPE_USAGE b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <85:32 85:39>]
LOCAL_SYMBOL: b3Vector3.h<85:52> [b3Vector3.h <85:52 85:52>]
REFERENCE_TYPE_USAGE b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <85:43 85:50>]
LOCAL_SYMBOL: b3Vector3.h<85:63> [b3Vector3.h <85:63 85:63>]
REFERENCE_TYPE_USAGE b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <85:54 85:61>]
LOCAL_SYMBOL: b3Vector3.h<85:74> [b3Vector3.h <85:74 85:74>]
REFERENCE_TYPE_USAGE b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <85:65 85:72>]
SYMBOL_CLASS b3Vector3 [b3Vector3.h <92:1 <92:31 92:39> 709:1>]
LOCAL_SYMBOL: b3Vector3.h<93:1> [b3Vector3.h <93:1 93:1>]
LOCAL_SYMBOL: b3Vector3.h<93:1> [b3Vector3.h <709:1 709:1>]
SYMBOL_UNION public b3Vector3::anonymous union (b3Vector3.h<96:9>) [b3Vector3.h <96:9 <96:9 96:13> 101:9>]
LOCAL_SYMBOL: b3Vector3.h<96:15> [b3Vector3.h <96:15 96:15>]
LOCAL_SYMBOL: b3Vector3.h<96:15> [b3Vector3.h <101:9 101:9>]
SYMBOL_FIELD public b3SimdFloat4 b3Vector3::anonymous union (b3Vector3.h<96:9>)::mVec128 [b3Vector3.h <97:31 97:37>]
REFERENCE_TYPE_USAGE b3SimdFloat4 b3Vector3::anonymous union (b3Vector3.h<96:9>)::mVec128 -> b3SimdFloat4 [b3Vector3.h <97:13 97:24>]
SYMBOL_FIELD public float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <98:19 98:26>]
REFERENCE_TYPE_USAGE float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats -> float [b3Vector3.h <98:13 98:17>]
SYMBOL_STRUCT public b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) [b3Vector3.h <99:4 <99:4 99:9> 99:26>]
LOCAL_SYMBOL: b3Vector3.h<99:11> [b3Vector3.h <99:11 99:11>]
LOCAL_SYMBOL: b3Vector3.h<99:11> [b3Vector3.h <99:26 99:26>]
SYMBOL_FIELD public float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3Vector3.h <99:18 99:18>]
REFERENCE_TYPE_USAGE float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x -> float [b3Vector3.h <99:12 99:16>]
SYMBOL_FIELD public float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3Vector3.h <99:20 99:20>]
REFERENCE_TYPE_USAGE float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y -> float [b3Vector3.h <99:12 99:16>]
SYMBOL_FIELD public float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3Vector3.h <99:22 99:22>]
REFERENCE_TYPE_USAGE float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z -> float [b3Vector3.h <99:12 99:16>]
SYMBOL_FIELD public float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::w [b3Vector3.h <99:24 99:24>]
REFERENCE_TYPE_USAGE float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::w -> float [b3Vector3.h <99:12 99:16>]
SYMBOL_METHOD public void b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::() [b3Vector3.h <99:4 99:9>]
SYMBOL_METHOD public void b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::~() [b3Vector3.h <99:4 99:9>]
SYMBOL_METHOD public void b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::(const b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) &) [b3Vector3.h <99:4 99:9>]
SYMBOL_METHOD public void b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::(b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) &&) [b3Vector3.h <99:4 99:9>]
SYMBOL_METHOD public b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) & b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::operator=(const b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) &) [b3Vector3.h <99:4 99:9>]
SYMBOL_METHOD public b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) & b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::operator=(b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) &&) [b3Vector3.h <99:4 99:9>]
SYMBOL_FIELD public b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3Vector3.h <99:4 99:9>]
REFERENCE_TYPE_USAGE b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) [b3Vector3.h <99:4 99:9>]
SYMBOL_METHOD public void b3Vector3::anonymous union (b3Vector3.h<96:9>)::(const b3Vector3::anonymous union (b3Vector3.h<96:9>) &) [b3Vector3.h <96:9 <96:9 96:13> 96:13>]
SYMBOL_METHOD public void b3Vector3::anonymous union (b3Vector3.h<96:9>)::(b3Vector3::anonymous union (b3Vector3.h<96:9>) &&) [b3Vector3.h <96:9 <96:9 96:13> 96:13>]
SYMBOL_METHOD public void b3Vector3::anonymous union (b3Vector3.h<96:9>)::~() [b3Vector3.h <96:9 96:13>]
SYMBOL_METHOD public void b3Vector3::anonymous union (b3Vector3.h<96:9>)::() [b3Vector3.h <96:9 96:13>]
SYMBOL_METHOD public b3Vector3::anonymous union (b3Vector3.h<96:9>) & b3Vector3::anonymous union (b3Vector3.h<96:9>)::operator=(const b3Vector3::anonymous union (b3Vector3.h<96:9>) &) [b3Vector3.h <96:9 <96:9 96:13> 96:13>]
SYMBOL_METHOD public b3Vector3::anonymous union (b3Vector3.h<96:9>) & b3Vector3::anonymous union (b3Vector3.h<96:9>)::operator=(b3Vector3::anonymous union (b3Vector3.h<96:9>) &&) [b3Vector3.h <96:9 <96:9 96:13> 96:13>]
SYMBOL_FIELD public b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <96:9 96:13>]
REFERENCE_TYPE_USAGE b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: -> b3Vector3::anonymous union (b3Vector3.h<96:9>) [b3Vector3.h <96:9 96:13>]
SYMBOL_METHOD public static void * b3Vector3::operator new(size_t) [b3Vector3.h <113:2 <113:2 113:29> 113:29>]
REFERENCE_TYPE_USAGE static void * b3Vector3::operator new(size_t) -> void [b3Vector3.h <113:2 113:29>]
LOCAL_SYMBOL: b3Vector3.h<113:2> [b3Vector3.h <113:2 113:29>]
REFERENCE_TYPE_USAGE static void * b3Vector3::operator new(size_t) -> size_t [b3Vector3.h <113:2 113:29>]
REFERENCE_CALL static void * b3Vector3::operator new(size_t) -> void * b3AlignedAllocInternal(size_t, int) [b3Vector3.h <113:2 113:29>]
LOCAL_SYMBOL: b3Vector3.h<113:2> [b3Scalar.h <332:85 332:95>]
SYMBOL_METHOD public static void b3Vector3::operator delete(void *) [b3Vector3.h <113:2 <113:2 113:29> 113:29>]
REFERENCE_TYPE_USAGE static void b3Vector3::operator delete(void *) -> void [b3Vector3.h <113:2 113:29>]
REFERENCE_CALL static void b3Vector3::operator delete(void *) -> void b3AlignedFreeInternal(void *) [b3Vector3.h <113:2 113:29>]
LOCAL_SYMBOL: b3Vector3.h<113:2> [b3Scalar.h <333:77 333:79>]
SYMBOL_METHOD public static void * b3Vector3::operator new(size_t, void *) [b3Vector3.h <113:2 <113:2 113:29> 113:29>]
REFERENCE_TYPE_USAGE static void * b3Vector3::operator new(size_t, void *) -> void [b3Vector3.h <113:2 113:29>]
REFERENCE_TYPE_USAGE static void * b3Vector3::operator new(size_t, void *) -> size_t [b3Vector3.h <113:2 113:29>]
SYMBOL_METHOD public static void b3Vector3::operator delete(void *, void *) [b3Vector3.h <113:2 <113:2 113:29> 113:29>]
REFERENCE_TYPE_USAGE static void b3Vector3::operator delete(void *, void *) -> void [b3Vector3.h <113:2 113:29>]
SYMBOL_METHOD public static void * b3Vector3::operator new[](size_t) [b3Vector3.h <113:2 <113:2 113:29> 113:29>]
REFERENCE_TYPE_USAGE static void * b3Vector3::operator new[](size_t) -> void [b3Vector3.h <113:2 113:29>]
REFERENCE_TYPE_USAGE static void * b3Vector3::operator new[](size_t) -> size_t [b3Vector3.h <113:2 113:29>]
REFERENCE_CALL static void * b3Vector3::operator new[](size_t) -> void * b3AlignedAllocInternal(size_t, int) [b3Vector3.h <113:2 113:29>]
LOCAL_SYMBOL: b3Vector3.h<113:2> [b3Scalar.h <336:87 336:97>]
SYMBOL_METHOD public static void b3Vector3::operator delete[](void *) [b3Vector3.h <113:2 <113:2 113:29> 113:29>]
REFERENCE_TYPE_USAGE static void b3Vector3::operator delete[](void *) -> void [b3Vector3.h <113:2 113:29>]
REFERENCE_CALL static void b3Vector3::operator delete[](void *) -> void b3AlignedFreeInternal(void *) [b3Vector3.h <113:2 113:29>]
LOCAL_SYMBOL: b3Vector3.h<113:2> [b3Scalar.h <337:79 337:81>]
SYMBOL_METHOD public static void * b3Vector3::operator new[](size_t, void *) [b3Vector3.h <113:2 <113:2 113:29> 113:29>]
REFERENCE_TYPE_USAGE static void * b3Vector3::operator new[](size_t, void *) -> void [b3Vector3.h <113:2 113:29>]
REFERENCE_TYPE_USAGE static void * b3Vector3::operator new[](size_t, void *) -> size_t [b3Vector3.h <113:2 113:29>]
SYMBOL_METHOD public static void b3Vector3::operator delete[](void *, void *) [b3Vector3.h <113:2 <113:2 113:29> 113:29>]
REFERENCE_TYPE_USAGE static void b3Vector3::operator delete[](void *, void *) -> void [b3Vector3.h <113:2 113:29>]
SYMBOL_METHOD public b3SimdFloat4 b3Vector3::get128() const [b3Vector3.h <122:5 <122:34 122:39> 125:5>]
REFERENCE_TYPE_USAGE b3SimdFloat4 b3Vector3::get128() const -> b3SimdFloat4 [b3Vector3.h <122:21 122:32>]
LOCAL_SYMBOL: b3Vector3.h<123:5> [b3Vector3.h <123:5 123:5>]
LOCAL_SYMBOL: b3Vector3.h<123:5> [b3Vector3.h <125:5 125:5>]
SYMBOL_FUNCTION void __m128::__m128(const __m128 &)
REFERENCE_CALL b3SimdFloat4 b3Vector3::get128() const -> void __m128::__m128(const __m128 &) [b3Vector3.h <124:16 124:22>]
REFERENCE_USAGE b3SimdFloat4 b3Vector3::get128() const -> b3SimdFloat4 b3Vector3::anonymous union (b3Vector3.h<96:9>)::mVec128 [b3Vector3.h <124:16 124:22>]
REFERENCE_USAGE b3SimdFloat4 b3Vector3::get128() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <124:16 124:22>]
SYMBOL_METHOD public void b3Vector3::set128(b3SimdFloat4) [b3Vector3.h <126:5 <126:26 126:31> 129:5>]
REFERENCE_TYPE_USAGE void b3Vector3::set128(b3SimdFloat4) -> void [b3Vector3.h <126:21 126:24>]
LOCAL_SYMBOL: b3Vector3.h<126:46> [b3Vector3.h <126:46 126:49>]
REFERENCE_TYPE_USAGE void b3Vector3::set128(b3SimdFloat4) -> b3SimdFloat4 [b3Vector3.h <126:33 126:44>]
LOCAL_SYMBOL: b3Vector3.h<127:5> [b3Vector3.h <127:5 127:5>]
LOCAL_SYMBOL: b3Vector3.h<127:5> [b3Vector3.h <129:5 129:5>]
SYMBOL_FUNCTION __m128 & __m128::operator=(const __m128 &)
REFERENCE_CALL void b3Vector3::set128(b3SimdFloat4) -> __m128 & __m128::operator=(const __m128 &) [b3Vector3.h <128:17 128:17>]
REFERENCE_USAGE void b3Vector3::set128(b3SimdFloat4) -> b3SimdFloat4 b3Vector3::anonymous union (b3Vector3.h<96:9>)::mVec128 [b3Vector3.h <128:9 128:15>]
REFERENCE_USAGE void b3Vector3::set128(b3SimdFloat4) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <128:9 128:15>]
LOCAL_SYMBOL: b3Vector3.h<126:46> [b3Vector3.h <128:19 128:22>]
SYMBOL_METHOD public b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) [b3Vector3.h <138:2 <138:29 138:38> 150:2>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> b3Vector3 [b3Vector3.h <138:18 138:26>]
LOCAL_SYMBOL: b3Vector3.h<138:57> [b3Vector3.h <138:57 138:57>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> b3Vector3 [b3Vector3.h <138:46 138:54>]
LOCAL_SYMBOL: b3Vector3.h<139:2> [b3Vector3.h <139:2 139:2>]
LOCAL_SYMBOL: b3Vector3.h<139:2> [b3Vector3.h <150:2 150:2>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <145:3 145:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <145:3 145:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <145:20 145:27>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <145:20 145:27>]
LOCAL_SYMBOL: b3Vector3.h<138:57> [b3Vector3.h <145:18 145:18>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <146:3 146:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <146:3 146:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <146:20 146:27>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <146:20 146:27>]
LOCAL_SYMBOL: b3Vector3.h<138:57> [b3Vector3.h <146:18 146:18>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <147:3 147:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <147:3 147:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <147:20 147:27>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <147:20 147:27>]
LOCAL_SYMBOL: b3Vector3.h<138:57> [b3Vector3.h <147:18 147:18>]
SYMBOL_METHOD public b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) [b3Vector3.h <155:2 <155:29 155:38> 167:2>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> b3Vector3 [b3Vector3.h <155:18 155:26>]
LOCAL_SYMBOL: b3Vector3.h<155:57> [b3Vector3.h <155:57 155:57>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> b3Vector3 [b3Vector3.h <155:46 155:54>]
LOCAL_SYMBOL: b3Vector3.h<156:2> [b3Vector3.h <156:2 156:2>]
LOCAL_SYMBOL: b3Vector3.h<156:2> [b3Vector3.h <167:2 167:2>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <162:3 162:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <162:3 162:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <162:20 162:27>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <162:20 162:27>]
LOCAL_SYMBOL: b3Vector3.h<155:57> [b3Vector3.h <162:18 162:18>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <163:3 163:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <163:3 163:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <163:20 163:27>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <163:20 163:27>]
LOCAL_SYMBOL: b3Vector3.h<155:57> [b3Vector3.h <163:18 163:18>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <164:3 164:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <164:3 164:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <164:20 164:27>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <164:20 164:27>]
LOCAL_SYMBOL: b3Vector3.h<155:57> [b3Vector3.h <164:18 164:18>]
SYMBOL_METHOD public b3Vector3 & b3Vector3::operator*=(const b3Scalar &) [b3Vector3.h <171:2 <171:29 171:38> 185:2>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Scalar &) -> b3Vector3 [b3Vector3.h <171:18 171:26>]
LOCAL_SYMBOL: b3Vector3.h<171:56> [b3Vector3.h <171:56 171:56>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Scalar &) -> b3Scalar [b3Vector3.h <171:46 171:53>]
LOCAL_SYMBOL: b3Vector3.h<172:2> [b3Vector3.h <172:2 172:2>]
LOCAL_SYMBOL: b3Vector3.h<172:2> [b3Vector3.h <185:2 185:2>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <180:3 180:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <180:3 180:10>]
LOCAL_SYMBOL: b3Vector3.h<171:56> [b3Vector3.h <180:18 180:18>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <181:3 181:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <181:3 181:10>]
LOCAL_SYMBOL: b3Vector3.h<171:56> [b3Vector3.h <181:18 181:18>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <182:3 182:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <182:3 182:10>]
LOCAL_SYMBOL: b3Vector3.h<171:56> [b3Vector3.h <182:18 182:18>]
SYMBOL_METHOD public b3Vector3 & b3Vector3::operator/=(const b3Scalar &) [b3Vector3.h <189:2 <189:29 189:38> 205:2>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator/=(const b3Scalar &) -> b3Vector3 [b3Vector3.h <189:18 189:26>]
LOCAL_SYMBOL: b3Vector3.h<189:56> [b3Vector3.h <189:56 189:56>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator/=(const b3Scalar &) -> b3Scalar [b3Vector3.h <189:46 189:53>]
LOCAL_SYMBOL: b3Vector3.h<190:2> [b3Vector3.h <190:2 190:2>]
LOCAL_SYMBOL: b3Vector3.h<190:2> [b3Vector3.h <205:2 205:2>]
SYMBOL_FUNCTION b3Vector3 & b3Vector3::operator*=(const b3Scalar &)
REFERENCE_CALL b3Vector3 & b3Vector3::operator/=(const b3Scalar &) -> b3Vector3 & b3Vector3::operator*=(const b3Scalar &) [b3Vector3.h <203:16 203:17>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator/=(const b3Scalar &) -> b3Scalar [b3Vector3.h <203:19 203:26>]
LOCAL_SYMBOL: b3Vector3.h<189:56> [b3Vector3.h <203:35 203:35>]
SYMBOL_METHOD public b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Vector3.h <209:2 <209:27 209:29> 228:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> b3Scalar [b3Vector3.h <209:18 209:25>]
LOCAL_SYMBOL: b3Vector3.h<209:48> [b3Vector3.h <209:48 209:48>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <209:37 209:45>]
LOCAL_SYMBOL: b3Vector3.h<210:2> [b3Vector3.h <210:2 210:2>]
LOCAL_SYMBOL: b3Vector3.h<210:2> [b3Vector3.h <228:2 228:2>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <224:10 224:17>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <224:10 224:17>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <224:26 224:33>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <224:26 224:33>]
LOCAL_SYMBOL: b3Vector3.h<209:48> [b3Vector3.h <224:24 224:24>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <225:5 225:12>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <225:5 225:12>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <225:21 225:28>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <225:21 225:28>]
LOCAL_SYMBOL: b3Vector3.h<209:48> [b3Vector3.h <225:19 225:19>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <226:5 226:12>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <226:5 226:12>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <226:21 226:28>]
REFERENCE_USAGE b3Scalar b3Vector3::dot(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <226:21 226:28>]
LOCAL_SYMBOL: b3Vector3.h<209:48> [b3Vector3.h <226:19 226:19>]
SYMBOL_METHOD public b3Scalar b3Vector3::length2() const [b3Vector3.h <231:2 <231:27 231:33> 234:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::length2() const -> b3Scalar [b3Vector3.h <231:18 231:25>]
LOCAL_SYMBOL: b3Vector3.h<232:2> [b3Vector3.h <232:2 232:2>]
LOCAL_SYMBOL: b3Vector3.h<232:2> [b3Vector3.h <234:2 234:2>]
SYMBOL_FUNCTION b3Scalar b3Vector3::dot(const b3Vector3 &) const
REFERENCE_CALL b3Scalar b3Vector3::length2() const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Vector3.h <233:10 233:12>]
SYMBOL_METHOD public b3Scalar b3Vector3::length() const [b3Vector3.h <237:2 <237:27 237:32> 240:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::length() const -> b3Scalar [b3Vector3.h <237:18 237:25>]
LOCAL_SYMBOL: b3Vector3.h<238:2> [b3Vector3.h <238:2 238:2>]
LOCAL_SYMBOL: b3Vector3.h<238:2> [b3Vector3.h <240:2 240:2>]
SYMBOL_FUNCTION b3Scalar b3Sqrt(b3Scalar)
REFERENCE_CALL b3Scalar b3Vector3::length() const -> b3Scalar b3Sqrt(b3Scalar) [b3Vector3.h <239:10 239:15>]
SYMBOL_FUNCTION b3Scalar b3Vector3::length2() const
REFERENCE_CALL b3Scalar b3Vector3::length() const -> b3Scalar b3Vector3::length2() const [b3Vector3.h <239:17 239:23>]
SYMBOL_METHOD public b3Scalar b3Vector3::distance2(const b3Vector3 &) const [b3Vector3.h <244:27 244:35>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::distance2(const b3Vector3 &) const -> b3Scalar [b3Vector3.h <244:18 244:25>]
LOCAL_SYMBOL: b3Vector3.h<244:54> [b3Vector3.h <244:54 244:54>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::distance2(const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <244:43 244:51>]
SYMBOL_METHOD public b3Scalar b3Vector3::distance(const b3Vector3 &) const [b3Vector3.h <248:27 248:34>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::distance(const b3Vector3 &) const -> b3Scalar [b3Vector3.h <248:18 248:25>]
LOCAL_SYMBOL: b3Vector3.h<248:53> [b3Vector3.h <248:53 248:53>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::distance(const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <248:42 248:50>]
SYMBOL_METHOD public b3Vector3 & b3Vector3::safeNormalize() [b3Vector3.h <250:2 <250:29 250:41> 263:2>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::safeNormalize() -> b3Vector3 [b3Vector3.h <250:18 250:26>]
LOCAL_SYMBOL: b3Vector3.h<251:2> [b3Vector3.h <251:2 251:2>]
LOCAL_SYMBOL: b3Vector3.h<251:2> [b3Vector3.h <263:2 263:2>]
LOCAL_SYMBOL: b3Vector3.h<252:12> [b3Vector3.h <252:12 252:13>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::safeNormalize() -> b3Scalar [b3Vector3.h <252:3 252:10>]
REFERENCE_CALL b3Vector3 & b3Vector3::safeNormalize() -> b3Scalar b3Vector3::length2() const [b3Vector3.h <252:17 252:23>]
LOCAL_SYMBOL: b3Vector3.h<252:12> [b3Vector3.h <254:7 254:8>]
LOCAL_SYMBOL: b3Vector3.h<255:3> [b3Vector3.h <255:3 255:3>]
LOCAL_SYMBOL: b3Vector3.h<255:3> [b3Vector3.h <257:3 257:3>]
SYMBOL_FUNCTION b3Vector3 & b3Vector3::operator/=(const b3Scalar &)
REFERENCE_CALL b3Vector3 & b3Vector3::safeNormalize() -> b3Vector3 & b3Vector3::operator/=(const b3Scalar &) [b3Vector3.h <256:12 256:13>]
REFERENCE_CALL b3Vector3 & b3Vector3::safeNormalize() -> b3Scalar b3Sqrt(b3Scalar) [b3Vector3.h <256:15 256:20>]
LOCAL_SYMBOL: b3Vector3.h<252:12> [b3Vector3.h <256:22 256:23>]
LOCAL_SYMBOL: b3Vector3.h<259:3> [b3Vector3.h <259:3 259:3>]
LOCAL_SYMBOL: b3Vector3.h<259:3> [b3Vector3.h <261:3 261:3>]
SYMBOL_FUNCTION void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &)
REFERENCE_CALL b3Vector3 & b3Vector3::safeNormalize() -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Vector3.h <260:4 260:11>]
SYMBOL_METHOD public b3Vector3 & b3Vector3::normalize() [b3Vector3.h <267:2 <267:29 267:37> 307:2>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::normalize() -> b3Vector3 [b3Vector3.h <267:18 267:26>]
LOCAL_SYMBOL: b3Vector3.h<268:2> [b3Vector3.h <268:2 268:2>]
LOCAL_SYMBOL: b3Vector3.h<268:2> [b3Vector3.h <307:2 307:2>]
REFERENCE_CALL b3Vector3 & b3Vector3::normalize() -> b3Vector3 & b3Vector3::operator/=(const b3Scalar &) [b3Vector3.h <305:16 305:17>]
SYMBOL_FUNCTION b3Scalar b3Vector3::length() const
REFERENCE_CALL b3Vector3 & b3Vector3::normalize() -> b3Scalar b3Vector3::length() const [b3Vector3.h <305:19 305:24>]
SYMBOL_METHOD public b3Vector3 b3Vector3::normalized() const [b3Vector3.h <310:28 310:37>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::normalized() const -> b3Vector3 [b3Vector3.h <310:18 310:26>]
SYMBOL_METHOD public b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const [b3Vector3.h <315:28 315:33>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 [b3Vector3.h <315:18 315:26>]
LOCAL_SYMBOL: b3Vector3.h<315:53> [b3Vector3.h <315:53 315:57>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 [b3Vector3.h <315:42 315:50>]
LOCAL_SYMBOL: b3Vector3.h<315:75> [b3Vector3.h <315:75 315:79>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Scalar [b3Vector3.h <315:66 315:73>]
SYMBOL_METHOD public b3Scalar b3Vector3::angle(const b3Vector3 &) const [b3Vector3.h <319:2 <319:27 319:31> 324:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::angle(const b3Vector3 &) const -> b3Scalar [b3Vector3.h <319:18 319:25>]
LOCAL_SYMBOL: b3Vector3.h<319:50> [b3Vector3.h <319:50 319:50>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::angle(const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <319:39 319:47>]
LOCAL_SYMBOL: b3Vector3.h<320:2> [b3Vector3.h <320:2 320:2>]
LOCAL_SYMBOL: b3Vector3.h<320:2> [b3Vector3.h <324:2 324:2>]
LOCAL_SYMBOL: b3Vector3.h<321:12> [b3Vector3.h <321:12 321:12>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::angle(const b3Vector3 &) const -> b3Scalar [b3Vector3.h <321:3 321:10>]
REFERENCE_CALL b3Scalar b3Vector3::angle(const b3Vector3 &) const -> b3Scalar b3Sqrt(b3Scalar) [b3Vector3.h <321:16 321:21>]
REFERENCE_CALL b3Scalar b3Vector3::angle(const b3Vector3 &) const -> b3Scalar b3Vector3::length2() const [b3Vector3.h <321:23 321:29>]
REFERENCE_CALL b3Scalar b3Vector3::angle(const b3Vector3 &) const -> b3Scalar b3Vector3::length2() const [b3Vector3.h <321:37 321:43>]
LOCAL_SYMBOL: b3Vector3.h<319:50> [b3Vector3.h <321:35 321:35>]
SYMBOL_FUNCTION b3Scalar b3Acos(b3Scalar)
REFERENCE_CALL b3Scalar b3Vector3::angle(const b3Vector3 &) const -> b3Scalar b3Acos(b3Scalar) [b3Vector3.h <323:10 323:15>]
REFERENCE_CALL b3Scalar b3Vector3::angle(const b3Vector3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Vector3.h <323:17 323:19>]
LOCAL_SYMBOL: b3Vector3.h<319:50> [b3Vector3.h <323:21 323:21>]
LOCAL_SYMBOL: b3Vector3.h<321:12> [b3Vector3.h <323:26 323:26>]
SYMBOL_METHOD public b3Vector3 b3Vector3::absolute() const [b3Vector3.h <327:2 <327:28 327:35> 339:2>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::absolute() const -> b3Vector3 [b3Vector3.h <327:18 327:26>]
LOCAL_SYMBOL: b3Vector3.h<328:2> [b3Vector3.h <328:2 328:2>]
LOCAL_SYMBOL: b3Vector3.h<328:2> [b3Vector3.h <339:2 339:2>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar)
REFERENCE_CALL b3Vector3 b3Vector3::absolute() const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <334:10 334:22>]
REFERENCE_CALL b3Vector3 b3Vector3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Vector3.h <335:4 335:9>]
REFERENCE_USAGE b3Vector3 b3Vector3::absolute() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <335:11 335:18>]
REFERENCE_USAGE b3Vector3 b3Vector3::absolute() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <335:11 335:18>]
REFERENCE_CALL b3Vector3 b3Vector3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Vector3.h <336:4 336:9>]
REFERENCE_USAGE b3Vector3 b3Vector3::absolute() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <336:11 336:18>]
REFERENCE_USAGE b3Vector3 b3Vector3::absolute() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <336:11 336:18>]
REFERENCE_CALL b3Vector3 b3Vector3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Vector3.h <337:4 337:9>]
REFERENCE_USAGE b3Vector3 b3Vector3::absolute() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <337:11 337:18>]
REFERENCE_USAGE b3Vector3 b3Vector3::absolute() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <337:11 337:18>]
SYMBOL_METHOD public b3Vector3 b3Vector3::cross(const b3Vector3 &) const [b3Vector3.h <343:2 <343:28 343:32> 380:2>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <343:18 343:26>]
LOCAL_SYMBOL: b3Vector3.h<343:51> [b3Vector3.h <343:51 343:51>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <343:40 343:48>]
LOCAL_SYMBOL: b3Vector3.h<344:2> [b3Vector3.h <344:2 344:2>]
LOCAL_SYMBOL: b3Vector3.h<344:2> [b3Vector3.h <380:2 380:2>]
REFERENCE_CALL b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <375:10 375:22>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <376:4 376:11>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <376:4 376:11>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <376:20 376:27>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <376:20 376:27>]
LOCAL_SYMBOL: b3Vector3.h<343:51> [b3Vector3.h <376:18 376:18>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <376:34 376:41>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <376:34 376:41>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <376:50 376:57>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <376:50 376:57>]
LOCAL_SYMBOL: b3Vector3.h<343:51> [b3Vector3.h <376:48 376:48>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <377:4 377:11>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <377:4 377:11>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <377:20 377:27>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <377:20 377:27>]
LOCAL_SYMBOL: b3Vector3.h<343:51> [b3Vector3.h <377:18 377:18>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <377:34 377:41>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <377:34 377:41>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <377:50 377:57>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <377:50 377:57>]
LOCAL_SYMBOL: b3Vector3.h<343:51> [b3Vector3.h <377:48 377:48>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <378:4 378:11>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <378:4 378:11>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <378:20 378:27>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <378:20 378:27>]
LOCAL_SYMBOL: b3Vector3.h<343:51> [b3Vector3.h <378:18 378:18>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <378:34 378:41>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <378:34 378:41>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <378:50 378:57>]
REFERENCE_USAGE b3Vector3 b3Vector3::cross(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <378:50 378:57>]
LOCAL_SYMBOL: b3Vector3.h<343:51> [b3Vector3.h <378:48 378:48>]
SYMBOL_METHOD public b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const [b3Vector3.h <382:2 <382:27 382:32> 430:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Scalar [b3Vector3.h <382:18 382:25>]
LOCAL_SYMBOL: b3Vector3.h<382:51> [b3Vector3.h <382:51 382:52>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <382:40 382:48>]
LOCAL_SYMBOL: b3Vector3.h<382:72> [b3Vector3.h <382:72 382:73>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <382:61 382:69>]
LOCAL_SYMBOL: b3Vector3.h<383:2> [b3Vector3.h <383:2 383:2>]
LOCAL_SYMBOL: b3Vector3.h<383:2> [b3Vector3.h <430:2 430:2>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <426:4 426:11>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <426:4 426:11>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <426:22 426:29>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <426:22 426:29>]
LOCAL_SYMBOL: b3Vector3.h<382:51> [b3Vector3.h <426:19 426:20>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <426:39 426:46>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <426:39 426:46>]
LOCAL_SYMBOL: b3Vector3.h<382:72> [b3Vector3.h <426:36 426:37>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <426:56 426:63>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <426:56 426:63>]
LOCAL_SYMBOL: b3Vector3.h<382:51> [b3Vector3.h <426:53 426:54>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <426:73 426:80>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <426:73 426:80>]
LOCAL_SYMBOL: b3Vector3.h<382:72> [b3Vector3.h <426:70 426:71>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <427:4 427:11>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <427:4 427:11>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <427:22 427:29>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <427:22 427:29>]
LOCAL_SYMBOL: b3Vector3.h<382:51> [b3Vector3.h <427:19 427:20>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <427:39 427:46>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <427:39 427:46>]
LOCAL_SYMBOL: b3Vector3.h<382:72> [b3Vector3.h <427:36 427:37>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <427:56 427:63>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <427:56 427:63>]
LOCAL_SYMBOL: b3Vector3.h<382:51> [b3Vector3.h <427:53 427:54>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <427:73 427:80>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <427:73 427:80>]
LOCAL_SYMBOL: b3Vector3.h<382:72> [b3Vector3.h <427:70 427:71>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <428:4 428:11>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <428:4 428:11>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <428:22 428:29>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <428:22 428:29>]
LOCAL_SYMBOL: b3Vector3.h<382:51> [b3Vector3.h <428:19 428:20>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <428:39 428:46>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <428:39 428:46>]
LOCAL_SYMBOL: b3Vector3.h<382:72> [b3Vector3.h <428:36 428:37>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <428:56 428:63>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <428:56 428:63>]
LOCAL_SYMBOL: b3Vector3.h<382:51> [b3Vector3.h <428:53 428:54>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <428:73 428:80>]
REFERENCE_USAGE b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <428:73 428:80>]
LOCAL_SYMBOL: b3Vector3.h<382:72> [b3Vector3.h <428:70 428:71>]
SYMBOL_METHOD public int b3Vector3::minAxis() const [b3Vector3.h <434:2 <434:22 434:28> 437:2>]
REFERENCE_TYPE_USAGE int b3Vector3::minAxis() const -> int [b3Vector3.h <434:18 434:20>]
LOCAL_SYMBOL: b3Vector3.h<435:2> [b3Vector3.h <435:2 435:2>]
LOCAL_SYMBOL: b3Vector3.h<435:2> [b3Vector3.h <437:2 437:2>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <436:10 436:17>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <436:10 436:17>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <436:24 436:31>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <436:24 436:31>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <436:39 436:46>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <436:39 436:46>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <436:52 436:59>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <436:52 436:59>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <436:76 436:83>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <436:76 436:83>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <436:89 436:96>]
REFERENCE_USAGE int b3Vector3::minAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <436:89 436:96>]
SYMBOL_METHOD public int b3Vector3::maxAxis() const [b3Vector3.h <441:2 <441:22 441:28> 444:2>]
REFERENCE_TYPE_USAGE int b3Vector3::maxAxis() const -> int [b3Vector3.h <441:18 441:20>]
LOCAL_SYMBOL: b3Vector3.h<442:2> [b3Vector3.h <442:2 442:2>]
LOCAL_SYMBOL: b3Vector3.h<442:2> [b3Vector3.h <444:2 444:2>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <443:10 443:17>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <443:10 443:17>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <443:24 443:31>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <443:24 443:31>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <443:39 443:46>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <443:39 443:46>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <443:52 443:59>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <443:52 443:59>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <443:76 443:83>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <443:76 443:83>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <443:89 443:96>]
REFERENCE_USAGE int b3Vector3::maxAxis() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <443:89 443:96>]
SYMBOL_METHOD public int b3Vector3::furthestAxis() const [b3Vector3.h <446:2 <446:22 446:33> 449:2>]
REFERENCE_TYPE_USAGE int b3Vector3::furthestAxis() const -> int [b3Vector3.h <446:18 446:20>]
LOCAL_SYMBOL: b3Vector3.h<447:2> [b3Vector3.h <447:2 447:2>]
LOCAL_SYMBOL: b3Vector3.h<447:2> [b3Vector3.h <449:2 449:2>]
SYMBOL_FUNCTION int b3Vector3::minAxis() const
REFERENCE_CALL int b3Vector3::furthestAxis() const -> int b3Vector3::minAxis() const [b3Vector3.h <448:21 448:27>]
SYMBOL_FUNCTION b3Vector3 b3Vector3::absolute() const
REFERENCE_CALL int b3Vector3::furthestAxis() const -> b3Vector3 b3Vector3::absolute() const [b3Vector3.h <448:10 448:17>]
SYMBOL_METHOD public int b3Vector3::closestAxis() const [b3Vector3.h <451:2 <451:22 451:32> 454:2>]
REFERENCE_TYPE_USAGE int b3Vector3::closestAxis() const -> int [b3Vector3.h <451:18 451:20>]
LOCAL_SYMBOL: b3Vector3.h<452:2> [b3Vector3.h <452:2 452:2>]
LOCAL_SYMBOL: b3Vector3.h<452:2> [b3Vector3.h <454:2 454:2>]
SYMBOL_FUNCTION int b3Vector3::maxAxis() const
REFERENCE_CALL int b3Vector3::closestAxis() const -> int b3Vector3::maxAxis() const [b3Vector3.h <453:21 453:27>]
REFERENCE_CALL int b3Vector3::closestAxis() const -> b3Vector3 b3Vector3::absolute() const [b3Vector3.h <453:10 453:17>]
SYMBOL_METHOD public void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) [b3Vector3.h <457:2 <457:23 457:37> 481:2>]
REFERENCE_TYPE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> void [b3Vector3.h <457:18 457:21>]
LOCAL_SYMBOL: b3Vector3.h<457:56> [b3Vector3.h <457:56 457:57>]
REFERENCE_TYPE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Vector3 [b3Vector3.h <457:45 457:53>]
LOCAL_SYMBOL: b3Vector3.h<457:77> [b3Vector3.h <457:77 457:78>]
REFERENCE_TYPE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Vector3 [b3Vector3.h <457:66 457:74>]
LOCAL_SYMBOL: b3Vector3.h<457:90> [b3Vector3.h <457:90 457:91>]
REFERENCE_TYPE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Scalar [b3Vector3.h <457:81 457:88>]
LOCAL_SYMBOL: b3Vector3.h<458:2> [b3Vector3.h <458:2 458:2>]
LOCAL_SYMBOL: b3Vector3.h<458:2> [b3Vector3.h <481:2 481:2>]
LOCAL_SYMBOL: b3Vector3.h<474:12> [b3Vector3.h <474:12 474:12>]
REFERENCE_TYPE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Scalar [b3Vector3.h <474:3 474:10>]
REFERENCE_TYPE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Scalar [b3Vector3.h <474:16 474:23>]
LOCAL_SYMBOL: b3Vector3.h<457:90> [b3Vector3.h <474:32 474:33>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <475:3 475:10>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <475:3 475:10>]
LOCAL_SYMBOL: b3Vector3.h<474:12> [b3Vector3.h <475:17 475:17>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <475:24 475:31>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <475:24 475:31>]
LOCAL_SYMBOL: b3Vector3.h<457:56> [b3Vector3.h <475:21 475:22>]
LOCAL_SYMBOL: b3Vector3.h<457:90> [b3Vector3.h <475:38 475:39>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <475:46 475:53>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <475:46 475:53>]
LOCAL_SYMBOL: b3Vector3.h<457:77> [b3Vector3.h <475:43 475:44>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <476:3 476:10>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <476:3 476:10>]
LOCAL_SYMBOL: b3Vector3.h<474:12> [b3Vector3.h <476:17 476:17>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <476:24 476:31>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <476:24 476:31>]
LOCAL_SYMBOL: b3Vector3.h<457:56> [b3Vector3.h <476:21 476:22>]
LOCAL_SYMBOL: b3Vector3.h<457:90> [b3Vector3.h <476:38 476:39>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <476:46 476:53>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <476:46 476:53>]
LOCAL_SYMBOL: b3Vector3.h<457:77> [b3Vector3.h <476:43 476:44>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <477:3 477:10>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <477:3 477:10>]
LOCAL_SYMBOL: b3Vector3.h<474:12> [b3Vector3.h <477:17 477:17>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <477:24 477:31>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <477:24 477:31>]
LOCAL_SYMBOL: b3Vector3.h<457:56> [b3Vector3.h <477:21 477:22>]
LOCAL_SYMBOL: b3Vector3.h<457:90> [b3Vector3.h <477:38 477:39>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <477:46 477:53>]
REFERENCE_USAGE void b3Vector3::setInterpolate3(const b3Vector3 &, const b3Vector3 &, b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <477:46 477:53>]
LOCAL_SYMBOL: b3Vector3.h<457:77> [b3Vector3.h <477:43 477:44>]
SYMBOL_METHOD public b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const [b3Vector3.h <486:2 <486:28 486:31> 508:2>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3 [b3Vector3.h <486:18 486:26>]
LOCAL_SYMBOL: b3Vector3.h<486:50> [b3Vector3.h <486:50 486:50>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3 [b3Vector3.h <486:39 486:47>]
LOCAL_SYMBOL: b3Vector3.h<486:69> [b3Vector3.h <486:69 486:69>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Scalar [b3Vector3.h <486:59 486:66>]
LOCAL_SYMBOL: b3Vector3.h<487:2> [b3Vector3.h <487:2 487:2>]
LOCAL_SYMBOL: b3Vector3.h<487:2> [b3Vector3.h <508:2 508:2>]
REFERENCE_CALL b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <504:4 504:16>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <504:19 504:26>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <504:19 504:26>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <504:36 504:43>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <504:36 504:43>]
LOCAL_SYMBOL: b3Vector3.h<486:50> [b3Vector3.h <504:34 504:34>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <504:50 504:57>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <504:50 504:57>]
LOCAL_SYMBOL: b3Vector3.h<486:69> [b3Vector3.h <504:65 504:65>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <505:7 505:14>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <505:7 505:14>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <505:24 505:31>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <505:24 505:31>]
LOCAL_SYMBOL: b3Vector3.h<486:50> [b3Vector3.h <505:22 505:22>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <505:38 505:45>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <505:38 505:45>]
LOCAL_SYMBOL: b3Vector3.h<486:69> [b3Vector3.h <505:53 505:53>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <506:7 506:14>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <506:7 506:14>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <506:24 506:31>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <506:24 506:31>]
LOCAL_SYMBOL: b3Vector3.h<486:50> [b3Vector3.h <506:22 506:22>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <506:38 506:45>]
REFERENCE_USAGE b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <506:38 506:45>]
LOCAL_SYMBOL: b3Vector3.h<486:69> [b3Vector3.h <506:53 506:53>]
SYMBOL_METHOD public b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) [b3Vector3.h <512:2 <512:29 512:38> 524:2>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> b3Vector3 [b3Vector3.h <512:18 512:26>]
LOCAL_SYMBOL: b3Vector3.h<512:57> [b3Vector3.h <512:57 512:57>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> b3Vector3 [b3Vector3.h <512:46 512:54>]
LOCAL_SYMBOL: b3Vector3.h<513:2> [b3Vector3.h <513:2 513:2>]
LOCAL_SYMBOL: b3Vector3.h<513:2> [b3Vector3.h <524:2 524:2>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <519:3 519:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <519:3 519:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <519:20 519:27>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <519:20 519:27>]
LOCAL_SYMBOL: b3Vector3.h<512:57> [b3Vector3.h <519:18 519:18>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <520:3 520:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <520:3 520:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <520:20 520:27>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <520:20 520:27>]
LOCAL_SYMBOL: b3Vector3.h<512:57> [b3Vector3.h <520:18 520:18>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <521:3 521:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <521:3 521:10>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <521:20 521:27>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator*=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <521:20 521:27>]
LOCAL_SYMBOL: b3Vector3.h<512:57> [b3Vector3.h <521:18 521:18>]
SYMBOL_METHOD public const b3Scalar & b3Vector3::getX() const [b3Vector3.h <527:3 <527:35 527:38> 527:70>]
REFERENCE_TYPE_USAGE const b3Scalar & b3Vector3::getX() const -> b3Scalar [b3Vector3.h <527:25 527:32>]
LOCAL_SYMBOL: b3Vector3.h<527:48> [b3Vector3.h <527:48 527:48>]
LOCAL_SYMBOL: b3Vector3.h<527:48> [b3Vector3.h <527:70 527:70>]
REFERENCE_USAGE const b3Scalar & b3Vector3::getX() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <527:57 527:64>]
REFERENCE_USAGE const b3Scalar & b3Vector3::getX() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <527:57 527:64>]
SYMBOL_METHOD public const b3Scalar & b3Vector3::getY() const [b3Vector3.h <529:3 <529:35 529:38> 529:70>]
REFERENCE_TYPE_USAGE const b3Scalar & b3Vector3::getY() const -> b3Scalar [b3Vector3.h <529:25 529:32>]
LOCAL_SYMBOL: b3Vector3.h<529:48> [b3Vector3.h <529:48 529:48>]
LOCAL_SYMBOL: b3Vector3.h<529:48> [b3Vector3.h <529:70 529:70>]
REFERENCE_USAGE const b3Scalar & b3Vector3::getY() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <529:57 529:64>]
REFERENCE_USAGE const b3Scalar & b3Vector3::getY() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <529:57 529:64>]
SYMBOL_METHOD public const b3Scalar & b3Vector3::getZ() const [b3Vector3.h <531:3 <531:35 531:38> 531:70>]
REFERENCE_TYPE_USAGE const b3Scalar & b3Vector3::getZ() const -> b3Scalar [b3Vector3.h <531:25 531:32>]
LOCAL_SYMBOL: b3Vector3.h<531:48> [b3Vector3.h <531:48 531:48>]
LOCAL_SYMBOL: b3Vector3.h<531:48> [b3Vector3.h <531:70 531:70>]
REFERENCE_USAGE const b3Scalar & b3Vector3::getZ() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <531:57 531:64>]
REFERENCE_USAGE const b3Scalar & b3Vector3::getZ() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <531:57 531:64>]
SYMBOL_METHOD public const b3Scalar & b3Vector3::getW() const [b3Vector3.h <533:3 <533:35 533:38> 533:70>]
REFERENCE_TYPE_USAGE const b3Scalar & b3Vector3::getW() const -> b3Scalar [b3Vector3.h <533:25 533:32>]
LOCAL_SYMBOL: b3Vector3.h<533:48> [b3Vector3.h <533:48 533:48>]
LOCAL_SYMBOL: b3Vector3.h<533:48> [b3Vector3.h <533:70 533:70>]
REFERENCE_USAGE const b3Scalar & b3Vector3::getW() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <533:57 533:64>]
REFERENCE_USAGE const b3Scalar & b3Vector3::getW() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <533:57 533:64>]
SYMBOL_METHOD public void b3Vector3::setX(b3Scalar) [b3Vector3.h <536:3 <536:24 536:27> 536:61>]
REFERENCE_TYPE_USAGE void b3Vector3::setX(b3Scalar) -> void [b3Vector3.h <536:19 536:22>]
LOCAL_SYMBOL: b3Vector3.h<536:38> [b3Vector3.h <536:38 536:39>]
REFERENCE_TYPE_USAGE void b3Vector3::setX(b3Scalar) -> b3Scalar [b3Vector3.h <536:29 536:36>]
LOCAL_SYMBOL: b3Vector3.h<536:42> [b3Vector3.h <536:42 536:42>]
LOCAL_SYMBOL: b3Vector3.h<536:42> [b3Vector3.h <536:61 536:61>]
REFERENCE_USAGE void b3Vector3::setX(b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <536:44 536:51>]
REFERENCE_USAGE void b3Vector3::setX(b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <536:44 536:51>]
LOCAL_SYMBOL: b3Vector3.h<536:38> [b3Vector3.h <536:58 536:59>]
SYMBOL_METHOD public void b3Vector3::setY(b3Scalar) [b3Vector3.h <538:3 <538:24 538:27> 538:61>]
REFERENCE_TYPE_USAGE void b3Vector3::setY(b3Scalar) -> void [b3Vector3.h <538:19 538:22>]
LOCAL_SYMBOL: b3Vector3.h<538:38> [b3Vector3.h <538:38 538:39>]
REFERENCE_TYPE_USAGE void b3Vector3::setY(b3Scalar) -> b3Scalar [b3Vector3.h <538:29 538:36>]
LOCAL_SYMBOL: b3Vector3.h<538:42> [b3Vector3.h <538:42 538:42>]
LOCAL_SYMBOL: b3Vector3.h<538:42> [b3Vector3.h <538:61 538:61>]
REFERENCE_USAGE void b3Vector3::setY(b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <538:44 538:51>]
REFERENCE_USAGE void b3Vector3::setY(b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <538:44 538:51>]
LOCAL_SYMBOL: b3Vector3.h<538:38> [b3Vector3.h <538:58 538:59>]
SYMBOL_METHOD public void b3Vector3::setZ(b3Scalar) [b3Vector3.h <540:3 <540:24 540:27> 540:61>]
REFERENCE_TYPE_USAGE void b3Vector3::setZ(b3Scalar) -> void [b3Vector3.h <540:19 540:22>]
LOCAL_SYMBOL: b3Vector3.h<540:38> [b3Vector3.h <540:38 540:39>]
REFERENCE_TYPE_USAGE void b3Vector3::setZ(b3Scalar) -> b3Scalar [b3Vector3.h <540:29 540:36>]
LOCAL_SYMBOL: b3Vector3.h<540:42> [b3Vector3.h <540:42 540:42>]
LOCAL_SYMBOL: b3Vector3.h<540:42> [b3Vector3.h <540:61 540:61>]
REFERENCE_USAGE void b3Vector3::setZ(b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <540:44 540:51>]
REFERENCE_USAGE void b3Vector3::setZ(b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <540:44 540:51>]
LOCAL_SYMBOL: b3Vector3.h<540:38> [b3Vector3.h <540:58 540:59>]
SYMBOL_METHOD public void b3Vector3::setW(b3Scalar) [b3Vector3.h <542:3 <542:24 542:27> 542:61>]
REFERENCE_TYPE_USAGE void b3Vector3::setW(b3Scalar) -> void [b3Vector3.h <542:19 542:22>]
LOCAL_SYMBOL: b3Vector3.h<542:38> [b3Vector3.h <542:38 542:39>]
REFERENCE_TYPE_USAGE void b3Vector3::setW(b3Scalar) -> b3Scalar [b3Vector3.h <542:29 542:36>]
LOCAL_SYMBOL: b3Vector3.h<542:42> [b3Vector3.h <542:42 542:42>]
LOCAL_SYMBOL: b3Vector3.h<542:42> [b3Vector3.h <542:61 542:61>]
REFERENCE_USAGE void b3Vector3::setW(b3Scalar) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <542:44 542:51>]
REFERENCE_USAGE void b3Vector3::setW(b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <542:44 542:51>]
LOCAL_SYMBOL: b3Vector3.h<542:38> [b3Vector3.h <542:58 542:59>]
SYMBOL_METHOD public b3Scalar * b3Vector3::operator float *() [b3Vector3.h <547:2 <547:18 547:42> 547:75>]
REFERENCE_TYPE_USAGE b3Scalar * b3Vector3::operator float *() -> b3Scalar [b3Vector3.h <547:33 547:40>]
LOCAL_SYMBOL: b3Vector3.h<547:52> [b3Vector3.h <547:52 547:52>]
LOCAL_SYMBOL: b3Vector3.h<547:52> [b3Vector3.h <547:75 547:75>]
REFERENCE_USAGE b3Scalar * b3Vector3::operator float *() -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <547:62 547:69>]
REFERENCE_USAGE b3Scalar * b3Vector3::operator float *() -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <547:62 547:69>]
SYMBOL_METHOD public const b3Scalar * b3Vector3::operator const float *() const [b3Vector3.h <548:2 <548:18 548:42> 548:75>]
REFERENCE_TYPE_USAGE const b3Scalar * b3Vector3::operator const float *() const -> b3Scalar [b3Vector3.h <548:33 548:40>]
LOCAL_SYMBOL: b3Vector3.h<548:52> [b3Vector3.h <548:52 548:52>]
LOCAL_SYMBOL: b3Vector3.h<548:52> [b3Vector3.h <548:75 548:75>]
REFERENCE_USAGE const b3Scalar * b3Vector3::operator const float *() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <548:62 548:69>]
REFERENCE_USAGE const b3Scalar * b3Vector3::operator const float *() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <548:62 548:69>]
SYMBOL_METHOD public bool b3Vector3::operator==(const b3Vector3 &) const [b3Vector3.h <550:2 <550:23 550:32> 560:2>]
REFERENCE_TYPE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> bool [b3Vector3.h <550:18 550:21>]
LOCAL_SYMBOL: b3Vector3.h<550:51> [b3Vector3.h <550:51 550:55>]
REFERENCE_TYPE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <550:40 550:48>]
LOCAL_SYMBOL: b3Vector3.h<551:2> [b3Vector3.h <551:2 551:2>]
LOCAL_SYMBOL: b3Vector3.h<551:2> [b3Vector3.h <560:2 560:2>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <555:12 555:19>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <555:12 555:19>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <555:31 555:38>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <555:31 555:38>]
LOCAL_SYMBOL: b3Vector3.h<550:51> [b3Vector3.h <555:25 555:29>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <556:18 556:25>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <556:18 556:25>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <556:37 556:44>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <556:37 556:44>]
LOCAL_SYMBOL: b3Vector3.h<550:51> [b3Vector3.h <556:31 556:35>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <557:18 557:25>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <557:18 557:25>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <557:37 557:44>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <557:37 557:44>]
LOCAL_SYMBOL: b3Vector3.h<550:51> [b3Vector3.h <557:31 557:35>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <558:18 558:25>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <558:18 558:25>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <558:37 558:44>]
REFERENCE_USAGE bool b3Vector3::operator==(const b3Vector3 &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <558:37 558:44>]
LOCAL_SYMBOL: b3Vector3.h<550:51> [b3Vector3.h <558:31 558:35>]
SYMBOL_METHOD public bool b3Vector3::operator!=(const b3Vector3 &) const [b3Vector3.h <562:2 <562:23 562:32> 565:2>]
REFERENCE_TYPE_USAGE bool b3Vector3::operator!=(const b3Vector3 &) const -> bool [b3Vector3.h <562:18 562:21>]
LOCAL_SYMBOL: b3Vector3.h<562:51> [b3Vector3.h <562:51 562:55>]
REFERENCE_TYPE_USAGE bool b3Vector3::operator!=(const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <562:40 562:48>]
LOCAL_SYMBOL: b3Vector3.h<563:2> [b3Vector3.h <563:2 563:2>]
LOCAL_SYMBOL: b3Vector3.h<563:2> [b3Vector3.h <565:2 565:2>]
SYMBOL_FUNCTION bool b3Vector3::operator==(const b3Vector3 &) const
REFERENCE_CALL bool b3Vector3::operator!=(const b3Vector3 &) const -> bool b3Vector3::operator==(const b3Vector3 &) const [b3Vector3.h <564:18 564:19>]
LOCAL_SYMBOL: b3Vector3.h<562:51> [b3Vector3.h <564:21 564:25>]
SYMBOL_METHOD public void b3Vector3::setMax(const b3Vector3 &) [b3Vector3.h <570:2 <570:23 570:28> 582:2>]
REFERENCE_TYPE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> void [b3Vector3.h <570:18 570:21>]
LOCAL_SYMBOL: b3Vector3.h<570:47> [b3Vector3.h <570:47 570:51>]
REFERENCE_TYPE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> b3Vector3 [b3Vector3.h <570:36 570:44>]
LOCAL_SYMBOL: b3Vector3.h<571:2> [b3Vector3.h <571:2 571:2>]
LOCAL_SYMBOL: b3Vector3.h<571:2> [b3Vector3.h <582:2 582:2>]
SYMBOL_FUNCTION void b3SetMax<float>(float &, const float &)
REFERENCE_CALL void b3Vector3::setMax(const b3Vector3 &) -> void b3SetMax<float>(float &, const float &) [b3Vector3.h <577:3 577:10>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <577:12 577:19>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <577:12 577:19>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <577:31 577:38>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <577:31 577:38>]
LOCAL_SYMBOL: b3Vector3.h<570:47> [b3Vector3.h <577:25 577:29>]
REFERENCE_CALL void b3Vector3::setMax(const b3Vector3 &) -> void b3SetMax<float>(float &, const float &) [b3Vector3.h <578:3 578:10>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <578:12 578:19>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <578:12 578:19>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <578:31 578:38>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <578:31 578:38>]
LOCAL_SYMBOL: b3Vector3.h<570:47> [b3Vector3.h <578:25 578:29>]
REFERENCE_CALL void b3Vector3::setMax(const b3Vector3 &) -> void b3SetMax<float>(float &, const float &) [b3Vector3.h <579:3 579:10>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <579:12 579:19>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <579:12 579:19>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <579:31 579:38>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <579:31 579:38>]
LOCAL_SYMBOL: b3Vector3.h<570:47> [b3Vector3.h <579:25 579:29>]
REFERENCE_CALL void b3Vector3::setMax(const b3Vector3 &) -> void b3SetMax<float>(float &, const float &) [b3Vector3.h <580:3 580:10>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <580:12 580:19>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <580:12 580:19>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <580:31 580:38>]
REFERENCE_USAGE void b3Vector3::setMax(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <580:31 580:38>]
LOCAL_SYMBOL: b3Vector3.h<570:47> [b3Vector3.h <580:25 580:29>]
SYMBOL_METHOD public void b3Vector3::setMin(const b3Vector3 &) [b3Vector3.h <587:2 <587:23 587:28> 599:2>]
REFERENCE_TYPE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> void [b3Vector3.h <587:18 587:21>]
LOCAL_SYMBOL: b3Vector3.h<587:47> [b3Vector3.h <587:47 587:51>]
REFERENCE_TYPE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> b3Vector3 [b3Vector3.h <587:36 587:44>]
LOCAL_SYMBOL: b3Vector3.h<588:2> [b3Vector3.h <588:2 588:2>]
LOCAL_SYMBOL: b3Vector3.h<588:2> [b3Vector3.h <599:2 599:2>]
SYMBOL_FUNCTION void b3SetMin<float>(float &, const float &)
REFERENCE_CALL void b3Vector3::setMin(const b3Vector3 &) -> void b3SetMin<float>(float &, const float &) [b3Vector3.h <594:3 594:10>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <594:12 594:19>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <594:12 594:19>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <594:31 594:38>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <594:31 594:38>]
LOCAL_SYMBOL: b3Vector3.h<587:47> [b3Vector3.h <594:25 594:29>]
REFERENCE_CALL void b3Vector3::setMin(const b3Vector3 &) -> void b3SetMin<float>(float &, const float &) [b3Vector3.h <595:3 595:10>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <595:12 595:19>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <595:12 595:19>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <595:31 595:38>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <595:31 595:38>]
LOCAL_SYMBOL: b3Vector3.h<587:47> [b3Vector3.h <595:25 595:29>]
REFERENCE_CALL void b3Vector3::setMin(const b3Vector3 &) -> void b3SetMin<float>(float &, const float &) [b3Vector3.h <596:3 596:10>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <596:12 596:19>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <596:12 596:19>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <596:31 596:38>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <596:31 596:38>]
LOCAL_SYMBOL: b3Vector3.h<587:47> [b3Vector3.h <596:25 596:29>]
REFERENCE_CALL void b3Vector3::setMin(const b3Vector3 &) -> void b3SetMin<float>(float &, const float &) [b3Vector3.h <597:3 597:10>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <597:12 597:19>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <597:12 597:19>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <597:31 597:38>]
REFERENCE_USAGE void b3Vector3::setMin(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <597:31 597:38>]
LOCAL_SYMBOL: b3Vector3.h<587:47> [b3Vector3.h <597:25 597:29>]
SYMBOL_METHOD public void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Vector3.h <601:2 <601:24 601:31> 607:2>]
REFERENCE_TYPE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void [b3Vector3.h <601:18 601:21>]
LOCAL_SYMBOL: b3Vector3.h<601:49> [b3Vector3.h <601:49 601:50>]
REFERENCE_TYPE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Vector3.h <601:39 601:46>]
LOCAL_SYMBOL: b3Vector3.h<601:69> [b3Vector3.h <601:69 601:70>]
REFERENCE_TYPE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Vector3.h <601:59 601:66>]
LOCAL_SYMBOL: b3Vector3.h<601:89> [b3Vector3.h <601:89 601:90>]
REFERENCE_TYPE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Vector3.h <601:79 601:86>]
LOCAL_SYMBOL: b3Vector3.h<602:2> [b3Vector3.h <602:2 602:2>]
LOCAL_SYMBOL: b3Vector3.h<602:2> [b3Vector3.h <607:2 607:2>]
REFERENCE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <603:3 603:10>]
REFERENCE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <603:3 603:10>]
LOCAL_SYMBOL: b3Vector3.h<601:49> [b3Vector3.h <603:15 603:16>]
REFERENCE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <604:3 604:10>]
REFERENCE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <604:3 604:10>]
LOCAL_SYMBOL: b3Vector3.h<601:69> [b3Vector3.h <604:15 604:16>]
REFERENCE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <605:3 605:10>]
REFERENCE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <605:3 605:10>]
LOCAL_SYMBOL: b3Vector3.h<601:89> [b3Vector3.h <605:15 605:16>]
REFERENCE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <606:3 606:10>]
REFERENCE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <606:3 606:10>]
REFERENCE_TYPE_USAGE void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Vector3.h <606:17 606:24>]
SYMBOL_METHOD public void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const [b3Vector3.h <609:2 <609:7 609:28> 630:2>]
REFERENCE_TYPE_USAGE void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> void [b3Vector3.h <609:2 609:5>]
LOCAL_SYMBOL: b3Vector3.h<609:41> [b3Vector3.h <609:41 609:42>]
REFERENCE_TYPE_USAGE void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> b3Vector3 [b3Vector3.h <609:30 609:38>]
LOCAL_SYMBOL: b3Vector3.h<609:55> [b3Vector3.h <609:55 609:56>]
REFERENCE_TYPE_USAGE void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> b3Vector3 [b3Vector3.h <609:44 609:52>]
LOCAL_SYMBOL: b3Vector3.h<609:69> [b3Vector3.h <609:69 609:70>]
REFERENCE_TYPE_USAGE void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> b3Vector3 [b3Vector3.h <609:58 609:66>]
LOCAL_SYMBOL: b3Vector3.h<610:2> [b3Vector3.h <610:2 610:2>]
LOCAL_SYMBOL: b3Vector3.h<610:2> [b3Vector3.h <630:2 630:2>]
REFERENCE_CALL void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Vector3.h <626:7 626:14>]
LOCAL_SYMBOL: b3Vector3.h<609:41> [b3Vector3.h <626:3 626:4>]
SYMBOL_FUNCTION const b3Scalar & b3Vector3::getZ() const
REFERENCE_CALL void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> const b3Scalar & b3Vector3::getZ() const [b3Vector3.h <626:22 626:25>]
SYMBOL_FUNCTION const b3Scalar & b3Vector3::getY() const
REFERENCE_CALL void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> const b3Scalar & b3Vector3::getY() const [b3Vector3.h <626:31 626:34>]
REFERENCE_CALL void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Vector3.h <627:7 627:14>]
LOCAL_SYMBOL: b3Vector3.h<609:55> [b3Vector3.h <627:3 627:4>]
REFERENCE_CALL void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> const b3Scalar & b3Vector3::getZ() const [b3Vector3.h <627:16 627:19>]
SYMBOL_FUNCTION const b3Scalar & b3Vector3::getX() const
REFERENCE_CALL void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> const b3Scalar & b3Vector3::getX() const [b3Vector3.h <627:31 627:34>]
REFERENCE_CALL void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Vector3.h <628:7 628:14>]
LOCAL_SYMBOL: b3Vector3.h<609:69> [b3Vector3.h <628:3 628:4>]
REFERENCE_CALL void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> const b3Scalar & b3Vector3::getY() const [b3Vector3.h <628:17 628:20>]
REFERENCE_CALL void b3Vector3::getSkewSymmetricMatrix(b3Vector3 *, b3Vector3 *, b3Vector3 *) const -> const b3Scalar & b3Vector3::getX() const [b3Vector3.h <628:25 628:28>]
SYMBOL_METHOD public void b3Vector3::setZero() [b3Vector3.h <632:2 <632:7 632:13> 642:2>]
REFERENCE_TYPE_USAGE void b3Vector3::setZero() -> void [b3Vector3.h <632:2 632:5>]
LOCAL_SYMBOL: b3Vector3.h<633:2> [b3Vector3.h <633:2 633:2>]
LOCAL_SYMBOL: b3Vector3.h<633:2> [b3Vector3.h <642:2 642:2>]
REFERENCE_CALL void b3Vector3::setZero() -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Vector3.h <640:3 640:10>]
REFERENCE_TYPE_USAGE void b3Vector3::setZero() -> b3Scalar [b3Vector3.h <640:12 640:19>]
REFERENCE_TYPE_USAGE void b3Vector3::setZero() -> b3Scalar [b3Vector3.h <640:25 640:32>]
REFERENCE_TYPE_USAGE void b3Vector3::setZero() -> b3Scalar [b3Vector3.h <640:38 640:45>]
SYMBOL_METHOD public bool b3Vector3::isZero() const [b3Vector3.h <644:2 <644:23 644:28> 647:2>]
REFERENCE_TYPE_USAGE bool b3Vector3::isZero() const -> bool [b3Vector3.h <644:18 644:21>]
LOCAL_SYMBOL: b3Vector3.h<645:2> [b3Vector3.h <645:2 645:2>]
LOCAL_SYMBOL: b3Vector3.h<645:2> [b3Vector3.h <647:2 647:2>]
REFERENCE_USAGE bool b3Vector3::isZero() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <646:10 646:17>]
REFERENCE_USAGE bool b3Vector3::isZero() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <646:10 646:17>]
REFERENCE_TYPE_USAGE bool b3Vector3::isZero() const -> b3Scalar [b3Vector3.h <646:25 646:32>]
REFERENCE_USAGE bool b3Vector3::isZero() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <646:40 646:47>]
REFERENCE_USAGE bool b3Vector3::isZero() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <646:40 646:47>]
REFERENCE_TYPE_USAGE bool b3Vector3::isZero() const -> b3Scalar [b3Vector3.h <646:55 646:62>]
REFERENCE_USAGE bool b3Vector3::isZero() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <646:70 646:77>]
REFERENCE_USAGE bool b3Vector3::isZero() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <646:70 646:77>]
REFERENCE_TYPE_USAGE bool b3Vector3::isZero() const -> b3Scalar [b3Vector3.h <646:85 646:92>]
SYMBOL_METHOD public bool b3Vector3::fuzzyZero() const [b3Vector3.h <649:2 <649:23 649:31> 652:2>]
REFERENCE_TYPE_USAGE bool b3Vector3::fuzzyZero() const -> bool [b3Vector3.h <649:18 649:21>]
LOCAL_SYMBOL: b3Vector3.h<650:2> [b3Vector3.h <650:2 650:2>]
LOCAL_SYMBOL: b3Vector3.h<650:2> [b3Vector3.h <652:2 652:2>]
REFERENCE_CALL bool b3Vector3::fuzzyZero() const -> b3Scalar b3Vector3::length2() const [b3Vector3.h <651:10 651:16>]
SYMBOL_STRUCT b3Vector3FloatData [b3Vector3.h <654:40 654:52>]
SYMBOL_METHOD public void b3Vector3::serialize(b3Vector3FloatData &) const [b3Vector3.h <654:23 654:31>]
REFERENCE_TYPE_USAGE void b3Vector3::serialize(b3Vector3FloatData &) const -> void [b3Vector3.h <654:18 654:21>]
LOCAL_SYMBOL: b3Vector3.h<654:55> [b3Vector3.h <654:55 654:61>]
REFERENCE_TYPE_USAGE void b3Vector3::serialize(b3Vector3FloatData &) const -> b3Vector3FloatData [b3Vector3.h <654:40 654:52>]
SYMBOL_METHOD public void b3Vector3::deSerialize(const b3Vector3FloatData &) [b3Vector3.h <656:23 656:33>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerialize(const b3Vector3FloatData &) -> void [b3Vector3.h <656:18 656:21>]
LOCAL_SYMBOL: b3Vector3.h<656:63> [b3Vector3.h <656:63 656:68>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerialize(const b3Vector3FloatData &) -> b3Vector3FloatData [b3Vector3.h <656:48 656:60>]
SYMBOL_METHOD public void b3Vector3::serializeFloat(b3Vector3FloatData &) const [b3Vector3.h <658:23 658:36>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeFloat(b3Vector3FloatData &) const -> void [b3Vector3.h <658:18 658:21>]
LOCAL_SYMBOL: b3Vector3.h<658:65> [b3Vector3.h <658:65 658:71>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeFloat(b3Vector3FloatData &) const -> b3Vector3FloatData [b3Vector3.h <658:45 658:62>]
SYMBOL_METHOD public void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) [b3Vector3.h <660:23 660:38>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) -> void [b3Vector3.h <660:18 660:21>]
LOCAL_SYMBOL: b3Vector3.h<660:73> [b3Vector3.h <660:73 660:78>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) -> b3Vector3FloatData [b3Vector3.h <660:53 660:70>]
SYMBOL_STRUCT b3Vector3DoubleData [b3Vector3.h <662:46 662:64>]
SYMBOL_METHOD public void b3Vector3::serializeDouble(b3Vector3DoubleData &) const [b3Vector3.h <662:23 662:37>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeDouble(b3Vector3DoubleData &) const -> void [b3Vector3.h <662:18 662:21>]
LOCAL_SYMBOL: b3Vector3.h<662:67> [b3Vector3.h <662:67 662:73>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeDouble(b3Vector3DoubleData &) const -> b3Vector3DoubleData [b3Vector3.h <662:46 662:64>]
SYMBOL_METHOD public void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) [b3Vector3.h <664:23 664:39>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) -> void [b3Vector3.h <664:18 664:21>]
LOCAL_SYMBOL: b3Vector3.h<664:75> [b3Vector3.h <664:75 664:80>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) -> b3Vector3DoubleData [b3Vector3.h <664:54 664:72>]
SYMBOL_METHOD public long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const [b3Vector3.h <670:35 670:40>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> long [b3Vector3.h <670:27 670:30>]
LOCAL_SYMBOL: b3Vector3.h<670:60> [b3Vector3.h <670:60 670:64>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> b3Vector3 [b3Vector3.h <670:49 670:57>]
LOCAL_SYMBOL: b3Vector3.h<670:72> [b3Vector3.h <670:72 670:82>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> long [b3Vector3.h <670:67 670:70>]
LOCAL_SYMBOL: b3Vector3.h<670:95> [b3Vector3.h <670:95 670:100>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> b3Scalar [b3Vector3.h <670:85 670:92>]
SYMBOL_METHOD public long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const [b3Vector3.h <676:35 676:40>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> long [b3Vector3.h <676:27 676:30>]
LOCAL_SYMBOL: b3Vector3.h<676:60> [b3Vector3.h <676:60 676:64>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> b3Vector3 [b3Vector3.h <676:49 676:57>]
LOCAL_SYMBOL: b3Vector3.h<676:72> [b3Vector3.h <676:72 676:82>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> long [b3Vector3.h <676:67 676:70>]
LOCAL_SYMBOL: b3Vector3.h<676:95> [b3Vector3.h <676:95 676:100>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> b3Scalar [b3Vector3.h <676:85 676:92>]
SYMBOL_METHOD public b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const [b3Vector3.h <679:5 <679:32 679:35> 708:5>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <679:21 679:29>]
LOCAL_SYMBOL: b3Vector3.h<679:55> [b3Vector3.h <679:55 679:56>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <679:44 679:52>]
LOCAL_SYMBOL: b3Vector3.h<679:76> [b3Vector3.h <679:76 679:77>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <679:65 679:73>]
LOCAL_SYMBOL: b3Vector3.h<679:97> [b3Vector3.h <679:97 679:98>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <679:86 679:94>]
LOCAL_SYMBOL: b3Vector3.h<680:5> [b3Vector3.h <680:5 680:5>]
LOCAL_SYMBOL: b3Vector3.h<680:5> [b3Vector3.h <708:5 708:5>]
REFERENCE_CALL b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <706:10 706:22>]
REFERENCE_CALL b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Vector3.h <706:25 706:27>]
LOCAL_SYMBOL: b3Vector3.h<679:55> [b3Vector3.h <706:29 706:30>]
REFERENCE_CALL b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Vector3.h <706:34 706:36>]
LOCAL_SYMBOL: b3Vector3.h<679:76> [b3Vector3.h <706:38 706:39>]
REFERENCE_CALL b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Vector3.h <706:43 706:45>]
LOCAL_SYMBOL: b3Vector3.h<679:97> [b3Vector3.h <706:47 706:48>]
SYMBOL_METHOD public void b3Vector3::b3Vector3() [b3Vector3.h <92:31 <92:31 92:39> 92:39>]
SYMBOL_METHOD public void b3Vector3::b3Vector3(const b3Vector3 &) [b3Vector3.h <92:31 <92:31 92:39> 92:39>]
REFERENCE_USAGE void b3Vector3::b3Vector3(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <92:31 92:39>]
SYMBOL_FUNCTION void b3Vector3::anonymous union (b3Vector3.h<96:9>)::(const b3Vector3::anonymous union (b3Vector3.h<96:9>) &)
REFERENCE_CALL void b3Vector3::b3Vector3(const b3Vector3 &) -> void b3Vector3::anonymous union (b3Vector3.h<96:9>)::(const b3Vector3::anonymous union (b3Vector3.h<96:9>) &) [b3Vector3.h <92:31 92:39>]
LOCAL_SYMBOL: b3Vector3.h<92:31> [b3Vector3.h <92:31 92:39>]
SYMBOL_METHOD public void b3Vector3::b3Vector3(b3Vector3 &&) [b3Vector3.h <92:31 <92:31 92:39> 92:39>]
REFERENCE_USAGE void b3Vector3::b3Vector3(b3Vector3 &&) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <92:31 92:39>]
SYMBOL_FUNCTION void b3Vector3::anonymous union (b3Vector3.h<96:9>)::(b3Vector3::anonymous union (b3Vector3.h<96:9>) &&)
REFERENCE_CALL void b3Vector3::b3Vector3(b3Vector3 &&) -> void b3Vector3::anonymous union (b3Vector3.h<96:9>)::(b3Vector3::anonymous union (b3Vector3.h<96:9>) &&) [b3Vector3.h <92:31 92:39>]
REFERENCE_TYPE_USAGE void b3Vector3::b3Vector3(b3Vector3 &&) -> b3Vector3 [b3Vector3.h <92:31 92:39>]
SYMBOL_METHOD public void b3Vector3::~b3Vector3() [b3Vector3.h <92:31 92:39>]
SYMBOL_METHOD public b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3Vector3.h <92:31 <92:31 92:39> 92:39>]
SYMBOL_FUNCTION b3Vector3::anonymous union (b3Vector3.h<96:9>) & b3Vector3::anonymous union (b3Vector3.h<96:9>)::operator=(const b3Vector3::anonymous union (b3Vector3.h<96:9>) &)
REFERENCE_CALL b3Vector3 & b3Vector3::operator=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) & b3Vector3::anonymous union (b3Vector3.h<96:9>)::operator=(const b3Vector3::anonymous union (b3Vector3.h<96:9>) &) [b3Vector3.h <92:31 92:39>]
SYMBOL_UNION b3Vector3::anonymous union (b3Vector3.h<96:9>)
QUALIFIER: b3Vector3::anonymous union (b3Vector3.h<96:9>) [b3Vector3.h <92:31 92:39>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator=(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <92:31 92:39>]
SYMBOL_METHOD public b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3Vector3.h <92:31 <92:31 92:39> 92:39>]
SYMBOL_FUNCTION b3Vector3::anonymous union (b3Vector3.h<96:9>) & b3Vector3::anonymous union (b3Vector3.h<96:9>)::operator=(b3Vector3::anonymous union (b3Vector3.h<96:9>) &&)
REFERENCE_CALL b3Vector3 & b3Vector3::operator=(b3Vector3 &&) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) & b3Vector3::anonymous union (b3Vector3.h<96:9>)::operator=(b3Vector3::anonymous union (b3Vector3.h<96:9>) &&) [b3Vector3.h <92:31 92:39>]
REFERENCE_USAGE b3Vector3 & b3Vector3::operator=(b3Vector3 &&) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <92:31 92:39>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Vector3::operator=(b3Vector3 &&) -> b3Vector3 [b3Vector3.h <92:31 92:39>]
SYMBOL_FUNCTION b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <712:1 <713:1 713:9> 725:1>]
REFERENCE_TYPE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <712:17 712:25>]
LOCAL_SYMBOL: b3Vector3.h<713:28> [b3Vector3.h <713:28 713:29>]
REFERENCE_TYPE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <713:17 713:25>]
LOCAL_SYMBOL: b3Vector3.h<713:49> [b3Vector3.h <713:49 713:50>]
REFERENCE_TYPE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <713:38 713:46>]
LOCAL_SYMBOL: b3Vector3.h<714:1> [b3Vector3.h <714:1 714:1>]
LOCAL_SYMBOL: b3Vector3.h<714:1> [b3Vector3.h <725:1 725:1>]
REFERENCE_CALL b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <720:9 720:21>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <721:7 721:14>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <721:7 721:14>]
LOCAL_SYMBOL: b3Vector3.h<713:28> [b3Vector3.h <721:4 721:5>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <721:24 721:31>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <721:24 721:31>]
LOCAL_SYMBOL: b3Vector3.h<713:49> [b3Vector3.h <721:21 721:22>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <722:7 722:14>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <722:7 722:14>]
LOCAL_SYMBOL: b3Vector3.h<713:28> [b3Vector3.h <722:4 722:5>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <722:24 722:31>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <722:24 722:31>]
LOCAL_SYMBOL: b3Vector3.h<713:49> [b3Vector3.h <722:21 722:22>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <723:7 723:14>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <723:7 723:14>]
LOCAL_SYMBOL: b3Vector3.h<713:28> [b3Vector3.h <723:4 723:5>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <723:24 723:31>]
REFERENCE_USAGE b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <723:24 723:31>]
LOCAL_SYMBOL: b3Vector3.h<713:49> [b3Vector3.h <723:21 723:22>]
SYMBOL_FUNCTION b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <728:1 <729:1 729:9> 741:1>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <728:17 728:25>]
LOCAL_SYMBOL: b3Vector3.h<729:28> [b3Vector3.h <729:28 729:29>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <729:17 729:25>]
LOCAL_SYMBOL: b3Vector3.h<729:49> [b3Vector3.h <729:49 729:50>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <729:38 729:46>]
LOCAL_SYMBOL: b3Vector3.h<730:1> [b3Vector3.h <730:1 730:1>]
LOCAL_SYMBOL: b3Vector3.h<730:1> [b3Vector3.h <741:1 741:1>]
REFERENCE_CALL b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <736:9 736:21>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <737:7 737:14>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <737:7 737:14>]
LOCAL_SYMBOL: b3Vector3.h<729:28> [b3Vector3.h <737:4 737:5>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <737:24 737:31>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <737:24 737:31>]
LOCAL_SYMBOL: b3Vector3.h<729:49> [b3Vector3.h <737:21 737:22>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <738:7 738:14>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <738:7 738:14>]
LOCAL_SYMBOL: b3Vector3.h<729:28> [b3Vector3.h <738:4 738:5>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <738:24 738:31>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <738:24 738:31>]
LOCAL_SYMBOL: b3Vector3.h<729:49> [b3Vector3.h <738:21 738:22>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <739:7 739:14>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <739:7 739:14>]
LOCAL_SYMBOL: b3Vector3.h<729:28> [b3Vector3.h <739:4 739:5>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <739:24 739:31>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <739:24 739:31>]
LOCAL_SYMBOL: b3Vector3.h<729:49> [b3Vector3.h <739:21 739:22>]
SYMBOL_FUNCTION b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <744:1 <745:1 745:9> 761:1>]
REFERENCE_TYPE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <744:17 744:25>]
LOCAL_SYMBOL: b3Vector3.h<745:28> [b3Vector3.h <745:28 745:29>]
REFERENCE_TYPE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <745:17 745:25>]
LOCAL_SYMBOL: b3Vector3.h<745:49> [b3Vector3.h <745:49 745:50>]
REFERENCE_TYPE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <745:38 745:46>]
LOCAL_SYMBOL: b3Vector3.h<746:1> [b3Vector3.h <746:1 746:1>]
LOCAL_SYMBOL: b3Vector3.h<746:1> [b3Vector3.h <761:1 761:1>]
REFERENCE_CALL b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <756:9 756:21>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <757:7 757:14>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <757:7 757:14>]
LOCAL_SYMBOL: b3Vector3.h<745:28> [b3Vector3.h <757:4 757:5>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <757:24 757:31>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <757:24 757:31>]
LOCAL_SYMBOL: b3Vector3.h<745:49> [b3Vector3.h <757:21 757:22>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <758:7 758:14>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <758:7 758:14>]
LOCAL_SYMBOL: b3Vector3.h<745:28> [b3Vector3.h <758:4 758:5>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <758:24 758:31>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <758:24 758:31>]
LOCAL_SYMBOL: b3Vector3.h<745:49> [b3Vector3.h <758:21 758:22>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <759:7 759:14>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <759:7 759:14>]
LOCAL_SYMBOL: b3Vector3.h<745:28> [b3Vector3.h <759:4 759:5>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <759:24 759:31>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <759:24 759:31>]
LOCAL_SYMBOL: b3Vector3.h<745:49> [b3Vector3.h <759:21 759:22>]
SYMBOL_FUNCTION b3Vector3 operator-(const b3Vector3 &) [b3Vector3.h <764:1 <765:1 765:9> 775:1>]
REFERENCE_TYPE_USAGE b3Vector3 operator-(const b3Vector3 &) -> b3Vector3 [b3Vector3.h <764:17 764:25>]
LOCAL_SYMBOL: b3Vector3.h<765:28> [b3Vector3.h <765:28 765:28>]
REFERENCE_TYPE_USAGE b3Vector3 operator-(const b3Vector3 &) -> b3Vector3 [b3Vector3.h <765:17 765:25>]
LOCAL_SYMBOL: b3Vector3.h<766:1> [b3Vector3.h <766:1 766:1>]
LOCAL_SYMBOL: b3Vector3.h<766:1> [b3Vector3.h <775:1 775:1>]
REFERENCE_CALL b3Vector3 operator-(const b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <773:9 773:21>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <773:26 773:33>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <773:26 773:33>]
LOCAL_SYMBOL: b3Vector3.h<765:28> [b3Vector3.h <773:24 773:24>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <773:42 773:49>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <773:42 773:49>]
LOCAL_SYMBOL: b3Vector3.h<765:28> [b3Vector3.h <773:40 773:40>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <773:58 773:65>]
REFERENCE_USAGE b3Vector3 operator-(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <773:58 773:65>]
LOCAL_SYMBOL: b3Vector3.h<765:28> [b3Vector3.h <773:56 773:56>]
SYMBOL_FUNCTION b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) [b3Vector3.h <778:1 <779:1 779:9> 791:1>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) -> b3Vector3 [b3Vector3.h <778:17 778:25>]
LOCAL_SYMBOL: b3Vector3.h<779:28> [b3Vector3.h <779:28 779:28>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) -> b3Vector3 [b3Vector3.h <779:17 779:25>]
LOCAL_SYMBOL: b3Vector3.h<779:47> [b3Vector3.h <779:47 779:47>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) -> b3Scalar [b3Vector3.h <779:37 779:44>]
LOCAL_SYMBOL: b3Vector3.h<780:1> [b3Vector3.h <780:1 780:1>]
LOCAL_SYMBOL: b3Vector3.h<780:1> [b3Vector3.h <791:1 791:1>]
REFERENCE_CALL b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <789:9 789:21>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <789:25 789:32>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <789:25 789:32>]
LOCAL_SYMBOL: b3Vector3.h<779:28> [b3Vector3.h <789:23 789:23>]
LOCAL_SYMBOL: b3Vector3.h<779:47> [b3Vector3.h <789:39 789:39>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <789:44 789:51>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <789:44 789:51>]
LOCAL_SYMBOL: b3Vector3.h<779:28> [b3Vector3.h <789:42 789:42>]
LOCAL_SYMBOL: b3Vector3.h<779:47> [b3Vector3.h <789:58 789:58>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <789:63 789:70>]
REFERENCE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <789:63 789:70>]
LOCAL_SYMBOL: b3Vector3.h<779:28> [b3Vector3.h <789:61 789:61>]
LOCAL_SYMBOL: b3Vector3.h<779:47> [b3Vector3.h <789:77 789:77>]
SYMBOL_FUNCTION b3Vector3 operator*(const b3Scalar &, const b3Vector3 &) [b3Vector3.h <794:1 <795:1 795:9> 798:1>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Scalar &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <794:17 794:25>]
LOCAL_SYMBOL: b3Vector3.h<795:27> [b3Vector3.h <795:27 795:27>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Scalar &, const b3Vector3 &) -> b3Scalar [b3Vector3.h <795:17 795:24>]
LOCAL_SYMBOL: b3Vector3.h<795:47> [b3Vector3.h <795:47 795:47>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Scalar &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <795:36 795:44>]
LOCAL_SYMBOL: b3Vector3.h<796:1> [b3Vector3.h <796:1 796:1>]
LOCAL_SYMBOL: b3Vector3.h<796:1> [b3Vector3.h <798:1 798:1>]
SYMBOL_FUNCTION b3Vector3 operator*(const b3Vector3 &, const b3Scalar &)
REFERENCE_CALL b3Vector3 operator*(const b3Scalar &, const b3Vector3 &) -> b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) [b3Vector3.h <797:11 797:11>]
LOCAL_SYMBOL: b3Vector3.h<795:47> [b3Vector3.h <797:9 797:9>]
LOCAL_SYMBOL: b3Vector3.h<795:27> [b3Vector3.h <797:13 797:13>]
SYMBOL_FUNCTION b3Vector3 operator/(const b3Vector3 &, const b3Scalar &) [b3Vector3.h <801:1 <802:1 802:9> 815:1>]
REFERENCE_TYPE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Scalar &) -> b3Vector3 [b3Vector3.h <801:17 801:25>]
LOCAL_SYMBOL: b3Vector3.h<802:28> [b3Vector3.h <802:28 802:28>]
REFERENCE_TYPE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Scalar &) -> b3Vector3 [b3Vector3.h <802:17 802:25>]
LOCAL_SYMBOL: b3Vector3.h<802:47> [b3Vector3.h <802:47 802:47>]
REFERENCE_TYPE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Scalar &) -> b3Scalar [b3Vector3.h <802:37 802:44>]
LOCAL_SYMBOL: b3Vector3.h<803:1> [b3Vector3.h <803:1 803:1>]
LOCAL_SYMBOL: b3Vector3.h<803:1> [b3Vector3.h <815:1 815:1>]
REFERENCE_CALL b3Vector3 operator/(const b3Vector3 &, const b3Scalar &) -> b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) [b3Vector3.h <813:11 813:11>]
LOCAL_SYMBOL: b3Vector3.h<802:28> [b3Vector3.h <813:9 813:9>]
REFERENCE_TYPE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Scalar &) -> b3Scalar [b3Vector3.h <813:14 813:21>]
LOCAL_SYMBOL: b3Vector3.h<802:47> [b3Vector3.h <813:30 813:30>]
SYMBOL_FUNCTION b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <818:1 <819:1 819:9> 845:1>]
REFERENCE_TYPE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <818:17 818:25>]
LOCAL_SYMBOL: b3Vector3.h<819:28> [b3Vector3.h <819:28 819:29>]
REFERENCE_TYPE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <819:17 819:25>]
LOCAL_SYMBOL: b3Vector3.h<819:49> [b3Vector3.h <819:49 819:50>]
REFERENCE_TYPE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <819:38 819:46>]
LOCAL_SYMBOL: b3Vector3.h<820:1> [b3Vector3.h <820:1 820:1>]
LOCAL_SYMBOL: b3Vector3.h<820:1> [b3Vector3.h <845:1 845:1>]
REFERENCE_CALL b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <840:9 840:21>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <841:7 841:14>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <841:7 841:14>]
LOCAL_SYMBOL: b3Vector3.h<819:28> [b3Vector3.h <841:4 841:5>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <841:24 841:31>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <841:24 841:31>]
LOCAL_SYMBOL: b3Vector3.h<819:49> [b3Vector3.h <841:21 841:22>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <842:7 842:14>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <842:7 842:14>]
LOCAL_SYMBOL: b3Vector3.h<819:28> [b3Vector3.h <842:4 842:5>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <842:24 842:31>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <842:24 842:31>]
LOCAL_SYMBOL: b3Vector3.h<819:49> [b3Vector3.h <842:21 842:22>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <843:7 843:14>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <843:7 843:14>]
LOCAL_SYMBOL: b3Vector3.h<819:28> [b3Vector3.h <843:4 843:5>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <843:24 843:31>]
REFERENCE_USAGE b3Vector3 operator/(const b3Vector3 &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <843:24 843:31>]
LOCAL_SYMBOL: b3Vector3.h<819:49> [b3Vector3.h <843:21 843:22>]
SYMBOL_FUNCTION b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <848:1 <849:1 849:5> 852:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) -> b3Scalar [b3Vector3.h <848:17 848:24>]
LOCAL_SYMBOL: b3Vector3.h<849:24> [b3Vector3.h <849:24 849:25>]
REFERENCE_TYPE_USAGE b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <849:13 849:21>]
LOCAL_SYMBOL: b3Vector3.h<849:45> [b3Vector3.h <849:45 849:46>]
REFERENCE_TYPE_USAGE b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <849:34 849:42>]
LOCAL_SYMBOL: b3Vector3.h<850:1> [b3Vector3.h <850:1 850:1>]
LOCAL_SYMBOL: b3Vector3.h<850:1> [b3Vector3.h <852:1 852:1>]
REFERENCE_CALL b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Vector3.h <851:12 851:14>]
LOCAL_SYMBOL: b3Vector3.h<849:24> [b3Vector3.h <851:9 851:10>]
LOCAL_SYMBOL: b3Vector3.h<849:45> [b3Vector3.h <851:16 851:17>]
SYMBOL_FUNCTION b3Scalar b3Distance2(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <856:1 <857:1 857:11> 860:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Distance2(const b3Vector3 &, const b3Vector3 &) -> b3Scalar [b3Vector3.h <856:17 856:24>]
LOCAL_SYMBOL: b3Vector3.h<857:30> [b3Vector3.h <857:30 857:31>]
REFERENCE_TYPE_USAGE b3Scalar b3Distance2(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <857:19 857:27>]
LOCAL_SYMBOL: b3Vector3.h<857:51> [b3Vector3.h <857:51 857:52>]
REFERENCE_TYPE_USAGE b3Scalar b3Distance2(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <857:40 857:48>]
LOCAL_SYMBOL: b3Vector3.h<858:1> [b3Vector3.h <858:1 858:1>]
LOCAL_SYMBOL: b3Vector3.h<858:1> [b3Vector3.h <860:1 860:1>]
SYMBOL_FUNCTION b3Scalar b3Vector3::distance2(const b3Vector3 &) const
REFERENCE_CALL b3Scalar b3Distance2(const b3Vector3 &, const b3Vector3 &) -> b3Scalar b3Vector3::distance2(const b3Vector3 &) const [b3Vector3.h <859:12 859:20>]
LOCAL_SYMBOL: b3Vector3.h<857:30> [b3Vector3.h <859:9 859:10>]
LOCAL_SYMBOL: b3Vector3.h<857:51> [b3Vector3.h <859:22 859:23>]
SYMBOL_FUNCTION b3Scalar b3Distance(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <864:1 <865:1 865:10> 868:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Distance(const b3Vector3 &, const b3Vector3 &) -> b3Scalar [b3Vector3.h <864:17 864:24>]
LOCAL_SYMBOL: b3Vector3.h<865:29> [b3Vector3.h <865:29 865:30>]
REFERENCE_TYPE_USAGE b3Scalar b3Distance(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <865:18 865:26>]
LOCAL_SYMBOL: b3Vector3.h<865:50> [b3Vector3.h <865:50 865:51>]
REFERENCE_TYPE_USAGE b3Scalar b3Distance(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <865:39 865:47>]
LOCAL_SYMBOL: b3Vector3.h<866:1> [b3Vector3.h <866:1 866:1>]
LOCAL_SYMBOL: b3Vector3.h<866:1> [b3Vector3.h <868:1 868:1>]
SYMBOL_FUNCTION b3Scalar b3Vector3::distance(const b3Vector3 &) const
REFERENCE_CALL b3Scalar b3Distance(const b3Vector3 &, const b3Vector3 &) -> b3Scalar b3Vector3::distance(const b3Vector3 &) const [b3Vector3.h <867:12 867:19>]
LOCAL_SYMBOL: b3Vector3.h<865:29> [b3Vector3.h <867:9 867:10>]
LOCAL_SYMBOL: b3Vector3.h<865:50> [b3Vector3.h <867:21 867:22>]
SYMBOL_FUNCTION b3Scalar b3Angle(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <871:1 <872:1 872:7> 875:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Angle(const b3Vector3 &, const b3Vector3 &) -> b3Scalar [b3Vector3.h <871:17 871:24>]
LOCAL_SYMBOL: b3Vector3.h<872:26> [b3Vector3.h <872:26 872:27>]
REFERENCE_TYPE_USAGE b3Scalar b3Angle(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <872:15 872:23>]
LOCAL_SYMBOL: b3Vector3.h<872:47> [b3Vector3.h <872:47 872:48>]
REFERENCE_TYPE_USAGE b3Scalar b3Angle(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <872:36 872:44>]
LOCAL_SYMBOL: b3Vector3.h<873:1> [b3Vector3.h <873:1 873:1>]
LOCAL_SYMBOL: b3Vector3.h<873:1> [b3Vector3.h <875:1 875:1>]
SYMBOL_FUNCTION b3Scalar b3Vector3::angle(const b3Vector3 &) const
REFERENCE_CALL b3Scalar b3Angle(const b3Vector3 &, const b3Vector3 &) -> b3Scalar b3Vector3::angle(const b3Vector3 &) const [b3Vector3.h <874:12 874:16>]
LOCAL_SYMBOL: b3Vector3.h<872:26> [b3Vector3.h <874:9 874:10>]
LOCAL_SYMBOL: b3Vector3.h<872:47> [b3Vector3.h <874:18 874:19>]
SYMBOL_FUNCTION b3Vector3 b3Cross(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <878:1 <879:1 879:7> 882:1>]
REFERENCE_TYPE_USAGE b3Vector3 b3Cross(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <878:17 878:25>]
LOCAL_SYMBOL: b3Vector3.h<879:26> [b3Vector3.h <879:26 879:27>]
REFERENCE_TYPE_USAGE b3Vector3 b3Cross(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <879:15 879:23>]
LOCAL_SYMBOL: b3Vector3.h<879:47> [b3Vector3.h <879:47 879:48>]
REFERENCE_TYPE_USAGE b3Vector3 b3Cross(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <879:36 879:44>]
LOCAL_SYMBOL: b3Vector3.h<880:1> [b3Vector3.h <880:1 880:1>]
LOCAL_SYMBOL: b3Vector3.h<880:1> [b3Vector3.h <882:1 882:1>]
SYMBOL_FUNCTION b3Vector3 b3Vector3::cross(const b3Vector3 &) const
REFERENCE_CALL b3Vector3 b3Cross(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 b3Vector3::cross(const b3Vector3 &) const [b3Vector3.h <881:12 881:16>]
LOCAL_SYMBOL: b3Vector3.h<879:26> [b3Vector3.h <881:9 881:10>]
LOCAL_SYMBOL: b3Vector3.h<879:47> [b3Vector3.h <881:18 881:19>]
SYMBOL_FUNCTION b3Scalar b3Triple(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <884:1 <885:1 885:8> 888:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Triple(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Scalar [b3Vector3.h <884:17 884:24>]
LOCAL_SYMBOL: b3Vector3.h<885:27> [b3Vector3.h <885:27 885:28>]
REFERENCE_TYPE_USAGE b3Scalar b3Triple(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <885:16 885:24>]
LOCAL_SYMBOL: b3Vector3.h<885:48> [b3Vector3.h <885:48 885:49>]
REFERENCE_TYPE_USAGE b3Scalar b3Triple(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <885:37 885:45>]
LOCAL_SYMBOL: b3Vector3.h<885:69> [b3Vector3.h <885:69 885:70>]
REFERENCE_TYPE_USAGE b3Scalar b3Triple(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Vector3.h <885:58 885:66>]
LOCAL_SYMBOL: b3Vector3.h<886:1> [b3Vector3.h <886:1 886:1>]
LOCAL_SYMBOL: b3Vector3.h<886:1> [b3Vector3.h <888:1 888:1>]
SYMBOL_FUNCTION b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const
REFERENCE_CALL b3Scalar b3Triple(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Scalar b3Vector3::triple(const b3Vector3 &, const b3Vector3 &) const [b3Vector3.h <887:12 887:17>]
LOCAL_SYMBOL: b3Vector3.h<885:27> [b3Vector3.h <887:9 887:10>]
LOCAL_SYMBOL: b3Vector3.h<885:48> [b3Vector3.h <887:19 887:20>]
LOCAL_SYMBOL: b3Vector3.h<885:69> [b3Vector3.h <887:23 887:24>]
SYMBOL_FUNCTION b3Vector3 b3Lerp(const b3Vector3 &, const b3Vector3 &, const b3Scalar &) [b3Vector3.h <894:1 <895:1 895:6> 898:1>]
REFERENCE_TYPE_USAGE b3Vector3 b3Lerp(const b3Vector3 &, const b3Vector3 &, const b3Scalar &) -> b3Vector3 [b3Vector3.h <894:17 894:25>]
LOCAL_SYMBOL: b3Vector3.h<895:25> [b3Vector3.h <895:25 895:26>]
REFERENCE_TYPE_USAGE b3Vector3 b3Lerp(const b3Vector3 &, const b3Vector3 &, const b3Scalar &) -> b3Vector3 [b3Vector3.h <895:14 895:22>]
LOCAL_SYMBOL: b3Vector3.h<895:46> [b3Vector3.h <895:46 895:47>]
REFERENCE_TYPE_USAGE b3Vector3 b3Lerp(const b3Vector3 &, const b3Vector3 &, const b3Scalar &) -> b3Vector3 [b3Vector3.h <895:35 895:43>]
LOCAL_SYMBOL: b3Vector3.h<895:66> [b3Vector3.h <895:66 895:66>]
REFERENCE_TYPE_USAGE b3Vector3 b3Lerp(const b3Vector3 &, const b3Vector3 &, const b3Scalar &) -> b3Scalar [b3Vector3.h <895:56 895:63>]
LOCAL_SYMBOL: b3Vector3.h<896:1> [b3Vector3.h <896:1 896:1>]
LOCAL_SYMBOL: b3Vector3.h<896:1> [b3Vector3.h <898:1 898:1>]
SYMBOL_FUNCTION b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const
REFERENCE_CALL b3Vector3 b3Lerp(const b3Vector3 &, const b3Vector3 &, const b3Scalar &) -> b3Vector3 b3Vector3::lerp(const b3Vector3 &, const b3Scalar &) const [b3Vector3.h <897:12 897:15>]
LOCAL_SYMBOL: b3Vector3.h<895:25> [b3Vector3.h <897:9 897:10>]
LOCAL_SYMBOL: b3Vector3.h<895:46> [b3Vector3.h <897:17 897:18>]
LOCAL_SYMBOL: b3Vector3.h<895:66> [b3Vector3.h <897:21 897:21>]
SYMBOL_METHOD public b3Scalar b3Vector3::distance2(const b3Vector3 &) const [b3Vector3.h <902:1 <902:37 902:45> 905:1>]
SYMBOL_CLASS b3Vector3
QUALIFIER: b3Vector3 [b3Vector3.h <902:26 902:34>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::distance2(const b3Vector3 &) const -> b3Scalar [b3Vector3.h <902:17 902:24>]
LOCAL_SYMBOL: b3Vector3.h<902:64> [b3Vector3.h <902:64 902:64>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::distance2(const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <902:53 902:61>]
LOCAL_SYMBOL: b3Vector3.h<903:1> [b3Vector3.h <903:1 903:1>]
LOCAL_SYMBOL: b3Vector3.h<903:1> [b3Vector3.h <905:1 905:1>]
REFERENCE_CALL b3Scalar b3Vector3::distance2(const b3Vector3 &) const -> b3Scalar b3Vector3::length2() const [b3Vector3.h <904:21 904:27>]
SYMBOL_FUNCTION b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL b3Scalar b3Vector3::distance2(const b3Vector3 &) const -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <904:12 904:12>]
LOCAL_SYMBOL: b3Vector3.h<902:64> [b3Vector3.h <904:10 904:10>]
SYMBOL_METHOD public b3Scalar b3Vector3::distance(const b3Vector3 &) const [b3Vector3.h <907:1 <907:37 907:44> 910:1>]
QUALIFIER: b3Vector3 [b3Vector3.h <907:26 907:34>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::distance(const b3Vector3 &) const -> b3Scalar [b3Vector3.h <907:17 907:24>]
LOCAL_SYMBOL: b3Vector3.h<907:63> [b3Vector3.h <907:63 907:63>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector3::distance(const b3Vector3 &) const -> b3Vector3 [b3Vector3.h <907:52 907:60>]
LOCAL_SYMBOL: b3Vector3.h<908:1> [b3Vector3.h <908:1 908:1>]
LOCAL_SYMBOL: b3Vector3.h<908:1> [b3Vector3.h <910:1 910:1>]
REFERENCE_CALL b3Scalar b3Vector3::distance(const b3Vector3 &) const -> b3Scalar b3Vector3::length() const [b3Vector3.h <909:21 909:26>]
REFERENCE_CALL b3Scalar b3Vector3::distance(const b3Vector3 &) const -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <909:12 909:12>]
LOCAL_SYMBOL: b3Vector3.h<907:63> [b3Vector3.h <909:10 909:10>]
SYMBOL_METHOD public b3Vector3 b3Vector3::normalized() const [b3Vector3.h <912:1 <912:38 912:47> 921:1>]
QUALIFIER: b3Vector3 [b3Vector3.h <912:27 912:35>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::normalized() const -> b3Vector3 [b3Vector3.h <912:17 912:25>]
LOCAL_SYMBOL: b3Vector3.h<913:1> [b3Vector3.h <913:1 913:1>]
LOCAL_SYMBOL: b3Vector3.h<913:1> [b3Vector3.h <921:1 921:1>]
SYMBOL_FUNCTION b3Vector3 operator/(const b3Vector3 &, const b3Scalar &)
REFERENCE_CALL b3Vector3 b3Vector3::normalized() const -> b3Vector3 operator/(const b3Vector3 &, const b3Scalar &) [b3Vector3.h <919:15 919:15>]
REFERENCE_CALL b3Vector3 b3Vector3::normalized() const -> b3Scalar b3Vector3::length() const [b3Vector3.h <919:17 919:22>]
SYMBOL_METHOD public b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const [b3Vector3.h <923:1 <923:38 923:43> 963:1>]
QUALIFIER: b3Vector3 [b3Vector3.h <923:27 923:35>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 [b3Vector3.h <923:17 923:25>]
LOCAL_SYMBOL: b3Vector3.h<923:63> [b3Vector3.h <923:63 923:67>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 [b3Vector3.h <923:52 923:60>]
LOCAL_SYMBOL: b3Vector3.h<923:85> [b3Vector3.h <923:85 923:90>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Scalar [b3Vector3.h <923:76 923:83>]
LOCAL_SYMBOL: b3Vector3.h<924:1> [b3Vector3.h <924:1 924:1>]
LOCAL_SYMBOL: b3Vector3.h<924:1> [b3Vector3.h <963:1 963:1>]
LOCAL_SYMBOL: b3Vector3.h<955:12> [b3Vector3.h <955:12 955:12>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 [b3Vector3.h <955:2 955:10>]
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) [b3Vector3.h <955:22 955:22>]
LOCAL_SYMBOL: b3Vector3.h<923:63> [b3Vector3.h <955:16 955:20>]
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Vector3.h <955:30 955:32>]
LOCAL_SYMBOL: b3Vector3.h<923:63> [b3Vector3.h <955:24 955:28>]
LOCAL_SYMBOL: b3Vector3.h<956:12> [b3Vector3.h <956:12 956:13>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 [b3Vector3.h <956:2 956:10>]
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <956:23 956:23>]
LOCAL_SYMBOL: b3Vector3.h<955:12> [b3Vector3.h <956:25 956:25>]
LOCAL_SYMBOL: b3Vector3.h<957:12> [b3Vector3.h <957:12 957:13>]
REFERENCE_TYPE_USAGE b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 [b3Vector3.h <957:2 957:10>]
SYMBOL_FUNCTION void b3Vector3::b3Vector3()
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> void b3Vector3::b3Vector3() [b3Vector3.h <957:12 957:13>]
SYMBOL_FUNCTION b3Vector3 & b3Vector3::operator=(b3Vector3 &&)
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3Vector3.h <959:5 959:5>]
LOCAL_SYMBOL: b3Vector3.h<957:12> [b3Vector3.h <959:2 959:3>]
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 b3Vector3::cross(const b3Vector3 &) const [b3Vector3.h <959:13 959:17>]
LOCAL_SYMBOL: b3Vector3.h<923:63> [b3Vector3.h <959:7 959:11>]
SYMBOL_FUNCTION b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <961:36 961:36>]
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3Vector3.h <961:13 961:13>]
LOCAL_SYMBOL: b3Vector3.h<955:12> [b3Vector3.h <961:11 961:11>]
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) [b3Vector3.h <961:18 961:18>]
LOCAL_SYMBOL: b3Vector3.h<956:12> [b3Vector3.h <961:15 961:16>]
SYMBOL_FUNCTION b3Scalar b3Cos(b3Scalar)
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Scalar b3Cos(b3Scalar) [b3Vector3.h <961:20 961:24>]
LOCAL_SYMBOL: b3Vector3.h<923:85> [b3Vector3.h <961:27 961:32>]
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) [b3Vector3.h <961:41 961:41>]
LOCAL_SYMBOL: b3Vector3.h<957:12> [b3Vector3.h <961:38 961:39>]
SYMBOL_FUNCTION b3Scalar b3Sin(b3Scalar)
REFERENCE_CALL b3Vector3 b3Vector3::rotate(const b3Vector3 &, const b3Scalar) const -> b3Scalar b3Sin(b3Scalar) [b3Vector3.h <961:43 961:47>]
LOCAL_SYMBOL: b3Vector3.h<923:85> [b3Vector3.h <961:50 961:55>]
SYMBOL_METHOD public long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const [b3Vector3.h <965:1 <965:38 965:43> 1005:1>]
QUALIFIER: b3Vector3 [b3Vector3.h <965:27 965:35>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> long [b3Vector3.h <965:19 965:22>]
LOCAL_SYMBOL: b3Vector3.h<965:63> [b3Vector3.h <965:63 965:67>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> b3Vector3 [b3Vector3.h <965:52 965:60>]
LOCAL_SYMBOL: b3Vector3.h<965:75> [b3Vector3.h <965:75 965:85>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> long [b3Vector3.h <965:70 965:73>]
LOCAL_SYMBOL: b3Vector3.h<965:98> [b3Vector3.h <965:98 965:103>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> b3Scalar [b3Vector3.h <965:88 965:95>]
LOCAL_SYMBOL: b3Vector3.h<966:1> [b3Vector3.h <966:1 966:1>]
LOCAL_SYMBOL: b3Vector3.h<966:1> [b3Vector3.h <1005:1 1005:1>]
LOCAL_SYMBOL: b3Vector3.h<969:20> [b3Vector3.h <969:20 969:32>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> long [b3Vector3.h <969:15 969:18>]
SYMBOL_FUNCTION long b3_maxdot_large(const float *, const float *, unsigned long, float *) [b3Vector3.h <970:14 970:28>]
REFERENCE_TYPE_USAGE long b3_maxdot_large(const float *, const float *, unsigned long, float *) -> long [b3Vector3.h <970:9 970:12>]
LOCAL_SYMBOL: b3Vector3.h<970:44> [b3Vector3.h <970:44 970:48>]
REFERENCE_TYPE_USAGE long b3_maxdot_large(const float *, const float *, unsigned long, float *) -> float [b3Vector3.h <970:37 970:41>]
LOCAL_SYMBOL: b3Vector3.h<970:64> [b3Vector3.h <970:64 970:66>]
REFERENCE_TYPE_USAGE long b3_maxdot_large(const float *, const float *, unsigned long, float *) -> float [b3Vector3.h <970:57 970:61>]
LOCAL_SYMBOL: b3Vector3.h<970:83> [b3Vector3.h <970:83 970:93>]
SYMBOL_BUILTIN_TYPE unsigned long
REFERENCE_TYPE_USAGE long b3_maxdot_large(const float *, const float *, unsigned long, float *) -> unsigned long [b3Vector3.h <970:69 970:76>]
LOCAL_SYMBOL: b3Vector3.h<970:103> [b3Vector3.h <970:103 970:108>]
REFERENCE_TYPE_USAGE long b3_maxdot_large(const float *, const float *, unsigned long, float *) -> float [b3Vector3.h <970:96 970:100>]
LOCAL_SYMBOL: b3Vector3.h<965:75> [b3Vector3.h <975:9 975:19>]
LOCAL_SYMBOL: b3Vector3.h<969:20> [b3Vector3.h <975:23 975:35>]
LOCAL_SYMBOL: b3Vector3.h<979:5> [b3Vector3.h <979:5 979:5>]
LOCAL_SYMBOL: b3Vector3.h<979:5> [b3Vector3.h <1001:5 1001:5>]
LOCAL_SYMBOL: b3Vector3.h<980:18> [b3Vector3.h <980:18 980:23>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> b3Scalar [b3Vector3.h <980:9 980:16>]
LOCAL_SYMBOL: b3Vector3.h<981:13> [b3Vector3.h <981:13 981:13>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> int [b3Vector3.h <981:9 981:11>]
LOCAL_SYMBOL: b3Vector3.h<982:13> [b3Vector3.h <982:13 982:19>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> int [b3Vector3.h <982:9 982:11>]
LOCAL_SYMBOL: b3Vector3.h<981:13> [b3Vector3.h <983:14 983:14>]
LOCAL_SYMBOL: b3Vector3.h<981:13> [b3Vector3.h <983:21 983:21>]
LOCAL_SYMBOL: b3Vector3.h<965:75> [b3Vector3.h <983:25 983:35>]
LOCAL_SYMBOL: b3Vector3.h<981:13> [b3Vector3.h <983:38 983:38>]
LOCAL_SYMBOL: b3Vector3.h<984:9> [b3Vector3.h <984:9 984:9>]
LOCAL_SYMBOL: b3Vector3.h<984:9> [b3Vector3.h <992:9 992:9>]
LOCAL_SYMBOL: b3Vector3.h<985:22> [b3Vector3.h <985:22 985:24>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> b3Scalar [b3Vector3.h <985:13 985:20>]
REFERENCE_CALL long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Vector3.h <985:37 985:39>]
LOCAL_SYMBOL: b3Vector3.h<965:63> [b3Vector3.h <985:28 985:32>]
LOCAL_SYMBOL: b3Vector3.h<981:13> [b3Vector3.h <985:34 985:34>]
LOCAL_SYMBOL: b3Vector3.h<985:22> [b3Vector3.h <987:17 987:19>]
LOCAL_SYMBOL: b3Vector3.h<980:18> [b3Vector3.h <987:23 987:28>]
LOCAL_SYMBOL: b3Vector3.h<988:13> [b3Vector3.h <988:13 988:13>]
LOCAL_SYMBOL: b3Vector3.h<988:13> [b3Vector3.h <991:13 991:13>]
LOCAL_SYMBOL: b3Vector3.h<980:18> [b3Vector3.h <989:17 989:22>]
LOCAL_SYMBOL: b3Vector3.h<985:22> [b3Vector3.h <989:26 989:28>]
LOCAL_SYMBOL: b3Vector3.h<982:13> [b3Vector3.h <990:17 990:23>]
LOCAL_SYMBOL: b3Vector3.h<981:13> [b3Vector3.h <990:27 990:27>]
LOCAL_SYMBOL: b3Vector3.h<982:13> [b3Vector3.h <995:13 995:19>]
LOCAL_SYMBOL: b3Vector3.h<996:3> [b3Vector3.h <996:3 996:3>]
LOCAL_SYMBOL: b3Vector3.h<996:3> [b3Vector3.h <998:3 998:3>]
LOCAL_SYMBOL: b3Vector3.h<982:13> [b3Vector3.h <997:4 997:10>]
LOCAL_SYMBOL: b3Vector3.h<965:98> [b3Vector3.h <999:9 999:14>]
LOCAL_SYMBOL: b3Vector3.h<980:18> [b3Vector3.h <999:18 999:23>]
LOCAL_SYMBOL: b3Vector3.h<982:13> [b3Vector3.h <1000:16 1000:22>]
SYMBOL_FUNCTION long b3_maxdot_large(const float *, const float *, unsigned long, float *)
REFERENCE_CALL long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> long b3_maxdot_large(const float *, const float *, unsigned long, float *) [b3Vector3.h <1003:12 1003:26>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> float [b3Vector3.h <1003:30 1003:34>]
LOCAL_SYMBOL: b3Vector3.h<965:63> [b3Vector3.h <1003:38 1003:42>]
REFERENCE_TYPE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> float [b3Vector3.h <1003:46 1003:50>]
REFERENCE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1003:55 1003:62>]
REFERENCE_USAGE long b3Vector3::maxDot(const b3Vector3 *, long, b3Scalar &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1003:55 1003:62>]
LOCAL_SYMBOL: b3Vector3.h<965:75> [b3Vector3.h <1003:68 1003:78>]
LOCAL_SYMBOL: b3Vector3.h<965:98> [b3Vector3.h <1003:82 1003:87>]
SYMBOL_METHOD public long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const [b3Vector3.h <1007:1 <1007:38 1007:43> 1045:1>]
QUALIFIER: b3Vector3 [b3Vector3.h <1007:27 1007:35>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> long [b3Vector3.h <1007:19 1007:22>]
LOCAL_SYMBOL: b3Vector3.h<1007:63> [b3Vector3.h <1007:63 1007:67>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> b3Vector3 [b3Vector3.h <1007:52 1007:60>]
LOCAL_SYMBOL: b3Vector3.h<1007:75> [b3Vector3.h <1007:75 1007:85>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> long [b3Vector3.h <1007:70 1007:73>]
LOCAL_SYMBOL: b3Vector3.h<1007:98> [b3Vector3.h <1007:98 1007:103>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> b3Scalar [b3Vector3.h <1007:88 1007:95>]
LOCAL_SYMBOL: b3Vector3.h<1008:1> [b3Vector3.h <1008:1 1008:1>]
LOCAL_SYMBOL: b3Vector3.h<1008:1> [b3Vector3.h <1045:1 1045:1>]
LOCAL_SYMBOL: b3Vector3.h<1011:20> [b3Vector3.h <1011:20 1011:32>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> long [b3Vector3.h <1011:15 1011:18>]
SYMBOL_FUNCTION long b3_mindot_large(const float *, const float *, unsigned long, float *) [b3Vector3.h <1012:14 1012:28>]
REFERENCE_TYPE_USAGE long b3_mindot_large(const float *, const float *, unsigned long, float *) -> long [b3Vector3.h <1012:9 1012:12>]
LOCAL_SYMBOL: b3Vector3.h<1012:44> [b3Vector3.h <1012:44 1012:48>]
REFERENCE_TYPE_USAGE long b3_mindot_large(const float *, const float *, unsigned long, float *) -> float [b3Vector3.h <1012:37 1012:41>]
LOCAL_SYMBOL: b3Vector3.h<1012:64> [b3Vector3.h <1012:64 1012:66>]
REFERENCE_TYPE_USAGE long b3_mindot_large(const float *, const float *, unsigned long, float *) -> float [b3Vector3.h <1012:57 1012:61>]
LOCAL_SYMBOL: b3Vector3.h<1012:83> [b3Vector3.h <1012:83 1012:93>]
REFERENCE_TYPE_USAGE long b3_mindot_large(const float *, const float *, unsigned long, float *) -> unsigned long [b3Vector3.h <1012:69 1012:76>]
LOCAL_SYMBOL: b3Vector3.h<1012:103> [b3Vector3.h <1012:103 1012:108>]
REFERENCE_TYPE_USAGE long b3_mindot_large(const float *, const float *, unsigned long, float *) -> float [b3Vector3.h <1012:96 1012:100>]
LOCAL_SYMBOL: b3Vector3.h<1007:75> [b3Vector3.h <1020:9 1020:19>]
LOCAL_SYMBOL: b3Vector3.h<1011:20> [b3Vector3.h <1020:23 1020:35>]
LOCAL_SYMBOL: b3Vector3.h<1022:5> [b3Vector3.h <1022:5 1022:5>]
LOCAL_SYMBOL: b3Vector3.h<1022:5> [b3Vector3.h <1041:5 1041:5>]
LOCAL_SYMBOL: b3Vector3.h<1023:19> [b3Vector3.h <1023:19 1023:24>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> b3Scalar [b3Vector3.h <1023:9 1023:16>]
LOCAL_SYMBOL: b3Vector3.h<1024:13> [b3Vector3.h <1024:13 1024:13>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> int [b3Vector3.h <1024:9 1024:11>]
LOCAL_SYMBOL: b3Vector3.h<1025:13> [b3Vector3.h <1025:13 1025:19>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> int [b3Vector3.h <1025:9 1025:11>]
LOCAL_SYMBOL: b3Vector3.h<1024:13> [b3Vector3.h <1027:14 1027:14>]
LOCAL_SYMBOL: b3Vector3.h<1024:13> [b3Vector3.h <1027:21 1027:21>]
LOCAL_SYMBOL: b3Vector3.h<1007:75> [b3Vector3.h <1027:25 1027:35>]
LOCAL_SYMBOL: b3Vector3.h<1024:13> [b3Vector3.h <1027:38 1027:38>]
LOCAL_SYMBOL: b3Vector3.h<1028:9> [b3Vector3.h <1028:9 1028:9>]
LOCAL_SYMBOL: b3Vector3.h<1028:9> [b3Vector3.h <1036:9 1036:9>]
LOCAL_SYMBOL: b3Vector3.h<1029:22> [b3Vector3.h <1029:22 1029:24>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> b3Scalar [b3Vector3.h <1029:13 1029:20>]
REFERENCE_CALL long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Vector3.h <1029:37 1029:39>]
LOCAL_SYMBOL: b3Vector3.h<1007:63> [b3Vector3.h <1029:28 1029:32>]
LOCAL_SYMBOL: b3Vector3.h<1024:13> [b3Vector3.h <1029:34 1029:34>]
LOCAL_SYMBOL: b3Vector3.h<1029:22> [b3Vector3.h <1031:17 1031:19>]
LOCAL_SYMBOL: b3Vector3.h<1023:19> [b3Vector3.h <1031:23 1031:28>]
LOCAL_SYMBOL: b3Vector3.h<1032:13> [b3Vector3.h <1032:13 1032:13>]
LOCAL_SYMBOL: b3Vector3.h<1032:13> [b3Vector3.h <1035:13 1035:13>]
LOCAL_SYMBOL: b3Vector3.h<1023:19> [b3Vector3.h <1033:17 1033:22>]
LOCAL_SYMBOL: b3Vector3.h<1029:22> [b3Vector3.h <1033:26 1033:28>]
LOCAL_SYMBOL: b3Vector3.h<1025:13> [b3Vector3.h <1034:17 1034:23>]
LOCAL_SYMBOL: b3Vector3.h<1024:13> [b3Vector3.h <1034:27 1034:27>]
LOCAL_SYMBOL: b3Vector3.h<1007:98> [b3Vector3.h <1038:9 1038:14>]
LOCAL_SYMBOL: b3Vector3.h<1023:19> [b3Vector3.h <1038:18 1038:23>]
LOCAL_SYMBOL: b3Vector3.h<1025:13> [b3Vector3.h <1040:16 1040:22>]
SYMBOL_FUNCTION long b3_mindot_large(const float *, const float *, unsigned long, float *)
REFERENCE_CALL long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> long b3_mindot_large(const float *, const float *, unsigned long, float *) [b3Vector3.h <1043:12 1043:26>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> float [b3Vector3.h <1043:30 1043:34>]
LOCAL_SYMBOL: b3Vector3.h<1007:63> [b3Vector3.h <1043:38 1043:42>]
REFERENCE_TYPE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> float [b3Vector3.h <1043:46 1043:50>]
REFERENCE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1043:55 1043:62>]
REFERENCE_USAGE long b3Vector3::minDot(const b3Vector3 *, long, b3Scalar &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1043:55 1043:62>]
LOCAL_SYMBOL: b3Vector3.h<1007:75> [b3Vector3.h <1043:68 1043:78>]
LOCAL_SYMBOL: b3Vector3.h<1007:98> [b3Vector3.h <1043:82 1043:87>]
SYMBOL_CLASS b3Vector4 [b3Vector3.h <1048:1 <1048:7 1048:15> 1171:1>]
LOCAL_SYMBOL: b3Vector3.h<1049:1> [b3Vector3.h <1049:1 1049:1>]
LOCAL_SYMBOL: b3Vector3.h<1049:1> [b3Vector3.h <1171:1 1171:1>]
REFERENCE_INHERITANCE b3Vector4 -> b3Vector3 [b3Vector3.h <1048:26 1048:34>]
SYMBOL_METHOD public b3Vector4 b3Vector4::absolute4() const [b3Vector3.h <1057:2 <1057:28 1057:36> 1070:2>]
REFERENCE_TYPE_USAGE b3Vector4 b3Vector4::absolute4() const -> b3Vector4 [b3Vector3.h <1057:18 1057:26>]
LOCAL_SYMBOL: b3Vector3.h<1058:2> [b3Vector3.h <1058:2 1058:2>]
LOCAL_SYMBOL: b3Vector3.h<1058:2> [b3Vector3.h <1070:2 1070:2>]
SYMBOL_FUNCTION b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar)
REFERENCE_CALL b3Vector4 b3Vector4::absolute4() const -> b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <1064:10 1064:22>]
REFERENCE_CALL b3Vector4 b3Vector4::absolute4() const -> b3Scalar b3Fabs(b3Scalar) [b3Vector3.h <1065:4 1065:9>]
REFERENCE_USAGE b3Vector4 b3Vector4::absolute4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1065:11 1065:18>]
REFERENCE_USAGE b3Vector4 b3Vector4::absolute4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1065:11 1065:18>]
REFERENCE_CALL b3Vector4 b3Vector4::absolute4() const -> b3Scalar b3Fabs(b3Scalar) [b3Vector3.h <1066:4 1066:9>]
REFERENCE_USAGE b3Vector4 b3Vector4::absolute4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1066:11 1066:18>]
REFERENCE_USAGE b3Vector4 b3Vector4::absolute4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1066:11 1066:18>]
REFERENCE_CALL b3Vector4 b3Vector4::absolute4() const -> b3Scalar b3Fabs(b3Scalar) [b3Vector3.h <1067:4 1067:9>]
REFERENCE_USAGE b3Vector4 b3Vector4::absolute4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1067:11 1067:18>]
REFERENCE_USAGE b3Vector4 b3Vector4::absolute4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1067:11 1067:18>]
REFERENCE_CALL b3Vector4 b3Vector4::absolute4() const -> b3Scalar b3Fabs(b3Scalar) [b3Vector3.h <1068:4 1068:9>]
REFERENCE_USAGE b3Vector4 b3Vector4::absolute4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1068:11 1068:18>]
REFERENCE_USAGE b3Vector4 b3Vector4::absolute4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1068:11 1068:18>]
SYMBOL_METHOD public b3Scalar b3Vector4::getW() const [b3Vector3.h <1073:2 <1073:11 1073:14> 1073:45>]
REFERENCE_TYPE_USAGE b3Scalar b3Vector4::getW() const -> b3Scalar [b3Vector3.h <1073:2 1073:9>]
LOCAL_SYMBOL: b3Vector3.h<1073:24> [b3Vector3.h <1073:24 1073:24>]
LOCAL_SYMBOL: b3Vector3.h<1073:24> [b3Vector3.h <1073:45 1073:45>]
REFERENCE_USAGE b3Scalar b3Vector4::getW() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1073:33 1073:40>]
REFERENCE_USAGE b3Scalar b3Vector4::getW() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1073:33 1073:40>]
SYMBOL_METHOD public int b3Vector4::maxAxis4() const [b3Vector3.h <1076:3 <1076:23 1076:30> 1102:2>]
REFERENCE_TYPE_USAGE int b3Vector4::maxAxis4() const -> int [b3Vector3.h <1076:19 1076:21>]
LOCAL_SYMBOL: b3Vector3.h<1077:2> [b3Vector3.h <1077:2 1077:2>]
LOCAL_SYMBOL: b3Vector3.h<1077:2> [b3Vector3.h <1102:2 1102:2>]
LOCAL_SYMBOL: b3Vector3.h<1078:7> [b3Vector3.h <1078:7 1078:14>]
REFERENCE_TYPE_USAGE int b3Vector4::maxAxis4() const -> int [b3Vector3.h <1078:3 1078:5>]
LOCAL_SYMBOL: b3Vector3.h<1079:12> [b3Vector3.h <1079:12 1079:17>]
REFERENCE_TYPE_USAGE int b3Vector4::maxAxis4() const -> b3Scalar [b3Vector3.h <1079:3 1079:10>]
REFERENCE_TYPE_USAGE int b3Vector4::maxAxis4() const -> b3Scalar [b3Vector3.h <1079:21 1079:28>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1080:7 1080:14>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1080:7 1080:14>]
LOCAL_SYMBOL: b3Vector3.h<1079:12> [b3Vector3.h <1080:21 1080:26>]
LOCAL_SYMBOL: b3Vector3.h<1081:3> [b3Vector3.h <1081:3 1081:3>]
LOCAL_SYMBOL: b3Vector3.h<1081:3> [b3Vector3.h <1084:3 1084:3>]
LOCAL_SYMBOL: b3Vector3.h<1078:7> [b3Vector3.h <1082:4 1082:11>]
LOCAL_SYMBOL: b3Vector3.h<1079:12> [b3Vector3.h <1083:4 1083:9>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1083:13 1083:20>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1083:13 1083:20>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1085:7 1085:14>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1085:7 1085:14>]
LOCAL_SYMBOL: b3Vector3.h<1079:12> [b3Vector3.h <1085:21 1085:26>]
LOCAL_SYMBOL: b3Vector3.h<1086:3> [b3Vector3.h <1086:3 1086:3>]
LOCAL_SYMBOL: b3Vector3.h<1086:3> [b3Vector3.h <1089:3 1089:3>]
LOCAL_SYMBOL: b3Vector3.h<1078:7> [b3Vector3.h <1087:4 1087:11>]
LOCAL_SYMBOL: b3Vector3.h<1079:12> [b3Vector3.h <1088:4 1088:9>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1088:13 1088:20>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1088:13 1088:20>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1090:7 1090:14>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1090:7 1090:14>]
LOCAL_SYMBOL: b3Vector3.h<1079:12> [b3Vector3.h <1090:21 1090:26>]
LOCAL_SYMBOL: b3Vector3.h<1091:3> [b3Vector3.h <1091:3 1091:3>]
LOCAL_SYMBOL: b3Vector3.h<1091:3> [b3Vector3.h <1094:3 1094:3>]
LOCAL_SYMBOL: b3Vector3.h<1078:7> [b3Vector3.h <1092:4 1092:11>]
LOCAL_SYMBOL: b3Vector3.h<1079:12> [b3Vector3.h <1093:4 1093:9>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1093:12 1093:19>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1093:12 1093:19>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1095:7 1095:14>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1095:7 1095:14>]
LOCAL_SYMBOL: b3Vector3.h<1079:12> [b3Vector3.h <1095:21 1095:26>]
LOCAL_SYMBOL: b3Vector3.h<1096:3> [b3Vector3.h <1096:3 1096:3>]
LOCAL_SYMBOL: b3Vector3.h<1096:3> [b3Vector3.h <1099:3 1099:3>]
LOCAL_SYMBOL: b3Vector3.h<1078:7> [b3Vector3.h <1097:4 1097:11>]
LOCAL_SYMBOL: b3Vector3.h<1079:12> [b3Vector3.h <1098:4 1098:9>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1098:13 1098:20>]
REFERENCE_USAGE int b3Vector4::maxAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1098:13 1098:20>]
LOCAL_SYMBOL: b3Vector3.h<1078:7> [b3Vector3.h <1101:10 1101:17>]
SYMBOL_METHOD public int b3Vector4::minAxis4() const [b3Vector3.h <1105:2 <1105:22 1105:29> 1131:2>]
REFERENCE_TYPE_USAGE int b3Vector4::minAxis4() const -> int [b3Vector3.h <1105:18 1105:20>]
LOCAL_SYMBOL: b3Vector3.h<1106:2> [b3Vector3.h <1106:2 1106:2>]
LOCAL_SYMBOL: b3Vector3.h<1106:2> [b3Vector3.h <1131:2 1131:2>]
LOCAL_SYMBOL: b3Vector3.h<1107:7> [b3Vector3.h <1107:7 1107:14>]
REFERENCE_TYPE_USAGE int b3Vector4::minAxis4() const -> int [b3Vector3.h <1107:3 1107:5>]
LOCAL_SYMBOL: b3Vector3.h<1108:12> [b3Vector3.h <1108:12 1108:17>]
REFERENCE_TYPE_USAGE int b3Vector4::minAxis4() const -> b3Scalar [b3Vector3.h <1108:3 1108:10>]
REFERENCE_TYPE_USAGE int b3Vector4::minAxis4() const -> b3Scalar [b3Vector3.h <1108:21 1108:28>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1109:7 1109:14>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1109:7 1109:14>]
LOCAL_SYMBOL: b3Vector3.h<1108:12> [b3Vector3.h <1109:21 1109:26>]
LOCAL_SYMBOL: b3Vector3.h<1110:3> [b3Vector3.h <1110:3 1110:3>]
LOCAL_SYMBOL: b3Vector3.h<1110:3> [b3Vector3.h <1113:3 1113:3>]
LOCAL_SYMBOL: b3Vector3.h<1107:7> [b3Vector3.h <1111:4 1111:11>]
LOCAL_SYMBOL: b3Vector3.h<1108:12> [b3Vector3.h <1112:4 1112:9>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1112:13 1112:20>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1112:13 1112:20>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1114:7 1114:14>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1114:7 1114:14>]
LOCAL_SYMBOL: b3Vector3.h<1108:12> [b3Vector3.h <1114:21 1114:26>]
LOCAL_SYMBOL: b3Vector3.h<1115:3> [b3Vector3.h <1115:3 1115:3>]
LOCAL_SYMBOL: b3Vector3.h<1115:3> [b3Vector3.h <1118:3 1118:3>]
LOCAL_SYMBOL: b3Vector3.h<1107:7> [b3Vector3.h <1116:4 1116:11>]
LOCAL_SYMBOL: b3Vector3.h<1108:12> [b3Vector3.h <1117:4 1117:9>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1117:13 1117:20>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1117:13 1117:20>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1119:7 1119:14>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1119:7 1119:14>]
LOCAL_SYMBOL: b3Vector3.h<1108:12> [b3Vector3.h <1119:21 1119:26>]
LOCAL_SYMBOL: b3Vector3.h<1120:3> [b3Vector3.h <1120:3 1120:3>]
LOCAL_SYMBOL: b3Vector3.h<1120:3> [b3Vector3.h <1123:3 1123:3>]
LOCAL_SYMBOL: b3Vector3.h<1107:7> [b3Vector3.h <1121:4 1121:11>]
LOCAL_SYMBOL: b3Vector3.h<1108:12> [b3Vector3.h <1122:4 1122:9>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1122:12 1122:19>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1122:12 1122:19>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1124:7 1124:14>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1124:7 1124:14>]
LOCAL_SYMBOL: b3Vector3.h<1108:12> [b3Vector3.h <1124:21 1124:26>]
LOCAL_SYMBOL: b3Vector3.h<1125:3> [b3Vector3.h <1125:3 1125:3>]
LOCAL_SYMBOL: b3Vector3.h<1125:3> [b3Vector3.h <1128:3 1128:3>]
LOCAL_SYMBOL: b3Vector3.h<1107:7> [b3Vector3.h <1126:4 1126:11>]
LOCAL_SYMBOL: b3Vector3.h<1108:12> [b3Vector3.h <1127:4 1127:9>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1127:13 1127:20>]
REFERENCE_USAGE int b3Vector4::minAxis4() const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1127:13 1127:20>]
LOCAL_SYMBOL: b3Vector3.h<1107:7> [b3Vector3.h <1130:10 1130:17>]
SYMBOL_METHOD public int b3Vector4::closestAxis4() const [b3Vector3.h <1134:2 <1134:22 1134:33> 1137:2>]
REFERENCE_TYPE_USAGE int b3Vector4::closestAxis4() const -> int [b3Vector3.h <1134:18 1134:20>]
LOCAL_SYMBOL: b3Vector3.h<1135:2> [b3Vector3.h <1135:2 1135:2>]
LOCAL_SYMBOL: b3Vector3.h<1135:2> [b3Vector3.h <1137:2 1137:2>]
SYMBOL_FUNCTION int b3Vector4::maxAxis4() const
REFERENCE_CALL int b3Vector4::closestAxis4() const -> int b3Vector4::maxAxis4() const [b3Vector3.h <1136:22 1136:29>]
SYMBOL_FUNCTION b3Vector4 b3Vector4::absolute4() const
REFERENCE_CALL int b3Vector4::closestAxis4() const -> b3Vector4 b3Vector4::absolute4() const [b3Vector3.h <1136:10 1136:18>]
SYMBOL_METHOD public void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Vector3.h <1162:3 <1162:24 1162:31> 1168:3>]
REFERENCE_TYPE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void [b3Vector3.h <1162:19 1162:22>]
LOCAL_SYMBOL: b3Vector3.h<1162:49> [b3Vector3.h <1162:49 1162:50>]
REFERENCE_TYPE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Vector3.h <1162:39 1162:46>]
LOCAL_SYMBOL: b3Vector3.h<1162:69> [b3Vector3.h <1162:69 1162:70>]
REFERENCE_TYPE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Vector3.h <1162:59 1162:66>]
LOCAL_SYMBOL: b3Vector3.h<1162:89> [b3Vector3.h <1162:89 1162:90>]
REFERENCE_TYPE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Vector3.h <1162:79 1162:86>]
LOCAL_SYMBOL: b3Vector3.h<1162:108> [b3Vector3.h <1162:108 1162:109>]
REFERENCE_TYPE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Vector3.h <1162:98 1162:105>]
LOCAL_SYMBOL: b3Vector3.h<1163:3> [b3Vector3.h <1163:3 1163:3>]
LOCAL_SYMBOL: b3Vector3.h<1163:3> [b3Vector3.h <1168:3 1168:3>]
REFERENCE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1164:4 1164:11>]
REFERENCE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1164:4 1164:11>]
LOCAL_SYMBOL: b3Vector3.h<1162:49> [b3Vector3.h <1164:16 1164:17>]
REFERENCE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1165:4 1165:11>]
REFERENCE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1165:4 1165:11>]
LOCAL_SYMBOL: b3Vector3.h<1162:69> [b3Vector3.h <1165:16 1165:17>]
REFERENCE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1166:4 1166:11>]
REFERENCE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1166:4 1166:11>]
LOCAL_SYMBOL: b3Vector3.h<1162:89> [b3Vector3.h <1166:16 1166:17>]
REFERENCE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1167:4 1167:11>]
REFERENCE_USAGE void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1167:4 1167:11>]
LOCAL_SYMBOL: b3Vector3.h<1162:108> [b3Vector3.h <1167:16 1167:17>]
SYMBOL_METHOD public void b3Vector4::~b3Vector4() [b3Vector3.h <1048:7 1048:15>]
SYMBOL_METHOD public void b3Vector4::b3Vector4() [b3Vector3.h <1048:7 <1048:7 1048:15> 1048:15>]
REFERENCE_CALL void b3Vector4::b3Vector4() -> void b3Vector3::b3Vector3() [b3Vector3.h <1048:7 1048:15>]
SYMBOL_METHOD public void b3Vector4::b3Vector4(const b3Vector4 &) [b3Vector3.h <1048:7 1048:15>]
SYMBOL_METHOD public void b3Vector4::b3Vector4(b3Vector4 &&) [b3Vector3.h <1048:7 <1048:7 1048:15> 1048:15>]
SYMBOL_FUNCTION void b3Vector3::b3Vector3(b3Vector3 &&)
REFERENCE_CALL void b3Vector4::b3Vector4(b3Vector4 &&) -> void b3Vector3::b3Vector3(b3Vector3 &&) [b3Vector3.h <1048:7 1048:15>]
REFERENCE_TYPE_USAGE void b3Vector4::b3Vector4(b3Vector4 &&) -> b3Vector4 [b3Vector3.h <1048:7 1048:15>]
LOCAL_SYMBOL: b3Vector3.h<1048:7> [b3Vector3.h <1048:7 1048:15>]
SYMBOL_FUNCTION void b3SwapScalarEndian(const b3Scalar &, b3Scalar &) [b3Vector3.h <1175:1 <1175:22 1175:39> 1196:1>]
REFERENCE_TYPE_USAGE void b3SwapScalarEndian(const b3Scalar &, b3Scalar &) -> void [b3Vector3.h <1175:17 1175:20>]
LOCAL_SYMBOL: b3Vector3.h<1175:57> [b3Vector3.h <1175:57 1175:65>]
REFERENCE_TYPE_USAGE void b3SwapScalarEndian(const b3Scalar &, b3Scalar &) -> b3Scalar [b3Vector3.h <1175:47 1175:54>]
LOCAL_SYMBOL: b3Vector3.h<1175:78> [b3Vector3.h <1175:78 1175:84>]
REFERENCE_TYPE_USAGE void b3SwapScalarEndian(const b3Scalar &, b3Scalar &) -> b3Scalar [b3Vector3.h <1175:68 1175:75>]
LOCAL_SYMBOL: b3Vector3.h<1176:1> [b3Vector3.h <1176:1 1176:1>]
LOCAL_SYMBOL: b3Vector3.h<1176:1> [b3Vector3.h <1196:1 1196:1>]
LOCAL_SYMBOL: b3Vector3.h<1189:17> [b3Vector3.h <1189:17 1189:20>]
REFERENCE_TYPE_USAGE void b3SwapScalarEndian(const b3Scalar &, b3Scalar &) -> unsigned char [b3Vector3.h <1189:2 1189:9>]
REFERENCE_TYPE_USAGE void b3SwapScalarEndian(const b3Scalar &, b3Scalar &) -> unsigned char [b3Vector3.h <1189:25 1189:32>]
LOCAL_SYMBOL: b3Vector3.h<1175:78> [b3Vector3.h <1189:42 1189:48>]
LOCAL_SYMBOL: b3Vector3.h<1190:17> [b3Vector3.h <1190:17 1190:19>]
REFERENCE_TYPE_USAGE void b3SwapScalarEndian(const b3Scalar &, b3Scalar &) -> unsigned char [b3Vector3.h <1190:2 1190:9>]
REFERENCE_TYPE_USAGE void b3SwapScalarEndian(const b3Scalar &, b3Scalar &) -> unsigned char [b3Vector3.h <1190:25 1190:32>]
LOCAL_SYMBOL: b3Vector3.h<1175:57> [b3Vector3.h <1190:42 1190:50>]
LOCAL_SYMBOL: b3Vector3.h<1189:17> [b3Vector3.h <1191:2 1191:5>]
LOCAL_SYMBOL: b3Vector3.h<1190:17> [b3Vector3.h <1191:12 1191:14>]
LOCAL_SYMBOL: b3Vector3.h<1189:17> [b3Vector3.h <1192:5 1192:8>]
LOCAL_SYMBOL: b3Vector3.h<1190:17> [b3Vector3.h <1192:15 1192:17>]
LOCAL_SYMBOL: b3Vector3.h<1189:17> [b3Vector3.h <1193:5 1193:8>]
LOCAL_SYMBOL: b3Vector3.h<1190:17> [b3Vector3.h <1193:15 1193:17>]
LOCAL_SYMBOL: b3Vector3.h<1189:17> [b3Vector3.h <1194:5 1194:8>]
LOCAL_SYMBOL: b3Vector3.h<1190:17> [b3Vector3.h <1194:15 1194:17>]
SYMBOL_FUNCTION void b3SwapVector3Endian(const b3Vector3 &, b3Vector3 &) [b3Vector3.h <1198:1 <1198:22 1198:40> 1205:1>]
REFERENCE_TYPE_USAGE void b3SwapVector3Endian(const b3Vector3 &, b3Vector3 &) -> void [b3Vector3.h <1198:17 1198:20>]
LOCAL_SYMBOL: b3Vector3.h<1198:59> [b3Vector3.h <1198:59 1198:67>]
REFERENCE_TYPE_USAGE void b3SwapVector3Endian(const b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3Vector3.h <1198:48 1198:56>]
LOCAL_SYMBOL: b3Vector3.h<1198:81> [b3Vector3.h <1198:81 1198:87>]
REFERENCE_TYPE_USAGE void b3SwapVector3Endian(const b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3Vector3.h <1198:70 1198:78>]
LOCAL_SYMBOL: b3Vector3.h<1199:1> [b3Vector3.h <1199:1 1199:1>]
LOCAL_SYMBOL: b3Vector3.h<1199:1> [b3Vector3.h <1205:1 1205:1>]
LOCAL_SYMBOL: b3Vector3.h<1200:11> [b3Vector3.h <1200:11 1200:11>]
REFERENCE_TYPE_USAGE void b3SwapVector3Endian(const b3Vector3 &, b3Vector3 &) -> int [b3Vector3.h <1200:7 1200:9>]
LOCAL_SYMBOL: b3Vector3.h<1200:11> [b3Vector3.h <1200:15 1200:15>]
LOCAL_SYMBOL: b3Vector3.h<1200:11> [b3Vector3.h <1200:19 1200:19>]
LOCAL_SYMBOL: b3Vector3.h<1201:2> [b3Vector3.h <1201:2 1201:2>]
LOCAL_SYMBOL: b3Vector3.h<1201:2> [b3Vector3.h <1203:2 1203:2>]
SYMBOL_FUNCTION void b3SwapScalarEndian(const b3Scalar &, b3Scalar &)
REFERENCE_CALL void b3SwapVector3Endian(const b3Vector3 &, b3Vector3 &) -> void b3SwapScalarEndian(const b3Scalar &, b3Scalar &) [b3Vector3.h <1202:3 1202:20>]
LOCAL_SYMBOL: b3Vector3.h<1198:59> [b3Vector3.h <1202:22 1202:30>]
LOCAL_SYMBOL: b3Vector3.h<1200:11> [b3Vector3.h <1202:32 1202:32>]
LOCAL_SYMBOL: b3Vector3.h<1198:81> [b3Vector3.h <1202:35 1202:41>]
LOCAL_SYMBOL: b3Vector3.h<1200:11> [b3Vector3.h <1202:43 1202:43>]
SYMBOL_FUNCTION void b3UnSwapVector3Endian(b3Vector3 &) [b3Vector3.h <1208:1 <1208:22 1208:42> 1217:1>]
REFERENCE_TYPE_USAGE void b3UnSwapVector3Endian(b3Vector3 &) -> void [b3Vector3.h <1208:17 1208:20>]
LOCAL_SYMBOL: b3Vector3.h<1208:55> [b3Vector3.h <1208:55 1208:60>]
REFERENCE_TYPE_USAGE void b3UnSwapVector3Endian(b3Vector3 &) -> b3Vector3 [b3Vector3.h <1208:44 1208:52>]
LOCAL_SYMBOL: b3Vector3.h<1209:1> [b3Vector3.h <1209:1 1209:1>]
LOCAL_SYMBOL: b3Vector3.h<1209:1> [b3Vector3.h <1217:1 1217:1>]
LOCAL_SYMBOL: b3Vector3.h<1211:12> [b3Vector3.h <1211:12 1211:21>]
REFERENCE_TYPE_USAGE void b3UnSwapVector3Endian(b3Vector3 &) -> b3Vector3 [b3Vector3.h <1211:2 1211:10>]
REFERENCE_CALL void b3UnSwapVector3Endian(b3Vector3 &) -> void b3Vector3::b3Vector3() [b3Vector3.h <1211:12 1211:21>]
LOCAL_SYMBOL: b3Vector3.h<1212:11> [b3Vector3.h <1212:11 1212:11>]
REFERENCE_TYPE_USAGE void b3UnSwapVector3Endian(b3Vector3 &) -> int [b3Vector3.h <1212:7 1212:9>]
LOCAL_SYMBOL: b3Vector3.h<1212:11> [b3Vector3.h <1212:15 1212:15>]
LOCAL_SYMBOL: b3Vector3.h<1212:11> [b3Vector3.h <1212:19 1212:19>]
LOCAL_SYMBOL: b3Vector3.h<1213:2> [b3Vector3.h <1213:2 1213:2>]
LOCAL_SYMBOL: b3Vector3.h<1213:2> [b3Vector3.h <1215:2 1215:2>]
REFERENCE_CALL void b3UnSwapVector3Endian(b3Vector3 &) -> void b3SwapScalarEndian(const b3Scalar &, b3Scalar &) [b3Vector3.h <1214:3 1214:20>]
LOCAL_SYMBOL: b3Vector3.h<1208:55> [b3Vector3.h <1214:22 1214:27>]
LOCAL_SYMBOL: b3Vector3.h<1212:11> [b3Vector3.h <1214:29 1214:29>]
LOCAL_SYMBOL: b3Vector3.h<1211:12> [b3Vector3.h <1214:32 1214:41>]
LOCAL_SYMBOL: b3Vector3.h<1212:11> [b3Vector3.h <1214:43 1214:43>]
SYMBOL_FUNCTION b3Vector3 & b3Vector3::operator=(const b3Vector3 &)
REFERENCE_CALL void b3UnSwapVector3Endian(b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3Vector3.h <1216:9 1216:9>]
LOCAL_SYMBOL: b3Vector3.h<1208:55> [b3Vector3.h <1216:2 1216:7>]
LOCAL_SYMBOL: b3Vector3.h<1211:12> [b3Vector3.h <1216:11 1216:20>]
SYMBOL_TEMPLATE_PARAMETER b3PlaneSpace1<class T>::T [b3Vector3.h <1219:17 1219:17>]
SYMBOL_FUNCTION void b3PlaneSpace1<class T>(const T &, T &, T &) [b3Vector3.h <1219:1 <1220:22 1220:34> 1246:1>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<class T>(const T &, T &, T &) -> void [b3Vector3.h <1220:17 1220:20>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1220:46 1220:46>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3PlaneSpace1<class T>::T [b3Vector3.h <1220:43 1220:43>]
LOCAL_SYMBOL: b3Vector3.h<1220:52> [b3Vector3.h <1220:52 1220:52>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3PlaneSpace1<class T>::T [b3Vector3.h <1220:49 1220:49>]
LOCAL_SYMBOL: b3Vector3.h<1220:58> [b3Vector3.h <1220:58 1220:58>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3PlaneSpace1<class T>::T [b3Vector3.h <1220:55 1220:55>]
LOCAL_SYMBOL: b3Vector3.h<1221:1> [b3Vector3.h <1221:1 1221:1>]
LOCAL_SYMBOL: b3Vector3.h<1221:1> [b3Vector3.h <1246:1 1246:1>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1222:14 1222:14>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3Scalar [b3Vector3.h <1222:22 1222:30>]
LOCAL_SYMBOL: b3Vector3.h<1222:33> [b3Vector3.h <1222:33 1222:33>]
LOCAL_SYMBOL: b3Vector3.h<1222:33> [b3Vector3.h <1233:3 1233:3>]
LOCAL_SYMBOL: b3Vector3.h<1224:14> [b3Vector3.h <1224:14 1224:14>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3Scalar [b3Vector3.h <1224:5 1224:12>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1224:18 1224:18>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1224:23 1224:23>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1224:30 1224:30>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1224:35 1224:35>]
LOCAL_SYMBOL: b3Vector3.h<1225:14> [b3Vector3.h <1225:14 1225:14>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3Scalar [b3Vector3.h <1225:5 1225:12>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3Scalar [b3Vector3.h <1225:18 1225:28>]
REFERENCE_CALL void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3Scalar b3Sqrt(b3Scalar) [b3Vector3.h <1225:18 1225:28>]
LOCAL_SYMBOL: b3Vector3.h<1224:14> [b3Vector3.h <1225:31 1225:31>]
LOCAL_SYMBOL: b3Vector3.h<1220:52> [b3Vector3.h <1226:5 1226:5>]
LOCAL_SYMBOL: b3Vector3.h<1220:52> [b3Vector3.h <1227:2 1227:2>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1227:10 1227:10>]
LOCAL_SYMBOL: b3Vector3.h<1225:14> [b3Vector3.h <1227:15 1227:15>]
LOCAL_SYMBOL: b3Vector3.h<1220:52> [b3Vector3.h <1228:2 1228:2>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1228:9 1228:9>]
LOCAL_SYMBOL: b3Vector3.h<1225:14> [b3Vector3.h <1228:14 1228:14>]
LOCAL_SYMBOL: b3Vector3.h<1220:58> [b3Vector3.h <1230:5 1230:5>]
LOCAL_SYMBOL: b3Vector3.h<1224:14> [b3Vector3.h <1230:12 1230:12>]
LOCAL_SYMBOL: b3Vector3.h<1225:14> [b3Vector3.h <1230:14 1230:14>]
LOCAL_SYMBOL: b3Vector3.h<1220:58> [b3Vector3.h <1231:2 1231:2>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1231:10 1231:10>]
LOCAL_SYMBOL: b3Vector3.h<1220:52> [b3Vector3.h <1231:15 1231:15>]
LOCAL_SYMBOL: b3Vector3.h<1220:58> [b3Vector3.h <1232:2 1232:2>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1232:9 1232:9>]
LOCAL_SYMBOL: b3Vector3.h<1220:52> [b3Vector3.h <1232:14 1232:14>]
LOCAL_SYMBOL: b3Vector3.h<1234:8> [b3Vector3.h <1234:8 1234:8>]
LOCAL_SYMBOL: b3Vector3.h<1234:8> [b3Vector3.h <1245:3 1245:3>]
LOCAL_SYMBOL: b3Vector3.h<1236:14> [b3Vector3.h <1236:14 1236:14>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3Scalar [b3Vector3.h <1236:5 1236:12>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1236:18 1236:18>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1236:23 1236:23>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1236:30 1236:30>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1236:35 1236:35>]
LOCAL_SYMBOL: b3Vector3.h<1237:14> [b3Vector3.h <1237:14 1237:14>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3Scalar [b3Vector3.h <1237:5 1237:12>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3Scalar [b3Vector3.h <1237:18 1237:28>]
REFERENCE_CALL void b3PlaneSpace1<class T>(const T &, T &, T &) -> b3Scalar b3Sqrt(b3Scalar) [b3Vector3.h <1237:18 1237:28>]
LOCAL_SYMBOL: b3Vector3.h<1236:14> [b3Vector3.h <1237:31 1237:31>]
LOCAL_SYMBOL: b3Vector3.h<1220:52> [b3Vector3.h <1238:5 1238:5>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1238:13 1238:13>]
LOCAL_SYMBOL: b3Vector3.h<1237:14> [b3Vector3.h <1238:18 1238:18>]
LOCAL_SYMBOL: b3Vector3.h<1220:52> [b3Vector3.h <1239:2 1239:2>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1239:9 1239:9>]
LOCAL_SYMBOL: b3Vector3.h<1237:14> [b3Vector3.h <1239:14 1239:14>]
LOCAL_SYMBOL: b3Vector3.h<1220:52> [b3Vector3.h <1240:2 1240:2>]
LOCAL_SYMBOL: b3Vector3.h<1220:58> [b3Vector3.h <1242:5 1242:5>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1242:13 1242:13>]
LOCAL_SYMBOL: b3Vector3.h<1220:52> [b3Vector3.h <1242:18 1242:18>]
LOCAL_SYMBOL: b3Vector3.h<1220:58> [b3Vector3.h <1243:2 1243:2>]
LOCAL_SYMBOL: b3Vector3.h<1220:46> [b3Vector3.h <1243:9 1243:9>]
LOCAL_SYMBOL: b3Vector3.h<1220:52> [b3Vector3.h <1243:14 1243:14>]
LOCAL_SYMBOL: b3Vector3.h<1220:58> [b3Vector3.h <1244:2 1244:2>]
LOCAL_SYMBOL: b3Vector3.h<1236:14> [b3Vector3.h <1244:9 1244:9>]
LOCAL_SYMBOL: b3Vector3.h<1237:14> [b3Vector3.h <1244:11 1244:11>]
SYMBOL_FUNCTION void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) [b3Vector3.h <1220:1 <1220:22 1220:34> 1246:1>]
SYMBOL_FUNCTION void b3PlaneSpace1<class T>(const T &, T &, T &)
REFERENCE_TEMPLATE_SPECIALIZATION void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> void b3PlaneSpace1<class T>(const T &, T &, T &) [b3Vector3.h <1220:22 1220:34>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> void [b3Vector3.h <1220:17 1220:20>]
REFERENCE_CALL void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> b3Scalar b3Fabs(b3Scalar) [b3Vector3.h <1222:7 1222:12>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> b3Scalar [b3Vector3.h <1222:22 1222:30>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> b3Scalar [b3Vector3.h <1224:5 1224:12>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> b3Scalar [b3Vector3.h <1225:5 1225:12>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> b3Scalar [b3Vector3.h <1225:18 1225:28>]
REFERENCE_CALL void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> b3Scalar b3Sqrt(b3Scalar) [b3Vector3.h <1225:18 1225:28>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> b3Scalar [b3Vector3.h <1236:5 1236:12>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> b3Scalar [b3Vector3.h <1237:5 1237:12>]
REFERENCE_TYPE_USAGE void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> b3Scalar [b3Vector3.h <1237:18 1237:28>]
REFERENCE_CALL void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) -> b3Scalar b3Sqrt(b3Scalar) [b3Vector3.h <1237:18 1237:28>]
SYMBOL_STRUCT b3Vector3FloatData [b3Vector3.h <1249:1 <1249:8 1249:25> 1252:1>]
LOCAL_SYMBOL: b3Vector3.h<1250:1> [b3Vector3.h <1250:1 1250:1>]
LOCAL_SYMBOL: b3Vector3.h<1250:1> [b3Vector3.h <1252:1 1252:1>]
SYMBOL_FIELD public float [] b3Vector3FloatData::m_floats [b3Vector3.h <1251:8 1251:15>]
REFERENCE_TYPE_USAGE float [] b3Vector3FloatData::m_floats -> float [b3Vector3.h <1251:2 1251:6>]
SYMBOL_STRUCT b3Vector3DoubleData [b3Vector3.h <1254:1 <1254:8 1254:26> 1258:1>]
LOCAL_SYMBOL: b3Vector3.h<1255:1> [b3Vector3.h <1255:1 1255:1>]
LOCAL_SYMBOL: b3Vector3.h<1255:1> [b3Vector3.h <1258:1 1258:1>]
SYMBOL_FIELD public double [] b3Vector3DoubleData::m_floats [b3Vector3.h <1256:9 1256:16>]
REFERENCE_TYPE_USAGE double [] b3Vector3DoubleData::m_floats -> double [b3Vector3.h <1256:2 1256:7>]
SYMBOL_METHOD public void b3Vector3::serializeFloat(b3Vector3FloatData &) const [b3Vector3.h <1260:1 <1260:33 1260:46> 1265:1>]
QUALIFIER: b3Vector3 [b3Vector3.h <1260:22 1260:30>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeFloat(b3Vector3FloatData &) const -> void [b3Vector3.h <1260:17 1260:20>]
LOCAL_SYMBOL: b3Vector3.h<1260:75> [b3Vector3.h <1260:75 1260:81>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeFloat(b3Vector3FloatData &) const -> b3Vector3FloatData [b3Vector3.h <1260:55 1260:72>]
LOCAL_SYMBOL: b3Vector3.h<1261:1> [b3Vector3.h <1261:1 1261:1>]
LOCAL_SYMBOL: b3Vector3.h<1261:1> [b3Vector3.h <1265:1 1265:1>]
LOCAL_SYMBOL: b3Vector3.h<1263:11> [b3Vector3.h <1263:11 1263:11>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeFloat(b3Vector3FloatData &) const -> int [b3Vector3.h <1263:7 1263:9>]
LOCAL_SYMBOL: b3Vector3.h<1263:11> [b3Vector3.h <1263:15 1263:15>]
LOCAL_SYMBOL: b3Vector3.h<1263:11> [b3Vector3.h <1263:19 1263:19>]
REFERENCE_USAGE void b3Vector3::serializeFloat(b3Vector3FloatData &) const -> float [] b3Vector3FloatData::m_floats [b3Vector3.h <1264:11 1264:18>]
LOCAL_SYMBOL: b3Vector3.h<1260:75> [b3Vector3.h <1264:3 1264:9>]
LOCAL_SYMBOL: b3Vector3.h<1263:11> [b3Vector3.h <1264:20 1264:20>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeFloat(b3Vector3FloatData &) const -> float [b3Vector3.h <1264:25 1264:29>]
REFERENCE_USAGE void b3Vector3::serializeFloat(b3Vector3FloatData &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1264:31 1264:38>]
REFERENCE_USAGE void b3Vector3::serializeFloat(b3Vector3FloatData &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1264:31 1264:38>]
LOCAL_SYMBOL: b3Vector3.h<1263:11> [b3Vector3.h <1264:40 1264:40>]
SYMBOL_METHOD public void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) [b3Vector3.h <1267:1 <1267:33 1267:48> 1271:1>]
QUALIFIER: b3Vector3 [b3Vector3.h <1267:22 1267:30>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) -> void [b3Vector3.h <1267:17 1267:20>]
LOCAL_SYMBOL: b3Vector3.h<1267:83> [b3Vector3.h <1267:83 1267:88>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) -> b3Vector3FloatData [b3Vector3.h <1267:63 1267:80>]
LOCAL_SYMBOL: b3Vector3.h<1268:1> [b3Vector3.h <1268:1 1268:1>]
LOCAL_SYMBOL: b3Vector3.h<1268:1> [b3Vector3.h <1271:1 1271:1>]
LOCAL_SYMBOL: b3Vector3.h<1269:11> [b3Vector3.h <1269:11 1269:11>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) -> int [b3Vector3.h <1269:7 1269:9>]
LOCAL_SYMBOL: b3Vector3.h<1269:11> [b3Vector3.h <1269:15 1269:15>]
LOCAL_SYMBOL: b3Vector3.h<1269:11> [b3Vector3.h <1269:19 1269:19>]
REFERENCE_USAGE void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1270:3 1270:10>]
REFERENCE_USAGE void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1270:3 1270:10>]
LOCAL_SYMBOL: b3Vector3.h<1269:11> [b3Vector3.h <1270:12 1270:12>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) -> b3Scalar [b3Vector3.h <1270:17 1270:24>]
REFERENCE_USAGE void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) -> float [] b3Vector3FloatData::m_floats [b3Vector3.h <1270:33 1270:40>]
LOCAL_SYMBOL: b3Vector3.h<1267:83> [b3Vector3.h <1270:26 1270:31>]
LOCAL_SYMBOL: b3Vector3.h<1269:11> [b3Vector3.h <1270:42 1270:42>]
SYMBOL_METHOD public void b3Vector3::serializeDouble(b3Vector3DoubleData &) const [b3Vector3.h <1274:1 <1274:33 1274:47> 1279:1>]
QUALIFIER: b3Vector3 [b3Vector3.h <1274:22 1274:30>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeDouble(b3Vector3DoubleData &) const -> void [b3Vector3.h <1274:17 1274:20>]
LOCAL_SYMBOL: b3Vector3.h<1274:77> [b3Vector3.h <1274:77 1274:83>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeDouble(b3Vector3DoubleData &) const -> b3Vector3DoubleData [b3Vector3.h <1274:56 1274:74>]
LOCAL_SYMBOL: b3Vector3.h<1275:1> [b3Vector3.h <1275:1 1275:1>]
LOCAL_SYMBOL: b3Vector3.h<1275:1> [b3Vector3.h <1279:1 1279:1>]
LOCAL_SYMBOL: b3Vector3.h<1277:11> [b3Vector3.h <1277:11 1277:11>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeDouble(b3Vector3DoubleData &) const -> int [b3Vector3.h <1277:7 1277:9>]
LOCAL_SYMBOL: b3Vector3.h<1277:11> [b3Vector3.h <1277:15 1277:15>]
LOCAL_SYMBOL: b3Vector3.h<1277:11> [b3Vector3.h <1277:19 1277:19>]
REFERENCE_USAGE void b3Vector3::serializeDouble(b3Vector3DoubleData &) const -> double [] b3Vector3DoubleData::m_floats [b3Vector3.h <1278:11 1278:18>]
LOCAL_SYMBOL: b3Vector3.h<1274:77> [b3Vector3.h <1278:3 1278:9>]
LOCAL_SYMBOL: b3Vector3.h<1277:11> [b3Vector3.h <1278:20 1278:20>]
REFERENCE_TYPE_USAGE void b3Vector3::serializeDouble(b3Vector3DoubleData &) const -> double [b3Vector3.h <1278:25 1278:30>]
REFERENCE_USAGE void b3Vector3::serializeDouble(b3Vector3DoubleData &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1278:32 1278:39>]
REFERENCE_USAGE void b3Vector3::serializeDouble(b3Vector3DoubleData &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1278:32 1278:39>]
LOCAL_SYMBOL: b3Vector3.h<1277:11> [b3Vector3.h <1278:41 1278:41>]
SYMBOL_METHOD public void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) [b3Vector3.h <1281:1 <1281:33 1281:49> 1285:1>]
QUALIFIER: b3Vector3 [b3Vector3.h <1281:22 1281:30>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) -> void [b3Vector3.h <1281:17 1281:20>]
LOCAL_SYMBOL: b3Vector3.h<1281:85> [b3Vector3.h <1281:85 1281:90>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) -> b3Vector3DoubleData [b3Vector3.h <1281:64 1281:82>]
LOCAL_SYMBOL: b3Vector3.h<1282:1> [b3Vector3.h <1282:1 1282:1>]
LOCAL_SYMBOL: b3Vector3.h<1282:1> [b3Vector3.h <1285:1 1285:1>]
LOCAL_SYMBOL: b3Vector3.h<1283:11> [b3Vector3.h <1283:11 1283:11>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) -> int [b3Vector3.h <1283:7 1283:9>]
LOCAL_SYMBOL: b3Vector3.h<1283:11> [b3Vector3.h <1283:15 1283:15>]
LOCAL_SYMBOL: b3Vector3.h<1283:11> [b3Vector3.h <1283:19 1283:19>]
REFERENCE_USAGE void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1284:3 1284:10>]
REFERENCE_USAGE void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1284:3 1284:10>]
LOCAL_SYMBOL: b3Vector3.h<1283:11> [b3Vector3.h <1284:12 1284:12>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) -> b3Scalar [b3Vector3.h <1284:17 1284:24>]
REFERENCE_USAGE void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) -> double [] b3Vector3DoubleData::m_floats [b3Vector3.h <1284:33 1284:40>]
LOCAL_SYMBOL: b3Vector3.h<1281:85> [b3Vector3.h <1284:26 1284:31>]
LOCAL_SYMBOL: b3Vector3.h<1283:11> [b3Vector3.h <1284:42 1284:42>]
SYMBOL_METHOD public void b3Vector3::serialize(b3Vector3FloatData &) const [b3Vector3.h <1288:1 <1288:33 1288:41> 1293:1>]
QUALIFIER: b3Vector3 [b3Vector3.h <1288:22 1288:30>]
REFERENCE_TYPE_USAGE void b3Vector3::serialize(b3Vector3FloatData &) const -> void [b3Vector3.h <1288:17 1288:20>]
LOCAL_SYMBOL: b3Vector3.h<1288:65> [b3Vector3.h <1288:65 1288:71>]
REFERENCE_TYPE_USAGE void b3Vector3::serialize(b3Vector3FloatData &) const -> b3Vector3FloatData [b3Vector3.h <1288:50 1288:62>]
LOCAL_SYMBOL: b3Vector3.h<1289:1> [b3Vector3.h <1289:1 1289:1>]
LOCAL_SYMBOL: b3Vector3.h<1289:1> [b3Vector3.h <1293:1 1293:1>]
LOCAL_SYMBOL: b3Vector3.h<1291:11> [b3Vector3.h <1291:11 1291:11>]
REFERENCE_TYPE_USAGE void b3Vector3::serialize(b3Vector3FloatData &) const -> int [b3Vector3.h <1291:7 1291:9>]
LOCAL_SYMBOL: b3Vector3.h<1291:11> [b3Vector3.h <1291:15 1291:15>]
LOCAL_SYMBOL: b3Vector3.h<1291:11> [b3Vector3.h <1291:19 1291:19>]
REFERENCE_USAGE void b3Vector3::serialize(b3Vector3FloatData &) const -> float [] b3Vector3FloatData::m_floats [b3Vector3.h <1292:11 1292:18>]
LOCAL_SYMBOL: b3Vector3.h<1288:65> [b3Vector3.h <1292:3 1292:9>]
LOCAL_SYMBOL: b3Vector3.h<1291:11> [b3Vector3.h <1292:20 1292:20>]
REFERENCE_USAGE void b3Vector3::serialize(b3Vector3FloatData &) const -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1292:25 1292:32>]
REFERENCE_USAGE void b3Vector3::serialize(b3Vector3FloatData &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1292:25 1292:32>]
LOCAL_SYMBOL: b3Vector3.h<1291:11> [b3Vector3.h <1292:34 1292:34>]
SYMBOL_METHOD public void b3Vector3::deSerialize(const b3Vector3FloatData &) [b3Vector3.h <1295:1 <1295:33 1295:43> 1299:1>]
QUALIFIER: b3Vector3 [b3Vector3.h <1295:22 1295:30>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerialize(const b3Vector3FloatData &) -> void [b3Vector3.h <1295:17 1295:20>]
LOCAL_SYMBOL: b3Vector3.h<1295:73> [b3Vector3.h <1295:73 1295:78>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerialize(const b3Vector3FloatData &) -> b3Vector3FloatData [b3Vector3.h <1295:58 1295:70>]
LOCAL_SYMBOL: b3Vector3.h<1296:1> [b3Vector3.h <1296:1 1296:1>]
LOCAL_SYMBOL: b3Vector3.h<1296:1> [b3Vector3.h <1299:1 1299:1>]
LOCAL_SYMBOL: b3Vector3.h<1297:11> [b3Vector3.h <1297:11 1297:11>]
REFERENCE_TYPE_USAGE void b3Vector3::deSerialize(const b3Vector3FloatData &) -> int [b3Vector3.h <1297:7 1297:9>]
LOCAL_SYMBOL: b3Vector3.h<1297:11> [b3Vector3.h <1297:15 1297:15>]
LOCAL_SYMBOL: b3Vector3.h<1297:11> [b3Vector3.h <1297:19 1297:19>]
REFERENCE_USAGE void b3Vector3::deSerialize(const b3Vector3FloatData &) -> float [] b3Vector3::anonymous union (b3Vector3.h<96:9>)::m_floats [b3Vector3.h <1298:3 1298:10>]
REFERENCE_USAGE void b3Vector3::deSerialize(const b3Vector3FloatData &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1298:3 1298:10>]
LOCAL_SYMBOL: b3Vector3.h<1297:11> [b3Vector3.h <1298:12 1298:12>]
REFERENCE_USAGE void b3Vector3::deSerialize(const b3Vector3FloatData &) -> float [] b3Vector3FloatData::m_floats [b3Vector3.h <1298:24 1298:31>]
LOCAL_SYMBOL: b3Vector3.h<1295:73> [b3Vector3.h <1298:17 1298:22>]
LOCAL_SYMBOL: b3Vector3.h<1297:11> [b3Vector3.h <1298:33 1298:33>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <1304:1 <1304:18 1304:30> 1309:1>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> b3Vector3 [b3Vector3.h <1304:8 1304:16>]
LOCAL_SYMBOL: b3Vector3.h<1304:41> [b3Vector3.h <1304:41 1304:41>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <1304:32 1304:39>]
LOCAL_SYMBOL: b3Vector3.h<1304:52> [b3Vector3.h <1304:52 1304:52>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <1304:43 1304:50>]
LOCAL_SYMBOL: b3Vector3.h<1304:63> [b3Vector3.h <1304:63 1304:63>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <1304:54 1304:61>]
LOCAL_SYMBOL: b3Vector3.h<1305:1> [b3Vector3.h <1305:1 1305:1>]
LOCAL_SYMBOL: b3Vector3.h<1305:1> [b3Vector3.h <1309:1 1309:1>]
LOCAL_SYMBOL: b3Vector3.h<1306:12> [b3Vector3.h <1306:12 1306:14>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> b3Vector3 [b3Vector3.h <1306:2 1306:10>]
REFERENCE_CALL b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> void b3Vector3::b3Vector3() [b3Vector3.h <1306:12 1306:14>]
REFERENCE_CALL b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Vector3.h <1307:6 1307:13>]
LOCAL_SYMBOL: b3Vector3.h<1306:12> [b3Vector3.h <1307:2 1307:4>]
LOCAL_SYMBOL: b3Vector3.h<1304:41> [b3Vector3.h <1307:15 1307:15>]
LOCAL_SYMBOL: b3Vector3.h<1304:52> [b3Vector3.h <1307:17 1307:17>]
LOCAL_SYMBOL: b3Vector3.h<1304:63> [b3Vector3.h <1307:19 1307:19>]
REFERENCE_CALL b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) -> void b3Vector3::b3Vector3(b3Vector3 &&) [b3Vector3.h <1308:9 1308:11>]
LOCAL_SYMBOL: b3Vector3.h<1306:12> [b3Vector3.h <1308:9 1308:11>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <1311:1 <1311:18 1311:30> 1317:1>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Vector3 [b3Vector3.h <1311:8 1311:16>]
LOCAL_SYMBOL: b3Vector3.h<1311:41> [b3Vector3.h <1311:41 1311:41>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <1311:32 1311:39>]
LOCAL_SYMBOL: b3Vector3.h<1311:52> [b3Vector3.h <1311:52 1311:52>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <1311:43 1311:50>]
LOCAL_SYMBOL: b3Vector3.h<1311:63> [b3Vector3.h <1311:63 1311:63>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <1311:54 1311:61>]
LOCAL_SYMBOL: b3Vector3.h<1311:75> [b3Vector3.h <1311:75 1311:75>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <1311:66 1311:73>]
LOCAL_SYMBOL: b3Vector3.h<1312:1> [b3Vector3.h <1312:1 1312:1>]
LOCAL_SYMBOL: b3Vector3.h<1312:1> [b3Vector3.h <1317:1 1317:1>]
LOCAL_SYMBOL: b3Vector3.h<1313:12> [b3Vector3.h <1313:12 1313:14>]
REFERENCE_TYPE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Vector3 [b3Vector3.h <1313:2 1313:10>]
REFERENCE_CALL b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> void b3Vector3::b3Vector3() [b3Vector3.h <1313:12 1313:14>]
REFERENCE_CALL b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Vector3.h <1314:6 1314:13>]
LOCAL_SYMBOL: b3Vector3.h<1313:12> [b3Vector3.h <1314:2 1314:4>]
LOCAL_SYMBOL: b3Vector3.h<1311:41> [b3Vector3.h <1314:15 1314:15>]
LOCAL_SYMBOL: b3Vector3.h<1311:52> [b3Vector3.h <1314:17 1314:17>]
LOCAL_SYMBOL: b3Vector3.h<1311:63> [b3Vector3.h <1314:19 1314:19>]
REFERENCE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::w [b3Vector3.h <1315:6 1315:6>]
REFERENCE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3Vector3.h <1315:6 1315:6>]
REFERENCE_USAGE b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3Vector3.h <1315:6 1315:6>]
LOCAL_SYMBOL: b3Vector3.h<1313:12> [b3Vector3.h <1315:2 1315:4>]
LOCAL_SYMBOL: b3Vector3.h<1311:75> [b3Vector3.h <1315:10 1315:10>]
REFERENCE_CALL b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> void b3Vector3::b3Vector3(b3Vector3 &&) [b3Vector3.h <1316:9 1316:11>]
LOCAL_SYMBOL: b3Vector3.h<1313:12> [b3Vector3.h <1316:9 1316:11>]
SYMBOL_FUNCTION b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) [b3Vector3.h <1319:1 <1319:18 1319:30> 1324:1>]
REFERENCE_TYPE_USAGE b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Vector4 [b3Vector3.h <1319:8 1319:16>]
LOCAL_SYMBOL: b3Vector3.h<1319:41> [b3Vector3.h <1319:41 1319:41>]
REFERENCE_TYPE_USAGE b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <1319:32 1319:39>]
LOCAL_SYMBOL: b3Vector3.h<1319:52> [b3Vector3.h <1319:52 1319:52>]
REFERENCE_TYPE_USAGE b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <1319:43 1319:50>]
LOCAL_SYMBOL: b3Vector3.h<1319:63> [b3Vector3.h <1319:63 1319:63>]
REFERENCE_TYPE_USAGE b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <1319:54 1319:61>]
LOCAL_SYMBOL: b3Vector3.h<1319:74> [b3Vector3.h <1319:74 1319:74>]
REFERENCE_TYPE_USAGE b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Vector3.h <1319:65 1319:72>]
LOCAL_SYMBOL: b3Vector3.h<1320:1> [b3Vector3.h <1320:1 1320:1>]
LOCAL_SYMBOL: b3Vector3.h<1320:1> [b3Vector3.h <1324:1 1324:1>]
LOCAL_SYMBOL: b3Vector3.h<1321:12> [b3Vector3.h <1321:12 1321:14>]
REFERENCE_TYPE_USAGE b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> b3Vector4 [b3Vector3.h <1321:2 1321:10>]
SYMBOL_FUNCTION void b3Vector4::b3Vector4()
REFERENCE_CALL b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> void b3Vector4::b3Vector4() [b3Vector3.h <1321:12 1321:14>]
SYMBOL_FUNCTION void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &)
REFERENCE_CALL b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> void b3Vector4::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Vector3.h <1322:6 1322:13>]
LOCAL_SYMBOL: b3Vector3.h<1321:12> [b3Vector3.h <1322:2 1322:4>]
LOCAL_SYMBOL: b3Vector3.h<1319:41> [b3Vector3.h <1322:15 1322:15>]
LOCAL_SYMBOL: b3Vector3.h<1319:52> [b3Vector3.h <1322:17 1322:17>]
LOCAL_SYMBOL: b3Vector3.h<1319:63> [b3Vector3.h <1322:19 1322:19>]
LOCAL_SYMBOL: b3Vector3.h<1319:74> [b3Vector3.h <1322:21 1322:21>]
SYMBOL_FUNCTION void b3Vector4::b3Vector4(b3Vector4 &&)
REFERENCE_CALL b3Vector4 b3MakeVector4(b3Scalar, b3Scalar, b3Scalar, b3Scalar) -> void b3Vector4::b3Vector4(b3Vector4 &&) [b3Vector3.h <1323:9 1323:11>]
LOCAL_SYMBOL: b3Vector3.h<1321:12> [b3Vector3.h <1323:9 1323:11>]
SYMBOL_CLASS b3QuadWord [b3QuadWord.h <34:1 <34:31 34:40> 243:1>]
LOCAL_SYMBOL: b3QuadWord.h<38:1> [b3QuadWord.h <38:1 38:1>]
LOCAL_SYMBOL: b3QuadWord.h<38:1> [b3QuadWord.h <243:1 243:1>]
SYMBOL_UNION public b3QuadWord::anonymous union (b3QuadWord.h<56:2>) [b3QuadWord.h <56:2 <56:2 56:6> 60:2>]
LOCAL_SYMBOL: b3QuadWord.h<56:8> [b3QuadWord.h <56:8 56:8>]
LOCAL_SYMBOL: b3QuadWord.h<56:8> [b3QuadWord.h <60:2 60:2>]
SYMBOL_FIELD public b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <57:16 57:22>]
REFERENCE_TYPE_USAGE b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 -> b3SimdFloat4 [b3QuadWord.h <57:3 57:14>]
SYMBOL_FIELD public b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <58:12 58:19>]
REFERENCE_TYPE_USAGE b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats -> b3Scalar [b3QuadWord.h <58:3 58:10>]
SYMBOL_STRUCT public b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>) [b3QuadWord.h <59:3 <59:3 59:8> 59:28>]
LOCAL_SYMBOL: b3QuadWord.h<59:10> [b3QuadWord.h <59:10 59:10>]
LOCAL_SYMBOL: b3QuadWord.h<59:10> [b3QuadWord.h <59:28 59:28>]
SYMBOL_FIELD public b3Scalar b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>)::x [b3QuadWord.h <59:20 59:20>]
REFERENCE_TYPE_USAGE b3Scalar b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>)::x -> b3Scalar [b3QuadWord.h <59:11 59:18>]
SYMBOL_FIELD public b3Scalar b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>)::y [b3QuadWord.h <59:22 59:22>]
REFERENCE_TYPE_USAGE b3Scalar b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>)::y -> b3Scalar [b3QuadWord.h <59:11 59:18>]
SYMBOL_FIELD public b3Scalar b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>)::z [b3QuadWord.h <59:24 59:24>]
REFERENCE_TYPE_USAGE b3Scalar b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>)::z -> b3Scalar [b3QuadWord.h <59:11 59:18>]
SYMBOL_FIELD public b3Scalar b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>)::w [b3QuadWord.h <59:26 59:26>]
REFERENCE_TYPE_USAGE b3Scalar b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>)::w -> b3Scalar [b3QuadWord.h <59:11 59:18>]
SYMBOL_METHOD public void b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>)::~() [b3QuadWord.h <59:3 59:8>]
SYMBOL_FIELD public b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>) b3QuadWord::anonymous union (b3QuadWord.h<56:2>):: [b3QuadWord.h <59:3 59:8>]
REFERENCE_TYPE_USAGE b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>) b3QuadWord::anonymous union (b3QuadWord.h<56:2>):: -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::anonymous struct (b3QuadWord.h<59:3>) [b3QuadWord.h <59:3 59:8>]
SYMBOL_METHOD public void b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::~() [b3QuadWord.h <56:2 56:6>]
SYMBOL_FIELD public b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <56:2 56:6>]
REFERENCE_TYPE_USAGE b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) [b3QuadWord.h <56:2 56:6>]
SYMBOL_METHOD public b3SimdFloat4 b3QuadWord::get128() const [b3QuadWord.h <62:2 <62:31 62:36> 65:2>]
REFERENCE_TYPE_USAGE b3SimdFloat4 b3QuadWord::get128() const -> b3SimdFloat4 [b3QuadWord.h <62:18 62:29>]
LOCAL_SYMBOL: b3QuadWord.h<63:2> [b3QuadWord.h <63:2 63:2>]
LOCAL_SYMBOL: b3QuadWord.h<63:2> [b3QuadWord.h <65:2 65:2>]
REFERENCE_CALL b3SimdFloat4 b3QuadWord::get128() const -> void __m128::__m128(const __m128 &) [b3QuadWord.h <64:10 64:16>]
REFERENCE_USAGE b3SimdFloat4 b3QuadWord::get128() const -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <64:10 64:16>]
REFERENCE_USAGE b3SimdFloat4 b3QuadWord::get128() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <64:10 64:16>]
SYMBOL_METHOD public void b3QuadWord::set128(b3SimdFloat4) [b3QuadWord.h <66:2 <66:23 66:28> 69:2>]
REFERENCE_TYPE_USAGE void b3QuadWord::set128(b3SimdFloat4) -> void [b3QuadWord.h <66:18 66:21>]
LOCAL_SYMBOL: b3QuadWord.h<66:43> [b3QuadWord.h <66:43 66:46>]
REFERENCE_TYPE_USAGE void b3QuadWord::set128(b3SimdFloat4) -> b3SimdFloat4 [b3QuadWord.h <66:30 66:41>]
LOCAL_SYMBOL: b3QuadWord.h<67:2> [b3QuadWord.h <67:2 67:2>]
LOCAL_SYMBOL: b3QuadWord.h<67:2> [b3QuadWord.h <69:2 69:2>]
REFERENCE_CALL void b3QuadWord::set128(b3SimdFloat4) -> __m128 & __m128::operator=(const __m128 &) [b3QuadWord.h <68:11 68:11>]
REFERENCE_USAGE void b3QuadWord::set128(b3SimdFloat4) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <68:3 68:9>]
REFERENCE_USAGE void b3QuadWord::set128(b3SimdFloat4) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <68:3 68:9>]
LOCAL_SYMBOL: b3QuadWord.h<66:43> [b3QuadWord.h <68:13 68:16>]
SYMBOL_METHOD public void b3QuadWord::b3QuadWord(const b3SimdFloat4) [b3QuadWord.h <86:2 <86:18 86:27> 89:2>]
LOCAL_SYMBOL: b3QuadWord.h<86:48> [b3QuadWord.h <86:48 86:50>]
REFERENCE_TYPE_USAGE void b3QuadWord::b3QuadWord(const b3SimdFloat4) -> b3SimdFloat4 [b3QuadWord.h <86:35 86:46>]
LOCAL_SYMBOL: b3QuadWord.h<87:2> [b3QuadWord.h <87:2 87:2>]
LOCAL_SYMBOL: b3QuadWord.h<87:2> [b3QuadWord.h <89:2 89:2>]
REFERENCE_CALL void b3QuadWord::b3QuadWord(const b3SimdFloat4) -> __m128 & __m128::operator=(const __m128 &) [b3QuadWord.h <88:11 88:11>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3SimdFloat4) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <88:3 88:9>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3SimdFloat4) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <88:3 88:9>]
LOCAL_SYMBOL: b3QuadWord.h<86:48> [b3QuadWord.h <88:13 88:15>]
SYMBOL_METHOD public void b3QuadWord::b3QuadWord(const b3QuadWord &) [b3QuadWord.h <92:2 <92:18 92:27> 95:2>]
LOCAL_SYMBOL: b3QuadWord.h<92:47> [b3QuadWord.h <92:47 92:49>]
REFERENCE_TYPE_USAGE void b3QuadWord::b3QuadWord(const b3QuadWord &) -> b3QuadWord [b3QuadWord.h <92:35 92:44>]
LOCAL_SYMBOL: b3QuadWord.h<93:2> [b3QuadWord.h <93:2 93:2>]
LOCAL_SYMBOL: b3QuadWord.h<93:2> [b3QuadWord.h <95:2 95:2>]
REFERENCE_CALL void b3QuadWord::b3QuadWord(const b3QuadWord &) -> __m128 & __m128::operator=(const __m128 &) [b3QuadWord.h <94:11 94:11>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3QuadWord &) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <94:3 94:9>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3QuadWord &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <94:3 94:9>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3QuadWord &) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <94:17 94:23>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3QuadWord &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <94:17 94:23>]
LOCAL_SYMBOL: b3QuadWord.h<92:47> [b3QuadWord.h <94:13 94:15>]
SYMBOL_METHOD public b3QuadWord & b3QuadWord::operator=(const b3QuadWord &) [b3QuadWord.h <98:2 <99:2 99:10> 104:2>]
REFERENCE_TYPE_USAGE b3QuadWord & b3QuadWord::operator=(const b3QuadWord &) -> b3QuadWord [b3QuadWord.h <98:18 98:27>]
LOCAL_SYMBOL: b3QuadWord.h<99:30> [b3QuadWord.h <99:30 99:30>]
REFERENCE_TYPE_USAGE b3QuadWord & b3QuadWord::operator=(const b3QuadWord &) -> b3QuadWord [b3QuadWord.h <99:18 99:27>]
LOCAL_SYMBOL: b3QuadWord.h<100:2> [b3QuadWord.h <100:2 100:2>]
LOCAL_SYMBOL: b3QuadWord.h<100:2> [b3QuadWord.h <104:2 104:2>]
REFERENCE_CALL b3QuadWord & b3QuadWord::operator=(const b3QuadWord &) -> __m128 & __m128::operator=(const __m128 &) [b3QuadWord.h <101:11 101:11>]
REFERENCE_USAGE b3QuadWord & b3QuadWord::operator=(const b3QuadWord &) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <101:3 101:9>]
REFERENCE_USAGE b3QuadWord & b3QuadWord::operator=(const b3QuadWord &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <101:3 101:9>]
REFERENCE_USAGE b3QuadWord & b3QuadWord::operator=(const b3QuadWord &) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <101:15 101:21>]
REFERENCE_USAGE b3QuadWord & b3QuadWord::operator=(const b3QuadWord &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <101:15 101:21>]
LOCAL_SYMBOL: b3QuadWord.h<99:30> [b3QuadWord.h <101:13 101:13>]
SYMBOL_METHOD public const b3Scalar & b3QuadWord::getX() const [b3QuadWord.h <109:3 <109:35 109:38> 109:70>]
REFERENCE_TYPE_USAGE const b3Scalar & b3QuadWord::getX() const -> b3Scalar [b3QuadWord.h <109:25 109:32>]
LOCAL_SYMBOL: b3QuadWord.h<109:48> [b3QuadWord.h <109:48 109:48>]
LOCAL_SYMBOL: b3QuadWord.h<109:48> [b3QuadWord.h <109:70 109:70>]
REFERENCE_USAGE const b3Scalar & b3QuadWord::getX() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <109:57 109:64>]
REFERENCE_USAGE const b3Scalar & b3QuadWord::getX() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <109:57 109:64>]
SYMBOL_METHOD public const b3Scalar & b3QuadWord::getY() const [b3QuadWord.h <111:3 <111:35 111:38> 111:70>]
REFERENCE_TYPE_USAGE const b3Scalar & b3QuadWord::getY() const -> b3Scalar [b3QuadWord.h <111:25 111:32>]
LOCAL_SYMBOL: b3QuadWord.h<111:48> [b3QuadWord.h <111:48 111:48>]
LOCAL_SYMBOL: b3QuadWord.h<111:48> [b3QuadWord.h <111:70 111:70>]
REFERENCE_USAGE const b3Scalar & b3QuadWord::getY() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <111:57 111:64>]
REFERENCE_USAGE const b3Scalar & b3QuadWord::getY() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <111:57 111:64>]
SYMBOL_METHOD public const b3Scalar & b3QuadWord::getZ() const [b3QuadWord.h <113:3 <113:35 113:38> 113:70>]
REFERENCE_TYPE_USAGE const b3Scalar & b3QuadWord::getZ() const -> b3Scalar [b3QuadWord.h <113:25 113:32>]
LOCAL_SYMBOL: b3QuadWord.h<113:48> [b3QuadWord.h <113:48 113:48>]
LOCAL_SYMBOL: b3QuadWord.h<113:48> [b3QuadWord.h <113:70 113:70>]
REFERENCE_USAGE const b3Scalar & b3QuadWord::getZ() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <113:57 113:64>]
REFERENCE_USAGE const b3Scalar & b3QuadWord::getZ() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <113:57 113:64>]
SYMBOL_METHOD public void b3QuadWord::setX(b3Scalar) [b3QuadWord.h <115:3 <115:24 115:27> 115:61>]
REFERENCE_TYPE_USAGE void b3QuadWord::setX(b3Scalar) -> void [b3QuadWord.h <115:19 115:22>]
LOCAL_SYMBOL: b3QuadWord.h<115:38> [b3QuadWord.h <115:38 115:39>]
REFERENCE_TYPE_USAGE void b3QuadWord::setX(b3Scalar) -> b3Scalar [b3QuadWord.h <115:29 115:36>]
LOCAL_SYMBOL: b3QuadWord.h<115:42> [b3QuadWord.h <115:42 115:42>]
LOCAL_SYMBOL: b3QuadWord.h<115:42> [b3QuadWord.h <115:61 115:61>]
REFERENCE_USAGE void b3QuadWord::setX(b3Scalar) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <115:44 115:51>]
REFERENCE_USAGE void b3QuadWord::setX(b3Scalar) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <115:44 115:51>]
LOCAL_SYMBOL: b3QuadWord.h<115:38> [b3QuadWord.h <115:58 115:59>]
SYMBOL_METHOD public void b3QuadWord::setY(b3Scalar) [b3QuadWord.h <117:3 <117:24 117:27> 117:61>]
REFERENCE_TYPE_USAGE void b3QuadWord::setY(b3Scalar) -> void [b3QuadWord.h <117:19 117:22>]
LOCAL_SYMBOL: b3QuadWord.h<117:38> [b3QuadWord.h <117:38 117:39>]
REFERENCE_TYPE_USAGE void b3QuadWord::setY(b3Scalar) -> b3Scalar [b3QuadWord.h <117:29 117:36>]
LOCAL_SYMBOL: b3QuadWord.h<117:42> [b3QuadWord.h <117:42 117:42>]
LOCAL_SYMBOL: b3QuadWord.h<117:42> [b3QuadWord.h <117:61 117:61>]
REFERENCE_USAGE void b3QuadWord::setY(b3Scalar) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <117:44 117:51>]
REFERENCE_USAGE void b3QuadWord::setY(b3Scalar) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <117:44 117:51>]
LOCAL_SYMBOL: b3QuadWord.h<117:38> [b3QuadWord.h <117:58 117:59>]
SYMBOL_METHOD public void b3QuadWord::setZ(b3Scalar) [b3QuadWord.h <119:3 <119:24 119:27> 119:61>]
REFERENCE_TYPE_USAGE void b3QuadWord::setZ(b3Scalar) -> void [b3QuadWord.h <119:19 119:22>]
LOCAL_SYMBOL: b3QuadWord.h<119:38> [b3QuadWord.h <119:38 119:39>]
REFERENCE_TYPE_USAGE void b3QuadWord::setZ(b3Scalar) -> b3Scalar [b3QuadWord.h <119:29 119:36>]
LOCAL_SYMBOL: b3QuadWord.h<119:42> [b3QuadWord.h <119:42 119:42>]
LOCAL_SYMBOL: b3QuadWord.h<119:42> [b3QuadWord.h <119:61 119:61>]
REFERENCE_USAGE void b3QuadWord::setZ(b3Scalar) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <119:44 119:51>]
REFERENCE_USAGE void b3QuadWord::setZ(b3Scalar) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <119:44 119:51>]
LOCAL_SYMBOL: b3QuadWord.h<119:38> [b3QuadWord.h <119:58 119:59>]
SYMBOL_METHOD public void b3QuadWord::setW(b3Scalar) [b3QuadWord.h <121:3 <121:24 121:27> 121:61>]
REFERENCE_TYPE_USAGE void b3QuadWord::setW(b3Scalar) -> void [b3QuadWord.h <121:19 121:22>]
LOCAL_SYMBOL: b3QuadWord.h<121:38> [b3QuadWord.h <121:38 121:39>]
REFERENCE_TYPE_USAGE void b3QuadWord::setW(b3Scalar) -> b3Scalar [b3QuadWord.h <121:29 121:36>]
LOCAL_SYMBOL: b3QuadWord.h<121:42> [b3QuadWord.h <121:42 121:42>]
LOCAL_SYMBOL: b3QuadWord.h<121:42> [b3QuadWord.h <121:61 121:61>]
REFERENCE_USAGE void b3QuadWord::setW(b3Scalar) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <121:44 121:51>]
REFERENCE_USAGE void b3QuadWord::setW(b3Scalar) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <121:44 121:51>]
LOCAL_SYMBOL: b3QuadWord.h<121:38> [b3QuadWord.h <121:58 121:59>]
SYMBOL_METHOD public b3Scalar * b3QuadWord::operator float *() [b3QuadWord.h <128:2 <128:18 128:42> 128:75>]
REFERENCE_TYPE_USAGE b3Scalar * b3QuadWord::operator float *() -> b3Scalar [b3QuadWord.h <128:33 128:40>]
LOCAL_SYMBOL: b3QuadWord.h<128:52> [b3QuadWord.h <128:52 128:52>]
LOCAL_SYMBOL: b3QuadWord.h<128:52> [b3QuadWord.h <128:75 128:75>]
REFERENCE_USAGE b3Scalar * b3QuadWord::operator float *() -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <128:62 128:69>]
REFERENCE_USAGE b3Scalar * b3QuadWord::operator float *() -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <128:62 128:69>]
SYMBOL_METHOD public const b3Scalar * b3QuadWord::operator const float *() const [b3QuadWord.h <129:2 <129:18 129:42> 129:75>]
REFERENCE_TYPE_USAGE const b3Scalar * b3QuadWord::operator const float *() const -> b3Scalar [b3QuadWord.h <129:33 129:40>]
LOCAL_SYMBOL: b3QuadWord.h<129:52> [b3QuadWord.h <129:52 129:52>]
LOCAL_SYMBOL: b3QuadWord.h<129:52> [b3QuadWord.h <129:75 129:75>]
REFERENCE_USAGE const b3Scalar * b3QuadWord::operator const float *() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <129:62 129:69>]
REFERENCE_USAGE const b3Scalar * b3QuadWord::operator const float *() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <129:62 129:69>]
SYMBOL_METHOD public bool b3QuadWord::operator==(const b3QuadWord &) const [b3QuadWord.h <131:2 <131:23 131:32> 141:2>]
REFERENCE_TYPE_USAGE bool b3QuadWord::operator==(const b3QuadWord &) const -> bool [b3QuadWord.h <131:18 131:21>]
LOCAL_SYMBOL: b3QuadWord.h<131:52> [b3QuadWord.h <131:52 131:56>]
REFERENCE_TYPE_USAGE bool b3QuadWord::operator==(const b3QuadWord &) const -> b3QuadWord [b3QuadWord.h <131:40 131:49>]
LOCAL_SYMBOL: b3QuadWord.h<132:2> [b3QuadWord.h <132:2 132:2>]
LOCAL_SYMBOL: b3QuadWord.h<132:2> [b3QuadWord.h <141:2 141:2>]
SYMBOL_FUNCTION int _mm_movemask_ps(__m128)
REFERENCE_CALL bool b3QuadWord::operator==(const b3QuadWord &) const -> int _mm_movemask_ps(__m128) [b3QuadWord.h <134:24 134:38>]
REFERENCE_TYPE_USAGE bool b3QuadWord::operator==(const b3QuadWord &) const -> __m128 [b3QuadWord.h <134:41 134:46>]
SYMBOL_FUNCTION __m128 _mm_cmpeq_ps(__m128, __m128)
REFERENCE_CALL bool b3QuadWord::operator==(const b3QuadWord &) const -> __m128 _mm_cmpeq_ps(__m128, __m128) [b3QuadWord.h <134:48 134:59>]
REFERENCE_CALL bool b3QuadWord::operator==(const b3QuadWord &) const -> void __m128::__m128(const __m128 &) [b3QuadWord.h <134:61 134:67>]
REFERENCE_USAGE bool b3QuadWord::operator==(const b3QuadWord &) const -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <134:61 134:67>]
REFERENCE_USAGE bool b3QuadWord::operator==(const b3QuadWord &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <134:61 134:67>]
REFERENCE_CALL bool b3QuadWord::operator==(const b3QuadWord &) const -> void __m128::__m128(const __m128 &) [b3QuadWord.h <134:76 134:82>]
REFERENCE_USAGE bool b3QuadWord::operator==(const b3QuadWord &) const -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <134:76 134:82>]
REFERENCE_USAGE bool b3QuadWord::operator==(const b3QuadWord &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <134:76 134:82>]
LOCAL_SYMBOL: b3QuadWord.h<131:52> [b3QuadWord.h <134:70 134:74>]
SYMBOL_METHOD public bool b3QuadWord::operator!=(const b3QuadWord &) const [b3QuadWord.h <143:2 <143:23 143:32> 146:2>]
REFERENCE_TYPE_USAGE bool b3QuadWord::operator!=(const b3QuadWord &) const -> bool [b3QuadWord.h <143:18 143:21>]
LOCAL_SYMBOL: b3QuadWord.h<143:52> [b3QuadWord.h <143:52 143:56>]
REFERENCE_TYPE_USAGE bool b3QuadWord::operator!=(const b3QuadWord &) const -> b3QuadWord [b3QuadWord.h <143:40 143:49>]
LOCAL_SYMBOL: b3QuadWord.h<144:2> [b3QuadWord.h <144:2 144:2>]
LOCAL_SYMBOL: b3QuadWord.h<144:2> [b3QuadWord.h <146:2 146:2>]
SYMBOL_FUNCTION bool b3QuadWord::operator==(const b3QuadWord &) const
REFERENCE_CALL bool b3QuadWord::operator!=(const b3QuadWord &) const -> bool b3QuadWord::operator==(const b3QuadWord &) const [b3QuadWord.h <145:18 145:19>]
LOCAL_SYMBOL: b3QuadWord.h<143:52> [b3QuadWord.h <145:21 145:25>]
SYMBOL_METHOD public void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3QuadWord.h <153:3 <153:25 153:32> 159:3>]
REFERENCE_TYPE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void [b3QuadWord.h <153:19 153:22>]
LOCAL_SYMBOL: b3QuadWord.h<153:50> [b3QuadWord.h <153:50 153:51>]
REFERENCE_TYPE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <153:40 153:47>]
LOCAL_SYMBOL: b3QuadWord.h<153:70> [b3QuadWord.h <153:70 153:71>]
REFERENCE_TYPE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <153:60 153:67>]
LOCAL_SYMBOL: b3QuadWord.h<153:90> [b3QuadWord.h <153:90 153:91>]
REFERENCE_TYPE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <153:80 153:87>]
LOCAL_SYMBOL: b3QuadWord.h<154:3> [b3QuadWord.h <154:3 154:3>]
LOCAL_SYMBOL: b3QuadWord.h<154:3> [b3QuadWord.h <159:3 159:3>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <155:4 155:11>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <155:4 155:11>]
LOCAL_SYMBOL: b3QuadWord.h<153:50> [b3QuadWord.h <155:16 155:17>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <156:4 156:11>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <156:4 156:11>]
LOCAL_SYMBOL: b3QuadWord.h<153:70> [b3QuadWord.h <156:16 156:17>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <157:4 157:11>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <157:4 157:11>]
LOCAL_SYMBOL: b3QuadWord.h<153:90> [b3QuadWord.h <157:16 157:17>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <158:4 158:11>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <158:4 158:11>]
SYMBOL_METHOD public void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3QuadWord.h <174:3 <174:24 174:31> 180:3>]
REFERENCE_TYPE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void [b3QuadWord.h <174:19 174:22>]
LOCAL_SYMBOL: b3QuadWord.h<174:49> [b3QuadWord.h <174:49 174:50>]
REFERENCE_TYPE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <174:39 174:46>]
LOCAL_SYMBOL: b3QuadWord.h<174:69> [b3QuadWord.h <174:69 174:70>]
REFERENCE_TYPE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <174:59 174:66>]
LOCAL_SYMBOL: b3QuadWord.h<174:89> [b3QuadWord.h <174:89 174:90>]
REFERENCE_TYPE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <174:79 174:86>]
LOCAL_SYMBOL: b3QuadWord.h<174:108> [b3QuadWord.h <174:108 174:109>]
REFERENCE_TYPE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <174:98 174:105>]
LOCAL_SYMBOL: b3QuadWord.h<175:3> [b3QuadWord.h <175:3 175:3>]
LOCAL_SYMBOL: b3QuadWord.h<175:3> [b3QuadWord.h <180:3 180:3>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <176:4 176:11>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <176:4 176:11>]
LOCAL_SYMBOL: b3QuadWord.h<174:49> [b3QuadWord.h <176:16 176:17>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <177:4 177:11>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <177:4 177:11>]
LOCAL_SYMBOL: b3QuadWord.h<174:69> [b3QuadWord.h <177:16 177:17>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <178:4 178:11>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <178:4 178:11>]
LOCAL_SYMBOL: b3QuadWord.h<174:89> [b3QuadWord.h <178:16 178:17>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <179:4 179:11>]
REFERENCE_USAGE void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <179:4 179:11>]
LOCAL_SYMBOL: b3QuadWord.h<174:108> [b3QuadWord.h <179:16 179:17>]
SYMBOL_METHOD public void b3QuadWord::b3QuadWord() [b3QuadWord.h <182:3 <182:19 182:28> 185:3>]
LOCAL_SYMBOL: b3QuadWord.h<184:3> [b3QuadWord.h <184:3 184:3>]
LOCAL_SYMBOL: b3QuadWord.h<184:3> [b3QuadWord.h <185:3 185:3>]
SYMBOL_METHOD public void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3QuadWord.h <192:3 <192:19 192:28> 195:3>]
LOCAL_SYMBOL: b3QuadWord.h<192:46> [b3QuadWord.h <192:46 192:47>]
REFERENCE_TYPE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <192:36 192:43>]
LOCAL_SYMBOL: b3QuadWord.h<192:66> [b3QuadWord.h <192:66 192:67>]
REFERENCE_TYPE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <192:56 192:63>]
LOCAL_SYMBOL: b3QuadWord.h<192:86> [b3QuadWord.h <192:86 192:87>]
REFERENCE_TYPE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <192:76 192:83>]
LOCAL_SYMBOL: b3QuadWord.h<193:3> [b3QuadWord.h <193:3 193:3>]
LOCAL_SYMBOL: b3QuadWord.h<193:3> [b3QuadWord.h <195:3 195:3>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <194:4 194:11>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <194:4 194:11>]
LOCAL_SYMBOL: b3QuadWord.h<192:46> [b3QuadWord.h <194:18 194:19>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <194:22 194:29>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <194:22 194:29>]
LOCAL_SYMBOL: b3QuadWord.h<192:66> [b3QuadWord.h <194:36 194:37>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <194:40 194:47>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <194:40 194:47>]
LOCAL_SYMBOL: b3QuadWord.h<192:86> [b3QuadWord.h <194:54 194:55>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <194:58 194:65>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <194:58 194:65>]
SYMBOL_METHOD public void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3QuadWord.h <203:3 <203:19 203:28> 206:3>]
LOCAL_SYMBOL: b3QuadWord.h<203:46> [b3QuadWord.h <203:46 203:47>]
REFERENCE_TYPE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <203:36 203:43>]
LOCAL_SYMBOL: b3QuadWord.h<203:66> [b3QuadWord.h <203:66 203:67>]
REFERENCE_TYPE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <203:56 203:63>]
LOCAL_SYMBOL: b3QuadWord.h<203:86> [b3QuadWord.h <203:86 203:87>]
REFERENCE_TYPE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <203:76 203:83>]
LOCAL_SYMBOL: b3QuadWord.h<203:105> [b3QuadWord.h <203:105 203:106>]
REFERENCE_TYPE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3QuadWord.h <203:95 203:102>]
LOCAL_SYMBOL: b3QuadWord.h<204:3> [b3QuadWord.h <204:3 204:3>]
LOCAL_SYMBOL: b3QuadWord.h<204:3> [b3QuadWord.h <206:3 206:3>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <205:4 205:11>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <205:4 205:11>]
LOCAL_SYMBOL: b3QuadWord.h<203:46> [b3QuadWord.h <205:18 205:19>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <205:22 205:29>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <205:22 205:29>]
LOCAL_SYMBOL: b3QuadWord.h<203:66> [b3QuadWord.h <205:36 205:37>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <205:40 205:47>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <205:40 205:47>]
LOCAL_SYMBOL: b3QuadWord.h<203:86> [b3QuadWord.h <205:54 205:55>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3QuadWord.h <205:58 205:65>]
REFERENCE_USAGE void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <205:58 205:65>]
LOCAL_SYMBOL: b3QuadWord.h<203:105> [b3QuadWord.h <205:72 205:73>]
SYMBOL_METHOD public void b3QuadWord::setMax(const b3QuadWord &) [b3QuadWord.h <211:3 <211:24 211:29> 223:9>]
REFERENCE_TYPE_USAGE void b3QuadWord::setMax(const b3QuadWord &) -> void [b3QuadWord.h <211:19 211:22>]
LOCAL_SYMBOL: b3QuadWord.h<211:49> [b3QuadWord.h <211:49 211:53>]
REFERENCE_TYPE_USAGE void b3QuadWord::setMax(const b3QuadWord &) -> b3QuadWord [b3QuadWord.h <211:37 211:46>]
LOCAL_SYMBOL: b3QuadWord.h<212:3> [b3QuadWord.h <212:3 212:3>]
LOCAL_SYMBOL: b3QuadWord.h<212:3> [b3QuadWord.h <223:9 223:9>]
SYMBOL_FUNCTION __m128 & __m128::operator=(__m128 &&)
REFERENCE_CALL void b3QuadWord::setMax(const b3QuadWord &) -> __m128 & __m128::operator=(__m128 &&) [b3QuadWord.h <214:21 214:21>]
REFERENCE_USAGE void b3QuadWord::setMax(const b3QuadWord &) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <214:13 214:19>]
REFERENCE_USAGE void b3QuadWord::setMax(const b3QuadWord &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <214:13 214:19>]
SYMBOL_FUNCTION __m128 _mm_max_ps(__m128, __m128)
REFERENCE_CALL void b3QuadWord::setMax(const b3QuadWord &) -> __m128 _mm_max_ps(__m128, __m128) [b3QuadWord.h <214:23 214:32>]
REFERENCE_CALL void b3QuadWord::setMax(const b3QuadWord &) -> void __m128::__m128(const __m128 &) [b3QuadWord.h <214:34 214:40>]
REFERENCE_USAGE void b3QuadWord::setMax(const b3QuadWord &) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <214:34 214:40>]
REFERENCE_USAGE void b3QuadWord::setMax(const b3QuadWord &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <214:34 214:40>]
REFERENCE_CALL void b3QuadWord::setMax(const b3QuadWord &) -> void __m128::__m128(const __m128 &) [b3QuadWord.h <214:49 214:55>]
REFERENCE_USAGE void b3QuadWord::setMax(const b3QuadWord &) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <214:49 214:55>]
REFERENCE_USAGE void b3QuadWord::setMax(const b3QuadWord &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <214:49 214:55>]
LOCAL_SYMBOL: b3QuadWord.h<211:49> [b3QuadWord.h <214:43 214:47>]
SYMBOL_METHOD public void b3QuadWord::setMin(const b3QuadWord &) [b3QuadWord.h <227:3 <227:24 227:29> 239:9>]
REFERENCE_TYPE_USAGE void b3QuadWord::setMin(const b3QuadWord &) -> void [b3QuadWord.h <227:19 227:22>]
LOCAL_SYMBOL: b3QuadWord.h<227:49> [b3QuadWord.h <227:49 227:53>]
REFERENCE_TYPE_USAGE void b3QuadWord::setMin(const b3QuadWord &) -> b3QuadWord [b3QuadWord.h <227:37 227:46>]
LOCAL_SYMBOL: b3QuadWord.h<228:3> [b3QuadWord.h <228:3 228:3>]
LOCAL_SYMBOL: b3QuadWord.h<228:3> [b3QuadWord.h <239:9 239:9>]
REFERENCE_CALL void b3QuadWord::setMin(const b3QuadWord &) -> __m128 & __m128::operator=(__m128 &&) [b3QuadWord.h <230:21 230:21>]
REFERENCE_USAGE void b3QuadWord::setMin(const b3QuadWord &) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <230:13 230:19>]
REFERENCE_USAGE void b3QuadWord::setMin(const b3QuadWord &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <230:13 230:19>]
SYMBOL_FUNCTION __m128 _mm_min_ps(__m128, __m128)
REFERENCE_CALL void b3QuadWord::setMin(const b3QuadWord &) -> __m128 _mm_min_ps(__m128, __m128) [b3QuadWord.h <230:23 230:32>]
REFERENCE_CALL void b3QuadWord::setMin(const b3QuadWord &) -> void __m128::__m128(const __m128 &) [b3QuadWord.h <230:34 230:40>]
REFERENCE_USAGE void b3QuadWord::setMin(const b3QuadWord &) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <230:34 230:40>]
REFERENCE_USAGE void b3QuadWord::setMin(const b3QuadWord &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <230:34 230:40>]
REFERENCE_CALL void b3QuadWord::setMin(const b3QuadWord &) -> void __m128::__m128(const __m128 &) [b3QuadWord.h <230:49 230:55>]
REFERENCE_USAGE void b3QuadWord::setMin(const b3QuadWord &) -> b3SimdFloat4 b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::mVec128 [b3QuadWord.h <230:49 230:55>]
REFERENCE_USAGE void b3QuadWord::setMin(const b3QuadWord &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3QuadWord.h <230:49 230:55>]
LOCAL_SYMBOL: b3QuadWord.h<227:49> [b3QuadWord.h <230:43 230:47>]
SYMBOL_METHOD public void b3QuadWord::~b3QuadWord() [b3QuadWord.h <34:31 34:40>]
SYMBOL_GLOBAL_VARIABLE const __m128 b3vOnes [b3Quaternion.h <30:37 30:43>]
REFERENCE_TYPE_USAGE const __m128 b3vOnes -> __m128 [b3Quaternion.h <30:7 30:12>]
LOCAL_SYMBOL: b3Quaternion.h<30:48> [b3Quaternion.h <30:48 30:48>]
LOCAL_SYMBOL: b3Quaternion.h<30:48> [b3Quaternion.h <30:71 30:71>]
SYMBOL_GLOBAL_VARIABLE const b3SimdFloat4 b3vQInv [b3Quaternion.h <36:43 36:49>]
REFERENCE_TYPE_USAGE const b3SimdFloat4 b3vQInv -> b3SimdFloat4 [b3Quaternion.h <36:7 36:18>]
LOCAL_SYMBOL: b3Quaternion.h<36:54> [b3Quaternion.h <36:54 36:54>]
LOCAL_SYMBOL: b3Quaternion.h<36:54> [b3Quaternion.h <36:81 36:81>]
LOCAL_SYMBOL: b3Quaternion.h<36:55> [b3Quaternion.h <36:55 36:55>]
SYMBOL_GLOBAL_VARIABLE const b3SimdFloat4 b3vPPPM [b3Quaternion.h <37:43 37:49>]
REFERENCE_TYPE_USAGE const b3SimdFloat4 b3vPPPM -> b3SimdFloat4 [b3Quaternion.h <37:7 37:18>]
LOCAL_SYMBOL: b3Quaternion.h<37:54> [b3Quaternion.h <37:54 37:54>]
LOCAL_SYMBOL: b3Quaternion.h<37:54> [b3Quaternion.h <37:81 37:81>]
LOCAL_SYMBOL: b3Quaternion.h<37:55> [b3Quaternion.h <37:55 37:55>]
SYMBOL_CLASS b3Quaternion [b3Quaternion.h <42:1 <42:7 42:18> 558:1>]
LOCAL_SYMBOL: b3Quaternion.h<42:40> [b3Quaternion.h <42:40 42:40>]
LOCAL_SYMBOL: b3Quaternion.h<42:40> [b3Quaternion.h <558:1 558:1>]
REFERENCE_INHERITANCE b3Quaternion -> b3QuadWord [b3Quaternion.h <42:29 42:38>]
SYMBOL_METHOD public void b3Quaternion::b3Quaternion() [b3Quaternion.h <45:2 <45:2 45:13> 45:18>]
SYMBOL_FUNCTION void b3QuadWord::b3QuadWord()
REFERENCE_CALL void b3Quaternion::b3Quaternion() -> void b3QuadWord::b3QuadWord() [b3Quaternion.h <45:2 45:13>]
LOCAL_SYMBOL: b3Quaternion.h<45:17> [b3Quaternion.h <45:17 45:17>]
LOCAL_SYMBOL: b3Quaternion.h<45:17> [b3Quaternion.h <45:18 45:18>]
SYMBOL_METHOD public void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <74:2 <74:2 74:13> 78:2>]
LOCAL_SYMBOL: b3Quaternion.h<74:31> [b3Quaternion.h <74:31 74:32>]
REFERENCE_TYPE_USAGE void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <74:21 74:28>]
LOCAL_SYMBOL: b3Quaternion.h<74:51> [b3Quaternion.h <74:51 74:52>]
REFERENCE_TYPE_USAGE void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <74:41 74:48>]
LOCAL_SYMBOL: b3Quaternion.h<74:71> [b3Quaternion.h <74:71 74:72>]
REFERENCE_TYPE_USAGE void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <74:61 74:68>]
LOCAL_SYMBOL: b3Quaternion.h<74:91> [b3Quaternion.h <74:91 74:92>]
REFERENCE_TYPE_USAGE void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <74:81 74:88>]
REFERENCE_TYPE_USAGE void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3QuadWord [b3Quaternion.h <75:5 75:14>]
SYMBOL_FUNCTION void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &)
REFERENCE_CALL void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void b3QuadWord::b3QuadWord(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <75:5 75:14>]
LOCAL_SYMBOL: b3Quaternion.h<74:31> [b3Quaternion.h <75:16 75:17>]
LOCAL_SYMBOL: b3Quaternion.h<74:51> [b3Quaternion.h <75:20 75:21>]
LOCAL_SYMBOL: b3Quaternion.h<74:71> [b3Quaternion.h <75:24 75:25>]
LOCAL_SYMBOL: b3Quaternion.h<74:91> [b3Quaternion.h <75:28 75:29>]
LOCAL_SYMBOL: b3Quaternion.h<76:2> [b3Quaternion.h <76:2 76:2>]
LOCAL_SYMBOL: b3Quaternion.h<76:2> [b3Quaternion.h <78:2 78:2>]
SYMBOL_METHOD public void b3Quaternion::b3Quaternion(const b3Vector3 &, const b3Scalar &) [b3Quaternion.h <82:2 <82:2 82:13> 85:2>]
LOCAL_SYMBOL: b3Quaternion.h<82:32> [b3Quaternion.h <82:32 82:36>]
REFERENCE_TYPE_USAGE void b3Quaternion::b3Quaternion(const b3Vector3 &, const b3Scalar &) -> b3Vector3 [b3Quaternion.h <82:21 82:29>]
LOCAL_SYMBOL: b3Quaternion.h<82:55> [b3Quaternion.h <82:55 82:60>]
REFERENCE_TYPE_USAGE void b3Quaternion::b3Quaternion(const b3Vector3 &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <82:45 82:52>]
REFERENCE_CALL void b3Quaternion::b3Quaternion(const b3Vector3 &, const b3Scalar &) -> void b3QuadWord::b3QuadWord() [b3Quaternion.h <82:2 82:13>]
LOCAL_SYMBOL: b3Quaternion.h<83:2> [b3Quaternion.h <83:2 83:2>]
LOCAL_SYMBOL: b3Quaternion.h<83:2> [b3Quaternion.h <85:2 85:2>]
SYMBOL_FUNCTION void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &)
REFERENCE_CALL void b3Quaternion::b3Quaternion(const b3Vector3 &, const b3Scalar &) -> void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) [b3Quaternion.h <84:3 84:13>]
LOCAL_SYMBOL: b3Quaternion.h<82:32> [b3Quaternion.h <84:15 84:19>]
LOCAL_SYMBOL: b3Quaternion.h<82:55> [b3Quaternion.h <84:22 84:27>]
SYMBOL_METHOD public void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <90:2 <90:2 90:13> 97:2>]
LOCAL_SYMBOL: b3Quaternion.h<90:31> [b3Quaternion.h <90:31 90:33>]
REFERENCE_TYPE_USAGE void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <90:21 90:28>]
LOCAL_SYMBOL: b3Quaternion.h<90:52> [b3Quaternion.h <90:52 90:56>]
REFERENCE_TYPE_USAGE void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <90:42 90:49>]
LOCAL_SYMBOL: b3Quaternion.h<90:75> [b3Quaternion.h <90:75 90:78>]
REFERENCE_TYPE_USAGE void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <90:65 90:72>]
REFERENCE_CALL void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void b3QuadWord::b3QuadWord() [b3Quaternion.h <90:2 90:13>]
LOCAL_SYMBOL: b3Quaternion.h<91:2> [b3Quaternion.h <91:2 91:2>]
LOCAL_SYMBOL: b3Quaternion.h<91:2> [b3Quaternion.h <97:2 97:2>]
SYMBOL_FUNCTION void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &)
REFERENCE_CALL void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <93:3 93:10>]
LOCAL_SYMBOL: b3Quaternion.h<90:31> [b3Quaternion.h <93:12 93:14>]
LOCAL_SYMBOL: b3Quaternion.h<90:52> [b3Quaternion.h <93:17 93:21>]
LOCAL_SYMBOL: b3Quaternion.h<90:75> [b3Quaternion.h <93:24 93:27>]
SYMBOL_METHOD public void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) [b3Quaternion.h <101:2 <101:7 101:17> 108:2>]
REFERENCE_TYPE_USAGE void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> void [b3Quaternion.h <101:2 101:5>]
LOCAL_SYMBOL: b3Quaternion.h<101:36> [b3Quaternion.h <101:36 101:39>]
REFERENCE_TYPE_USAGE void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> b3Vector3 [b3Quaternion.h <101:25 101:33>]
LOCAL_SYMBOL: b3Quaternion.h<101:58> [b3Quaternion.h <101:58 101:63>]
REFERENCE_TYPE_USAGE void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <101:48 101:55>]
LOCAL_SYMBOL: b3Quaternion.h<102:2> [b3Quaternion.h <102:2 102:2>]
LOCAL_SYMBOL: b3Quaternion.h<102:2> [b3Quaternion.h <108:2 108:2>]
LOCAL_SYMBOL: b3Quaternion.h<103:12> [b3Quaternion.h <103:12 103:12>]
REFERENCE_TYPE_USAGE void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <103:3 103:10>]
REFERENCE_CALL void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> b3Scalar b3Vector3::length() const [b3Quaternion.h <103:21 103:26>]
LOCAL_SYMBOL: b3Quaternion.h<101:36> [b3Quaternion.h <103:16 103:19>]
LOCAL_SYMBOL: b3Quaternion.h<105:12> [b3Quaternion.h <105:12 105:12>]
REFERENCE_TYPE_USAGE void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <105:3 105:10>]
REFERENCE_CALL void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> b3Scalar b3Sin(b3Scalar) [b3Quaternion.h <105:16 105:20>]
LOCAL_SYMBOL: b3Quaternion.h<101:58> [b3Quaternion.h <105:22 105:27>]
REFERENCE_TYPE_USAGE void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <105:31 105:38>]
LOCAL_SYMBOL: b3Quaternion.h<103:12> [b3Quaternion.h <105:48 105:48>]
SYMBOL_FUNCTION void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &)
REFERENCE_CALL void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <106:3 106:10>]
REFERENCE_CALL void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getX() const [b3Quaternion.h <106:17 106:20>]
LOCAL_SYMBOL: b3Quaternion.h<101:36> [b3Quaternion.h <106:12 106:15>]
LOCAL_SYMBOL: b3Quaternion.h<105:12> [b3Quaternion.h <106:26 106:26>]
REFERENCE_CALL void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getY() const [b3Quaternion.h <106:34 106:37>]
LOCAL_SYMBOL: b3Quaternion.h<101:36> [b3Quaternion.h <106:29 106:32>]
LOCAL_SYMBOL: b3Quaternion.h<105:12> [b3Quaternion.h <106:43 106:43>]
REFERENCE_CALL void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getZ() const [b3Quaternion.h <106:51 106:54>]
LOCAL_SYMBOL: b3Quaternion.h<101:36> [b3Quaternion.h <106:46 106:49>]
LOCAL_SYMBOL: b3Quaternion.h<105:12> [b3Quaternion.h <106:60 106:60>]
REFERENCE_CALL void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> b3Scalar b3Cos(b3Scalar) [b3Quaternion.h <107:4 107:8>]
LOCAL_SYMBOL: b3Quaternion.h<101:58> [b3Quaternion.h <107:10 107:15>]
REFERENCE_TYPE_USAGE void b3Quaternion::setRotation(const b3Vector3 &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <107:19 107:26>]
SYMBOL_METHOD public void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <113:2 <113:7 113:14> 128:2>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void [b3Quaternion.h <113:2 113:5>]
LOCAL_SYMBOL: b3Quaternion.h<113:32> [b3Quaternion.h <113:32 113:34>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <113:22 113:29>]
LOCAL_SYMBOL: b3Quaternion.h<113:53> [b3Quaternion.h <113:53 113:57>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <113:43 113:50>]
LOCAL_SYMBOL: b3Quaternion.h<113:76> [b3Quaternion.h <113:76 113:79>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <113:66 113:73>]
LOCAL_SYMBOL: b3Quaternion.h<114:2> [b3Quaternion.h <114:2 114:2>]
LOCAL_SYMBOL: b3Quaternion.h<114:2> [b3Quaternion.h <128:2 128:2>]
LOCAL_SYMBOL: b3Quaternion.h<115:12> [b3Quaternion.h <115:12 115:18>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <115:3 115:10>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <115:22 115:29>]
LOCAL_SYMBOL: b3Quaternion.h<113:32> [b3Quaternion.h <115:31 115:33>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <115:38 115:45>]
LOCAL_SYMBOL: b3Quaternion.h<116:12> [b3Quaternion.h <116:12 116:20>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <116:3 116:10>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <116:24 116:31>]
LOCAL_SYMBOL: b3Quaternion.h<113:53> [b3Quaternion.h <116:33 116:37>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <116:42 116:49>]
LOCAL_SYMBOL: b3Quaternion.h<117:12> [b3Quaternion.h <117:12 117:19>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <117:3 117:10>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <117:23 117:30>]
LOCAL_SYMBOL: b3Quaternion.h<113:76> [b3Quaternion.h <117:32 117:35>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <117:40 117:47>]
LOCAL_SYMBOL: b3Quaternion.h<118:12> [b3Quaternion.h <118:12 118:17>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <118:3 118:10>]
REFERENCE_CALL void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Cos(b3Scalar) [b3Quaternion.h <118:21 118:25>]
LOCAL_SYMBOL: b3Quaternion.h<115:12> [b3Quaternion.h <118:27 118:33>]
LOCAL_SYMBOL: b3Quaternion.h<119:12> [b3Quaternion.h <119:12 119:17>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <119:3 119:10>]
REFERENCE_CALL void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Sin(b3Scalar) [b3Quaternion.h <119:21 119:25>]
LOCAL_SYMBOL: b3Quaternion.h<115:12> [b3Quaternion.h <119:27 119:33>]
LOCAL_SYMBOL: b3Quaternion.h<120:12> [b3Quaternion.h <120:12 120:19>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <120:3 120:10>]
REFERENCE_CALL void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Cos(b3Scalar) [b3Quaternion.h <120:23 120:27>]
LOCAL_SYMBOL: b3Quaternion.h<116:12> [b3Quaternion.h <120:29 120:37>]
LOCAL_SYMBOL: b3Quaternion.h<121:12> [b3Quaternion.h <121:12 121:19>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <121:3 121:10>]
REFERENCE_CALL void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Sin(b3Scalar) [b3Quaternion.h <121:23 121:27>]
LOCAL_SYMBOL: b3Quaternion.h<116:12> [b3Quaternion.h <121:29 121:37>]
LOCAL_SYMBOL: b3Quaternion.h<122:12> [b3Quaternion.h <122:12 122:18>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <122:3 122:10>]
REFERENCE_CALL void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Cos(b3Scalar) [b3Quaternion.h <122:22 122:26>]
LOCAL_SYMBOL: b3Quaternion.h<117:12> [b3Quaternion.h <122:28 122:35>]
LOCAL_SYMBOL: b3Quaternion.h<123:12> [b3Quaternion.h <123:12 123:18>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <123:3 123:10>]
REFERENCE_CALL void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Sin(b3Scalar) [b3Quaternion.h <123:22 123:26>]
LOCAL_SYMBOL: b3Quaternion.h<117:12> [b3Quaternion.h <123:28 123:35>]
REFERENCE_CALL void b3Quaternion::setEuler(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <124:3 124:10>]
LOCAL_SYMBOL: b3Quaternion.h<122:12> [b3Quaternion.h <124:12 124:18>]
LOCAL_SYMBOL: b3Quaternion.h<121:12> [b3Quaternion.h <124:22 124:29>]
LOCAL_SYMBOL: b3Quaternion.h<118:12> [b3Quaternion.h <124:33 124:38>]
LOCAL_SYMBOL: b3Quaternion.h<123:12> [b3Quaternion.h <124:42 124:48>]
LOCAL_SYMBOL: b3Quaternion.h<120:12> [b3Quaternion.h <124:52 124:59>]
LOCAL_SYMBOL: b3Quaternion.h<119:12> [b3Quaternion.h <124:63 124:68>]
LOCAL_SYMBOL: b3Quaternion.h<122:12> [b3Quaternion.h <125:4 125:10>]
LOCAL_SYMBOL: b3Quaternion.h<120:12> [b3Quaternion.h <125:14 125:21>]
LOCAL_SYMBOL: b3Quaternion.h<119:12> [b3Quaternion.h <125:25 125:30>]
LOCAL_SYMBOL: b3Quaternion.h<123:12> [b3Quaternion.h <125:34 125:40>]
LOCAL_SYMBOL: b3Quaternion.h<121:12> [b3Quaternion.h <125:44 125:51>]
LOCAL_SYMBOL: b3Quaternion.h<118:12> [b3Quaternion.h <125:55 125:60>]
LOCAL_SYMBOL: b3Quaternion.h<123:12> [b3Quaternion.h <126:4 126:10>]
LOCAL_SYMBOL: b3Quaternion.h<120:12> [b3Quaternion.h <126:14 126:21>]
LOCAL_SYMBOL: b3Quaternion.h<118:12> [b3Quaternion.h <126:25 126:30>]
LOCAL_SYMBOL: b3Quaternion.h<122:12> [b3Quaternion.h <126:34 126:40>]
LOCAL_SYMBOL: b3Quaternion.h<121:12> [b3Quaternion.h <126:44 126:51>]
LOCAL_SYMBOL: b3Quaternion.h<119:12> [b3Quaternion.h <126:55 126:60>]
LOCAL_SYMBOL: b3Quaternion.h<122:12> [b3Quaternion.h <127:4 127:10>]
LOCAL_SYMBOL: b3Quaternion.h<120:12> [b3Quaternion.h <127:14 127:21>]
LOCAL_SYMBOL: b3Quaternion.h<118:12> [b3Quaternion.h <127:25 127:30>]
LOCAL_SYMBOL: b3Quaternion.h<123:12> [b3Quaternion.h <127:34 127:40>]
LOCAL_SYMBOL: b3Quaternion.h<121:12> [b3Quaternion.h <127:44 127:51>]
LOCAL_SYMBOL: b3Quaternion.h<119:12> [b3Quaternion.h <127:55 127:60>]
SYMBOL_METHOD public void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <134:2 <134:7 134:17> 150:2>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void [b3Quaternion.h <134:2 134:5>]
LOCAL_SYMBOL: b3Quaternion.h<134:35> [b3Quaternion.h <134:35 134:38>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <134:25 134:32>]
LOCAL_SYMBOL: b3Quaternion.h<134:57> [b3Quaternion.h <134:57 134:62>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <134:47 134:54>]
LOCAL_SYMBOL: b3Quaternion.h<134:81> [b3Quaternion.h <134:81 134:85>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <134:71 134:78>]
LOCAL_SYMBOL: b3Quaternion.h<135:2> [b3Quaternion.h <135:2 135:2>]
LOCAL_SYMBOL: b3Quaternion.h<135:2> [b3Quaternion.h <150:2 150:2>]
LOCAL_SYMBOL: b3Quaternion.h<136:12> [b3Quaternion.h <136:12 136:18>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <136:3 136:10>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <136:22 136:29>]
LOCAL_SYMBOL: b3Quaternion.h<134:35> [b3Quaternion.h <136:31 136:34>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <136:39 136:46>]
LOCAL_SYMBOL: b3Quaternion.h<137:12> [b3Quaternion.h <137:12 137:20>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <137:3 137:10>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <137:24 137:31>]
LOCAL_SYMBOL: b3Quaternion.h<134:57> [b3Quaternion.h <137:33 137:38>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <137:43 137:50>]
LOCAL_SYMBOL: b3Quaternion.h<138:12> [b3Quaternion.h <138:12 138:19>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <138:3 138:10>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <138:23 138:30>]
LOCAL_SYMBOL: b3Quaternion.h<134:81> [b3Quaternion.h <138:32 138:36>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <138:41 138:48>]
LOCAL_SYMBOL: b3Quaternion.h<139:12> [b3Quaternion.h <139:12 139:17>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <139:3 139:10>]
REFERENCE_CALL void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Cos(b3Scalar) [b3Quaternion.h <139:21 139:25>]
LOCAL_SYMBOL: b3Quaternion.h<136:12> [b3Quaternion.h <139:27 139:33>]
LOCAL_SYMBOL: b3Quaternion.h<140:12> [b3Quaternion.h <140:12 140:17>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <140:3 140:10>]
REFERENCE_CALL void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Sin(b3Scalar) [b3Quaternion.h <140:21 140:25>]
LOCAL_SYMBOL: b3Quaternion.h<136:12> [b3Quaternion.h <140:27 140:33>]
LOCAL_SYMBOL: b3Quaternion.h<141:12> [b3Quaternion.h <141:12 141:19>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <141:3 141:10>]
REFERENCE_CALL void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Cos(b3Scalar) [b3Quaternion.h <141:23 141:27>]
LOCAL_SYMBOL: b3Quaternion.h<137:12> [b3Quaternion.h <141:29 141:37>]
LOCAL_SYMBOL: b3Quaternion.h<142:12> [b3Quaternion.h <142:12 142:19>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <142:3 142:10>]
REFERENCE_CALL void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Sin(b3Scalar) [b3Quaternion.h <142:23 142:27>]
LOCAL_SYMBOL: b3Quaternion.h<137:12> [b3Quaternion.h <142:29 142:37>]
LOCAL_SYMBOL: b3Quaternion.h<143:12> [b3Quaternion.h <143:12 143:18>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <143:3 143:10>]
REFERENCE_CALL void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Cos(b3Scalar) [b3Quaternion.h <143:22 143:26>]
LOCAL_SYMBOL: b3Quaternion.h<138:12> [b3Quaternion.h <143:28 143:35>]
LOCAL_SYMBOL: b3Quaternion.h<144:12> [b3Quaternion.h <144:12 144:18>]
REFERENCE_TYPE_USAGE void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <144:3 144:10>]
REFERENCE_CALL void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar b3Sin(b3Scalar) [b3Quaternion.h <144:22 144:26>]
LOCAL_SYMBOL: b3Quaternion.h<138:12> [b3Quaternion.h <144:28 144:35>]
REFERENCE_CALL void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <145:3 145:10>]
LOCAL_SYMBOL: b3Quaternion.h<144:12> [b3Quaternion.h <145:12 145:18>]
LOCAL_SYMBOL: b3Quaternion.h<141:12> [b3Quaternion.h <145:22 145:29>]
LOCAL_SYMBOL: b3Quaternion.h<139:12> [b3Quaternion.h <145:33 145:38>]
LOCAL_SYMBOL: b3Quaternion.h<143:12> [b3Quaternion.h <145:42 145:48>]
LOCAL_SYMBOL: b3Quaternion.h<142:12> [b3Quaternion.h <145:52 145:59>]
LOCAL_SYMBOL: b3Quaternion.h<140:12> [b3Quaternion.h <145:63 145:68>]
LOCAL_SYMBOL: b3Quaternion.h<143:12> [b3Quaternion.h <146:26 146:32>]
LOCAL_SYMBOL: b3Quaternion.h<142:12> [b3Quaternion.h <146:36 146:43>]
LOCAL_SYMBOL: b3Quaternion.h<139:12> [b3Quaternion.h <146:47 146:52>]
LOCAL_SYMBOL: b3Quaternion.h<144:12> [b3Quaternion.h <146:56 146:62>]
LOCAL_SYMBOL: b3Quaternion.h<141:12> [b3Quaternion.h <146:66 146:73>]
LOCAL_SYMBOL: b3Quaternion.h<140:12> [b3Quaternion.h <146:77 146:82>]
LOCAL_SYMBOL: b3Quaternion.h<143:12> [b3Quaternion.h <147:26 147:32>]
LOCAL_SYMBOL: b3Quaternion.h<141:12> [b3Quaternion.h <147:36 147:43>]
LOCAL_SYMBOL: b3Quaternion.h<140:12> [b3Quaternion.h <147:47 147:52>]
LOCAL_SYMBOL: b3Quaternion.h<144:12> [b3Quaternion.h <147:56 147:62>]
LOCAL_SYMBOL: b3Quaternion.h<142:12> [b3Quaternion.h <147:66 147:73>]
LOCAL_SYMBOL: b3Quaternion.h<139:12> [b3Quaternion.h <147:77 147:82>]
LOCAL_SYMBOL: b3Quaternion.h<143:12> [b3Quaternion.h <148:26 148:32>]
LOCAL_SYMBOL: b3Quaternion.h<141:12> [b3Quaternion.h <148:36 148:43>]
LOCAL_SYMBOL: b3Quaternion.h<139:12> [b3Quaternion.h <148:47 148:52>]
LOCAL_SYMBOL: b3Quaternion.h<144:12> [b3Quaternion.h <148:56 148:62>]
LOCAL_SYMBOL: b3Quaternion.h<142:12> [b3Quaternion.h <148:66 148:73>]
LOCAL_SYMBOL: b3Quaternion.h<140:12> [b3Quaternion.h <148:77 148:82>]
SYMBOL_FUNCTION b3Quaternion & b3Quaternion::normalize()
REFERENCE_CALL void b3Quaternion::setEulerZYX(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Quaternion & b3Quaternion::normalize() [b3Quaternion.h <149:3 149:11>]
SYMBOL_METHOD public void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const [b3Quaternion.h <156:2 <156:7 156:17> 171:2>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> void [b3Quaternion.h <156:2 156:5>]
LOCAL_SYMBOL: b3Quaternion.h<156:29> [b3Quaternion.h <156:29 156:32>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <156:19 156:26>]
LOCAL_SYMBOL: b3Quaternion.h<156:45> [b3Quaternion.h <156:45 156:50>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <156:35 156:42>]
LOCAL_SYMBOL: b3Quaternion.h<156:63> [b3Quaternion.h <156:63 156:67>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <156:53 156:60>]
LOCAL_SYMBOL: b3Quaternion.h<157:2> [b3Quaternion.h <157:2 157:2>]
LOCAL_SYMBOL: b3Quaternion.h<157:2> [b3Quaternion.h <171:2 171:2>]
LOCAL_SYMBOL: b3Quaternion.h<158:12> [b3Quaternion.h <158:12 158:14>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <158:3 158:10>]
LOCAL_SYMBOL: b3Quaternion.h<159:12> [b3Quaternion.h <159:12 159:14>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <159:3 159:10>]
LOCAL_SYMBOL: b3Quaternion.h<160:12> [b3Quaternion.h <160:12 160:14>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <160:3 160:10>]
LOCAL_SYMBOL: b3Quaternion.h<161:12> [b3Quaternion.h <161:12 161:14>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <161:3 161:10>]
LOCAL_SYMBOL: b3Quaternion.h<162:12> [b3Quaternion.h <162:12 162:15>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <162:3 162:10>]
LOCAL_SYMBOL: b3Quaternion.h<159:12> [b3Quaternion.h <163:3 163:5>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <163:9 163:16>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <163:9 163:16>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <163:23 163:30>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <163:23 163:30>]
LOCAL_SYMBOL: b3Quaternion.h<160:12> [b3Quaternion.h <164:3 164:5>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <164:9 164:16>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <164:9 164:16>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <164:23 164:30>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <164:23 164:30>]
LOCAL_SYMBOL: b3Quaternion.h<161:12> [b3Quaternion.h <165:3 165:5>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <165:9 165:16>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <165:9 165:16>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <165:23 165:30>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <165:23 165:30>]
LOCAL_SYMBOL: b3Quaternion.h<158:12> [b3Quaternion.h <166:3 166:5>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <166:9 166:16>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <166:9 166:16>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <166:23 166:30>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <166:23 166:30>]
LOCAL_SYMBOL: b3Quaternion.h<156:63> [b3Quaternion.h <167:3 167:7>]
SYMBOL_FUNCTION b3Scalar b3Atan2(b3Scalar, b3Scalar)
REFERENCE_CALL void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar b3Atan2(b3Scalar, b3Scalar) [b3Quaternion.h <167:11 167:17>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <167:24 167:31>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <167:24 167:31>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <167:38 167:45>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <167:38 167:45>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <167:52 167:59>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <167:52 167:59>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <167:66 167:73>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <167:66 167:73>]
LOCAL_SYMBOL: b3Quaternion.h<158:12> [b3Quaternion.h <167:80 167:82>]
LOCAL_SYMBOL: b3Quaternion.h<159:12> [b3Quaternion.h <167:86 167:88>]
LOCAL_SYMBOL: b3Quaternion.h<160:12> [b3Quaternion.h <167:92 167:94>]
LOCAL_SYMBOL: b3Quaternion.h<161:12> [b3Quaternion.h <167:98 167:100>]
LOCAL_SYMBOL: b3Quaternion.h<162:12> [b3Quaternion.h <168:3 168:6>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <168:10 168:17>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <168:27 168:34>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <168:27 168:34>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <168:41 168:48>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <168:41 168:48>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <168:55 168:62>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <168:55 168:62>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <168:69 168:76>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <168:69 168:76>]
LOCAL_SYMBOL: b3Quaternion.h<156:45> [b3Quaternion.h <169:3 169:8>]
LOCAL_SYMBOL: b3Quaternion.h<162:12> [b3Quaternion.h <169:12 169:15>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <169:20 169:27>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <169:37 169:44>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <169:54 169:58>]
LOCAL_SYMBOL: b3Quaternion.h<162:12> [b3Quaternion.h <169:62 169:65>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <169:70 169:77>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <169:86 169:93>]
REFERENCE_TYPE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Quaternion.h <169:102 169:106>]
SYMBOL_FUNCTION b3Scalar b3Asin(b3Scalar)
REFERENCE_CALL void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar b3Asin(b3Scalar) [b3Quaternion.h <169:110 169:115>]
LOCAL_SYMBOL: b3Quaternion.h<162:12> [b3Quaternion.h <169:117 169:120>]
LOCAL_SYMBOL: b3Quaternion.h<156:29> [b3Quaternion.h <170:3 170:6>]
REFERENCE_CALL void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar b3Atan2(b3Scalar, b3Scalar) [b3Quaternion.h <170:10 170:16>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <170:23 170:30>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <170:23 170:30>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <170:37 170:44>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <170:37 170:44>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <170:51 170:58>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <170:51 170:58>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <170:65 170:72>]
REFERENCE_USAGE void b3Quaternion::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <170:65 170:72>]
LOCAL_SYMBOL: b3Quaternion.h<158:12> [b3Quaternion.h <170:79 170:81>]
LOCAL_SYMBOL: b3Quaternion.h<159:12> [b3Quaternion.h <170:85 170:87>]
LOCAL_SYMBOL: b3Quaternion.h<160:12> [b3Quaternion.h <170:91 170:93>]
LOCAL_SYMBOL: b3Quaternion.h<161:12> [b3Quaternion.h <170:97 170:99>]
SYMBOL_METHOD public b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) [b3Quaternion.h <175:2 <175:32 175:41> 188:2>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <175:18 175:29>]
LOCAL_SYMBOL: b3Quaternion.h<175:63> [b3Quaternion.h <175:63 175:63>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <175:49 175:60>]
LOCAL_SYMBOL: b3Quaternion.h<176:2> [b3Quaternion.h <176:2 176:2>]
LOCAL_SYMBOL: b3Quaternion.h<176:2> [b3Quaternion.h <188:2 188:2>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <182:3 182:10>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <182:3 182:10>]
SYMBOL_FUNCTION const b3Scalar & b3QuadWord::getX() const
REFERENCE_CALL b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <182:20 182:23>]
LOCAL_SYMBOL: b3Quaternion.h<175:63> [b3Quaternion.h <182:18 182:18>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <183:9 183:16>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <183:9 183:16>]
SYMBOL_FUNCTION const b3Scalar & b3QuadWord::getY() const
REFERENCE_CALL b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <183:26 183:29>]
LOCAL_SYMBOL: b3Quaternion.h<175:63> [b3Quaternion.h <183:24 183:24>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <184:9 184:16>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <184:9 184:16>]
SYMBOL_FUNCTION const b3Scalar & b3QuadWord::getZ() const
REFERENCE_CALL b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <184:26 184:29>]
LOCAL_SYMBOL: b3Quaternion.h<175:63> [b3Quaternion.h <184:24 184:24>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <185:9 185:16>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <185:9 185:16>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <185:26 185:33>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator+=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <185:26 185:33>]
LOCAL_SYMBOL: b3Quaternion.h<175:63> [b3Quaternion.h <185:24 185:24>]
SYMBOL_METHOD public b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) [b3Quaternion.h <192:2 <192:16 192:25> 205:2>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <192:2 192:13>]
LOCAL_SYMBOL: b3Quaternion.h<192:47> [b3Quaternion.h <192:47 192:47>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <192:33 192:44>]
LOCAL_SYMBOL: b3Quaternion.h<193:2> [b3Quaternion.h <193:2 193:2>]
LOCAL_SYMBOL: b3Quaternion.h<193:2> [b3Quaternion.h <205:2 205:2>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <199:3 199:10>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <199:3 199:10>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <199:20 199:23>]
LOCAL_SYMBOL: b3Quaternion.h<192:47> [b3Quaternion.h <199:18 199:18>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <200:9 200:16>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <200:9 200:16>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <200:26 200:29>]
LOCAL_SYMBOL: b3Quaternion.h<192:47> [b3Quaternion.h <200:24 200:24>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <201:9 201:16>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <201:9 201:16>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <201:26 201:29>]
LOCAL_SYMBOL: b3Quaternion.h<192:47> [b3Quaternion.h <201:24 201:24>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <202:9 202:16>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <202:9 202:16>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <202:26 202:33>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator-=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <202:26 202:33>]
LOCAL_SYMBOL: b3Quaternion.h<192:47> [b3Quaternion.h <202:24 202:24>]
SYMBOL_METHOD public b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) [b3Quaternion.h <209:2 <209:16 209:25> 224:2>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) -> b3Quaternion [b3Quaternion.h <209:2 209:13>]
LOCAL_SYMBOL: b3Quaternion.h<209:43> [b3Quaternion.h <209:43 209:43>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) -> b3Scalar [b3Quaternion.h <209:33 209:40>]
LOCAL_SYMBOL: b3Quaternion.h<210:2> [b3Quaternion.h <210:2 210:2>]
LOCAL_SYMBOL: b3Quaternion.h<210:2> [b3Quaternion.h <224:2 224:2>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <218:3 218:10>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <218:3 218:10>]
LOCAL_SYMBOL: b3Quaternion.h<209:43> [b3Quaternion.h <218:18 218:18>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <219:9 219:16>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <219:9 219:16>]
LOCAL_SYMBOL: b3Quaternion.h<209:43> [b3Quaternion.h <219:24 219:24>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <220:9 220:16>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <220:9 220:16>]
LOCAL_SYMBOL: b3Quaternion.h<209:43> [b3Quaternion.h <220:24 220:24>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <221:9 221:16>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <221:9 221:16>]
LOCAL_SYMBOL: b3Quaternion.h<209:43> [b3Quaternion.h <221:24 221:24>]
SYMBOL_METHOD public b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) [b3Quaternion.h <229:2 <229:16 229:25> 309:2>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <229:2 229:13>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <229:47 229:47>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <229:33 229:44>]
LOCAL_SYMBOL: b3Quaternion.h<230:2> [b3Quaternion.h <230:2 230:2>]
LOCAL_SYMBOL: b3Quaternion.h<230:2> [b3Quaternion.h <309:2 309:2>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <302:3 302:10>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <303:13 303:20>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <303:13 303:20>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <303:29 303:32>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <303:27 303:27>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <303:38 303:45>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <303:38 303:45>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <303:54 303:61>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <303:54 303:61>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <303:52 303:52>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <303:68 303:75>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <303:68 303:75>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <303:84 303:87>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <303:82 303:82>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <303:93 303:100>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <303:93 303:100>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <303:109 303:112>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <303:107 303:107>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <304:4 304:11>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <304:4 304:11>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <304:20 304:23>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <304:18 304:18>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <304:29 304:36>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <304:29 304:36>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <304:45 304:52>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <304:45 304:52>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <304:43 304:43>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <304:59 304:66>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <304:59 304:66>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <304:75 304:78>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <304:73 304:73>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <304:84 304:91>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <304:84 304:91>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <304:100 304:103>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <304:98 304:98>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <305:4 305:11>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <305:4 305:11>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <305:20 305:23>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <305:18 305:18>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <305:29 305:36>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <305:29 305:36>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <305:45 305:52>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <305:45 305:52>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <305:43 305:43>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <305:59 305:66>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <305:59 305:66>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <305:75 305:78>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <305:73 305:73>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <305:84 305:91>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <305:84 305:91>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <305:100 305:103>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <305:98 305:98>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <306:4 306:11>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <306:4 306:11>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <306:20 306:27>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <306:20 306:27>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <306:18 306:18>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <306:34 306:41>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <306:34 306:41>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <306:50 306:53>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <306:48 306:48>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <306:59 306:66>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <306:59 306:66>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <306:75 306:78>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <306:73 306:73>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <306:84 306:91>]
REFERENCE_USAGE b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <306:84 306:91>]
REFERENCE_CALL b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <306:100 306:103>]
LOCAL_SYMBOL: b3Quaternion.h<229:47> [b3Quaternion.h <306:98 306:98>]
SYMBOL_METHOD public b3Scalar b3Quaternion::dot(const b3Quaternion &) const [b3Quaternion.h <312:2 <312:11 312:13> 336:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3Scalar [b3Quaternion.h <312:2 312:9>]
LOCAL_SYMBOL: b3Quaternion.h<312:35> [b3Quaternion.h <312:35 312:35>]
REFERENCE_TYPE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <312:21 312:32>]
LOCAL_SYMBOL: b3Quaternion.h<313:2> [b3Quaternion.h <313:2 313:2>]
LOCAL_SYMBOL: b3Quaternion.h<313:2> [b3Quaternion.h <336:2 336:2>]
REFERENCE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <331:11 331:18>]
REFERENCE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <331:11 331:18>]
REFERENCE_CALL b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <331:27 331:30>]
LOCAL_SYMBOL: b3Quaternion.h<312:35> [b3Quaternion.h <331:25 331:25>]
REFERENCE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <332:17 332:24>]
REFERENCE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <332:17 332:24>]
REFERENCE_CALL b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <332:33 332:36>]
LOCAL_SYMBOL: b3Quaternion.h<312:35> [b3Quaternion.h <332:31 332:31>]
REFERENCE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <333:17 333:24>]
REFERENCE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <333:17 333:24>]
REFERENCE_CALL b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <333:33 333:36>]
LOCAL_SYMBOL: b3Quaternion.h<312:35> [b3Quaternion.h <333:31 333:31>]
REFERENCE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <334:17 334:24>]
REFERENCE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <334:17 334:24>]
REFERENCE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <334:33 334:40>]
REFERENCE_USAGE b3Scalar b3Quaternion::dot(const b3Quaternion &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <334:33 334:40>]
LOCAL_SYMBOL: b3Quaternion.h<312:35> [b3Quaternion.h <334:31 334:31>]
SYMBOL_METHOD public b3Scalar b3Quaternion::length2() const [b3Quaternion.h <339:2 <339:11 339:17> 342:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Quaternion::length2() const -> b3Scalar [b3Quaternion.h <339:2 339:9>]
LOCAL_SYMBOL: b3Quaternion.h<340:2> [b3Quaternion.h <340:2 340:2>]
LOCAL_SYMBOL: b3Quaternion.h<340:2> [b3Quaternion.h <342:2 342:2>]
SYMBOL_FUNCTION b3Scalar b3Quaternion::dot(const b3Quaternion &) const
REFERENCE_CALL b3Scalar b3Quaternion::length2() const -> b3Scalar b3Quaternion::dot(const b3Quaternion &) const [b3Quaternion.h <341:10 341:12>]
SYMBOL_METHOD public b3Scalar b3Quaternion::length() const [b3Quaternion.h <345:2 <345:11 345:16> 348:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Quaternion::length() const -> b3Scalar [b3Quaternion.h <345:2 345:9>]
LOCAL_SYMBOL: b3Quaternion.h<346:2> [b3Quaternion.h <346:2 346:2>]
LOCAL_SYMBOL: b3Quaternion.h<346:2> [b3Quaternion.h <348:2 348:2>]
REFERENCE_CALL b3Scalar b3Quaternion::length() const -> b3Scalar b3Sqrt(b3Scalar) [b3Quaternion.h <347:10 347:15>]
SYMBOL_FUNCTION b3Scalar b3Quaternion::length2() const
REFERENCE_CALL b3Scalar b3Quaternion::length() const -> b3Scalar b3Quaternion::length2() const [b3Quaternion.h <347:17 347:23>]
SYMBOL_METHOD public b3Quaternion & b3Quaternion::normalize() [b3Quaternion.h <352:2 <352:16 352:24> 373:2>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::normalize() -> b3Quaternion [b3Quaternion.h <352:2 352:13>]
LOCAL_SYMBOL: b3Quaternion.h<353:2> [b3Quaternion.h <353:2 353:2>]
LOCAL_SYMBOL: b3Quaternion.h<353:2> [b3Quaternion.h <373:2 373:2>]
SYMBOL_FUNCTION b3Quaternion & b3Quaternion::operator/=(const b3Scalar &)
REFERENCE_CALL b3Quaternion & b3Quaternion::normalize() -> b3Quaternion & b3Quaternion::operator/=(const b3Scalar &) [b3Quaternion.h <371:16 371:17>]
SYMBOL_FUNCTION b3Scalar b3Quaternion::length() const
REFERENCE_CALL b3Quaternion & b3Quaternion::normalize() -> b3Scalar b3Quaternion::length() const [b3Quaternion.h <371:19 371:24>]
SYMBOL_METHOD public b3Quaternion b3Quaternion::operator*(const b3Scalar &) const [b3Quaternion.h <377:2 <378:2 378:10> 390:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator*(const b3Scalar &) const -> b3Quaternion [b3Quaternion.h <377:18 377:29>]
LOCAL_SYMBOL: b3Quaternion.h<378:28> [b3Quaternion.h <378:28 378:28>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator*(const b3Scalar &) const -> b3Scalar [b3Quaternion.h <378:18 378:25>]
LOCAL_SYMBOL: b3Quaternion.h<379:2> [b3Quaternion.h <379:2 379:2>]
LOCAL_SYMBOL: b3Quaternion.h<379:2> [b3Quaternion.h <390:2 390:2>]
SYMBOL_FUNCTION void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &)
REFERENCE_CALL b3Quaternion b3Quaternion::operator*(const b3Scalar &) const -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <388:10 388:21>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator*(const b3Scalar &) const -> b3Quaternion [b3Quaternion.h <388:10 388:21>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator*(const b3Scalar &) const -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <388:23 388:26>]
LOCAL_SYMBOL: b3Quaternion.h<378:28> [b3Quaternion.h <388:32 388:32>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator*(const b3Scalar &) const -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <388:35 388:38>]
LOCAL_SYMBOL: b3Quaternion.h<378:28> [b3Quaternion.h <388:44 388:44>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator*(const b3Scalar &) const -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <388:47 388:50>]
LOCAL_SYMBOL: b3Quaternion.h<378:28> [b3Quaternion.h <388:56 388:56>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator*(const b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <388:59 388:66>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator*(const b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <388:59 388:66>]
LOCAL_SYMBOL: b3Quaternion.h<378:28> [b3Quaternion.h <388:73 388:73>]
SYMBOL_METHOD public b3Quaternion b3Quaternion::operator/(const b3Scalar &) const [b3Quaternion.h <394:2 <394:15 394:23> 398:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator/(const b3Scalar &) const -> b3Quaternion [b3Quaternion.h <394:2 394:13>]
LOCAL_SYMBOL: b3Quaternion.h<394:41> [b3Quaternion.h <394:41 394:41>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator/(const b3Scalar &) const -> b3Scalar [b3Quaternion.h <394:31 394:38>]
LOCAL_SYMBOL: b3Quaternion.h<395:2> [b3Quaternion.h <395:2 395:2>]
LOCAL_SYMBOL: b3Quaternion.h<395:2> [b3Quaternion.h <398:2 398:2>]
SYMBOL_FUNCTION b3Quaternion b3Quaternion::operator*(const b3Scalar &) const
REFERENCE_CALL b3Quaternion b3Quaternion::operator/(const b3Scalar &) const -> b3Quaternion b3Quaternion::operator*(const b3Scalar &) const [b3Quaternion.h <397:16 397:16>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator/(const b3Scalar &) const -> b3Scalar [b3Quaternion.h <397:19 397:26>]
LOCAL_SYMBOL: b3Quaternion.h<394:41> [b3Quaternion.h <397:35 397:35>]
SYMBOL_METHOD public b3Quaternion & b3Quaternion::operator/=(const b3Scalar &) [b3Quaternion.h <402:2 <402:16 402:25> 406:2>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::operator/=(const b3Scalar &) -> b3Quaternion [b3Quaternion.h <402:2 402:13>]
LOCAL_SYMBOL: b3Quaternion.h<402:43> [b3Quaternion.h <402:43 402:43>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::operator/=(const b3Scalar &) -> b3Scalar [b3Quaternion.h <402:33 402:40>]
LOCAL_SYMBOL: b3Quaternion.h<403:2> [b3Quaternion.h <403:2 403:2>]
LOCAL_SYMBOL: b3Quaternion.h<403:2> [b3Quaternion.h <406:2 406:2>]
SYMBOL_FUNCTION b3Quaternion & b3Quaternion::operator*=(const b3Scalar &)
REFERENCE_CALL b3Quaternion & b3Quaternion::operator/=(const b3Scalar &) -> b3Quaternion & b3Quaternion::operator*=(const b3Scalar &) [b3Quaternion.h <405:16 405:17>]
REFERENCE_TYPE_USAGE b3Quaternion & b3Quaternion::operator/=(const b3Scalar &) -> b3Scalar [b3Quaternion.h <405:19 405:26>]
LOCAL_SYMBOL: b3Quaternion.h<402:43> [b3Quaternion.h <405:35 405:35>]
SYMBOL_METHOD public b3Quaternion b3Quaternion::normalized() const [b3Quaternion.h <409:2 <409:15 409:24> 412:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::normalized() const -> b3Quaternion [b3Quaternion.h <409:2 409:13>]
LOCAL_SYMBOL: b3Quaternion.h<410:2> [b3Quaternion.h <410:2 410:2>]
LOCAL_SYMBOL: b3Quaternion.h<410:2> [b3Quaternion.h <412:2 412:2>]
SYMBOL_FUNCTION b3Quaternion b3Quaternion::operator/(const b3Scalar &) const
REFERENCE_CALL b3Quaternion b3Quaternion::normalized() const -> b3Quaternion b3Quaternion::operator/(const b3Scalar &) const [b3Quaternion.h <411:16 411:16>]
REFERENCE_CALL b3Quaternion b3Quaternion::normalized() const -> b3Scalar b3Quaternion::length() const [b3Quaternion.h <411:18 411:23>]
SYMBOL_METHOD public b3Scalar b3Quaternion::angle(const b3Quaternion &) const [b3Quaternion.h <415:2 <415:11 415:15> 420:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Quaternion::angle(const b3Quaternion &) const -> b3Scalar [b3Quaternion.h <415:2 415:9>]
LOCAL_SYMBOL: b3Quaternion.h<415:37> [b3Quaternion.h <415:37 415:37>]
REFERENCE_TYPE_USAGE b3Scalar b3Quaternion::angle(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <415:23 415:34>]
LOCAL_SYMBOL: b3Quaternion.h<416:2> [b3Quaternion.h <416:2 416:2>]
LOCAL_SYMBOL: b3Quaternion.h<416:2> [b3Quaternion.h <420:2 420:2>]
LOCAL_SYMBOL: b3Quaternion.h<417:12> [b3Quaternion.h <417:12 417:12>]
REFERENCE_TYPE_USAGE b3Scalar b3Quaternion::angle(const b3Quaternion &) const -> b3Scalar [b3Quaternion.h <417:3 417:10>]
REFERENCE_CALL b3Scalar b3Quaternion::angle(const b3Quaternion &) const -> b3Scalar b3Sqrt(b3Scalar) [b3Quaternion.h <417:16 417:21>]
REFERENCE_CALL b3Scalar b3Quaternion::angle(const b3Quaternion &) const -> b3Scalar b3Quaternion::length2() const [b3Quaternion.h <417:23 417:29>]
REFERENCE_CALL b3Scalar b3Quaternion::angle(const b3Quaternion &) const -> b3Scalar b3Quaternion::length2() const [b3Quaternion.h <417:37 417:43>]
LOCAL_SYMBOL: b3Quaternion.h<415:37> [b3Quaternion.h <417:35 417:35>]
REFERENCE_CALL b3Scalar b3Quaternion::angle(const b3Quaternion &) const -> b3Scalar b3Acos(b3Scalar) [b3Quaternion.h <419:10 419:15>]
REFERENCE_CALL b3Scalar b3Quaternion::angle(const b3Quaternion &) const -> b3Scalar b3Quaternion::dot(const b3Quaternion &) const [b3Quaternion.h <419:17 419:19>]
LOCAL_SYMBOL: b3Quaternion.h<415:37> [b3Quaternion.h <419:21 419:21>]
LOCAL_SYMBOL: b3Quaternion.h<417:12> [b3Quaternion.h <419:26 419:26>]
SYMBOL_METHOD public b3Scalar b3Quaternion::getAngle() const [b3Quaternion.h <422:2 <422:11 422:18> 426:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Quaternion::getAngle() const -> b3Scalar [b3Quaternion.h <422:2 422:9>]
LOCAL_SYMBOL: b3Quaternion.h<423:2> [b3Quaternion.h <423:2 423:2>]
LOCAL_SYMBOL: b3Quaternion.h<423:2> [b3Quaternion.h <426:2 426:2>]
LOCAL_SYMBOL: b3Quaternion.h<424:12> [b3Quaternion.h <424:12 424:12>]
REFERENCE_TYPE_USAGE b3Scalar b3Quaternion::getAngle() const -> b3Scalar [b3Quaternion.h <424:3 424:10>]
REFERENCE_TYPE_USAGE b3Scalar b3Quaternion::getAngle() const -> b3Scalar [b3Quaternion.h <424:16 424:23>]
REFERENCE_CALL b3Scalar b3Quaternion::getAngle() const -> b3Scalar b3Acos(b3Scalar) [b3Quaternion.h <424:31 424:36>]
REFERENCE_USAGE b3Scalar b3Quaternion::getAngle() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <424:38 424:45>]
REFERENCE_USAGE b3Scalar b3Quaternion::getAngle() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <424:38 424:45>]
LOCAL_SYMBOL: b3Quaternion.h<424:12> [b3Quaternion.h <425:10 425:10>]
SYMBOL_METHOD public b3Vector3 b3Quaternion::getAxis() const [b3Quaternion.h <429:2 <429:12 429:18> 437:2>]
REFERENCE_TYPE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3Vector3 [b3Quaternion.h <429:2 429:10>]
LOCAL_SYMBOL: b3Quaternion.h<430:2> [b3Quaternion.h <430:2 430:2>]
LOCAL_SYMBOL: b3Quaternion.h<430:2> [b3Quaternion.h <437:2 437:2>]
LOCAL_SYMBOL: b3Quaternion.h<431:12> [b3Quaternion.h <431:12 431:20>]
REFERENCE_TYPE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3Scalar [b3Quaternion.h <431:3 431:10>]
REFERENCE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <431:28 431:35>]
REFERENCE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <431:28 431:35>]
REFERENCE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <431:40 431:47>]
REFERENCE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <431:40 431:47>]
LOCAL_SYMBOL: b3Quaternion.h<431:12> [b3Quaternion.h <433:7 433:15>]
REFERENCE_TYPE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3Scalar [b3Quaternion.h <433:19 433:26>]
REFERENCE_CALL b3Vector3 b3Quaternion::getAxis() const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Quaternion.h <434:11 434:23>]
LOCAL_SYMBOL: b3Quaternion.h<435:12> [b3Quaternion.h <435:12 435:12>]
REFERENCE_TYPE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3Scalar [b3Quaternion.h <435:3 435:10>]
REFERENCE_CALL b3Vector3 b3Quaternion::getAxis() const -> b3Scalar b3Sqrt(b3Scalar) [b3Quaternion.h <435:20 435:25>]
LOCAL_SYMBOL: b3Quaternion.h<431:12> [b3Quaternion.h <435:27 435:35>]
REFERENCE_CALL b3Vector3 b3Quaternion::getAxis() const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Quaternion.h <436:10 436:22>]
REFERENCE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <436:24 436:31>]
REFERENCE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <436:24 436:31>]
LOCAL_SYMBOL: b3Quaternion.h<435:12> [b3Quaternion.h <436:38 436:38>]
REFERENCE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <436:41 436:48>]
REFERENCE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <436:41 436:48>]
LOCAL_SYMBOL: b3Quaternion.h<435:12> [b3Quaternion.h <436:55 436:55>]
REFERENCE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <436:58 436:65>]
REFERENCE_USAGE b3Vector3 b3Quaternion::getAxis() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <436:58 436:65>]
LOCAL_SYMBOL: b3Quaternion.h<435:12> [b3Quaternion.h <436:72 436:72>]
SYMBOL_METHOD public b3Quaternion b3Quaternion::inverse() const [b3Quaternion.h <440:2 <440:15 440:21> 449:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::inverse() const -> b3Quaternion [b3Quaternion.h <440:2 440:13>]
LOCAL_SYMBOL: b3Quaternion.h<441:2> [b3Quaternion.h <441:2 441:2>]
LOCAL_SYMBOL: b3Quaternion.h<441:2> [b3Quaternion.h <449:2 449:2>]
REFERENCE_CALL b3Quaternion b3Quaternion::inverse() const -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <447:10 447:21>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::inverse() const -> b3Quaternion [b3Quaternion.h <447:10 447:21>]
REFERENCE_USAGE b3Quaternion b3Quaternion::inverse() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <447:24 447:31>]
REFERENCE_USAGE b3Quaternion b3Quaternion::inverse() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <447:24 447:31>]
REFERENCE_USAGE b3Quaternion b3Quaternion::inverse() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <447:38 447:45>]
REFERENCE_USAGE b3Quaternion b3Quaternion::inverse() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <447:38 447:45>]
REFERENCE_USAGE b3Quaternion b3Quaternion::inverse() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <447:52 447:59>]
REFERENCE_USAGE b3Quaternion b3Quaternion::inverse() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <447:52 447:59>]
REFERENCE_USAGE b3Quaternion b3Quaternion::inverse() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <447:65 447:72>]
REFERENCE_USAGE b3Quaternion b3Quaternion::inverse() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <447:65 447:72>]
SYMBOL_METHOD public b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const [b3Quaternion.h <453:2 <454:2 454:10> 464:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <453:18 453:29>]
LOCAL_SYMBOL: b3Quaternion.h<454:32> [b3Quaternion.h <454:32 454:33>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <454:18 454:29>]
LOCAL_SYMBOL: b3Quaternion.h<455:2> [b3Quaternion.h <455:2 455:2>]
LOCAL_SYMBOL: b3Quaternion.h<455:2> [b3Quaternion.h <464:2 464:2>]
LOCAL_SYMBOL: b3Quaternion.h<461:23> [b3Quaternion.h <461:23 461:24>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <461:9 461:20>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <462:10 462:21>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <462:10 462:21>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <462:26 462:29>]
LOCAL_SYMBOL: b3Quaternion.h<461:23> [b3Quaternion.h <462:23 462:24>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <462:38 462:41>]
LOCAL_SYMBOL: b3Quaternion.h<454:32> [b3Quaternion.h <462:35 462:36>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <462:49 462:52>]
LOCAL_SYMBOL: b3Quaternion.h<461:23> [b3Quaternion.h <462:46 462:47>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <462:61 462:64>]
LOCAL_SYMBOL: b3Quaternion.h<454:32> [b3Quaternion.h <462:58 462:59>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <462:72 462:75>]
LOCAL_SYMBOL: b3Quaternion.h<461:23> [b3Quaternion.h <462:69 462:70>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <462:84 462:87>]
LOCAL_SYMBOL: b3Quaternion.h<454:32> [b3Quaternion.h <462:81 462:82>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <462:95 462:102>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <462:95 462:102>]
LOCAL_SYMBOL: b3Quaternion.h<461:23> [b3Quaternion.h <462:92 462:93>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <462:112 462:119>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <462:112 462:119>]
LOCAL_SYMBOL: b3Quaternion.h<454:32> [b3Quaternion.h <462:109 462:110>]
SYMBOL_METHOD public b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const [b3Quaternion.h <468:2 <469:2 469:10> 479:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <468:18 468:29>]
LOCAL_SYMBOL: b3Quaternion.h<469:32> [b3Quaternion.h <469:32 469:33>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <469:18 469:29>]
LOCAL_SYMBOL: b3Quaternion.h<470:2> [b3Quaternion.h <470:2 470:2>]
LOCAL_SYMBOL: b3Quaternion.h<470:2> [b3Quaternion.h <479:2 479:2>]
LOCAL_SYMBOL: b3Quaternion.h<476:23> [b3Quaternion.h <476:23 476:24>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <476:9 476:20>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <477:10 477:21>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <477:10 477:21>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <477:26 477:29>]
LOCAL_SYMBOL: b3Quaternion.h<476:23> [b3Quaternion.h <477:23 477:24>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <477:38 477:41>]
LOCAL_SYMBOL: b3Quaternion.h<469:32> [b3Quaternion.h <477:35 477:36>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <477:49 477:52>]
LOCAL_SYMBOL: b3Quaternion.h<476:23> [b3Quaternion.h <477:46 477:47>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <477:61 477:64>]
LOCAL_SYMBOL: b3Quaternion.h<469:32> [b3Quaternion.h <477:58 477:59>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <477:72 477:75>]
LOCAL_SYMBOL: b3Quaternion.h<476:23> [b3Quaternion.h <477:69 477:70>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <477:84 477:87>]
LOCAL_SYMBOL: b3Quaternion.h<469:32> [b3Quaternion.h <477:81 477:82>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <477:95 477:102>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <477:95 477:102>]
LOCAL_SYMBOL: b3Quaternion.h<476:23> [b3Quaternion.h <477:92 477:93>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <477:112 477:119>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <477:112 477:119>]
LOCAL_SYMBOL: b3Quaternion.h<469:32> [b3Quaternion.h <477:109 477:110>]
SYMBOL_METHOD public b3Quaternion b3Quaternion::operator-() const [b3Quaternion.h <483:2 <483:31 483:39> 493:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator-() const -> b3Quaternion [b3Quaternion.h <483:18 483:29>]
LOCAL_SYMBOL: b3Quaternion.h<484:2> [b3Quaternion.h <484:2 484:2>]
LOCAL_SYMBOL: b3Quaternion.h<484:2> [b3Quaternion.h <493:2 493:2>]
LOCAL_SYMBOL: b3Quaternion.h<490:23> [b3Quaternion.h <490:23 490:24>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator-() const -> b3Quaternion [b3Quaternion.h <490:9 490:20>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator-() const -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <491:10 491:21>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::operator-() const -> b3Quaternion [b3Quaternion.h <491:10 491:21>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator-() const -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <491:29 491:32>]
LOCAL_SYMBOL: b3Quaternion.h<490:23> [b3Quaternion.h <491:26 491:27>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator-() const -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <491:42 491:45>]
LOCAL_SYMBOL: b3Quaternion.h<490:23> [b3Quaternion.h <491:39 491:40>]
REFERENCE_CALL b3Quaternion b3Quaternion::operator-() const -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <491:56 491:59>]
LOCAL_SYMBOL: b3Quaternion.h<490:23> [b3Quaternion.h <491:53 491:54>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator-() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <491:70 491:77>]
REFERENCE_USAGE b3Quaternion b3Quaternion::operator-() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <491:70 491:77>]
LOCAL_SYMBOL: b3Quaternion.h<490:23> [b3Quaternion.h <491:67 491:68>]
SYMBOL_METHOD public b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const [b3Quaternion.h <495:2 <495:31 495:38> 503:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <495:18 495:29>]
LOCAL_SYMBOL: b3Quaternion.h<495:61> [b3Quaternion.h <495:61 495:62>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <495:47 495:58>]
LOCAL_SYMBOL: b3Quaternion.h<496:2> [b3Quaternion.h <496:2 496:2>]
LOCAL_SYMBOL: b3Quaternion.h<496:2> [b3Quaternion.h <503:2 503:2>]
LOCAL_SYMBOL: b3Quaternion.h<497:16> [b3Quaternion.h <497:16 497:19>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <497:3 497:14>]
SYMBOL_FUNCTION void b3Quaternion::b3Quaternion()
REFERENCE_CALL b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> void b3Quaternion::b3Quaternion() [b3Quaternion.h <497:16 497:19>]
LOCAL_SYMBOL: b3Quaternion.h<497:21> [b3Quaternion.h <497:21 497:23>]
REFERENCE_CALL b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> void b3Quaternion::b3Quaternion() [b3Quaternion.h <497:21 497:23>]
SYMBOL_FUNCTION b3Quaternion & b3Quaternion::operator=(b3Quaternion &&)
REFERENCE_CALL b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> b3Quaternion & b3Quaternion::operator=(b3Quaternion &&) [b3Quaternion.h <498:8 498:8>]
LOCAL_SYMBOL: b3Quaternion.h<497:16> [b3Quaternion.h <498:3 498:6>]
SYMBOL_FUNCTION b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const
REFERENCE_CALL b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const [b3Quaternion.h <498:16 498:16>]
LOCAL_SYMBOL: b3Quaternion.h<495:61> [b3Quaternion.h <498:18 498:19>]
REFERENCE_CALL b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> b3Quaternion & b3Quaternion::operator=(b3Quaternion &&) [b3Quaternion.h <499:7 499:7>]
LOCAL_SYMBOL: b3Quaternion.h<497:21> [b3Quaternion.h <499:3 499:5>]
SYMBOL_FUNCTION b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const
REFERENCE_CALL b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const [b3Quaternion.h <499:15 499:15>]
LOCAL_SYMBOL: b3Quaternion.h<495:61> [b3Quaternion.h <499:17 499:18>]
REFERENCE_CALL b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> b3Scalar b3Quaternion::dot(const b3Quaternion &) const [b3Quaternion.h <500:12 500:14>]
LOCAL_SYMBOL: b3Quaternion.h<497:16> [b3Quaternion.h <500:7 500:10>]
LOCAL_SYMBOL: b3Quaternion.h<497:16> [b3Quaternion.h <500:16 500:19>]
REFERENCE_CALL b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> b3Scalar b3Quaternion::dot(const b3Quaternion &) const [b3Quaternion.h <500:28 500:30>]
LOCAL_SYMBOL: b3Quaternion.h<497:21> [b3Quaternion.h <500:24 500:26>]
LOCAL_SYMBOL: b3Quaternion.h<497:21> [b3Quaternion.h <500:32 500:34>]
SYMBOL_FUNCTION void b3Quaternion::b3Quaternion(const b3Quaternion &)
REFERENCE_CALL b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> void b3Quaternion::b3Quaternion(const b3Quaternion &) [b3Quaternion.h <501:11 501:12>]
LOCAL_SYMBOL: b3Quaternion.h<495:61> [b3Quaternion.h <501:11 501:12>]
SYMBOL_FUNCTION b3Quaternion b3Quaternion::operator-() const
REFERENCE_CALL b3Quaternion b3Quaternion::farthest(const b3Quaternion &) const -> b3Quaternion b3Quaternion::operator-() const [b3Quaternion.h <502:11 502:11>]
LOCAL_SYMBOL: b3Quaternion.h<495:61> [b3Quaternion.h <502:12 502:13>]
SYMBOL_METHOD public b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const [b3Quaternion.h <506:2 <506:31 506:37> 514:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <506:18 506:29>]
LOCAL_SYMBOL: b3Quaternion.h<506:60> [b3Quaternion.h <506:60 506:61>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <506:46 506:57>]
LOCAL_SYMBOL: b3Quaternion.h<507:2> [b3Quaternion.h <507:2 507:2>]
LOCAL_SYMBOL: b3Quaternion.h<507:2> [b3Quaternion.h <514:2 514:2>]
LOCAL_SYMBOL: b3Quaternion.h<508:16> [b3Quaternion.h <508:16 508:19>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> b3Quaternion [b3Quaternion.h <508:3 508:14>]
REFERENCE_CALL b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> void b3Quaternion::b3Quaternion() [b3Quaternion.h <508:16 508:19>]
LOCAL_SYMBOL: b3Quaternion.h<508:21> [b3Quaternion.h <508:21 508:23>]
REFERENCE_CALL b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> void b3Quaternion::b3Quaternion() [b3Quaternion.h <508:21 508:23>]
REFERENCE_CALL b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> b3Quaternion & b3Quaternion::operator=(b3Quaternion &&) [b3Quaternion.h <509:8 509:8>]
LOCAL_SYMBOL: b3Quaternion.h<508:16> [b3Quaternion.h <509:3 509:6>]
REFERENCE_CALL b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> b3Quaternion b3Quaternion::operator-(const b3Quaternion &) const [b3Quaternion.h <509:16 509:16>]
LOCAL_SYMBOL: b3Quaternion.h<506:60> [b3Quaternion.h <509:18 509:19>]
REFERENCE_CALL b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> b3Quaternion & b3Quaternion::operator=(b3Quaternion &&) [b3Quaternion.h <510:7 510:7>]
LOCAL_SYMBOL: b3Quaternion.h<508:21> [b3Quaternion.h <510:3 510:5>]
REFERENCE_CALL b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> b3Quaternion b3Quaternion::operator+(const b3Quaternion &) const [b3Quaternion.h <510:15 510:15>]
LOCAL_SYMBOL: b3Quaternion.h<506:60> [b3Quaternion.h <510:17 510:18>]
REFERENCE_CALL b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> b3Scalar b3Quaternion::dot(const b3Quaternion &) const [b3Quaternion.h <511:12 511:14>]
LOCAL_SYMBOL: b3Quaternion.h<508:16> [b3Quaternion.h <511:7 511:10>]
LOCAL_SYMBOL: b3Quaternion.h<508:16> [b3Quaternion.h <511:16 511:19>]
REFERENCE_CALL b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> b3Scalar b3Quaternion::dot(const b3Quaternion &) const [b3Quaternion.h <511:28 511:30>]
LOCAL_SYMBOL: b3Quaternion.h<508:21> [b3Quaternion.h <511:24 511:26>]
LOCAL_SYMBOL: b3Quaternion.h<508:21> [b3Quaternion.h <511:32 511:34>]
REFERENCE_CALL b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> void b3Quaternion::b3Quaternion(const b3Quaternion &) [b3Quaternion.h <512:11 512:12>]
LOCAL_SYMBOL: b3Quaternion.h<506:60> [b3Quaternion.h <512:11 512:12>]
REFERENCE_CALL b3Quaternion b3Quaternion::nearest(const b3Quaternion &) const -> b3Quaternion b3Quaternion::operator-() const [b3Quaternion.h <513:11 513:11>]
LOCAL_SYMBOL: b3Quaternion.h<506:60> [b3Quaternion.h <513:12 513:13>]
SYMBOL_METHOD public b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const [b3Quaternion.h <521:2 <521:15 521:19> 547:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Quaternion [b3Quaternion.h <521:2 521:13>]
LOCAL_SYMBOL: b3Quaternion.h<521:41> [b3Quaternion.h <521:41 521:41>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Quaternion [b3Quaternion.h <521:27 521:38>]
LOCAL_SYMBOL: b3Quaternion.h<521:60> [b3Quaternion.h <521:60 521:60>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <521:50 521:57>]
LOCAL_SYMBOL: b3Quaternion.h<522:2> [b3Quaternion.h <522:2 522:2>]
LOCAL_SYMBOL: b3Quaternion.h<522:2> [b3Quaternion.h <547:2 547:2>]
LOCAL_SYMBOL: b3Quaternion.h<523:13> [b3Quaternion.h <523:13 523:21>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <523:4 523:11>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar b3Sqrt(b3Scalar) [b3Quaternion.h <523:25 523:30>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar b3Quaternion::length2() const [b3Quaternion.h <523:32 523:38>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar b3Quaternion::length2() const [b3Quaternion.h <523:46 523:52>]
LOCAL_SYMBOL: b3Quaternion.h<521:41> [b3Quaternion.h <523:44 523:44>]
LOCAL_SYMBOL: b3Quaternion.h<526:14> [b3Quaternion.h <526:14 526:20>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <526:5 526:12>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar b3Quaternion::dot(const b3Quaternion &) const [b3Quaternion.h <526:24 526:26>]
LOCAL_SYMBOL: b3Quaternion.h<521:41> [b3Quaternion.h <526:28 526:28>]
LOCAL_SYMBOL: b3Quaternion.h<523:13> [b3Quaternion.h <526:33 526:41>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar b3Fabs(b3Scalar) [b3Quaternion.h <527:9 527:14>]
LOCAL_SYMBOL: b3Quaternion.h<526:14> [b3Quaternion.h <527:16 527:22>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <527:27 527:34>]
LOCAL_SYMBOL: b3Quaternion.h<528:3> [b3Quaternion.h <528:3 528:3>]
LOCAL_SYMBOL: b3Quaternion.h<528:3> [b3Quaternion.h <542:3 542:3>]
LOCAL_SYMBOL: b3Quaternion.h<530:22> [b3Quaternion.h <530:22 530:25>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <530:13 530:20>]
LOCAL_SYMBOL: b3Quaternion.h<526:14> [b3Quaternion.h <530:30 530:36>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <530:45 530:52>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <530:60 530:67>]
LOCAL_SYMBOL: b3Quaternion.h<532:22> [b3Quaternion.h <532:22 532:26>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <532:13 532:20>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar b3Acos(b3Scalar) [b3Quaternion.h <532:30 532:35>]
LOCAL_SYMBOL: b3Quaternion.h<530:22> [b3Quaternion.h <532:37 532:40>]
LOCAL_SYMBOL: b3Quaternion.h<526:14> [b3Quaternion.h <532:44 532:50>]
LOCAL_SYMBOL: b3Quaternion.h<533:22> [b3Quaternion.h <533:22 533:23>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <533:13 533:20>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar b3Sin(b3Scalar) [b3Quaternion.h <533:27 533:31>]
LOCAL_SYMBOL: b3Quaternion.h<530:22> [b3Quaternion.h <533:33 533:36>]
LOCAL_SYMBOL: b3Quaternion.h<521:60> [b3Quaternion.h <533:40 533:40>]
LOCAL_SYMBOL: b3Quaternion.h<532:22> [b3Quaternion.h <533:44 533:48>]
LOCAL_SYMBOL: b3Quaternion.h<534:22> [b3Quaternion.h <534:22 534:22>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <534:13 534:20>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <534:26 534:33>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar b3Sin(b3Scalar) [b3Quaternion.h <534:42 534:46>]
LOCAL_SYMBOL: b3Quaternion.h<532:22> [b3Quaternion.h <534:48 534:52>]
LOCAL_SYMBOL: b3Quaternion.h<535:22> [b3Quaternion.h <535:22 535:23>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <535:13 535:20>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar b3Sin(b3Scalar) [b3Quaternion.h <535:27 535:31>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [b3Quaternion.h <535:34 535:41>]
LOCAL_SYMBOL: b3Quaternion.h<521:60> [b3Quaternion.h <535:50 535:50>]
LOCAL_SYMBOL: b3Quaternion.h<532:22> [b3Quaternion.h <535:55 535:59>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <537:14 537:25>]
REFERENCE_TYPE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Quaternion [b3Quaternion.h <537:14 537:25>]
REFERENCE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <538:12 538:19>]
REFERENCE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <538:12 538:19>]
LOCAL_SYMBOL: b3Quaternion.h<535:22> [b3Quaternion.h <538:26 538:27>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <538:33 538:36>]
LOCAL_SYMBOL: b3Quaternion.h<521:41> [b3Quaternion.h <538:31 538:31>]
LOCAL_SYMBOL: b3Quaternion.h<533:22> [b3Quaternion.h <538:42 538:43>]
LOCAL_SYMBOL: b3Quaternion.h<534:22> [b3Quaternion.h <538:48 538:48>]
REFERENCE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <539:12 539:19>]
REFERENCE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <539:12 539:19>]
LOCAL_SYMBOL: b3Quaternion.h<535:22> [b3Quaternion.h <539:26 539:27>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <539:33 539:36>]
LOCAL_SYMBOL: b3Quaternion.h<521:41> [b3Quaternion.h <539:31 539:31>]
LOCAL_SYMBOL: b3Quaternion.h<533:22> [b3Quaternion.h <539:42 539:43>]
LOCAL_SYMBOL: b3Quaternion.h<534:22> [b3Quaternion.h <539:48 539:48>]
REFERENCE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <540:12 540:19>]
REFERENCE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <540:12 540:19>]
LOCAL_SYMBOL: b3Quaternion.h<535:22> [b3Quaternion.h <540:26 540:27>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <540:33 540:36>]
LOCAL_SYMBOL: b3Quaternion.h<521:41> [b3Quaternion.h <540:31 540:31>]
LOCAL_SYMBOL: b3Quaternion.h<533:22> [b3Quaternion.h <540:42 540:43>]
LOCAL_SYMBOL: b3Quaternion.h<534:22> [b3Quaternion.h <540:48 540:48>]
REFERENCE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <541:12 541:19>]
REFERENCE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <541:12 541:19>]
LOCAL_SYMBOL: b3Quaternion.h<535:22> [b3Quaternion.h <541:26 541:27>]
REFERENCE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <541:33 541:40>]
REFERENCE_USAGE b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <541:33 541:40>]
LOCAL_SYMBOL: b3Quaternion.h<521:41> [b3Quaternion.h <541:31 541:31>]
LOCAL_SYMBOL: b3Quaternion.h<533:22> [b3Quaternion.h <541:47 541:48>]
LOCAL_SYMBOL: b3Quaternion.h<534:22> [b3Quaternion.h <541:53 541:53>]
LOCAL_SYMBOL: b3Quaternion.h<544:3> [b3Quaternion.h <544:3 544:3>]
LOCAL_SYMBOL: b3Quaternion.h<544:3> [b3Quaternion.h <546:3 546:3>]
REFERENCE_CALL b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const -> void b3Quaternion::b3Quaternion(const b3Quaternion &) [b3Quaternion.h <545:12 545:15>]
SYMBOL_METHOD public static const b3Quaternion & b3Quaternion::getIdentity() [b3Quaternion.h <549:2 <549:29 549:39> 553:2>]
REFERENCE_TYPE_USAGE static const b3Quaternion & b3Quaternion::getIdentity() -> b3Quaternion [b3Quaternion.h <549:15 549:26>]
LOCAL_SYMBOL: b3Quaternion.h<550:2> [b3Quaternion.h <550:2 550:2>]
LOCAL_SYMBOL: b3Quaternion.h<550:2> [b3Quaternion.h <553:2 553:2>]
LOCAL_SYMBOL: b3Quaternion.h<551:29> [b3Quaternion.h <551:29 551:40>]
REFERENCE_TYPE_USAGE static const b3Quaternion & b3Quaternion::getIdentity() -> b3Quaternion [b3Quaternion.h <551:16 551:27>]
REFERENCE_CALL static const b3Quaternion & b3Quaternion::getIdentity() -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <551:29 551:40>]
REFERENCE_TYPE_USAGE static const b3Quaternion & b3Quaternion::getIdentity() -> b3Scalar [b3Quaternion.h <551:42 551:49>]
REFERENCE_TYPE_USAGE static const b3Quaternion & b3Quaternion::getIdentity() -> b3Scalar [b3Quaternion.h <551:55 551:62>]
REFERENCE_TYPE_USAGE static const b3Quaternion & b3Quaternion::getIdentity() -> b3Scalar [b3Quaternion.h <551:68 551:75>]
REFERENCE_TYPE_USAGE static const b3Quaternion & b3Quaternion::getIdentity() -> b3Scalar [b3Quaternion.h <551:81 551:88>]
LOCAL_SYMBOL: b3Quaternion.h<551:29> [b3Quaternion.h <552:10 552:21>]
SYMBOL_METHOD public const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <555:2 <555:34 555:37> 555:69>]
REFERENCE_TYPE_USAGE const b3Scalar & b3Quaternion::getW() const -> b3Scalar [b3Quaternion.h <555:24 555:31>]
LOCAL_SYMBOL: b3Quaternion.h<555:47> [b3Quaternion.h <555:47 555:47>]
LOCAL_SYMBOL: b3Quaternion.h<555:47> [b3Quaternion.h <555:69 555:69>]
REFERENCE_USAGE const b3Scalar & b3Quaternion::getW() const -> b3Scalar [] b3QuadWord::anonymous union (b3QuadWord.h<56:2>)::m_floats [b3Quaternion.h <555:56 555:63>]
REFERENCE_USAGE const b3Scalar & b3Quaternion::getW() const -> b3QuadWord::anonymous union (b3QuadWord.h<56:2>) b3QuadWord:: [b3Quaternion.h <555:56 555:63>]
SYMBOL_METHOD public void b3Quaternion::b3Quaternion(const b3Quaternion &) [b3Quaternion.h <42:7 <42:7 42:18> 42:18>]
SYMBOL_FUNCTION void b3QuadWord::b3QuadWord(const b3QuadWord &)
REFERENCE_CALL void b3Quaternion::b3Quaternion(const b3Quaternion &) -> void b3QuadWord::b3QuadWord(const b3QuadWord &) [b3Quaternion.h <42:7 42:18>]
LOCAL_SYMBOL: b3Quaternion.h<42:7> [b3Quaternion.h <42:7 42:18>]
SYMBOL_METHOD public void b3Quaternion::b3Quaternion(b3Quaternion &&) [b3Quaternion.h <42:7 <42:7 42:18> 42:18>]
REFERENCE_CALL void b3Quaternion::b3Quaternion(b3Quaternion &&) -> void b3QuadWord::b3QuadWord(const b3QuadWord &) [b3Quaternion.h <42:7 42:18>]
REFERENCE_TYPE_USAGE void b3Quaternion::b3Quaternion(b3Quaternion &&) -> b3Quaternion [b3Quaternion.h <42:7 42:18>]
SYMBOL_METHOD public b3Quaternion & b3Quaternion::operator=(b3Quaternion &&) [b3Quaternion.h <42:7 <42:7 42:18> 42:18>]
SYMBOL_FUNCTION b3QuadWord & b3QuadWord::operator=(const b3QuadWord &)
REFERENCE_CALL b3Quaternion & b3Quaternion::operator=(b3Quaternion &&) -> b3QuadWord & b3QuadWord::operator=(const b3QuadWord &) [b3Quaternion.h <42:7 42:18>]
SYMBOL_CLASS b3QuadWord
QUALIFIER: b3QuadWord [b3Quaternion.h <42:7 42:18>]
SYMBOL_METHOD public void b3Quaternion::~b3Quaternion() [b3Quaternion.h <42:7 42:18>]
SYMBOL_METHOD public b3Quaternion & b3Quaternion::operator=(const b3Quaternion &) [b3Quaternion.h <42:7 42:18>]
SYMBOL_FUNCTION b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) [b3Quaternion.h <565:1 <566:1 566:9> 651:1>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <565:17 565:28>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <566:31 566:32>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <566:17 566:28>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <566:55 566:56>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <566:41 566:52>]
LOCAL_SYMBOL: b3Quaternion.h<567:1> [b3Quaternion.h <567:1 567:1>]
LOCAL_SYMBOL: b3Quaternion.h<567:1> [b3Quaternion.h <651:1 651:1>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <645:9 645:20>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <645:9 645:20>]
SYMBOL_FUNCTION const b3Scalar & b3Quaternion::getW() const
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <646:12 646:15>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <646:9 646:10>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <646:24 646:27>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <646:21 646:22>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <646:36 646:39>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <646:33 646:34>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <646:48 646:51>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <646:45 646:46>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <646:60 646:63>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <646:57 646:58>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <646:72 646:75>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <646:69 646:70>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <646:84 646:87>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <646:81 646:82>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <646:96 646:99>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <646:93 646:94>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <647:6 647:9>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <647:3 647:4>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <647:18 647:21>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <647:15 647:16>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <647:30 647:33>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <647:27 647:28>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <647:42 647:45>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <647:39 647:40>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <647:54 647:57>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <647:51 647:52>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <647:66 647:69>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <647:63 647:64>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <647:78 647:81>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <647:75 647:76>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <647:90 647:93>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <647:87 647:88>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <648:6 648:9>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <648:3 648:4>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <648:18 648:21>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <648:15 648:16>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <648:30 648:33>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <648:27 648:28>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <648:42 648:45>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <648:39 648:40>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <648:54 648:57>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <648:51 648:52>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <648:66 648:69>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <648:63 648:64>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <648:78 648:81>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <648:75 648:76>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <648:90 648:93>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <648:87 648:88>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <649:6 649:9>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <649:3 649:4>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <649:18 649:21>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <649:15 649:16>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <649:30 649:33>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <649:27 649:28>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <649:42 649:45>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <649:39 649:40>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <649:54 649:57>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <649:51 649:52>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <649:66 649:69>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <649:63 649:64>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <649:78 649:81>]
LOCAL_SYMBOL: b3Quaternion.h<566:31> [b3Quaternion.h <649:75 649:76>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <649:90 649:93>]
LOCAL_SYMBOL: b3Quaternion.h<566:55> [b3Quaternion.h <649:87 649:88>]
SYMBOL_FUNCTION b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) [b3Quaternion.h <653:1 <654:1 654:9> 734:1>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> b3Quaternion [b3Quaternion.h <653:17 653:28>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <654:31 654:31>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> b3Quaternion [b3Quaternion.h <654:17 654:28>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <654:51 654:51>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> b3Vector3 [b3Quaternion.h <654:40 654:48>]
LOCAL_SYMBOL: b3Quaternion.h<655:1> [b3Quaternion.h <655:1 655:1>]
LOCAL_SYMBOL: b3Quaternion.h<655:1> [b3Quaternion.h <734:1 734:1>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <728:9 728:20>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> b3Quaternion [b3Quaternion.h <728:9 728:20>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <729:12 729:15>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <729:10 729:10>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3Quaternion.h <729:23 729:26>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <729:21 729:21>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <729:34 729:37>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <729:32 729:32>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3Quaternion.h <729:45 729:48>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <729:43 729:43>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <729:56 729:59>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <729:54 729:54>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3Quaternion.h <729:67 729:70>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <729:65 729:65>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <730:6 730:9>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <730:4 730:4>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3Quaternion.h <730:17 730:20>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <730:15 730:15>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <730:28 730:31>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <730:26 730:26>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3Quaternion.h <730:39 730:42>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <730:37 730:37>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <730:50 730:53>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <730:48 730:48>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3Quaternion.h <730:61 730:64>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <730:59 730:59>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <731:6 731:9>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <731:4 731:4>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3Quaternion.h <731:17 731:20>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <731:15 731:15>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <731:28 731:31>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <731:26 731:26>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3Quaternion.h <731:39 731:42>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <731:37 731:37>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <731:50 731:53>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <731:48 731:48>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3Quaternion.h <731:61 731:64>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <731:59 731:59>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <732:6 732:9>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <732:4 732:4>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3Quaternion.h <732:17 732:20>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <732:15 732:15>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <732:28 732:31>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <732:26 732:26>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3Quaternion.h <732:39 732:42>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <732:37 732:37>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <732:50 732:53>]
LOCAL_SYMBOL: b3Quaternion.h<654:31> [b3Quaternion.h <732:48 732:48>]
REFERENCE_CALL b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3Quaternion.h <732:61 732:64>]
LOCAL_SYMBOL: b3Quaternion.h<654:51> [b3Quaternion.h <732:59 732:59>]
SYMBOL_FUNCTION b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) [b3Quaternion.h <736:1 <737:1 737:9> 817:1>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <736:17 736:28>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <737:28 737:28>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> b3Vector3 [b3Quaternion.h <737:17 737:25>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <737:51 737:51>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <737:37 737:48>]
LOCAL_SYMBOL: b3Quaternion.h<738:1> [b3Quaternion.h <738:1 738:1>]
LOCAL_SYMBOL: b3Quaternion.h<738:1> [b3Quaternion.h <817:1 817:1>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <811:9 811:20>]
REFERENCE_TYPE_USAGE b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <811:9 811:20>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getX() const [b3Quaternion.h <812:12 812:15>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <812:10 812:10>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <812:23 812:26>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <812:21 812:21>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getY() const [b3Quaternion.h <812:34 812:37>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <812:32 812:32>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <812:45 812:48>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <812:43 812:43>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getZ() const [b3Quaternion.h <812:56 812:59>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <812:54 812:54>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <812:67 812:70>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <812:65 812:65>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getY() const [b3Quaternion.h <813:6 813:9>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <813:4 813:4>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <813:17 813:20>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <813:15 813:15>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getZ() const [b3Quaternion.h <813:28 813:31>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <813:26 813:26>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <813:39 813:42>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <813:37 813:37>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getX() const [b3Quaternion.h <813:50 813:53>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <813:48 813:48>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <813:61 813:64>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <813:59 813:59>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getZ() const [b3Quaternion.h <814:6 814:9>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <814:4 814:4>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Quaternion.h <814:17 814:20>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <814:15 814:15>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getX() const [b3Quaternion.h <814:28 814:31>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <814:26 814:26>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <814:39 814:42>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <814:37 814:37>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getY() const [b3Quaternion.h <814:50 814:53>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <814:48 814:48>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <814:61 814:64>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <814:59 814:59>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getX() const [b3Quaternion.h <815:6 815:9>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <815:4 815:4>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <815:17 815:20>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <815:15 815:15>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getY() const [b3Quaternion.h <815:28 815:31>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <815:26 815:26>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <815:39 815:42>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <815:37 815:37>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3Vector3::getZ() const [b3Quaternion.h <815:50 815:53>]
LOCAL_SYMBOL: b3Quaternion.h<737:28> [b3Quaternion.h <815:48 815:48>]
REFERENCE_CALL b3Quaternion operator*(const b3Vector3 &, const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <815:61 815:64>]
LOCAL_SYMBOL: b3Quaternion.h<737:51> [b3Quaternion.h <815:59 815:59>]
SYMBOL_FUNCTION b3Scalar b3Dot(const b3Quaternion &, const b3Quaternion &) [b3Quaternion.h <820:1 <821:1 821:5> 824:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Dot(const b3Quaternion &, const b3Quaternion &) -> b3Scalar [b3Quaternion.h <820:17 820:24>]
LOCAL_SYMBOL: b3Quaternion.h<821:27> [b3Quaternion.h <821:27 821:28>]
REFERENCE_TYPE_USAGE b3Scalar b3Dot(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <821:13 821:24>]
LOCAL_SYMBOL: b3Quaternion.h<821:51> [b3Quaternion.h <821:51 821:52>]
REFERENCE_TYPE_USAGE b3Scalar b3Dot(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <821:37 821:48>]
LOCAL_SYMBOL: b3Quaternion.h<822:1> [b3Quaternion.h <822:1 822:1>]
LOCAL_SYMBOL: b3Quaternion.h<822:1> [b3Quaternion.h <824:1 824:1>]
REFERENCE_CALL b3Scalar b3Dot(const b3Quaternion &, const b3Quaternion &) -> b3Scalar b3Quaternion::dot(const b3Quaternion &) const [b3Quaternion.h <823:12 823:14>]
LOCAL_SYMBOL: b3Quaternion.h<821:27> [b3Quaternion.h <823:9 823:10>]
LOCAL_SYMBOL: b3Quaternion.h<821:51> [b3Quaternion.h <823:16 823:17>]
SYMBOL_FUNCTION b3Scalar b3Length(const b3Quaternion &) [b3Quaternion.h <828:1 <829:1 829:8> 832:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Length(const b3Quaternion &) -> b3Scalar [b3Quaternion.h <828:17 828:24>]
LOCAL_SYMBOL: b3Quaternion.h<829:30> [b3Quaternion.h <829:30 829:30>]
REFERENCE_TYPE_USAGE b3Scalar b3Length(const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <829:16 829:27>]
LOCAL_SYMBOL: b3Quaternion.h<830:1> [b3Quaternion.h <830:1 830:1>]
LOCAL_SYMBOL: b3Quaternion.h<830:1> [b3Quaternion.h <832:1 832:1>]
REFERENCE_CALL b3Scalar b3Length(const b3Quaternion &) -> b3Scalar b3Quaternion::length() const [b3Quaternion.h <831:11 831:16>]
LOCAL_SYMBOL: b3Quaternion.h<829:30> [b3Quaternion.h <831:9 831:9>]
SYMBOL_FUNCTION b3Scalar b3Angle(const b3Quaternion &, const b3Quaternion &) [b3Quaternion.h <835:1 <836:1 836:7> 839:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Angle(const b3Quaternion &, const b3Quaternion &) -> b3Scalar [b3Quaternion.h <835:17 835:24>]
LOCAL_SYMBOL: b3Quaternion.h<836:29> [b3Quaternion.h <836:29 836:30>]
REFERENCE_TYPE_USAGE b3Scalar b3Angle(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <836:15 836:26>]
LOCAL_SYMBOL: b3Quaternion.h<836:53> [b3Quaternion.h <836:53 836:54>]
REFERENCE_TYPE_USAGE b3Scalar b3Angle(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <836:39 836:50>]
LOCAL_SYMBOL: b3Quaternion.h<837:1> [b3Quaternion.h <837:1 837:1>]
LOCAL_SYMBOL: b3Quaternion.h<837:1> [b3Quaternion.h <839:1 839:1>]
SYMBOL_FUNCTION b3Scalar b3Quaternion::angle(const b3Quaternion &) const
REFERENCE_CALL b3Scalar b3Angle(const b3Quaternion &, const b3Quaternion &) -> b3Scalar b3Quaternion::angle(const b3Quaternion &) const [b3Quaternion.h <838:12 838:16>]
LOCAL_SYMBOL: b3Quaternion.h<836:29> [b3Quaternion.h <838:9 838:10>]
LOCAL_SYMBOL: b3Quaternion.h<836:53> [b3Quaternion.h <838:18 838:19>]
SYMBOL_FUNCTION b3Quaternion b3Inverse(const b3Quaternion &) [b3Quaternion.h <842:1 <843:1 843:9> 846:1>]
REFERENCE_TYPE_USAGE b3Quaternion b3Inverse(const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <842:17 842:28>]
LOCAL_SYMBOL: b3Quaternion.h<843:31> [b3Quaternion.h <843:31 843:31>]
REFERENCE_TYPE_USAGE b3Quaternion b3Inverse(const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <843:17 843:28>]
LOCAL_SYMBOL: b3Quaternion.h<844:1> [b3Quaternion.h <844:1 844:1>]
LOCAL_SYMBOL: b3Quaternion.h<844:1> [b3Quaternion.h <846:1 846:1>]
SYMBOL_FUNCTION b3Quaternion b3Quaternion::inverse() const
REFERENCE_CALL b3Quaternion b3Inverse(const b3Quaternion &) -> b3Quaternion b3Quaternion::inverse() const [b3Quaternion.h <845:11 845:17>]
LOCAL_SYMBOL: b3Quaternion.h<843:31> [b3Quaternion.h <845:9 845:9>]
SYMBOL_FUNCTION b3Quaternion b3Slerp(const b3Quaternion &, const b3Quaternion &, const b3Scalar &) [b3Quaternion.h <853:1 <854:1 854:7> 857:1>]
REFERENCE_TYPE_USAGE b3Quaternion b3Slerp(const b3Quaternion &, const b3Quaternion &, const b3Scalar &) -> b3Quaternion [b3Quaternion.h <853:17 853:28>]
LOCAL_SYMBOL: b3Quaternion.h<854:29> [b3Quaternion.h <854:29 854:30>]
REFERENCE_TYPE_USAGE b3Quaternion b3Slerp(const b3Quaternion &, const b3Quaternion &, const b3Scalar &) -> b3Quaternion [b3Quaternion.h <854:15 854:26>]
LOCAL_SYMBOL: b3Quaternion.h<854:53> [b3Quaternion.h <854:53 854:54>]
REFERENCE_TYPE_USAGE b3Quaternion b3Slerp(const b3Quaternion &, const b3Quaternion &, const b3Scalar &) -> b3Quaternion [b3Quaternion.h <854:39 854:50>]
LOCAL_SYMBOL: b3Quaternion.h<854:73> [b3Quaternion.h <854:73 854:73>]
REFERENCE_TYPE_USAGE b3Quaternion b3Slerp(const b3Quaternion &, const b3Quaternion &, const b3Scalar &) -> b3Scalar [b3Quaternion.h <854:63 854:70>]
LOCAL_SYMBOL: b3Quaternion.h<855:1> [b3Quaternion.h <855:1 855:1>]
LOCAL_SYMBOL: b3Quaternion.h<855:1> [b3Quaternion.h <857:1 857:1>]
SYMBOL_FUNCTION b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const
REFERENCE_CALL b3Quaternion b3Slerp(const b3Quaternion &, const b3Quaternion &, const b3Scalar &) -> b3Quaternion b3Quaternion::slerp(const b3Quaternion &, const b3Scalar &) const [b3Quaternion.h <856:12 856:16>]
LOCAL_SYMBOL: b3Quaternion.h<854:29> [b3Quaternion.h <856:9 856:10>]
LOCAL_SYMBOL: b3Quaternion.h<854:53> [b3Quaternion.h <856:18 856:19>]
LOCAL_SYMBOL: b3Quaternion.h<854:73> [b3Quaternion.h <856:22 856:22>]
SYMBOL_FUNCTION b3Quaternion b3QuatMul(const b3Quaternion &, const b3Quaternion &) [b3Quaternion.h <859:1 <860:1 860:9> 863:1>]
REFERENCE_TYPE_USAGE b3Quaternion b3QuatMul(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <859:17 859:28>]
LOCAL_SYMBOL: b3Quaternion.h<860:31> [b3Quaternion.h <860:31 860:34>]
REFERENCE_TYPE_USAGE b3Quaternion b3QuatMul(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <860:17 860:28>]
LOCAL_SYMBOL: b3Quaternion.h<860:57> [b3Quaternion.h <860:57 860:60>]
REFERENCE_TYPE_USAGE b3Quaternion b3QuatMul(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <860:43 860:54>]
LOCAL_SYMBOL: b3Quaternion.h<861:1> [b3Quaternion.h <861:1 861:1>]
LOCAL_SYMBOL: b3Quaternion.h<861:1> [b3Quaternion.h <863:1 863:1>]
SYMBOL_FUNCTION b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &)
REFERENCE_CALL b3Quaternion b3QuatMul(const b3Quaternion &, const b3Quaternion &) -> b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) [b3Quaternion.h <862:13 862:13>]
LOCAL_SYMBOL: b3Quaternion.h<860:31> [b3Quaternion.h <862:9 862:12>]
LOCAL_SYMBOL: b3Quaternion.h<860:57> [b3Quaternion.h <862:14 862:17>]
SYMBOL_FUNCTION b3Quaternion b3QuatNormalized(const b3Quaternion &) [b3Quaternion.h <865:1 <866:1 866:16> 869:1>]
REFERENCE_TYPE_USAGE b3Quaternion b3QuatNormalized(const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <865:17 865:28>]
LOCAL_SYMBOL: b3Quaternion.h<866:38> [b3Quaternion.h <866:38 866:40>]
REFERENCE_TYPE_USAGE b3Quaternion b3QuatNormalized(const b3Quaternion &) -> b3Quaternion [b3Quaternion.h <866:24 866:35>]
LOCAL_SYMBOL: b3Quaternion.h<867:1> [b3Quaternion.h <867:1 867:1>]
LOCAL_SYMBOL: b3Quaternion.h<867:1> [b3Quaternion.h <869:1 869:1>]
SYMBOL_FUNCTION b3Quaternion b3Quaternion::normalized() const
REFERENCE_CALL b3Quaternion b3QuatNormalized(const b3Quaternion &) -> b3Quaternion b3Quaternion::normalized() const [b3Quaternion.h <868:13 868:22>]
LOCAL_SYMBOL: b3Quaternion.h<866:38> [b3Quaternion.h <868:9 868:11>]
SYMBOL_FUNCTION b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) [b3Quaternion.h <873:1 <874:1 874:12> 885:1>]
REFERENCE_TYPE_USAGE b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) -> b3Vector3 [b3Quaternion.h <873:17 873:25>]
LOCAL_SYMBOL: b3Quaternion.h<874:34> [b3Quaternion.h <874:34 874:41>]
REFERENCE_TYPE_USAGE b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) -> b3Quaternion [b3Quaternion.h <874:20 874:31>]
LOCAL_SYMBOL: b3Quaternion.h<874:61> [b3Quaternion.h <874:61 874:61>]
REFERENCE_TYPE_USAGE b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) -> b3Vector3 [b3Quaternion.h <874:50 874:58>]
LOCAL_SYMBOL: b3Quaternion.h<875:1> [b3Quaternion.h <875:1 875:1>]
LOCAL_SYMBOL: b3Quaternion.h<875:1> [b3Quaternion.h <885:1 885:1>]
LOCAL_SYMBOL: b3Quaternion.h<876:15> [b3Quaternion.h <876:15 876:15>]
REFERENCE_TYPE_USAGE b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) -> b3Quaternion [b3Quaternion.h <876:2 876:13>]
SYMBOL_FUNCTION b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &)
REFERENCE_CALL b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) -> b3Quaternion operator*(const b3Quaternion &, const b3Vector3 &) [b3Quaternion.h <876:28 876:28>]
LOCAL_SYMBOL: b3Quaternion.h<874:34> [b3Quaternion.h <876:19 876:26>]
LOCAL_SYMBOL: b3Quaternion.h<874:61> [b3Quaternion.h <876:30 876:30>]
SYMBOL_FUNCTION b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &)
REFERENCE_CALL b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) -> b3Quaternion & b3Quaternion::operator*=(const b3Quaternion &) [b3Quaternion.h <877:4 877:5>]
LOCAL_SYMBOL: b3Quaternion.h<876:15> [b3Quaternion.h <877:2 877:2>]
REFERENCE_CALL b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) -> b3Quaternion b3Quaternion::inverse() const [b3Quaternion.h <877:16 877:22>]
LOCAL_SYMBOL: b3Quaternion.h<874:34> [b3Quaternion.h <877:7 877:14>]
REFERENCE_CALL b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Quaternion.h <883:9 883:21>]
REFERENCE_CALL b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getX() const [b3Quaternion.h <883:25 883:28>]
LOCAL_SYMBOL: b3Quaternion.h<876:15> [b3Quaternion.h <883:23 883:23>]
REFERENCE_CALL b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getY() const [b3Quaternion.h <883:34 883:37>]
LOCAL_SYMBOL: b3Quaternion.h<876:15> [b3Quaternion.h <883:32 883:32>]
REFERENCE_CALL b3Vector3 b3QuatRotate(const b3Quaternion &, const b3Vector3 &) -> const b3Scalar & b3QuadWord::getZ() const [b3Quaternion.h <883:43 883:46>]
LOCAL_SYMBOL: b3Quaternion.h<876:15> [b3Quaternion.h <883:41 883:41>]
SYMBOL_FUNCTION b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) [b3Quaternion.h <887:1 <888:1 888:17> 905:1>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Quaternion [b3Quaternion.h <887:17 887:28>]
LOCAL_SYMBOL: b3Quaternion.h<888:36> [b3Quaternion.h <888:36 888:37>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Quaternion.h <888:25 888:33>]
LOCAL_SYMBOL: b3Quaternion.h<888:57> [b3Quaternion.h <888:57 888:58>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Quaternion.h <888:46 888:54>]
LOCAL_SYMBOL: b3Quaternion.h<889:1> [b3Quaternion.h <889:1 889:1>]
LOCAL_SYMBOL: b3Quaternion.h<889:1> [b3Quaternion.h <905:1 905:1>]
LOCAL_SYMBOL: b3Quaternion.h<890:12> [b3Quaternion.h <890:12 890:12>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Quaternion.h <890:2 890:10>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 b3Vector3::cross(const b3Vector3 &) const [b3Quaternion.h <890:19 890:23>]
LOCAL_SYMBOL: b3Quaternion.h<888:36> [b3Quaternion.h <890:16 890:17>]
LOCAL_SYMBOL: b3Quaternion.h<888:57> [b3Quaternion.h <890:25 890:26>]
LOCAL_SYMBOL: b3Quaternion.h<891:12> [b3Quaternion.h <891:12 891:12>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Scalar [b3Quaternion.h <891:2 891:9>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Quaternion.h <891:19 891:21>]
LOCAL_SYMBOL: b3Quaternion.h<888:36> [b3Quaternion.h <891:16 891:17>]
LOCAL_SYMBOL: b3Quaternion.h<888:57> [b3Quaternion.h <891:23 891:24>]
LOCAL_SYMBOL: b3Quaternion.h<891:12> [b3Quaternion.h <893:6 893:6>]
LOCAL_SYMBOL: b3Quaternion.h<894:2> [b3Quaternion.h <894:2 894:2>]
LOCAL_SYMBOL: b3Quaternion.h<894:2> [b3Quaternion.h <898:2 898:2>]
LOCAL_SYMBOL: b3Quaternion.h<895:13> [b3Quaternion.h <895:13 895:13>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3Quaternion.h <895:3 895:11>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> void b3Vector3::b3Vector3() [b3Quaternion.h <895:13 895:13>]
LOCAL_SYMBOL: b3Quaternion.h<895:15> [b3Quaternion.h <895:15 895:20>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> void b3Vector3::b3Vector3() [b3Quaternion.h <895:15 895:20>]
SYMBOL_FUNCTION void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &)
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> void b3PlaneSpace1<b3Vector3>(const b3Vector3 &, b3Vector3 &, b3Vector3 &) [b3Quaternion.h <896:3 896:15>]
LOCAL_SYMBOL: b3Quaternion.h<888:36> [b3Quaternion.h <896:17 896:18>]
LOCAL_SYMBOL: b3Quaternion.h<895:13> [b3Quaternion.h <896:20 896:20>]
LOCAL_SYMBOL: b3Quaternion.h<895:15> [b3Quaternion.h <896:22 896:27>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <897:10 897:21>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Quaternion [b3Quaternion.h <897:10 897:21>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3Quaternion.h <897:25 897:28>]
LOCAL_SYMBOL: b3Quaternion.h<895:13> [b3Quaternion.h <897:23 897:23>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3Quaternion.h <897:34 897:37>]
LOCAL_SYMBOL: b3Quaternion.h<895:13> [b3Quaternion.h <897:32 897:32>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3Quaternion.h <897:43 897:46>]
LOCAL_SYMBOL: b3Quaternion.h<895:13> [b3Quaternion.h <897:41 897:41>]
LOCAL_SYMBOL: b3Quaternion.h<900:12> [b3Quaternion.h <900:12 900:12>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Scalar [b3Quaternion.h <900:2 900:9>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Scalar b3Sqrt(b3Scalar) [b3Quaternion.h <900:16 900:21>]
LOCAL_SYMBOL: b3Quaternion.h<891:12> [b3Quaternion.h <900:31 900:31>]
LOCAL_SYMBOL: b3Quaternion.h<901:11> [b3Quaternion.h <901:11 901:12>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Scalar [b3Quaternion.h <901:2 901:9>]
LOCAL_SYMBOL: b3Quaternion.h<900:12> [b3Quaternion.h <901:23 901:23>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> void b3Quaternion::b3Quaternion(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Quaternion.h <903:9 903:20>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> b3Quaternion [b3Quaternion.h <903:9 903:20>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3Quaternion.h <903:24 903:27>]
LOCAL_SYMBOL: b3Quaternion.h<890:12> [b3Quaternion.h <903:22 903:22>]
LOCAL_SYMBOL: b3Quaternion.h<901:11> [b3Quaternion.h <903:31 903:32>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3Quaternion.h <903:36 903:39>]
LOCAL_SYMBOL: b3Quaternion.h<890:12> [b3Quaternion.h <903:34 903:34>]
LOCAL_SYMBOL: b3Quaternion.h<901:11> [b3Quaternion.h <903:43 903:44>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3Quaternion.h <903:48 903:51>]
LOCAL_SYMBOL: b3Quaternion.h<890:12> [b3Quaternion.h <903:46 903:46>]
LOCAL_SYMBOL: b3Quaternion.h<901:11> [b3Quaternion.h <903:55 903:56>]
LOCAL_SYMBOL: b3Quaternion.h<900:12> [b3Quaternion.h <903:58 903:58>]
SYMBOL_FUNCTION b3Quaternion b3ShortestArcQuatNormalize2(b3Vector3 &, b3Vector3 &) [b3Quaternion.h <907:1 <908:1 908:27> 913:1>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuatNormalize2(b3Vector3 &, b3Vector3 &) -> b3Quaternion [b3Quaternion.h <907:17 907:28>]
LOCAL_SYMBOL: b3Quaternion.h<908:40> [b3Quaternion.h <908:40 908:41>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuatNormalize2(b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3Quaternion.h <908:29 908:37>]
LOCAL_SYMBOL: b3Quaternion.h<908:54> [b3Quaternion.h <908:54 908:55>]
REFERENCE_TYPE_USAGE b3Quaternion b3ShortestArcQuatNormalize2(b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3Quaternion.h <908:43 908:51>]
LOCAL_SYMBOL: b3Quaternion.h<909:1> [b3Quaternion.h <909:1 909:1>]
LOCAL_SYMBOL: b3Quaternion.h<909:1> [b3Quaternion.h <913:1 913:1>]
SYMBOL_FUNCTION b3Vector3 & b3Vector3::normalize()
REFERENCE_CALL b3Quaternion b3ShortestArcQuatNormalize2(b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Vector3::normalize() [b3Quaternion.h <910:5 910:13>]
LOCAL_SYMBOL: b3Quaternion.h<908:40> [b3Quaternion.h <910:2 910:3>]
REFERENCE_CALL b3Quaternion b3ShortestArcQuatNormalize2(b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Vector3::normalize() [b3Quaternion.h <911:5 911:13>]
LOCAL_SYMBOL: b3Quaternion.h<908:54> [b3Quaternion.h <911:2 911:3>]
SYMBOL_FUNCTION b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL b3Quaternion b3ShortestArcQuatNormalize2(b3Vector3 &, b3Vector3 &) -> b3Quaternion b3ShortestArcQuat(const b3Vector3 &, const b3Vector3 &) [b3Quaternion.h <912:9 912:25>]
LOCAL_SYMBOL: b3Quaternion.h<908:40> [b3Quaternion.h <912:27 912:28>]
LOCAL_SYMBOL: b3Quaternion.h<908:54> [b3Quaternion.h <912:30 912:31>]
SYMBOL_GLOBAL_VARIABLE const __m128 b3vMPPP [b3Matrix3x3.h <25:37 25:43>]
REFERENCE_TYPE_USAGE const __m128 b3vMPPP -> __m128 [b3Matrix3x3.h <25:7 25:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<25:48> [b3Matrix3x3.h <25:48 25:48>]
LOCAL_SYMBOL: b3Matrix3x3.h<25:48> [b3Matrix3x3.h <25:75 25:75>]
LOCAL_SYMBOL: b3Matrix3x3.h<25:49> [b3Matrix3x3.h <25:49 25:49>]
SYMBOL_GLOBAL_VARIABLE const b3SimdFloat4 b3v1000 [b3Matrix3x3.h <29:43 29:49>]
REFERENCE_TYPE_USAGE const b3SimdFloat4 b3v1000 -> b3SimdFloat4 [b3Matrix3x3.h <29:7 29:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<29:54> [b3Matrix3x3.h <29:54 29:54>]
LOCAL_SYMBOL: b3Matrix3x3.h<29:54> [b3Matrix3x3.h <29:77 29:77>]
SYMBOL_GLOBAL_VARIABLE const b3SimdFloat4 b3v0100 [b3Matrix3x3.h <30:43 30:49>]
REFERENCE_TYPE_USAGE const b3SimdFloat4 b3v0100 -> b3SimdFloat4 [b3Matrix3x3.h <30:7 30:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<30:54> [b3Matrix3x3.h <30:54 30:54>]
LOCAL_SYMBOL: b3Matrix3x3.h<30:54> [b3Matrix3x3.h <30:77 30:77>]
SYMBOL_GLOBAL_VARIABLE const b3SimdFloat4 b3v0010 [b3Matrix3x3.h <31:43 31:49>]
REFERENCE_TYPE_USAGE const b3SimdFloat4 b3v0010 -> b3SimdFloat4 [b3Matrix3x3.h <31:7 31:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<31:54> [b3Matrix3x3.h <31:54 31:54>]
LOCAL_SYMBOL: b3Matrix3x3.h<31:54> [b3Matrix3x3.h <31:77 31:77>]
SYMBOL_CLASS b3Matrix3x3 [b3Matrix3x3.h <43:1 <43:31 43:41> 737:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<43:43> [b3Matrix3x3.h <43:43 43:43>]
LOCAL_SYMBOL: b3Matrix3x3.h<43:43> [b3Matrix3x3.h <737:1 737:1>]
SYMBOL_FIELD private b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <46:12 46:15>]
REFERENCE_TYPE_USAGE b3Vector3 [] b3Matrix3x3::m_el -> b3Vector3 [b3Matrix3x3.h <46:2 46:10>]
SYMBOL_METHOD public void b3Matrix3x3::b3Matrix3x3() [b3Matrix3x3.h <50:2 <50:2 50:12> 50:18>]
REFERENCE_USAGE void b3Matrix3x3::b3Matrix3x3() -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <50:2 50:12>]
REFERENCE_CALL void b3Matrix3x3::b3Matrix3x3() -> void b3Vector3::b3Vector3() [b3Matrix3x3.h <50:2 50:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<50:17> [b3Matrix3x3.h <50:17 50:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<50:17> [b3Matrix3x3.h <50:18 50:18>]
SYMBOL_METHOD public void b3Matrix3x3::b3Matrix3x3(const b3Quaternion &) [b3Matrix3x3.h <55:2 <55:11 55:21> 55:64>]
LOCAL_SYMBOL: b3Matrix3x3.h<55:43> [b3Matrix3x3.h <55:43 55:43>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Quaternion &) -> b3Quaternion [b3Matrix3x3.h <55:29 55:40>]
REFERENCE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Quaternion &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <55:11 55:21>]
REFERENCE_CALL void b3Matrix3x3::b3Matrix3x3(const b3Quaternion &) -> void b3Vector3::b3Vector3() [b3Matrix3x3.h <55:11 55:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<55:46> [b3Matrix3x3.h <55:46 55:46>]
LOCAL_SYMBOL: b3Matrix3x3.h<55:46> [b3Matrix3x3.h <55:64 55:64>]
SYMBOL_FUNCTION void b3Matrix3x3::setRotation(const b3Quaternion &)
REFERENCE_CALL void b3Matrix3x3::b3Matrix3x3(const b3Quaternion &) -> void b3Matrix3x3::setRotation(const b3Quaternion &) [b3Matrix3x3.h <55:48 55:58>]
LOCAL_SYMBOL: b3Matrix3x3.h<55:43> [b3Matrix3x3.h <55:60 55:60>]
SYMBOL_METHOD public void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <64:2 <64:2 64:12> 71:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<64:30> [b3Matrix3x3.h <64:30 64:31>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <64:20 64:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<64:50> [b3Matrix3x3.h <64:50 64:51>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <64:40 64:47>]
LOCAL_SYMBOL: b3Matrix3x3.h<64:70> [b3Matrix3x3.h <64:70 64:71>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <64:60 64:67>]
LOCAL_SYMBOL: b3Matrix3x3.h<65:19> [b3Matrix3x3.h <65:19 65:20>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <65:9 65:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<65:39> [b3Matrix3x3.h <65:39 65:40>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <65:29 65:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<65:59> [b3Matrix3x3.h <65:59 65:60>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <65:49 65:56>]
LOCAL_SYMBOL: b3Matrix3x3.h<66:19> [b3Matrix3x3.h <66:19 66:20>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <66:9 66:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<66:39> [b3Matrix3x3.h <66:39 66:40>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <66:29 66:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<66:59> [b3Matrix3x3.h <66:59 66:60>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <66:49 66:56>]
REFERENCE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <64:2 64:12>]
REFERENCE_CALL void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void b3Vector3::b3Vector3() [b3Matrix3x3.h <64:2 64:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<67:2> [b3Matrix3x3.h <67:2 67:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<67:2> [b3Matrix3x3.h <71:2 71:2>]
SYMBOL_FUNCTION void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &)
REFERENCE_CALL void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <68:3 68:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<64:30> [b3Matrix3x3.h <68:12 68:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<64:50> [b3Matrix3x3.h <68:16 68:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<64:70> [b3Matrix3x3.h <68:20 68:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<65:19> [b3Matrix3x3.h <69:4 69:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<65:39> [b3Matrix3x3.h <69:8 69:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<65:59> [b3Matrix3x3.h <69:12 69:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<66:19> [b3Matrix3x3.h <70:4 70:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<66:39> [b3Matrix3x3.h <70:8 70:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<66:59> [b3Matrix3x3.h <70:12 70:13>]
SYMBOL_METHOD public void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) [b3Matrix3x3.h <109:2 <109:18 109:28> 114:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<109:50> [b3Matrix3x3.h <109:50 109:54>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <109:37 109:47>]
REFERENCE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <109:18 109:28>]
REFERENCE_CALL void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> void b3Vector3::b3Vector3() [b3Matrix3x3.h <109:18 109:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<110:2> [b3Matrix3x3.h <110:2 110:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<110:2> [b3Matrix3x3.h <114:2 114:2>]
REFERENCE_CALL void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3Matrix3x3.h <111:11 111:11>]
REFERENCE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <111:3 111:6>]
REFERENCE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <111:19 111:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<109:50> [b3Matrix3x3.h <111:13 111:17>]
REFERENCE_CALL void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3Matrix3x3.h <112:11 112:11>]
REFERENCE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <112:3 112:6>]
REFERENCE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <112:19 112:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<109:50> [b3Matrix3x3.h <112:13 112:17>]
REFERENCE_CALL void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3Matrix3x3.h <113:11 113:11>]
REFERENCE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <113:3 113:6>]
REFERENCE_USAGE void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <113:19 113:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<109:50> [b3Matrix3x3.h <113:13 113:17>]
SYMBOL_METHOD public b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) [b3Matrix3x3.h <117:2 <117:31 117:39> 123:2>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <117:18 117:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<117:60> [b3Matrix3x3.h <117:60 117:64>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <117:47 117:57>]
LOCAL_SYMBOL: b3Matrix3x3.h<118:2> [b3Matrix3x3.h <118:2 118:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<118:2> [b3Matrix3x3.h <123:2 123:2>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3Matrix3x3.h <119:11 119:11>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <119:3 119:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <119:19 119:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<117:60> [b3Matrix3x3.h <119:13 119:17>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3Matrix3x3.h <120:11 120:11>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <120:3 120:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <120:19 120:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<117:60> [b3Matrix3x3.h <120:13 120:17>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3Matrix3x3.h <121:11 121:11>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <121:3 121:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <121:19 121:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<117:60> [b3Matrix3x3.h <121:13 121:17>]
SYMBOL_METHOD public b3Vector3 b3Matrix3x3::getColumn(int) const [b3Matrix3x3.h <129:2 <129:28 129:36> 132:2>]
REFERENCE_TYPE_USAGE b3Vector3 b3Matrix3x3::getColumn(int) const -> b3Vector3 [b3Matrix3x3.h <129:18 129:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<129:42> [b3Matrix3x3.h <129:42 129:42>]
REFERENCE_TYPE_USAGE b3Vector3 b3Matrix3x3::getColumn(int) const -> int [b3Matrix3x3.h <129:38 129:40>]
LOCAL_SYMBOL: b3Matrix3x3.h<130:2> [b3Matrix3x3.h <130:2 130:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<130:2> [b3Matrix3x3.h <132:2 132:2>]
REFERENCE_CALL b3Vector3 b3Matrix3x3::getColumn(int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Matrix3x3.h <131:10 131:22>]
REFERENCE_USAGE b3Vector3 b3Matrix3x3::getColumn(int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <131:24 131:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<129:42> [b3Matrix3x3.h <131:32 131:32>]
REFERENCE_USAGE b3Vector3 b3Matrix3x3::getColumn(int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <131:35 131:38>]
LOCAL_SYMBOL: b3Matrix3x3.h<129:42> [b3Matrix3x3.h <131:43 131:43>]
REFERENCE_USAGE b3Vector3 b3Matrix3x3::getColumn(int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <131:46 131:49>]
LOCAL_SYMBOL: b3Matrix3x3.h<129:42> [b3Matrix3x3.h <131:54 131:54>]
SYMBOL_METHOD public const b3Vector3 & b3Matrix3x3::getRow(int) const [b3Matrix3x3.h <137:2 <137:35 137:40> 141:2>]
REFERENCE_TYPE_USAGE const b3Vector3 & b3Matrix3x3::getRow(int) const -> b3Vector3 [b3Matrix3x3.h <137:24 137:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<137:46> [b3Matrix3x3.h <137:46 137:46>]
REFERENCE_TYPE_USAGE const b3Vector3 & b3Matrix3x3::getRow(int) const -> int [b3Matrix3x3.h <137:42 137:44>]
LOCAL_SYMBOL: b3Matrix3x3.h<138:2> [b3Matrix3x3.h <138:2 138:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<138:2> [b3Matrix3x3.h <141:2 141:2>]
REFERENCE_USAGE const b3Vector3 & b3Matrix3x3::getRow(int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <140:10 140:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<137:46> [b3Matrix3x3.h <140:15 140:15>]
SYMBOL_METHOD public b3Vector3 & b3Matrix3x3::operator[](int) [b3Matrix3x3.h <145:2 <145:30 145:39> 149:2>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Matrix3x3::operator[](int) -> b3Vector3 [b3Matrix3x3.h <145:18 145:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<145:45> [b3Matrix3x3.h <145:45 145:45>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Matrix3x3::operator[](int) -> int [b3Matrix3x3.h <145:41 145:43>]
LOCAL_SYMBOL: b3Matrix3x3.h<146:2> [b3Matrix3x3.h <146:2 146:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<146:2> [b3Matrix3x3.h <149:2 149:2>]
REFERENCE_USAGE b3Vector3 & b3Matrix3x3::operator[](int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <148:10 148:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<145:45> [b3Matrix3x3.h <148:15 148:15>]
SYMBOL_METHOD public const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <153:2 <153:35 153:44> 157:2>]
REFERENCE_TYPE_USAGE const b3Vector3 & b3Matrix3x3::operator[](int) const -> b3Vector3 [b3Matrix3x3.h <153:24 153:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<153:50> [b3Matrix3x3.h <153:50 153:50>]
REFERENCE_TYPE_USAGE const b3Vector3 & b3Matrix3x3::operator[](int) const -> int [b3Matrix3x3.h <153:46 153:48>]
LOCAL_SYMBOL: b3Matrix3x3.h<154:2> [b3Matrix3x3.h <154:2 154:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<154:2> [b3Matrix3x3.h <157:2 157:2>]
REFERENCE_USAGE const b3Vector3 & b3Matrix3x3::operator[](int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <156:10 156:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<153:50> [b3Matrix3x3.h <156:15 156:15>]
SYMBOL_METHOD public b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) [b3Matrix3x3.h <162:15 162:24>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <162:2 162:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<162:45> [b3Matrix3x3.h <162:45 162:45>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <162:32 162:42>]
SYMBOL_METHOD public b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) [b3Matrix3x3.h <167:15 167:24>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <167:2 167:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<167:45> [b3Matrix3x3.h <167:45 167:45>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <167:32 167:42>]
SYMBOL_METHOD public b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) [b3Matrix3x3.h <172:15 172:24>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <172:2 172:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<172:45> [b3Matrix3x3.h <172:45 172:45>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <172:32 172:42>]
SYMBOL_METHOD public void b3Matrix3x3::setFromOpenGLSubMatrix(const b3Scalar *) [b3Matrix3x3.h <176:2 <176:7 176:28> 182:2>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setFromOpenGLSubMatrix(const b3Scalar *) -> void [b3Matrix3x3.h <176:2 176:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<176:46> [b3Matrix3x3.h <176:46 176:46>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setFromOpenGLSubMatrix(const b3Scalar *) -> b3Scalar [b3Matrix3x3.h <176:36 176:43>]
LOCAL_SYMBOL: b3Matrix3x3.h<177:2> [b3Matrix3x3.h <177:2 177:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<177:2> [b3Matrix3x3.h <182:2 182:2>]
REFERENCE_CALL void b3Matrix3x3::setFromOpenGLSubMatrix(const b3Scalar *) -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <178:11 178:18>]
REFERENCE_USAGE void b3Matrix3x3::setFromOpenGLSubMatrix(const b3Scalar *) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <178:3 178:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<176:46> [b3Matrix3x3.h <178:20 178:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<176:46> [b3Matrix3x3.h <178:25 178:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<176:46> [b3Matrix3x3.h <178:30 178:30>]
REFERENCE_CALL void b3Matrix3x3::setFromOpenGLSubMatrix(const b3Scalar *) -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <179:11 179:18>]
REFERENCE_USAGE void b3Matrix3x3::setFromOpenGLSubMatrix(const b3Scalar *) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <179:3 179:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<176:46> [b3Matrix3x3.h <179:20 179:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<176:46> [b3Matrix3x3.h <179:25 179:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<176:46> [b3Matrix3x3.h <179:30 179:30>]
REFERENCE_CALL void b3Matrix3x3::setFromOpenGLSubMatrix(const b3Scalar *) -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <180:11 180:18>]
REFERENCE_USAGE void b3Matrix3x3::setFromOpenGLSubMatrix(const b3Scalar *) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <180:3 180:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<176:46> [b3Matrix3x3.h <180:20 180:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<176:46> [b3Matrix3x3.h <180:25 180:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<176:46> [b3Matrix3x3.h <180:30 180:30>]
SYMBOL_METHOD public void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <193:2 <193:7 193:14> 200:2>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void [b3Matrix3x3.h <193:2 193:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<193:32> [b3Matrix3x3.h <193:32 193:33>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <193:22 193:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<193:52> [b3Matrix3x3.h <193:52 193:53>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <193:42 193:49>]
LOCAL_SYMBOL: b3Matrix3x3.h<193:72> [b3Matrix3x3.h <193:72 193:73>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <193:62 193:69>]
LOCAL_SYMBOL: b3Matrix3x3.h<194:19> [b3Matrix3x3.h <194:19 194:20>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <194:9 194:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<194:39> [b3Matrix3x3.h <194:39 194:40>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <194:29 194:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<194:59> [b3Matrix3x3.h <194:59 194:60>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <194:49 194:56>]
LOCAL_SYMBOL: b3Matrix3x3.h<195:19> [b3Matrix3x3.h <195:19 195:20>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <195:9 195:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<195:39> [b3Matrix3x3.h <195:39 195:40>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <195:29 195:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<195:59> [b3Matrix3x3.h <195:59 195:60>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <195:49 195:56>]
LOCAL_SYMBOL: b3Matrix3x3.h<196:2> [b3Matrix3x3.h <196:2 196:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<196:2> [b3Matrix3x3.h <200:2 200:2>]
REFERENCE_CALL void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <197:11 197:18>]
REFERENCE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <197:3 197:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<193:32> [b3Matrix3x3.h <197:20 197:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<193:52> [b3Matrix3x3.h <197:23 197:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<193:72> [b3Matrix3x3.h <197:26 197:27>]
REFERENCE_CALL void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <198:11 198:18>]
REFERENCE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <198:3 198:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<194:19> [b3Matrix3x3.h <198:20 198:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<194:39> [b3Matrix3x3.h <198:23 198:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<194:59> [b3Matrix3x3.h <198:26 198:27>]
REFERENCE_CALL void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <199:11 199:18>]
REFERENCE_USAGE void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <199:3 199:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<195:19> [b3Matrix3x3.h <199:20 199:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<195:39> [b3Matrix3x3.h <199:23 199:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<195:59> [b3Matrix3x3.h <199:26 199:27>]
SYMBOL_METHOD public void b3Matrix3x3::setRotation(const b3Quaternion &) [b3Matrix3x3.h <204:2 <204:7 204:17> 271:5>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> void [b3Matrix3x3.h <204:2 204:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <204:39 204:39>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Quaternion [b3Matrix3x3.h <204:25 204:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<205:2> [b3Matrix3x3.h <205:2 205:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<205:2> [b3Matrix3x3.h <271:5 271:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<206:12> [b3Matrix3x3.h <206:12 206:12>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Scalar [b3Matrix3x3.h <206:3 206:10>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Scalar b3Quaternion::length2() const [b3Matrix3x3.h <206:18 206:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <206:16 206:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<208:12> [b3Matrix3x3.h <208:12 208:12>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Scalar [b3Matrix3x3.h <208:3 208:10>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Scalar [b3Matrix3x3.h <208:16 208:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<206:12> [b3Matrix3x3.h <208:32 208:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:12> [b3Matrix3x3.h <262:12 262:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Scalar [b3Matrix3x3.h <262:3 262:10>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Matrix3x3.h <262:19 262:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <262:17 262:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<208:12> [b3Matrix3x3.h <262:28 262:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:33> [b3Matrix3x3.h <262:33 262:34>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Matrix3x3.h <262:40 262:43>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <262:38 262:38>]
LOCAL_SYMBOL: b3Matrix3x3.h<208:12> [b3Matrix3x3.h <262:49 262:49>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:54> [b3Matrix3x3.h <262:54 262:55>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Matrix3x3.h <262:61 262:64>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <262:59 262:59>]
LOCAL_SYMBOL: b3Matrix3x3.h<208:12> [b3Matrix3x3.h <262:70 262:70>]
LOCAL_SYMBOL: b3Matrix3x3.h<263:12> [b3Matrix3x3.h <263:12 263:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Scalar [b3Matrix3x3.h <263:3 263:10>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Matrix3x3.h <263:19 263:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <263:17 263:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:12> [b3Matrix3x3.h <263:28 263:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<263:33> [b3Matrix3x3.h <263:33 263:34>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Matrix3x3.h <263:40 263:43>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <263:38 263:38>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:33> [b3Matrix3x3.h <263:49 263:50>]
LOCAL_SYMBOL: b3Matrix3x3.h<263:54> [b3Matrix3x3.h <263:54 263:55>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3Quaternion::getW() const [b3Matrix3x3.h <263:61 263:64>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <263:59 263:59>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:54> [b3Matrix3x3.h <263:70 263:71>]
LOCAL_SYMBOL: b3Matrix3x3.h<264:12> [b3Matrix3x3.h <264:12 264:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Scalar [b3Matrix3x3.h <264:3 264:10>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Matrix3x3.h <264:19 264:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <264:17 264:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:12> [b3Matrix3x3.h <264:28 264:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<264:33> [b3Matrix3x3.h <264:33 264:34>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Matrix3x3.h <264:40 264:43>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <264:38 264:38>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:33> [b3Matrix3x3.h <264:49 264:50>]
LOCAL_SYMBOL: b3Matrix3x3.h<264:54> [b3Matrix3x3.h <264:54 264:55>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getX() const [b3Matrix3x3.h <264:61 264:64>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <264:59 264:59>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:54> [b3Matrix3x3.h <264:70 264:71>]
LOCAL_SYMBOL: b3Matrix3x3.h<265:12> [b3Matrix3x3.h <265:12 265:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Scalar [b3Matrix3x3.h <265:3 265:10>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Matrix3x3.h <265:19 265:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <265:17 265:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:33> [b3Matrix3x3.h <265:28 265:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<265:33> [b3Matrix3x3.h <265:33 265:34>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getY() const [b3Matrix3x3.h <265:40 265:43>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <265:38 265:38>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:54> [b3Matrix3x3.h <265:49 265:50>]
LOCAL_SYMBOL: b3Matrix3x3.h<265:54> [b3Matrix3x3.h <265:54 265:55>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> const b3Scalar & b3QuadWord::getZ() const [b3Matrix3x3.h <265:61 265:64>]
LOCAL_SYMBOL: b3Matrix3x3.h<204:39> [b3Matrix3x3.h <265:59 265:59>]
LOCAL_SYMBOL: b3Matrix3x3.h<262:54> [b3Matrix3x3.h <265:70 265:71>]
REFERENCE_CALL void b3Matrix3x3::setRotation(const b3Quaternion &) -> void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <266:3 266:10>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Scalar [b3Matrix3x3.h <267:13 267:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<265:12> [b3Matrix3x3.h <267:30 267:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<265:54> [b3Matrix3x3.h <267:35 267:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<264:33> [b3Matrix3x3.h <267:40 267:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<263:54> [b3Matrix3x3.h <267:45 267:46>]
LOCAL_SYMBOL: b3Matrix3x3.h<264:54> [b3Matrix3x3.h <267:49 267:50>]
LOCAL_SYMBOL: b3Matrix3x3.h<263:33> [b3Matrix3x3.h <267:54 267:55>]
LOCAL_SYMBOL: b3Matrix3x3.h<264:33> [b3Matrix3x3.h <268:4 268:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<263:54> [b3Matrix3x3.h <268:9 268:10>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Scalar [b3Matrix3x3.h <268:13 268:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<264:12> [b3Matrix3x3.h <268:30 268:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<265:54> [b3Matrix3x3.h <268:35 268:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<265:33> [b3Matrix3x3.h <268:40 268:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<263:12> [b3Matrix3x3.h <268:45 268:46>]
LOCAL_SYMBOL: b3Matrix3x3.h<264:54> [b3Matrix3x3.h <269:4 269:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<263:33> [b3Matrix3x3.h <269:9 269:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<265:33> [b3Matrix3x3.h <269:13 269:14>]
LOCAL_SYMBOL: b3Matrix3x3.h<263:12> [b3Matrix3x3.h <269:18 269:19>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setRotation(const b3Quaternion &) -> b3Scalar [b3Matrix3x3.h <269:22 269:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<264:12> [b3Matrix3x3.h <269:39 269:40>]
LOCAL_SYMBOL: b3Matrix3x3.h<265:12> [b3Matrix3x3.h <269:44 269:45>]
SYMBOL_METHOD public void b3Matrix3x3::setEulerYPR(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <279:2 <279:7 279:17> 282:2>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerYPR(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void [b3Matrix3x3.h <279:2 279:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<279:35> [b3Matrix3x3.h <279:35 279:37>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerYPR(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <279:25 279:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<279:56> [b3Matrix3x3.h <279:56 279:60>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerYPR(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <279:46 279:53>]
LOCAL_SYMBOL: b3Matrix3x3.h<279:79> [b3Matrix3x3.h <279:79 279:82>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerYPR(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <279:69 279:76>]
LOCAL_SYMBOL: b3Matrix3x3.h<280:2> [b3Matrix3x3.h <280:2 280:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<280:2> [b3Matrix3x3.h <282:2 282:2>]
SYMBOL_FUNCTION void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar)
REFERENCE_CALL void b3Matrix3x3::setEulerYPR(const b3Scalar &, const b3Scalar &, const b3Scalar &) -> void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) [b3Matrix3x3.h <281:3 281:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<279:79> [b3Matrix3x3.h <281:15 281:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<279:56> [b3Matrix3x3.h <281:21 281:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<279:35> [b3Matrix3x3.h <281:28 281:30>]
SYMBOL_METHOD public void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) [b3Matrix3x3.h <293:2 <293:7 293:17> 309:2>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> void [b3Matrix3x3.h <293:2 293:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<293:28> [b3Matrix3x3.h <293:28 293:33>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <293:19 293:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<293:44> [b3Matrix3x3.h <293:44 293:49>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <293:35 293:42>]
LOCAL_SYMBOL: b3Matrix3x3.h<293:60> [b3Matrix3x3.h <293:60 293:65>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <293:51 293:58>]
LOCAL_SYMBOL: b3Matrix3x3.h<293:68> [b3Matrix3x3.h <293:68 293:68>]
LOCAL_SYMBOL: b3Matrix3x3.h<293:68> [b3Matrix3x3.h <309:2 309:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<295:12> [b3Matrix3x3.h <295:12 295:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <295:3 295:10>]
REFERENCE_CALL void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar b3Cos(b3Scalar) [b3Matrix3x3.h <295:17 295:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<293:28> [b3Matrix3x3.h <295:23 295:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<296:12> [b3Matrix3x3.h <296:12 296:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <296:3 296:10>]
REFERENCE_CALL void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar b3Cos(b3Scalar) [b3Matrix3x3.h <296:17 296:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<293:44> [b3Matrix3x3.h <296:23 296:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<297:12> [b3Matrix3x3.h <297:12 297:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <297:3 297:10>]
REFERENCE_CALL void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar b3Cos(b3Scalar) [b3Matrix3x3.h <297:17 297:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<293:60> [b3Matrix3x3.h <297:23 297:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<298:12> [b3Matrix3x3.h <298:12 298:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <298:3 298:10>]
REFERENCE_CALL void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar b3Sin(b3Scalar) [b3Matrix3x3.h <298:17 298:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<293:28> [b3Matrix3x3.h <298:23 298:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<299:12> [b3Matrix3x3.h <299:12 299:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <299:3 299:10>]
REFERENCE_CALL void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar b3Sin(b3Scalar) [b3Matrix3x3.h <299:17 299:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<293:44> [b3Matrix3x3.h <299:23 299:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<300:12> [b3Matrix3x3.h <300:12 300:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <300:3 300:10>]
REFERENCE_CALL void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar b3Sin(b3Scalar) [b3Matrix3x3.h <300:17 300:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<293:60> [b3Matrix3x3.h <300:23 300:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<301:12> [b3Matrix3x3.h <301:12 301:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <301:3 301:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<295:12> [b3Matrix3x3.h <301:17 301:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<297:12> [b3Matrix3x3.h <301:22 301:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<302:12> [b3Matrix3x3.h <302:12 302:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <302:3 302:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<295:12> [b3Matrix3x3.h <302:17 302:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<300:12> [b3Matrix3x3.h <302:22 302:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<303:12> [b3Matrix3x3.h <303:12 303:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <303:3 303:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<298:12> [b3Matrix3x3.h <303:17 303:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<297:12> [b3Matrix3x3.h <303:22 303:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<304:12> [b3Matrix3x3.h <304:12 304:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> b3Scalar [b3Matrix3x3.h <304:3 304:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<298:12> [b3Matrix3x3.h <304:17 304:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<300:12> [b3Matrix3x3.h <304:22 304:23>]
REFERENCE_CALL void b3Matrix3x3::setEulerZYX(b3Scalar, b3Scalar, b3Scalar) -> void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <306:3 306:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<296:12> [b3Matrix3x3.h <306:12 306:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<297:12> [b3Matrix3x3.h <306:17 306:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<299:12> [b3Matrix3x3.h <306:21 306:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<303:12> [b3Matrix3x3.h <306:26 306:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<302:12> [b3Matrix3x3.h <306:31 306:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<299:12> [b3Matrix3x3.h <306:35 306:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<301:12> [b3Matrix3x3.h <306:40 306:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<304:12> [b3Matrix3x3.h <306:45 306:46>]
LOCAL_SYMBOL: b3Matrix3x3.h<296:12> [b3Matrix3x3.h <307:4 307:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<300:12> [b3Matrix3x3.h <307:9 307:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<299:12> [b3Matrix3x3.h <307:13 307:14>]
LOCAL_SYMBOL: b3Matrix3x3.h<304:12> [b3Matrix3x3.h <307:18 307:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<301:12> [b3Matrix3x3.h <307:23 307:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<299:12> [b3Matrix3x3.h <307:27 307:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<302:12> [b3Matrix3x3.h <307:32 307:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<303:12> [b3Matrix3x3.h <307:37 307:38>]
LOCAL_SYMBOL: b3Matrix3x3.h<299:12> [b3Matrix3x3.h <308:5 308:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<296:12> [b3Matrix3x3.h <308:14 308:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<298:12> [b3Matrix3x3.h <308:19 308:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<296:12> [b3Matrix3x3.h <308:28 308:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<295:12> [b3Matrix3x3.h <308:33 308:34>]
SYMBOL_METHOD public void b3Matrix3x3::setIdentity() [b3Matrix3x3.h <312:2 <312:7 312:17> 323:2>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setIdentity() -> void [b3Matrix3x3.h <312:2 312:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<313:2> [b3Matrix3x3.h <313:2 313:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<313:2> [b3Matrix3x3.h <323:2 323:2>]
REFERENCE_CALL void b3Matrix3x3::setIdentity() -> void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <319:3 319:10>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setIdentity() -> b3Scalar [b3Matrix3x3.h <319:12 319:19>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setIdentity() -> b3Scalar [b3Matrix3x3.h <319:27 319:34>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setIdentity() -> b3Scalar [b3Matrix3x3.h <319:42 319:49>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setIdentity() -> b3Scalar [b3Matrix3x3.h <320:4 320:11>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setIdentity() -> b3Scalar [b3Matrix3x3.h <320:19 320:26>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setIdentity() -> b3Scalar [b3Matrix3x3.h <320:34 320:41>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setIdentity() -> b3Scalar [b3Matrix3x3.h <321:4 321:11>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setIdentity() -> b3Scalar [b3Matrix3x3.h <321:19 321:26>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::setIdentity() -> b3Scalar [b3Matrix3x3.h <321:34 321:41>]
SYMBOL_METHOD public static const b3Matrix3x3 & b3Matrix3x3::getIdentity() [b3Matrix3x3.h <325:2 <325:28 325:38> 338:2>]
REFERENCE_TYPE_USAGE static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> b3Matrix3x3 [b3Matrix3x3.h <325:15 325:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<326:2> [b3Matrix3x3.h <326:2 326:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<326:2> [b3Matrix3x3.h <338:2 338:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<332:9> [b3Matrix3x3.h <332:9 332:22>]
REFERENCE_TYPE_USAGE static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> b3Matrix3x3 [b3Matrix3x3.h <331:16 331:26>]
SYMBOL_FUNCTION void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &)
REFERENCE_CALL static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <332:9 332:22>]
REFERENCE_TYPE_USAGE static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> b3Scalar [b3Matrix3x3.h <333:13 333:20>]
REFERENCE_TYPE_USAGE static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> b3Scalar [b3Matrix3x3.h <333:28 333:35>]
REFERENCE_TYPE_USAGE static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> b3Scalar [b3Matrix3x3.h <333:43 333:50>]
REFERENCE_TYPE_USAGE static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> b3Scalar [b3Matrix3x3.h <334:4 334:11>]
REFERENCE_TYPE_USAGE static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> b3Scalar [b3Matrix3x3.h <334:19 334:26>]
REFERENCE_TYPE_USAGE static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> b3Scalar [b3Matrix3x3.h <334:34 334:41>]
REFERENCE_TYPE_USAGE static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> b3Scalar [b3Matrix3x3.h <335:4 335:11>]
REFERENCE_TYPE_USAGE static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> b3Scalar [b3Matrix3x3.h <335:19 335:26>]
REFERENCE_TYPE_USAGE static const b3Matrix3x3 & b3Matrix3x3::getIdentity() -> b3Scalar [b3Matrix3x3.h <335:34 335:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<332:9> [b3Matrix3x3.h <337:10 337:23>]
SYMBOL_METHOD public void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const [b3Matrix3x3.h <342:2 <342:7 342:24> 391:2>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> void [b3Matrix3x3.h <342:2 342:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <342:36 342:36>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <342:26 342:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<343:2> [b3Matrix3x3.h <343:2 343:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<343:2> [b3Matrix3x3.h <391:2 391:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <378:3 378:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <378:11 378:18>]
REFERENCE_CALL void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <378:28 378:31>]
REFERENCE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <378:20 378:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <379:3 379:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <379:11 379:18>]
REFERENCE_CALL void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <379:28 379:31>]
REFERENCE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <379:20 379:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <380:3 380:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <380:11 380:18>]
REFERENCE_CALL void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <380:28 380:31>]
REFERENCE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <380:20 380:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <381:3 381:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <381:11 381:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <382:3 382:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <382:11 382:18>]
REFERENCE_CALL void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <382:28 382:31>]
REFERENCE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <382:20 382:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <383:3 383:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <383:11 383:18>]
REFERENCE_CALL void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <383:28 383:31>]
REFERENCE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <383:20 383:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <384:3 384:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <384:11 384:18>]
REFERENCE_CALL void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <384:28 384:31>]
REFERENCE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <384:20 384:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <385:3 385:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <385:11 385:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <386:3 386:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <386:11 386:18>]
REFERENCE_CALL void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <386:28 386:31>]
REFERENCE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <386:20 386:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <387:3 387:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <387:11 387:18>]
REFERENCE_CALL void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <387:28 387:31>]
REFERENCE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <387:20 387:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <388:3 388:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <388:11 388:18>]
REFERENCE_CALL void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <388:28 388:31>]
REFERENCE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <388:20 388:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<342:36> [b3Matrix3x3.h <389:3 389:3>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const -> b3Scalar [b3Matrix3x3.h <389:11 389:18>]
SYMBOL_METHOD public void b3Matrix3x3::getRotation(b3Quaternion &) const [b3Matrix3x3.h <395:2 <395:7 395:17> 481:2>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> void [b3Matrix3x3.h <395:2 395:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<395:33> [b3Matrix3x3.h <395:33 395:33>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Quaternion [b3Matrix3x3.h <395:19 395:30>]
LOCAL_SYMBOL: b3Matrix3x3.h<396:2> [b3Matrix3x3.h <396:2 396:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<396:2> [b3Matrix3x3.h <481:2 481:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<449:12> [b3Matrix3x3.h <449:12 449:16>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar [b3Matrix3x3.h <449:3 449:10>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <449:28 449:31>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <449:20 449:23>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <449:45 449:48>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <449:37 449:40>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <449:62 449:65>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <449:54 449:57>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <451:12 451:15>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar [b3Matrix3x3.h <451:3 451:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<449:12> [b3Matrix3x3.h <453:7 453:11>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar [b3Matrix3x3.h <453:15 453:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<454:3> [b3Matrix3x3.h <454:3 454:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<454:3> [b3Matrix3x3.h <462:3 462:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<455:13> [b3Matrix3x3.h <455:13 455:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar [b3Matrix3x3.h <455:4 455:11>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar b3Sqrt(b3Scalar) [b3Matrix3x3.h <455:17 455:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<449:12> [b3Matrix3x3.h <455:24 455:28>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar [b3Matrix3x3.h <455:32 455:39>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <456:4 456:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<455:13> [b3Matrix3x3.h <456:13 456:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar [b3Matrix3x3.h <456:17 456:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<455:13> [b3Matrix3x3.h <457:4 457:4>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar [b3Matrix3x3.h <457:8 457:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<455:13> [b3Matrix3x3.h <457:24 457:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <459:4 459:7>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <459:22 459:25>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <459:14 459:17>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <459:39 459:42>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <459:31 459:34>]
LOCAL_SYMBOL: b3Matrix3x3.h<455:13> [b3Matrix3x3.h <459:49 459:49>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <460:4 460:7>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <460:22 460:25>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <460:14 460:17>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <460:39 460:42>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <460:31 460:34>]
LOCAL_SYMBOL: b3Matrix3x3.h<455:13> [b3Matrix3x3.h <460:49 460:49>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <461:4 461:7>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <461:22 461:25>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <461:14 461:17>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <461:39 461:42>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <461:31 461:34>]
LOCAL_SYMBOL: b3Matrix3x3.h<455:13> [b3Matrix3x3.h <461:49 461:49>]
LOCAL_SYMBOL: b3Matrix3x3.h<464:3> [b3Matrix3x3.h <464:3 464:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<464:3> [b3Matrix3x3.h <478:3 478:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<465:8> [b3Matrix3x3.h <465:8 465:8>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> int [b3Matrix3x3.h <465:4 465:6>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <465:20 465:23>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <465:12 465:15>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <465:37 465:40>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <465:29 465:32>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <466:14 466:17>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <466:6 466:9>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <466:31 466:34>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <466:23 466:26>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <467:14 467:17>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <467:6 467:9>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <467:31 467:34>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <467:23 467:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<468:8> [b3Matrix3x3.h <468:8 468:8>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> int [b3Matrix3x3.h <468:4 468:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<465:8> [b3Matrix3x3.h <468:13 468:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<469:8> [b3Matrix3x3.h <469:8 469:8>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> int [b3Matrix3x3.h <469:4 469:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<465:8> [b3Matrix3x3.h <469:13 469:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<471:13> [b3Matrix3x3.h <471:13 471:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar [b3Matrix3x3.h <471:4 471:11>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar b3Sqrt(b3Scalar) [b3Matrix3x3.h <471:17 471:22>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <471:24 471:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<465:8> [b3Matrix3x3.h <471:29 471:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<465:8> [b3Matrix3x3.h <471:32 471:32>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <471:37 471:40>]
LOCAL_SYMBOL: b3Matrix3x3.h<468:8> [b3Matrix3x3.h <471:42 471:42>]
LOCAL_SYMBOL: b3Matrix3x3.h<468:8> [b3Matrix3x3.h <471:45 471:45>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <471:50 471:53>]
LOCAL_SYMBOL: b3Matrix3x3.h<469:8> [b3Matrix3x3.h <471:55 471:55>]
LOCAL_SYMBOL: b3Matrix3x3.h<469:8> [b3Matrix3x3.h <471:58 471:58>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar [b3Matrix3x3.h <471:63 471:70>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <472:4 472:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<465:8> [b3Matrix3x3.h <472:9 472:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<471:13> [b3Matrix3x3.h <472:14 472:14>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar [b3Matrix3x3.h <472:18 472:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<471:13> [b3Matrix3x3.h <473:4 473:4>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Scalar [b3Matrix3x3.h <473:8 473:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<471:13> [b3Matrix3x3.h <473:24 473:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <475:4 475:7>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <475:15 475:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<469:8> [b3Matrix3x3.h <475:20 475:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<468:8> [b3Matrix3x3.h <475:23 475:23>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <475:28 475:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<468:8> [b3Matrix3x3.h <475:33 475:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<469:8> [b3Matrix3x3.h <475:36 475:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<471:13> [b3Matrix3x3.h <475:42 475:42>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <476:4 476:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<468:8> [b3Matrix3x3.h <476:9 476:9>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <476:15 476:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<468:8> [b3Matrix3x3.h <476:20 476:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<465:8> [b3Matrix3x3.h <476:23 476:23>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <476:28 476:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<465:8> [b3Matrix3x3.h <476:33 476:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<468:8> [b3Matrix3x3.h <476:36 476:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<471:13> [b3Matrix3x3.h <476:42 476:42>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <477:4 477:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<469:8> [b3Matrix3x3.h <477:9 477:9>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <477:15 477:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<469:8> [b3Matrix3x3.h <477:20 477:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<465:8> [b3Matrix3x3.h <477:23 477:23>]
REFERENCE_USAGE void b3Matrix3x3::getRotation(b3Quaternion &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <477:28 477:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<465:8> [b3Matrix3x3.h <477:33 477:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<469:8> [b3Matrix3x3.h <477:36 477:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<471:13> [b3Matrix3x3.h <477:42 477:42>]
REFERENCE_CALL void b3Matrix3x3::getRotation(b3Quaternion &) const -> void b3QuadWord::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <479:5 479:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<395:33> [b3Matrix3x3.h <479:3 479:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <479:14 479:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <479:22 479:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <479:30 479:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<451:12> [b3Matrix3x3.h <479:38 479:41>]
SYMBOL_METHOD public void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const [b3Matrix3x3.h <487:2 <487:7 487:17> 508:2>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> void [b3Matrix3x3.h <487:2 487:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:29> [b3Matrix3x3.h <487:29 487:31>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Matrix3x3.h <487:19 487:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:44> [b3Matrix3x3.h <487:44 487:48>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Matrix3x3.h <487:34 487:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:61> [b3Matrix3x3.h <487:61 487:64>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Matrix3x3.h <487:51 487:58>]
LOCAL_SYMBOL: b3Matrix3x3.h<488:2> [b3Matrix3x3.h <488:2 488:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<488:2> [b3Matrix3x3.h <508:2 508:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:29> [b3Matrix3x3.h <491:3 491:5>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Matrix3x3.h <491:9 491:16>]
REFERENCE_CALL void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar b3Atan2(b3Scalar, b3Scalar) [b3Matrix3x3.h <491:18 491:24>]
REFERENCE_CALL void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <491:34 491:37>]
REFERENCE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <491:26 491:29>]
REFERENCE_CALL void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <491:50 491:53>]
REFERENCE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <491:42 491:45>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:44> [b3Matrix3x3.h <492:3 492:7>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Matrix3x3.h <492:11 492:18>]
REFERENCE_CALL void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar b3Asin(b3Scalar) [b3Matrix3x3.h <492:20 492:25>]
REFERENCE_CALL void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <492:36 492:39>]
REFERENCE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <492:28 492:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:61> [b3Matrix3x3.h <493:3 493:6>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Matrix3x3.h <493:10 493:17>]
REFERENCE_CALL void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar b3Atan2(b3Scalar, b3Scalar) [b3Matrix3x3.h <493:19 493:25>]
REFERENCE_CALL void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <493:35 493:38>]
REFERENCE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <493:27 493:30>]
REFERENCE_CALL void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <493:51 493:54>]
REFERENCE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <493:43 493:46>]
REFERENCE_CALL void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <496:7 496:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:44> [b3Matrix3x3.h <496:14 496:18>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Matrix3x3.h <496:22 496:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<497:3> [b3Matrix3x3.h <497:3 497:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<497:3> [b3Matrix3x3.h <507:3 507:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:29> [b3Matrix3x3.h <498:8 498:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:29> [b3Matrix3x3.h <499:5 499:7>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Matrix3x3.h <499:10 499:14>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:29> [b3Matrix3x3.h <501:5 501:7>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Matrix3x3.h <501:10 501:14>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:61> [b3Matrix3x3.h <503:8 503:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:61> [b3Matrix3x3.h <504:5 504:8>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Matrix3x3.h <504:11 504:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<487:61> [b3Matrix3x3.h <506:5 506:8>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerYPR(b3Scalar &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3Matrix3x3.h <506:11 506:15>]
SYMBOL_METHOD public void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const [b3Matrix3x3.h <516:2 <516:7 516:17> 580:2>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> void [b3Matrix3x3.h <516:2 516:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<516:29> [b3Matrix3x3.h <516:29 516:31>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <516:19 516:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<516:44> [b3Matrix3x3.h <516:44 516:48>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <516:34 516:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<516:61> [b3Matrix3x3.h <516:61 516:64>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <516:51 516:58>]
LOCAL_SYMBOL: b3Matrix3x3.h<516:80> [b3Matrix3x3.h <516:80 516:94>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> unsigned int [b3Matrix3x3.h <516:67 516:74>]
LOCAL_SYMBOL: b3Matrix3x3.h<517:2> [b3Matrix3x3.h <517:2 517:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<517:2> [b3Matrix3x3.h <580:2 580:2>]
SYMBOL_STRUCT b3Matrix3x3::getEulerZYX::Euler [b3Matrix3x3.h <518:3 <518:10 518:14> 523:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<519:3> [b3Matrix3x3.h <519:3 519:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<519:3> [b3Matrix3x3.h <523:3 523:3>]
SYMBOL_FIELD public b3Scalar b3Matrix3x3::getEulerZYX::Euler::yaw [b3Matrix3x3.h <520:13 520:15>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::getEulerZYX::Euler::yaw -> b3Scalar [b3Matrix3x3.h <520:4 520:11>]
SYMBOL_FIELD public b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <521:13 521:17>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch -> b3Scalar [b3Matrix3x3.h <521:4 521:11>]
SYMBOL_FIELD public b3Scalar b3Matrix3x3::getEulerZYX::Euler::roll [b3Matrix3x3.h <522:13 522:16>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::getEulerZYX::Euler::roll -> b3Scalar [b3Matrix3x3.h <522:4 522:11>]
SYMBOL_METHOD public void b3Matrix3x3::getEulerZYX::Euler::Euler() [b3Matrix3x3.h <518:10 <518:10 518:14> 518:14>]
SYMBOL_METHOD public void b3Matrix3x3::getEulerZYX::Euler::Euler(const b3Matrix3x3::getEulerZYX::Euler &) [b3Matrix3x3.h <518:10 518:14>]
SYMBOL_METHOD public void b3Matrix3x3::getEulerZYX::Euler::Euler(b3Matrix3x3::getEulerZYX::Euler &&) [b3Matrix3x3.h <518:10 518:14>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <525:9 525:17>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Matrix3x3::getEulerZYX::Euler [b3Matrix3x3.h <525:3 525:7>]
SYMBOL_FUNCTION void b3Matrix3x3::getEulerZYX::Euler::Euler()
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> void b3Matrix3x3::getEulerZYX::Euler::Euler() [b3Matrix3x3.h <525:9 525:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <526:9 526:18>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Matrix3x3::getEulerZYX::Euler [b3Matrix3x3.h <526:3 526:7>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> void b3Matrix3x3::getEulerZYX::Euler::Euler() [b3Matrix3x3.h <526:9 526:18>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <530:7 530:12>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <530:22 530:25>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <530:14 530:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<531:3> [b3Matrix3x3.h <531:3 531:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<531:3> [b3Matrix3x3.h <551:3 551:3>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::yaw [b3Matrix3x3.h <532:14 532:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <532:4 532:12>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::yaw [b3Matrix3x3.h <533:15 533:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <533:4 533:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<536:13> [b3Matrix3x3.h <536:13 536:17>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <536:4 536:11>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Atan2(b3Scalar, b3Scalar) [b3Matrix3x3.h <536:21 536:27>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <536:37 536:40>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <536:29 536:32>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <536:52 536:55>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <536:44 536:47>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <537:16 537:19>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <537:8 537:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<538:4> [b3Matrix3x3.h <538:4 538:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<538:4> [b3Matrix3x3.h <543:4 543:4>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <539:15 539:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <539:5 539:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <539:23 539:27>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <539:31 539:38>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <540:16 540:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <540:5 540:14>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <540:24 540:28>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <540:32 540:39>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::roll [b3Matrix3x3.h <541:15 541:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <541:5 541:13>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <541:32 541:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <541:22 541:30>]
LOCAL_SYMBOL: b3Matrix3x3.h<536:13> [b3Matrix3x3.h <541:40 541:44>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::roll [b3Matrix3x3.h <542:16 542:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <542:5 542:14>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <542:33 542:37>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <542:23 542:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<536:13> [b3Matrix3x3.h <542:41 542:45>]
LOCAL_SYMBOL: b3Matrix3x3.h<545:4> [b3Matrix3x3.h <545:4 545:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<545:4> [b3Matrix3x3.h <550:4 550:4>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <546:15 546:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <546:5 546:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <546:24 546:28>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <546:32 546:39>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <547:16 547:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <547:5 547:14>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <547:25 547:29>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <547:33 547:40>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::roll [b3Matrix3x3.h <548:15 548:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <548:5 548:13>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <548:33 548:37>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <548:23 548:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<536:13> [b3Matrix3x3.h <548:41 548:45>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::roll [b3Matrix3x3.h <549:16 549:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <549:5 549:14>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <549:34 549:38>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <549:24 549:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<536:13> [b3Matrix3x3.h <549:42 549:46>]
LOCAL_SYMBOL: b3Matrix3x3.h<553:3> [b3Matrix3x3.h <553:3 553:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<553:3> [b3Matrix3x3.h <566:3 566:3>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <554:14 554:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <554:4 554:12>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Asin(b3Scalar) [b3Matrix3x3.h <554:24 554:29>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <554:39 554:42>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <554:31 554:34>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <555:15 555:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <555:4 555:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar [b3Matrix3x3.h <555:23 555:27>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <555:41 555:45>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <555:31 555:39>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::roll [b3Matrix3x3.h <557:14 557:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <557:4 557:12>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Atan2(b3Scalar, b3Scalar) [b3Matrix3x3.h <557:21 557:27>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <557:37 557:40>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <557:29 557:32>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Cos(b3Scalar) [b3Matrix3x3.h <557:44 557:48>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <557:60 557:64>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <557:50 557:58>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <558:13 558:16>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <558:5 558:8>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Cos(b3Scalar) [b3Matrix3x3.h <558:20 558:24>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <558:36 558:40>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <558:26 558:34>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::roll [b3Matrix3x3.h <559:15 559:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <559:4 559:13>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Atan2(b3Scalar, b3Scalar) [b3Matrix3x3.h <559:22 559:28>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <559:38 559:41>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <559:30 559:33>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Cos(b3Scalar) [b3Matrix3x3.h <559:45 559:49>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <559:62 559:66>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <559:51 559:60>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <560:13 560:16>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <560:5 560:8>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Cos(b3Scalar) [b3Matrix3x3.h <560:20 560:24>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <560:37 560:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <560:26 560:35>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::yaw [b3Matrix3x3.h <562:14 562:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <562:4 562:12>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Atan2(b3Scalar, b3Scalar) [b3Matrix3x3.h <562:20 562:26>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <562:36 562:39>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <562:28 562:31>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Cos(b3Scalar) [b3Matrix3x3.h <562:43 562:47>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <562:59 562:63>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <562:49 562:57>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <563:13 563:16>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <563:5 563:8>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Cos(b3Scalar) [b3Matrix3x3.h <563:20 563:24>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <563:36 563:40>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <563:26 563:34>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::yaw [b3Matrix3x3.h <564:15 564:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <564:4 564:13>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Atan2(b3Scalar, b3Scalar) [b3Matrix3x3.h <564:21 564:27>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <564:37 564:40>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <564:29 564:32>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Cos(b3Scalar) [b3Matrix3x3.h <564:44 564:48>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <564:61 564:65>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <564:50 564:59>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <565:13 565:16>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <565:5 565:8>]
REFERENCE_CALL void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Cos(b3Scalar) [b3Matrix3x3.h <565:20 565:24>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <565:37 565:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <565:26 565:35>]
LOCAL_SYMBOL: b3Matrix3x3.h<516:80> [b3Matrix3x3.h <568:7 568:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<569:3> [b3Matrix3x3.h <569:3 569:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<569:3> [b3Matrix3x3.h <573:3 573:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<516:29> [b3Matrix3x3.h <570:4 570:6>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::yaw [b3Matrix3x3.h <570:20 570:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <570:10 570:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<516:44> [b3Matrix3x3.h <571:4 571:8>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <571:22 571:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <571:12 571:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<516:61> [b3Matrix3x3.h <572:4 572:7>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::roll [b3Matrix3x3.h <572:21 572:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<525:9> [b3Matrix3x3.h <572:11 572:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<575:3> [b3Matrix3x3.h <575:3 575:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<575:3> [b3Matrix3x3.h <579:3 579:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<516:29> [b3Matrix3x3.h <576:4 576:6>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::yaw [b3Matrix3x3.h <576:21 576:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <576:10 576:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<516:44> [b3Matrix3x3.h <577:4 577:8>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::pitch [b3Matrix3x3.h <577:23 577:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <577:12 577:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<516:61> [b3Matrix3x3.h <578:4 578:7>]
REFERENCE_USAGE void b3Matrix3x3::getEulerZYX(b3Scalar &, b3Scalar &, b3Scalar &, unsigned int) const -> b3Scalar b3Matrix3x3::getEulerZYX::Euler::roll [b3Matrix3x3.h <578:22 578:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<526:9> [b3Matrix3x3.h <578:11 578:20>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const [b3Matrix3x3.h <585:2 <585:14 585:19> 595:2>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <585:2 585:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<585:38> [b3Matrix3x3.h <585:38 585:38>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Vector3 [b3Matrix3x3.h <585:27 585:35>]
LOCAL_SYMBOL: b3Matrix3x3.h<586:2> [b3Matrix3x3.h <586:2 586:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<586:2> [b3Matrix3x3.h <595:2 595:2>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <590:10 590:20>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <590:10 590:20>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <591:21 591:24>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <591:13 591:16>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <591:32 591:35>]
LOCAL_SYMBOL: b3Matrix3x3.h<585:38> [b3Matrix3x3.h <591:30 591:30>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <591:48 591:51>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <591:40 591:43>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <591:59 591:62>]
LOCAL_SYMBOL: b3Matrix3x3.h<585:38> [b3Matrix3x3.h <591:57 591:57>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <591:75 591:78>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <591:67 591:70>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <591:86 591:89>]
LOCAL_SYMBOL: b3Matrix3x3.h<585:38> [b3Matrix3x3.h <591:84 591:84>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <592:12 592:15>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <592:4 592:7>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <592:23 592:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<585:38> [b3Matrix3x3.h <592:21 592:21>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <592:39 592:42>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <592:31 592:34>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <592:50 592:53>]
LOCAL_SYMBOL: b3Matrix3x3.h<585:38> [b3Matrix3x3.h <592:48 592:48>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <592:66 592:69>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <592:58 592:61>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <592:77 592:80>]
LOCAL_SYMBOL: b3Matrix3x3.h<585:38> [b3Matrix3x3.h <592:75 592:75>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <593:12 593:15>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <593:4 593:7>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <593:23 593:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<585:38> [b3Matrix3x3.h <593:21 593:21>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <593:39 593:42>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <593:31 593:34>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <593:50 593:53>]
LOCAL_SYMBOL: b3Matrix3x3.h<585:38> [b3Matrix3x3.h <593:48 593:48>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <593:66 593:69>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <593:58 593:61>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::scaled(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <593:77 593:80>]
LOCAL_SYMBOL: b3Matrix3x3.h<585:38> [b3Matrix3x3.h <593:75 593:75>]
SYMBOL_METHOD public b3Scalar b3Matrix3x3::determinant() const [b3Matrix3x3.h <598:22 598:32>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::determinant() const -> b3Scalar [b3Matrix3x3.h <598:2 598:9>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::adjoint() const [b3Matrix3x3.h <600:14 600:20>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Matrix3x3 [b3Matrix3x3.h <600:2 600:12>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::absolute() const [b3Matrix3x3.h <602:14 602:21>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Matrix3x3 [b3Matrix3x3.h <602:2 602:12>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::transpose() const [b3Matrix3x3.h <604:14 604:22>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Matrix3x3 [b3Matrix3x3.h <604:2 604:12>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::inverse() const [b3Matrix3x3.h <606:14 606:20>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Matrix3x3 [b3Matrix3x3.h <606:2 606:12>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const [b3Matrix3x3.h <608:14 608:27>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <608:2 608:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<608:48> [b3Matrix3x3.h <608:48 608:48>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <608:35 608:45>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const [b3Matrix3x3.h <609:14 609:27>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <609:2 609:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<609:48> [b3Matrix3x3.h <609:48 609:48>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <609:35 609:45>]
SYMBOL_METHOD public b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const [b3Matrix3x3.h <611:2 <611:27 611:31> 614:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const -> b3Scalar [b3Matrix3x3.h <611:18 611:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<611:50> [b3Matrix3x3.h <611:50 611:50>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const -> b3Vector3 [b3Matrix3x3.h <611:39 611:47>]
LOCAL_SYMBOL: b3Matrix3x3.h<612:2> [b3Matrix3x3.h <612:2 612:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<612:2> [b3Matrix3x3.h <614:2 614:2>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <613:18 613:21>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <613:10 613:13>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <613:29 613:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<611:50> [b3Matrix3x3.h <613:27 613:27>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <613:46 613:49>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <613:38 613:41>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <613:57 613:60>]
LOCAL_SYMBOL: b3Matrix3x3.h<611:50> [b3Matrix3x3.h <613:55 613:55>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <613:74 613:77>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <613:66 613:69>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <613:85 613:88>]
LOCAL_SYMBOL: b3Matrix3x3.h<611:50> [b3Matrix3x3.h <613:83 613:83>]
SYMBOL_METHOD public b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const [b3Matrix3x3.h <615:2 <615:27 615:31> 618:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const -> b3Scalar [b3Matrix3x3.h <615:18 615:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<615:50> [b3Matrix3x3.h <615:50 615:50>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const -> b3Vector3 [b3Matrix3x3.h <615:39 615:47>]
LOCAL_SYMBOL: b3Matrix3x3.h<616:2> [b3Matrix3x3.h <616:2 616:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<616:2> [b3Matrix3x3.h <618:2 618:2>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <617:18 617:21>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <617:10 617:13>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <617:29 617:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<615:50> [b3Matrix3x3.h <617:27 617:27>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <617:46 617:49>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <617:38 617:41>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <617:57 617:60>]
LOCAL_SYMBOL: b3Matrix3x3.h<615:50> [b3Matrix3x3.h <617:55 617:55>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <617:74 617:77>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <617:66 617:69>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <617:85 617:88>]
LOCAL_SYMBOL: b3Matrix3x3.h<615:50> [b3Matrix3x3.h <617:83 617:83>]
SYMBOL_METHOD public b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const [b3Matrix3x3.h <619:2 <619:27 619:31> 622:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const -> b3Scalar [b3Matrix3x3.h <619:18 619:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<619:50> [b3Matrix3x3.h <619:50 619:50>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const -> b3Vector3 [b3Matrix3x3.h <619:39 619:47>]
LOCAL_SYMBOL: b3Matrix3x3.h<620:2> [b3Matrix3x3.h <620:2 620:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<620:2> [b3Matrix3x3.h <622:2 622:2>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <621:18 621:21>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <621:10 621:13>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <621:29 621:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<619:50> [b3Matrix3x3.h <621:27 621:27>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <621:46 621:49>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <621:38 621:41>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <621:57 621:60>]
LOCAL_SYMBOL: b3Matrix3x3.h<619:50> [b3Matrix3x3.h <621:55 621:55>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <621:74 621:77>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <621:66 621:69>]
REFERENCE_CALL b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <621:85 621:88>]
LOCAL_SYMBOL: b3Matrix3x3.h<619:50> [b3Matrix3x3.h <621:83 621:83>]
SYMBOL_METHOD public void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) [b3Matrix3x3.h <634:2 <634:7 634:17> 710:2>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> void [b3Matrix3x3.h <634:2 634:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<634:32> [b3Matrix3x3.h <634:32 634:34>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Matrix3x3 [b3Matrix3x3.h <634:19 634:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<634:46> [b3Matrix3x3.h <634:46 634:54>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <634:37 634:44>]
LOCAL_SYMBOL: b3Matrix3x3.h<634:61> [b3Matrix3x3.h <634:61 634:68>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> int [b3Matrix3x3.h <634:57 634:59>]
LOCAL_SYMBOL: b3Matrix3x3.h<635:2> [b3Matrix3x3.h <635:2 635:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<635:2> [b3Matrix3x3.h <710:2 710:2>]
SYMBOL_FUNCTION void b3Matrix3x3::setIdentity()
REFERENCE_CALL void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> void b3Matrix3x3::setIdentity() [b3Matrix3x3.h <636:7 636:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<634:32> [b3Matrix3x3.h <636:3 636:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<637:12> [b3Matrix3x3.h <637:12 637:15>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> int [b3Matrix3x3.h <637:8 637:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<634:61> [b3Matrix3x3.h <637:19 637:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<637:12> [b3Matrix3x3.h <637:29 637:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<637:12> [b3Matrix3x3.h <637:39 637:42>]
LOCAL_SYMBOL: b3Matrix3x3.h<638:3> [b3Matrix3x3.h <638:3 638:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<638:3> [b3Matrix3x3.h <709:3 709:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <640:8 640:8>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> int [b3Matrix3x3.h <640:4 640:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <641:8 641:8>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> int [b3Matrix3x3.h <641:4 641:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<642:8> [b3Matrix3x3.h <642:8 642:8>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> int [b3Matrix3x3.h <642:4 642:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<643:13> [b3Matrix3x3.h <643:13 643:15>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <643:4 643:11>]
REFERENCE_CALL void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <643:19 643:24>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <643:26 643:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<644:13> [b3Matrix3x3.h <644:13 644:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <644:4 644:11>]
REFERENCE_CALL void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <644:17 644:22>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <644:24 644:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<644:13> [b3Matrix3x3.h <645:8 645:8>]
LOCAL_SYMBOL: b3Matrix3x3.h<643:13> [b3Matrix3x3.h <645:12 645:14>]
LOCAL_SYMBOL: b3Matrix3x3.h<646:4> [b3Matrix3x3.h <646:4 646:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<646:4> [b3Matrix3x3.h <650:4 650:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <647:5 647:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<642:8> [b3Matrix3x3.h <648:5 648:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<643:13> [b3Matrix3x3.h <649:5 649:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<644:13> [b3Matrix3x3.h <649:11 649:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<644:13> [b3Matrix3x3.h <651:4 651:4>]
REFERENCE_CALL void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <651:8 651:13>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <651:15 651:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<644:13> [b3Matrix3x3.h <652:8 652:8>]
LOCAL_SYMBOL: b3Matrix3x3.h<643:13> [b3Matrix3x3.h <652:12 652:14>]
LOCAL_SYMBOL: b3Matrix3x3.h<653:4> [b3Matrix3x3.h <653:4 653:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<653:4> [b3Matrix3x3.h <658:4 658:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <654:5 654:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <655:5 655:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<642:8> [b3Matrix3x3.h <656:5 656:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<643:13> [b3Matrix3x3.h <657:5 657:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<644:13> [b3Matrix3x3.h <657:11 657:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <660:13 660:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <660:4 660:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<634:46> [b3Matrix3x3.h <660:17 660:25>]
REFERENCE_CALL void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <660:30 660:35>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <660:37 660:40>]
REFERENCE_CALL void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <660:51 660:56>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <660:58 660:61>]
REFERENCE_CALL void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <660:72 660:77>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <660:79 660:82>]
LOCAL_SYMBOL: b3Matrix3x3.h<643:13> [b3Matrix3x3.h <661:8 661:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <661:15 661:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<662:4> [b3Matrix3x3.h <662:4 662:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<662:4> [b3Matrix3x3.h <668:4 668:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<643:13> [b3Matrix3x3.h <663:9 663:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <663:29 663:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<664:5> [b3Matrix3x3.h <664:5 664:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<664:5> [b3Matrix3x3.h <666:5 666:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<637:12> [b3Matrix3x3.h <667:5 667:8>]
LOCAL_SYMBOL: b3Matrix3x3.h<671:13> [b3Matrix3x3.h <671:13 671:15>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <671:4 671:11>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <671:19 671:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <671:24 671:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <671:27 671:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<672:13> [b3Matrix3x3.h <672:13 672:17>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <672:4 672:11>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <672:22 672:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <672:27 672:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <672:30 672:30>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <672:35 672:38>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <672:40 672:40>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <672:43 672:43>]
LOCAL_SYMBOL: b3Matrix3x3.h<671:13> [b3Matrix3x3.h <672:54 672:56>]
LOCAL_SYMBOL: b3Matrix3x3.h<673:13> [b3Matrix3x3.h <673:13 673:18>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <673:4 673:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<672:13> [b3Matrix3x3.h <673:22 673:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<672:13> [b3Matrix3x3.h <673:30 673:34>]
LOCAL_SYMBOL: b3Matrix3x3.h<674:13> [b3Matrix3x3.h <674:13 674:15>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <674:4 674:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<675:13> [b3Matrix3x3.h <675:13 675:15>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <675:4 675:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<673:13> [b3Matrix3x3.h <676:8 676:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<673:13> [b3Matrix3x3.h <676:17 676:22>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <676:26 676:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<677:4> [b3Matrix3x3.h <677:4 677:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<677:4> [b3Matrix3x3.h <682:4 682:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <678:5 678:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<672:13> [b3Matrix3x3.h <678:10 678:14>]
LOCAL_SYMBOL: b3Matrix3x3.h<672:13> [b3Matrix3x3.h <678:29 678:33>]
REFERENCE_CALL void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar b3Sqrt(b3Scalar) [b3Matrix3x3.h <678:37 678:42>]
LOCAL_SYMBOL: b3Matrix3x3.h<673:13> [b3Matrix3x3.h <678:48 678:53>]
LOCAL_SYMBOL: b3Matrix3x3.h<672:13> [b3Matrix3x3.h <679:13 679:17>]
REFERENCE_CALL void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar b3Sqrt(b3Scalar) [b3Matrix3x3.h <679:21 679:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<673:13> [b3Matrix3x3.h <679:32 679:37>]
LOCAL_SYMBOL: b3Matrix3x3.h<674:13> [b3Matrix3x3.h <680:5 680:7>]
REFERENCE_CALL void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar b3Sqrt(b3Scalar) [b3Matrix3x3.h <680:15 680:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <680:26 680:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <680:30 680:30>]
LOCAL_SYMBOL: b3Matrix3x3.h<675:13> [b3Matrix3x3.h <681:5 681:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<674:13> [b3Matrix3x3.h <681:11 681:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <681:17 681:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<684:4> [b3Matrix3x3.h <684:4 684:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<684:4> [b3Matrix3x3.h <689:4 689:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <686:5 686:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<672:13> [b3Matrix3x3.h <686:14 686:18>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <686:27 686:34>]
LOCAL_SYMBOL: b3Matrix3x3.h<673:13> [b3Matrix3x3.h <686:43 686:48>]
LOCAL_SYMBOL: b3Matrix3x3.h<674:13> [b3Matrix3x3.h <687:5 687:7>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <687:15 687:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <687:31 687:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <687:35 687:35>]
LOCAL_SYMBOL: b3Matrix3x3.h<675:13> [b3Matrix3x3.h <688:5 688:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<674:13> [b3Matrix3x3.h <688:11 688:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <688:17 688:17>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <692:4 692:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <692:9 692:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <692:12 692:12>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <692:17 692:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <692:22 692:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <692:25 692:25>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <693:4 693:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <693:9 693:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <693:12 693:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <693:18 693:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<671:13> [b3Matrix3x3.h <693:22 693:24>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <694:4 694:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <694:9 694:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <694:12 694:12>]
LOCAL_SYMBOL: b3Matrix3x3.h<660:13> [b3Matrix3x3.h <694:18 694:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<671:13> [b3Matrix3x3.h <694:22 694:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<695:13> [b3Matrix3x3.h <695:13 695:15>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <695:4 695:11>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <695:19 695:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<642:8> [b3Matrix3x3.h <695:24 695:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <695:27 695:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<696:13> [b3Matrix3x3.h <696:13 696:15>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Scalar [b3Matrix3x3.h <696:4 696:11>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <696:19 696:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<642:8> [b3Matrix3x3.h <696:24 696:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <696:27 696:27>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <697:4 697:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<642:8> [b3Matrix3x3.h <697:9 697:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <697:12 697:12>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <697:17 697:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <697:22 697:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<642:8> [b3Matrix3x3.h <697:25 697:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<674:13> [b3Matrix3x3.h <697:30 697:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<695:13> [b3Matrix3x3.h <697:36 697:38>]
LOCAL_SYMBOL: b3Matrix3x3.h<675:13> [b3Matrix3x3.h <697:42 697:44>]
LOCAL_SYMBOL: b3Matrix3x3.h<696:13> [b3Matrix3x3.h <697:48 697:50>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <698:4 698:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<642:8> [b3Matrix3x3.h <698:9 698:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <698:12 698:12>]
REFERENCE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <698:17 698:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <698:22 698:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<642:8> [b3Matrix3x3.h <698:25 698:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<674:13> [b3Matrix3x3.h <698:30 698:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<696:13> [b3Matrix3x3.h <698:36 698:38>]
LOCAL_SYMBOL: b3Matrix3x3.h<675:13> [b3Matrix3x3.h <698:42 698:44>]
LOCAL_SYMBOL: b3Matrix3x3.h<695:13> [b3Matrix3x3.h <698:48 698:50>]
LOCAL_SYMBOL: b3Matrix3x3.h<701:13> [b3Matrix3x3.h <701:13 701:13>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> int [b3Matrix3x3.h <701:9 701:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<701:13> [b3Matrix3x3.h <701:20 701:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<701:13> [b3Matrix3x3.h <701:27 701:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<702:4> [b3Matrix3x3.h <702:4 702:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<702:4> [b3Matrix3x3.h <708:4 708:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<703:16> [b3Matrix3x3.h <703:16 703:18>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 [b3Matrix3x3.h <703:5 703:13>]
SYMBOL_FUNCTION b3Vector3 & b3Matrix3x3::operator[](int)
REFERENCE_CALL void b3Matrix3x3::diagonalize(b3Matrix3x3 &, b3Scalar, int) -> b3Vector3 & b3Matrix3x3::operator[](int) [b3Matrix3x3.h <703:25 703:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<634:32> [b3Matrix3x3.h <703:22 703:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<701:13> [b3Matrix3x3.h <703:26 703:26>]
LOCAL_SYMBOL: b3Matrix3x3.h<695:13> [b3Matrix3x3.h <704:5 704:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<703:16> [b3Matrix3x3.h <704:11 704:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <704:15 704:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<696:13> [b3Matrix3x3.h <705:5 705:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<703:16> [b3Matrix3x3.h <705:11 705:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <705:15 705:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<703:16> [b3Matrix3x3.h <706:5 706:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<640:8> [b3Matrix3x3.h <706:9 706:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<674:13> [b3Matrix3x3.h <706:14 706:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<695:13> [b3Matrix3x3.h <706:20 706:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<675:13> [b3Matrix3x3.h <706:26 706:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<696:13> [b3Matrix3x3.h <706:32 706:34>]
LOCAL_SYMBOL: b3Matrix3x3.h<703:16> [b3Matrix3x3.h <707:5 707:7>]
LOCAL_SYMBOL: b3Matrix3x3.h<641:8> [b3Matrix3x3.h <707:9 707:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<674:13> [b3Matrix3x3.h <707:14 707:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<696:13> [b3Matrix3x3.h <707:20 707:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<675:13> [b3Matrix3x3.h <707:26 707:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<695:13> [b3Matrix3x3.h <707:32 707:34>]
SYMBOL_METHOD public b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <722:2 <722:11 722:15> 725:2>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::cofac(int, int, int, int) const -> b3Scalar [b3Matrix3x3.h <722:2 722:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:21> [b3Matrix3x3.h <722:21 722:22>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::cofac(int, int, int, int) const -> int [b3Matrix3x3.h <722:17 722:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:29> [b3Matrix3x3.h <722:29 722:30>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::cofac(int, int, int, int) const -> int [b3Matrix3x3.h <722:25 722:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:37> [b3Matrix3x3.h <722:37 722:38>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::cofac(int, int, int, int) const -> int [b3Matrix3x3.h <722:33 722:35>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:45> [b3Matrix3x3.h <722:45 722:46>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::cofac(int, int, int, int) const -> int [b3Matrix3x3.h <722:41 722:43>]
LOCAL_SYMBOL: b3Matrix3x3.h<723:2> [b3Matrix3x3.h <723:2 723:2>]
LOCAL_SYMBOL: b3Matrix3x3.h<723:2> [b3Matrix3x3.h <725:2 725:2>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::cofac(int, int, int, int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <724:10 724:13>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:21> [b3Matrix3x3.h <724:15 724:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:29> [b3Matrix3x3.h <724:19 724:20>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::cofac(int, int, int, int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <724:25 724:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:37> [b3Matrix3x3.h <724:30 724:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:45> [b3Matrix3x3.h <724:34 724:35>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::cofac(int, int, int, int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <724:40 724:43>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:21> [b3Matrix3x3.h <724:45 724:46>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:45> [b3Matrix3x3.h <724:49 724:50>]
REFERENCE_USAGE b3Scalar b3Matrix3x3::cofac(int, int, int, int) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <724:55 724:58>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:37> [b3Matrix3x3.h <724:60 724:61>]
LOCAL_SYMBOL: b3Matrix3x3.h<722:29> [b3Matrix3x3.h <724:64 724:65>]
SYMBOL_STRUCT b3Matrix3x3FloatData [b3Matrix3x3.h <727:24 727:38>]
SYMBOL_METHOD public void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const [b3Matrix3x3.h <727:7 727:15>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const -> void [b3Matrix3x3.h <727:2 727:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<727:41> [b3Matrix3x3.h <727:41 727:47>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const -> b3Matrix3x3FloatData [b3Matrix3x3.h <727:24 727:38>]
SYMBOL_METHOD public void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const [b3Matrix3x3.h <729:7 729:20>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const -> void [b3Matrix3x3.h <729:2 729:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<729:51> [b3Matrix3x3.h <729:51 729:57>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const -> b3Matrix3x3FloatData [b3Matrix3x3.h <729:29 729:48>]
SYMBOL_METHOD public void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &) [b3Matrix3x3.h <731:7 731:17>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &) -> void [b3Matrix3x3.h <731:2 731:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<731:49> [b3Matrix3x3.h <731:49 731:54>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &) -> b3Matrix3x3FloatData [b3Matrix3x3.h <731:32 731:46>]
SYMBOL_METHOD public void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &) [b3Matrix3x3.h <733:7 733:22>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &) -> void [b3Matrix3x3.h <733:2 733:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<733:59> [b3Matrix3x3.h <733:59 733:64>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &) -> b3Matrix3x3FloatData [b3Matrix3x3.h <733:37 733:56>]
SYMBOL_STRUCT b3Matrix3x3DoubleData [b3Matrix3x3.h <735:38 735:58>]
SYMBOL_METHOD public void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &) [b3Matrix3x3.h <735:7 735:23>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &) -> void [b3Matrix3x3.h <735:2 735:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<735:61> [b3Matrix3x3.h <735:61 735:66>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &) -> b3Matrix3x3DoubleData [b3Matrix3x3.h <735:38 735:58>]
SYMBOL_METHOD public void b3Matrix3x3::~b3Matrix3x3() [b3Matrix3x3.h <43:31 43:41>]
SYMBOL_METHOD public b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) [b3Matrix3x3.h <740:1 <741:14 741:23> 828:1>]
SYMBOL_CLASS b3Matrix3x3
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <741:1 741:11>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <740:17 740:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<741:44> [b3Matrix3x3.h <741:44 741:44>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <741:31 741:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<742:1> [b3Matrix3x3.h <742:1 742:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<742:1> [b3Matrix3x3.h <828:1 828:1>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <822:2 822:9>]
SYMBOL_FUNCTION b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const [b3Matrix3x3.h <823:11 823:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<741:44> [b3Matrix3x3.h <823:9 823:9>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <823:17 823:20>]
SYMBOL_FUNCTION b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const [b3Matrix3x3.h <823:29 823:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<741:44> [b3Matrix3x3.h <823:27 823:27>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <823:35 823:38>]
SYMBOL_FUNCTION b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const [b3Matrix3x3.h <823:47 823:51>]
LOCAL_SYMBOL: b3Matrix3x3.h<741:44> [b3Matrix3x3.h <823:45 823:45>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <823:53 823:56>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const [b3Matrix3x3.h <824:5 824:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<741:44> [b3Matrix3x3.h <824:3 824:3>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <824:11 824:14>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const [b3Matrix3x3.h <824:23 824:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<741:44> [b3Matrix3x3.h <824:21 824:21>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <824:29 824:32>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const [b3Matrix3x3.h <824:41 824:45>]
LOCAL_SYMBOL: b3Matrix3x3.h<741:44> [b3Matrix3x3.h <824:39 824:39>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <824:47 824:50>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const [b3Matrix3x3.h <825:5 825:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<741:44> [b3Matrix3x3.h <825:3 825:3>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <825:11 825:14>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const [b3Matrix3x3.h <825:23 825:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<741:44> [b3Matrix3x3.h <825:21 825:21>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <825:29 825:32>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const [b3Matrix3x3.h <825:41 825:45>]
LOCAL_SYMBOL: b3Matrix3x3.h<741:44> [b3Matrix3x3.h <825:39 825:39>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <825:47 825:50>]
SYMBOL_METHOD public b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) [b3Matrix3x3.h <830:1 <831:14 831:23> 850:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <831:1 831:11>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <830:17 830:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<831:44> [b3Matrix3x3.h <831:44 831:44>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <831:31 831:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<832:1> [b3Matrix3x3.h <832:1 832:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<832:1> [b3Matrix3x3.h <850:1 850:1>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <838:2 838:9>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <839:3 839:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <839:16 839:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<831:44> [b3Matrix3x3.h <839:14 839:14>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <840:3 840:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <840:16 840:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<831:44> [b3Matrix3x3.h <840:14 840:14>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <841:3 841:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <841:16 841:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<831:44> [b3Matrix3x3.h <841:14 841:14>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <842:3 842:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <842:16 842:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<831:44> [b3Matrix3x3.h <842:14 842:14>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <843:3 843:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <843:16 843:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<831:44> [b3Matrix3x3.h <843:14 843:14>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <844:3 844:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <844:16 844:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<831:44> [b3Matrix3x3.h <844:14 844:14>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <845:3 845:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <845:16 845:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<831:44> [b3Matrix3x3.h <845:14 845:14>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <846:3 846:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <846:16 846:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<831:44> [b3Matrix3x3.h <846:14 846:14>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <847:3 847:6>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator+=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <847:16 847:19>]
LOCAL_SYMBOL: b3Matrix3x3.h<831:44> [b3Matrix3x3.h <847:14 847:14>]
SYMBOL_FUNCTION b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) [b3Matrix3x3.h <852:1 <853:1 853:9> 872:1>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> b3Matrix3x3 [b3Matrix3x3.h <852:17 852:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:30> [b3Matrix3x3.h <853:30 853:30>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> b3Matrix3x3 [b3Matrix3x3.h <853:17 853:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:50> [b3Matrix3x3.h <853:50 853:50>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> b3Scalar [b3Matrix3x3.h <853:39 853:46>]
LOCAL_SYMBOL: b3Matrix3x3.h<854:1> [b3Matrix3x3.h <854:1 854:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<854:1> [b3Matrix3x3.h <872:1 872:1>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <867:9 867:19>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> b3Matrix3x3 [b3Matrix3x3.h <867:9 867:19>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <868:8 868:11>]
SYMBOL_FUNCTION const b3Vector3 & b3Matrix3x3::operator[](int) const
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <868:4 868:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:30> [b3Matrix3x3.h <868:3 868:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:50> [b3Matrix3x3.h <868:15 868:15>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <868:22 868:25>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <868:18 868:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:30> [b3Matrix3x3.h <868:17 868:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:50> [b3Matrix3x3.h <868:29 868:29>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <868:36 868:39>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <868:32 868:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:30> [b3Matrix3x3.h <868:31 868:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:50> [b3Matrix3x3.h <868:43 868:43>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <869:8 869:11>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <869:4 869:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:30> [b3Matrix3x3.h <869:3 869:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:50> [b3Matrix3x3.h <869:15 869:15>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <869:22 869:25>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <869:18 869:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:30> [b3Matrix3x3.h <869:17 869:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:50> [b3Matrix3x3.h <869:29 869:29>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <869:36 869:39>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <869:32 869:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:30> [b3Matrix3x3.h <869:31 869:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:50> [b3Matrix3x3.h <869:43 869:43>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <870:8 870:11>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <870:4 870:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:30> [b3Matrix3x3.h <870:3 870:3>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:50> [b3Matrix3x3.h <870:15 870:15>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <870:22 870:25>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <870:18 870:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:30> [b3Matrix3x3.h <870:17 870:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:50> [b3Matrix3x3.h <870:29 870:29>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <870:36 870:39>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Scalar &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <870:32 870:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:30> [b3Matrix3x3.h <870:31 870:31>]
LOCAL_SYMBOL: b3Matrix3x3.h<853:50> [b3Matrix3x3.h <870:43 870:43>]
SYMBOL_FUNCTION b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) [b3Matrix3x3.h <874:1 <875:1 875:9> 896:1>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <874:17 874:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:30> [b3Matrix3x3.h <875:30 875:31>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <875:17 875:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:53> [b3Matrix3x3.h <875:53 875:54>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <875:40 875:50>]
LOCAL_SYMBOL: b3Matrix3x3.h<876:1> [b3Matrix3x3.h <876:1 876:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<876:1> [b3Matrix3x3.h <896:1 896:1>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <883:9 883:19>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <883:9 883:19>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <884:11 884:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:30> [b3Matrix3x3.h <884:9 884:10>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <884:20 884:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:53> [b3Matrix3x3.h <884:18 884:19>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <885:11 885:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:30> [b3Matrix3x3.h <885:9 885:10>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <885:20 885:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:53> [b3Matrix3x3.h <885:18 885:19>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <886:11 886:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:30> [b3Matrix3x3.h <886:9 886:10>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <886:20 886:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:53> [b3Matrix3x3.h <886:18 886:19>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <888:11 888:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:30> [b3Matrix3x3.h <888:9 888:10>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <888:20 888:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:53> [b3Matrix3x3.h <888:18 888:19>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <889:11 889:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:30> [b3Matrix3x3.h <889:9 889:10>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <889:20 889:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:53> [b3Matrix3x3.h <889:18 889:19>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <890:11 890:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:30> [b3Matrix3x3.h <890:9 890:10>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <890:20 890:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:53> [b3Matrix3x3.h <890:18 890:19>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <892:11 892:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:30> [b3Matrix3x3.h <892:9 892:10>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <892:20 892:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:53> [b3Matrix3x3.h <892:18 892:19>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <893:11 893:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:30> [b3Matrix3x3.h <893:9 893:10>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <893:20 893:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:53> [b3Matrix3x3.h <893:18 893:19>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <894:11 894:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:30> [b3Matrix3x3.h <894:9 894:10>]
REFERENCE_CALL b3Matrix3x3 operator+(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <894:20 894:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<875:53> [b3Matrix3x3.h <894:18 894:19>]
SYMBOL_FUNCTION b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) [b3Matrix3x3.h <898:1 <899:1 899:9> 920:1>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <898:17 898:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:30> [b3Matrix3x3.h <899:30 899:31>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <899:17 899:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:53> [b3Matrix3x3.h <899:53 899:54>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <899:40 899:50>]
LOCAL_SYMBOL: b3Matrix3x3.h<900:1> [b3Matrix3x3.h <900:1 900:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<900:1> [b3Matrix3x3.h <920:1 920:1>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <907:9 907:19>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <907:9 907:19>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <908:11 908:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:30> [b3Matrix3x3.h <908:9 908:10>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <908:20 908:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:53> [b3Matrix3x3.h <908:18 908:19>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <909:11 909:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:30> [b3Matrix3x3.h <909:9 909:10>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <909:20 909:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:53> [b3Matrix3x3.h <909:18 909:19>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <910:11 910:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:30> [b3Matrix3x3.h <910:9 910:10>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <910:20 910:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:53> [b3Matrix3x3.h <910:18 910:19>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <912:11 912:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:30> [b3Matrix3x3.h <912:9 912:10>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <912:20 912:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:53> [b3Matrix3x3.h <912:18 912:19>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <913:11 913:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:30> [b3Matrix3x3.h <913:9 913:10>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <913:20 913:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:53> [b3Matrix3x3.h <913:18 913:19>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <914:11 914:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:30> [b3Matrix3x3.h <914:9 914:10>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <914:20 914:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:53> [b3Matrix3x3.h <914:18 914:19>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <916:11 916:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:30> [b3Matrix3x3.h <916:9 916:10>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <916:20 916:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:53> [b3Matrix3x3.h <916:18 916:19>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <917:11 917:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:30> [b3Matrix3x3.h <917:9 917:10>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <917:20 917:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:53> [b3Matrix3x3.h <917:18 917:19>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <918:11 918:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:30> [b3Matrix3x3.h <918:9 918:10>]
REFERENCE_CALL b3Matrix3x3 operator-(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <918:20 918:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<899:53> [b3Matrix3x3.h <918:18 918:19>]
SYMBOL_METHOD public b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) [b3Matrix3x3.h <923:1 <924:14 924:23> 943:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <924:1 924:11>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <923:17 923:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<924:44> [b3Matrix3x3.h <924:44 924:44>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <924:31 924:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<925:1> [b3Matrix3x3.h <925:1 925:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<925:1> [b3Matrix3x3.h <943:1 943:1>]
REFERENCE_CALL b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> void b3Matrix3x3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <931:2 931:9>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <932:2 932:5>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <932:15 932:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<924:44> [b3Matrix3x3.h <932:13 932:13>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <933:2 933:5>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <933:15 933:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<924:44> [b3Matrix3x3.h <933:13 933:13>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <934:2 934:5>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <934:15 934:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<924:44> [b3Matrix3x3.h <934:13 934:13>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <935:2 935:5>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <935:15 935:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<924:44> [b3Matrix3x3.h <935:13 935:13>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <936:2 936:5>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <936:15 936:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<924:44> [b3Matrix3x3.h <936:13 936:13>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <937:2 937:5>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <937:15 937:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<924:44> [b3Matrix3x3.h <937:13 937:13>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <938:2 938:5>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <938:15 938:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<924:44> [b3Matrix3x3.h <938:13 938:13>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <939:2 939:5>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <939:15 939:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<924:44> [b3Matrix3x3.h <939:13 939:13>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <940:2 940:5>]
REFERENCE_USAGE b3Matrix3x3 & b3Matrix3x3::operator-=(const b3Matrix3x3 &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <940:15 940:18>]
LOCAL_SYMBOL: b3Matrix3x3.h<924:44> [b3Matrix3x3.h <940:13 940:13>]
SYMBOL_METHOD public b3Scalar b3Matrix3x3::determinant() const [b3Matrix3x3.h <946:1 <947:14 947:24> 950:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <947:1 947:11>]
REFERENCE_TYPE_USAGE b3Scalar b3Matrix3x3::determinant() const -> b3Scalar [b3Matrix3x3.h <946:17 946:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<948:1> [b3Matrix3x3.h <948:1 948:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<948:1> [b3Matrix3x3.h <950:1 950:1>]
SYMBOL_FUNCTION b3Scalar b3Triple(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL b3Scalar b3Matrix3x3::determinant() const -> b3Scalar b3Triple(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) [b3Matrix3x3.h <949:9 949:16>]
REFERENCE_CALL b3Scalar b3Matrix3x3::determinant() const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <949:25 949:25>]
REFERENCE_CALL b3Scalar b3Matrix3x3::determinant() const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <949:37 949:37>]
REFERENCE_CALL b3Scalar b3Matrix3x3::determinant() const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <949:49 949:49>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::absolute() const [b3Matrix3x3.h <953:1 <954:14 954:21> 972:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <954:1 954:11>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Matrix3x3 [b3Matrix3x3.h <953:17 953:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<955:1> [b3Matrix3x3.h <955:1 955:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<955:1> [b3Matrix3x3.h <972:1 972:1>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <967:9 967:19>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Matrix3x3 [b3Matrix3x3.h <967:9 967:19>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <968:13 968:18>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <968:28 968:31>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <968:20 968:23>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <968:37 968:42>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <968:52 968:55>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <968:44 968:47>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <968:61 968:66>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <968:76 968:79>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <968:68 968:71>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <969:13 969:18>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <969:28 969:31>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <969:20 969:23>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <969:37 969:42>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <969:52 969:55>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <969:44 969:47>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <969:61 969:66>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <969:76 969:79>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <969:68 969:71>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <970:13 970:18>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <970:28 970:31>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <970:20 970:23>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <970:37 970:42>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <970:52 970:55>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <970:44 970:47>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Scalar b3Fabs(b3Scalar) [b3Matrix3x3.h <970:61 970:66>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::absolute() const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <970:76 970:79>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::absolute() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <970:68 970:71>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::transpose() const [b3Matrix3x3.h <974:1 <975:14 975:22> 1009:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <975:1 975:11>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Matrix3x3 [b3Matrix3x3.h <974:17 974:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<976:1> [b3Matrix3x3.h <976:1 976:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<976:1> [b3Matrix3x3.h <1009:1 1009:1>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transpose() const -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <1005:9 1005:19>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Matrix3x3 [b3Matrix3x3.h <1005:9 1005:19>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transpose() const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1005:30 1005:33>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1005:22 1005:25>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transpose() const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1005:46 1005:49>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1005:38 1005:41>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transpose() const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1005:62 1005:65>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1005:54 1005:57>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transpose() const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1006:33 1006:36>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1006:25 1006:28>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transpose() const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1006:49 1006:52>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1006:41 1006:44>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transpose() const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1006:65 1006:68>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1006:57 1006:60>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transpose() const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1007:33 1007:36>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1007:25 1007:28>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transpose() const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1007:49 1007:52>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1007:41 1007:44>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transpose() const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1007:65 1007:68>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transpose() const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1007:57 1007:60>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::adjoint() const [b3Matrix3x3.h <1011:1 <1012:14 1012:20> 1017:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <1012:1 1012:11>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Matrix3x3 [b3Matrix3x3.h <1011:17 1011:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<1013:1> [b3Matrix3x3.h <1013:1 1013:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1013:1> [b3Matrix3x3.h <1017:1 1017:1>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::adjoint() const -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <1014:9 1014:19>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Matrix3x3 [b3Matrix3x3.h <1014:9 1014:19>]
SYMBOL_FUNCTION b3Scalar b3Matrix3x3::cofac(int, int, int, int) const
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1014:21 1014:25>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1014:40 1014:44>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1014:59 1014:63>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1015:3 1015:7>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1015:22 1015:26>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1015:41 1015:45>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1016:3 1016:7>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1016:22 1016:26>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::adjoint() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1016:41 1016:45>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::inverse() const [b3Matrix3x3.h <1019:1 <1020:14 1020:20> 1029:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <1020:1 1020:11>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Matrix3x3 [b3Matrix3x3.h <1019:17 1019:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<1021:1> [b3Matrix3x3.h <1021:1 1021:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1021:1> [b3Matrix3x3.h <1029:1 1029:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1022:12> [b3Matrix3x3.h <1022:12 1022:13>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Vector3 [b3Matrix3x3.h <1022:2 1022:10>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Matrix3x3.h <1022:17 1022:29>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1022:31 1022:35>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1022:50 1022:54>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1022:69 1022:73>]
LOCAL_SYMBOL: b3Matrix3x3.h<1023:11> [b3Matrix3x3.h <1023:11 1023:13>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar [b3Matrix3x3.h <1023:2 1023:9>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1023:28 1023:30>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1023:24 1023:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<1022:12> [b3Matrix3x3.h <1023:32 1023:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<1025:11> [b3Matrix3x3.h <1025:11 1025:11>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar [b3Matrix3x3.h <1025:2 1025:9>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar [b3Matrix3x3.h <1025:15 1025:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<1023:11> [b3Matrix3x3.h <1025:31 1025:33>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <1026:9 1026:19>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Matrix3x3 [b3Matrix3x3.h <1026:9 1026:19>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1026:24 1026:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<1022:12> [b3Matrix3x3.h <1026:21 1026:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<1025:11> [b3Matrix3x3.h <1026:33 1026:33>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1026:36 1026:40>]
LOCAL_SYMBOL: b3Matrix3x3.h<1025:11> [b3Matrix3x3.h <1026:56 1026:56>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1026:59 1026:63>]
LOCAL_SYMBOL: b3Matrix3x3.h<1025:11> [b3Matrix3x3.h <1026:79 1026:79>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1027:6 1027:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<1022:12> [b3Matrix3x3.h <1027:3 1027:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<1025:11> [b3Matrix3x3.h <1027:15 1027:15>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1027:18 1027:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<1025:11> [b3Matrix3x3.h <1027:38 1027:38>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1027:41 1027:45>]
LOCAL_SYMBOL: b3Matrix3x3.h<1025:11> [b3Matrix3x3.h <1027:61 1027:61>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1028:6 1028:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<1022:12> [b3Matrix3x3.h <1028:3 1028:4>]
LOCAL_SYMBOL: b3Matrix3x3.h<1025:11> [b3Matrix3x3.h <1028:15 1028:15>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1028:18 1028:22>]
LOCAL_SYMBOL: b3Matrix3x3.h<1025:11> [b3Matrix3x3.h <1028:38 1028:38>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::inverse() const -> b3Scalar b3Matrix3x3::cofac(int, int, int, int) const [b3Matrix3x3.h <1028:41 1028:45>]
LOCAL_SYMBOL: b3Matrix3x3.h<1025:11> [b3Matrix3x3.h <1028:61 1028:61>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const [b3Matrix3x3.h <1031:1 <1032:14 1032:27> 1085:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <1032:1 1032:11>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <1031:17 1031:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1032:48 1032:48>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <1032:35 1032:45>]
LOCAL_SYMBOL: b3Matrix3x3.h<1033:1> [b3Matrix3x3.h <1033:1 1033:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1033:1> [b3Matrix3x3.h <1085:1 1085:1>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <1074:12 1074:22>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <1074:12 1074:22>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1075:11 1075:14>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1075:3 1075:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1075:25 1075:28>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1075:21 1075:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1075:20 1075:20>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1075:42 1075:45>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1075:34 1075:37>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1075:56 1075:59>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1075:52 1075:52>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1075:51 1075:51>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1075:73 1075:76>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1075:65 1075:68>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1075:87 1075:90>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1075:83 1075:83>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1075:82 1075:82>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1076:11 1076:14>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1076:3 1076:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1076:25 1076:28>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1076:21 1076:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1076:20 1076:20>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1076:42 1076:45>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1076:34 1076:37>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1076:56 1076:59>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1076:52 1076:52>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1076:51 1076:51>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1076:73 1076:76>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1076:65 1076:68>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1076:87 1076:90>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1076:83 1076:83>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1076:82 1076:82>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1077:11 1077:14>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1077:3 1077:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1077:25 1077:28>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1077:21 1077:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1077:20 1077:20>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1077:42 1077:45>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1077:34 1077:37>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1077:56 1077:59>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1077:52 1077:52>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1077:51 1077:51>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1077:73 1077:76>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1077:65 1077:68>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1077:87 1077:90>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1077:83 1077:83>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1077:82 1077:82>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1078:11 1078:14>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1078:3 1078:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1078:25 1078:28>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1078:21 1078:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1078:20 1078:20>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1078:42 1078:45>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1078:34 1078:37>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1078:56 1078:59>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1078:52 1078:52>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1078:51 1078:51>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1078:73 1078:76>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1078:65 1078:68>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1078:87 1078:90>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1078:83 1078:83>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1078:82 1078:82>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1079:11 1079:14>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1079:3 1079:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1079:25 1079:28>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1079:21 1079:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1079:20 1079:20>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1079:42 1079:45>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1079:34 1079:37>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1079:56 1079:59>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1079:52 1079:52>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1079:51 1079:51>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1079:73 1079:76>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1079:65 1079:68>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1079:87 1079:90>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1079:83 1079:83>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1079:82 1079:82>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1080:11 1080:14>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1080:3 1080:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1080:25 1080:28>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1080:21 1080:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1080:20 1080:20>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1080:42 1080:45>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1080:34 1080:37>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1080:56 1080:59>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1080:52 1080:52>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1080:51 1080:51>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1080:73 1080:76>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1080:65 1080:68>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1080:87 1080:90>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1080:83 1080:83>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1080:82 1080:82>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1081:11 1081:14>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1081:3 1081:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1081:25 1081:28>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1081:21 1081:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1081:20 1081:20>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1081:42 1081:45>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1081:34 1081:37>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1081:56 1081:59>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1081:52 1081:52>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1081:51 1081:51>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1081:73 1081:76>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1081:65 1081:68>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getX() const [b3Matrix3x3.h <1081:87 1081:90>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1081:83 1081:83>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1081:82 1081:82>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1082:11 1082:14>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1082:3 1082:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1082:25 1082:28>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1082:21 1082:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1082:20 1082:20>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1082:42 1082:45>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1082:34 1082:37>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1082:56 1082:59>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1082:52 1082:52>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1082:51 1082:51>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1082:73 1082:76>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1082:65 1082:68>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getY() const [b3Matrix3x3.h <1082:87 1082:90>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1082:83 1082:83>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1082:82 1082:82>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1083:11 1083:14>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1083:3 1083:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1083:25 1083:28>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1083:21 1083:21>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1083:20 1083:20>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1083:42 1083:45>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1083:34 1083:37>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1083:56 1083:59>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1083:52 1083:52>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1083:51 1083:51>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1083:73 1083:76>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1083:65 1083:68>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Scalar & b3Vector3::getZ() const [b3Matrix3x3.h <1083:87 1083:90>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1083:83 1083:83>]
LOCAL_SYMBOL: b3Matrix3x3.h<1032:48> [b3Matrix3x3.h <1083:82 1083:82>]
SYMBOL_METHOD public b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const [b3Matrix3x3.h <1087:1 <1088:14 1088:27> 1138:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <1088:1 1088:11>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <1087:17 1087:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<1088:48> [b3Matrix3x3.h <1088:48 1088:48>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <1088:35 1088:45>]
LOCAL_SYMBOL: b3Matrix3x3.h<1089:1> [b3Matrix3x3.h <1089:1 1089:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1089:1> [b3Matrix3x3.h <1138:1 1138:1>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <1133:9 1133:19>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Matrix3x3 [b3Matrix3x3.h <1133:9 1133:19>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1134:11 1134:13>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1134:3 1134:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1134:16 1134:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<1088:48> [b3Matrix3x3.h <1134:15 1134:15>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1134:30 1134:32>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1134:22 1134:25>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1134:35 1134:35>]
LOCAL_SYMBOL: b3Matrix3x3.h<1088:48> [b3Matrix3x3.h <1134:34 1134:34>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1134:49 1134:51>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1134:41 1134:44>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1134:54 1134:54>]
LOCAL_SYMBOL: b3Matrix3x3.h<1088:48> [b3Matrix3x3.h <1134:53 1134:53>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1135:11 1135:13>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1135:3 1135:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1135:16 1135:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<1088:48> [b3Matrix3x3.h <1135:15 1135:15>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1135:30 1135:32>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1135:22 1135:25>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1135:35 1135:35>]
LOCAL_SYMBOL: b3Matrix3x3.h<1088:48> [b3Matrix3x3.h <1135:34 1135:34>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1135:49 1135:51>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1135:41 1135:44>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1135:54 1135:54>]
LOCAL_SYMBOL: b3Matrix3x3.h<1088:48> [b3Matrix3x3.h <1135:53 1135:53>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1136:11 1136:13>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1136:3 1136:6>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1136:16 1136:16>]
LOCAL_SYMBOL: b3Matrix3x3.h<1088:48> [b3Matrix3x3.h <1136:15 1136:15>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1136:30 1136:32>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1136:22 1136:25>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1136:35 1136:35>]
LOCAL_SYMBOL: b3Matrix3x3.h<1088:48> [b3Matrix3x3.h <1136:34 1136:34>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1136:49 1136:51>]
REFERENCE_USAGE b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1136:41 1136:44>]
REFERENCE_CALL b3Matrix3x3 b3Matrix3x3::timesTranspose(const b3Matrix3x3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1136:54 1136:54>]
LOCAL_SYMBOL: b3Matrix3x3.h<1088:48> [b3Matrix3x3.h <1136:53 1136:53>]
SYMBOL_FUNCTION b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) [b3Matrix3x3.h <1140:1 <1141:1 1141:9> 1148:1>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) -> b3Vector3 [b3Matrix3x3.h <1140:17 1140:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<1141:30> [b3Matrix3x3.h <1141:30 1141:30>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) -> b3Matrix3x3 [b3Matrix3x3.h <1141:17 1141:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<1141:50> [b3Matrix3x3.h <1141:50 1141:50>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) -> b3Vector3 [b3Matrix3x3.h <1141:39 1141:47>]
LOCAL_SYMBOL: b3Matrix3x3.h<1142:1> [b3Matrix3x3.h <1142:1 1142:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1142:1> [b3Matrix3x3.h <1148:1 1148:1>]
REFERENCE_CALL b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Matrix3x3.h <1146:9 1146:21>]
REFERENCE_CALL b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1146:28 1146:30>]
REFERENCE_CALL b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1146:24 1146:24>]
LOCAL_SYMBOL: b3Matrix3x3.h<1141:30> [b3Matrix3x3.h <1146:23 1146:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<1141:50> [b3Matrix3x3.h <1146:32 1146:32>]
REFERENCE_CALL b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1146:41 1146:43>]
REFERENCE_CALL b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1146:37 1146:37>]
LOCAL_SYMBOL: b3Matrix3x3.h<1141:30> [b3Matrix3x3.h <1146:36 1146:36>]
LOCAL_SYMBOL: b3Matrix3x3.h<1141:50> [b3Matrix3x3.h <1146:45 1146:45>]
REFERENCE_CALL b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3Matrix3x3.h <1146:54 1146:56>]
REFERENCE_CALL b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1146:50 1146:50>]
LOCAL_SYMBOL: b3Matrix3x3.h<1141:30> [b3Matrix3x3.h <1146:49 1146:49>]
LOCAL_SYMBOL: b3Matrix3x3.h<1141:50> [b3Matrix3x3.h <1146:58 1146:58>]
SYMBOL_FUNCTION b3Vector3 operator*(const b3Vector3 &, const b3Matrix3x3 &) [b3Matrix3x3.h <1151:1 <1152:1 1152:9> 1189:1>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Matrix3x3 &) -> b3Vector3 [b3Matrix3x3.h <1151:17 1151:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<1152:28> [b3Matrix3x3.h <1152:28 1152:28>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Matrix3x3 &) -> b3Vector3 [b3Matrix3x3.h <1152:17 1152:25>]
LOCAL_SYMBOL: b3Matrix3x3.h<1152:50> [b3Matrix3x3.h <1152:50 1152:50>]
REFERENCE_TYPE_USAGE b3Vector3 operator*(const b3Vector3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <1152:37 1152:47>]
LOCAL_SYMBOL: b3Matrix3x3.h<1153:1> [b3Matrix3x3.h <1153:1 1153:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1153:1> [b3Matrix3x3.h <1189:1 1189:1>]
REFERENCE_CALL b3Vector3 operator*(const b3Vector3 &, const b3Matrix3x3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Matrix3x3.h <1187:9 1187:21>]
REFERENCE_CALL b3Vector3 operator*(const b3Vector3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const [b3Matrix3x3.h <1187:25 1187:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<1152:50> [b3Matrix3x3.h <1187:23 1187:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<1152:28> [b3Matrix3x3.h <1187:31 1187:31>]
REFERENCE_CALL b3Vector3 operator*(const b3Vector3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const [b3Matrix3x3.h <1187:37 1187:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<1152:50> [b3Matrix3x3.h <1187:35 1187:35>]
LOCAL_SYMBOL: b3Matrix3x3.h<1152:28> [b3Matrix3x3.h <1187:43 1187:43>]
REFERENCE_CALL b3Vector3 operator*(const b3Vector3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const [b3Matrix3x3.h <1187:49 1187:53>]
LOCAL_SYMBOL: b3Matrix3x3.h<1152:50> [b3Matrix3x3.h <1187:47 1187:47>]
LOCAL_SYMBOL: b3Matrix3x3.h<1152:28> [b3Matrix3x3.h <1187:55 1187:55>]
SYMBOL_FUNCTION b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) [b3Matrix3x3.h <1191:1 <1192:1 1192:9> 1274:1>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <1191:17 1191:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:30> [b3Matrix3x3.h <1192:30 1192:31>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <1192:17 1192:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:53> [b3Matrix3x3.h <1192:53 1192:54>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <1192:40 1192:50>]
LOCAL_SYMBOL: b3Matrix3x3.h<1193:1> [b3Matrix3x3.h <1193:1 1193:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1193:1> [b3Matrix3x3.h <1274:1 1274:1>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> void b3Matrix3x3::b3Matrix3x3(const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Matrix3x3.h <1269:9 1269:19>]
REFERENCE_TYPE_USAGE b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <1269:9 1269:19>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const [b3Matrix3x3.h <1270:6 1270:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:53> [b3Matrix3x3.h <1270:3 1270:4>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1270:15 1270:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:30> [b3Matrix3x3.h <1270:13 1270:14>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const [b3Matrix3x3.h <1270:24 1270:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:53> [b3Matrix3x3.h <1270:21 1270:22>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1270:33 1270:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:30> [b3Matrix3x3.h <1270:31 1270:32>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const [b3Matrix3x3.h <1270:42 1270:46>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:53> [b3Matrix3x3.h <1270:39 1270:40>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1270:51 1270:51>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:30> [b3Matrix3x3.h <1270:49 1270:50>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const [b3Matrix3x3.h <1271:6 1271:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:53> [b3Matrix3x3.h <1271:3 1271:4>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1271:15 1271:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:30> [b3Matrix3x3.h <1271:13 1271:14>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const [b3Matrix3x3.h <1271:24 1271:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:53> [b3Matrix3x3.h <1271:21 1271:22>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1271:33 1271:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:30> [b3Matrix3x3.h <1271:31 1271:32>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const [b3Matrix3x3.h <1271:42 1271:46>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:53> [b3Matrix3x3.h <1271:39 1271:40>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1271:51 1271:51>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:30> [b3Matrix3x3.h <1271:49 1271:50>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotx(const b3Vector3 &) const [b3Matrix3x3.h <1272:6 1272:10>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:53> [b3Matrix3x3.h <1272:3 1272:4>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1272:15 1272:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:30> [b3Matrix3x3.h <1272:13 1272:14>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdoty(const b3Vector3 &) const [b3Matrix3x3.h <1272:24 1272:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:53> [b3Matrix3x3.h <1272:21 1272:22>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1272:33 1272:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:30> [b3Matrix3x3.h <1272:31 1272:32>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Scalar b3Matrix3x3::tdotz(const b3Vector3 &) const [b3Matrix3x3.h <1272:42 1272:46>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:53> [b3Matrix3x3.h <1272:39 1272:40>]
REFERENCE_CALL b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1272:51 1272:51>]
LOCAL_SYMBOL: b3Matrix3x3.h<1192:30> [b3Matrix3x3.h <1272:49 1272:50>]
SYMBOL_FUNCTION bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) [b3Matrix3x3.h <1293:1 <1293:22 1293:31> 1313:1>]
REFERENCE_TYPE_USAGE bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> bool [b3Matrix3x3.h <1293:17 1293:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:52> [b3Matrix3x3.h <1293:52 1293:53>]
REFERENCE_TYPE_USAGE bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <1293:39 1293:49>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:75> [b3Matrix3x3.h <1293:75 1293:76>]
REFERENCE_TYPE_USAGE bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> b3Matrix3x3 [b3Matrix3x3.h <1293:62 1293:72>]
LOCAL_SYMBOL: b3Matrix3x3.h<1294:1> [b3Matrix3x3.h <1294:1 1294:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1294:1> [b3Matrix3x3.h <1313:1 1313:1>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1309:11 1309:11>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:52> [b3Matrix3x3.h <1309:9 1309:10>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1309:23 1309:23>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:75> [b3Matrix3x3.h <1309:21 1309:22>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1309:35 1309:35>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:52> [b3Matrix3x3.h <1309:33 1309:34>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1309:47 1309:47>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:75> [b3Matrix3x3.h <1309:45 1309:46>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1309:59 1309:59>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:52> [b3Matrix3x3.h <1309:57 1309:58>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1309:71 1309:71>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:75> [b3Matrix3x3.h <1309:69 1309:70>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1310:5 1310:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:52> [b3Matrix3x3.h <1310:3 1310:4>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1310:17 1310:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:75> [b3Matrix3x3.h <1310:15 1310:16>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1310:29 1310:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:52> [b3Matrix3x3.h <1310:27 1310:28>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1310:41 1310:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:75> [b3Matrix3x3.h <1310:39 1310:40>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1310:53 1310:53>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:52> [b3Matrix3x3.h <1310:51 1310:52>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1310:65 1310:65>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:75> [b3Matrix3x3.h <1310:63 1310:64>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1311:5 1311:5>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:52> [b3Matrix3x3.h <1311:3 1311:4>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1311:17 1311:17>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:75> [b3Matrix3x3.h <1311:15 1311:16>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1311:29 1311:29>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:52> [b3Matrix3x3.h <1311:27 1311:28>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1311:41 1311:41>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:75> [b3Matrix3x3.h <1311:39 1311:40>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1311:53 1311:53>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:52> [b3Matrix3x3.h <1311:51 1311:52>]
REFERENCE_CALL bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Matrix3x3.h <1311:65 1311:65>]
LOCAL_SYMBOL: b3Matrix3x3.h<1293:75> [b3Matrix3x3.h <1311:63 1311:64>]
SYMBOL_STRUCT b3Matrix3x3FloatData [b3Matrix3x3.h <1316:1 <1316:8 1316:27> 1319:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1317:1> [b3Matrix3x3.h <1317:1 1317:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1317:1> [b3Matrix3x3.h <1319:1 1319:1>]
SYMBOL_FIELD public b3Vector3FloatData [] b3Matrix3x3FloatData::m_el [b3Matrix3x3.h <1318:21 1318:24>]
REFERENCE_TYPE_USAGE b3Vector3FloatData [] b3Matrix3x3FloatData::m_el -> b3Vector3FloatData [b3Matrix3x3.h <1318:2 1318:19>]
SYMBOL_STRUCT b3Matrix3x3DoubleData [b3Matrix3x3.h <1322:1 <1322:8 1322:28> 1325:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1323:1> [b3Matrix3x3.h <1323:1 1323:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1323:1> [b3Matrix3x3.h <1325:1 1325:1>]
SYMBOL_FIELD public b3Vector3DoubleData [] b3Matrix3x3DoubleData::m_el [b3Matrix3x3.h <1324:22 1324:25>]
REFERENCE_TYPE_USAGE b3Vector3DoubleData [] b3Matrix3x3DoubleData::m_el -> b3Vector3DoubleData [b3Matrix3x3.h <1324:2 1324:20>]
SYMBOL_METHOD public void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const [b3Matrix3x3.h <1330:1 <1330:35 1330:43> 1334:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <1330:22 1330:32>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const -> void [b3Matrix3x3.h <1330:17 1330:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<1330:69> [b3Matrix3x3.h <1330:69 1330:75>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const -> b3Matrix3x3FloatData [b3Matrix3x3.h <1330:52 1330:66>]
LOCAL_SYMBOL: b3Matrix3x3.h<1331:1> [b3Matrix3x3.h <1331:1 1331:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1331:1> [b3Matrix3x3.h <1334:1 1334:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1332:11> [b3Matrix3x3.h <1332:11 1332:11>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const -> int [b3Matrix3x3.h <1332:7 1332:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<1332:11> [b3Matrix3x3.h <1332:15 1332:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<1332:11> [b3Matrix3x3.h <1332:19 1332:19>]
SYMBOL_FUNCTION void b3Vector3::serialize(b3Vector3FloatData &) const
REFERENCE_CALL void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const -> void b3Vector3::serialize(b3Vector3FloatData &) const [b3Matrix3x3.h <1333:11 1333:19>]
REFERENCE_USAGE void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1333:3 1333:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<1332:11> [b3Matrix3x3.h <1333:8 1333:8>]
REFERENCE_USAGE void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const -> b3Vector3FloatData [] b3Matrix3x3FloatData::m_el [b3Matrix3x3.h <1333:29 1333:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<1330:69> [b3Matrix3x3.h <1333:21 1333:27>]
LOCAL_SYMBOL: b3Matrix3x3.h<1332:11> [b3Matrix3x3.h <1333:34 1333:34>]
SYMBOL_METHOD public void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const [b3Matrix3x3.h <1336:1 <1336:35 1336:48> 1340:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <1336:22 1336:32>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const -> void [b3Matrix3x3.h <1336:17 1336:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<1336:79> [b3Matrix3x3.h <1336:79 1336:85>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const -> b3Matrix3x3FloatData [b3Matrix3x3.h <1336:57 1336:76>]
LOCAL_SYMBOL: b3Matrix3x3.h<1337:1> [b3Matrix3x3.h <1337:1 1337:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1337:1> [b3Matrix3x3.h <1340:1 1340:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1338:11> [b3Matrix3x3.h <1338:11 1338:11>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const -> int [b3Matrix3x3.h <1338:7 1338:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<1338:11> [b3Matrix3x3.h <1338:15 1338:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<1338:11> [b3Matrix3x3.h <1338:19 1338:19>]
SYMBOL_FUNCTION void b3Vector3::serializeFloat(b3Vector3FloatData &) const
REFERENCE_CALL void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const -> void b3Vector3::serializeFloat(b3Vector3FloatData &) const [b3Matrix3x3.h <1339:11 1339:24>]
REFERENCE_USAGE void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1339:3 1339:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<1338:11> [b3Matrix3x3.h <1339:8 1339:8>]
REFERENCE_USAGE void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const -> b3Vector3FloatData [] b3Matrix3x3FloatData::m_el [b3Matrix3x3.h <1339:34 1339:37>]
LOCAL_SYMBOL: b3Matrix3x3.h<1336:79> [b3Matrix3x3.h <1339:26 1339:32>]
LOCAL_SYMBOL: b3Matrix3x3.h<1338:11> [b3Matrix3x3.h <1339:39 1339:39>]
SYMBOL_METHOD public void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &) [b3Matrix3x3.h <1343:1 <1343:35 1343:45> 1347:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <1343:22 1343:32>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &) -> void [b3Matrix3x3.h <1343:17 1343:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<1343:77> [b3Matrix3x3.h <1343:77 1343:82>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &) -> b3Matrix3x3FloatData [b3Matrix3x3.h <1343:60 1343:74>]
LOCAL_SYMBOL: b3Matrix3x3.h<1344:1> [b3Matrix3x3.h <1344:1 1344:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1344:1> [b3Matrix3x3.h <1347:1 1347:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1345:11> [b3Matrix3x3.h <1345:11 1345:11>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &) -> int [b3Matrix3x3.h <1345:7 1345:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<1345:11> [b3Matrix3x3.h <1345:15 1345:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<1345:11> [b3Matrix3x3.h <1345:19 1345:19>]
SYMBOL_FUNCTION void b3Vector3::deSerialize(const b3Vector3FloatData &)
REFERENCE_CALL void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &) -> void b3Vector3::deSerialize(const b3Vector3FloatData &) [b3Matrix3x3.h <1346:11 1346:21>]
REFERENCE_USAGE void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1346:3 1346:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<1345:11> [b3Matrix3x3.h <1346:8 1346:8>]
REFERENCE_USAGE void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &) -> b3Vector3FloatData [] b3Matrix3x3FloatData::m_el [b3Matrix3x3.h <1346:30 1346:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<1343:77> [b3Matrix3x3.h <1346:23 1346:28>]
LOCAL_SYMBOL: b3Matrix3x3.h<1345:11> [b3Matrix3x3.h <1346:35 1346:35>]
SYMBOL_METHOD public void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &) [b3Matrix3x3.h <1349:1 <1349:35 1349:50> 1353:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <1349:22 1349:32>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &) -> void [b3Matrix3x3.h <1349:17 1349:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<1349:87> [b3Matrix3x3.h <1349:87 1349:92>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &) -> b3Matrix3x3FloatData [b3Matrix3x3.h <1349:65 1349:84>]
LOCAL_SYMBOL: b3Matrix3x3.h<1350:1> [b3Matrix3x3.h <1350:1 1350:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1350:1> [b3Matrix3x3.h <1353:1 1353:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1351:11> [b3Matrix3x3.h <1351:11 1351:11>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &) -> int [b3Matrix3x3.h <1351:7 1351:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<1351:11> [b3Matrix3x3.h <1351:15 1351:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<1351:11> [b3Matrix3x3.h <1351:19 1351:19>]
SYMBOL_FUNCTION void b3Vector3::deSerializeFloat(const b3Vector3FloatData &)
REFERENCE_CALL void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &) -> void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) [b3Matrix3x3.h <1352:11 1352:26>]
REFERENCE_USAGE void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1352:3 1352:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<1351:11> [b3Matrix3x3.h <1352:8 1352:8>]
REFERENCE_USAGE void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &) -> b3Vector3FloatData [] b3Matrix3x3FloatData::m_el [b3Matrix3x3.h <1352:35 1352:38>]
LOCAL_SYMBOL: b3Matrix3x3.h<1349:87> [b3Matrix3x3.h <1352:28 1352:33>]
LOCAL_SYMBOL: b3Matrix3x3.h<1351:11> [b3Matrix3x3.h <1352:40 1352:40>]
SYMBOL_METHOD public void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &) [b3Matrix3x3.h <1355:1 <1355:35 1355:51> 1359:1>]
QUALIFIER: b3Matrix3x3 [b3Matrix3x3.h <1355:22 1355:32>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &) -> void [b3Matrix3x3.h <1355:17 1355:20>]
LOCAL_SYMBOL: b3Matrix3x3.h<1355:89> [b3Matrix3x3.h <1355:89 1355:94>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &) -> b3Matrix3x3DoubleData [b3Matrix3x3.h <1355:66 1355:86>]
LOCAL_SYMBOL: b3Matrix3x3.h<1356:1> [b3Matrix3x3.h <1356:1 1356:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1356:1> [b3Matrix3x3.h <1359:1 1359:1>]
LOCAL_SYMBOL: b3Matrix3x3.h<1357:11> [b3Matrix3x3.h <1357:11 1357:11>]
REFERENCE_TYPE_USAGE void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &) -> int [b3Matrix3x3.h <1357:7 1357:9>]
LOCAL_SYMBOL: b3Matrix3x3.h<1357:11> [b3Matrix3x3.h <1357:15 1357:15>]
LOCAL_SYMBOL: b3Matrix3x3.h<1357:11> [b3Matrix3x3.h <1357:19 1357:19>]
SYMBOL_FUNCTION void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &)
REFERENCE_CALL void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &) -> void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) [b3Matrix3x3.h <1358:11 1358:27>]
REFERENCE_USAGE void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &) -> b3Vector3 [] b3Matrix3x3::m_el [b3Matrix3x3.h <1358:3 1358:6>]
LOCAL_SYMBOL: b3Matrix3x3.h<1357:11> [b3Matrix3x3.h <1358:8 1358:8>]
REFERENCE_USAGE void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &) -> b3Vector3DoubleData [] b3Matrix3x3DoubleData::m_el [b3Matrix3x3.h <1358:36 1358:39>]
LOCAL_SYMBOL: b3Matrix3x3.h<1355:89> [b3Matrix3x3.h <1358:29 1358:34>]
LOCAL_SYMBOL: b3Matrix3x3.h<1357:11> [b3Matrix3x3.h <1358:41 1358:41>]
SYMBOL_CLASS b3Transform [b3Transform.h <33:1 <33:31 33:41> 218:1>]
LOCAL_SYMBOL: b3Transform.h<33:43> [b3Transform.h <33:43 33:43>]
LOCAL_SYMBOL: b3Transform.h<33:43> [b3Transform.h <218:1 218:1>]
SYMBOL_FIELD private b3Matrix3x3 b3Transform::m_basis [b3Transform.h <36:14 36:20>]
REFERENCE_TYPE_USAGE b3Matrix3x3 b3Transform::m_basis -> b3Matrix3x3 [b3Transform.h <36:2 36:12>]
SYMBOL_FIELD private b3Vector3 b3Transform::m_origin [b3Transform.h <38:14 38:21>]
REFERENCE_TYPE_USAGE b3Vector3 b3Transform::m_origin -> b3Vector3 [b3Transform.h <38:2 38:10>]
SYMBOL_METHOD public void b3Transform::b3Transform() [b3Transform.h <43:2 <43:2 43:12> 43:17>]
REFERENCE_USAGE void b3Transform::b3Transform() -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <43:2 43:12>]
SYMBOL_FUNCTION void b3Matrix3x3::b3Matrix3x3()
REFERENCE_CALL void b3Transform::b3Transform() -> void b3Matrix3x3::b3Matrix3x3() [b3Transform.h <43:2 43:12>]
REFERENCE_USAGE void b3Transform::b3Transform() -> b3Vector3 b3Transform::m_origin [b3Transform.h <43:2 43:12>]
REFERENCE_CALL void b3Transform::b3Transform() -> void b3Vector3::b3Vector3() [b3Transform.h <43:2 43:12>]
LOCAL_SYMBOL: b3Transform.h<43:16> [b3Transform.h <43:16 43:16>]
LOCAL_SYMBOL: b3Transform.h<43:16> [b3Transform.h <43:17 43:17>]
SYMBOL_METHOD public void b3Transform::b3Transform(const b3Quaternion &, const b3Vector3 &) [b3Transform.h <47:2 <47:27 47:37> 51:3>]
LOCAL_SYMBOL: b3Transform.h<47:59> [b3Transform.h <47:59 47:59>]
REFERENCE_TYPE_USAGE void b3Transform::b3Transform(const b3Quaternion &, const b3Vector3 &) -> b3Quaternion [b3Transform.h <47:45 47:56>]
LOCAL_SYMBOL: b3Transform.h<48:20> [b3Transform.h <48:20 48:20>]
REFERENCE_TYPE_USAGE void b3Transform::b3Transform(const b3Quaternion &, const b3Vector3 &) -> b3Vector3 [b3Transform.h <48:9 48:17>]
REFERENCE_CALL void b3Transform::b3Transform(const b3Quaternion &, const b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Transform.h <48:24 48:36>]
REFERENCE_TYPE_USAGE void b3Transform::b3Transform(const b3Quaternion &, const b3Vector3 &) -> b3Scalar [b3Transform.h <48:38 48:45>]
REFERENCE_TYPE_USAGE void b3Transform::b3Transform(const b3Quaternion &, const b3Vector3 &) -> b3Scalar [b3Transform.h <48:51 48:58>]
REFERENCE_TYPE_USAGE void b3Transform::b3Transform(const b3Quaternion &, const b3Vector3 &) -> b3Scalar [b3Transform.h <48:64 48:71>]
REFERENCE_USAGE void b3Transform::b3Transform(const b3Quaternion &, const b3Vector3 &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <49:5 49:11>]
SYMBOL_FUNCTION void b3Matrix3x3::b3Matrix3x3(const b3Quaternion &)
REFERENCE_CALL void b3Transform::b3Transform(const b3Quaternion &, const b3Vector3 &) -> void b3Matrix3x3::b3Matrix3x3(const b3Quaternion &) [b3Transform.h <49:5 49:11>]
LOCAL_SYMBOL: b3Transform.h<47:59> [b3Transform.h <49:13 49:13>]
REFERENCE_USAGE void b3Transform::b3Transform(const b3Quaternion &, const b3Vector3 &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <50:3 50:10>]
SYMBOL_FUNCTION void b3Vector3::b3Vector3(const b3Vector3 &)
REFERENCE_CALL void b3Transform::b3Transform(const b3Quaternion &, const b3Vector3 &) -> void b3Vector3::b3Vector3(const b3Vector3 &) [b3Transform.h <50:3 50:10>]
LOCAL_SYMBOL: b3Transform.h<48:20> [b3Transform.h <50:12 50:12>]
LOCAL_SYMBOL: b3Transform.h<51:2> [b3Transform.h <51:2 51:2>]
LOCAL_SYMBOL: b3Transform.h<51:2> [b3Transform.h <51:3 51:3>]
SYMBOL_METHOD public void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) [b3Transform.h <56:2 <56:27 56:37> 60:3>]
LOCAL_SYMBOL: b3Transform.h<56:58> [b3Transform.h <56:58 56:58>]
REFERENCE_TYPE_USAGE void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) -> b3Matrix3x3 [b3Transform.h <56:45 56:55>]
LOCAL_SYMBOL: b3Transform.h<57:20> [b3Transform.h <57:20 57:20>]
REFERENCE_TYPE_USAGE void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) -> b3Vector3 [b3Transform.h <57:9 57:17>]
REFERENCE_CALL void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Transform.h <57:24 57:36>]
REFERENCE_TYPE_USAGE void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) -> b3Scalar [b3Transform.h <57:38 57:45>]
REFERENCE_TYPE_USAGE void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) -> b3Scalar [b3Transform.h <57:51 57:58>]
REFERENCE_TYPE_USAGE void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) -> b3Scalar [b3Transform.h <57:64 57:71>]
REFERENCE_USAGE void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <58:5 58:11>]
SYMBOL_FUNCTION void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &)
REFERENCE_CALL void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) -> void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) [b3Transform.h <58:5 58:11>]
LOCAL_SYMBOL: b3Transform.h<56:58> [b3Transform.h <58:13 58:13>]
REFERENCE_USAGE void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <59:3 59:10>]
REFERENCE_CALL void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) -> void b3Vector3::b3Vector3(const b3Vector3 &) [b3Transform.h <59:3 59:10>]
LOCAL_SYMBOL: b3Transform.h<57:20> [b3Transform.h <59:12 59:12>]
LOCAL_SYMBOL: b3Transform.h<60:2> [b3Transform.h <60:2 60:2>]
LOCAL_SYMBOL: b3Transform.h<60:2> [b3Transform.h <60:3 60:3>]
SYMBOL_METHOD public void b3Transform::b3Transform(const b3Transform &) [b3Transform.h <62:2 <62:18 62:28> 66:2>]
LOCAL_SYMBOL: b3Transform.h<62:50> [b3Transform.h <62:50 62:54>]
REFERENCE_TYPE_USAGE void b3Transform::b3Transform(const b3Transform &) -> b3Transform [b3Transform.h <62:37 62:47>]
REFERENCE_USAGE void b3Transform::b3Transform(const b3Transform &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <63:5 63:11>]
REFERENCE_CALL void b3Transform::b3Transform(const b3Transform &) -> void b3Matrix3x3::b3Matrix3x3(const b3Matrix3x3 &) [b3Transform.h <63:5 63:11>]
REFERENCE_USAGE void b3Transform::b3Transform(const b3Transform &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <63:19 63:25>]
LOCAL_SYMBOL: b3Transform.h<62:50> [b3Transform.h <63:13 63:17>]
REFERENCE_USAGE void b3Transform::b3Transform(const b3Transform &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <64:3 64:10>]
REFERENCE_CALL void b3Transform::b3Transform(const b3Transform &) -> void b3Vector3::b3Vector3(const b3Vector3 &) [b3Transform.h <64:3 64:10>]
REFERENCE_USAGE void b3Transform::b3Transform(const b3Transform &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <64:18 64:25>]
LOCAL_SYMBOL: b3Transform.h<62:50> [b3Transform.h <64:12 64:16>]
LOCAL_SYMBOL: b3Transform.h<65:2> [b3Transform.h <65:2 65:2>]
LOCAL_SYMBOL: b3Transform.h<65:2> [b3Transform.h <66:2 66:2>]
SYMBOL_METHOD public b3Transform & b3Transform::operator=(const b3Transform &) [b3Transform.h <68:2 <68:31 68:39> 73:2>]
REFERENCE_TYPE_USAGE b3Transform & b3Transform::operator=(const b3Transform &) -> b3Transform [b3Transform.h <68:18 68:28>]
LOCAL_SYMBOL: b3Transform.h<68:60> [b3Transform.h <68:60 68:64>]
REFERENCE_TYPE_USAGE b3Transform & b3Transform::operator=(const b3Transform &) -> b3Transform [b3Transform.h <68:47 68:57>]
LOCAL_SYMBOL: b3Transform.h<69:2> [b3Transform.h <69:2 69:2>]
LOCAL_SYMBOL: b3Transform.h<69:2> [b3Transform.h <73:2 73:2>]
SYMBOL_FUNCTION b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &)
REFERENCE_CALL b3Transform & b3Transform::operator=(const b3Transform &) -> b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) [b3Transform.h <70:11 70:11>]
REFERENCE_USAGE b3Transform & b3Transform::operator=(const b3Transform &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <70:3 70:9>]
REFERENCE_USAGE b3Transform & b3Transform::operator=(const b3Transform &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <70:19 70:25>]
LOCAL_SYMBOL: b3Transform.h<68:60> [b3Transform.h <70:13 70:17>]
REFERENCE_CALL b3Transform & b3Transform::operator=(const b3Transform &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3Transform.h <71:12 71:12>]
REFERENCE_USAGE b3Transform & b3Transform::operator=(const b3Transform &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <71:3 71:10>]
REFERENCE_USAGE b3Transform & b3Transform::operator=(const b3Transform &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <71:20 71:27>]
LOCAL_SYMBOL: b3Transform.h<68:60> [b3Transform.h <71:14 71:18>]
SYMBOL_METHOD public void b3Transform::mult(const b3Transform &, const b3Transform &) [b3Transform.h <80:3 <80:24 80:27> 83:3>]
REFERENCE_TYPE_USAGE void b3Transform::mult(const b3Transform &, const b3Transform &) -> void [b3Transform.h <80:19 80:22>]
LOCAL_SYMBOL: b3Transform.h<80:48> [b3Transform.h <80:48 80:49>]
REFERENCE_TYPE_USAGE void b3Transform::mult(const b3Transform &, const b3Transform &) -> b3Transform [b3Transform.h <80:35 80:45>]
LOCAL_SYMBOL: b3Transform.h<80:71> [b3Transform.h <80:71 80:72>]
REFERENCE_TYPE_USAGE void b3Transform::mult(const b3Transform &, const b3Transform &) -> b3Transform [b3Transform.h <80:58 80:68>]
LOCAL_SYMBOL: b3Transform.h<80:75> [b3Transform.h <80:75 80:75>]
LOCAL_SYMBOL: b3Transform.h<80:75> [b3Transform.h <83:3 83:3>]
REFERENCE_CALL void b3Transform::mult(const b3Transform &, const b3Transform &) -> b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) [b3Transform.h <81:12 81:12>]
REFERENCE_USAGE void b3Transform::mult(const b3Transform &, const b3Transform &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <81:4 81:10>]
SYMBOL_FUNCTION b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &)
REFERENCE_CALL void b3Transform::mult(const b3Transform &, const b3Transform &) -> b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) [b3Transform.h <81:25 81:25>]
REFERENCE_USAGE void b3Transform::mult(const b3Transform &, const b3Transform &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <81:17 81:23>]
LOCAL_SYMBOL: b3Transform.h<80:48> [b3Transform.h <81:14 81:15>]
REFERENCE_USAGE void b3Transform::mult(const b3Transform &, const b3Transform &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <81:30 81:36>]
LOCAL_SYMBOL: b3Transform.h<80:71> [b3Transform.h <81:27 81:28>]
REFERENCE_CALL void b3Transform::mult(const b3Transform &, const b3Transform &) -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3Transform.h <82:13 82:13>]
REFERENCE_USAGE void b3Transform::mult(const b3Transform &, const b3Transform &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <82:4 82:11>]
SYMBOL_FUNCTION b3Vector3 b3Transform::operator()(const b3Vector3 &) const
REFERENCE_CALL void b3Transform::mult(const b3Transform &, const b3Transform &) -> b3Vector3 b3Transform::operator()(const b3Vector3 &) const [b3Transform.h <82:17 82:17>]
LOCAL_SYMBOL: b3Transform.h<80:48> [b3Transform.h <82:15 82:16>]
REFERENCE_USAGE void b3Transform::mult(const b3Transform &, const b3Transform &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <82:21 82:28>]
LOCAL_SYMBOL: b3Transform.h<80:71> [b3Transform.h <82:18 82:19>]
SYMBOL_METHOD public b3Vector3 b3Transform::operator()(const b3Vector3 &) const [b3Transform.h <93:2 <93:28 93:37> 96:2>]
REFERENCE_TYPE_USAGE b3Vector3 b3Transform::operator()(const b3Vector3 &) const -> b3Vector3 [b3Transform.h <93:18 93:26>]
LOCAL_SYMBOL: b3Transform.h<93:56> [b3Transform.h <93:56 93:56>]
REFERENCE_TYPE_USAGE b3Vector3 b3Transform::operator()(const b3Vector3 &) const -> b3Vector3 [b3Transform.h <93:45 93:53>]
LOCAL_SYMBOL: b3Transform.h<94:2> [b3Transform.h <94:2 94:2>]
LOCAL_SYMBOL: b3Transform.h<94:2> [b3Transform.h <96:2 96:2>]
REFERENCE_CALL b3Vector3 b3Transform::operator()(const b3Vector3 &) const -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3Transform.h <95:59 95:59>]
SYMBOL_FUNCTION b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const
REFERENCE_CALL b3Vector3 b3Transform::operator()(const b3Vector3 &) const -> b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const [b3Transform.h <95:18 95:21>]
LOCAL_SYMBOL: b3Transform.h<93:56> [b3Transform.h <95:16 95:16>]
REFERENCE_CALL b3Vector3 b3Transform::operator()(const b3Vector3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Transform.h <95:30 95:30>]
REFERENCE_USAGE b3Vector3 b3Transform::operator()(const b3Vector3 &) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <95:23 95:29>]
REFERENCE_CALL b3Vector3 b3Transform::operator()(const b3Vector3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Transform.h <95:42 95:42>]
REFERENCE_USAGE b3Vector3 b3Transform::operator()(const b3Vector3 &) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <95:35 95:41>]
REFERENCE_CALL b3Vector3 b3Transform::operator()(const b3Vector3 &) const -> const b3Vector3 & b3Matrix3x3::operator[](int) const [b3Transform.h <95:54 95:54>]
REFERENCE_USAGE b3Vector3 b3Transform::operator()(const b3Vector3 &) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <95:47 95:53>]
REFERENCE_USAGE b3Vector3 b3Transform::operator()(const b3Vector3 &) const -> b3Vector3 b3Transform::m_origin [b3Transform.h <95:61 95:68>]
SYMBOL_METHOD public b3Vector3 b3Transform::operator*(const b3Vector3 &) const [b3Transform.h <99:2 <99:28 99:36> 102:2>]
REFERENCE_TYPE_USAGE b3Vector3 b3Transform::operator*(const b3Vector3 &) const -> b3Vector3 [b3Transform.h <99:18 99:26>]
LOCAL_SYMBOL: b3Transform.h<99:55> [b3Transform.h <99:55 99:55>]
REFERENCE_TYPE_USAGE b3Vector3 b3Transform::operator*(const b3Vector3 &) const -> b3Vector3 [b3Transform.h <99:44 99:52>]
LOCAL_SYMBOL: b3Transform.h<100:2> [b3Transform.h <100:2 100:2>]
LOCAL_SYMBOL: b3Transform.h<100:2> [b3Transform.h <102:2 102:2>]
REFERENCE_CALL b3Vector3 b3Transform::operator*(const b3Vector3 &) const -> b3Vector3 b3Transform::operator()(const b3Vector3 &) const [b3Transform.h <101:17 101:17>]
LOCAL_SYMBOL: b3Transform.h<99:55> [b3Transform.h <101:18 101:18>]
SYMBOL_METHOD public b3Quaternion b3Transform::operator*(const b3Quaternion &) const [b3Transform.h <105:2 <105:31 105:39> 108:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Transform::operator*(const b3Quaternion &) const -> b3Quaternion [b3Transform.h <105:18 105:29>]
LOCAL_SYMBOL: b3Transform.h<105:61> [b3Transform.h <105:61 105:61>]
REFERENCE_TYPE_USAGE b3Quaternion b3Transform::operator*(const b3Quaternion &) const -> b3Quaternion [b3Transform.h <105:47 105:58>]
LOCAL_SYMBOL: b3Transform.h<106:2> [b3Transform.h <106:2 106:2>]
LOCAL_SYMBOL: b3Transform.h<106:2> [b3Transform.h <108:2 108:2>]
REFERENCE_CALL b3Quaternion b3Transform::operator*(const b3Quaternion &) const -> b3Quaternion operator*(const b3Quaternion &, const b3Quaternion &) [b3Transform.h <107:24 107:24>]
SYMBOL_FUNCTION b3Quaternion b3Transform::getRotation() const
REFERENCE_CALL b3Quaternion b3Transform::operator*(const b3Quaternion &) const -> b3Quaternion b3Transform::getRotation() const [b3Transform.h <107:10 107:20>]
LOCAL_SYMBOL: b3Transform.h<105:61> [b3Transform.h <107:26 107:26>]
SYMBOL_METHOD public b3Matrix3x3 & b3Transform::getBasis() [b3Transform.h <111:2 <111:37 111:44> 111:75>]
REFERENCE_TYPE_USAGE b3Matrix3x3 & b3Transform::getBasis() -> b3Matrix3x3 [b3Transform.h <111:18 111:28>]
LOCAL_SYMBOL: b3Transform.h<111:57> [b3Transform.h <111:57 111:57>]
LOCAL_SYMBOL: b3Transform.h<111:57> [b3Transform.h <111:75 111:75>]
REFERENCE_USAGE b3Matrix3x3 & b3Transform::getBasis() -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <111:66 111:72>]
SYMBOL_METHOD public const b3Matrix3x3 & b3Transform::getBasis() const [b3Transform.h <113:2 <113:37 113:44> 113:75>]
REFERENCE_TYPE_USAGE const b3Matrix3x3 & b3Transform::getBasis() const -> b3Matrix3x3 [b3Transform.h <113:24 113:34>]
LOCAL_SYMBOL: b3Transform.h<113:57> [b3Transform.h <113:57 113:57>]
LOCAL_SYMBOL: b3Transform.h<113:57> [b3Transform.h <113:75 113:75>]
REFERENCE_USAGE const b3Matrix3x3 & b3Transform::getBasis() const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <113:66 113:72>]
SYMBOL_METHOD public b3Vector3 & b3Transform::getOrigin() [b3Transform.h <116:2 <116:37 116:45> 116:76>]
REFERENCE_TYPE_USAGE b3Vector3 & b3Transform::getOrigin() -> b3Vector3 [b3Transform.h <116:18 116:26>]
LOCAL_SYMBOL: b3Transform.h<116:57> [b3Transform.h <116:57 116:57>]
LOCAL_SYMBOL: b3Transform.h<116:57> [b3Transform.h <116:76 116:76>]
REFERENCE_USAGE b3Vector3 & b3Transform::getOrigin() -> b3Vector3 b3Transform::m_origin [b3Transform.h <116:66 116:73>]
SYMBOL_METHOD public const b3Vector3 & b3Transform::getOrigin() const [b3Transform.h <118:2 <118:37 118:45> 118:76>]
REFERENCE_TYPE_USAGE const b3Vector3 & b3Transform::getOrigin() const -> b3Vector3 [b3Transform.h <118:24 118:32>]
LOCAL_SYMBOL: b3Transform.h<118:57> [b3Transform.h <118:57 118:57>]
LOCAL_SYMBOL: b3Transform.h<118:57> [b3Transform.h <118:76 118:76>]
REFERENCE_USAGE const b3Vector3 & b3Transform::getOrigin() const -> b3Vector3 b3Transform::m_origin [b3Transform.h <118:66 118:73>]
SYMBOL_METHOD public b3Quaternion b3Transform::getRotation() const [b3Transform.h <121:2 <121:15 121:25> 125:2>]
REFERENCE_TYPE_USAGE b3Quaternion b3Transform::getRotation() const -> b3Quaternion [b3Transform.h <121:2 121:13>]
LOCAL_SYMBOL: b3Transform.h<121:35> [b3Transform.h <121:35 121:35>]
LOCAL_SYMBOL: b3Transform.h<121:35> [b3Transform.h <125:2 125:2>]
LOCAL_SYMBOL: b3Transform.h<122:16> [b3Transform.h <122:16 122:16>]
REFERENCE_TYPE_USAGE b3Quaternion b3Transform::getRotation() const -> b3Quaternion [b3Transform.h <122:3 122:14>]
REFERENCE_CALL b3Quaternion b3Transform::getRotation() const -> void b3Quaternion::b3Quaternion() [b3Transform.h <122:16 122:16>]
SYMBOL_FUNCTION void b3Matrix3x3::getRotation(b3Quaternion &) const
REFERENCE_CALL b3Quaternion b3Transform::getRotation() const -> void b3Matrix3x3::getRotation(b3Quaternion &) const [b3Transform.h <123:11 123:21>]
REFERENCE_USAGE b3Quaternion b3Transform::getRotation() const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <123:3 123:9>]
LOCAL_SYMBOL: b3Transform.h<122:16> [b3Transform.h <123:23 123:23>]
SYMBOL_FUNCTION void b3Quaternion::b3Quaternion(b3Quaternion &&)
REFERENCE_CALL b3Quaternion b3Transform::getRotation() const -> void b3Quaternion::b3Quaternion(b3Quaternion &&) [b3Transform.h <124:10 124:10>]
LOCAL_SYMBOL: b3Transform.h<122:16> [b3Transform.h <124:10 124:10>]
SYMBOL_METHOD public void b3Transform::setFromOpenGLMatrix(const b3Scalar *) [b3Transform.h <130:2 <130:7 130:25> 134:2>]
REFERENCE_TYPE_USAGE void b3Transform::setFromOpenGLMatrix(const b3Scalar *) -> void [b3Transform.h <130:2 130:5>]
LOCAL_SYMBOL: b3Transform.h<130:43> [b3Transform.h <130:43 130:43>]
REFERENCE_TYPE_USAGE void b3Transform::setFromOpenGLMatrix(const b3Scalar *) -> b3Scalar [b3Transform.h <130:33 130:40>]
LOCAL_SYMBOL: b3Transform.h<131:2> [b3Transform.h <131:2 131:2>]
LOCAL_SYMBOL: b3Transform.h<131:2> [b3Transform.h <134:2 134:2>]
SYMBOL_FUNCTION void b3Matrix3x3::setFromOpenGLSubMatrix(const b3Scalar *)
REFERENCE_CALL void b3Transform::setFromOpenGLMatrix(const b3Scalar *) -> void b3Matrix3x3::setFromOpenGLSubMatrix(const b3Scalar *) [b3Transform.h <132:11 132:32>]
REFERENCE_USAGE void b3Transform::setFromOpenGLMatrix(const b3Scalar *) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <132:3 132:9>]
LOCAL_SYMBOL: b3Transform.h<130:43> [b3Transform.h <132:34 132:34>]
REFERENCE_CALL void b3Transform::setFromOpenGLMatrix(const b3Scalar *) -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Transform.h <133:12 133:19>]
REFERENCE_USAGE void b3Transform::setFromOpenGLMatrix(const b3Scalar *) -> b3Vector3 b3Transform::m_origin [b3Transform.h <133:3 133:10>]
LOCAL_SYMBOL: b3Transform.h<130:43> [b3Transform.h <133:21 133:21>]
LOCAL_SYMBOL: b3Transform.h<130:43> [b3Transform.h <133:27 133:27>]
LOCAL_SYMBOL: b3Transform.h<130:43> [b3Transform.h <133:33 133:33>]
SYMBOL_METHOD public void b3Transform::getOpenGLMatrix(b3Scalar *) const [b3Transform.h <138:2 <138:7 138:21> 145:2>]
REFERENCE_TYPE_USAGE void b3Transform::getOpenGLMatrix(b3Scalar *) const -> void [b3Transform.h <138:2 138:5>]
LOCAL_SYMBOL: b3Transform.h<138:33> [b3Transform.h <138:33 138:33>]
REFERENCE_TYPE_USAGE void b3Transform::getOpenGLMatrix(b3Scalar *) const -> b3Scalar [b3Transform.h <138:23 138:30>]
LOCAL_SYMBOL: b3Transform.h<139:2> [b3Transform.h <139:2 139:2>]
LOCAL_SYMBOL: b3Transform.h<139:2> [b3Transform.h <145:2 145:2>]
SYMBOL_FUNCTION void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const
REFERENCE_CALL void b3Transform::getOpenGLMatrix(b3Scalar *) const -> void b3Matrix3x3::getOpenGLSubMatrix(b3Scalar *) const [b3Transform.h <140:11 140:28>]
REFERENCE_USAGE void b3Transform::getOpenGLMatrix(b3Scalar *) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <140:3 140:9>]
LOCAL_SYMBOL: b3Transform.h<138:33> [b3Transform.h <140:30 140:30>]
LOCAL_SYMBOL: b3Transform.h<138:33> [b3Transform.h <141:3 141:3>]
REFERENCE_CALL void b3Transform::getOpenGLMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getX() const [b3Transform.h <141:20 141:23>]
REFERENCE_USAGE void b3Transform::getOpenGLMatrix(b3Scalar *) const -> b3Vector3 b3Transform::m_origin [b3Transform.h <141:11 141:18>]
LOCAL_SYMBOL: b3Transform.h<138:33> [b3Transform.h <142:3 142:3>]
REFERENCE_CALL void b3Transform::getOpenGLMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getY() const [b3Transform.h <142:20 142:23>]
REFERENCE_USAGE void b3Transform::getOpenGLMatrix(b3Scalar *) const -> b3Vector3 b3Transform::m_origin [b3Transform.h <142:11 142:18>]
LOCAL_SYMBOL: b3Transform.h<138:33> [b3Transform.h <143:3 143:3>]
REFERENCE_CALL void b3Transform::getOpenGLMatrix(b3Scalar *) const -> const b3Scalar & b3Vector3::getZ() const [b3Transform.h <143:20 143:23>]
REFERENCE_USAGE void b3Transform::getOpenGLMatrix(b3Scalar *) const -> b3Vector3 b3Transform::m_origin [b3Transform.h <143:11 143:18>]
LOCAL_SYMBOL: b3Transform.h<138:33> [b3Transform.h <144:3 144:3>]
REFERENCE_TYPE_USAGE void b3Transform::getOpenGLMatrix(b3Scalar *) const -> b3Scalar [b3Transform.h <144:11 144:18>]
SYMBOL_METHOD public void b3Transform::setOrigin(const b3Vector3 &) [b3Transform.h <149:2 <149:23 149:31> 152:2>]
REFERENCE_TYPE_USAGE void b3Transform::setOrigin(const b3Vector3 &) -> void [b3Transform.h <149:18 149:21>]
LOCAL_SYMBOL: b3Transform.h<149:50> [b3Transform.h <149:50 149:55>]
REFERENCE_TYPE_USAGE void b3Transform::setOrigin(const b3Vector3 &) -> b3Vector3 [b3Transform.h <149:39 149:47>]
LOCAL_SYMBOL: b3Transform.h<150:2> [b3Transform.h <150:2 150:2>]
LOCAL_SYMBOL: b3Transform.h<150:2> [b3Transform.h <152:2 152:2>]
REFERENCE_CALL void b3Transform::setOrigin(const b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3Transform.h <151:12 151:12>]
REFERENCE_USAGE void b3Transform::setOrigin(const b3Vector3 &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <151:3 151:10>]
LOCAL_SYMBOL: b3Transform.h<149:50> [b3Transform.h <151:14 151:19>]
SYMBOL_METHOD public b3Vector3 b3Transform::invXform(const b3Vector3 &) const [b3Transform.h <154:28 154:35>]
REFERENCE_TYPE_USAGE b3Vector3 b3Transform::invXform(const b3Vector3 &) const -> b3Vector3 [b3Transform.h <154:18 154:26>]
LOCAL_SYMBOL: b3Transform.h<154:54> [b3Transform.h <154:54 154:58>]
REFERENCE_TYPE_USAGE b3Vector3 b3Transform::invXform(const b3Vector3 &) const -> b3Vector3 [b3Transform.h <154:43 154:51>]
SYMBOL_METHOD public void b3Transform::setBasis(const b3Matrix3x3 &) [b3Transform.h <158:2 <158:23 158:30> 161:2>]
REFERENCE_TYPE_USAGE void b3Transform::setBasis(const b3Matrix3x3 &) -> void [b3Transform.h <158:18 158:21>]
LOCAL_SYMBOL: b3Transform.h<158:51> [b3Transform.h <158:51 158:55>]
REFERENCE_TYPE_USAGE void b3Transform::setBasis(const b3Matrix3x3 &) -> b3Matrix3x3 [b3Transform.h <158:38 158:48>]
LOCAL_SYMBOL: b3Transform.h<159:2> [b3Transform.h <159:2 159:2>]
LOCAL_SYMBOL: b3Transform.h<159:2> [b3Transform.h <161:2 161:2>]
REFERENCE_CALL void b3Transform::setBasis(const b3Matrix3x3 &) -> b3Matrix3x3 & b3Matrix3x3::operator=(const b3Matrix3x3 &) [b3Transform.h <160:11 160:11>]
REFERENCE_USAGE void b3Transform::setBasis(const b3Matrix3x3 &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <160:3 160:9>]
LOCAL_SYMBOL: b3Transform.h<158:51> [b3Transform.h <160:13 160:17>]
SYMBOL_METHOD public void b3Transform::setRotation(const b3Quaternion &) [b3Transform.h <164:2 <164:23 164:33> 167:2>]
REFERENCE_TYPE_USAGE void b3Transform::setRotation(const b3Quaternion &) -> void [b3Transform.h <164:18 164:21>]
LOCAL_SYMBOL: b3Transform.h<164:55> [b3Transform.h <164:55 164:55>]
REFERENCE_TYPE_USAGE void b3Transform::setRotation(const b3Quaternion &) -> b3Quaternion [b3Transform.h <164:41 164:52>]
LOCAL_SYMBOL: b3Transform.h<165:2> [b3Transform.h <165:2 165:2>]
LOCAL_SYMBOL: b3Transform.h<165:2> [b3Transform.h <167:2 167:2>]
REFERENCE_CALL void b3Transform::setRotation(const b3Quaternion &) -> void b3Matrix3x3::setRotation(const b3Quaternion &) [b3Transform.h <166:11 166:21>]
REFERENCE_USAGE void b3Transform::setRotation(const b3Quaternion &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <166:3 166:9>]
LOCAL_SYMBOL: b3Transform.h<164:55> [b3Transform.h <166:23 166:23>]
SYMBOL_METHOD public void b3Transform::setIdentity() [b3Transform.h <171:2 <171:7 171:17> 175:2>]
REFERENCE_TYPE_USAGE void b3Transform::setIdentity() -> void [b3Transform.h <171:2 171:5>]
LOCAL_SYMBOL: b3Transform.h<172:2> [b3Transform.h <172:2 172:2>]
LOCAL_SYMBOL: b3Transform.h<172:2> [b3Transform.h <175:2 175:2>]
REFERENCE_CALL void b3Transform::setIdentity() -> void b3Matrix3x3::setIdentity() [b3Transform.h <173:11 173:21>]
REFERENCE_USAGE void b3Transform::setIdentity() -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <173:3 173:9>]
REFERENCE_CALL void b3Transform::setIdentity() -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3Transform.h <174:12 174:19>]
REFERENCE_USAGE void b3Transform::setIdentity() -> b3Vector3 b3Transform::m_origin [b3Transform.h <174:3 174:10>]
REFERENCE_TYPE_USAGE void b3Transform::setIdentity() -> b3Scalar [b3Transform.h <174:21 174:28>]
REFERENCE_TYPE_USAGE void b3Transform::setIdentity() -> b3Scalar [b3Transform.h <174:36 174:43>]
REFERENCE_TYPE_USAGE void b3Transform::setIdentity() -> b3Scalar [b3Transform.h <174:51 174:58>]
SYMBOL_METHOD public b3Transform & b3Transform::operator*=(const b3Transform &) [b3Transform.h <179:2 <179:15 179:24> 184:2>]
REFERENCE_TYPE_USAGE b3Transform & b3Transform::operator*=(const b3Transform &) -> b3Transform [b3Transform.h <179:2 179:12>]
LOCAL_SYMBOL: b3Transform.h<179:45> [b3Transform.h <179:45 179:45>]
REFERENCE_TYPE_USAGE b3Transform & b3Transform::operator*=(const b3Transform &) -> b3Transform [b3Transform.h <179:32 179:42>]
LOCAL_SYMBOL: b3Transform.h<180:2> [b3Transform.h <180:2 180:2>]
LOCAL_SYMBOL: b3Transform.h<180:2> [b3Transform.h <184:2 184:2>]
SYMBOL_FUNCTION b3Vector3 & b3Vector3::operator+=(const b3Vector3 &)
REFERENCE_CALL b3Transform & b3Transform::operator*=(const b3Transform &) -> b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) [b3Transform.h <181:12 181:13>]
REFERENCE_USAGE b3Transform & b3Transform::operator*=(const b3Transform &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <181:3 181:10>]
SYMBOL_FUNCTION b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &)
REFERENCE_CALL b3Transform & b3Transform::operator*=(const b3Transform &) -> b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) [b3Transform.h <181:23 181:23>]
REFERENCE_USAGE b3Transform & b3Transform::operator*=(const b3Transform &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <181:15 181:21>]
REFERENCE_USAGE b3Transform & b3Transform::operator*=(const b3Transform &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <181:27 181:34>]
LOCAL_SYMBOL: b3Transform.h<179:45> [b3Transform.h <181:25 181:25>]
SYMBOL_FUNCTION b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &)
REFERENCE_CALL b3Transform & b3Transform::operator*=(const b3Transform &) -> b3Matrix3x3 & b3Matrix3x3::operator*=(const b3Matrix3x3 &) [b3Transform.h <182:11 182:12>]
REFERENCE_USAGE b3Transform & b3Transform::operator*=(const b3Transform &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <182:3 182:9>]
REFERENCE_USAGE b3Transform & b3Transform::operator*=(const b3Transform &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <182:16 182:22>]
LOCAL_SYMBOL: b3Transform.h<179:45> [b3Transform.h <182:14 182:14>]
SYMBOL_METHOD public b3Transform b3Transform::inverse() const [b3Transform.h <187:2 <187:14 187:20> 191:2>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::inverse() const -> b3Transform [b3Transform.h <187:2 187:12>]
LOCAL_SYMBOL: b3Transform.h<188:2> [b3Transform.h <188:2 188:2>]
LOCAL_SYMBOL: b3Transform.h<188:2> [b3Transform.h <191:2 191:2>]
LOCAL_SYMBOL: b3Transform.h<189:15> [b3Transform.h <189:15 189:17>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::inverse() const -> b3Matrix3x3 [b3Transform.h <189:3 189:13>]
SYMBOL_FUNCTION b3Matrix3x3 b3Matrix3x3::transpose() const
REFERENCE_CALL b3Transform b3Transform::inverse() const -> b3Matrix3x3 b3Matrix3x3::transpose() const [b3Transform.h <189:29 189:37>]
REFERENCE_USAGE b3Transform b3Transform::inverse() const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <189:21 189:27>]
SYMBOL_FUNCTION void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &)
REFERENCE_CALL b3Transform b3Transform::inverse() const -> void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) [b3Transform.h <190:10 190:20>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::inverse() const -> b3Transform [b3Transform.h <190:10 190:20>]
LOCAL_SYMBOL: b3Transform.h<189:15> [b3Transform.h <190:22 190:24>]
REFERENCE_CALL b3Transform b3Transform::inverse() const -> b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) [b3Transform.h <190:31 190:31>]
LOCAL_SYMBOL: b3Transform.h<189:15> [b3Transform.h <190:27 190:29>]
SYMBOL_FUNCTION b3Vector3 operator-(const b3Vector3 &)
REFERENCE_CALL b3Transform b3Transform::inverse() const -> b3Vector3 operator-(const b3Vector3 &) [b3Transform.h <190:33 190:33>]
REFERENCE_USAGE b3Transform b3Transform::inverse() const -> b3Vector3 b3Transform::m_origin [b3Transform.h <190:34 190:41>]
SYMBOL_METHOD public b3Transform b3Transform::inverseTimes(const b3Transform &) const [b3Transform.h <196:14 196:25>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Transform [b3Transform.h <196:2 196:12>]
LOCAL_SYMBOL: b3Transform.h<196:46> [b3Transform.h <196:46 196:46>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Transform [b3Transform.h <196:33 196:43>]
SYMBOL_METHOD public b3Transform b3Transform::operator*(const b3Transform &) const [b3Transform.h <199:14 199:22>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::operator*(const b3Transform &) const -> b3Transform [b3Transform.h <199:2 199:12>]
LOCAL_SYMBOL: b3Transform.h<199:43> [b3Transform.h <199:43 199:43>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::operator*(const b3Transform &) const -> b3Transform [b3Transform.h <199:30 199:40>]
SYMBOL_METHOD public static const b3Transform & b3Transform::getIdentity() [b3Transform.h <202:2 <202:28 202:38> 206:2>]
REFERENCE_TYPE_USAGE static const b3Transform & b3Transform::getIdentity() -> b3Transform [b3Transform.h <202:15 202:25>]
LOCAL_SYMBOL: b3Transform.h<203:2> [b3Transform.h <203:2 203:2>]
LOCAL_SYMBOL: b3Transform.h<203:2> [b3Transform.h <206:2 206:2>]
LOCAL_SYMBOL: b3Transform.h<204:28> [b3Transform.h <204:28 204:44>]
REFERENCE_TYPE_USAGE static const b3Transform & b3Transform::getIdentity() -> b3Transform [b3Transform.h <204:16 204:26>]
REFERENCE_CALL static const b3Transform & b3Transform::getIdentity() -> void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) [b3Transform.h <204:28 204:44>]
SYMBOL_FUNCTION static const b3Matrix3x3 & b3Matrix3x3::getIdentity()
REFERENCE_CALL static const b3Transform & b3Transform::getIdentity() -> static const b3Matrix3x3 & b3Matrix3x3::getIdentity() [b3Transform.h <204:59 204:69>]
QUALIFIER: b3Matrix3x3 [b3Transform.h <204:46 204:56>]
REFERENCE_CALL static const b3Transform & b3Transform::getIdentity() -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3Transform.h <57:24 57:36>]
REFERENCE_TYPE_USAGE static const b3Transform & b3Transform::getIdentity() -> b3Scalar [b3Transform.h <57:38 57:45>]
REFERENCE_TYPE_USAGE static const b3Transform & b3Transform::getIdentity() -> b3Scalar [b3Transform.h <57:51 57:58>]
REFERENCE_TYPE_USAGE static const b3Transform & b3Transform::getIdentity() -> b3Scalar [b3Transform.h <57:64 57:71>]
LOCAL_SYMBOL: b3Transform.h<204:28> [b3Transform.h <205:10 205:26>]
SYMBOL_STRUCT b3TransformFloatData [b3Transform.h <208:24 208:38>]
SYMBOL_METHOD public void b3Transform::serialize(b3TransformFloatData &) const [b3Transform.h <208:7 208:15>]
REFERENCE_TYPE_USAGE void b3Transform::serialize(b3TransformFloatData &) const -> void [b3Transform.h <208:2 208:5>]
LOCAL_SYMBOL: b3Transform.h<208:41> [b3Transform.h <208:41 208:47>]
REFERENCE_TYPE_USAGE void b3Transform::serialize(b3TransformFloatData &) const -> b3TransformFloatData [b3Transform.h <208:24 208:38>]
SYMBOL_METHOD public void b3Transform::serializeFloat(b3TransformFloatData &) const [b3Transform.h <210:7 210:20>]
REFERENCE_TYPE_USAGE void b3Transform::serializeFloat(b3TransformFloatData &) const -> void [b3Transform.h <210:2 210:5>]
LOCAL_SYMBOL: b3Transform.h<210:51> [b3Transform.h <210:51 210:57>]
REFERENCE_TYPE_USAGE void b3Transform::serializeFloat(b3TransformFloatData &) const -> b3TransformFloatData [b3Transform.h <210:29 210:48>]
SYMBOL_METHOD public void b3Transform::deSerialize(const b3TransformFloatData &) [b3Transform.h <212:7 212:17>]
REFERENCE_TYPE_USAGE void b3Transform::deSerialize(const b3TransformFloatData &) -> void [b3Transform.h <212:2 212:5>]
LOCAL_SYMBOL: b3Transform.h<212:49> [b3Transform.h <212:49 212:54>]
REFERENCE_TYPE_USAGE void b3Transform::deSerialize(const b3TransformFloatData &) -> b3TransformFloatData [b3Transform.h <212:32 212:46>]
SYMBOL_STRUCT b3TransformDoubleData [b3Transform.h <214:38 214:58>]
SYMBOL_METHOD public void b3Transform::deSerializeDouble(const b3TransformDoubleData &) [b3Transform.h <214:7 214:23>]
REFERENCE_TYPE_USAGE void b3Transform::deSerializeDouble(const b3TransformDoubleData &) -> void [b3Transform.h <214:2 214:5>]
LOCAL_SYMBOL: b3Transform.h<214:61> [b3Transform.h <214:61 214:66>]
REFERENCE_TYPE_USAGE void b3Transform::deSerializeDouble(const b3TransformDoubleData &) -> b3TransformDoubleData [b3Transform.h <214:38 214:58>]
SYMBOL_METHOD public void b3Transform::deSerializeFloat(const b3TransformFloatData &) [b3Transform.h <216:7 216:22>]
REFERENCE_TYPE_USAGE void b3Transform::deSerializeFloat(const b3TransformFloatData &) -> void [b3Transform.h <216:2 216:5>]
LOCAL_SYMBOL: b3Transform.h<216:59> [b3Transform.h <216:59 216:64>]
REFERENCE_TYPE_USAGE void b3Transform::deSerializeFloat(const b3TransformFloatData &) -> b3TransformFloatData [b3Transform.h <216:37 216:56>]
SYMBOL_METHOD public void b3Transform::~b3Transform() [b3Transform.h <33:31 33:41>]
SYMBOL_METHOD public b3Vector3 b3Transform::invXform(const b3Vector3 &) const [b3Transform.h <221:1 <222:14 222:21> 226:1>]
SYMBOL_CLASS b3Transform
QUALIFIER: b3Transform [b3Transform.h <222:1 222:11>]
REFERENCE_TYPE_USAGE b3Vector3 b3Transform::invXform(const b3Vector3 &) const -> b3Vector3 [b3Transform.h <221:17 221:25>]
LOCAL_SYMBOL: b3Transform.h<222:40> [b3Transform.h <222:40 222:44>]
REFERENCE_TYPE_USAGE b3Vector3 b3Transform::invXform(const b3Vector3 &) const -> b3Vector3 [b3Transform.h <222:29 222:37>]
LOCAL_SYMBOL: b3Transform.h<223:1> [b3Transform.h <223:1 223:1>]
LOCAL_SYMBOL: b3Transform.h<223:1> [b3Transform.h <226:1 226:1>]
LOCAL_SYMBOL: b3Transform.h<224:12> [b3Transform.h <224:12 224:12>]
REFERENCE_TYPE_USAGE b3Vector3 b3Transform::invXform(const b3Vector3 &) const -> b3Vector3 [b3Transform.h <224:2 224:10>]
REFERENCE_CALL b3Vector3 b3Transform::invXform(const b3Vector3 &) const -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3Transform.h <224:22 224:22>]
LOCAL_SYMBOL: b3Transform.h<222:40> [b3Transform.h <224:16 224:20>]
REFERENCE_USAGE b3Vector3 b3Transform::invXform(const b3Vector3 &) const -> b3Vector3 b3Transform::m_origin [b3Transform.h <224:24 224:31>]
REFERENCE_CALL b3Vector3 b3Transform::invXform(const b3Vector3 &) const -> b3Vector3 operator*(const b3Matrix3x3 &, const b3Vector3 &) [b3Transform.h <225:30 225:30>]
REFERENCE_CALL b3Vector3 b3Transform::invXform(const b3Vector3 &) const -> b3Matrix3x3 b3Matrix3x3::transpose() const [b3Transform.h <225:18 225:26>]
REFERENCE_USAGE b3Vector3 b3Transform::invXform(const b3Vector3 &) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <225:10 225:16>]
LOCAL_SYMBOL: b3Transform.h<224:12> [b3Transform.h <225:32 225:32>]
SYMBOL_METHOD public b3Transform b3Transform::inverseTimes(const b3Transform &) const [b3Transform.h <228:1 <229:14 229:25> 234:1>]
QUALIFIER: b3Transform [b3Transform.h <229:1 229:11>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Transform [b3Transform.h <228:17 228:27>]
LOCAL_SYMBOL: b3Transform.h<229:46> [b3Transform.h <229:46 229:46>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Transform [b3Transform.h <229:33 229:43>]
LOCAL_SYMBOL: b3Transform.h<230:1> [b3Transform.h <230:1 230:1>]
LOCAL_SYMBOL: b3Transform.h<230:1> [b3Transform.h <234:1 234:1>]
LOCAL_SYMBOL: b3Transform.h<231:12> [b3Transform.h <231:12 231:12>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Vector3 [b3Transform.h <231:2 231:10>]
REFERENCE_CALL b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3Transform.h <231:30 231:30>]
SYMBOL_FUNCTION const b3Vector3 & b3Transform::getOrigin() const
REFERENCE_CALL b3Transform b3Transform::inverseTimes(const b3Transform &) const -> const b3Vector3 & b3Transform::getOrigin() const [b3Transform.h <231:18 231:26>]
LOCAL_SYMBOL: b3Transform.h<229:46> [b3Transform.h <231:16 231:16>]
REFERENCE_USAGE b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Vector3 b3Transform::m_origin [b3Transform.h <231:32 231:39>]
REFERENCE_CALL b3Transform b3Transform::inverseTimes(const b3Transform &) const -> void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) [b3Transform.h <232:10 232:20>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Transform [b3Transform.h <232:10 232:20>]
SYMBOL_FUNCTION b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const
REFERENCE_CALL b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Matrix3x3 b3Matrix3x3::transposeTimes(const b3Matrix3x3 &) const [b3Transform.h <232:30 232:43>]
REFERENCE_USAGE b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <232:22 232:28>]
REFERENCE_USAGE b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <232:47 232:53>]
LOCAL_SYMBOL: b3Transform.h<229:46> [b3Transform.h <232:45 232:45>]
SYMBOL_FUNCTION b3Vector3 operator*(const b3Vector3 &, const b3Matrix3x3 &)
REFERENCE_CALL b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Vector3 operator*(const b3Vector3 &, const b3Matrix3x3 &) [b3Transform.h <233:6 233:6>]
LOCAL_SYMBOL: b3Transform.h<231:12> [b3Transform.h <233:4 233:4>]
REFERENCE_USAGE b3Transform b3Transform::inverseTimes(const b3Transform &) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <233:8 233:14>]
SYMBOL_METHOD public b3Transform b3Transform::operator*(const b3Transform &) const [b3Transform.h <236:1 <237:14 237:22> 241:1>]
QUALIFIER: b3Transform [b3Transform.h <237:1 237:11>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::operator*(const b3Transform &) const -> b3Transform [b3Transform.h <236:17 236:27>]
LOCAL_SYMBOL: b3Transform.h<237:43> [b3Transform.h <237:43 237:43>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::operator*(const b3Transform &) const -> b3Transform [b3Transform.h <237:30 237:40>]
LOCAL_SYMBOL: b3Transform.h<238:1> [b3Transform.h <238:1 238:1>]
LOCAL_SYMBOL: b3Transform.h<238:1> [b3Transform.h <241:1 241:1>]
REFERENCE_CALL b3Transform b3Transform::operator*(const b3Transform &) const -> void b3Transform::b3Transform(const b3Matrix3x3 &, const b3Vector3 &) [b3Transform.h <239:9 239:19>]
REFERENCE_TYPE_USAGE b3Transform b3Transform::operator*(const b3Transform &) const -> b3Transform [b3Transform.h <239:9 239:19>]
REFERENCE_CALL b3Transform b3Transform::operator*(const b3Transform &) const -> b3Matrix3x3 operator*(const b3Matrix3x3 &, const b3Matrix3x3 &) [b3Transform.h <239:29 239:29>]
REFERENCE_USAGE b3Transform b3Transform::operator*(const b3Transform &) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <239:21 239:27>]
REFERENCE_USAGE b3Transform b3Transform::operator*(const b3Transform &) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <239:33 239:39>]
LOCAL_SYMBOL: b3Transform.h<237:43> [b3Transform.h <239:31 239:31>]
REFERENCE_CALL b3Transform b3Transform::operator*(const b3Transform &) const -> b3Vector3 b3Transform::operator()(const b3Vector3 &) const [b3Transform.h <240:10 240:10>]
REFERENCE_USAGE b3Transform b3Transform::operator*(const b3Transform &) const -> b3Vector3 b3Transform::m_origin [b3Transform.h <240:13 240:20>]
LOCAL_SYMBOL: b3Transform.h<237:43> [b3Transform.h <240:11 240:11>]
SYMBOL_FUNCTION bool operator==(const b3Transform &, const b3Transform &) [b3Transform.h <244:1 <244:22 244:31> 248:1>]
REFERENCE_TYPE_USAGE bool operator==(const b3Transform &, const b3Transform &) -> bool [b3Transform.h <244:17 244:20>]
LOCAL_SYMBOL: b3Transform.h<244:52> [b3Transform.h <244:52 244:53>]
REFERENCE_TYPE_USAGE bool operator==(const b3Transform &, const b3Transform &) -> b3Transform [b3Transform.h <244:39 244:49>]
LOCAL_SYMBOL: b3Transform.h<244:75> [b3Transform.h <244:75 244:76>]
REFERENCE_TYPE_USAGE bool operator==(const b3Transform &, const b3Transform &) -> b3Transform [b3Transform.h <244:62 244:72>]
LOCAL_SYMBOL: b3Transform.h<245:1> [b3Transform.h <245:1 245:1>]
LOCAL_SYMBOL: b3Transform.h<245:1> [b3Transform.h <248:1 248:1>]
SYMBOL_FUNCTION bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &)
REFERENCE_CALL bool operator==(const b3Transform &, const b3Transform &) -> bool operator==(const b3Matrix3x3 &, const b3Matrix3x3 &) [b3Transform.h <246:28 246:29>]
SYMBOL_FUNCTION const b3Matrix3x3 & b3Transform::getBasis() const
REFERENCE_CALL bool operator==(const b3Transform &, const b3Transform &) -> const b3Matrix3x3 & b3Transform::getBasis() const [b3Transform.h <246:16 246:23>]
LOCAL_SYMBOL: b3Transform.h<244:52> [b3Transform.h <246:13 246:14>]
REFERENCE_CALL bool operator==(const b3Transform &, const b3Transform &) -> const b3Matrix3x3 & b3Transform::getBasis() const [b3Transform.h <246:34 246:41>]
LOCAL_SYMBOL: b3Transform.h<244:75> [b3Transform.h <246:31 246:32>]
REFERENCE_CALL bool operator==(const b3Transform &, const b3Transform &) -> bool b3Vector3::operator==(const b3Vector3 &) const [b3Transform.h <247:28 247:29>]
REFERENCE_CALL bool operator==(const b3Transform &, const b3Transform &) -> const b3Vector3 & b3Transform::getOrigin() const [b3Transform.h <247:16 247:24>]
LOCAL_SYMBOL: b3Transform.h<244:52> [b3Transform.h <247:13 247:14>]
REFERENCE_CALL bool operator==(const b3Transform &, const b3Transform &) -> const b3Vector3 & b3Transform::getOrigin() const [b3Transform.h <247:34 247:42>]
LOCAL_SYMBOL: b3Transform.h<244:75> [b3Transform.h <247:31 247:32>]
SYMBOL_STRUCT b3TransformFloatData [b3Transform.h <252:1 <252:8 252:27> 256:1>]
LOCAL_SYMBOL: b3Transform.h<253:1> [b3Transform.h <253:1 253:1>]
LOCAL_SYMBOL: b3Transform.h<253:1> [b3Transform.h <256:1 256:1>]
SYMBOL_FIELD public b3Matrix3x3FloatData b3TransformFloatData::m_basis [b3Transform.h <254:23 254:29>]
REFERENCE_TYPE_USAGE b3Matrix3x3FloatData b3TransformFloatData::m_basis -> b3Matrix3x3FloatData [b3Transform.h <254:2 254:21>]
SYMBOL_FIELD public b3Vector3FloatData b3TransformFloatData::m_origin [b3Transform.h <255:21 255:28>]
REFERENCE_TYPE_USAGE b3Vector3FloatData b3TransformFloatData::m_origin -> b3Vector3FloatData [b3Transform.h <255:2 255:19>]
SYMBOL_STRUCT b3TransformDoubleData [b3Transform.h <258:1 <258:8 258:28> 262:1>]
LOCAL_SYMBOL: b3Transform.h<259:1> [b3Transform.h <259:1 259:1>]
LOCAL_SYMBOL: b3Transform.h<259:1> [b3Transform.h <262:1 262:1>]
SYMBOL_FIELD public b3Matrix3x3DoubleData b3TransformDoubleData::m_basis [b3Transform.h <260:24 260:30>]
REFERENCE_TYPE_USAGE b3Matrix3x3DoubleData b3TransformDoubleData::m_basis -> b3Matrix3x3DoubleData [b3Transform.h <260:2 260:22>]
SYMBOL_FIELD public b3Vector3DoubleData b3TransformDoubleData::m_origin [b3Transform.h <261:22 261:29>]
REFERENCE_TYPE_USAGE b3Vector3DoubleData b3TransformDoubleData::m_origin -> b3Vector3DoubleData [b3Transform.h <261:2 261:20>]
SYMBOL_METHOD public void b3Transform::serialize(b3TransformFloatData &) const [b3Transform.h <266:1 <266:35 266:43> 270:1>]
QUALIFIER: b3Transform [b3Transform.h <266:22 266:32>]
REFERENCE_TYPE_USAGE void b3Transform::serialize(b3TransformFloatData &) const -> void [b3Transform.h <266:17 266:20>]
LOCAL_SYMBOL: b3Transform.h<266:62> [b3Transform.h <266:62 266:68>]
REFERENCE_TYPE_USAGE void b3Transform::serialize(b3TransformFloatData &) const -> b3TransformFloatData [b3Transform.h <266:45 266:59>]
LOCAL_SYMBOL: b3Transform.h<267:1> [b3Transform.h <267:1 267:1>]
LOCAL_SYMBOL: b3Transform.h<267:1> [b3Transform.h <270:1 270:1>]
SYMBOL_FUNCTION void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const
REFERENCE_CALL void b3Transform::serialize(b3TransformFloatData &) const -> void b3Matrix3x3::serialize(b3Matrix3x3FloatData &) const [b3Transform.h <268:10 268:18>]
REFERENCE_USAGE void b3Transform::serialize(b3TransformFloatData &) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <268:2 268:8>]
REFERENCE_USAGE void b3Transform::serialize(b3TransformFloatData &) const -> b3Matrix3x3FloatData b3TransformFloatData::m_basis [b3Transform.h <268:28 268:34>]
LOCAL_SYMBOL: b3Transform.h<266:62> [b3Transform.h <268:20 268:26>]
REFERENCE_CALL void b3Transform::serialize(b3TransformFloatData &) const -> void b3Vector3::serialize(b3Vector3FloatData &) const [b3Transform.h <269:11 269:19>]
REFERENCE_USAGE void b3Transform::serialize(b3TransformFloatData &) const -> b3Vector3 b3Transform::m_origin [b3Transform.h <269:2 269:9>]
REFERENCE_USAGE void b3Transform::serialize(b3TransformFloatData &) const -> b3Vector3FloatData b3TransformFloatData::m_origin [b3Transform.h <269:29 269:36>]
LOCAL_SYMBOL: b3Transform.h<266:62> [b3Transform.h <269:21 269:27>]
SYMBOL_METHOD public void b3Transform::serializeFloat(b3TransformFloatData &) const [b3Transform.h <272:1 <272:35 272:48> 276:1>]
QUALIFIER: b3Transform [b3Transform.h <272:22 272:32>]
REFERENCE_TYPE_USAGE void b3Transform::serializeFloat(b3TransformFloatData &) const -> void [b3Transform.h <272:17 272:20>]
LOCAL_SYMBOL: b3Transform.h<272:72> [b3Transform.h <272:72 272:78>]
REFERENCE_TYPE_USAGE void b3Transform::serializeFloat(b3TransformFloatData &) const -> b3TransformFloatData [b3Transform.h <272:50 272:69>]
LOCAL_SYMBOL: b3Transform.h<273:1> [b3Transform.h <273:1 273:1>]
LOCAL_SYMBOL: b3Transform.h<273:1> [b3Transform.h <276:1 276:1>]
SYMBOL_FUNCTION void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const
REFERENCE_CALL void b3Transform::serializeFloat(b3TransformFloatData &) const -> void b3Matrix3x3::serializeFloat(b3Matrix3x3FloatData &) const [b3Transform.h <274:10 274:23>]
REFERENCE_USAGE void b3Transform::serializeFloat(b3TransformFloatData &) const -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <274:2 274:8>]
REFERENCE_USAGE void b3Transform::serializeFloat(b3TransformFloatData &) const -> b3Matrix3x3FloatData b3TransformFloatData::m_basis [b3Transform.h <274:33 274:39>]
LOCAL_SYMBOL: b3Transform.h<272:72> [b3Transform.h <274:25 274:31>]
REFERENCE_CALL void b3Transform::serializeFloat(b3TransformFloatData &) const -> void b3Vector3::serializeFloat(b3Vector3FloatData &) const [b3Transform.h <275:11 275:24>]
REFERENCE_USAGE void b3Transform::serializeFloat(b3TransformFloatData &) const -> b3Vector3 b3Transform::m_origin [b3Transform.h <275:2 275:9>]
REFERENCE_USAGE void b3Transform::serializeFloat(b3TransformFloatData &) const -> b3Vector3FloatData b3TransformFloatData::m_origin [b3Transform.h <275:34 275:41>]
LOCAL_SYMBOL: b3Transform.h<272:72> [b3Transform.h <275:26 275:32>]
SYMBOL_METHOD public void b3Transform::deSerialize(const b3TransformFloatData &) [b3Transform.h <279:1 <279:35 279:45> 283:1>]
QUALIFIER: b3Transform [b3Transform.h <279:22 279:32>]
REFERENCE_TYPE_USAGE void b3Transform::deSerialize(const b3TransformFloatData &) -> void [b3Transform.h <279:17 279:20>]
LOCAL_SYMBOL: b3Transform.h<279:70> [b3Transform.h <279:70 279:75>]
REFERENCE_TYPE_USAGE void b3Transform::deSerialize(const b3TransformFloatData &) -> b3TransformFloatData [b3Transform.h <279:53 279:67>]
LOCAL_SYMBOL: b3Transform.h<280:1> [b3Transform.h <280:1 280:1>]
LOCAL_SYMBOL: b3Transform.h<280:1> [b3Transform.h <283:1 283:1>]
SYMBOL_FUNCTION void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &)
REFERENCE_CALL void b3Transform::deSerialize(const b3TransformFloatData &) -> void b3Matrix3x3::deSerialize(const b3Matrix3x3FloatData &) [b3Transform.h <281:10 281:20>]
REFERENCE_USAGE void b3Transform::deSerialize(const b3TransformFloatData &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <281:2 281:8>]
REFERENCE_USAGE void b3Transform::deSerialize(const b3TransformFloatData &) -> b3Matrix3x3FloatData b3TransformFloatData::m_basis [b3Transform.h <281:29 281:35>]
LOCAL_SYMBOL: b3Transform.h<279:70> [b3Transform.h <281:22 281:27>]
REFERENCE_CALL void b3Transform::deSerialize(const b3TransformFloatData &) -> void b3Vector3::deSerialize(const b3Vector3FloatData &) [b3Transform.h <282:11 282:21>]
REFERENCE_USAGE void b3Transform::deSerialize(const b3TransformFloatData &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <282:2 282:9>]
REFERENCE_USAGE void b3Transform::deSerialize(const b3TransformFloatData &) -> b3Vector3FloatData b3TransformFloatData::m_origin [b3Transform.h <282:30 282:37>]
LOCAL_SYMBOL: b3Transform.h<279:70> [b3Transform.h <282:23 282:28>]
SYMBOL_METHOD public void b3Transform::deSerializeFloat(const b3TransformFloatData &) [b3Transform.h <285:1 <285:35 285:50> 289:1>]
QUALIFIER: b3Transform [b3Transform.h <285:22 285:32>]
REFERENCE_TYPE_USAGE void b3Transform::deSerializeFloat(const b3TransformFloatData &) -> void [b3Transform.h <285:17 285:20>]
LOCAL_SYMBOL: b3Transform.h<285:80> [b3Transform.h <285:80 285:85>]
REFERENCE_TYPE_USAGE void b3Transform::deSerializeFloat(const b3TransformFloatData &) -> b3TransformFloatData [b3Transform.h <285:58 285:77>]
LOCAL_SYMBOL: b3Transform.h<286:1> [b3Transform.h <286:1 286:1>]
LOCAL_SYMBOL: b3Transform.h<286:1> [b3Transform.h <289:1 289:1>]
SYMBOL_FUNCTION void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &)
REFERENCE_CALL void b3Transform::deSerializeFloat(const b3TransformFloatData &) -> void b3Matrix3x3::deSerializeFloat(const b3Matrix3x3FloatData &) [b3Transform.h <287:10 287:25>]
REFERENCE_USAGE void b3Transform::deSerializeFloat(const b3TransformFloatData &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <287:2 287:8>]
REFERENCE_USAGE void b3Transform::deSerializeFloat(const b3TransformFloatData &) -> b3Matrix3x3FloatData b3TransformFloatData::m_basis [b3Transform.h <287:34 287:40>]
LOCAL_SYMBOL: b3Transform.h<285:80> [b3Transform.h <287:27 287:32>]
REFERENCE_CALL void b3Transform::deSerializeFloat(const b3TransformFloatData &) -> void b3Vector3::deSerializeFloat(const b3Vector3FloatData &) [b3Transform.h <288:11 288:26>]
REFERENCE_USAGE void b3Transform::deSerializeFloat(const b3TransformFloatData &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <288:2 288:9>]
REFERENCE_USAGE void b3Transform::deSerializeFloat(const b3TransformFloatData &) -> b3Vector3FloatData b3TransformFloatData::m_origin [b3Transform.h <288:35 288:42>]
LOCAL_SYMBOL: b3Transform.h<285:80> [b3Transform.h <288:28 288:33>]
SYMBOL_METHOD public void b3Transform::deSerializeDouble(const b3TransformDoubleData &) [b3Transform.h <291:1 <291:35 291:51> 295:1>]
QUALIFIER: b3Transform [b3Transform.h <291:22 291:32>]
REFERENCE_TYPE_USAGE void b3Transform::deSerializeDouble(const b3TransformDoubleData &) -> void [b3Transform.h <291:17 291:20>]
LOCAL_SYMBOL: b3Transform.h<291:82> [b3Transform.h <291:82 291:87>]
REFERENCE_TYPE_USAGE void b3Transform::deSerializeDouble(const b3TransformDoubleData &) -> b3TransformDoubleData [b3Transform.h <291:59 291:79>]
LOCAL_SYMBOL: b3Transform.h<292:1> [b3Transform.h <292:1 292:1>]
LOCAL_SYMBOL: b3Transform.h<292:1> [b3Transform.h <295:1 295:1>]
SYMBOL_FUNCTION void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &)
REFERENCE_CALL void b3Transform::deSerializeDouble(const b3TransformDoubleData &) -> void b3Matrix3x3::deSerializeDouble(const b3Matrix3x3DoubleData &) [b3Transform.h <293:10 293:26>]
REFERENCE_USAGE void b3Transform::deSerializeDouble(const b3TransformDoubleData &) -> b3Matrix3x3 b3Transform::m_basis [b3Transform.h <293:2 293:8>]
REFERENCE_USAGE void b3Transform::deSerializeDouble(const b3TransformDoubleData &) -> b3Matrix3x3DoubleData b3TransformDoubleData::m_basis [b3Transform.h <293:35 293:41>]
LOCAL_SYMBOL: b3Transform.h<291:82> [b3Transform.h <293:28 293:33>]
REFERENCE_CALL void b3Transform::deSerializeDouble(const b3TransformDoubleData &) -> void b3Vector3::deSerializeDouble(const b3Vector3DoubleData &) [b3Transform.h <294:11 294:27>]
REFERENCE_USAGE void b3Transform::deSerializeDouble(const b3TransformDoubleData &) -> b3Vector3 b3Transform::m_origin [b3Transform.h <294:2 294:9>]
REFERENCE_USAGE void b3Transform::deSerializeDouble(const b3TransformDoubleData &) -> b3Vector3DoubleData b3TransformDoubleData::m_origin [b3Transform.h <294:36 294:43>]
LOCAL_SYMBOL: b3Transform.h<291:82> [b3Transform.h <294:29 294:34>]
SYMBOL_FUNCTION void b3AabbExpand(b3Vector3 &, b3Vector3 &, const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <26:1 <26:22 26:33> 33:1>]
REFERENCE_TYPE_USAGE void b3AabbExpand(b3Vector3 &, b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> void [b3AabbUtil.h <26:17 26:20>]
LOCAL_SYMBOL: b3AabbUtil.h<26:47> [b3AabbUtil.h <26:47 26:53>]
REFERENCE_TYPE_USAGE void b3AabbExpand(b3Vector3 &, b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <26:36 26:44>]
LOCAL_SYMBOL: b3AabbUtil.h<27:23> [b3AabbUtil.h <27:23 27:29>]
REFERENCE_TYPE_USAGE void b3AabbExpand(b3Vector3 &, b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <27:12 27:20>]
LOCAL_SYMBOL: b3AabbUtil.h<28:29> [b3AabbUtil.h <28:29 28:40>]
REFERENCE_TYPE_USAGE void b3AabbExpand(b3Vector3 &, b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <28:18 28:26>]
LOCAL_SYMBOL: b3AabbUtil.h<29:29> [b3AabbUtil.h <29:29 29:40>]
REFERENCE_TYPE_USAGE void b3AabbExpand(b3Vector3 &, b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <29:18 29:26>]
LOCAL_SYMBOL: b3AabbUtil.h<30:1> [b3AabbUtil.h <30:1 30:1>]
LOCAL_SYMBOL: b3AabbUtil.h<30:1> [b3AabbUtil.h <33:1 33:1>]
REFERENCE_CALL void b3AabbExpand(b3Vector3 &, b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3AabbUtil.h <31:10 31:10>]
LOCAL_SYMBOL: b3AabbUtil.h<26:47> [b3AabbUtil.h <31:2 31:8>]
REFERENCE_CALL void b3AabbExpand(b3Vector3 &, b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <31:20 31:20>]
LOCAL_SYMBOL: b3AabbUtil.h<26:47> [b3AabbUtil.h <31:12 31:18>]
LOCAL_SYMBOL: b3AabbUtil.h<28:29> [b3AabbUtil.h <31:22 31:33>]
REFERENCE_CALL void b3AabbExpand(b3Vector3 &, b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3AabbUtil.h <32:10 32:10>]
LOCAL_SYMBOL: b3AabbUtil.h<27:23> [b3AabbUtil.h <32:2 32:8>]
REFERENCE_CALL void b3AabbExpand(b3Vector3 &, b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <32:20 32:20>]
LOCAL_SYMBOL: b3AabbUtil.h<27:23> [b3AabbUtil.h <32:12 32:18>]
LOCAL_SYMBOL: b3AabbUtil.h<29:29> [b3AabbUtil.h <32:22 32:33>]
SYMBOL_FUNCTION bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <36:1 <36:22 36:44> 44:1>]
REFERENCE_TYPE_USAGE bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> bool [b3AabbUtil.h <36:17 36:20>]
LOCAL_SYMBOL: b3AabbUtil.h<36:63> [b3AabbUtil.h <36:63 36:70>]
REFERENCE_TYPE_USAGE bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <36:52 36:60>]
LOCAL_SYMBOL: b3AabbUtil.h<36:90> [b3AabbUtil.h <36:90 36:97>]
REFERENCE_TYPE_USAGE bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <36:79 36:87>]
LOCAL_SYMBOL: b3AabbUtil.h<37:26> [b3AabbUtil.h <37:26 37:30>]
REFERENCE_TYPE_USAGE bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <37:15 37:23>]
LOCAL_SYMBOL: b3AabbUtil.h<38:1> [b3AabbUtil.h <38:1 38:1>]
LOCAL_SYMBOL: b3AabbUtil.h<38:1> [b3AabbUtil.h <44:1 44:1>]
LOCAL_SYMBOL: b3AabbUtil.h<39:7> [b3AabbUtil.h <39:7 39:13>]
REFERENCE_TYPE_USAGE bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> bool [b3AabbUtil.h <39:2 39:5>]
LOCAL_SYMBOL: b3AabbUtil.h<39:7> [b3AabbUtil.h <40:2 40:8>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <40:22 40:25>]
LOCAL_SYMBOL: b3AabbUtil.h<36:63> [b3AabbUtil.h <40:13 40:20>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <40:37 40:40>]
LOCAL_SYMBOL: b3AabbUtil.h<37:26> [b3AabbUtil.h <40:31 40:35>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <40:56 40:59>]
LOCAL_SYMBOL: b3AabbUtil.h<36:90> [b3AabbUtil.h <40:47 40:54>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <40:71 40:74>]
LOCAL_SYMBOL: b3AabbUtil.h<37:26> [b3AabbUtil.h <40:65 40:69>]
LOCAL_SYMBOL: b3AabbUtil.h<39:7> [b3AabbUtil.h <40:89 40:95>]
LOCAL_SYMBOL: b3AabbUtil.h<39:7> [b3AabbUtil.h <41:2 41:8>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <41:22 41:25>]
LOCAL_SYMBOL: b3AabbUtil.h<36:63> [b3AabbUtil.h <41:13 41:20>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <41:37 41:40>]
LOCAL_SYMBOL: b3AabbUtil.h<37:26> [b3AabbUtil.h <41:31 41:35>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <41:56 41:59>]
LOCAL_SYMBOL: b3AabbUtil.h<36:90> [b3AabbUtil.h <41:47 41:54>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <41:71 41:74>]
LOCAL_SYMBOL: b3AabbUtil.h<37:26> [b3AabbUtil.h <41:65 41:69>]
LOCAL_SYMBOL: b3AabbUtil.h<39:7> [b3AabbUtil.h <41:89 41:95>]
LOCAL_SYMBOL: b3AabbUtil.h<39:7> [b3AabbUtil.h <42:2 42:8>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <42:22 42:25>]
LOCAL_SYMBOL: b3AabbUtil.h<36:63> [b3AabbUtil.h <42:13 42:20>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <42:37 42:40>]
LOCAL_SYMBOL: b3AabbUtil.h<37:26> [b3AabbUtil.h <42:31 42:35>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <42:56 42:59>]
LOCAL_SYMBOL: b3AabbUtil.h<36:90> [b3AabbUtil.h <42:47 42:54>]
REFERENCE_CALL bool b3TestPointAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <42:71 42:74>]
LOCAL_SYMBOL: b3AabbUtil.h<37:26> [b3AabbUtil.h <42:65 42:69>]
LOCAL_SYMBOL: b3AabbUtil.h<39:7> [b3AabbUtil.h <42:89 42:95>]
LOCAL_SYMBOL: b3AabbUtil.h<39:7> [b3AabbUtil.h <43:9 43:15>]
SYMBOL_FUNCTION bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <48:1 <48:22 48:43> 56:1>]
REFERENCE_TYPE_USAGE bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> bool [b3AabbUtil.h <48:17 48:20>]
LOCAL_SYMBOL: b3AabbUtil.h<48:62> [b3AabbUtil.h <48:62 48:69>]
REFERENCE_TYPE_USAGE bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <48:51 48:59>]
LOCAL_SYMBOL: b3AabbUtil.h<48:89> [b3AabbUtil.h <48:89 48:96>]
REFERENCE_TYPE_USAGE bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <48:78 48:86>]
LOCAL_SYMBOL: b3AabbUtil.h<49:26> [b3AabbUtil.h <49:26 49:33>]
REFERENCE_TYPE_USAGE bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <49:15 49:23>]
LOCAL_SYMBOL: b3AabbUtil.h<49:53> [b3AabbUtil.h <49:53 49:60>]
REFERENCE_TYPE_USAGE bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <49:42 49:50>]
LOCAL_SYMBOL: b3AabbUtil.h<50:1> [b3AabbUtil.h <50:1 50:1>]
LOCAL_SYMBOL: b3AabbUtil.h<50:1> [b3AabbUtil.h <56:1 56:1>]
LOCAL_SYMBOL: b3AabbUtil.h<51:7> [b3AabbUtil.h <51:7 51:13>]
REFERENCE_TYPE_USAGE bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> bool [b3AabbUtil.h <51:2 51:5>]
LOCAL_SYMBOL: b3AabbUtil.h<51:7> [b3AabbUtil.h <52:2 52:8>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <52:22 52:25>]
LOCAL_SYMBOL: b3AabbUtil.h<48:62> [b3AabbUtil.h <52:13 52:20>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <52:40 52:43>]
LOCAL_SYMBOL: b3AabbUtil.h<49:53> [b3AabbUtil.h <52:31 52:38>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <52:59 52:62>]
LOCAL_SYMBOL: b3AabbUtil.h<48:89> [b3AabbUtil.h <52:50 52:57>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <52:77 52:80>]
LOCAL_SYMBOL: b3AabbUtil.h<49:26> [b3AabbUtil.h <52:68 52:75>]
LOCAL_SYMBOL: b3AabbUtil.h<51:7> [b3AabbUtil.h <52:95 52:101>]
LOCAL_SYMBOL: b3AabbUtil.h<51:7> [b3AabbUtil.h <53:2 53:8>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <53:22 53:25>]
LOCAL_SYMBOL: b3AabbUtil.h<48:62> [b3AabbUtil.h <53:13 53:20>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <53:40 53:43>]
LOCAL_SYMBOL: b3AabbUtil.h<49:53> [b3AabbUtil.h <53:31 53:38>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <53:59 53:62>]
LOCAL_SYMBOL: b3AabbUtil.h<48:89> [b3AabbUtil.h <53:50 53:57>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <53:77 53:80>]
LOCAL_SYMBOL: b3AabbUtil.h<49:26> [b3AabbUtil.h <53:68 53:75>]
LOCAL_SYMBOL: b3AabbUtil.h<51:7> [b3AabbUtil.h <53:95 53:101>]
LOCAL_SYMBOL: b3AabbUtil.h<51:7> [b3AabbUtil.h <54:2 54:8>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <54:22 54:25>]
LOCAL_SYMBOL: b3AabbUtil.h<48:62> [b3AabbUtil.h <54:13 54:20>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <54:40 54:43>]
LOCAL_SYMBOL: b3AabbUtil.h<49:53> [b3AabbUtil.h <54:31 54:38>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <54:59 54:62>]
LOCAL_SYMBOL: b3AabbUtil.h<48:89> [b3AabbUtil.h <54:50 54:57>]
REFERENCE_CALL bool b3TestAabbAgainstAabb2(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <54:77 54:80>]
LOCAL_SYMBOL: b3AabbUtil.h<49:26> [b3AabbUtil.h <54:68 54:75>]
LOCAL_SYMBOL: b3AabbUtil.h<51:7> [b3AabbUtil.h <54:95 54:101>]
LOCAL_SYMBOL: b3AabbUtil.h<51:7> [b3AabbUtil.h <55:9 55:15>]
SYMBOL_FUNCTION bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <59:1 <59:22 59:47> 75:1>]
REFERENCE_TYPE_USAGE bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> bool [b3AabbUtil.h <59:17 59:20>]
LOCAL_SYMBOL: b3AabbUtil.h<59:66> [b3AabbUtil.h <59:66 59:73>]
REFERENCE_TYPE_USAGE bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <59:55 59:63>]
LOCAL_SYMBOL: b3AabbUtil.h<60:27> [b3AabbUtil.h <60:27 60:33>]
REFERENCE_TYPE_USAGE bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <60:16 60:24>]
LOCAL_SYMBOL: b3AabbUtil.h<60:53> [b3AabbUtil.h <60:53 60:59>]
REFERENCE_TYPE_USAGE bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <60:42 60:50>]
LOCAL_SYMBOL: b3AabbUtil.h<61:1> [b3AabbUtil.h <61:1 61:1>]
LOCAL_SYMBOL: b3AabbUtil.h<61:1> [b3AabbUtil.h <75:1 75:1>]
LOCAL_SYMBOL: b3AabbUtil.h<62:19> [b3AabbUtil.h <62:19 62:20>]
REFERENCE_TYPE_USAGE bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <62:8 62:16>]
LOCAL_SYMBOL: b3AabbUtil.h<59:66> [b3AabbUtil.h <62:24 62:31>]
LOCAL_SYMBOL: b3AabbUtil.h<63:19> [b3AabbUtil.h <63:19 63:20>]
REFERENCE_TYPE_USAGE bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <63:8 63:16>]
LOCAL_SYMBOL: b3AabbUtil.h<59:66> [b3AabbUtil.h <63:24 63:31>]
LOCAL_SYMBOL: b3AabbUtil.h<64:19> [b3AabbUtil.h <64:19 64:20>]
REFERENCE_TYPE_USAGE bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <64:8 64:16>]
LOCAL_SYMBOL: b3AabbUtil.h<59:66> [b3AabbUtil.h <64:24 64:31>]
SYMBOL_FUNCTION const float & b3Min<float>(const float &, const float &)
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Min<float>(const float &, const float &) [b3AabbUtil.h <66:6 66:10>]
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Min<float>(const float &, const float &) [b3AabbUtil.h <66:12 66:16>]
LOCAL_SYMBOL: b3AabbUtil.h<62:19> [b3AabbUtil.h <66:18 66:19>]
LOCAL_SYMBOL: b3AabbUtil.h<63:19> [b3AabbUtil.h <66:25 66:26>]
LOCAL_SYMBOL: b3AabbUtil.h<64:19> [b3AabbUtil.h <66:33 66:34>]
LOCAL_SYMBOL: b3AabbUtil.h<60:53> [b3AabbUtil.h <66:42 66:48>]
SYMBOL_FUNCTION const float & b3Max<float>(const float &, const float &)
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Max<float>(const float &, const float &) [b3AabbUtil.h <67:6 67:10>]
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Max<float>(const float &, const float &) [b3AabbUtil.h <67:12 67:16>]
LOCAL_SYMBOL: b3AabbUtil.h<62:19> [b3AabbUtil.h <67:18 67:19>]
LOCAL_SYMBOL: b3AabbUtil.h<63:19> [b3AabbUtil.h <67:25 67:26>]
LOCAL_SYMBOL: b3AabbUtil.h<64:19> [b3AabbUtil.h <67:33 67:34>]
LOCAL_SYMBOL: b3AabbUtil.h<60:27> [b3AabbUtil.h <67:42 67:48>]
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Min<float>(const float &, const float &) [b3AabbUtil.h <69:6 69:10>]
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Min<float>(const float &, const float &) [b3AabbUtil.h <69:12 69:16>]
LOCAL_SYMBOL: b3AabbUtil.h<62:19> [b3AabbUtil.h <69:18 69:19>]
LOCAL_SYMBOL: b3AabbUtil.h<63:19> [b3AabbUtil.h <69:25 69:26>]
LOCAL_SYMBOL: b3AabbUtil.h<64:19> [b3AabbUtil.h <69:33 69:34>]
LOCAL_SYMBOL: b3AabbUtil.h<60:53> [b3AabbUtil.h <69:42 69:48>]
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Max<float>(const float &, const float &) [b3AabbUtil.h <70:6 70:10>]
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Max<float>(const float &, const float &) [b3AabbUtil.h <70:12 70:16>]
LOCAL_SYMBOL: b3AabbUtil.h<62:19> [b3AabbUtil.h <70:18 70:19>]
LOCAL_SYMBOL: b3AabbUtil.h<63:19> [b3AabbUtil.h <70:25 70:26>]
LOCAL_SYMBOL: b3AabbUtil.h<64:19> [b3AabbUtil.h <70:33 70:34>]
LOCAL_SYMBOL: b3AabbUtil.h<60:27> [b3AabbUtil.h <70:42 70:48>]
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Min<float>(const float &, const float &) [b3AabbUtil.h <72:6 72:10>]
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Min<float>(const float &, const float &) [b3AabbUtil.h <72:12 72:16>]
LOCAL_SYMBOL: b3AabbUtil.h<62:19> [b3AabbUtil.h <72:18 72:19>]
LOCAL_SYMBOL: b3AabbUtil.h<63:19> [b3AabbUtil.h <72:25 72:26>]
LOCAL_SYMBOL: b3AabbUtil.h<64:19> [b3AabbUtil.h <72:33 72:34>]
LOCAL_SYMBOL: b3AabbUtil.h<60:53> [b3AabbUtil.h <72:42 72:48>]
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Max<float>(const float &, const float &) [b3AabbUtil.h <73:6 73:10>]
REFERENCE_CALL bool b3TestTriangleAgainstAabb2(const b3Vector3 *, const b3Vector3 &, const b3Vector3 &) -> const float & b3Max<float>(const float &, const float &) [b3AabbUtil.h <73:12 73:16>]
LOCAL_SYMBOL: b3AabbUtil.h<62:19> [b3AabbUtil.h <73:18 73:19>]
LOCAL_SYMBOL: b3AabbUtil.h<63:19> [b3AabbUtil.h <73:25 73:26>]
LOCAL_SYMBOL: b3AabbUtil.h<64:19> [b3AabbUtil.h <73:33 73:34>]
LOCAL_SYMBOL: b3AabbUtil.h<60:27> [b3AabbUtil.h <73:42 73:48>]
SYMBOL_FUNCTION int b3Outcode(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <78:1 <78:21 78:29> 86:1>]
REFERENCE_TYPE_USAGE int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> int [b3AabbUtil.h <78:17 78:19>]
LOCAL_SYMBOL: b3AabbUtil.h<78:48> [b3AabbUtil.h <78:48 78:48>]
REFERENCE_TYPE_USAGE int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <78:37 78:45>]
LOCAL_SYMBOL: b3AabbUtil.h<78:67> [b3AabbUtil.h <78:67 78:76>]
REFERENCE_TYPE_USAGE int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <78:56 78:64>]
LOCAL_SYMBOL: b3AabbUtil.h<79:1> [b3AabbUtil.h <79:1 79:1>]
LOCAL_SYMBOL: b3AabbUtil.h<79:1> [b3AabbUtil.h <86:1 86:1>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <80:12 80:15>]
LOCAL_SYMBOL: b3AabbUtil.h<78:48> [b3AabbUtil.h <80:10 80:10>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <80:34 80:37>]
LOCAL_SYMBOL: b3AabbUtil.h<78:67> [b3AabbUtil.h <80:23 80:32>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <81:9 81:12>]
LOCAL_SYMBOL: b3AabbUtil.h<78:48> [b3AabbUtil.h <81:7 81:7>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <81:30 81:33>]
LOCAL_SYMBOL: b3AabbUtil.h<78:67> [b3AabbUtil.h <81:19 81:28>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <82:9 82:12>]
LOCAL_SYMBOL: b3AabbUtil.h<78:48> [b3AabbUtil.h <82:7 82:7>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <82:30 82:33>]
LOCAL_SYMBOL: b3AabbUtil.h<78:67> [b3AabbUtil.h <82:19 82:28>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <83:9 83:12>]
LOCAL_SYMBOL: b3AabbUtil.h<78:48> [b3AabbUtil.h <83:7 83:7>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <83:30 83:33>]
LOCAL_SYMBOL: b3AabbUtil.h<78:67> [b3AabbUtil.h <83:19 83:28>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <84:9 84:12>]
LOCAL_SYMBOL: b3AabbUtil.h<78:48> [b3AabbUtil.h <84:7 84:7>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <84:30 84:33>]
LOCAL_SYMBOL: b3AabbUtil.h<78:67> [b3AabbUtil.h <84:19 84:28>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <85:9 85:12>]
LOCAL_SYMBOL: b3AabbUtil.h<78:48> [b3AabbUtil.h <85:7 85:7>]
REFERENCE_CALL int b3Outcode(const b3Vector3 &, const b3Vector3 &) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <85:30 85:33>]
LOCAL_SYMBOL: b3AabbUtil.h<78:67> [b3AabbUtil.h <85:19 85:28>]
SYMBOL_FUNCTION bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) [b3AabbUtil.h <90:1 <90:22 90:31> 123:1>]
REFERENCE_TYPE_USAGE bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> bool [b3AabbUtil.h <90:17 90:20>]
LOCAL_SYMBOL: b3AabbUtil.h<90:50> [b3AabbUtil.h <90:50 90:56>]
REFERENCE_TYPE_USAGE bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> b3Vector3 [b3AabbUtil.h <90:39 90:47>]
LOCAL_SYMBOL: b3AabbUtil.h<91:28> [b3AabbUtil.h <91:28 91:42>]
REFERENCE_TYPE_USAGE bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> b3Vector3 [b3AabbUtil.h <91:17 91:25>]
LOCAL_SYMBOL: b3AabbUtil.h<92:30> [b3AabbUtil.h <92:30 92:36>]
REFERENCE_TYPE_USAGE bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> unsigned int [b3AabbUtil.h <92:17 92:24>]
LOCAL_SYMBOL: b3AabbUtil.h<93:27> [b3AabbUtil.h <93:27 93:32>]
REFERENCE_TYPE_USAGE bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> b3Vector3 [b3AabbUtil.h <93:17 93:25>]
LOCAL_SYMBOL: b3AabbUtil.h<94:21> [b3AabbUtil.h <94:21 94:24>]
REFERENCE_TYPE_USAGE bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> b3Scalar [b3AabbUtil.h <94:11 94:18>]
LOCAL_SYMBOL: b3AabbUtil.h<95:20> [b3AabbUtil.h <95:20 95:29>]
REFERENCE_TYPE_USAGE bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> b3Scalar [b3AabbUtil.h <95:11 95:18>]
LOCAL_SYMBOL: b3AabbUtil.h<96:20> [b3AabbUtil.h <96:20 96:29>]
REFERENCE_TYPE_USAGE bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> b3Scalar [b3AabbUtil.h <96:11 96:18>]
LOCAL_SYMBOL: b3AabbUtil.h<97:1> [b3AabbUtil.h <97:1 97:1>]
LOCAL_SYMBOL: b3AabbUtil.h<97:1> [b3AabbUtil.h <123:1 123:1>]
LOCAL_SYMBOL: b3AabbUtil.h<98:11> [b3AabbUtil.h <98:11 98:14>]
REFERENCE_TYPE_USAGE bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> b3Scalar [b3AabbUtil.h <98:2 98:9>]
LOCAL_SYMBOL: b3AabbUtil.h<98:17> [b3AabbUtil.h <98:17 98:21>]
LOCAL_SYMBOL: b3AabbUtil.h<98:24> [b3AabbUtil.h <98:24 98:28>]
LOCAL_SYMBOL: b3AabbUtil.h<98:31> [b3AabbUtil.h <98:31 98:35>]
LOCAL_SYMBOL: b3AabbUtil.h<98:38> [b3AabbUtil.h <98:38 98:42>]
LOCAL_SYMBOL: b3AabbUtil.h<94:21> [b3AabbUtil.h <99:2 99:5>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <99:29 99:32>]
LOCAL_SYMBOL: b3AabbUtil.h<93:27> [b3AabbUtil.h <99:10 99:15>]
LOCAL_SYMBOL: b3AabbUtil.h<92:30> [b3AabbUtil.h <99:17 99:23>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <99:46 99:49>]
LOCAL_SYMBOL: b3AabbUtil.h<90:50> [b3AabbUtil.h <99:38 99:44>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <99:72 99:75>]
LOCAL_SYMBOL: b3AabbUtil.h<91:28> [b3AabbUtil.h <99:56 99:70>]
LOCAL_SYMBOL: b3AabbUtil.h<98:11> [b3AabbUtil.h <100:2 100:5>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <100:31 100:34>]
LOCAL_SYMBOL: b3AabbUtil.h<93:27> [b3AabbUtil.h <100:10 100:15>]
LOCAL_SYMBOL: b3AabbUtil.h<92:30> [b3AabbUtil.h <100:19 100:25>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <100:48 100:51>]
LOCAL_SYMBOL: b3AabbUtil.h<90:50> [b3AabbUtil.h <100:40 100:46>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getX() const [b3AabbUtil.h <100:74 100:77>]
LOCAL_SYMBOL: b3AabbUtil.h<91:28> [b3AabbUtil.h <100:58 100:72>]
LOCAL_SYMBOL: b3AabbUtil.h<98:17> [b3AabbUtil.h <101:2 101:6>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <101:30 101:33>]
LOCAL_SYMBOL: b3AabbUtil.h<93:27> [b3AabbUtil.h <101:11 101:16>]
LOCAL_SYMBOL: b3AabbUtil.h<92:30> [b3AabbUtil.h <101:18 101:24>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <101:47 101:50>]
LOCAL_SYMBOL: b3AabbUtil.h<90:50> [b3AabbUtil.h <101:39 101:45>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <101:73 101:76>]
LOCAL_SYMBOL: b3AabbUtil.h<91:28> [b3AabbUtil.h <101:57 101:71>]
LOCAL_SYMBOL: b3AabbUtil.h<98:24> [b3AabbUtil.h <102:2 102:6>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <102:32 102:35>]
LOCAL_SYMBOL: b3AabbUtil.h<93:27> [b3AabbUtil.h <102:11 102:16>]
LOCAL_SYMBOL: b3AabbUtil.h<92:30> [b3AabbUtil.h <102:20 102:26>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <102:49 102:52>]
LOCAL_SYMBOL: b3AabbUtil.h<90:50> [b3AabbUtil.h <102:41 102:47>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getY() const [b3AabbUtil.h <102:75 102:78>]
LOCAL_SYMBOL: b3AabbUtil.h<91:28> [b3AabbUtil.h <102:59 102:73>]
LOCAL_SYMBOL: b3AabbUtil.h<94:21> [b3AabbUtil.h <104:8 104:11>]
LOCAL_SYMBOL: b3AabbUtil.h<98:24> [b3AabbUtil.h <104:15 104:19>]
LOCAL_SYMBOL: b3AabbUtil.h<98:17> [b3AabbUtil.h <104:26 104:30>]
LOCAL_SYMBOL: b3AabbUtil.h<98:11> [b3AabbUtil.h <104:34 104:37>]
LOCAL_SYMBOL: b3AabbUtil.h<98:17> [b3AabbUtil.h <107:6 107:10>]
LOCAL_SYMBOL: b3AabbUtil.h<94:21> [b3AabbUtil.h <107:14 107:17>]
LOCAL_SYMBOL: b3AabbUtil.h<94:21> [b3AabbUtil.h <108:3 108:6>]
LOCAL_SYMBOL: b3AabbUtil.h<98:17> [b3AabbUtil.h <108:10 108:14>]
LOCAL_SYMBOL: b3AabbUtil.h<98:24> [b3AabbUtil.h <110:6 110:10>]
LOCAL_SYMBOL: b3AabbUtil.h<98:11> [b3AabbUtil.h <110:14 110:17>]
LOCAL_SYMBOL: b3AabbUtil.h<98:11> [b3AabbUtil.h <111:3 111:6>]
LOCAL_SYMBOL: b3AabbUtil.h<98:24> [b3AabbUtil.h <111:10 111:14>]
LOCAL_SYMBOL: b3AabbUtil.h<98:31> [b3AabbUtil.h <113:2 113:6>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <113:30 113:33>]
LOCAL_SYMBOL: b3AabbUtil.h<93:27> [b3AabbUtil.h <113:11 113:16>]
LOCAL_SYMBOL: b3AabbUtil.h<92:30> [b3AabbUtil.h <113:18 113:24>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <113:47 113:50>]
LOCAL_SYMBOL: b3AabbUtil.h<90:50> [b3AabbUtil.h <113:39 113:45>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <113:73 113:76>]
LOCAL_SYMBOL: b3AabbUtil.h<91:28> [b3AabbUtil.h <113:57 113:71>]
LOCAL_SYMBOL: b3AabbUtil.h<98:38> [b3AabbUtil.h <114:2 114:6>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <114:32 114:35>]
LOCAL_SYMBOL: b3AabbUtil.h<93:27> [b3AabbUtil.h <114:11 114:16>]
LOCAL_SYMBOL: b3AabbUtil.h<92:30> [b3AabbUtil.h <114:20 114:26>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <114:49 114:52>]
LOCAL_SYMBOL: b3AabbUtil.h<90:50> [b3AabbUtil.h <114:41 114:47>]
REFERENCE_CALL bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) -> const b3Scalar & b3Vector3::getZ() const [b3AabbUtil.h <114:75 114:78>]
LOCAL_SYMBOL: b3AabbUtil.h<91:28> [b3AabbUtil.h <114:59 114:73>]
LOCAL_SYMBOL: b3AabbUtil.h<94:21> [b3AabbUtil.h <116:8 116:11>]
LOCAL_SYMBOL: b3AabbUtil.h<98:38> [b3AabbUtil.h <116:15 116:19>]
LOCAL_SYMBOL: b3AabbUtil.h<98:31> [b3AabbUtil.h <116:26 116:30>]
LOCAL_SYMBOL: b3AabbUtil.h<98:11> [b3AabbUtil.h <116:34 116:37>]
LOCAL_SYMBOL: b3AabbUtil.h<98:31> [b3AabbUtil.h <118:6 118:10>]
LOCAL_SYMBOL: b3AabbUtil.h<94:21> [b3AabbUtil.h <118:14 118:17>]
LOCAL_SYMBOL: b3AabbUtil.h<94:21> [b3AabbUtil.h <119:3 119:6>]
LOCAL_SYMBOL: b3AabbUtil.h<98:31> [b3AabbUtil.h <119:10 119:14>]
LOCAL_SYMBOL: b3AabbUtil.h<98:38> [b3AabbUtil.h <120:6 120:10>]
LOCAL_SYMBOL: b3AabbUtil.h<98:11> [b3AabbUtil.h <120:14 120:17>]
LOCAL_SYMBOL: b3AabbUtil.h<98:11> [b3AabbUtil.h <121:3 121:6>]
LOCAL_SYMBOL: b3AabbUtil.h<98:38> [b3AabbUtil.h <121:10 121:14>]
LOCAL_SYMBOL: b3AabbUtil.h<94:21> [b3AabbUtil.h <122:12 122:15>]
LOCAL_SYMBOL: b3AabbUtil.h<96:20> [b3AabbUtil.h <122:19 122:28>]
LOCAL_SYMBOL: b3AabbUtil.h<98:11> [b3AabbUtil.h <122:35 122:38>]
LOCAL_SYMBOL: b3AabbUtil.h<95:20> [b3AabbUtil.h <122:42 122:51>]
SYMBOL_FUNCTION bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) [b3AabbUtil.h <125:1 <125:22 125:30> 178:1>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> bool [b3AabbUtil.h <125:17 125:20>]
LOCAL_SYMBOL: b3AabbUtil.h<125:49> [b3AabbUtil.h <125:49 125:55>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <125:38 125:46>]
LOCAL_SYMBOL: b3AabbUtil.h<126:27> [b3AabbUtil.h <126:27 126:31>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <126:16 126:24>]
LOCAL_SYMBOL: b3AabbUtil.h<127:27> [b3AabbUtil.h <127:27 127:33>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <127:16 127:24>]
LOCAL_SYMBOL: b3AabbUtil.h<128:27> [b3AabbUtil.h <128:27 128:33>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <128:16 128:24>]
LOCAL_SYMBOL: b3AabbUtil.h<129:18> [b3AabbUtil.h <129:18 129:22>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <129:8 129:15>]
LOCAL_SYMBOL: b3AabbUtil.h<129:36> [b3AabbUtil.h <129:36 129:41>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <129:25 129:33>]
LOCAL_SYMBOL: b3AabbUtil.h<130:1> [b3AabbUtil.h <130:1 130:1>]
LOCAL_SYMBOL: b3AabbUtil.h<130:1> [b3AabbUtil.h <178:1 178:1>]
LOCAL_SYMBOL: b3AabbUtil.h<131:12> [b3AabbUtil.h <131:12 131:25>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <131:2 131:10>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) [b3AabbUtil.h <131:46 131:46>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <131:37 131:37>]
LOCAL_SYMBOL: b3AabbUtil.h<128:27> [b3AabbUtil.h <131:30 131:36>]
LOCAL_SYMBOL: b3AabbUtil.h<127:27> [b3AabbUtil.h <131:38 131:44>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <131:48 131:55>]
LOCAL_SYMBOL: b3AabbUtil.h<132:12> [b3AabbUtil.h <132:12 132:21>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <132:2 132:10>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 operator*(const b3Vector3 &, const b3Scalar &) [b3AabbUtil.h <132:42 132:42>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <132:33 132:33>]
LOCAL_SYMBOL: b3AabbUtil.h<128:27> [b3AabbUtil.h <132:26 132:32>]
LOCAL_SYMBOL: b3AabbUtil.h<127:27> [b3AabbUtil.h <132:34 132:40>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <132:44 132:51>]
LOCAL_SYMBOL: b3AabbUtil.h<133:12> [b3AabbUtil.h <133:12 133:17>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <133:2 133:10>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <133:29 133:29>]
LOCAL_SYMBOL: b3AabbUtil.h<125:49> [b3AabbUtil.h <133:21 133:27>]
LOCAL_SYMBOL: b3AabbUtil.h<132:12> [b3AabbUtil.h <133:31 133:40>]
LOCAL_SYMBOL: b3AabbUtil.h<134:12> [b3AabbUtil.h <134:12 134:17>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <134:2 134:10>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <134:27 134:27>]
LOCAL_SYMBOL: b3AabbUtil.h<126:27> [b3AabbUtil.h <134:21 134:25>]
LOCAL_SYMBOL: b3AabbUtil.h<132:12> [b3AabbUtil.h <134:29 134:38>]
LOCAL_SYMBOL: b3AabbUtil.h<135:6> [b3AabbUtil.h <135:6 135:18>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> int [b3AabbUtil.h <135:2 135:4>]
SYMBOL_FUNCTION int b3Outcode(const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> int b3Outcode(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <135:22 135:30>]
LOCAL_SYMBOL: b3AabbUtil.h<133:12> [b3AabbUtil.h <135:32 135:37>]
LOCAL_SYMBOL: b3AabbUtil.h<131:12> [b3AabbUtil.h <135:39 135:52>]
LOCAL_SYMBOL: b3AabbUtil.h<136:6> [b3AabbUtil.h <136:6 136:18>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> int [b3AabbUtil.h <136:2 136:4>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> int b3Outcode(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <136:22 136:30>]
LOCAL_SYMBOL: b3AabbUtil.h<134:12> [b3AabbUtil.h <136:32 136:37>]
LOCAL_SYMBOL: b3AabbUtil.h<131:12> [b3AabbUtil.h <136:39 136:52>]
LOCAL_SYMBOL: b3AabbUtil.h<135:6> [b3AabbUtil.h <137:7 137:19>]
LOCAL_SYMBOL: b3AabbUtil.h<136:6> [b3AabbUtil.h <137:23 137:35>]
LOCAL_SYMBOL: b3AabbUtil.h<138:2> [b3AabbUtil.h <138:2 138:2>]
LOCAL_SYMBOL: b3AabbUtil.h<138:2> [b3AabbUtil.h <176:2 176:2>]
LOCAL_SYMBOL: b3AabbUtil.h<139:12> [b3AabbUtil.h <139:12 139:23>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <139:3 139:10>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <139:27 139:34>]
LOCAL_SYMBOL: b3AabbUtil.h<140:12> [b3AabbUtil.h <140:12 140:22>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <140:3 140:10>]
LOCAL_SYMBOL: b3AabbUtil.h<129:18> [b3AabbUtil.h <140:27 140:31>]
LOCAL_SYMBOL: b3AabbUtil.h<141:13> [b3AabbUtil.h <141:13 141:13>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <141:3 141:11>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <141:24 141:24>]
LOCAL_SYMBOL: b3AabbUtil.h<134:12> [b3AabbUtil.h <141:17 141:22>]
LOCAL_SYMBOL: b3AabbUtil.h<133:12> [b3AabbUtil.h <141:26 141:31>]
LOCAL_SYMBOL: b3AabbUtil.h<142:7> [b3AabbUtil.h <142:7 142:7>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> int [b3AabbUtil.h <142:3 142:5>]
LOCAL_SYMBOL: b3AabbUtil.h<143:12> [b3AabbUtil.h <143:12 143:19>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <143:3 143:10>]
LOCAL_SYMBOL: b3AabbUtil.h<144:13> [b3AabbUtil.h <144:13 144:21>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <144:3 144:11>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3AabbUtil.h <144:25 144:37>]
LOCAL_SYMBOL: b3AabbUtil.h<145:7> [b3AabbUtil.h <145:7 145:9>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> int [b3AabbUtil.h <145:3 145:5>]
LOCAL_SYMBOL: b3AabbUtil.h<147:12> [b3AabbUtil.h <147:12 147:12>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> int [b3AabbUtil.h <147:8 147:10>]
LOCAL_SYMBOL: b3AabbUtil.h<147:12> [b3AabbUtil.h <147:16 147:16>]
LOCAL_SYMBOL: b3AabbUtil.h<147:12> [b3AabbUtil.h <147:20 147:20>]
LOCAL_SYMBOL: b3AabbUtil.h<148:3> [b3AabbUtil.h <148:3 148:3>]
LOCAL_SYMBOL: b3AabbUtil.h<148:3> [b3AabbUtil.h <169:3 169:3>]
LOCAL_SYMBOL: b3AabbUtil.h<142:7> [b3AabbUtil.h <149:9 149:9>]
LOCAL_SYMBOL: b3AabbUtil.h<142:7> [b3AabbUtil.h <149:16 149:16>]
LOCAL_SYMBOL: b3AabbUtil.h<142:7> [b3AabbUtil.h <149:26 149:26>]
LOCAL_SYMBOL: b3AabbUtil.h<150:4> [b3AabbUtil.h <150:4 150:4>]
LOCAL_SYMBOL: b3AabbUtil.h<150:4> [b3AabbUtil.h <167:4 167:4>]
LOCAL_SYMBOL: b3AabbUtil.h<135:6> [b3AabbUtil.h <151:9 151:21>]
LOCAL_SYMBOL: b3AabbUtil.h<145:7> [b3AabbUtil.h <151:25 151:27>]
LOCAL_SYMBOL: b3AabbUtil.h<152:5> [b3AabbUtil.h <152:5 152:5>]
LOCAL_SYMBOL: b3AabbUtil.h<152:5> [b3AabbUtil.h <160:5 160:5>]
LOCAL_SYMBOL: b3AabbUtil.h<153:15> [b3AabbUtil.h <153:15 153:20>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <153:6 153:13>]
LOCAL_SYMBOL: b3AabbUtil.h<133:12> [b3AabbUtil.h <153:26 153:31>]
LOCAL_SYMBOL: b3AabbUtil.h<142:7> [b3AabbUtil.h <153:33 153:33>]
LOCAL_SYMBOL: b3AabbUtil.h<131:12> [b3AabbUtil.h <153:38 153:51>]
LOCAL_SYMBOL: b3AabbUtil.h<142:7> [b3AabbUtil.h <153:53 153:53>]
LOCAL_SYMBOL: b3AabbUtil.h<143:12> [b3AabbUtil.h <153:56 153:63>]
LOCAL_SYMBOL: b3AabbUtil.h<141:13> [b3AabbUtil.h <153:68 153:68>]
LOCAL_SYMBOL: b3AabbUtil.h<142:7> [b3AabbUtil.h <153:70 153:70>]
LOCAL_SYMBOL: b3AabbUtil.h<139:12> [b3AabbUtil.h <154:10 154:21>]
LOCAL_SYMBOL: b3AabbUtil.h<153:15> [b3AabbUtil.h <154:26 154:31>]
LOCAL_SYMBOL: b3AabbUtil.h<155:6> [b3AabbUtil.h <155:6 155:6>]
LOCAL_SYMBOL: b3AabbUtil.h<155:6> [b3AabbUtil.h <159:6 159:6>]
LOCAL_SYMBOL: b3AabbUtil.h<139:12> [b3AabbUtil.h <156:7 156:18>]
LOCAL_SYMBOL: b3AabbUtil.h<153:15> [b3AabbUtil.h <156:22 156:27>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> void b3Vector3::setValue(const b3Scalar &, const b3Scalar &, const b3Scalar &) [b3AabbUtil.h <157:17 157:24>]
LOCAL_SYMBOL: b3AabbUtil.h<144:13> [b3AabbUtil.h <157:7 157:15>]
LOCAL_SYMBOL: b3AabbUtil.h<144:13> [b3AabbUtil.h <158:7 158:15>]
LOCAL_SYMBOL: b3AabbUtil.h<142:7> [b3AabbUtil.h <158:17 158:17>]
LOCAL_SYMBOL: b3AabbUtil.h<143:12> [b3AabbUtil.h <158:22 158:29>]
LOCAL_SYMBOL: b3AabbUtil.h<136:6> [b3AabbUtil.h <161:14 161:26>]
LOCAL_SYMBOL: b3AabbUtil.h<145:7> [b3AabbUtil.h <161:30 161:32>]
LOCAL_SYMBOL: b3AabbUtil.h<162:5> [b3AabbUtil.h <162:5 162:5>]
LOCAL_SYMBOL: b3AabbUtil.h<162:5> [b3AabbUtil.h <165:5 165:5>]
LOCAL_SYMBOL: b3AabbUtil.h<163:15> [b3AabbUtil.h <163:15 163:20>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <163:6 163:13>]
LOCAL_SYMBOL: b3AabbUtil.h<133:12> [b3AabbUtil.h <163:26 163:31>]
LOCAL_SYMBOL: b3AabbUtil.h<142:7> [b3AabbUtil.h <163:33 163:33>]
LOCAL_SYMBOL: b3AabbUtil.h<131:12> [b3AabbUtil.h <163:38 163:51>]
LOCAL_SYMBOL: b3AabbUtil.h<142:7> [b3AabbUtil.h <163:53 163:53>]
LOCAL_SYMBOL: b3AabbUtil.h<143:12> [b3AabbUtil.h <163:56 163:63>]
LOCAL_SYMBOL: b3AabbUtil.h<141:13> [b3AabbUtil.h <163:68 163:68>]
LOCAL_SYMBOL: b3AabbUtil.h<142:7> [b3AabbUtil.h <163:70 163:70>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> void b3SetMin<float>(float &, const float &) [b3AabbUtil.h <164:6 164:13>]
LOCAL_SYMBOL: b3AabbUtil.h<140:12> [b3AabbUtil.h <164:15 164:25>]
LOCAL_SYMBOL: b3AabbUtil.h<163:15> [b3AabbUtil.h <164:28 164:33>]
LOCAL_SYMBOL: b3AabbUtil.h<145:7> [b3AabbUtil.h <166:5 166:7>]
LOCAL_SYMBOL: b3AabbUtil.h<143:12> [b3AabbUtil.h <168:4 168:11>]
REFERENCE_TYPE_USAGE bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <168:15 168:22>]
LOCAL_SYMBOL: b3AabbUtil.h<139:12> [b3AabbUtil.h <170:7 170:18>]
LOCAL_SYMBOL: b3AabbUtil.h<140:12> [b3AabbUtil.h <170:23 170:33>]
LOCAL_SYMBOL: b3AabbUtil.h<171:3> [b3AabbUtil.h <171:3 171:3>]
LOCAL_SYMBOL: b3AabbUtil.h<171:3> [b3AabbUtil.h <175:3 175:3>]
LOCAL_SYMBOL: b3AabbUtil.h<129:18> [b3AabbUtil.h <172:4 172:8>]
LOCAL_SYMBOL: b3AabbUtil.h<139:12> [b3AabbUtil.h <172:12 172:23>]
REFERENCE_CALL bool b3RayAabb(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, b3Scalar &, b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3AabbUtil.h <173:11 173:11>]
LOCAL_SYMBOL: b3AabbUtil.h<129:36> [b3AabbUtil.h <173:4 173:9>]
LOCAL_SYMBOL: b3AabbUtil.h<144:13> [b3AabbUtil.h <173:13 173:21>]
SYMBOL_FUNCTION void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) [b3AabbUtil.h <182:1 <182:22 182:36> 190:1>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> void [b3AabbUtil.h <182:17 182:20>]
LOCAL_SYMBOL: b3AabbUtil.h<182:55> [b3AabbUtil.h <182:55 182:65>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <182:44 182:52>]
LOCAL_SYMBOL: b3AabbUtil.h<182:77> [b3AabbUtil.h <182:77 182:82>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <182:68 182:75>]
LOCAL_SYMBOL: b3AabbUtil.h<182:103> [b3AabbUtil.h <182:103 182:103>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Transform [b3AabbUtil.h <182:90 182:100>]
LOCAL_SYMBOL: b3AabbUtil.h<182:116> [b3AabbUtil.h <182:116 182:125>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <182:105 182:113>]
LOCAL_SYMBOL: b3AabbUtil.h<182:138> [b3AabbUtil.h <182:138 182:147>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <182:127 182:135>]
LOCAL_SYMBOL: b3AabbUtil.h<183:1> [b3AabbUtil.h <183:1 183:1>]
LOCAL_SYMBOL: b3AabbUtil.h<183:1> [b3AabbUtil.h <190:1 190:1>]
LOCAL_SYMBOL: b3AabbUtil.h<184:12> [b3AabbUtil.h <184:12 184:32>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <184:2 184:10>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <184:47 184:47>]
LOCAL_SYMBOL: b3AabbUtil.h<182:55> [b3AabbUtil.h <184:36 184:46>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3AabbUtil.h <184:48 184:60>]
LOCAL_SYMBOL: b3AabbUtil.h<182:77> [b3AabbUtil.h <184:62 184:67>]
LOCAL_SYMBOL: b3AabbUtil.h<182:77> [b3AabbUtil.h <184:69 184:74>]
LOCAL_SYMBOL: b3AabbUtil.h<182:77> [b3AabbUtil.h <184:76 184:81>]
LOCAL_SYMBOL: b3AabbUtil.h<185:14> [b3AabbUtil.h <185:14 185:18>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Matrix3x3 [b3AabbUtil.h <185:2 185:12>]
SYMBOL_FUNCTION b3Matrix3x3 b3Matrix3x3::absolute() const
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Matrix3x3 b3Matrix3x3::absolute() const [b3AabbUtil.h <185:35 185:42>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> const b3Matrix3x3 & b3Transform::getBasis() const [b3AabbUtil.h <185:24 185:31>]
LOCAL_SYMBOL: b3AabbUtil.h<182:103> [b3AabbUtil.h <185:22 185:22>]
LOCAL_SYMBOL: b3AabbUtil.h<186:12> [b3AabbUtil.h <186:12 186:17>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <186:2 186:10>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> void b3Vector3::b3Vector3(const b3Vector3 &) [b3AabbUtil.h <186:33 186:33>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> const b3Vector3 & b3Transform::getOrigin() const [b3AabbUtil.h <186:23 186:31>]
LOCAL_SYMBOL: b3AabbUtil.h<182:103> [b3AabbUtil.h <186:21 186:21>]
LOCAL_SYMBOL: b3AabbUtil.h<187:15> [b3AabbUtil.h <187:15 187:20>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <187:5 187:13>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const [b3AabbUtil.h <187:46 187:49>]
LOCAL_SYMBOL: b3AabbUtil.h<184:12> [b3AabbUtil.h <187:24 187:44>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Matrix3x3::operator[](int) [b3AabbUtil.h <187:57 187:57>]
LOCAL_SYMBOL: b3AabbUtil.h<185:14> [b3AabbUtil.h <187:52 187:56>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Matrix3x3::operator[](int) [b3AabbUtil.h <187:67 187:67>]
LOCAL_SYMBOL: b3AabbUtil.h<185:14> [b3AabbUtil.h <187:62 187:66>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Matrix3x3::operator[](int) [b3AabbUtil.h <187:77 187:77>]
LOCAL_SYMBOL: b3AabbUtil.h<185:14> [b3AabbUtil.h <187:72 187:76>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3AabbUtil.h <188:13 188:13>]
LOCAL_SYMBOL: b3AabbUtil.h<182:116> [b3AabbUtil.h <188:2 188:11>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <188:22 188:22>]
LOCAL_SYMBOL: b3AabbUtil.h<186:12> [b3AabbUtil.h <188:15 188:20>]
LOCAL_SYMBOL: b3AabbUtil.h<187:15> [b3AabbUtil.h <188:24 188:29>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3AabbUtil.h <189:13 189:13>]
LOCAL_SYMBOL: b3AabbUtil.h<182:138> [b3AabbUtil.h <189:2 189:11>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <189:22 189:22>]
LOCAL_SYMBOL: b3AabbUtil.h<186:12> [b3AabbUtil.h <189:15 189:20>]
LOCAL_SYMBOL: b3AabbUtil.h<187:15> [b3AabbUtil.h <189:24 189:29>]
SYMBOL_FUNCTION void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) [b3AabbUtil.h <193:1 <193:22 193:36> 207:1>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> void [b3AabbUtil.h <193:17 193:20>]
LOCAL_SYMBOL: b3AabbUtil.h<193:55> [b3AabbUtil.h <193:55 193:66>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <193:44 193:52>]
LOCAL_SYMBOL: b3AabbUtil.h<193:85> [b3AabbUtil.h <193:85 193:96>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <193:74 193:82>]
LOCAL_SYMBOL: b3AabbUtil.h<193:108> [b3AabbUtil.h <193:108 193:113>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <193:99 193:106>]
LOCAL_SYMBOL: b3AabbUtil.h<193:134> [b3AabbUtil.h <193:134 193:138>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Transform [b3AabbUtil.h <193:121 193:131>]
LOCAL_SYMBOL: b3AabbUtil.h<193:151> [b3AabbUtil.h <193:151 193:160>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <193:140 193:148>]
LOCAL_SYMBOL: b3AabbUtil.h<193:173> [b3AabbUtil.h <193:173 193:182>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <193:162 193:170>]
LOCAL_SYMBOL: b3AabbUtil.h<194:1> [b3AabbUtil.h <194:1 194:1>]
LOCAL_SYMBOL: b3AabbUtil.h<194:1> [b3AabbUtil.h <207:1 207:1>]
LOCAL_SYMBOL: b3AabbUtil.h<198:13> [b3AabbUtil.h <198:13 198:28>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <198:3 198:11>]
SYMBOL_FUNCTION b3Vector3 operator*(const b3Scalar &, const b3Vector3 &)
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 operator*(const b3Scalar &, const b3Vector3 &) [b3AabbUtil.h <198:45 198:45>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <198:32 198:39>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <198:59 198:59>]
LOCAL_SYMBOL: b3AabbUtil.h<193:85> [b3AabbUtil.h <198:47 198:58>]
LOCAL_SYMBOL: b3AabbUtil.h<193:55> [b3AabbUtil.h <198:60 198:71>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) [b3AabbUtil.h <199:19 199:20>]
LOCAL_SYMBOL: b3AabbUtil.h<198:13> [b3AabbUtil.h <199:3 199:18>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3AabbUtil.h <199:21 199:33>]
LOCAL_SYMBOL: b3AabbUtil.h<193:108> [b3AabbUtil.h <199:35 199:40>]
LOCAL_SYMBOL: b3AabbUtil.h<193:108> [b3AabbUtil.h <199:42 199:47>]
LOCAL_SYMBOL: b3AabbUtil.h<193:108> [b3AabbUtil.h <199:49 199:54>]
LOCAL_SYMBOL: b3AabbUtil.h<201:13> [b3AabbUtil.h <201:13 201:23>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <201:3 201:11>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 operator*(const b3Scalar &, const b3Vector3 &) [b3AabbUtil.h <201:40 201:40>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Scalar [b3AabbUtil.h <201:27 201:34>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <201:54 201:54>]
LOCAL_SYMBOL: b3AabbUtil.h<193:85> [b3AabbUtil.h <201:42 201:53>]
LOCAL_SYMBOL: b3AabbUtil.h<193:55> [b3AabbUtil.h <201:55 201:66>]
LOCAL_SYMBOL: b3AabbUtil.h<202:15> [b3AabbUtil.h <202:15 202:19>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Matrix3x3 [b3AabbUtil.h <202:3 202:13>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Matrix3x3 b3Matrix3x3::absolute() const [b3AabbUtil.h <202:40 202:47>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> const b3Matrix3x3 & b3Transform::getBasis() const [b3AabbUtil.h <202:29 202:36>]
LOCAL_SYMBOL: b3AabbUtil.h<193:134> [b3AabbUtil.h <202:23 202:27>]
LOCAL_SYMBOL: b3AabbUtil.h<203:13> [b3AabbUtil.h <203:13 203:18>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <203:3 203:11>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 b3Transform::operator()(const b3Vector3 &) const [b3AabbUtil.h <203:27 203:27>]
LOCAL_SYMBOL: b3AabbUtil.h<193:134> [b3AabbUtil.h <203:22 203:26>]
LOCAL_SYMBOL: b3AabbUtil.h<201:13> [b3AabbUtil.h <203:28 203:38>]
LOCAL_SYMBOL: b3AabbUtil.h<204:19> [b3AabbUtil.h <204:19 204:24>]
REFERENCE_TYPE_USAGE void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 [b3AabbUtil.h <204:9 204:17>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 b3Vector3::dot3(const b3Vector3 &, const b3Vector3 &, const b3Vector3 &) const [b3AabbUtil.h <204:45 204:48>]
LOCAL_SYMBOL: b3AabbUtil.h<198:13> [b3AabbUtil.h <204:28 204:43>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Matrix3x3::operator[](int) [b3AabbUtil.h <204:56 204:56>]
LOCAL_SYMBOL: b3AabbUtil.h<202:15> [b3AabbUtil.h <204:51 204:55>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Matrix3x3::operator[](int) [b3AabbUtil.h <204:66 204:66>]
LOCAL_SYMBOL: b3AabbUtil.h<202:15> [b3AabbUtil.h <204:61 204:65>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Matrix3x3::operator[](int) [b3AabbUtil.h <204:76 204:76>]
LOCAL_SYMBOL: b3AabbUtil.h<202:15> [b3AabbUtil.h <204:71 204:75>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3AabbUtil.h <205:14 205:14>]
LOCAL_SYMBOL: b3AabbUtil.h<193:151> [b3AabbUtil.h <205:3 205:12>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <205:22 205:22>]
LOCAL_SYMBOL: b3AabbUtil.h<203:13> [b3AabbUtil.h <205:16 205:21>]
LOCAL_SYMBOL: b3AabbUtil.h<204:19> [b3AabbUtil.h <205:23 205:28>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3AabbUtil.h <206:14 206:14>]
LOCAL_SYMBOL: b3AabbUtil.h<193:173> [b3AabbUtil.h <206:3 206:12>]
REFERENCE_CALL void b3TransformAabb(const b3Vector3 &, const b3Vector3 &, b3Scalar, const b3Transform &, b3Vector3 &, b3Vector3 &) -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3AabbUtil.h <206:22 206:22>]
LOCAL_SYMBOL: b3AabbUtil.h<203:13> [b3AabbUtil.h <206:16 206:21>]
LOCAL_SYMBOL: b3AabbUtil.h<204:19> [b3AabbUtil.h <206:23 206:28>]
SYMBOL_FUNCTION unsigned int b3TestQuantizedAabbAgainstQuantizedAabb(const unsigned short *, const unsigned short *, const unsigned short *, const unsigned short *) [b3AabbUtil.h <212:2 <212:27 212:65> 218:2>]
REFERENCE_TYPE_USAGE unsigned int b3TestQuantizedAabbAgainstQuantizedAabb(const unsigned short *, const unsigned short *, const unsigned short *, const unsigned short *) -> unsigned int [b3AabbUtil.h <212:18 212:25>]
LOCAL_SYMBOL: b3AabbUtil.h<212:93> [b3AabbUtil.h <212:93 212:100>]
REFERENCE_TYPE_USAGE unsigned int b3TestQuantizedAabbAgainstQuantizedAabb(const unsigned short *, const unsigned short *, const unsigned short *, const unsigned short *) -> unsigned short [b3AabbUtil.h <212:73 212:80>]
LOCAL_SYMBOL: b3AabbUtil.h<212:128> [b3AabbUtil.h <212:128 212:135>]
REFERENCE_TYPE_USAGE unsigned int b3TestQuantizedAabbAgainstQuantizedAabb(const unsigned short *, const unsigned short *, const unsigned short *, const unsigned short *) -> unsigned short [b3AabbUtil.h <212:108 212:115>]
LOCAL_SYMBOL: b3AabbUtil.h<212:163> [b3AabbUtil.h <212:163 212:170>]
REFERENCE_TYPE_USAGE unsigned int b3TestQuantizedAabbAgainstQuantizedAabb(const unsigned short *, const unsigned short *, const unsigned short *, const unsigned short *) -> unsigned short [b3AabbUtil.h <212:143 212:150>]
LOCAL_SYMBOL: b3AabbUtil.h<212:198> [b3AabbUtil.h <212:198 212:205>]
REFERENCE_TYPE_USAGE unsigned int b3TestQuantizedAabbAgainstQuantizedAabb(const unsigned short *, const unsigned short *, const unsigned short *, const unsigned short *) -> unsigned short [b3AabbUtil.h <212:178 212:185>]
LOCAL_SYMBOL: b3AabbUtil.h<213:2> [b3AabbUtil.h <213:2 213:2>]
LOCAL_SYMBOL: b3AabbUtil.h<213:2> [b3AabbUtil.h <218:2 218:2>]
REFERENCE_TYPE_USAGE unsigned int b3TestQuantizedAabbAgainstQuantizedAabb(const unsigned short *, const unsigned short *, const unsigned short *, const unsigned short *) -> unsigned int [b3AabbUtil.h <214:22 214:29>]
SYMBOL_FUNCTION int b3Select(unsigned int, int, int)
REFERENCE_CALL unsigned int b3TestQuantizedAabbAgainstQuantizedAabb(const unsigned short *, const unsigned short *, const unsigned short *, const unsigned short *) -> int b3Select(unsigned int, int, int) [b3AabbUtil.h <214:36 214:43>]
REFERENCE_TYPE_USAGE unsigned int b3TestQuantizedAabbAgainstQuantizedAabb(const unsigned short *, const unsigned short *, const unsigned short *, const unsigned short *) -> unsigned int [b3AabbUtil.h <214:46 214:53>]
LOCAL_SYMBOL: b3AabbUtil.h<212:93> [b3AabbUtil.h <214:57 214:64>]
LOCAL_SYMBOL: b3AabbUtil.h<212:198> [b3AabbUtil.h <214:72 214:79>]
LOCAL_SYMBOL: b3AabbUtil.h<212:128> [b3AabbUtil.h <214:88 214:95>]
LOCAL_SYMBOL: b3AabbUtil.h<212:163> [b3AabbUtil.h <214:103 214:110>]
LOCAL_SYMBOL: b3AabbUtil.h<212:93> [b3AabbUtil.h <215:7 215:14>]
LOCAL_SYMBOL: b3AabbUtil.h<212:198> [b3AabbUtil.h <215:22 215:29>]
LOCAL_SYMBOL: b3AabbUtil.h<212:128> [b3AabbUtil.h <215:38 215:45>]
LOCAL_SYMBOL: b3AabbUtil.h<212:163> [b3AabbUtil.h <215:53 215:60>]
LOCAL_SYMBOL: b3AabbUtil.h<212:93> [b3AabbUtil.h <216:7 216:14>]
LOCAL_SYMBOL: b3AabbUtil.h<212:198> [b3AabbUtil.h <216:22 216:29>]
LOCAL_SYMBOL: b3AabbUtil.h<212:128> [b3AabbUtil.h <216:38 216:45>]
LOCAL_SYMBOL: b3AabbUtil.h<212:163> [b3AabbUtil.h <216:53 216:60>]
SYMBOL_STRUCT b3DbvtAabbMm [b3DynamicBvh.h <130:1 <130:8 130:19> 171:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<131:1> [b3DynamicBvh.h <131:1 131:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<131:1> [b3DynamicBvh.h <171:1 171:1>]
SYMBOL_METHOD public b3Vector3 b3DbvtAabbMm::Center() const [b3DynamicBvh.h <132:2 <132:29 132:34> 132:65>]
REFERENCE_TYPE_USAGE b3Vector3 b3DbvtAabbMm::Center() const -> b3Vector3 [b3DynamicBvh.h <132:17 132:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<132:44> [b3DynamicBvh.h <132:44 132:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<132:44> [b3DynamicBvh.h <132:65 132:65>]
REFERENCE_CALL b3Vector3 b3DbvtAabbMm::Center() const -> b3Vector3 operator/(const b3Vector3 &, const b3Scalar &) [b3DynamicBvh.h <132:60 132:60>]
REFERENCE_CALL b3Vector3 b3DbvtAabbMm::Center() const -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <132:56 132:56>]
REFERENCE_USAGE b3Vector3 b3DbvtAabbMm::Center() const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <132:54 132:55>]
REFERENCE_USAGE b3Vector3 b3DbvtAabbMm::Center() const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <132:57 132:58>]
SYMBOL_METHOD public b3Vector3 b3DbvtAabbMm::Lengths() const [b3DynamicBvh.h <133:2 <133:29 133:35> 133:62>]
REFERENCE_TYPE_USAGE b3Vector3 b3DbvtAabbMm::Lengths() const -> b3Vector3 [b3DynamicBvh.h <133:17 133:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<133:45> [b3DynamicBvh.h <133:45 133:45>]
LOCAL_SYMBOL: b3DynamicBvh.h<133:45> [b3DynamicBvh.h <133:62 133:62>]
REFERENCE_CALL b3Vector3 b3DbvtAabbMm::Lengths() const -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <133:56 133:56>]
REFERENCE_USAGE b3Vector3 b3DbvtAabbMm::Lengths() const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <133:54 133:55>]
REFERENCE_USAGE b3Vector3 b3DbvtAabbMm::Lengths() const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <133:57 133:58>]
SYMBOL_METHOD public b3Vector3 b3DbvtAabbMm::Extents() const [b3DynamicBvh.h <134:2 <134:29 134:35> 134:66>]
REFERENCE_TYPE_USAGE b3Vector3 b3DbvtAabbMm::Extents() const -> b3Vector3 [b3DynamicBvh.h <134:17 134:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<134:45> [b3DynamicBvh.h <134:45 134:45>]
LOCAL_SYMBOL: b3DynamicBvh.h<134:45> [b3DynamicBvh.h <134:66 134:66>]
REFERENCE_CALL b3Vector3 b3DbvtAabbMm::Extents() const -> b3Vector3 operator/(const b3Vector3 &, const b3Scalar &) [b3DynamicBvh.h <134:61 134:61>]
REFERENCE_CALL b3Vector3 b3DbvtAabbMm::Extents() const -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <134:57 134:57>]
REFERENCE_USAGE b3Vector3 b3DbvtAabbMm::Extents() const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <134:55 134:56>]
REFERENCE_USAGE b3Vector3 b3DbvtAabbMm::Extents() const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <134:58 134:59>]
SYMBOL_METHOD public const b3Vector3 & b3DbvtAabbMm::Mins() const [b3DynamicBvh.h <135:2 <135:34 135:37> 135:61>]
REFERENCE_TYPE_USAGE const b3Vector3 & b3DbvtAabbMm::Mins() const -> b3Vector3 [b3DynamicBvh.h <135:23 135:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<135:47> [b3DynamicBvh.h <135:47 135:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<135:47> [b3DynamicBvh.h <135:61 135:61>]
REFERENCE_USAGE const b3Vector3 & b3DbvtAabbMm::Mins() const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <135:56 135:57>]
SYMBOL_METHOD public const b3Vector3 & b3DbvtAabbMm::Maxs() const [b3DynamicBvh.h <136:2 <136:34 136:37> 136:61>]
REFERENCE_TYPE_USAGE const b3Vector3 & b3DbvtAabbMm::Maxs() const -> b3Vector3 [b3DynamicBvh.h <136:23 136:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<136:47> [b3DynamicBvh.h <136:47 136:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<136:47> [b3DynamicBvh.h <136:61 136:61>]
REFERENCE_USAGE const b3Vector3 & b3DbvtAabbMm::Maxs() const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <136:56 136:57>]
SYMBOL_METHOD public static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <137:30 137:35>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3DbvtAabbMm [b3DynamicBvh.h <137:16 137:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<137:54> [b3DynamicBvh.h <137:54 137:54>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <137:43 137:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<137:73> [b3DynamicBvh.h <137:73 137:73>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <137:62 137:70>]
SYMBOL_METHOD public static b3DbvtAabbMm b3DbvtAabbMm::FromCR(const b3Vector3 &, b3Scalar) [b3DynamicBvh.h <138:30 138:35>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCR(const b3Vector3 &, b3Scalar) -> b3DbvtAabbMm [b3DynamicBvh.h <138:16 138:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<138:54> [b3DynamicBvh.h <138:54 138:54>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCR(const b3Vector3 &, b3Scalar) -> b3Vector3 [b3DynamicBvh.h <138:43 138:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<138:65> [b3DynamicBvh.h <138:65 138:65>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCR(const b3Vector3 &, b3Scalar) -> b3Scalar [b3DynamicBvh.h <138:56 138:63>]
SYMBOL_METHOD public static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <139:30 139:35>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> b3DbvtAabbMm [b3DynamicBvh.h <139:16 139:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<139:54> [b3DynamicBvh.h <139:54 139:55>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <139:43 139:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<139:74> [b3DynamicBvh.h <139:74 139:75>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <139:63 139:71>]
SYMBOL_METHOD public static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) [b3DynamicBvh.h <140:30 140:39>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> b3DbvtAabbMm [b3DynamicBvh.h <140:16 140:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<140:58> [b3DynamicBvh.h <140:58 140:60>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> b3Vector3 [b3DynamicBvh.h <140:47 140:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<140:66> [b3DynamicBvh.h <140:66 140:66>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> int [b3DynamicBvh.h <140:62 140:64>]
SYMBOL_METHOD public static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) [b3DynamicBvh.h <141:30 141:39>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> b3DbvtAabbMm [b3DynamicBvh.h <141:16 141:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<141:59> [b3DynamicBvh.h <141:59 141:62>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> b3Vector3 [b3DynamicBvh.h <141:47 141:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<141:68> [b3DynamicBvh.h <141:68 141:68>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> int [b3DynamicBvh.h <141:64 141:66>]
SYMBOL_METHOD public void b3DbvtAabbMm::Expand(const b3Vector3 &) [b3DynamicBvh.h <142:25 142:30>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::Expand(const b3Vector3 &) -> void [b3DynamicBvh.h <142:17 142:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<142:49> [b3DynamicBvh.h <142:49 142:49>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::Expand(const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <142:38 142:46>]
SYMBOL_METHOD public void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) [b3DynamicBvh.h <143:25 143:36>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> void [b3DynamicBvh.h <143:17 143:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<143:55> [b3DynamicBvh.h <143:55 143:55>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <143:44 143:52>]
SYMBOL_METHOD public bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const [b3DynamicBvh.h <144:25 144:31>]
REFERENCE_TYPE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> bool [b3DynamicBvh.h <144:17 144:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<144:53> [b3DynamicBvh.h <144:53 144:53>]
REFERENCE_TYPE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3DbvtAabbMm [b3DynamicBvh.h <144:39 144:50>]
SYMBOL_METHOD public int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const [b3DynamicBvh.h <145:25 145:32>]
REFERENCE_TYPE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> int [b3DynamicBvh.h <145:17 145:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<145:51> [b3DynamicBvh.h <145:51 145:51>]
REFERENCE_TYPE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 [b3DynamicBvh.h <145:40 145:48>]
LOCAL_SYMBOL: b3DynamicBvh.h<145:62> [b3DynamicBvh.h <145:62 145:62>]
REFERENCE_TYPE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Scalar [b3DynamicBvh.h <145:53 145:60>]
LOCAL_SYMBOL: b3DynamicBvh.h<145:68> [b3DynamicBvh.h <145:68 145:68>]
REFERENCE_TYPE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> int [b3DynamicBvh.h <145:64 145:66>]
SYMBOL_METHOD public b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const [b3DynamicBvh.h <146:28 146:41>]
REFERENCE_TYPE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Scalar [b3DynamicBvh.h <146:17 146:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<146:60> [b3DynamicBvh.h <146:60 146:60>]
REFERENCE_TYPE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3 [b3DynamicBvh.h <146:49 146:57>]
LOCAL_SYMBOL: b3DynamicBvh.h<146:71> [b3DynamicBvh.h <146:71 146:75>]
REFERENCE_TYPE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> unsigned int [b3DynamicBvh.h <146:62 146:69>]
SYMBOL_FUNCTION public bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.h <147:31 147:41>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> bool [b3DynamicBvh.h <147:24 147:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<147:64> [b3DynamicBvh.h <147:64 147:64>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <147:50 147:61>]
LOCAL_SYMBOL: b3DynamicBvh.h<148:23> [b3DynamicBvh.h <148:23 148:23>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <148:9 148:20>]
SYMBOL_FUNCTION public bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) [b3DynamicBvh.h <150:31 150:41>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> bool [b3DynamicBvh.h <150:24 150:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<150:64> [b3DynamicBvh.h <150:64 150:64>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3DbvtAabbMm [b3DynamicBvh.h <150:50 150:61>]
LOCAL_SYMBOL: b3DynamicBvh.h<151:20> [b3DynamicBvh.h <151:20 151:20>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <151:9 151:17>]
SYMBOL_FUNCTION public b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.h <153:34 153:44>]
REFERENCE_TYPE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Scalar [b3DynamicBvh.h <153:24 153:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<153:67> [b3DynamicBvh.h <153:67 153:67>]
REFERENCE_TYPE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <153:53 153:64>]
LOCAL_SYMBOL: b3DynamicBvh.h<154:23> [b3DynamicBvh.h <154:23 154:23>]
REFERENCE_TYPE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <154:9 154:20>]
SYMBOL_FUNCTION public int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.h <155:30 155:37>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> int [b3DynamicBvh.h <155:24 155:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<155:61> [b3DynamicBvh.h <155:61 155:61>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <155:47 155:58>]
LOCAL_SYMBOL: b3DynamicBvh.h<156:23> [b3DynamicBvh.h <156:23 156:23>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <156:9 156:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<157:23> [b3DynamicBvh.h <157:23 157:23>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <157:9 157:20>]
SYMBOL_FUNCTION public void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.h <158:31 158:37>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> void [b3DynamicBvh.h <158:24 158:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<158:61> [b3DynamicBvh.h <158:61 158:61>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <158:47 158:58>]
LOCAL_SYMBOL: b3DynamicBvh.h<159:23> [b3DynamicBvh.h <159:23 159:23>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <159:9 159:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<160:17> [b3DynamicBvh.h <160:17 160:17>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <160:3 160:14>]
SYMBOL_FUNCTION public bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.h <161:31 161:40>]
REFERENCE_TYPE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> bool [b3DynamicBvh.h <161:24 161:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<161:63> [b3DynamicBvh.h <161:63 161:63>]
REFERENCE_TYPE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <161:49 161:60>]
LOCAL_SYMBOL: b3DynamicBvh.h<162:23> [b3DynamicBvh.h <162:23 162:23>]
REFERENCE_TYPE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <162:9 162:20>]
SYMBOL_METHOD public b3Vector3 & b3DbvtAabbMm::tMins() [b3DynamicBvh.h <164:5 <164:31 164:35> 164:53>]
REFERENCE_TYPE_USAGE b3Vector3 & b3DbvtAabbMm::tMins() -> b3Vector3 [b3DynamicBvh.h <164:20 164:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<164:39> [b3DynamicBvh.h <164:39 164:39>]
LOCAL_SYMBOL: b3DynamicBvh.h<164:39> [b3DynamicBvh.h <164:53 164:53>]
REFERENCE_USAGE b3Vector3 & b3DbvtAabbMm::tMins() -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <164:48 164:49>]
SYMBOL_METHOD public b3Vector3 & b3DbvtAabbMm::tMaxs() [b3DynamicBvh.h <165:2 <165:28 165:32> 165:50>]
REFERENCE_TYPE_USAGE b3Vector3 & b3DbvtAabbMm::tMaxs() -> b3Vector3 [b3DynamicBvh.h <165:17 165:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<165:36> [b3DynamicBvh.h <165:36 165:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<165:36> [b3DynamicBvh.h <165:50 165:50>]
REFERENCE_USAGE b3Vector3 & b3DbvtAabbMm::tMaxs() -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <165:45 165:46>]
SYMBOL_METHOD private void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const [b3DynamicBvh.h <168:25 168:31>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> void [b3DynamicBvh.h <168:17 168:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<168:50> [b3DynamicBvh.h <168:50 168:50>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> b3Vector3 [b3DynamicBvh.h <168:39 168:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<168:62> [b3DynamicBvh.h <168:62 168:64>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3DynamicBvh.h <168:52 168:59>]
LOCAL_SYMBOL: b3DynamicBvh.h<168:76> [b3DynamicBvh.h <168:76 168:78>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3DynamicBvh.h <168:66 168:73>]
SYMBOL_FIELD private b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <170:12 170:13>]
REFERENCE_TYPE_USAGE b3Vector3 b3DbvtAabbMm::mi -> b3Vector3 [b3DynamicBvh.h <170:2 170:10>]
SYMBOL_FIELD private b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <170:15 170:16>]
REFERENCE_TYPE_USAGE b3Vector3 b3DbvtAabbMm::mx -> b3Vector3 [b3DynamicBvh.h <170:2 170:10>]
SYMBOL_METHOD public void b3DbvtAabbMm::b3DbvtAabbMm() [b3DynamicBvh.h <130:8 <130:8 130:19> 130:19>]
REFERENCE_USAGE void b3DbvtAabbMm::b3DbvtAabbMm() -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <130:8 130:19>]
REFERENCE_CALL void b3DbvtAabbMm::b3DbvtAabbMm() -> void b3Vector3::b3Vector3() [b3DynamicBvh.h <130:8 130:19>]
REFERENCE_USAGE void b3DbvtAabbMm::b3DbvtAabbMm() -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <130:8 130:19>]
SYMBOL_METHOD public void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) [b3DynamicBvh.h <130:8 <130:8 130:19> 130:19>]
REFERENCE_USAGE void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <130:8 130:19>]
REFERENCE_CALL void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) -> void b3Vector3::b3Vector3(const b3Vector3 &) [b3DynamicBvh.h <130:8 130:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<130:8> [b3DynamicBvh.h <130:8 130:19>]
REFERENCE_USAGE void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <130:8 130:19>]
SYMBOL_METHOD public void b3DbvtAabbMm::b3DbvtAabbMm(b3DbvtAabbMm &&) [b3DynamicBvh.h <130:8 <130:8 130:19> 130:19>]
REFERENCE_USAGE void b3DbvtAabbMm::b3DbvtAabbMm(b3DbvtAabbMm &&) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <130:8 130:19>]
REFERENCE_CALL void b3DbvtAabbMm::b3DbvtAabbMm(b3DbvtAabbMm &&) -> void b3Vector3::b3Vector3(b3Vector3 &&) [b3DynamicBvh.h <130:8 130:19>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::b3DbvtAabbMm(b3DbvtAabbMm &&) -> b3DbvtAabbMm [b3DynamicBvh.h <130:8 130:19>]
REFERENCE_USAGE void b3DbvtAabbMm::b3DbvtAabbMm(b3DbvtAabbMm &&) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <130:8 130:19>]
SYMBOL_METHOD public void b3DbvtAabbMm::~b3DbvtAabbMm() [b3DynamicBvh.h <130:8 130:19>]
SYMBOL_METHOD public b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) [b3DynamicBvh.h <130:8 <130:8 130:19> 130:19>]
REFERENCE_CALL b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3DynamicBvh.h <130:8 130:19>]
QUALIFIER: b3Vector3 [b3DynamicBvh.h <130:8 130:19>]
REFERENCE_USAGE b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <130:8 130:19>]
REFERENCE_USAGE b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <130:8 130:19>]
SYMBOL_METHOD public b3DbvtAabbMm & b3DbvtAabbMm::operator=(b3DbvtAabbMm &&) [b3DynamicBvh.h <130:8 130:19>]
SYMBOL_TYPEDEF b3DbvtVolume [b3DynamicBvh.h <174:22 174:33>]
REFERENCE_TYPE_USAGE b3DbvtVolume -> b3DbvtAabbMm [b3DynamicBvh.h <174:9 174:20>]
SYMBOL_STRUCT b3DbvtNode [b3DynamicBvh.h <177:1 <177:8 177:17> 189:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<178:1> [b3DynamicBvh.h <178:1 178:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<178:1> [b3DynamicBvh.h <189:1 189:1>]
SYMBOL_FIELD public b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <179:15 179:20>]
REFERENCE_TYPE_USAGE b3DbvtVolume b3DbvtNode::volume -> b3DbvtVolume [b3DynamicBvh.h <179:2 179:13>]
SYMBOL_FIELD public b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.h <180:15 180:20>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DbvtNode::parent -> b3DbvtNode [b3DynamicBvh.h <180:2 180:11>]
SYMBOL_METHOD public bool b3DbvtNode::isleaf() const [b3DynamicBvh.h <181:2 <181:22 181:27> 181:62>]
REFERENCE_TYPE_USAGE bool b3DbvtNode::isleaf() const -> bool [b3DynamicBvh.h <181:17 181:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<181:38> [b3DynamicBvh.h <181:38 181:38>]
LOCAL_SYMBOL: b3DynamicBvh.h<181:38> [b3DynamicBvh.h <181:62 181:62>]
REFERENCE_USAGE bool b3DbvtNode::isleaf() const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <181:47 181:52>]
REFERENCE_USAGE bool b3DbvtNode::isleaf() const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <181:47 181:52>]
SYMBOL_METHOD public bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <182:2 <182:22 182:31> 182:62>]
REFERENCE_TYPE_USAGE bool b3DbvtNode::isinternal() const -> bool [b3DynamicBvh.h <182:17 182:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<182:41> [b3DynamicBvh.h <182:41 182:41>]
LOCAL_SYMBOL: b3DynamicBvh.h<182:41> [b3DynamicBvh.h <182:62 182:62>]
SYMBOL_FUNCTION bool b3DbvtNode::isleaf() const
REFERENCE_CALL bool b3DbvtNode::isinternal() const -> bool b3DbvtNode::isleaf() const [b3DynamicBvh.h <182:51 182:56>]
SYMBOL_UNION public b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) [b3DynamicBvh.h <183:2 <183:2 183:6> 188:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<184:2> [b3DynamicBvh.h <184:2 184:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<184:2> [b3DynamicBvh.h <188:2 188:2>]
SYMBOL_FIELD public b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <185:15 185:20>]
REFERENCE_TYPE_USAGE b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs -> b3DbvtNode [b3DynamicBvh.h <185:3 185:12>]
SYMBOL_FIELD public void * b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::data [b3DynamicBvh.h <186:9 186:12>]
REFERENCE_TYPE_USAGE void * b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::data -> void [b3DynamicBvh.h <186:3 186:6>]
SYMBOL_FIELD public int b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::dataAsInt [b3DynamicBvh.h <187:8 187:16>]
REFERENCE_TYPE_USAGE int b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::dataAsInt -> int [b3DynamicBvh.h <187:3 187:5>]
SYMBOL_METHOD public void b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::(const b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) &) [b3DynamicBvh.h <183:2 183:6>]
SYMBOL_METHOD public void b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::(b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) &&) [b3DynamicBvh.h <183:2 183:6>]
SYMBOL_METHOD public void b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::() [b3DynamicBvh.h <183:2 183:6>]
SYMBOL_FIELD public b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <183:2 183:6>]
REFERENCE_TYPE_USAGE b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) [b3DynamicBvh.h <183:2 183:6>]
SYMBOL_METHOD public void b3DbvtNode::b3DbvtNode() [b3DynamicBvh.h <177:8 177:17>]
SYMBOL_METHOD public void b3DbvtNode::b3DbvtNode(const b3DbvtNode &) [b3DynamicBvh.h <177:8 177:17>]
SYMBOL_METHOD public void b3DbvtNode::b3DbvtNode(b3DbvtNode &&) [b3DynamicBvh.h <177:8 177:17>]
SYMBOL_STRUCT b3DynamicBvh [b3DynamicBvh.h <194:1 <194:8 194:19> 390:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<195:1> [b3DynamicBvh.h <195:1 195:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<195:1> [b3DynamicBvh.h <390:1 390:1>]
SYMBOL_STRUCT public b3DynamicBvh::sStkNN [b3DynamicBvh.h <197:2 <197:9 197:14> 203:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<198:2> [b3DynamicBvh.h <198:2 198:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<198:2> [b3DynamicBvh.h <203:2 203:2>]
SYMBOL_FIELD public const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <199:21 199:21>]
REFERENCE_TYPE_USAGE const b3DbvtNode * b3DynamicBvh::sStkNN::a -> b3DbvtNode [b3DynamicBvh.h <199:9 199:18>]
SYMBOL_FIELD public const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <200:21 200:21>]
REFERENCE_TYPE_USAGE const b3DbvtNode * b3DynamicBvh::sStkNN::b -> b3DbvtNode [b3DynamicBvh.h <200:9 200:18>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNN::sStkNN() [b3DynamicBvh.h <201:3 <201:3 201:8> 201:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<201:12> [b3DynamicBvh.h <201:12 201:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<201:12> [b3DynamicBvh.h <201:13 201:13>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <202:3 <202:3 202:8> 202:68>]
LOCAL_SYMBOL: b3DynamicBvh.h<202:28> [b3DynamicBvh.h <202:28 202:29>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <202:16 202:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<202:49> [b3DynamicBvh.h <202:49 202:50>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <202:37 202:46>]
REFERENCE_USAGE void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <202:55 202:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<202:28> [b3DynamicBvh.h <202:57 202:58>]
REFERENCE_USAGE void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <202:61 202:61>]
LOCAL_SYMBOL: b3DynamicBvh.h<202:49> [b3DynamicBvh.h <202:63 202:64>]
LOCAL_SYMBOL: b3DynamicBvh.h<202:67> [b3DynamicBvh.h <202:67 202:67>]
LOCAL_SYMBOL: b3DynamicBvh.h<202:67> [b3DynamicBvh.h <202:68 202:68>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNN::sStkNN(const b3DynamicBvh::sStkNN &) [b3DynamicBvh.h <197:9 <197:9 197:14> 197:14>]
REFERENCE_USAGE void b3DynamicBvh::sStkNN::sStkNN(const b3DynamicBvh::sStkNN &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <197:9 197:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<197:9> [b3DynamicBvh.h <197:9 197:14>]
REFERENCE_USAGE void b3DynamicBvh::sStkNN::sStkNN(const b3DynamicBvh::sStkNN &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <197:9 197:14>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNN::sStkNN(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <197:9 197:14>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNN::~sStkNN() [b3DynamicBvh.h <197:9 197:14>]
SYMBOL_METHOD public b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(const b3DynamicBvh::sStkNN &) [b3DynamicBvh.h <197:9 197:14>]
SYMBOL_METHOD public b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <197:9 197:14>]
SYMBOL_STRUCT public b3DynamicBvh::sStkNP [b3DynamicBvh.h <204:2 <204:9 204:14> 209:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<205:2> [b3DynamicBvh.h <205:2 205:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<205:2> [b3DynamicBvh.h <209:2 209:2>]
SYMBOL_FIELD public const b3DbvtNode * b3DynamicBvh::sStkNP::node [b3DynamicBvh.h <206:21 206:24>]
REFERENCE_TYPE_USAGE const b3DbvtNode * b3DynamicBvh::sStkNP::node -> b3DbvtNode [b3DynamicBvh.h <206:9 206:18>]
SYMBOL_FIELD public int b3DynamicBvh::sStkNP::mask [b3DynamicBvh.h <207:9 207:12>]
REFERENCE_TYPE_USAGE int b3DynamicBvh::sStkNP::mask -> int [b3DynamicBvh.h <207:3 207:5>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNP::sStkNP(const b3DbvtNode *, unsigned int) [b3DynamicBvh.h <208:3 <208:3 208:8> 208:61>]
LOCAL_SYMBOL: b3DynamicBvh.h<208:28> [b3DynamicBvh.h <208:28 208:28>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::sStkNP::sStkNP(const b3DbvtNode *, unsigned int) -> b3DbvtNode [b3DynamicBvh.h <208:16 208:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<208:39> [b3DynamicBvh.h <208:39 208:39>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::sStkNP::sStkNP(const b3DbvtNode *, unsigned int) -> unsigned int [b3DynamicBvh.h <208:30 208:37>]
REFERENCE_USAGE void b3DynamicBvh::sStkNP::sStkNP(const b3DbvtNode *, unsigned int) -> const b3DbvtNode * b3DynamicBvh::sStkNP::node [b3DynamicBvh.h <208:44 208:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<208:28> [b3DynamicBvh.h <208:49 208:49>]
REFERENCE_USAGE void b3DynamicBvh::sStkNP::sStkNP(const b3DbvtNode *, unsigned int) -> int b3DynamicBvh::sStkNP::mask [b3DynamicBvh.h <208:52 208:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<208:39> [b3DynamicBvh.h <208:57 208:57>]
LOCAL_SYMBOL: b3DynamicBvh.h<208:60> [b3DynamicBvh.h <208:60 208:60>]
LOCAL_SYMBOL: b3DynamicBvh.h<208:60> [b3DynamicBvh.h <208:61 208:61>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNP::sStkNP(const b3DynamicBvh::sStkNP &) [b3DynamicBvh.h <204:9 <204:9 204:14> 204:14>]
REFERENCE_USAGE void b3DynamicBvh::sStkNP::sStkNP(const b3DynamicBvh::sStkNP &) -> const b3DbvtNode * b3DynamicBvh::sStkNP::node [b3DynamicBvh.h <204:9 204:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<204:9> [b3DynamicBvh.h <204:9 204:14>]
REFERENCE_USAGE void b3DynamicBvh::sStkNP::sStkNP(const b3DynamicBvh::sStkNP &) -> int b3DynamicBvh::sStkNP::mask [b3DynamicBvh.h <204:9 204:14>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNP::sStkNP(b3DynamicBvh::sStkNP &&) [b3DynamicBvh.h <204:9 204:14>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNP::~sStkNP() [b3DynamicBvh.h <204:9 204:14>]
SYMBOL_STRUCT public b3DynamicBvh::sStkNPS [b3DynamicBvh.h <210:2 <210:9 210:15> 217:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<211:2> [b3DynamicBvh.h <211:2 211:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<211:2> [b3DynamicBvh.h <217:2 217:2>]
SYMBOL_FIELD public const b3DbvtNode * b3DynamicBvh::sStkNPS::node [b3DynamicBvh.h <212:21 212:24>]
REFERENCE_TYPE_USAGE const b3DbvtNode * b3DynamicBvh::sStkNPS::node -> b3DbvtNode [b3DynamicBvh.h <212:9 212:18>]
SYMBOL_FIELD public int b3DynamicBvh::sStkNPS::mask [b3DynamicBvh.h <213:9 213:12>]
REFERENCE_TYPE_USAGE int b3DynamicBvh::sStkNPS::mask -> int [b3DynamicBvh.h <213:3 213:5>]
SYMBOL_FIELD public b3Scalar b3DynamicBvh::sStkNPS::value [b3DynamicBvh.h <214:12 214:16>]
REFERENCE_TYPE_USAGE b3Scalar b3DynamicBvh::sStkNPS::value -> b3Scalar [b3DynamicBvh.h <214:3 214:10>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNPS::sStkNPS() [b3DynamicBvh.h <215:3 <215:3 215:9> 215:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<215:13> [b3DynamicBvh.h <215:13 215:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<215:13> [b3DynamicBvh.h <215:14 215:14>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNPS::sStkNPS(const b3DbvtNode *, unsigned int, b3Scalar) [b3DynamicBvh.h <216:3 <216:3 216:9> 216:82>]
LOCAL_SYMBOL: b3DynamicBvh.h<216:29> [b3DynamicBvh.h <216:29 216:29>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::sStkNPS::sStkNPS(const b3DbvtNode *, unsigned int, b3Scalar) -> b3DbvtNode [b3DynamicBvh.h <216:17 216:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<216:40> [b3DynamicBvh.h <216:40 216:40>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::sStkNPS::sStkNPS(const b3DbvtNode *, unsigned int, b3Scalar) -> unsigned int [b3DynamicBvh.h <216:31 216:38>]
LOCAL_SYMBOL: b3DynamicBvh.h<216:51> [b3DynamicBvh.h <216:51 216:51>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::sStkNPS::sStkNPS(const b3DbvtNode *, unsigned int, b3Scalar) -> b3Scalar [b3DynamicBvh.h <216:42 216:49>]
REFERENCE_USAGE void b3DynamicBvh::sStkNPS::sStkNPS(const b3DbvtNode *, unsigned int, b3Scalar) -> const b3DbvtNode * b3DynamicBvh::sStkNPS::node [b3DynamicBvh.h <216:56 216:59>]
LOCAL_SYMBOL: b3DynamicBvh.h<216:29> [b3DynamicBvh.h <216:61 216:61>]
REFERENCE_USAGE void b3DynamicBvh::sStkNPS::sStkNPS(const b3DbvtNode *, unsigned int, b3Scalar) -> int b3DynamicBvh::sStkNPS::mask [b3DynamicBvh.h <216:64 216:67>]
LOCAL_SYMBOL: b3DynamicBvh.h<216:40> [b3DynamicBvh.h <216:69 216:69>]
REFERENCE_USAGE void b3DynamicBvh::sStkNPS::sStkNPS(const b3DbvtNode *, unsigned int, b3Scalar) -> b3Scalar b3DynamicBvh::sStkNPS::value [b3DynamicBvh.h <216:72 216:76>]
LOCAL_SYMBOL: b3DynamicBvh.h<216:51> [b3DynamicBvh.h <216:78 216:78>]
LOCAL_SYMBOL: b3DynamicBvh.h<216:81> [b3DynamicBvh.h <216:81 216:81>]
LOCAL_SYMBOL: b3DynamicBvh.h<216:81> [b3DynamicBvh.h <216:82 216:82>]
SYMBOL_METHOD public b3DynamicBvh::sStkNPS & b3DynamicBvh::sStkNPS::operator=(const b3DynamicBvh::sStkNPS &) [b3DynamicBvh.h <210:9 <210:9 210:15> 210:15>]
REFERENCE_USAGE b3DynamicBvh::sStkNPS & b3DynamicBvh::sStkNPS::operator=(const b3DynamicBvh::sStkNPS &) -> const b3DbvtNode * b3DynamicBvh::sStkNPS::node [b3DynamicBvh.h <210:9 210:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<210:9> [b3DynamicBvh.h <210:9 210:15>]
REFERENCE_USAGE b3DynamicBvh::sStkNPS & b3DynamicBvh::sStkNPS::operator=(const b3DynamicBvh::sStkNPS &) -> int b3DynamicBvh::sStkNPS::mask [b3DynamicBvh.h <210:9 210:15>]
REFERENCE_USAGE b3DynamicBvh::sStkNPS & b3DynamicBvh::sStkNPS::operator=(const b3DynamicBvh::sStkNPS &) -> b3Scalar b3DynamicBvh::sStkNPS::value [b3DynamicBvh.h <210:9 210:15>]
SYMBOL_METHOD public b3DynamicBvh::sStkNPS & b3DynamicBvh::sStkNPS::operator=(b3DynamicBvh::sStkNPS &&) [b3DynamicBvh.h <210:9 210:15>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNPS::sStkNPS(const b3DynamicBvh::sStkNPS &) [b3DynamicBvh.h <210:9 <210:9 210:15> 210:15>]
REFERENCE_USAGE void b3DynamicBvh::sStkNPS::sStkNPS(const b3DynamicBvh::sStkNPS &) -> const b3DbvtNode * b3DynamicBvh::sStkNPS::node [b3DynamicBvh.h <210:9 210:15>]
REFERENCE_USAGE void b3DynamicBvh::sStkNPS::sStkNPS(const b3DynamicBvh::sStkNPS &) -> int b3DynamicBvh::sStkNPS::mask [b3DynamicBvh.h <210:9 210:15>]
REFERENCE_USAGE void b3DynamicBvh::sStkNPS::sStkNPS(const b3DynamicBvh::sStkNPS &) -> b3Scalar b3DynamicBvh::sStkNPS::value [b3DynamicBvh.h <210:9 210:15>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNPS::sStkNPS(b3DynamicBvh::sStkNPS &&) [b3DynamicBvh.h <210:9 210:15>]
SYMBOL_METHOD public void b3DynamicBvh::sStkNPS::~sStkNPS() [b3DynamicBvh.h <210:9 210:15>]
SYMBOL_STRUCT public b3DynamicBvh::sStkCLN [b3DynamicBvh.h <218:2 <218:9 218:15> 223:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<219:2> [b3DynamicBvh.h <219:2 219:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<219:2> [b3DynamicBvh.h <223:2 223:2>]
SYMBOL_FIELD public const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.h <220:21 220:24>]
REFERENCE_TYPE_USAGE const b3DbvtNode * b3DynamicBvh::sStkCLN::node -> b3DbvtNode [b3DynamicBvh.h <220:9 220:18>]
SYMBOL_FIELD public b3DbvtNode * b3DynamicBvh::sStkCLN::parent [b3DynamicBvh.h <221:16 221:21>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::sStkCLN::parent -> b3DbvtNode [b3DynamicBvh.h <221:3 221:12>]
SYMBOL_METHOD public void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *) [b3DynamicBvh.h <222:3 <222:3 222:9> 222:67>]
LOCAL_SYMBOL: b3DynamicBvh.h<222:29> [b3DynamicBvh.h <222:29 222:29>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <222:17 222:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<222:43> [b3DynamicBvh.h <222:43 222:43>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <222:31 222:40>]
REFERENCE_USAGE void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *) -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.h <222:48 222:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<222:29> [b3DynamicBvh.h <222:53 222:53>]
REFERENCE_USAGE void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::sStkCLN::parent [b3DynamicBvh.h <222:56 222:61>]
LOCAL_SYMBOL: b3DynamicBvh.h<222:43> [b3DynamicBvh.h <222:63 222:63>]
LOCAL_SYMBOL: b3DynamicBvh.h<222:66> [b3DynamicBvh.h <222:66 222:66>]
LOCAL_SYMBOL: b3DynamicBvh.h<222:66> [b3DynamicBvh.h <222:67 222:67>]
SYMBOL_METHOD public void b3DynamicBvh::sStkCLN::sStkCLN(const b3DynamicBvh::sStkCLN &) [b3DynamicBvh.h <218:9 <218:9 218:15> 218:15>]
REFERENCE_USAGE void b3DynamicBvh::sStkCLN::sStkCLN(const b3DynamicBvh::sStkCLN &) -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.h <218:9 218:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<218:9> [b3DynamicBvh.h <218:9 218:15>]
REFERENCE_USAGE void b3DynamicBvh::sStkCLN::sStkCLN(const b3DynamicBvh::sStkCLN &) -> b3DbvtNode * b3DynamicBvh::sStkCLN::parent [b3DynamicBvh.h <218:9 218:15>]
SYMBOL_METHOD public void b3DynamicBvh::sStkCLN::sStkCLN(b3DynamicBvh::sStkCLN &&) [b3DynamicBvh.h <218:9 218:15>]
SYMBOL_METHOD public void b3DynamicBvh::sStkCLN::~sStkCLN() [b3DynamicBvh.h <218:9 218:15>]
SYMBOL_STRUCT public b3DynamicBvh::ICollide [b3DynamicBvh.h <227:2 <227:9 227:16> 235:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<228:2> [b3DynamicBvh.h <228:2 228:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<228:2> [b3DynamicBvh.h <235:2 235:2>]
SYMBOL_METHOD public void b3DynamicBvh::ICollide::Process(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <230:20 <230:25 230:31> 230:72>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::ICollide::Process(const b3DbvtNode *, const b3DbvtNode *) -> void [b3DynamicBvh.h <230:20 230:23>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::ICollide::Process(const b3DbvtNode *, const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <230:39 230:48>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::ICollide::Process(const b3DbvtNode *, const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <230:57 230:66>]
LOCAL_SYMBOL: b3DynamicBvh.h<230:71> [b3DynamicBvh.h <230:71 230:71>]
LOCAL_SYMBOL: b3DynamicBvh.h<230:71> [b3DynamicBvh.h <230:72 230:72>]
SYMBOL_METHOD public void b3DynamicBvh::ICollide::Process(const b3DbvtNode *) [b3DynamicBvh.h <231:19 <231:24 231:30> 231:56>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::ICollide::Process(const b3DbvtNode *) -> void [b3DynamicBvh.h <231:19 231:22>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::ICollide::Process(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <231:38 231:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<231:55> [b3DynamicBvh.h <231:55 231:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<231:55> [b3DynamicBvh.h <231:56 231:56>]
SYMBOL_METHOD public void b3DynamicBvh::ICollide::Process(const b3DbvtNode *, b3Scalar) [b3DynamicBvh.h <232:19 <232:24 232:30> 232:78>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::ICollide::Process(const b3DbvtNode *, b3Scalar) -> void [b3DynamicBvh.h <232:19 232:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<232:50> [b3DynamicBvh.h <232:50 232:50>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::ICollide::Process(const b3DbvtNode *, b3Scalar) -> b3DbvtNode [b3DynamicBvh.h <232:38 232:47>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::ICollide::Process(const b3DbvtNode *, b3Scalar) -> b3Scalar [b3DynamicBvh.h <232:52 232:59>]
LOCAL_SYMBOL: b3DynamicBvh.h<232:64> [b3DynamicBvh.h <232:64 232:64>]
LOCAL_SYMBOL: b3DynamicBvh.h<232:64> [b3DynamicBvh.h <232:78 232:78>]
SYMBOL_FUNCTION void b3DynamicBvh::ICollide::Process(const b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::ICollide::Process(const b3DbvtNode *, b3Scalar) -> void b3DynamicBvh::ICollide::Process(const b3DbvtNode *) [b3DynamicBvh.h <232:66 232:72>]
LOCAL_SYMBOL: b3DynamicBvh.h<232:50> [b3DynamicBvh.h <232:74 232:74>]
SYMBOL_METHOD public bool b3DynamicBvh::ICollide::Descent(const b3DbvtNode *) [b3DynamicBvh.h <233:19 <233:24 233:30> 233:71>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::ICollide::Descent(const b3DbvtNode *) -> bool [b3DynamicBvh.h <233:19 233:22>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::ICollide::Descent(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <233:38 233:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<233:55> [b3DynamicBvh.h <233:55 233:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<233:55> [b3DynamicBvh.h <233:71 233:71>]
SYMBOL_METHOD public bool b3DynamicBvh::ICollide::AllLeaves(const b3DbvtNode *) [b3DynamicBvh.h <234:19 <234:24 234:32> 234:73>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::ICollide::AllLeaves(const b3DbvtNode *) -> bool [b3DynamicBvh.h <234:19 234:22>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::ICollide::AllLeaves(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <234:40 234:49>]
LOCAL_SYMBOL: b3DynamicBvh.h<234:57> [b3DynamicBvh.h <234:57 234:57>]
LOCAL_SYMBOL: b3DynamicBvh.h<234:57> [b3DynamicBvh.h <234:73 234:73>]
SYMBOL_METHOD public void b3DynamicBvh::ICollide::ICollide(const b3DynamicBvh::ICollide &) [b3DynamicBvh.h <227:9 227:16>]
SYMBOL_METHOD public void b3DynamicBvh::ICollide::ICollide(b3DynamicBvh::ICollide &&) [b3DynamicBvh.h <227:9 227:16>]
SYMBOL_METHOD public void b3DynamicBvh::ICollide::~ICollide() [b3DynamicBvh.h <227:9 227:16>]
SYMBOL_METHOD public b3DynamicBvh::ICollide & b3DynamicBvh::ICollide::operator=(const b3DynamicBvh::ICollide &) [b3DynamicBvh.h <227:9 227:16>]
SYMBOL_METHOD public b3DynamicBvh::ICollide & b3DynamicBvh::ICollide::operator=(b3DynamicBvh::ICollide &&) [b3DynamicBvh.h <227:9 227:16>]
SYMBOL_METHOD public void b3DynamicBvh::ICollide::ICollide() [b3DynamicBvh.h <227:9 <227:9 227:16> 227:16>]
SYMBOL_STRUCT public b3DynamicBvh::IWriter [b3DynamicBvh.h <237:2 <237:9 237:15> 243:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<238:2> [b3DynamicBvh.h <238:2 238:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<238:2> [b3DynamicBvh.h <243:2 243:2>]
SYMBOL_METHOD public void b3DynamicBvh::IWriter::~IWriter() [b3DynamicBvh.h <239:3 <239:11 239:18> 239:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<239:22> [b3DynamicBvh.h <239:22 239:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<239:22> [b3DynamicBvh.h <239:23 239:23>]
SYMBOL_METHOD public void b3DynamicBvh::IWriter::Prepare(const b3DbvtNode *, int) [b3DynamicBvh.h <240:17 240:23>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::Prepare(const b3DbvtNode *, int) -> void [b3DynamicBvh.h <240:11 240:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<240:43> [b3DynamicBvh.h <240:43 240:46>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::Prepare(const b3DbvtNode *, int) -> b3DbvtNode [b3DynamicBvh.h <240:31 240:40>]
LOCAL_SYMBOL: b3DynamicBvh.h<240:52> [b3DynamicBvh.h <240:52 240:59>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::Prepare(const b3DbvtNode *, int) -> int [b3DynamicBvh.h <240:48 240:50>]
SYMBOL_METHOD public void b3DynamicBvh::IWriter::WriteNode(const b3DbvtNode *, int, int, int, int) [b3DynamicBvh.h <241:17 241:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::WriteNode(const b3DbvtNode *, int, int, int, int) -> void [b3DynamicBvh.h <241:11 241:14>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::WriteNode(const b3DbvtNode *, int, int, int, int) -> b3DbvtNode [b3DynamicBvh.h <241:33 241:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<241:49> [b3DynamicBvh.h <241:49 241:53>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::WriteNode(const b3DbvtNode *, int, int, int, int) -> int [b3DynamicBvh.h <241:45 241:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<241:59> [b3DynamicBvh.h <241:59 241:64>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::WriteNode(const b3DbvtNode *, int, int, int, int) -> int [b3DynamicBvh.h <241:55 241:57>]
LOCAL_SYMBOL: b3DynamicBvh.h<241:70> [b3DynamicBvh.h <241:70 241:75>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::WriteNode(const b3DbvtNode *, int, int, int, int) -> int [b3DynamicBvh.h <241:66 241:68>]
LOCAL_SYMBOL: b3DynamicBvh.h<241:81> [b3DynamicBvh.h <241:81 241:86>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::WriteNode(const b3DbvtNode *, int, int, int, int) -> int [b3DynamicBvh.h <241:77 241:79>]
SYMBOL_METHOD public void b3DynamicBvh::IWriter::WriteLeaf(const b3DbvtNode *, int, int) [b3DynamicBvh.h <242:17 242:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::WriteLeaf(const b3DbvtNode *, int, int) -> void [b3DynamicBvh.h <242:11 242:14>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::WriteLeaf(const b3DbvtNode *, int, int) -> b3DbvtNode [b3DynamicBvh.h <242:33 242:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<242:49> [b3DynamicBvh.h <242:49 242:53>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::WriteLeaf(const b3DbvtNode *, int, int) -> int [b3DynamicBvh.h <242:45 242:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<242:59> [b3DynamicBvh.h <242:59 242:64>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IWriter::WriteLeaf(const b3DbvtNode *, int, int) -> int [b3DynamicBvh.h <242:55 242:57>]
SYMBOL_METHOD public b3DynamicBvh::IWriter & b3DynamicBvh::IWriter::operator=(const b3DynamicBvh::IWriter &) [b3DynamicBvh.h <237:9 237:15>]
SYMBOL_STRUCT public b3DynamicBvh::IClone [b3DynamicBvh.h <245:2 <245:9 245:14> 249:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<246:2> [b3DynamicBvh.h <246:2 246:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<246:2> [b3DynamicBvh.h <249:2 249:2>]
SYMBOL_METHOD public void b3DynamicBvh::IClone::~IClone() [b3DynamicBvh.h <247:3 <247:11 247:17> 247:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<247:21> [b3DynamicBvh.h <247:21 247:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<247:21> [b3DynamicBvh.h <247:22 247:22>]
SYMBOL_METHOD public void b3DynamicBvh::IClone::CloneLeaf(b3DbvtNode *) [b3DynamicBvh.h <248:3 <248:17 248:25> 248:41>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IClone::CloneLeaf(b3DbvtNode *) -> void [b3DynamicBvh.h <248:11 248:14>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::IClone::CloneLeaf(b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <248:27 248:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<248:40> [b3DynamicBvh.h <248:40 248:40>]
LOCAL_SYMBOL: b3DynamicBvh.h<248:40> [b3DynamicBvh.h <248:41 248:41>]
SYMBOL_METHOD public b3DynamicBvh::IClone & b3DynamicBvh::IClone::operator=(const b3DynamicBvh::IClone &) [b3DynamicBvh.h <245:9 245:14>]
SYMBOL_ENUM public b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>) [b3DynamicBvh.h <252:2 <252:2 252:5> 255:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<252:7> [b3DynamicBvh.h <252:7 252:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<252:7> [b3DynamicBvh.h <255:2 255:2>]
SYMBOL_ENUM_CONSTANT b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_SIMPLE_STACKSIZE [b3DynamicBvh.h <253:3 253:21>]
SYMBOL_ENUM_CONSTANT b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_DOUBLE_STACKSIZE [b3DynamicBvh.h <254:3 254:21>]
REFERENCE_USAGE b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_DOUBLE_STACKSIZE -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_SIMPLE_STACKSIZE [b3DynamicBvh.h <254:25 254:43>]
SYMBOL_FIELD public b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.h <258:15 258:20>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::m_root -> b3DbvtNode [b3DynamicBvh.h <258:2 258:11>]
SYMBOL_FIELD public b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.h <259:15 259:20>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::m_free -> b3DbvtNode [b3DynamicBvh.h <259:2 259:11>]
SYMBOL_FIELD public int b3DynamicBvh::m_lkhd [b3DynamicBvh.h <260:9 260:14>]
REFERENCE_TYPE_USAGE int b3DynamicBvh::m_lkhd -> int [b3DynamicBvh.h <260:2 260:4>]
SYMBOL_FIELD public int b3DynamicBvh::m_leaves [b3DynamicBvh.h <261:9 261:16>]
REFERENCE_TYPE_USAGE int b3DynamicBvh::m_leaves -> int [b3DynamicBvh.h <261:2 261:4>]
SYMBOL_FIELD public unsigned int b3DynamicBvh::m_opath [b3DynamicBvh.h <262:12 262:18>]
REFERENCE_TYPE_USAGE unsigned int b3DynamicBvh::m_opath -> unsigned int [b3DynamicBvh.h <262:2 262:9>]
SYMBOL_FIELD public b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <265:31 265:40>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> [b3DynamicBvh.h <265:2 265:21>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<b3DynamicBvh::sStkNN> -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <265:23 265:28>]
SYMBOL_FIELD public b3AlignedObjectArray<const b3DbvtNode *> b3DynamicBvh::m_rayTestStack [b3DynamicBvh.h <266:50 266:63>]
REFERENCE_TYPE_USAGE b3AlignedObjectArray<const b3DbvtNode *> b3DynamicBvh::m_rayTestStack -> b3AlignedObjectArray<const b3DbvtNode *> [b3DynamicBvh.h <266:10 266:29>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<const b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.h <266:37 266:46>]
SYMBOL_METHOD public void b3DynamicBvh::b3DynamicBvh() [b3DynamicBvh.h <270:2 270:13>]
SYMBOL_METHOD public void b3DynamicBvh::~b3DynamicBvh() [b3DynamicBvh.h <271:2 271:14>]
SYMBOL_METHOD public void b3DynamicBvh::clear() [b3DynamicBvh.h <272:9 272:13>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clear() -> void [b3DynamicBvh.h <272:2 272:5>]
SYMBOL_METHOD public bool b3DynamicBvh::empty() const [b3DynamicBvh.h <273:2 <273:9 273:13> 273:44>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::empty() const -> bool [b3DynamicBvh.h <273:2 273:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<273:23> [b3DynamicBvh.h <273:23 273:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<273:23> [b3DynamicBvh.h <273:44 273:44>]
REFERENCE_USAGE bool b3DynamicBvh::empty() const -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.h <273:35 273:40>]
SYMBOL_METHOD public void b3DynamicBvh::optimizeBottomUp() [b3DynamicBvh.h <274:9 274:24>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeBottomUp() -> void [b3DynamicBvh.h <274:2 274:5>]
SYMBOL_METHOD public void b3DynamicBvh::optimizeTopDown(int) [b3DynamicBvh.h <275:9 275:23>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> void [b3DynamicBvh.h <275:2 275:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<275:29> [b3DynamicBvh.h <275:29 275:39>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> int [b3DynamicBvh.h <275:25 275:27>]
SYMBOL_METHOD public void b3DynamicBvh::optimizeIncremental(int) [b3DynamicBvh.h <276:9 276:27>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> void [b3DynamicBvh.h <276:2 276:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<276:33> [b3DynamicBvh.h <276:33 276:38>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> int [b3DynamicBvh.h <276:29 276:31>]
SYMBOL_METHOD public b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) [b3DynamicBvh.h <277:15 277:20>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> b3DbvtNode [b3DynamicBvh.h <277:2 277:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<277:42> [b3DynamicBvh.h <277:42 277:44>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> b3DbvtVolume [b3DynamicBvh.h <277:28 277:39>]
LOCAL_SYMBOL: b3DynamicBvh.h<277:52> [b3DynamicBvh.h <277:52 277:55>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> void [b3DynamicBvh.h <277:46 277:49>]
SYMBOL_METHOD public void b3DynamicBvh::update(b3DbvtNode *, int) [b3DynamicBvh.h <278:9 278:14>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> void [b3DynamicBvh.h <278:2 278:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<278:28> [b3DynamicBvh.h <278:28 278:31>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> b3DbvtNode [b3DynamicBvh.h <278:16 278:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<278:37> [b3DynamicBvh.h <278:37 278:45>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> int [b3DynamicBvh.h <278:33 278:35>]
SYMBOL_METHOD public void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) [b3DynamicBvh.h <279:9 279:14>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> void [b3DynamicBvh.h <279:2 279:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<279:28> [b3DynamicBvh.h <279:28 279:31>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtNode [b3DynamicBvh.h <279:16 279:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<279:47> [b3DynamicBvh.h <279:47 279:52>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtVolume [b3DynamicBvh.h <279:33 279:44>]
SYMBOL_METHOD public bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) [b3DynamicBvh.h <280:9 280:14>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> bool [b3DynamicBvh.h <280:2 280:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<280:28> [b3DynamicBvh.h <280:28 280:31>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3DbvtNode [b3DynamicBvh.h <280:16 280:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<280:47> [b3DynamicBvh.h <280:47 280:52>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3DbvtVolume [b3DynamicBvh.h <280:33 280:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<280:71> [b3DynamicBvh.h <280:71 280:78>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3Vector3 [b3DynamicBvh.h <280:60 280:68>]
LOCAL_SYMBOL: b3DynamicBvh.h<280:89> [b3DynamicBvh.h <280:89 280:94>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3Scalar [b3DynamicBvh.h <280:80 280:87>]
SYMBOL_METHOD public bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) [b3DynamicBvh.h <281:9 281:14>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> bool [b3DynamicBvh.h <281:2 281:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<281:28> [b3DynamicBvh.h <281:28 281:31>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> b3DbvtNode [b3DynamicBvh.h <281:16 281:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<281:47> [b3DynamicBvh.h <281:47 281:52>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> b3DbvtVolume [b3DynamicBvh.h <281:33 281:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<281:71> [b3DynamicBvh.h <281:71 281:78>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <281:60 281:68>]
SYMBOL_METHOD public bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) [b3DynamicBvh.h <282:9 282:14>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> bool [b3DynamicBvh.h <282:2 282:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<282:28> [b3DynamicBvh.h <282:28 282:31>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3DbvtNode [b3DynamicBvh.h <282:16 282:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<282:47> [b3DynamicBvh.h <282:47 282:52>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3DbvtVolume [b3DynamicBvh.h <282:33 282:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<282:63> [b3DynamicBvh.h <282:63 282:68>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3Scalar [b3DynamicBvh.h <282:54 282:61>]
SYMBOL_METHOD public void b3DynamicBvh::remove(b3DbvtNode *) [b3DynamicBvh.h <283:9 283:14>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::remove(b3DbvtNode *) -> void [b3DynamicBvh.h <283:2 283:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<283:28> [b3DynamicBvh.h <283:28 283:31>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::remove(b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <283:16 283:25>]
SYMBOL_METHOD public void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const [b3DynamicBvh.h <284:9 284:13>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void [b3DynamicBvh.h <284:2 284:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<284:24> [b3DynamicBvh.h <284:24 284:30>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DynamicBvh::IWriter [b3DynamicBvh.h <284:15 284:21>]
SYMBOL_METHOD public void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const [b3DynamicBvh.h <285:9 285:13>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void [b3DynamicBvh.h <285:2 285:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<285:29> [b3DynamicBvh.h <285:29 285:32>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh [b3DynamicBvh.h <285:15 285:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<285:42> [b3DynamicBvh.h <285:42 285:47>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::IClone [b3DynamicBvh.h <285:34 285:39>]
SYMBOL_METHOD public static int b3DynamicBvh::maxdepth(const b3DbvtNode *) [b3DynamicBvh.h <286:14 286:21>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::maxdepth(const b3DbvtNode *) -> int [b3DynamicBvh.h <286:9 286:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<286:41> [b3DynamicBvh.h <286:41 286:44>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::maxdepth(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <286:29 286:38>]
SYMBOL_METHOD public static int b3DynamicBvh::countLeaves(const b3DbvtNode *) [b3DynamicBvh.h <287:14 287:24>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> int [b3DynamicBvh.h <287:9 287:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<287:44> [b3DynamicBvh.h <287:44 287:47>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.h <287:32 287:41>]
SYMBOL_METHOD public static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) [b3DynamicBvh.h <288:15 288:27>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> void [b3DynamicBvh.h <288:9 288:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<288:47> [b3DynamicBvh.h <288:47 288:50>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3DbvtNode [b3DynamicBvh.h <288:35 288:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<288:93> [b3DynamicBvh.h <288:93 288:98>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3AlignedObjectArray<const b3DbvtNode *> [b3DynamicBvh.h <288:52 288:71>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<const b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.h <288:79 288:88>]
SYMBOL_METHOD public static void b3DynamicBvh::benchmark() [b3DynamicBvh.h <292:2 <292:15 292:23> 292:27>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::benchmark() -> void [b3DynamicBvh.h <292:9 292:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<292:26> [b3DynamicBvh.h <292:26 292:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<292:26> [b3DynamicBvh.h <292:27 292:27>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::enumNodes<typename T>::T [b3DynamicBvh.h <295:2 295:15>]
SYMBOL_METHOD public static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) [b3DynamicBvh.h <296:16 296:24>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <296:10 296:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<296:45> [b3DynamicBvh.h <296:45 296:48>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <296:33 296:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<297:3> [b3DynamicBvh.h <297:3 297:17>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::enumNodes<typename T>::T [b3DynamicBvh.h <297:3 297:17>]
SYMBOL_METHOD public static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) [b3DynamicBvh.h <693:1 <693:28 693:36> 703:1>]
SYMBOL_FUNCTION static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &)
REFERENCE_TEMPLATE_SPECIALIZATION static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) [b3DynamicBvh.h <693:28 693:36>]
SYMBOL_STRUCT b3DynamicBvh
QUALIFIER: b3DynamicBvh [b3DynamicBvh.h <693:14 693:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> void [b3DynamicBvh.h <693:8 693:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<693:57> [b3DynamicBvh.h <693:57 693:60>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> b3DbvtNode [b3DynamicBvh.h <693:45 693:54>]
LOCAL_SYMBOL: b3DynamicBvh.h<694:11> [b3DynamicBvh.h <694:11 694:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<696:2> [b3DynamicBvh.h <696:2 696:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> b3DynamicBvh::ICollide [b3DynamicBvh.h <696:2 696:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> void [b3DynamicBvh.h <696:2 696:18>]
SYMBOL_FUNCTION void b3DbvtNodeEnumerator::Process(const b3DbvtNode *)
REFERENCE_CALL static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> void b3DbvtNodeEnumerator::Process(const b3DbvtNode *) [b3DynamicBvh.h <697:10 697:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<694:11> [b3DynamicBvh.h <697:3 697:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<693:57> [b3DynamicBvh.h <697:18 697:21>]
SYMBOL_FUNCTION bool b3DbvtNode::isinternal() const
REFERENCE_CALL static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <698:11 698:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<693:57> [b3DynamicBvh.h <698:5 698:8>]
SYMBOL_FUNCTION static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &)
REFERENCE_CALL static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) [b3DynamicBvh.h <700:3 700:11>]
REFERENCE_USAGE static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <700:19 700:24>]
REFERENCE_USAGE static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <700:19 700:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<693:57> [b3DynamicBvh.h <700:13 700:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<694:11> [b3DynamicBvh.h <700:29 700:34>]
REFERENCE_CALL static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) [b3DynamicBvh.h <701:3 701:11>]
REFERENCE_USAGE static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <701:19 701:24>]
REFERENCE_USAGE static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <701:19 701:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<693:57> [b3DynamicBvh.h <701:13 701:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<694:11> [b3DynamicBvh.h <701:29 701:34>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::enumLeaves<typename T>::T [b3DynamicBvh.h <298:2 298:15>]
SYMBOL_METHOD public static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) [b3DynamicBvh.h <299:16 299:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <299:10 299:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<299:46> [b3DynamicBvh.h <299:46 299:49>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <299:34 299:43>]
LOCAL_SYMBOL: b3DynamicBvh.h<300:3> [b3DynamicBvh.h <300:3 300:17>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::enumLeaves<typename T>::T [b3DynamicBvh.h <300:3 300:17>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideTT<typename T>::T [b3DynamicBvh.h <301:2 301:15>]
SYMBOL_METHOD public void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) [b3DynamicBvh.h <302:9 302:17>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <302:3 302:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<302:38> [b3DynamicBvh.h <302:38 302:42>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <302:26 302:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<303:21> [b3DynamicBvh.h <303:21 303:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <303:9 303:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<304:3> [b3DynamicBvh.h <304:3 304:17>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::collideTT<typename T>::T [b3DynamicBvh.h <304:3 304:17>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideTTpersistentStack<typename T>::T [b3DynamicBvh.h <306:2 306:15>]
SYMBOL_METHOD public void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) [b3DynamicBvh.h <307:9 307:32>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <307:3 307:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<307:53> [b3DynamicBvh.h <307:53 307:57>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <307:41 307:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<308:23> [b3DynamicBvh.h <308:23 308:27>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <308:11 308:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<309:5> [b3DynamicBvh.h <309:5 309:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::collideTTpersistentStack<typename T>::T [b3DynamicBvh.h <309:5 309:19>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideTV<typename T>::T [b3DynamicBvh.h <324:2 324:15>]
SYMBOL_METHOD public void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const [b3DynamicBvh.h <325:9 325:17>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> void [b3DynamicBvh.h <325:3 325:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<325:38> [b3DynamicBvh.h <325:38 325:41>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DbvtNode [b3DynamicBvh.h <325:26 325:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<326:23> [b3DynamicBvh.h <326:23 326:28>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DbvtVolume [b3DynamicBvh.h <326:9 326:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<327:3> [b3DynamicBvh.h <327:3 327:17>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DynamicBvh::collideTV<typename T>::T [b3DynamicBvh.h <327:3 327:17>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::rayTest<typename T>::T [b3DynamicBvh.h <330:2 330:15>]
SYMBOL_METHOD public static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) [b3DynamicBvh.h <331:16 331:22>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> void [b3DynamicBvh.h <331:10 331:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<331:43> [b3DynamicBvh.h <331:43 331:46>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DbvtNode [b3DynamicBvh.h <331:31 331:40>]
LOCAL_SYMBOL: b3DynamicBvh.h<332:20> [b3DynamicBvh.h <332:20 332:26>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 [b3DynamicBvh.h <332:9 332:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<333:20> [b3DynamicBvh.h <333:20 333:24>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 [b3DynamicBvh.h <333:9 333:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<334:3> [b3DynamicBvh.h <334:3 334:17>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DynamicBvh::rayTest<typename T>::T [b3DynamicBvh.h <334:3 334:17>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::rayTestInternal<typename T>::T [b3DynamicBvh.h <337:2 337:15>]
SYMBOL_METHOD public void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const [b3DynamicBvh.h <338:9 338:23>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> void [b3DynamicBvh.h <338:3 338:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<338:44> [b3DynamicBvh.h <338:44 338:47>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DbvtNode [b3DynamicBvh.h <338:32 338:41>]
LOCAL_SYMBOL: b3DynamicBvh.h<339:26> [b3DynamicBvh.h <339:26 339:32>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 [b3DynamicBvh.h <339:15 339:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<340:26> [b3DynamicBvh.h <340:26 340:30>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 [b3DynamicBvh.h <340:15 340:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<341:26> [b3DynamicBvh.h <341:26 341:44>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 [b3DynamicBvh.h <341:15 341:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<342:22> [b3DynamicBvh.h <342:22 342:26>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> unsigned int [b3DynamicBvh.h <342:9 342:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<343:18> [b3DynamicBvh.h <343:18 343:27>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Scalar [b3DynamicBvh.h <343:9 343:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<344:26> [b3DynamicBvh.h <344:26 344:32>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 [b3DynamicBvh.h <344:15 344:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<345:26> [b3DynamicBvh.h <345:26 345:32>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 [b3DynamicBvh.h <345:15 345:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<346:9> [b3DynamicBvh.h <346:9 346:23>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DynamicBvh::rayTestInternal<typename T>::T [b3DynamicBvh.h <346:9 346:23>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideKDOP<typename T>::T [b3DynamicBvh.h <348:2 348:15>]
SYMBOL_METHOD public static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) [b3DynamicBvh.h <349:16 349:26>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void [b3DynamicBvh.h <349:10 349:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<349:46> [b3DynamicBvh.h <349:46 349:49>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DbvtNode [b3DynamicBvh.h <349:34 349:43>]
LOCAL_SYMBOL: b3DynamicBvh.h<350:20> [b3DynamicBvh.h <350:20 350:26>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3Vector3 [b3DynamicBvh.h <350:9 350:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<351:19> [b3DynamicBvh.h <351:19 351:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3Scalar [b3DynamicBvh.h <351:9 351:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<352:7> [b3DynamicBvh.h <352:7 352:11>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int [b3DynamicBvh.h <352:3 352:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<353:3> [b3DynamicBvh.h <353:3 353:17>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DynamicBvh::collideKDOP<typename T>::T [b3DynamicBvh.h <353:3 353:17>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideOCL<typename T>::T [b3DynamicBvh.h <354:2 354:15>]
SYMBOL_METHOD public static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) [b3DynamicBvh.h <355:16 355:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void [b3DynamicBvh.h <355:10 355:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<355:46> [b3DynamicBvh.h <355:46 355:49>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DbvtNode [b3DynamicBvh.h <355:34 355:43>]
LOCAL_SYMBOL: b3DynamicBvh.h<356:20> [b3DynamicBvh.h <356:20 356:26>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Vector3 [b3DynamicBvh.h <356:9 356:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<357:19> [b3DynamicBvh.h <357:19 357:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Scalar [b3DynamicBvh.h <357:9 357:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<358:20> [b3DynamicBvh.h <358:20 358:27>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Vector3 [b3DynamicBvh.h <358:9 358:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<359:7> [b3DynamicBvh.h <359:7 359:11>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <359:3 359:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<360:3> [b3DynamicBvh.h <360:3 360:17>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::collideOCL<typename T>::T [b3DynamicBvh.h <360:3 360:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<361:8> [b3DynamicBvh.h <361:8 361:15>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> bool [b3DynamicBvh.h <361:3 361:6>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideTU<typename T>::T [b3DynamicBvh.h <362:2 362:15>]
SYMBOL_METHOD public static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) [b3DynamicBvh.h <363:16 363:24>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <363:10 363:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<363:45> [b3DynamicBvh.h <363:45 363:48>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <363:33 363:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<364:3> [b3DynamicBvh.h <364:3 364:17>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::collideTU<typename T>::T [b3DynamicBvh.h <364:3 364:17>]
SYMBOL_METHOD public static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int) [b3DynamicBvh.h <366:2 <366:28 366:34> 375:2>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int) -> int [b3DynamicBvh.h <366:24 366:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:47> [b3DynamicBvh.h <366:47 366:47>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int) -> int [b3DynamicBvh.h <366:42 366:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:78> [b3DynamicBvh.h <366:78 366:78>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.h <366:55 366:66>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int) -> b3DynamicBvh::sStkNPS [b3DynamicBvh.h <366:69 366:75>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:89> [b3DynamicBvh.h <366:89 366:89>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int) -> b3Scalar [b3DynamicBvh.h <366:80 366:87>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:95> [b3DynamicBvh.h <366:95 366:95>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int) -> int [b3DynamicBvh.h <366:91 366:93>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:101> [b3DynamicBvh.h <366:101 366:101>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int) -> int [b3DynamicBvh.h <366:97 366:99>]
LOCAL_SYMBOL: b3DynamicBvh.h<367:2> [b3DynamicBvh.h <367:2 367:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<367:2> [b3DynamicBvh.h <375:2 375:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<368:7> [b3DynamicBvh.h <368:7 368:7>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int) -> int [b3DynamicBvh.h <368:3 368:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:95> [b3DynamicBvh.h <369:9 369:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:101> [b3DynamicBvh.h <369:11 369:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<370:3> [b3DynamicBvh.h <370:3 370:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<370:3> [b3DynamicBvh.h <373:3 373:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<368:7> [b3DynamicBvh.h <371:4 371:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:95> [b3DynamicBvh.h <371:7 371:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:101> [b3DynamicBvh.h <371:9 371:9>]
REFERENCE_USAGE static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int) -> b3Scalar b3DynamicBvh::sStkNPS::value [b3DynamicBvh.h <372:15 372:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:78> [b3DynamicBvh.h <372:7 372:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:47> [b3DynamicBvh.h <372:9 372:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<368:7> [b3DynamicBvh.h <372:11 372:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:89> [b3DynamicBvh.h <372:22 372:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:95> [b3DynamicBvh.h <372:25 372:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<368:7> [b3DynamicBvh.h <372:27 372:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:101> [b3DynamicBvh.h <372:37 372:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<368:7> [b3DynamicBvh.h <372:39 372:39>]
LOCAL_SYMBOL: b3DynamicBvh.h<366:101> [b3DynamicBvh.h <374:10 374:10>]
SYMBOL_METHOD public static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) [b3DynamicBvh.h <376:2 <376:28 376:35> 386:2>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> int [b3DynamicBvh.h <376:24 376:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<376:65> [b3DynamicBvh.h <376:65 376:69>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> b3AlignedObjectArray<int> [b3DynamicBvh.h <376:38 376:57>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<int> -> int [b3DynamicBvh.h <376:59 376:61>]
LOCAL_SYMBOL: b3DynamicBvh.h<377:34> [b3DynamicBvh.h <377:34 377:38>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNPS> [b3DynamicBvh.h <377:3 377:22>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<b3DynamicBvh::sStkNPS> -> b3DynamicBvh::sStkNPS [b3DynamicBvh.h <377:24 377:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<378:18> [b3DynamicBvh.h <378:18 378:22>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> b3DynamicBvh::sStkNPS [b3DynamicBvh.h <378:9 378:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<379:2> [b3DynamicBvh.h <379:2 379:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<379:2> [b3DynamicBvh.h <386:2 386:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<380:7> [b3DynamicBvh.h <380:7 380:7>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> int [b3DynamicBvh.h <380:3 380:5>]
SYMBOL_FUNCTION int b3AlignedObjectArray<int>::size() const
REFERENCE_CALL static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> int b3AlignedObjectArray<int>::size() const [b3DynamicBvh.h <381:12 381:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<376:65> [b3DynamicBvh.h <381:6 381:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<382:3> [b3DynamicBvh.h <382:3 382:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<382:3> [b3DynamicBvh.h <382:62 382:62>]
LOCAL_SYMBOL: b3DynamicBvh.h<380:7> [b3DynamicBvh.h <382:5 382:5>]
SYMBOL_FUNCTION int & b3AlignedObjectArray<int>::operator[](int)
REFERENCE_CALL static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> int & b3AlignedObjectArray<int>::operator[](int) [b3DynamicBvh.h <382:12 382:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<376:65> [b3DynamicBvh.h <382:7 382:11>]
REFERENCE_CALL static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> int b3AlignedObjectArray<int>::size() const [b3DynamicBvh.h <382:19 382:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<376:65> [b3DynamicBvh.h <382:13 382:17>]
SYMBOL_FUNCTION void b3AlignedObjectArray<int>::pop_back()
REFERENCE_CALL static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> void b3AlignedObjectArray<int>::pop_back() [b3DynamicBvh.h <382:35 382:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<376:65> [b3DynamicBvh.h <382:29 382:33>]
SYMBOL_FUNCTION b3DynamicBvh::sStkNPS & b3DynamicBvh::sStkNPS::operator=(const b3DynamicBvh::sStkNPS &)
REFERENCE_CALL static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> b3DynamicBvh::sStkNPS & b3DynamicBvh::sStkNPS::operator=(const b3DynamicBvh::sStkNPS &) [b3DynamicBvh.h <382:54 382:54>]
SYMBOL_FUNCTION b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int)
REFERENCE_CALL static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int) [b3DynamicBvh.h <382:51 382:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<377:34> [b3DynamicBvh.h <382:46 382:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<380:7> [b3DynamicBvh.h <382:52 382:52>]
LOCAL_SYMBOL: b3DynamicBvh.h<378:18> [b3DynamicBvh.h <382:55 382:59>]
LOCAL_SYMBOL: b3DynamicBvh.h<384:3> [b3DynamicBvh.h <384:3 384:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<384:3> [b3DynamicBvh.h <384:44 384:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<380:7> [b3DynamicBvh.h <384:5 384:5>]
REFERENCE_CALL static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::size() const [b3DynamicBvh.h <384:13 384:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<377:34> [b3DynamicBvh.h <384:7 384:11>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &)
REFERENCE_CALL static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::push_back(const b3DynamicBvh::sStkNPS &) [b3DynamicBvh.h <384:26 384:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<377:34> [b3DynamicBvh.h <384:20 384:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<378:18> [b3DynamicBvh.h <384:36 384:40>]
LOCAL_SYMBOL: b3DynamicBvh.h<380:7> [b3DynamicBvh.h <385:10 385:10>]
SYMBOL_METHOD private void b3DynamicBvh::b3DynamicBvh(const b3DynamicBvh &) [b3DynamicBvh.h <389:2 <389:2 389:13> 389:37>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::b3DynamicBvh(const b3DynamicBvh &) -> b3DynamicBvh [b3DynamicBvh.h <389:21 389:32>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh(const b3DynamicBvh &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <389:2 389:13>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray()
REFERENCE_CALL void b3DynamicBvh::b3DynamicBvh(const b3DynamicBvh &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray() [b3DynamicBvh.h <389:2 389:13>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh(const b3DynamicBvh &) -> b3AlignedObjectArray<const b3DbvtNode *> b3DynamicBvh::m_rayTestStack [b3DynamicBvh.h <389:2 389:13>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray()
REFERENCE_CALL void b3DynamicBvh::b3DynamicBvh(const b3DynamicBvh &) -> void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.h <389:2 389:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<389:36> [b3DynamicBvh.h <389:36 389:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<389:36> [b3DynamicBvh.h <389:37 389:37>]
SYMBOL_METHOD public b3DynamicBvh & b3DynamicBvh::operator=(const b3DynamicBvh &) [b3DynamicBvh.h <194:8 194:19>]
SYMBOL_METHOD public static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <397:1 <397:37 397:42> 402:1>]
SYMBOL_STRUCT b3DbvtAabbMm
QUALIFIER: b3DbvtAabbMm [b3DynamicBvh.h <397:23 397:34>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3DbvtAabbMm [b3DynamicBvh.h <397:8 397:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<397:61> [b3DynamicBvh.h <397:61 397:61>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <397:50 397:58>]
LOCAL_SYMBOL: b3DynamicBvh.h<397:80> [b3DynamicBvh.h <397:80 397:80>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <397:69 397:77>]
LOCAL_SYMBOL: b3DynamicBvh.h<398:1> [b3DynamicBvh.h <398:1 398:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<398:1> [b3DynamicBvh.h <402:1 402:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<399:15> [b3DynamicBvh.h <399:15 399:17>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3DbvtAabbMm [b3DynamicBvh.h <399:2 399:13>]
SYMBOL_FUNCTION void b3DbvtAabbMm::b3DbvtAabbMm()
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> void b3DbvtAabbMm::b3DbvtAabbMm() [b3DynamicBvh.h <399:15 399:17>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <400:8 400:8>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <400:6 400:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<399:15> [b3DynamicBvh.h <400:2 400:4>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <400:10 400:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<397:61> [b3DynamicBvh.h <400:9 400:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<397:80> [b3DynamicBvh.h <400:11 400:11>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <400:19 400:19>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <400:17 400:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<399:15> [b3DynamicBvh.h <400:13 400:15>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <400:21 400:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<397:61> [b3DynamicBvh.h <400:20 400:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<397:80> [b3DynamicBvh.h <400:22 400:22>]
SYMBOL_FUNCTION void b3DbvtAabbMm::b3DbvtAabbMm(b3DbvtAabbMm &&)
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) -> void b3DbvtAabbMm::b3DbvtAabbMm(b3DbvtAabbMm &&) [b3DynamicBvh.h <401:12 401:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<399:15> [b3DynamicBvh.h <401:9 401:11>]
SYMBOL_METHOD public static b3DbvtAabbMm b3DbvtAabbMm::FromCR(const b3Vector3 &, b3Scalar) [b3DynamicBvh.h <405:1 <405:37 405:42> 408:1>]
QUALIFIER: b3DbvtAabbMm [b3DynamicBvh.h <405:23 405:34>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCR(const b3Vector3 &, b3Scalar) -> b3DbvtAabbMm [b3DynamicBvh.h <405:8 405:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<405:61> [b3DynamicBvh.h <405:61 405:61>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCR(const b3Vector3 &, b3Scalar) -> b3Vector3 [b3DynamicBvh.h <405:50 405:58>]
LOCAL_SYMBOL: b3DynamicBvh.h<405:72> [b3DynamicBvh.h <405:72 405:72>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromCR(const b3Vector3 &, b3Scalar) -> b3Scalar [b3DynamicBvh.h <405:63 405:70>]
LOCAL_SYMBOL: b3DynamicBvh.h<406:1> [b3DynamicBvh.h <406:1 406:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<406:1> [b3DynamicBvh.h <408:1 408:1>]
SYMBOL_FUNCTION static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromCR(const b3Vector3 &, b3Scalar) -> static b3DbvtAabbMm b3DbvtAabbMm::FromCE(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <407:9 407:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<405:61> [b3DynamicBvh.h <407:16 407:16>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromCR(const b3Vector3 &, b3Scalar) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <407:18 407:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<405:72> [b3DynamicBvh.h <407:32 407:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<405:72> [b3DynamicBvh.h <407:34 407:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<405:72> [b3DynamicBvh.h <407:36 407:36>]
SYMBOL_METHOD public static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <411:1 <411:37 411:42> 416:1>]
QUALIFIER: b3DbvtAabbMm [b3DynamicBvh.h <411:23 411:34>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> b3DbvtAabbMm [b3DynamicBvh.h <411:8 411:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<411:61> [b3DynamicBvh.h <411:61 411:62>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <411:50 411:58>]
LOCAL_SYMBOL: b3DynamicBvh.h<411:81> [b3DynamicBvh.h <411:81 411:82>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <411:70 411:78>]
LOCAL_SYMBOL: b3DynamicBvh.h<412:1> [b3DynamicBvh.h <412:1 412:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<412:1> [b3DynamicBvh.h <416:1 416:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<413:15> [b3DynamicBvh.h <413:15 413:17>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> b3DbvtAabbMm [b3DynamicBvh.h <413:2 413:13>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> void b3DbvtAabbMm::b3DbvtAabbMm() [b3DynamicBvh.h <413:15 413:17>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3DynamicBvh.h <414:8 414:8>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <414:6 414:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<413:15> [b3DynamicBvh.h <414:2 414:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<411:61> [b3DynamicBvh.h <414:9 414:10>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3DynamicBvh.h <414:18 414:18>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <414:16 414:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<413:15> [b3DynamicBvh.h <414:12 414:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<411:81> [b3DynamicBvh.h <414:19 414:20>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromMM(const b3Vector3 &, const b3Vector3 &) -> void b3DbvtAabbMm::b3DbvtAabbMm(b3DbvtAabbMm &&) [b3DynamicBvh.h <415:12 415:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<413:15> [b3DynamicBvh.h <415:9 415:11>]
SYMBOL_METHOD public static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) [b3DynamicBvh.h <419:1 <419:37 419:46> 429:1>]
QUALIFIER: b3DbvtAabbMm [b3DynamicBvh.h <419:23 419:34>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> b3DbvtAabbMm [b3DynamicBvh.h <419:8 419:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<419:65> [b3DynamicBvh.h <419:65 419:67>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> b3Vector3 [b3DynamicBvh.h <419:54 419:62>]
LOCAL_SYMBOL: b3DynamicBvh.h<419:73> [b3DynamicBvh.h <419:73 419:73>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> int [b3DynamicBvh.h <419:69 419:71>]
LOCAL_SYMBOL: b3DynamicBvh.h<420:1> [b3DynamicBvh.h <420:1 420:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<420:1> [b3DynamicBvh.h <429:1 429:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<421:15> [b3DynamicBvh.h <421:15 421:17>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> b3DbvtAabbMm [b3DynamicBvh.h <421:2 421:13>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> void b3DbvtAabbMm::b3DbvtAabbMm() [b3DynamicBvh.h <421:15 421:17>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3DynamicBvh.h <422:8 422:8>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <422:6 422:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<421:15> [b3DynamicBvh.h <422:2 422:4>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3DynamicBvh.h <422:15 422:15>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <422:13 422:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<421:15> [b3DynamicBvh.h <422:9 422:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<419:65> [b3DynamicBvh.h <422:16 422:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<423:10> [b3DynamicBvh.h <423:10 423:10>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> int [b3DynamicBvh.h <423:6 423:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<423:10> [b3DynamicBvh.h <423:14 423:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<419:73> [b3DynamicBvh.h <423:16 423:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<423:10> [b3DynamicBvh.h <423:20 423:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<424:2> [b3DynamicBvh.h <424:2 424:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<424:2> [b3DynamicBvh.h <427:2 427:2>]
SYMBOL_FUNCTION void b3Vector3::setMin(const b3Vector3 &)
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> void b3Vector3::setMin(const b3Vector3 &) [b3DynamicBvh.h <425:10 425:15>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <425:7 425:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<421:15> [b3DynamicBvh.h <425:3 425:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<419:65> [b3DynamicBvh.h <425:17 425:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<423:10> [b3DynamicBvh.h <425:21 425:21>]
SYMBOL_FUNCTION void b3Vector3::setMax(const b3Vector3 &)
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> void b3Vector3::setMax(const b3Vector3 &) [b3DynamicBvh.h <426:10 426:15>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <426:7 426:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<421:15> [b3DynamicBvh.h <426:3 426:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<419:65> [b3DynamicBvh.h <426:17 426:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<423:10> [b3DynamicBvh.h <426:21 426:21>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 *, int) -> void b3DbvtAabbMm::b3DbvtAabbMm(b3DbvtAabbMm &&) [b3DynamicBvh.h <428:12 428:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<421:15> [b3DynamicBvh.h <428:9 428:11>]
SYMBOL_METHOD public static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) [b3DynamicBvh.h <432:1 <432:37 432:46> 442:1>]
QUALIFIER: b3DbvtAabbMm [b3DynamicBvh.h <432:23 432:34>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> b3DbvtAabbMm [b3DynamicBvh.h <432:8 432:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<432:66> [b3DynamicBvh.h <432:66 432:69>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> b3Vector3 [b3DynamicBvh.h <432:54 432:62>]
LOCAL_SYMBOL: b3DynamicBvh.h<432:75> [b3DynamicBvh.h <432:75 432:75>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> int [b3DynamicBvh.h <432:71 432:73>]
LOCAL_SYMBOL: b3DynamicBvh.h<433:1> [b3DynamicBvh.h <433:1 433:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<433:1> [b3DynamicBvh.h <442:1 442:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<434:15> [b3DynamicBvh.h <434:15 434:17>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> b3DbvtAabbMm [b3DynamicBvh.h <434:2 434:13>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> void b3DbvtAabbMm::b3DbvtAabbMm() [b3DynamicBvh.h <434:15 434:17>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3DynamicBvh.h <435:8 435:8>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <435:6 435:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<434:15> [b3DynamicBvh.h <435:2 435:4>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3DynamicBvh.h <435:15 435:15>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <435:13 435:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<434:15> [b3DynamicBvh.h <435:9 435:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<432:66> [b3DynamicBvh.h <435:17 435:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<436:10> [b3DynamicBvh.h <436:10 436:10>]
REFERENCE_TYPE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> int [b3DynamicBvh.h <436:6 436:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<436:10> [b3DynamicBvh.h <436:14 436:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<432:75> [b3DynamicBvh.h <436:16 436:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<436:10> [b3DynamicBvh.h <436:20 436:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<437:2> [b3DynamicBvh.h <437:2 437:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<437:2> [b3DynamicBvh.h <440:2 440:2>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> void b3Vector3::setMin(const b3Vector3 &) [b3DynamicBvh.h <438:10 438:15>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <438:7 438:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<434:15> [b3DynamicBvh.h <438:3 438:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<432:66> [b3DynamicBvh.h <438:18 438:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<436:10> [b3DynamicBvh.h <438:23 438:23>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> void b3Vector3::setMax(const b3Vector3 &) [b3DynamicBvh.h <439:10 439:15>]
REFERENCE_USAGE static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <439:7 439:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<434:15> [b3DynamicBvh.h <439:3 439:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<432:66> [b3DynamicBvh.h <439:18 439:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<436:10> [b3DynamicBvh.h <439:23 439:23>]
REFERENCE_CALL static b3DbvtAabbMm b3DbvtAabbMm::FromPoints(const b3Vector3 * *, int) -> void b3DbvtAabbMm::b3DbvtAabbMm(b3DbvtAabbMm &&) [b3DynamicBvh.h <441:12 441:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<434:15> [b3DynamicBvh.h <441:9 441:11>]
SYMBOL_METHOD public void b3DbvtAabbMm::Expand(const b3Vector3 &) [b3DynamicBvh.h <445:1 <445:36 445:41> 448:1>]
QUALIFIER: b3DbvtAabbMm [b3DynamicBvh.h <445:22 445:33>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::Expand(const b3Vector3 &) -> void [b3DynamicBvh.h <445:16 445:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<445:60> [b3DynamicBvh.h <445:60 445:60>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::Expand(const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <445:49 445:57>]
LOCAL_SYMBOL: b3DynamicBvh.h<446:1> [b3DynamicBvh.h <446:1 446:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<446:1> [b3DynamicBvh.h <448:1 448:1>]
SYMBOL_FUNCTION b3Vector3 & b3Vector3::operator-=(const b3Vector3 &)
REFERENCE_CALL void b3DbvtAabbMm::Expand(const b3Vector3 &) -> b3Vector3 & b3Vector3::operator-=(const b3Vector3 &) [b3DynamicBvh.h <447:4 447:5>]
REFERENCE_USAGE void b3DbvtAabbMm::Expand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <447:2 447:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<445:60> [b3DynamicBvh.h <447:6 447:6>]
REFERENCE_CALL void b3DbvtAabbMm::Expand(const b3Vector3 &) -> b3Vector3 & b3Vector3::operator+=(const b3Vector3 &) [b3DynamicBvh.h <447:10 447:11>]
REFERENCE_USAGE void b3DbvtAabbMm::Expand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <447:8 447:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<445:60> [b3DynamicBvh.h <447:12 447:12>]
SYMBOL_METHOD public void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) [b3DynamicBvh.h <451:1 <451:36 451:47> 456:1>]
QUALIFIER: b3DbvtAabbMm [b3DynamicBvh.h <451:22 451:33>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> void [b3DynamicBvh.h <451:16 451:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<451:66> [b3DynamicBvh.h <451:66 451:66>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <451:55 451:63>]
LOCAL_SYMBOL: b3DynamicBvh.h<452:1> [b3DynamicBvh.h <452:1 452:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<452:1> [b3DynamicBvh.h <456:1 456:1>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <453:7 453:7>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <453:7 453:7>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <453:7 453:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<451:66> [b3DynamicBvh.h <453:5 453:5>]
SYMBOL_FUNCTION void b3Vector3::setX(b3Scalar)
REFERENCE_CALL void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> void b3Vector3::setX(b3Scalar) [b3DynamicBvh.h <453:15 453:18>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <453:12 453:13>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <453:23 453:23>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <453:23 453:23>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <453:23 453:23>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <453:20 453:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<451:66> [b3DynamicBvh.h <453:25 453:25>]
REFERENCE_CALL void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> void b3Vector3::setX(b3Scalar) [b3DynamicBvh.h <453:40 453:43>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <453:37 453:38>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <453:48 453:48>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <453:48 453:48>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <453:48 453:48>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <453:45 453:46>]
LOCAL_SYMBOL: b3DynamicBvh.h<451:66> [b3DynamicBvh.h <453:50 453:50>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <454:7 454:7>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <454:7 454:7>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <454:7 454:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<451:66> [b3DynamicBvh.h <454:5 454:5>]
SYMBOL_FUNCTION void b3Vector3::setY(b3Scalar)
REFERENCE_CALL void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> void b3Vector3::setY(b3Scalar) [b3DynamicBvh.h <454:15 454:18>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <454:12 454:13>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <454:23 454:23>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <454:23 454:23>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <454:23 454:23>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <454:20 454:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<451:66> [b3DynamicBvh.h <454:25 454:25>]
REFERENCE_CALL void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> void b3Vector3::setY(b3Scalar) [b3DynamicBvh.h <454:40 454:43>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <454:37 454:38>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <454:48 454:48>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <454:48 454:48>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <454:48 454:48>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <454:45 454:46>]
LOCAL_SYMBOL: b3DynamicBvh.h<451:66> [b3DynamicBvh.h <454:50 454:50>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <455:7 455:7>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <455:7 455:7>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <455:7 455:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<451:66> [b3DynamicBvh.h <455:5 455:5>]
SYMBOL_FUNCTION void b3Vector3::setZ(b3Scalar)
REFERENCE_CALL void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> void b3Vector3::setZ(b3Scalar) [b3DynamicBvh.h <455:15 455:18>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <455:12 455:13>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <455:23 455:23>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <455:23 455:23>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <455:23 455:23>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <455:20 455:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<451:66> [b3DynamicBvh.h <455:25 455:25>]
REFERENCE_CALL void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> void b3Vector3::setZ(b3Scalar) [b3DynamicBvh.h <455:40 455:43>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <455:37 455:38>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <455:48 455:48>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <455:48 455:48>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <455:48 455:48>]
REFERENCE_USAGE void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <455:45 455:46>]
LOCAL_SYMBOL: b3DynamicBvh.h<451:66> [b3DynamicBvh.h <455:50 455:50>]
SYMBOL_METHOD public bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const [b3DynamicBvh.h <459:1 <459:36 459:42> 467:1>]
QUALIFIER: b3DbvtAabbMm [b3DynamicBvh.h <459:22 459:33>]
REFERENCE_TYPE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> bool [b3DynamicBvh.h <459:16 459:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<459:64> [b3DynamicBvh.h <459:64 459:64>]
REFERENCE_TYPE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3DbvtAabbMm [b3DynamicBvh.h <459:50 459:61>]
LOCAL_SYMBOL: b3DynamicBvh.h<460:1> [b3DynamicBvh.h <460:1 460:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<460:1> [b3DynamicBvh.h <467:1 467:1>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <461:14 461:14>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <461:14 461:14>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <461:14 461:14>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <461:11 461:12>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <461:22 461:22>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <461:22 461:22>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <461:22 461:22>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <461:19 461:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<459:64> [b3DynamicBvh.h <461:17 461:17>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <462:7 462:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <462:7 462:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <462:7 462:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <462:4 462:5>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <462:15 462:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <462:15 462:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <462:15 462:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <462:12 462:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<459:64> [b3DynamicBvh.h <462:10 462:10>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <463:7 463:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <463:7 463:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <463:7 463:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <463:4 463:5>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <463:15 463:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <463:15 463:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <463:15 463:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <463:12 463:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<459:64> [b3DynamicBvh.h <463:10 463:10>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <464:7 464:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <464:7 464:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <464:7 464:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <464:4 464:5>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <464:15 464:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <464:15 464:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <464:15 464:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <464:12 464:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<459:64> [b3DynamicBvh.h <464:10 464:10>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <465:7 465:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <465:7 465:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <465:7 465:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <465:4 465:5>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <465:15 465:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <465:15 465:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <465:15 465:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <465:12 465:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<459:64> [b3DynamicBvh.h <465:10 465:10>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <466:7 466:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <466:7 466:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <466:7 466:7>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <466:4 466:5>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <466:15 466:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <466:15 466:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <466:15 466:15>]
REFERENCE_USAGE bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <466:12 466:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<459:64> [b3DynamicBvh.h <466:10 466:10>]
SYMBOL_METHOD public int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const [b3DynamicBvh.h <470:1 <470:35 470:42> 495:1>]
QUALIFIER: b3DbvtAabbMm [b3DynamicBvh.h <470:21 470:32>]
REFERENCE_TYPE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> int [b3DynamicBvh.h <470:16 470:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<470:61> [b3DynamicBvh.h <470:61 470:61>]
REFERENCE_TYPE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 [b3DynamicBvh.h <470:50 470:58>]
LOCAL_SYMBOL: b3DynamicBvh.h<470:72> [b3DynamicBvh.h <470:72 470:72>]
REFERENCE_TYPE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Scalar [b3DynamicBvh.h <470:63 470:70>]
LOCAL_SYMBOL: b3DynamicBvh.h<470:78> [b3DynamicBvh.h <470:78 470:78>]
REFERENCE_TYPE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> int [b3DynamicBvh.h <470:74 470:76>]
LOCAL_SYMBOL: b3DynamicBvh.h<471:1> [b3DynamicBvh.h <471:1 471:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<471:1> [b3DynamicBvh.h <495:1 495:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:14> [b3DynamicBvh.h <472:14 472:15>]
REFERENCE_TYPE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 [b3DynamicBvh.h <472:2 472:10>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> void b3Vector3::b3Vector3() [b3DynamicBvh.h <472:14 472:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:17> [b3DynamicBvh.h <472:17 472:18>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> void b3Vector3::b3Vector3() [b3DynamicBvh.h <472:17 472:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<470:78> [b3DynamicBvh.h <473:9 473:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<474:2> [b3DynamicBvh.h <474:2 474:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<474:2> [b3DynamicBvh.h <491:2 491:2>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <475:18 475:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:17> [b3DynamicBvh.h <475:16 475:17>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <475:19 475:31>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <475:36 475:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <475:36 475:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <475:36 475:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <475:33 475:34>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <475:41 475:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <475:41 475:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <475:41 475:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <475:38 475:39>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <475:46 475:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <475:46 475:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <475:46 475:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <475:43 475:44>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <476:5 476:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:14> [b3DynamicBvh.h <476:3 476:4>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <476:6 476:18>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <476:23 476:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <476:23 476:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <476:23 476:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <476:20 476:21>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <476:28 476:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <476:28 476:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <476:28 476:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <476:25 476:26>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <476:33 476:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <476:33 476:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <476:33 476:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <476:30 476:31>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <477:18 477:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:17> [b3DynamicBvh.h <477:16 477:17>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <477:19 477:31>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <477:36 477:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <477:36 477:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <477:36 477:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <477:33 477:34>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <477:41 477:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <477:41 477:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <477:41 477:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <477:38 477:39>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <477:46 477:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <477:46 477:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <477:46 477:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <477:43 477:44>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <478:5 478:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:14> [b3DynamicBvh.h <478:3 478:4>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <478:6 478:18>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <478:23 478:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <478:23 478:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <478:23 478:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <478:20 478:21>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <478:28 478:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <478:28 478:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <478:28 478:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <478:25 478:26>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <478:33 478:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <478:33 478:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <478:33 478:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <478:30 478:31>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <479:18 479:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:17> [b3DynamicBvh.h <479:16 479:17>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <479:19 479:31>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <479:36 479:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <479:36 479:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <479:36 479:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <479:33 479:34>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <479:41 479:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <479:41 479:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <479:41 479:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <479:38 479:39>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <479:46 479:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <479:46 479:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <479:46 479:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <479:43 479:44>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <480:5 480:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:14> [b3DynamicBvh.h <480:3 480:4>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <480:6 480:18>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <480:23 480:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <480:23 480:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <480:23 480:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <480:20 480:21>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <480:28 480:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <480:28 480:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <480:28 480:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <480:25 480:26>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <480:33 480:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <480:33 480:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <480:33 480:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <480:30 480:31>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <481:18 481:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:17> [b3DynamicBvh.h <481:16 481:17>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <481:19 481:31>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <481:36 481:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <481:36 481:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <481:36 481:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <481:33 481:34>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <481:41 481:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <481:41 481:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <481:41 481:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <481:38 481:39>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <481:46 481:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <481:46 481:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <481:46 481:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <481:43 481:44>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <482:5 482:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:14> [b3DynamicBvh.h <482:3 482:4>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <482:6 482:18>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <482:23 482:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <482:23 482:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <482:23 482:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <482:20 482:21>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <482:28 482:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <482:28 482:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <482:28 482:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <482:25 482:26>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <482:33 482:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <482:33 482:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <482:33 482:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <482:30 482:31>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <483:18 483:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:17> [b3DynamicBvh.h <483:16 483:17>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <483:19 483:31>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <483:36 483:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <483:36 483:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <483:36 483:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <483:33 483:34>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <483:41 483:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <483:41 483:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <483:41 483:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <483:38 483:39>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <483:46 483:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <483:46 483:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <483:46 483:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <483:43 483:44>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <484:5 484:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:14> [b3DynamicBvh.h <484:3 484:4>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <484:6 484:18>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <484:23 484:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <484:23 484:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <484:23 484:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <484:20 484:21>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <484:28 484:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <484:28 484:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <484:28 484:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <484:25 484:26>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <484:33 484:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <484:33 484:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <484:33 484:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <484:30 484:31>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <485:18 485:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:17> [b3DynamicBvh.h <485:16 485:17>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <485:19 485:31>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <485:36 485:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <485:36 485:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <485:36 485:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <485:33 485:34>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <485:41 485:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <485:41 485:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <485:41 485:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <485:38 485:39>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <485:46 485:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <485:46 485:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <485:46 485:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <485:43 485:44>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <486:5 486:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:14> [b3DynamicBvh.h <486:3 486:4>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <486:6 486:18>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <486:23 486:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <486:23 486:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <486:23 486:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <486:20 486:21>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <486:28 486:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <486:28 486:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <486:28 486:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <486:25 486:26>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <486:33 486:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <486:33 486:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <486:33 486:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <486:30 486:31>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <487:18 487:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:17> [b3DynamicBvh.h <487:16 487:17>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <487:19 487:31>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <487:36 487:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <487:36 487:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <487:36 487:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <487:33 487:34>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <487:41 487:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <487:41 487:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <487:41 487:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <487:38 487:39>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <487:46 487:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <487:46 487:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <487:46 487:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <487:43 487:44>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <488:5 488:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:14> [b3DynamicBvh.h <488:3 488:4>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <488:6 488:18>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <488:23 488:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <488:23 488:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <488:23 488:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <488:20 488:21>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <488:28 488:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <488:28 488:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <488:28 488:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <488:25 488:26>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <488:33 488:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <488:33 488:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <488:33 488:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <488:30 488:31>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <489:18 489:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:17> [b3DynamicBvh.h <489:16 489:17>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <489:19 489:31>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <489:36 489:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <489:36 489:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <489:36 489:36>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <489:33 489:34>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <489:41 489:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <489:41 489:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <489:41 489:41>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <489:38 489:39>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <489:46 489:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <489:46 489:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <489:46 489:46>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <489:43 489:44>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <490:5 490:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:14> [b3DynamicBvh.h <490:3 490:4>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <490:6 490:18>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <490:23 490:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <490:23 490:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <490:23 490:23>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <490:20 490:21>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <490:28 490:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <490:28 490:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <490:28 490:28>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <490:25 490:26>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <490:33 490:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <490:33 490:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <490:33 490:33>]
REFERENCE_USAGE int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <490:30 490:31>]
SYMBOL_FUNCTION b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <492:6 492:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<470:61> [b3DynamicBvh.h <492:12 492:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:17> [b3DynamicBvh.h <492:14 492:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<470:72> [b3DynamicBvh.h <492:18 492:18>]
REFERENCE_CALL int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const -> b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <493:6 493:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<470:61> [b3DynamicBvh.h <493:12 493:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<472:14> [b3DynamicBvh.h <493:14 493:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<470:72> [b3DynamicBvh.h <493:18 493:18>]
SYMBOL_METHOD public b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const [b3DynamicBvh.h <498:1 <498:39 498:52> 505:1>]
QUALIFIER: b3DbvtAabbMm [b3DynamicBvh.h <498:25 498:36>]
REFERENCE_TYPE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Scalar [b3DynamicBvh.h <498:16 498:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<498:71> [b3DynamicBvh.h <498:71 498:71>]
REFERENCE_TYPE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3 [b3DynamicBvh.h <498:60 498:68>]
LOCAL_SYMBOL: b3DynamicBvh.h<498:82> [b3DynamicBvh.h <498:82 498:86>]
REFERENCE_TYPE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> unsigned int [b3DynamicBvh.h <498:73 498:80>]
LOCAL_SYMBOL: b3DynamicBvh.h<499:1> [b3DynamicBvh.h <499:1 499:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<499:1> [b3DynamicBvh.h <505:1 505:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<500:19> [b3DynamicBvh.h <500:19 500:19>]
REFERENCE_TYPE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3 [b3DynamicBvh.h <500:8 500:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<500:23> [b3DynamicBvh.h <500:23 500:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<500:23> [b3DynamicBvh.h <500:31 500:31>]
REFERENCE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <500:25 500:26>]
REFERENCE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <500:29 500:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<501:19> [b3DynamicBvh.h <501:19 501:19>]
REFERENCE_TYPE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3 [b3DynamicBvh.h <501:8 501:16>]
REFERENCE_CALL b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.h <501:23 501:35>]
REFERENCE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <501:55 501:55>]
REFERENCE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <501:55 501:55>]
REFERENCE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <501:55 501:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<500:19> [b3DynamicBvh.h <501:38 501:38>]
LOCAL_SYMBOL: b3DynamicBvh.h<498:82> [b3DynamicBvh.h <501:41 501:45>]
REFERENCE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <502:20 502:20>]
REFERENCE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <502:20 502:20>]
REFERENCE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <502:20 502:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<500:19> [b3DynamicBvh.h <502:3 502:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<498:82> [b3DynamicBvh.h <502:6 502:10>]
REFERENCE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <503:20 503:20>]
REFERENCE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <503:20 503:20>]
REFERENCE_USAGE b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <503:20 503:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<500:19> [b3DynamicBvh.h <503:3 503:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<498:82> [b3DynamicBvh.h <503:6 503:10>]
REFERENCE_CALL b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const -> b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <504:9 504:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<501:19> [b3DynamicBvh.h <504:15 504:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<498:71> [b3DynamicBvh.h <504:17 504:17>]
SYMBOL_METHOD private void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const [b3DynamicBvh.h <508:1 <508:36 508:42> 517:1>]
QUALIFIER: b3DbvtAabbMm [b3DynamicBvh.h <508:22 508:33>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> void [b3DynamicBvh.h <508:16 508:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:61> [b3DynamicBvh.h <508:61 508:61>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> b3Vector3 [b3DynamicBvh.h <508:50 508:58>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:73> [b3DynamicBvh.h <508:73 508:75>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3DynamicBvh.h <508:63 508:70>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:87> [b3DynamicBvh.h <508:87 508:89>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> b3Scalar [b3DynamicBvh.h <508:77 508:84>]
LOCAL_SYMBOL: b3DynamicBvh.h<509:1> [b3DynamicBvh.h <509:1 509:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<509:1> [b3DynamicBvh.h <517:1 517:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <510:10 510:10>]
REFERENCE_TYPE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> int [b3DynamicBvh.h <510:6 510:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <510:14 510:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <510:20 510:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<511:2> [b3DynamicBvh.h <511:2 511:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<511:2> [b3DynamicBvh.h <516:2 516:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:61> [b3DynamicBvh.h <512:6 512:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <512:8 512:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<513:3> [b3DynamicBvh.h <513:3 513:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<513:3> [b3DynamicBvh.h <513:38 513:38>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:73> [b3DynamicBvh.h <513:5 513:7>]
REFERENCE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <513:10 513:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <513:13 513:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:61> [b3DynamicBvh.h <513:16 513:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <513:18 513:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:87> [b3DynamicBvh.h <513:21 513:23>]
REFERENCE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <513:26 513:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <513:29 513:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:61> [b3DynamicBvh.h <513:32 513:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <513:34 513:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<515:3> [b3DynamicBvh.h <515:3 515:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<515:3> [b3DynamicBvh.h <515:38 515:38>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:73> [b3DynamicBvh.h <515:5 515:7>]
REFERENCE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <515:10 515:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <515:13 515:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:61> [b3DynamicBvh.h <515:16 515:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <515:18 515:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:87> [b3DynamicBvh.h <515:21 515:23>]
REFERENCE_USAGE void b3DbvtAabbMm::AddSpan(const b3Vector3 &, b3Scalar &, b3Scalar &) const -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <515:26 515:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <515:29 515:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<508:61> [b3DynamicBvh.h <515:32 515:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<510:10> [b3DynamicBvh.h <515:34 515:34>]
SYMBOL_FUNCTION bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.h <520:1 <520:22 520:32> 540:1>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> bool [b3DynamicBvh.h <520:16 520:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<520:55> [b3DynamicBvh.h <520:55 520:55>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <520:41 520:52>]
LOCAL_SYMBOL: b3DynamicBvh.h<521:31> [b3DynamicBvh.h <521:31 521:31>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <521:17 521:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<522:1> [b3DynamicBvh.h <522:1 522:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<522:1> [b3DynamicBvh.h <540:1 540:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<524:15> [b3DynamicBvh.h <524:15 524:16>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 [b3DynamicBvh.h <524:8 524:13>]
SYMBOL_FUNCTION __m128 _mm_or_ps(__m128, __m128)
REFERENCE_CALL bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_or_ps(__m128, __m128) [b3DynamicBvh.h <524:18 524:26>]
SYMBOL_FUNCTION __m128 _mm_cmplt_ps(__m128, __m128)
REFERENCE_CALL bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_cmplt_ps(__m128, __m128) [b3DynamicBvh.h <524:29 524:40>]
SYMBOL_FUNCTION __m128 _mm_load_ps(const float *)
REFERENCE_CALL bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <524:42 524:52>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <524:56 524:57>]
LOCAL_SYMBOL: b3DynamicBvh.h<521:31> [b3DynamicBvh.h <524:54 524:54>]
REFERENCE_CALL bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <524:60 524:70>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <524:74 524:75>]
LOCAL_SYMBOL: b3DynamicBvh.h<520:55> [b3DynamicBvh.h <524:72 524:72>]
REFERENCE_CALL bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_cmplt_ps(__m128, __m128) [b3DynamicBvh.h <525:3 525:14>]
REFERENCE_CALL bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <525:16 525:26>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <525:30 525:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<520:55> [b3DynamicBvh.h <525:28 525:28>]
REFERENCE_CALL bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <525:34 525:44>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <525:48 525:49>]
LOCAL_SYMBOL: b3DynamicBvh.h<521:31> [b3DynamicBvh.h <525:46 525:46>]
LOCAL_SYMBOL: b3DynamicBvh.h<527:17> [b3DynamicBvh.h <527:17 527:18>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> int [b3DynamicBvh.h <527:8 527:14>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> int [b3DynamicBvh.h <527:27 527:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<524:15> [b3DynamicBvh.h <527:37 527:38>]
LOCAL_SYMBOL: b3DynamicBvh.h<527:17> [b3DynamicBvh.h <531:10 531:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<527:17> [b3DynamicBvh.h <531:16 531:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<527:17> [b3DynamicBvh.h <531:22 531:23>]
SYMBOL_FUNCTION bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) [b3DynamicBvh.h <545:1 <545:22 545:32> 554:1>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> bool [b3DynamicBvh.h <545:16 545:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<545:55> [b3DynamicBvh.h <545:55 545:55>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3DbvtAabbMm [b3DynamicBvh.h <545:41 545:52>]
LOCAL_SYMBOL: b3DynamicBvh.h<546:28> [b3DynamicBvh.h <546:28 546:28>]
REFERENCE_TYPE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.h <546:17 546:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<547:1> [b3DynamicBvh.h <547:1 547:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<547:1> [b3DynamicBvh.h <554:1 554:1>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <548:13 548:13>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <548:13 548:13>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <548:13 548:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<546:28> [b3DynamicBvh.h <548:11 548:11>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <548:21 548:21>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <548:21 548:21>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <548:21 548:21>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <548:18 548:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<545:55> [b3DynamicBvh.h <548:16 548:16>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <549:6 549:6>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <549:6 549:6>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <549:6 549:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<546:28> [b3DynamicBvh.h <549:4 549:4>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <549:14 549:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <549:14 549:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <549:14 549:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <549:11 549:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<545:55> [b3DynamicBvh.h <549:9 549:9>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <550:6 550:6>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <550:6 550:6>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <550:6 550:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<546:28> [b3DynamicBvh.h <550:4 550:4>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <550:14 550:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <550:14 550:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <550:14 550:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <550:11 550:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<545:55> [b3DynamicBvh.h <550:9 550:9>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <551:6 551:6>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <551:6 551:6>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <551:6 551:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<546:28> [b3DynamicBvh.h <551:4 551:4>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <551:14 551:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <551:14 551:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <551:14 551:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <551:11 551:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<545:55> [b3DynamicBvh.h <551:9 551:9>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <552:6 552:6>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <552:6 552:6>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <552:6 552:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<546:28> [b3DynamicBvh.h <552:4 552:4>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <552:14 552:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <552:14 552:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <552:14 552:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <552:11 552:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<545:55> [b3DynamicBvh.h <552:9 552:9>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <553:6 553:6>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <553:6 553:6>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <553:6 553:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<546:28> [b3DynamicBvh.h <553:4 553:4>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <553:14 553:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <553:14 553:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <553:14 553:14>]
REFERENCE_USAGE bool b3Intersect(const b3DbvtAabbMm &, const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <553:11 553:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<545:55> [b3DynamicBvh.h <553:9 553:9>]
SYMBOL_FUNCTION b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.h <564:1 <564:25 564:35> 569:1>]
REFERENCE_TYPE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Scalar [b3DynamicBvh.h <564:16 564:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<564:58> [b3DynamicBvh.h <564:58 564:58>]
REFERENCE_TYPE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <564:44 564:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<565:31> [b3DynamicBvh.h <565:31 565:31>]
REFERENCE_TYPE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <565:17 565:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<566:1> [b3DynamicBvh.h <566:1 566:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<566:1> [b3DynamicBvh.h <569:1 569:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<567:18> [b3DynamicBvh.h <567:18 567:18>]
REFERENCE_TYPE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 [b3DynamicBvh.h <567:8 567:16>]
REFERENCE_CALL b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <567:31 567:31>]
REFERENCE_CALL b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <567:25 567:25>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <567:23 567:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<564:58> [b3DynamicBvh.h <567:21 567:21>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <567:28 567:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<564:58> [b3DynamicBvh.h <567:26 567:26>]
REFERENCE_CALL b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 operator+(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <567:37 567:37>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <567:35 567:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<565:31> [b3DynamicBvh.h <567:33 567:33>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <567:40 567:41>]
LOCAL_SYMBOL: b3DynamicBvh.h<565:31> [b3DynamicBvh.h <567:38 567:38>]
REFERENCE_CALL b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Scalar b3Fabs(b3Scalar) [b3DynamicBvh.h <568:9 568:14>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <568:18 568:18>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <568:18 568:18>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <568:18 568:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<567:18> [b3DynamicBvh.h <568:16 568:16>]
REFERENCE_CALL b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Scalar b3Fabs(b3Scalar) [b3DynamicBvh.h <568:21 568:26>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <568:30 568:30>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <568:30 568:30>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <568:30 568:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<567:18> [b3DynamicBvh.h <568:28 568:28>]
REFERENCE_CALL b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Scalar b3Fabs(b3Scalar) [b3DynamicBvh.h <568:33 568:38>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <568:42 568:42>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <568:42 568:42>]
REFERENCE_USAGE b3Scalar b3Proximity(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <568:42 568:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<567:18> [b3DynamicBvh.h <568:40 568:40>]
SYMBOL_FUNCTION int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.h <574:1 <574:22 574:29> 650:1>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> int [b3DynamicBvh.h <574:16 574:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<574:52> [b3DynamicBvh.h <574:52 574:52>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <574:38 574:49>]
LOCAL_SYMBOL: b3DynamicBvh.h<575:31> [b3DynamicBvh.h <575:31 575:31>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <575:17 575:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<576:31> [b3DynamicBvh.h <576:31 576:31>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <576:17 576:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<577:1> [b3DynamicBvh.h <577:1 577:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<577:1> [b3DynamicBvh.h <650:1 650:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<581:56> [b3DynamicBvh.h <581:56 581:59>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> unsigned int [b3DynamicBvh.h <581:38 581:45>]
LOCAL_SYMBOL: b3DynamicBvh.h<581:63> [b3DynamicBvh.h <581:63 581:63>]
LOCAL_SYMBOL: b3DynamicBvh.h<581:63> [b3DynamicBvh.h <581:107 581:107>]
SYMBOL_UNION b3Select::b3SSEUnion [b3DynamicBvh.h <588:2 <588:8 588:17> 593:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<589:2> [b3DynamicBvh.h <589:2 589:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<589:2> [b3DynamicBvh.h <593:2 593:2>]
SYMBOL_FIELD public __m128 b3Select::b3SSEUnion::ssereg [b3DynamicBvh.h <590:13 590:18>]
REFERENCE_TYPE_USAGE __m128 b3Select::b3SSEUnion::ssereg -> __m128 [b3DynamicBvh.h <590:5 590:10>]
SYMBOL_FIELD public float [] b3Select::b3SSEUnion::floats [b3DynamicBvh.h <591:12 591:17>]
REFERENCE_TYPE_USAGE float [] b3Select::b3SSEUnion::floats -> float [b3DynamicBvh.h <591:5 591:9>]
SYMBOL_FIELD public int [] b3Select::b3SSEUnion::ints [b3DynamicBvh.h <592:11 592:14>]
REFERENCE_TYPE_USAGE int [] b3Select::b3SSEUnion::ints -> int [b3DynamicBvh.h <592:5 592:7>]
SYMBOL_METHOD public void b3Select::b3SSEUnion::b3SSEUnion() [b3DynamicBvh.h <588:8 <588:8 588:17> 588:17>]
SYMBOL_METHOD public void b3Select::b3SSEUnion::b3SSEUnion(const b3Select::b3SSEUnion &) [b3DynamicBvh.h <588:8 588:17>]
SYMBOL_METHOD public void b3Select::b3SSEUnion::b3SSEUnion(b3Select::b3SSEUnion &&) [b3DynamicBvh.h <588:8 588:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<595:9> [b3DynamicBvh.h <595:9 595:11>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 [b3DynamicBvh.h <595:2 595:7>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <595:13 595:23>]
REFERENCE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <595:27 595:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<574:52> [b3DynamicBvh.h <595:25 595:25>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <596:5 596:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<595:9> [b3DynamicBvh.h <596:2 596:4>]
SYMBOL_FUNCTION __m128 _mm_add_ps(__m128, __m128)
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_add_ps(__m128, __m128) [b3DynamicBvh.h <596:6 596:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <596:17 596:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<595:9> [b3DynamicBvh.h <596:17 596:19>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <596:21 596:31>]
REFERENCE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <596:35 596:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<574:52> [b3DynamicBvh.h <596:33 596:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <597:9 597:11>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 [b3DynamicBvh.h <597:2 597:7>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <597:13 597:23>]
REFERENCE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <597:27 597:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<575:31> [b3DynamicBvh.h <597:25 597:25>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <598:5 598:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <598:2 598:4>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_add_ps(__m128, __m128) [b3DynamicBvh.h <598:6 598:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <598:17 598:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <598:17 598:19>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <598:21 598:31>]
REFERENCE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <598:35 598:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<575:31> [b3DynamicBvh.h <598:33 598:33>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <599:5 599:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <599:2 599:4>]
SYMBOL_FUNCTION __m128 _mm_sub_ps(__m128, __m128)
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_sub_ps(__m128, __m128) [b3DynamicBvh.h <599:6 599:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <599:17 599:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <599:17 599:19>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <599:21 599:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<595:9> [b3DynamicBvh.h <599:21 599:23>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <600:5 600:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <600:2 600:4>]
SYMBOL_FUNCTION __m128 _mm_and_ps(__m128, __m128)
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_and_ps(__m128, __m128) [b3DynamicBvh.h <600:6 600:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <600:17 600:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <600:17 600:19>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <600:21 600:31>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float [b3DynamicBvh.h <600:40 600:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<581:56> [b3DynamicBvh.h <600:47 600:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <601:9 601:11>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 [b3DynamicBvh.h <601:2 601:7>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <601:13 601:23>]
REFERENCE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <601:27 601:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<576:31> [b3DynamicBvh.h <601:25 601:25>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <602:5 602:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <602:2 602:4>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_add_ps(__m128, __m128) [b3DynamicBvh.h <602:6 602:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <602:17 602:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <602:17 602:19>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <602:21 602:31>]
REFERENCE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <602:35 602:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<576:31> [b3DynamicBvh.h <602:33 602:33>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <603:5 603:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <603:2 603:4>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_sub_ps(__m128, __m128) [b3DynamicBvh.h <603:6 603:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <603:17 603:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <603:17 603:19>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <603:21 603:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<595:9> [b3DynamicBvh.h <603:21 603:23>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <604:5 604:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <604:2 604:4>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_and_ps(__m128, __m128) [b3DynamicBvh.h <604:6 604:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <604:17 604:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <604:17 604:19>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <604:21 604:31>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float [b3DynamicBvh.h <604:40 604:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<581:56> [b3DynamicBvh.h <604:47 604:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<605:9> [b3DynamicBvh.h <605:9 605:10>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 [b3DynamicBvh.h <605:2 605:7>]
SYMBOL_FUNCTION __m128 _mm_movehl_ps(__m128, __m128)
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_movehl_ps(__m128, __m128) [b3DynamicBvh.h <605:12 605:24>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <605:26 605:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <605:26 605:28>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <605:30 605:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <605:30 605:32>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <606:5 606:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <606:2 606:4>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_add_ps(__m128, __m128) [b3DynamicBvh.h <606:6 606:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <606:17 606:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <606:17 606:19>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <606:21 606:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<605:9> [b3DynamicBvh.h <606:21 606:22>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <607:5 607:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <607:2 607:4>]
SYMBOL_FUNCTION __m128 _mm_add_ss(__m128, __m128)
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_add_ss(__m128, __m128) [b3DynamicBvh.h <607:6 607:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <607:17 607:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <607:17 607:19>]
SYMBOL_FUNCTION __m128 _mm_shuffle_ps(__m128, __m128, unsigned int)
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_shuffle_ps(__m128, __m128, unsigned int) [b3DynamicBvh.h <607:21 607:34>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <607:36 607:38>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <607:36 607:38>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <607:40 607:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <607:40 607:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<608:9> [b3DynamicBvh.h <608:9 608:10>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 [b3DynamicBvh.h <608:2 608:7>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_movehl_ps(__m128, __m128) [b3DynamicBvh.h <608:12 608:24>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <608:26 608:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <608:26 608:28>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <608:30 608:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <608:30 608:32>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <609:5 609:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <609:2 609:4>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_add_ps(__m128, __m128) [b3DynamicBvh.h <609:6 609:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <609:17 609:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <609:17 609:19>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <609:21 609:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<608:9> [b3DynamicBvh.h <609:21 609:22>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <610:5 610:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <610:2 610:4>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_add_ss(__m128, __m128) [b3DynamicBvh.h <610:6 610:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <610:17 610:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <610:17 610:19>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_shuffle_ps(__m128, __m128, unsigned int) [b3DynamicBvh.h <610:21 610:34>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <610:36 610:38>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <610:36 610:38>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <610:40 610:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <610:40 610:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<612:13> [b3DynamicBvh.h <612:13 612:15>]
REFERENCE_TYPE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Select::b3SSEUnion [b3DynamicBvh.h <612:2 612:11>]
SYMBOL_FUNCTION void b3Select::b3SSEUnion::b3SSEUnion()
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void b3Select::b3SSEUnion::b3SSEUnion() [b3DynamicBvh.h <612:13 612:15>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <613:13 613:13>]
REFERENCE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 b3Select::b3SSEUnion::ssereg [b3DynamicBvh.h <613:6 613:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<612:13> [b3DynamicBvh.h <613:2 613:4>]
SYMBOL_FUNCTION __m128 _mm_cmple_ss(__m128, __m128)
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> __m128 _mm_cmple_ss(__m128, __m128) [b3DynamicBvh.h <613:15 613:26>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <613:28 613:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<601:9> [b3DynamicBvh.h <613:28 613:30>]
REFERENCE_CALL int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <613:32 613:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<597:9> [b3DynamicBvh.h <613:32 613:34>]
REFERENCE_USAGE int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> int [] b3Select::b3SSEUnion::ints [b3DynamicBvh.h <614:13 614:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<612:13> [b3DynamicBvh.h <614:9 614:11>]
SYMBOL_FUNCTION void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.h <653:1 <653:22 653:28> 673:1>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> void [b3DynamicBvh.h <653:16 653:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<653:51> [b3DynamicBvh.h <653:51 653:51>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <653:37 653:48>]
LOCAL_SYMBOL: b3DynamicBvh.h<654:30> [b3DynamicBvh.h <654:30 654:30>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <654:16 654:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<655:24> [b3DynamicBvh.h <655:24 655:24>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <655:10 655:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<656:1> [b3DynamicBvh.h <656:1 656:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<656:1> [b3DynamicBvh.h <673:1 673:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<658:9> [b3DynamicBvh.h <658:9 658:11>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 [b3DynamicBvh.h <658:2 658:7>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <658:13 658:23>]
REFERENCE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <658:27 658:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<653:51> [b3DynamicBvh.h <658:25 658:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<659:9> [b3DynamicBvh.h <659:9 659:11>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 [b3DynamicBvh.h <659:2 659:7>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <659:13 659:23>]
REFERENCE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <659:27 659:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<653:51> [b3DynamicBvh.h <659:25 659:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<660:9> [b3DynamicBvh.h <660:9 660:11>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 [b3DynamicBvh.h <660:2 660:7>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <660:13 660:23>]
REFERENCE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <660:27 660:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<654:30> [b3DynamicBvh.h <660:25 660:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<661:9> [b3DynamicBvh.h <661:9 661:11>]
REFERENCE_TYPE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 [b3DynamicBvh.h <661:2 661:7>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 _mm_load_ps(const float *) [b3DynamicBvh.h <661:13 661:23>]
REFERENCE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <661:27 661:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<654:30> [b3DynamicBvh.h <661:25 661:25>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <662:5 662:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<658:9> [b3DynamicBvh.h <662:2 662:4>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 _mm_min_ps(__m128, __m128) [b3DynamicBvh.h <662:6 662:15>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <662:17 662:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<658:9> [b3DynamicBvh.h <662:17 662:19>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <662:21 662:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<660:9> [b3DynamicBvh.h <662:21 662:23>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 & __m128::operator=(__m128 &&) [b3DynamicBvh.h <663:5 663:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<659:9> [b3DynamicBvh.h <663:2 663:4>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> __m128 _mm_max_ps(__m128, __m128) [b3DynamicBvh.h <663:6 663:15>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <663:17 663:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<659:9> [b3DynamicBvh.h <663:17 663:19>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <663:21 663:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<661:9> [b3DynamicBvh.h <663:21 663:23>]
SYMBOL_FUNCTION void _mm_store_ps(float *, __m128)
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> void _mm_store_ps(float *, __m128) [b3DynamicBvh.h <664:2 664:13>]
REFERENCE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <664:17 664:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<655:24> [b3DynamicBvh.h <664:15 664:15>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <664:20 664:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<658:9> [b3DynamicBvh.h <664:20 664:22>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> void _mm_store_ps(float *, __m128) [b3DynamicBvh.h <665:2 665:13>]
REFERENCE_USAGE void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <665:17 665:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<655:24> [b3DynamicBvh.h <665:15 665:15>]
REFERENCE_CALL void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) -> void __m128::__m128(const __m128 &) [b3DynamicBvh.h <665:20 665:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<659:9> [b3DynamicBvh.h <665:20 665:22>]
SYMBOL_FUNCTION bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.h <676:1 <676:22 676:31> 685:1>]
REFERENCE_TYPE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> bool [b3DynamicBvh.h <676:16 676:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<676:54> [b3DynamicBvh.h <676:54 676:54>]
REFERENCE_TYPE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <676:40 676:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<677:30> [b3DynamicBvh.h <677:30 677:30>]
REFERENCE_TYPE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3DbvtAabbMm [b3DynamicBvh.h <677:16 677:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<678:1> [b3DynamicBvh.h <678:1 678:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<678:1> [b3DynamicBvh.h <685:1 685:1>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <679:16 679:16>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <679:16 679:16>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <679:16 679:16>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <679:13 679:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<676:54> [b3DynamicBvh.h <679:11 679:11>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <679:24 679:24>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <679:24 679:24>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <679:24 679:24>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <679:21 679:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<677:30> [b3DynamicBvh.h <679:19 679:19>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <680:9 680:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <680:9 680:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <680:9 680:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <680:6 680:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<676:54> [b3DynamicBvh.h <680:4 680:4>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <680:17 680:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <680:17 680:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <680:17 680:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <680:14 680:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<677:30> [b3DynamicBvh.h <680:12 680:12>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <681:9 681:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <681:9 681:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <681:9 681:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <681:6 681:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<676:54> [b3DynamicBvh.h <681:4 681:4>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <681:17 681:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <681:17 681:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <681:17 681:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mi [b3DynamicBvh.h <681:14 681:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<677:30> [b3DynamicBvh.h <681:12 681:12>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <682:9 682:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <682:9 682:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <682:9 682:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <682:6 682:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<676:54> [b3DynamicBvh.h <682:4 682:4>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <682:17 682:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <682:17 682:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <682:17 682:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <682:14 682:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<677:30> [b3DynamicBvh.h <682:12 682:12>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <683:9 683:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <683:9 683:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <683:9 683:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <683:6 683:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<676:54> [b3DynamicBvh.h <683:4 683:4>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <683:17 683:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <683:17 683:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <683:17 683:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <683:14 683:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<677:30> [b3DynamicBvh.h <683:12 683:12>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <684:9 684:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <684:9 684:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <684:9 684:9>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <684:6 684:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<676:54> [b3DynamicBvh.h <684:4 684:4>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <684:17 684:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <684:17 684:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <684:17 684:17>]
REFERENCE_USAGE bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) -> b3Vector3 b3DbvtAabbMm::mx [b3DynamicBvh.h <684:14 684:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<677:30> [b3DynamicBvh.h <684:12 684:12>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::enumNodes<typename T>::T [b3DynamicBvh.h <692:1 692:14>]
SYMBOL_METHOD public static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) [b3DynamicBvh.h <692:1 <693:28 693:36> 703:1>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <693:8 693:11>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <693:45 693:54>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::enumNodes<typename T>::T [b3DynamicBvh.h <694:11 694:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<695:1> [b3DynamicBvh.h <695:1 695:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<695:1> [b3DynamicBvh.h <703:1 703:1>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::ICollide [b3DynamicBvh.h <696:2 696:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::enumNodes<typename T>::T [b3DynamicBvh.h <696:2 696:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <696:2 696:18>]
REFERENCE_CALL static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <698:11 698:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<699:2> [b3DynamicBvh.h <699:2 699:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<699:2> [b3DynamicBvh.h <702:2 702:2>]
REFERENCE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <700:19 700:24>]
REFERENCE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <700:19 700:24>]
REFERENCE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <701:19 701:24>]
REFERENCE_USAGE static void b3DynamicBvh::enumNodes<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <701:19 701:24>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::enumLeaves<typename T>::T [b3DynamicBvh.h <706:1 706:14>]
SYMBOL_METHOD public static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) [b3DynamicBvh.h <706:1 <707:28 707:37> 720:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.h <707:14 707:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <707:8 707:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<707:58> [b3DynamicBvh.h <707:58 707:61>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <707:46 707:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<708:12> [b3DynamicBvh.h <708:12 708:26>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::enumLeaves<typename T>::T [b3DynamicBvh.h <708:12 708:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<709:1> [b3DynamicBvh.h <709:1 709:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<709:1> [b3DynamicBvh.h <720:1 720:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<710:2> [b3DynamicBvh.h <710:2 710:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::ICollide [b3DynamicBvh.h <710:2 710:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::enumLeaves<typename T>::T [b3DynamicBvh.h <710:2 710:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <710:2 710:18>]
REFERENCE_CALL static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <711:12 711:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<707:58> [b3DynamicBvh.h <711:6 711:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<712:3> [b3DynamicBvh.h <712:3 712:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<712:3> [b3DynamicBvh.h <715:3 715:3>]
REFERENCE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <713:21 713:26>]
REFERENCE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <713:21 713:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<707:58> [b3DynamicBvh.h <713:15 713:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<708:12> [b3DynamicBvh.h <713:31 713:36>]
REFERENCE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <714:21 714:26>]
REFERENCE_USAGE static void b3DynamicBvh::enumLeaves<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <714:21 714:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<707:58> [b3DynamicBvh.h <714:15 714:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<708:12> [b3DynamicBvh.h <714:31 714:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<717:3> [b3DynamicBvh.h <717:3 717:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<717:3> [b3DynamicBvh.h <719:3 719:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<708:12> [b3DynamicBvh.h <718:4 718:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<707:58> [b3DynamicBvh.h <718:19 718:22>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideTT<typename T>::T [b3DynamicBvh.h <723:1 723:14>]
SYMBOL_METHOD public void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) [b3DynamicBvh.h <723:1 <724:28 724:36> 784:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.h <724:14 724:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <724:8 724:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<724:57> [b3DynamicBvh.h <724:57 724:61>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <724:45 724:54>]
LOCAL_SYMBOL: b3DynamicBvh.h<725:29> [b3DynamicBvh.h <725:29 725:33>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <725:17 725:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<726:11> [b3DynamicBvh.h <726:11 726:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::collideTT<typename T>::T [b3DynamicBvh.h <726:11 726:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<727:1> [b3DynamicBvh.h <727:1 727:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<727:1> [b3DynamicBvh.h <784:1 784:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<728:2> [b3DynamicBvh.h <728:2 728:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::ICollide [b3DynamicBvh.h <728:2 728:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::collideTT<typename T>::T [b3DynamicBvh.h <728:2 728:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <728:2 728:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<724:57> [b3DynamicBvh.h <729:6 729:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<725:29> [b3DynamicBvh.h <729:13 729:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<730:3> [b3DynamicBvh.h <730:3 730:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<730:3> [b3DynamicBvh.h <783:3 783:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <731:15 731:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> int [b3DynamicBvh.h <731:4 731:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<732:15> [b3DynamicBvh.h <732:15 732:22>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> int [b3DynamicBvh.h <732:4 732:6>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_DOUBLE_STACKSIZE [b3DynamicBvh.h <732:24 732:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <733:33 733:40>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> [b3DynamicBvh.h <733:4 733:23>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<b3DynamicBvh::sStkNN> -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <733:25 733:30>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray() [b3DynamicBvh.h <733:33 733:40>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resize(int, const b3DynamicBvh::sStkNN &)
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resize(int, const b3DynamicBvh::sStkNN &) [b3DynamicBvh.h <734:13 734:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <734:4 734:11>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_DOUBLE_STACKSIZE [b3DynamicBvh.h <734:20 734:38>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN() [b3AlignedObjectArray.h <220:62 220:62>]
SYMBOL_FUNCTION b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&)
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <735:15 735:15>]
SYMBOL_FUNCTION b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int)
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <735:12 735:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <735:4 735:11>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <735:16 735:21>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <735:16 735:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<724:57> [b3DynamicBvh.h <735:23 735:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<725:29> [b3DynamicBvh.h <735:29 735:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<736:7> [b3DynamicBvh.h <736:7 736:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<736:7> [b3DynamicBvh.h <782:4 782:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <737:12 737:12>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <737:5 737:10>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkNN::sStkNN(const b3DynamicBvh::sStkNN &)
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DynamicBvh::sStkNN &) [b3DynamicBvh.h <737:30 737:30>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <737:22 737:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <737:14 737:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <737:25 737:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <738:8 738:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<732:15> [b3DynamicBvh.h <738:14 738:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<739:5> [b3DynamicBvh.h <739:5 739:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<739:5> [b3DynamicBvh.h <742:5 742:5>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resize(int, const b3DynamicBvh::sStkNN &) [b3DynamicBvh.h <740:15 740:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <740:6 740:13>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::size() const [b3DynamicBvh.h <740:31 740:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <740:22 740:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<732:15> [b3DynamicBvh.h <741:6 741:13>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::size() const [b3DynamicBvh.h <741:24 741:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <741:15 741:22>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <743:10 743:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <743:8 743:8>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <743:15 743:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <743:13 743:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<744:5> [b3DynamicBvh.h <744:5 744:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<744:5> [b3DynamicBvh.h <751:5 751:5>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <745:14 745:23>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <745:11 745:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <745:9 745:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<746:6> [b3DynamicBvh.h <746:6 746:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<746:6> [b3DynamicBvh.h <750:6 750:6>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <747:24 747:24>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <747:15 747:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <747:7 747:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <747:16 747:20>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <747:25 747:30>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <747:25 747:30>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <747:37 747:42>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <747:37 747:42>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <747:34 747:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <747:32 747:32>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <747:52 747:57>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <747:52 747:57>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <747:49 747:49>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <747:47 747:47>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <748:24 748:24>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <748:15 748:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <748:7 748:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <748:16 748:20>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <748:25 748:30>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <748:25 748:30>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <748:37 748:42>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <748:37 748:42>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <748:34 748:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <748:32 748:32>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <748:52 748:57>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <748:52 748:57>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <748:49 748:49>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <748:47 748:47>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <749:24 749:24>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <749:15 749:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <749:7 749:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <749:16 749:20>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <749:25 749:30>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <749:25 749:30>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <749:37 749:42>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <749:37 749:42>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <749:34 749:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <749:32 749:32>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <749:52 749:57>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <749:52 749:57>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <749:49 749:49>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <749:47 749:47>]
SYMBOL_FUNCTION bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &)
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.h <752:13 752:23>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <752:30 752:35>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <752:27 752:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <752:25 752:25>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <752:42 752:47>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <752:39 752:39>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <752:37 752:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<753:5> [b3DynamicBvh.h <753:5 753:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<753:5> [b3DynamicBvh.h <781:5 781:5>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <754:14 754:23>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <754:11 754:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <754:9 754:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<755:6> [b3DynamicBvh.h <755:6 755:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<755:6> [b3DynamicBvh.h <768:6 768:6>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <756:15 756:24>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <756:12 756:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <756:10 756:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<757:7> [b3DynamicBvh.h <757:7 757:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<757:7> [b3DynamicBvh.h <762:7 762:7>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <758:25 758:25>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <758:16 758:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <758:8 758:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <758:17 758:21>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <758:26 758:31>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <758:26 758:31>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <758:38 758:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <758:38 758:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <758:35 758:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <758:33 758:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <758:53 758:58>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <758:53 758:58>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <758:50 758:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <758:48 758:48>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <759:25 759:25>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <759:16 759:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <759:8 759:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <759:17 759:21>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <759:26 759:31>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <759:26 759:31>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <759:38 759:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <759:38 759:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <759:35 759:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <759:33 759:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <759:53 759:58>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <759:53 759:58>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <759:50 759:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <759:48 759:48>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <760:25 760:25>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <760:16 760:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <760:8 760:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <760:17 760:21>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <760:26 760:31>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <760:26 760:31>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <760:38 760:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <760:38 760:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <760:35 760:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <760:33 760:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <760:53 760:58>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <760:53 760:58>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <760:50 760:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <760:48 760:48>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <761:25 761:25>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <761:16 761:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <761:8 761:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <761:17 761:21>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <761:26 761:31>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <761:26 761:31>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <761:38 761:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <761:38 761:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <761:35 761:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <761:33 761:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <761:53 761:58>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <761:53 761:58>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <761:50 761:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <761:48 761:48>]
LOCAL_SYMBOL: b3DynamicBvh.h<764:7> [b3DynamicBvh.h <764:7 764:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<764:7> [b3DynamicBvh.h <767:7 767:7>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <765:25 765:25>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <765:16 765:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <765:8 765:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <765:17 765:21>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <765:26 765:31>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <765:26 765:31>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <765:38 765:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <765:38 765:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <765:35 765:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <765:33 765:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <765:50 765:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <765:48 765:48>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <766:25 766:25>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <766:16 766:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <766:8 766:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <766:17 766:21>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <766:26 766:31>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <766:26 766:31>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <766:38 766:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <766:38 766:43>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <766:35 766:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <766:33 766:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <766:50 766:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <766:48 766:48>]
LOCAL_SYMBOL: b3DynamicBvh.h<770:6> [b3DynamicBvh.h <770:6 770:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<770:6> [b3DynamicBvh.h <780:6 780:6>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <771:15 771:24>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <771:12 771:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <771:10 771:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<772:7> [b3DynamicBvh.h <772:7 772:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<772:7> [b3DynamicBvh.h <775:7 775:7>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <773:25 773:25>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <773:16 773:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <773:8 773:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <773:17 773:21>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <773:26 773:31>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <773:26 773:31>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <773:35 773:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <773:33 773:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <773:42 773:47>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <773:42 773:47>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <773:39 773:39>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <773:37 773:37>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <774:25 774:25>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <774:16 774:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<733:33> [b3DynamicBvh.h <774:8 774:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <774:17 774:21>]
REFERENCE_CALL void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <774:26 774:31>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <774:26 774:31>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <774:35 774:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <774:33 774:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <774:42 774:47>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <774:42 774:47>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <774:39 774:39>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <774:37 774:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<777:7> [b3DynamicBvh.h <777:7 777:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<777:7> [b3DynamicBvh.h <779:7 779:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<726:11> [b3DynamicBvh.h <778:8 778:13>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <778:25 778:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <778:23 778:23>]
REFERENCE_USAGE void b3DynamicBvh::collideTT<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <778:29 778:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<737:12> [b3DynamicBvh.h <778:27 778:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<731:15> [b3DynamicBvh.h <782:12 782:16>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideTTpersistentStack<typename T>::T [b3DynamicBvh.h <788:1 788:14>]
SYMBOL_METHOD public void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) [b3DynamicBvh.h <788:1 <789:28 789:51> 849:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.h <789:14 789:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <789:8 789:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<789:72> [b3DynamicBvh.h <789:72 789:76>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <789:60 789:69>]
LOCAL_SYMBOL: b3DynamicBvh.h<790:29> [b3DynamicBvh.h <790:29 790:33>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <790:17 790:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<791:11> [b3DynamicBvh.h <791:11 791:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::collideTTpersistentStack<typename T>::T [b3DynamicBvh.h <791:11 791:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<792:1> [b3DynamicBvh.h <792:1 792:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<792:1> [b3DynamicBvh.h <849:1 849:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<793:2> [b3DynamicBvh.h <793:2 793:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::ICollide [b3DynamicBvh.h <793:2 793:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::collideTTpersistentStack<typename T>::T [b3DynamicBvh.h <793:2 793:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <793:2 793:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<789:72> [b3DynamicBvh.h <794:6 794:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<790:29> [b3DynamicBvh.h <794:13 794:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<795:3> [b3DynamicBvh.h <795:3 795:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<795:3> [b3DynamicBvh.h <848:3 848:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <796:15 796:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> int [b3DynamicBvh.h <796:4 796:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<797:15> [b3DynamicBvh.h <797:15 797:22>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> int [b3DynamicBvh.h <797:4 797:6>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_DOUBLE_STACKSIZE [b3DynamicBvh.h <797:24 797:42>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resize(int, const b3DynamicBvh::sStkNN &) [b3DynamicBvh.h <799:15 799:20>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <799:4 799:13>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_DOUBLE_STACKSIZE [b3DynamicBvh.h <799:22 799:40>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN() [b3AlignedObjectArray.h <220:62 220:62>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <800:17 800:17>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <800:14 800:14>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <800:4 800:13>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <800:18 800:23>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <800:18 800:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<789:72> [b3DynamicBvh.h <800:25 800:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<790:29> [b3DynamicBvh.h <800:31 800:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<801:7> [b3DynamicBvh.h <801:7 801:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<801:7> [b3DynamicBvh.h <847:4 847:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <802:12 802:12>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <802:5 802:10>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DynamicBvh::sStkNN &) [b3DynamicBvh.h <802:32 802:32>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <802:24 802:24>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <802:14 802:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <802:27 802:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <803:8 803:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<797:15> [b3DynamicBvh.h <803:14 803:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<804:5> [b3DynamicBvh.h <804:5 804:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<804:5> [b3DynamicBvh.h <807:5 807:5>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::resize(int, const b3DynamicBvh::sStkNN &) [b3DynamicBvh.h <805:17 805:22>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <805:6 805:15>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::size() const [b3DynamicBvh.h <805:35 805:38>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <805:24 805:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<797:15> [b3DynamicBvh.h <806:6 806:13>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNN>::size() const [b3DynamicBvh.h <806:26 806:29>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <806:15 806:24>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <808:10 808:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <808:8 808:8>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <808:15 808:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <808:13 808:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<809:5> [b3DynamicBvh.h <809:5 809:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<809:5> [b3DynamicBvh.h <816:5 816:5>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <810:14 810:23>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <810:11 810:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <810:9 810:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<811:6> [b3DynamicBvh.h <811:6 811:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<811:6> [b3DynamicBvh.h <815:6 815:6>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <812:26 812:26>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <812:17 812:17>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <812:7 812:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <812:18 812:22>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <812:27 812:32>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <812:27 812:32>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <812:39 812:44>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <812:39 812:44>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <812:36 812:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <812:34 812:34>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <812:54 812:59>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <812:54 812:59>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <812:51 812:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <812:49 812:49>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <813:26 813:26>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <813:17 813:17>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <813:7 813:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <813:18 813:22>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <813:27 813:32>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <813:27 813:32>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <813:39 813:44>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <813:39 813:44>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <813:36 813:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <813:34 813:34>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <813:54 813:59>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <813:54 813:59>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <813:51 813:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <813:49 813:49>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <814:26 814:26>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <814:17 814:17>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <814:7 814:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <814:18 814:22>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <814:27 814:32>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <814:27 814:32>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <814:39 814:44>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <814:39 814:44>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <814:36 814:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <814:34 814:34>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <814:54 814:59>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <814:54 814:59>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <814:51 814:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <814:49 814:49>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.h <817:13 817:23>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <817:30 817:35>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <817:27 817:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <817:25 817:25>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <817:42 817:47>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <817:39 817:39>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <817:37 817:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<818:5> [b3DynamicBvh.h <818:5 818:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<818:5> [b3DynamicBvh.h <846:5 846:5>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <819:14 819:23>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <819:11 819:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <819:9 819:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<820:6> [b3DynamicBvh.h <820:6 820:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<820:6> [b3DynamicBvh.h <833:6 833:6>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <821:15 821:24>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <821:12 821:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <821:10 821:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<822:7> [b3DynamicBvh.h <822:7 822:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<822:7> [b3DynamicBvh.h <827:7 827:7>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <823:27 823:27>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <823:18 823:18>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <823:8 823:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <823:19 823:23>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <823:28 823:33>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <823:28 823:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <823:40 823:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <823:40 823:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <823:37 823:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <823:35 823:35>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <823:55 823:60>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <823:55 823:60>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <823:52 823:52>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <823:50 823:50>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <824:27 824:27>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <824:18 824:18>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <824:8 824:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <824:19 824:23>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <824:28 824:33>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <824:28 824:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <824:40 824:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <824:40 824:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <824:37 824:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <824:35 824:35>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <824:55 824:60>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <824:55 824:60>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <824:52 824:52>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <824:50 824:50>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <825:27 825:27>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <825:18 825:18>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <825:8 825:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <825:19 825:23>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <825:28 825:33>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <825:28 825:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <825:40 825:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <825:40 825:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <825:37 825:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <825:35 825:35>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <825:55 825:60>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <825:55 825:60>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <825:52 825:52>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <825:50 825:50>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <826:27 826:27>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <826:18 826:18>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <826:8 826:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <826:19 826:23>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <826:28 826:33>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <826:28 826:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <826:40 826:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <826:40 826:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <826:37 826:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <826:35 826:35>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <826:55 826:60>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <826:55 826:60>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <826:52 826:52>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <826:50 826:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<829:7> [b3DynamicBvh.h <829:7 829:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<829:7> [b3DynamicBvh.h <832:7 832:7>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <830:27 830:27>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <830:18 830:18>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <830:8 830:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <830:19 830:23>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <830:28 830:33>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <830:28 830:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <830:40 830:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <830:40 830:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <830:37 830:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <830:35 830:35>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <830:52 830:52>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <830:50 830:50>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <831:27 831:27>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <831:18 831:18>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <831:8 831:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <831:19 831:23>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <831:28 831:33>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <831:28 831:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <831:40 831:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <831:40 831:45>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <831:37 831:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <831:35 831:35>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <831:52 831:52>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <831:50 831:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<835:6> [b3DynamicBvh.h <835:6 835:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<835:6> [b3DynamicBvh.h <845:6 845:6>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <836:15 836:24>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <836:12 836:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <836:10 836:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<837:7> [b3DynamicBvh.h <837:7 837:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<837:7> [b3DynamicBvh.h <840:7 840:7>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <838:27 838:27>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <838:18 838:18>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <838:8 838:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <838:19 838:23>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <838:28 838:33>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <838:28 838:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <838:37 838:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <838:35 838:35>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <838:44 838:49>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <838:44 838:49>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <838:41 838:41>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <838:39 838:39>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3DynamicBvh::sStkNN::operator=(b3DynamicBvh::sStkNN &&) [b3DynamicBvh.h <839:27 839:27>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN & b3AlignedObjectArray<b3DynamicBvh::sStkNN>::operator[](int) [b3DynamicBvh.h <839:18 839:18>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.h <839:8 839:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <839:19 839:23>]
REFERENCE_CALL void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> void b3DynamicBvh::sStkNN::sStkNN(const b3DbvtNode *, const b3DbvtNode *) [b3DynamicBvh.h <839:28 839:33>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DynamicBvh::sStkNN [b3DynamicBvh.h <839:28 839:33>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <839:37 839:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <839:35 839:35>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <839:44 839:49>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <839:44 839:49>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <839:41 839:41>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <839:39 839:39>]
LOCAL_SYMBOL: b3DynamicBvh.h<842:7> [b3DynamicBvh.h <842:7 842:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<842:7> [b3DynamicBvh.h <844:7 844:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<791:11> [b3DynamicBvh.h <843:8 843:13>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::a [b3DynamicBvh.h <843:25 843:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <843:23 843:23>]
REFERENCE_USAGE void b3DynamicBvh::collideTTpersistentStack<typename T>(const b3DbvtNode *, const b3DbvtNode *, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNN::b [b3DynamicBvh.h <843:29 843:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<802:12> [b3DynamicBvh.h <843:27 843:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<796:15> [b3DynamicBvh.h <847:12 847:16>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideTV<typename T>::T [b3DynamicBvh.h <921:1 921:14>]
SYMBOL_METHOD public void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const [b3DynamicBvh.h <921:1 <922:28 922:36> 951:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.h <922:14 922:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> void [b3DynamicBvh.h <922:8 922:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<922:57> [b3DynamicBvh.h <922:57 922:60>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DbvtNode [b3DynamicBvh.h <922:45 922:54>]
LOCAL_SYMBOL: b3DynamicBvh.h<923:31> [b3DynamicBvh.h <923:31 923:33>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DbvtVolume [b3DynamicBvh.h <923:17 923:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<924:11> [b3DynamicBvh.h <924:11 924:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DynamicBvh::collideTV<typename T>::T [b3DynamicBvh.h <924:11 924:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<925:1> [b3DynamicBvh.h <925:1 925:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<925:1> [b3DynamicBvh.h <951:1 951:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<926:2> [b3DynamicBvh.h <926:2 926:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DynamicBvh::ICollide [b3DynamicBvh.h <926:2 926:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DynamicBvh::collideTV<typename T>::T [b3DynamicBvh.h <926:2 926:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> void [b3DynamicBvh.h <926:2 926:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<922:57> [b3DynamicBvh.h <927:6 927:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<928:3> [b3DynamicBvh.h <928:3 928:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<928:3> [b3DynamicBvh.h <950:3 950:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<929:42> [b3DynamicBvh.h <929:42 929:47>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DbvtVolume [b3DynamicBvh.h <929:27 929:38>]
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) [b3DynamicBvh.h <929:42 929:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<923:31> [b3DynamicBvh.h <929:49 929:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<930:44> [b3DynamicBvh.h <930:44 930:48>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3AlignedObjectArray<const b3DbvtNode *> [b3DynamicBvh.h <930:4 930:23>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<const b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.h <930:31 930:40>]
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.h <930:44 930:48>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::resize(int, const b3DbvtNode * const &)
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> void b3AlignedObjectArray<const b3DbvtNode *>::resize(int, const b3DbvtNode * const &) [b3DynamicBvh.h <931:10 931:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<930:44> [b3DynamicBvh.h <931:4 931:8>]
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) [b3DynamicBvh.h <932:10 932:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<930:44> [b3DynamicBvh.h <932:4 932:8>]
REFERENCE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_SIMPLE_STACKSIZE [b3DynamicBvh.h <932:18 932:36>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &)
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) [b3DynamicBvh.h <933:10 933:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<930:44> [b3DynamicBvh.h <933:4 933:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<922:57> [b3DynamicBvh.h <933:20 933:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<934:7> [b3DynamicBvh.h <934:7 934:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<934:7> [b3DynamicBvh.h <949:4 949:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<935:23> [b3DynamicBvh.h <935:23 935:23>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DbvtNode [b3DynamicBvh.h <935:11 935:20>]
SYMBOL_FUNCTION const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int)
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.h <935:30 935:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<930:44> [b3DynamicBvh.h <935:25 935:29>]
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.h <935:37 935:40>]
LOCAL_SYMBOL: b3DynamicBvh.h<930:44> [b3DynamicBvh.h <935:31 935:35>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::pop_back()
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> void b3AlignedObjectArray<const b3DbvtNode *>::pop_back() [b3DynamicBvh.h <936:11 936:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<930:44> [b3DynamicBvh.h <936:5 936:9>]
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> bool b3Intersect(const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.h <937:8 937:18>]
REFERENCE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <937:23 937:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<935:23> [b3DynamicBvh.h <937:20 937:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<929:42> [b3DynamicBvh.h <937:30 937:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<938:5> [b3DynamicBvh.h <938:5 938:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<938:5> [b3DynamicBvh.h <948:5 948:5>]
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <939:12 939:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<935:23> [b3DynamicBvh.h <939:9 939:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<940:6> [b3DynamicBvh.h <940:6 940:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<940:6> [b3DynamicBvh.h <943:6 943:6>]
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) [b3DynamicBvh.h <941:13 941:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<930:44> [b3DynamicBvh.h <941:7 941:11>]
REFERENCE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <941:26 941:31>]
REFERENCE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <941:26 941:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<935:23> [b3DynamicBvh.h <941:23 941:23>]
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) [b3DynamicBvh.h <942:13 942:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<930:44> [b3DynamicBvh.h <942:7 942:11>]
REFERENCE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <942:26 942:31>]
REFERENCE_USAGE void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <942:26 942:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<935:23> [b3DynamicBvh.h <942:23 942:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<945:6> [b3DynamicBvh.h <945:6 945:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<945:6> [b3DynamicBvh.h <947:6 947:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<924:11> [b3DynamicBvh.h <946:7 946:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<935:23> [b3DynamicBvh.h <946:22 946:22>]
REFERENCE_CALL void b3DynamicBvh::collideTV<typename T>(const b3DbvtNode *, const b3DbvtVolume &, T &) const -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.h <949:18 949:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<930:44> [b3DynamicBvh.h <949:12 949:16>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::rayTestInternal<typename T>::T [b3DynamicBvh.h <953:1 953:14>]
SYMBOL_METHOD public void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const [b3DynamicBvh.h <953:1 <954:28 954:42> 1001:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.h <954:14 954:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> void [b3DynamicBvh.h <954:8 954:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<954:63> [b3DynamicBvh.h <954:63 954:66>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DbvtNode [b3DynamicBvh.h <954:51 954:60>]
LOCAL_SYMBOL: b3DynamicBvh.h<955:26> [b3DynamicBvh.h <955:26 955:32>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 [b3DynamicBvh.h <955:15 955:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<956:26> [b3DynamicBvh.h <956:26 956:30>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 [b3DynamicBvh.h <956:15 956:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<957:26> [b3DynamicBvh.h <957:26 957:44>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 [b3DynamicBvh.h <957:15 957:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<958:22> [b3DynamicBvh.h <958:22 958:26>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> unsigned int [b3DynamicBvh.h <958:9 958:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<959:18> [b3DynamicBvh.h <959:18 959:27>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Scalar [b3DynamicBvh.h <959:9 959:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<960:26> [b3DynamicBvh.h <960:26 960:32>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 [b3DynamicBvh.h <960:15 960:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<961:26> [b3DynamicBvh.h <961:26 961:32>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 [b3DynamicBvh.h <961:15 961:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<962:9> [b3DynamicBvh.h <962:9 962:23>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DynamicBvh::rayTestInternal<typename T>::T [b3DynamicBvh.h <962:9 962:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<963:1> [b3DynamicBvh.h <963:1 963:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<963:1> [b3DynamicBvh.h <1001:1 1001:1>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> void [b3DynamicBvh.h <964:10 964:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<956:26> [b3DynamicBvh.h <964:16 964:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<965:2> [b3DynamicBvh.h <965:2 965:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DynamicBvh::ICollide [b3DynamicBvh.h <965:2 965:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DynamicBvh::rayTestInternal<typename T>::T [b3DynamicBvh.h <965:2 965:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> void [b3DynamicBvh.h <965:2 965:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<954:63> [b3DynamicBvh.h <966:5 966:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<967:2> [b3DynamicBvh.h <967:2 967:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<967:2> [b3DynamicBvh.h <1000:2 1000:2>]
LOCAL_SYMBOL: b3DynamicBvh.h<968:14> [b3DynamicBvh.h <968:14 968:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> int [b3DynamicBvh.h <968:3 968:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<969:14> [b3DynamicBvh.h <969:14 969:21>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> int [b3DynamicBvh.h <969:3 969:5>]
REFERENCE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_DOUBLE_STACKSIZE [b3DynamicBvh.h <969:23 969:41>]
LOCAL_SYMBOL: b3DynamicBvh.h<970:44> [b3DynamicBvh.h <970:44 970:48>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3AlignedObjectArray<const b3DbvtNode *> [b3DynamicBvh.h <970:3 970:22>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<const b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.h <970:30 970:39>]
REFERENCE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3AlignedObjectArray<const b3DbvtNode *> b3DynamicBvh::m_rayTestStack [b3DynamicBvh.h <970:52 970:65>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> void b3AlignedObjectArray<const b3DbvtNode *>::resize(int, const b3DbvtNode * const &) [b3DynamicBvh.h <971:9 971:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<970:44> [b3DynamicBvh.h <971:3 971:7>]
REFERENCE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_DOUBLE_STACKSIZE [b3DynamicBvh.h <971:16 971:34>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.h <972:8 972:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<970:44> [b3DynamicBvh.h <972:3 972:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<954:63> [b3DynamicBvh.h <972:12 972:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<973:13> [b3DynamicBvh.h <973:13 973:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 [b3DynamicBvh.h <973:3 973:11>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> void b3Vector3::b3Vector3() [b3DynamicBvh.h <973:13 973:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<975:3> [b3DynamicBvh.h <975:3 975:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<975:3> [b3DynamicBvh.h <999:3 999:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<976:22> [b3DynamicBvh.h <976:22 976:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DbvtNode [b3DynamicBvh.h <976:10 976:19>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.h <976:32 976:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<970:44> [b3DynamicBvh.h <976:27 976:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<968:14> [b3DynamicBvh.h <976:35 976:39>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <977:14 977:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<973:13> [b3DynamicBvh.h <977:4 977:9>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <977:35 977:35>]
SYMBOL_FUNCTION const b3Vector3 & b3DbvtAabbMm::Mins() const
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> const b3Vector3 & b3DbvtAabbMm::Mins() const [b3DynamicBvh.h <977:29 977:32>]
REFERENCE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <977:22 977:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<976:22> [b3DynamicBvh.h <977:16 977:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<961:26> [b3DynamicBvh.h <977:36 977:42>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 & b3Vector3::operator=(b3Vector3 &&) [b3DynamicBvh.h <978:14 978:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<973:13> [b3DynamicBvh.h <978:4 978:9>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <978:35 978:35>]
SYMBOL_FUNCTION const b3Vector3 & b3DbvtAabbMm::Maxs() const
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> const b3Vector3 & b3DbvtAabbMm::Maxs() const [b3DynamicBvh.h <978:29 978:32>]
REFERENCE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <978:22 978:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<976:22> [b3DynamicBvh.h <978:16 978:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<960:26> [b3DynamicBvh.h <978:36 978:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<979:13> [b3DynamicBvh.h <979:13 979:16>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3Scalar [b3DynamicBvh.h <979:4 979:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<979:22> [b3DynamicBvh.h <979:22 979:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<980:17> [b3DynamicBvh.h <980:17 980:23>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> unsigned int [b3DynamicBvh.h <980:4 980:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<980:17> [b3DynamicBvh.h <981:4 981:10>]
SYMBOL_FUNCTION bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar)
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) [b3DynamicBvh.h <981:14 981:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<955:26> [b3DynamicBvh.h <981:25 981:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<957:26> [b3DynamicBvh.h <981:33 981:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<958:22> [b3DynamicBvh.h <981:53 981:57>]
LOCAL_SYMBOL: b3DynamicBvh.h<973:13> [b3DynamicBvh.h <981:59 981:64>]
LOCAL_SYMBOL: b3DynamicBvh.h<979:13> [b3DynamicBvh.h <981:66 981:69>]
LOCAL_SYMBOL: b3DynamicBvh.h<979:22> [b3DynamicBvh.h <981:71 981:80>]
LOCAL_SYMBOL: b3DynamicBvh.h<959:18> [b3DynamicBvh.h <981:82 981:91>]
LOCAL_SYMBOL: b3DynamicBvh.h<980:17> [b3DynamicBvh.h <982:7 982:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<983:4> [b3DynamicBvh.h <983:4 983:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<983:4> [b3DynamicBvh.h <998:4 998:4>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <984:14 984:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<976:22> [b3DynamicBvh.h <984:8 984:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<985:5> [b3DynamicBvh.h <985:5 985:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<985:5> [b3DynamicBvh.h <993:5 993:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<968:14> [b3DynamicBvh.h <986:9 986:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<969:14> [b3DynamicBvh.h <986:15 986:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<987:6> [b3DynamicBvh.h <987:6 987:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<987:6> [b3DynamicBvh.h <990:6 990:6>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> void b3AlignedObjectArray<const b3DbvtNode *>::resize(int, const b3DbvtNode * const &) [b3DynamicBvh.h <988:13 988:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<970:44> [b3DynamicBvh.h <988:7 988:11>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.h <988:26 988:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<970:44> [b3DynamicBvh.h <988:20 988:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<969:14> [b3DynamicBvh.h <989:7 989:14>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.h <989:22 989:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<970:44> [b3DynamicBvh.h <989:16 989:20>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.h <991:11 991:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<970:44> [b3DynamicBvh.h <991:6 991:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<968:14> [b3DynamicBvh.h <991:12 991:16>]
REFERENCE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <991:27 991:32>]
REFERENCE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <991:27 991:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<976:22> [b3DynamicBvh.h <991:21 991:24>]
REFERENCE_CALL void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.h <992:11 992:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<970:44> [b3DynamicBvh.h <992:6 992:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<968:14> [b3DynamicBvh.h <992:12 992:16>]
REFERENCE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <992:27 992:32>]
REFERENCE_USAGE void b3DynamicBvh::rayTestInternal<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, const b3Vector3 &, unsigned int [], b3Scalar, const b3Vector3 &, const b3Vector3 &, T &) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <992:27 992:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<976:22> [b3DynamicBvh.h <992:21 992:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<995:5> [b3DynamicBvh.h <995:5 995:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<995:5> [b3DynamicBvh.h <997:5 997:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<962:9> [b3DynamicBvh.h <996:6 996:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<976:22> [b3DynamicBvh.h <996:21 996:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<968:14> [b3DynamicBvh.h <999:11 999:15>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::rayTest<typename T>::T [b3DynamicBvh.h <1004:1 1004:14>]
SYMBOL_METHOD public static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) [b3DynamicBvh.h <1004:1 <1005:28 1005:34> 1071:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.h <1005:14 1005:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> void [b3DynamicBvh.h <1005:8 1005:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<1005:55> [b3DynamicBvh.h <1005:55 1005:58>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DbvtNode [b3DynamicBvh.h <1005:43 1005:52>]
LOCAL_SYMBOL: b3DynamicBvh.h<1006:26> [b3DynamicBvh.h <1006:26 1006:32>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 [b3DynamicBvh.h <1006:15 1006:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1007:26> [b3DynamicBvh.h <1007:26 1007:30>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 [b3DynamicBvh.h <1007:15 1007:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1008:9> [b3DynamicBvh.h <1008:9 1008:23>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DynamicBvh::rayTest<typename T>::T [b3DynamicBvh.h <1008:9 1008:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1009:1> [b3DynamicBvh.h <1009:1 1009:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<1009:1> [b3DynamicBvh.h <1071:1 1071:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<1010:2> [b3DynamicBvh.h <1010:2 1010:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DynamicBvh::ICollide [b3DynamicBvh.h <1010:2 1010:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DynamicBvh::rayTest<typename T>::T [b3DynamicBvh.h <1010:2 1010:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> void [b3DynamicBvh.h <1010:2 1010:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1005:55> [b3DynamicBvh.h <1011:6 1011:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1012:3> [b3DynamicBvh.h <1012:3 1012:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<1012:3> [b3DynamicBvh.h <1070:3 1070:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<1013:14> [b3DynamicBvh.h <1013:14 1013:19>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 [b3DynamicBvh.h <1013:4 1013:12>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <1013:29 1013:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<1007:26> [b3DynamicBvh.h <1013:24 1013:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<1006:26> [b3DynamicBvh.h <1013:30 1013:36>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 & b3Vector3::normalize() [b3DynamicBvh.h <1014:11 1014:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<1013:14> [b3DynamicBvh.h <1014:4 1014:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1017:14> [b3DynamicBvh.h <1017:14 1017:32>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 [b3DynamicBvh.h <1017:4 1017:12>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> void b3Vector3::b3Vector3() [b3DynamicBvh.h <1017:14 1017:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<1017:14> [b3DynamicBvh.h <1018:4 1018:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1013:14> [b3DynamicBvh.h <1018:29 1018:34>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar [b3DynamicBvh.h <1018:42 1018:49>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar [b3DynamicBvh.h <1018:58 1018:65>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar [b3DynamicBvh.h <1018:85 1018:92>]
LOCAL_SYMBOL: b3DynamicBvh.h<1013:14> [b3DynamicBvh.h <1018:101 1018:106>]
LOCAL_SYMBOL: b3DynamicBvh.h<1017:14> [b3DynamicBvh.h <1019:4 1019:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1013:14> [b3DynamicBvh.h <1019:29 1019:34>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar [b3DynamicBvh.h <1019:42 1019:49>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar [b3DynamicBvh.h <1019:58 1019:65>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar [b3DynamicBvh.h <1019:85 1019:92>]
LOCAL_SYMBOL: b3DynamicBvh.h<1013:14> [b3DynamicBvh.h <1019:101 1019:106>]
LOCAL_SYMBOL: b3DynamicBvh.h<1017:14> [b3DynamicBvh.h <1020:4 1020:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1013:14> [b3DynamicBvh.h <1020:29 1020:34>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar [b3DynamicBvh.h <1020:42 1020:49>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar [b3DynamicBvh.h <1020:58 1020:65>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar [b3DynamicBvh.h <1020:85 1020:92>]
LOCAL_SYMBOL: b3DynamicBvh.h<1013:14> [b3DynamicBvh.h <1020:101 1020:106>]
LOCAL_SYMBOL: b3DynamicBvh.h<1021:17> [b3DynamicBvh.h <1021:17 1021:21>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> unsigned int [b3DynamicBvh.h <1021:4 1021:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<1021:28> [b3DynamicBvh.h <1021:28 1021:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<1021:28> [b3DynamicBvh.h <1021:118 1021:118>]
LOCAL_SYMBOL: b3DynamicBvh.h<1017:14> [b3DynamicBvh.h <1021:30 1021:48>]
LOCAL_SYMBOL: b3DynamicBvh.h<1017:14> [b3DynamicBvh.h <1021:60 1021:78>]
LOCAL_SYMBOL: b3DynamicBvh.h<1017:14> [b3DynamicBvh.h <1021:90 1021:108>]
LOCAL_SYMBOL: b3DynamicBvh.h<1023:13> [b3DynamicBvh.h <1023:13 1023:22>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar [b3DynamicBvh.h <1023:4 1023:11>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar b3Vector3::dot(const b3Vector3 &) const [b3DynamicBvh.h <1023:33 1023:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<1013:14> [b3DynamicBvh.h <1023:26 1023:31>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.h <1023:42 1023:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<1007:26> [b3DynamicBvh.h <1023:37 1023:41>]
LOCAL_SYMBOL: b3DynamicBvh.h<1006:26> [b3DynamicBvh.h <1023:43 1023:49>]
LOCAL_SYMBOL: b3DynamicBvh.h<1028:44> [b3DynamicBvh.h <1028:44 1028:48>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3AlignedObjectArray<const b3DbvtNode *> [b3DynamicBvh.h <1028:4 1028:23>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<const b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.h <1028:31 1028:40>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.h <1028:44 1028:48>]
LOCAL_SYMBOL: b3DynamicBvh.h<1030:15> [b3DynamicBvh.h <1030:15 1030:19>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> int [b3DynamicBvh.h <1030:4 1030:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1031:15> [b3DynamicBvh.h <1031:15 1031:22>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> int [b3DynamicBvh.h <1031:4 1031:6>]
REFERENCE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_DOUBLE_STACKSIZE [b3DynamicBvh.h <1031:24 1031:42>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> void b3AlignedObjectArray<const b3DbvtNode *>::resize(int, const b3DbvtNode * const &) [b3DynamicBvh.h <1033:10 1033:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<1028:44> [b3DynamicBvh.h <1033:4 1033:8>]
REFERENCE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_DOUBLE_STACKSIZE [b3DynamicBvh.h <1033:17 1033:35>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.h <1034:9 1034:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1028:44> [b3DynamicBvh.h <1034:4 1034:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<1005:55> [b3DynamicBvh.h <1034:13 1034:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<1035:14> [b3DynamicBvh.h <1035:14 1035:19>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 [b3DynamicBvh.h <1035:4 1035:12>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> void b3Vector3::b3Vector3() [b3DynamicBvh.h <1035:14 1035:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<1036:7> [b3DynamicBvh.h <1036:7 1036:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1036:7> [b3DynamicBvh.h <1068:4 1068:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<1037:23> [b3DynamicBvh.h <1037:23 1037:26>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DbvtNode [b3DynamicBvh.h <1037:11 1037:20>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.h <1037:33 1037:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<1028:44> [b3DynamicBvh.h <1037:28 1037:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<1030:15> [b3DynamicBvh.h <1037:36 1037:40>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3DynamicBvh.h <1039:15 1039:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<1035:14> [b3DynamicBvh.h <1039:5 1039:10>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> const b3Vector3 & b3DbvtAabbMm::Mins() const [b3DynamicBvh.h <1039:30 1039:33>]
REFERENCE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <1039:23 1039:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<1037:23> [b3DynamicBvh.h <1039:17 1039:20>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Vector3 & b3Vector3::operator=(const b3Vector3 &) [b3DynamicBvh.h <1040:15 1040:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<1035:14> [b3DynamicBvh.h <1040:5 1040:10>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> const b3Vector3 & b3DbvtAabbMm::Maxs() const [b3DynamicBvh.h <1040:30 1040:33>]
REFERENCE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <1040:23 1040:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<1037:23> [b3DynamicBvh.h <1040:17 1040:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<1042:14> [b3DynamicBvh.h <1042:14 1042:17>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3Scalar [b3DynamicBvh.h <1042:5 1042:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<1042:23> [b3DynamicBvh.h <1042:23 1042:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<1043:18> [b3DynamicBvh.h <1043:18 1043:24>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> unsigned int [b3DynamicBvh.h <1043:5 1043:12>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> bool b3RayAabb2(const b3Vector3 &, const b3Vector3 &, const unsigned int [] const, const b3Vector3 [] const, b3Scalar &, b3Scalar, b3Scalar) [b3DynamicBvh.h <1043:28 1043:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<1006:26> [b3DynamicBvh.h <1043:39 1043:45>]
LOCAL_SYMBOL: b3DynamicBvh.h<1017:14> [b3DynamicBvh.h <1043:47 1043:65>]
LOCAL_SYMBOL: b3DynamicBvh.h<1021:17> [b3DynamicBvh.h <1043:67 1043:71>]
LOCAL_SYMBOL: b3DynamicBvh.h<1035:14> [b3DynamicBvh.h <1043:73 1043:78>]
LOCAL_SYMBOL: b3DynamicBvh.h<1042:14> [b3DynamicBvh.h <1043:80 1043:83>]
LOCAL_SYMBOL: b3DynamicBvh.h<1042:23> [b3DynamicBvh.h <1043:85 1043:94>]
LOCAL_SYMBOL: b3DynamicBvh.h<1023:13> [b3DynamicBvh.h <1043:96 1043:105>]
LOCAL_SYMBOL: b3DynamicBvh.h<1043:18> [b3DynamicBvh.h <1051:8 1051:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<1052:5> [b3DynamicBvh.h <1052:5 1052:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<1052:5> [b3DynamicBvh.h <1067:5 1067:5>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <1053:15 1053:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<1037:23> [b3DynamicBvh.h <1053:9 1053:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<1054:6> [b3DynamicBvh.h <1054:6 1054:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1054:6> [b3DynamicBvh.h <1062:6 1062:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1030:15> [b3DynamicBvh.h <1055:10 1055:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<1031:15> [b3DynamicBvh.h <1055:16 1055:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1056:7> [b3DynamicBvh.h <1056:7 1056:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1056:7> [b3DynamicBvh.h <1059:7 1059:7>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> void b3AlignedObjectArray<const b3DbvtNode *>::resize(int, const b3DbvtNode * const &) [b3DynamicBvh.h <1057:14 1057:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<1028:44> [b3DynamicBvh.h <1057:8 1057:12>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.h <1057:27 1057:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<1028:44> [b3DynamicBvh.h <1057:21 1057:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<1031:15> [b3DynamicBvh.h <1058:8 1058:15>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.h <1058:23 1058:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<1028:44> [b3DynamicBvh.h <1058:17 1058:21>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.h <1060:12 1060:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<1028:44> [b3DynamicBvh.h <1060:7 1060:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<1030:15> [b3DynamicBvh.h <1060:13 1060:17>]
REFERENCE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <1060:28 1060:33>]
REFERENCE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <1060:28 1060:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<1037:23> [b3DynamicBvh.h <1060:22 1060:25>]
REFERENCE_CALL static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.h <1061:12 1061:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<1028:44> [b3DynamicBvh.h <1061:7 1061:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<1030:15> [b3DynamicBvh.h <1061:13 1061:17>]
REFERENCE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <1061:28 1061:33>]
REFERENCE_USAGE static void b3DynamicBvh::rayTest<typename T>(const b3DbvtNode *, const b3Vector3 &, const b3Vector3 &, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <1061:28 1061:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<1037:23> [b3DynamicBvh.h <1061:22 1061:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<1064:6> [b3DynamicBvh.h <1064:6 1064:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1064:6> [b3DynamicBvh.h <1066:6 1066:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1008:9> [b3DynamicBvh.h <1065:7 1065:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<1037:23> [b3DynamicBvh.h <1065:22 1065:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<1030:15> [b3DynamicBvh.h <1068:12 1068:16>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideKDOP<typename T>::T [b3DynamicBvh.h <1074:1 1074:14>]
SYMBOL_METHOD public static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) [b3DynamicBvh.h <1074:1 <1075:28 1075:38> 1126:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.h <1075:14 1075:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void [b3DynamicBvh.h <1075:8 1075:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<1075:58> [b3DynamicBvh.h <1075:58 1075:61>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DbvtNode [b3DynamicBvh.h <1075:46 1075:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<1076:27> [b3DynamicBvh.h <1076:27 1076:33>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3Vector3 [b3DynamicBvh.h <1076:16 1076:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<1077:26> [b3DynamicBvh.h <1077:26 1077:32>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3Scalar [b3DynamicBvh.h <1077:16 1077:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1078:14> [b3DynamicBvh.h <1078:14 1078:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int [b3DynamicBvh.h <1078:10 1078:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<1079:10> [b3DynamicBvh.h <1079:10 1079:24>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DynamicBvh::collideKDOP<typename T>::T [b3DynamicBvh.h <1079:10 1079:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<1080:1> [b3DynamicBvh.h <1080:1 1080:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<1080:1> [b3DynamicBvh.h <1126:1 1126:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<1081:2> [b3DynamicBvh.h <1081:2 1081:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DynamicBvh::ICollide [b3DynamicBvh.h <1081:2 1081:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DynamicBvh::collideKDOP<typename T>::T [b3DynamicBvh.h <1081:2 1081:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void [b3DynamicBvh.h <1081:2 1081:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1075:58> [b3DynamicBvh.h <1082:6 1082:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1083:3> [b3DynamicBvh.h <1083:3 1083:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<1083:3> [b3DynamicBvh.h <1125:3 1125:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<1084:19> [b3DynamicBvh.h <1084:19 1084:24>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int [b3DynamicBvh.h <1084:10 1084:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<1078:14> [b3DynamicBvh.h <1084:30 1084:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<1085:33> [b3DynamicBvh.h <1085:33 1085:37>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3AlignedObjectArray<b3DynamicBvh::sStkNP> [b3DynamicBvh.h <1085:4 1085:23>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<b3DynamicBvh::sStkNP> -> b3DynamicBvh::sStkNP [b3DynamicBvh.h <1085:25 1085:30>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::b3AlignedObjectArray()
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::b3AlignedObjectArray() [b3DynamicBvh.h <1085:33 1085:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<1086:15> [b3DynamicBvh.h <1086:15 1086:19>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int [b3DynamicBvh.h <1086:4 1086:6>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> unsigned int [b3DynamicBvh.h <1086:28 1086:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<1088:12> [b3DynamicBvh.h <1088:12 1088:12>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int [b3DynamicBvh.h <1088:8 1088:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<1088:12> [b3DynamicBvh.h <1088:16 1088:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<1078:14> [b3DynamicBvh.h <1088:18 1088:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1088:12> [b3DynamicBvh.h <1088:26 1088:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<1089:4> [b3DynamicBvh.h <1089:4 1089:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<1089:4> [b3DynamicBvh.h <1093:4 1093:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<1086:15> [b3DynamicBvh.h <1090:5 1090:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1088:12> [b3DynamicBvh.h <1090:11 1090:11>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <1090:28 1090:28>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <1090:28 1090:28>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <1090:28 1090:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<1076:27> [b3DynamicBvh.h <1090:17 1090:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1088:12> [b3DynamicBvh.h <1090:25 1090:25>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <1091:19 1091:19>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <1091:19 1091:19>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <1091:19 1091:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<1076:27> [b3DynamicBvh.h <1091:8 1091:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<1088:12> [b3DynamicBvh.h <1091:16 1091:16>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <1092:19 1092:19>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <1092:19 1092:19>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <1092:19 1092:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<1076:27> [b3DynamicBvh.h <1092:8 1092:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<1088:12> [b3DynamicBvh.h <1092:16 1092:16>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::reserve(int)
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::reserve(int) [b3DynamicBvh.h <1094:10 1094:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<1085:33> [b3DynamicBvh.h <1094:4 1094:8>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_SIMPLE_STACKSIZE [b3DynamicBvh.h <1094:18 1094:36>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::push_back(const b3DynamicBvh::sStkNP &)
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::push_back(const b3DynamicBvh::sStkNP &) [b3DynamicBvh.h <1095:10 1095:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1085:33> [b3DynamicBvh.h <1095:4 1095:8>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkNP::sStkNP(const b3DbvtNode *, unsigned int)
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void b3DynamicBvh::sStkNP::sStkNP(const b3DbvtNode *, unsigned int) [b3DynamicBvh.h <1095:20 1095:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DynamicBvh::sStkNP [b3DynamicBvh.h <1095:20 1095:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<1075:58> [b3DynamicBvh.h <1095:27 1095:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<1096:7> [b3DynamicBvh.h <1096:7 1096:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1096:7> [b3DynamicBvh.h <1124:4 1124:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1097:12 1097:13>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DynamicBvh::sStkNP [b3DynamicBvh.h <1097:5 1097:10>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkNP::sStkNP(const b3DynamicBvh::sStkNP &)
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void b3DynamicBvh::sStkNP::sStkNP(const b3DynamicBvh::sStkNP &) [b3DynamicBvh.h <1097:35 1097:35>]
SYMBOL_FUNCTION b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator[](int)
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DynamicBvh::sStkNP & b3AlignedObjectArray<b3DynamicBvh::sStkNP>::operator[](int) [b3DynamicBvh.h <1097:20 1097:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<1085:33> [b3DynamicBvh.h <1097:15 1097:19>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::size() const
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::size() const [b3DynamicBvh.h <1097:27 1097:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<1085:33> [b3DynamicBvh.h <1097:21 1097:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<1098:10> [b3DynamicBvh.h <1098:10 1098:12>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> bool [b3DynamicBvh.h <1098:5 1098:8>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::pop_back()
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::pop_back() [b3DynamicBvh.h <1099:11 1099:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1085:33> [b3DynamicBvh.h <1099:5 1099:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1100:13> [b3DynamicBvh.h <1100:13 1100:13>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int [b3DynamicBvh.h <1100:9 1100:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<1100:17> [b3DynamicBvh.h <1100:17 1100:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<1098:10> [b3DynamicBvh.h <1100:23 1100:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<1100:13> [b3DynamicBvh.h <1100:30 1100:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<1078:14> [b3DynamicBvh.h <1100:32 1100:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<1100:13> [b3DynamicBvh.h <1100:41 1100:41>]
LOCAL_SYMBOL: b3DynamicBvh.h<1100:17> [b3DynamicBvh.h <1100:43 1100:43>]
LOCAL_SYMBOL: b3DynamicBvh.h<1101:5> [b3DynamicBvh.h <1101:5 1101:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<1101:5> [b3DynamicBvh.h <1111:5 1111:5>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int b3DynamicBvh::sStkNP::mask [b3DynamicBvh.h <1102:16 1102:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1102:13 1102:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<1100:17> [b3DynamicBvh.h <1102:21 1102:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<1103:6> [b3DynamicBvh.h <1103:6 1103:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1103:6> [b3DynamicBvh.h <1110:6 1110:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1104:17> [b3DynamicBvh.h <1104:17 1104:20>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int [b3DynamicBvh.h <1104:13 1104:15>]
SYMBOL_FUNCTION int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const [b3DynamicBvh.h <1104:38 1104:45>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <1104:31 1104:36>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNP::node [b3DynamicBvh.h <1104:25 1104:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1104:22 1104:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1076:27> [b3DynamicBvh.h <1104:47 1104:53>]
LOCAL_SYMBOL: b3DynamicBvh.h<1100:13> [b3DynamicBvh.h <1104:55 1104:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<1077:26> [b3DynamicBvh.h <1104:58 1104:64>]
LOCAL_SYMBOL: b3DynamicBvh.h<1100:13> [b3DynamicBvh.h <1104:66 1104:66>]
LOCAL_SYMBOL: b3DynamicBvh.h<1086:15> [b3DynamicBvh.h <1104:69 1104:73>]
LOCAL_SYMBOL: b3DynamicBvh.h<1100:13> [b3DynamicBvh.h <1104:75 1104:75>]
LOCAL_SYMBOL: b3DynamicBvh.h<1104:17> [b3DynamicBvh.h <1105:14 1105:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<1106:7> [b3DynamicBvh.h <1106:7 1106:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1106:7> [b3DynamicBvh.h <1109:7 1109:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1098:10> [b3DynamicBvh.h <1107:16 1107:18>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int b3DynamicBvh::sStkNP::mask [b3DynamicBvh.h <1108:19 1108:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1108:16 1108:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<1100:17> [b3DynamicBvh.h <1108:25 1108:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<1098:10> [b3DynamicBvh.h <1112:9 1112:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<1113:5> [b3DynamicBvh.h <1113:5 1113:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<1113:5> [b3DynamicBvh.h <1123:5 1123:5>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int b3DynamicBvh::sStkNP::mask [b3DynamicBvh.h <1114:13 1114:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1114:10 1114:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<1084:19> [b3DynamicBvh.h <1114:19 1114:24>]
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <1114:38 1114:47>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNP::node [b3DynamicBvh.h <1114:32 1114:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1114:29 1114:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<1115:6> [b3DynamicBvh.h <1115:6 1115:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1115:6> [b3DynamicBvh.h <1118:6 1118:6>]
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::push_back(const b3DynamicBvh::sStkNP &) [b3DynamicBvh.h <1116:13 1116:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<1085:33> [b3DynamicBvh.h <1116:7 1116:11>]
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void b3DynamicBvh::sStkNP::sStkNP(const b3DbvtNode *, unsigned int) [b3DynamicBvh.h <1116:23 1116:28>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DynamicBvh::sStkNP [b3DynamicBvh.h <1116:23 1116:28>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <1116:39 1116:44>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <1116:39 1116:44>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNP::node [b3DynamicBvh.h <1116:33 1116:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1116:30 1116:31>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int b3DynamicBvh::sStkNP::mask [b3DynamicBvh.h <1116:52 1116:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1116:49 1116:50>]
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNP>::push_back(const b3DynamicBvh::sStkNP &) [b3DynamicBvh.h <1117:13 1117:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<1085:33> [b3DynamicBvh.h <1117:7 1117:11>]
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> void b3DynamicBvh::sStkNP::sStkNP(const b3DbvtNode *, unsigned int) [b3DynamicBvh.h <1117:23 1117:28>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DynamicBvh::sStkNP [b3DynamicBvh.h <1117:23 1117:28>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <1117:39 1117:44>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <1117:39 1117:44>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNP::node [b3DynamicBvh.h <1117:33 1117:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1117:30 1117:31>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int b3DynamicBvh::sStkNP::mask [b3DynamicBvh.h <1117:52 1117:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1117:49 1117:50>]
LOCAL_SYMBOL: b3DynamicBvh.h<1120:6> [b3DynamicBvh.h <1120:6 1120:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1120:6> [b3DynamicBvh.h <1122:6 1122:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1079:10> [b3DynamicBvh.h <1121:10 1121:15>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNP::node [b3DynamicBvh.h <1121:30 1121:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1121:27 1121:28>]
REFERENCE_USAGE static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> const b3DbvtNode * b3DynamicBvh::sStkNP::node [b3DynamicBvh.h <1121:51 1121:54>]
LOCAL_SYMBOL: b3DynamicBvh.h<1097:12> [b3DynamicBvh.h <1121:48 1121:49>]
LOCAL_SYMBOL: b3DynamicBvh.h<1079:10> [b3DynamicBvh.h <1121:56 1121:61>]
REFERENCE_CALL static void b3DynamicBvh::collideKDOP<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, int, T &) -> int b3AlignedObjectArray<b3DynamicBvh::sStkNP>::size() const [b3DynamicBvh.h <1124:18 1124:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<1085:33> [b3DynamicBvh.h <1124:12 1124:16>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideOCL<typename T>::T [b3DynamicBvh.h <1129:1 1129:14>]
SYMBOL_METHOD public static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) [b3DynamicBvh.h <1129:1 <1130:28 1130:37> 1224:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.h <1130:14 1130:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void [b3DynamicBvh.h <1130:8 1130:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<1130:58> [b3DynamicBvh.h <1130:58 1130:61>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DbvtNode [b3DynamicBvh.h <1130:46 1130:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<1131:29> [b3DynamicBvh.h <1131:29 1131:35>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Vector3 [b3DynamicBvh.h <1131:18 1131:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<1132:28> [b3DynamicBvh.h <1132:28 1132:34>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Scalar [b3DynamicBvh.h <1132:18 1132:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<1133:29> [b3DynamicBvh.h <1133:29 1133:36>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Vector3 [b3DynamicBvh.h <1133:18 1133:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<1134:16> [b3DynamicBvh.h <1134:16 1134:20>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <1134:12 1134:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<1135:12> [b3DynamicBvh.h <1135:12 1135:26>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::collideOCL<typename T>::T [b3DynamicBvh.h <1135:12 1135:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<1136:17> [b3DynamicBvh.h <1136:17 1136:21>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> bool [b3DynamicBvh.h <1136:12 1136:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<1137:1> [b3DynamicBvh.h <1137:1 1137:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<1137:1> [b3DynamicBvh.h <1224:1 1224:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<1138:2> [b3DynamicBvh.h <1138:2 1138:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::ICollide [b3DynamicBvh.h <1138:2 1138:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::collideOCL<typename T>::T [b3DynamicBvh.h <1138:2 1138:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void [b3DynamicBvh.h <1138:2 1138:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1130:58> [b3DynamicBvh.h <1139:6 1139:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1140:3> [b3DynamicBvh.h <1140:3 1140:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<1140:3> [b3DynamicBvh.h <1223:3 1223:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<1141:23> [b3DynamicBvh.h <1141:23 1141:29>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> unsigned int [b3DynamicBvh.h <1141:10 1141:17>]
LOCAL_SYMBOL: b3DynamicBvh.h<1133:29> [b3DynamicBvh.h <1141:32 1141:39>]
LOCAL_SYMBOL: b3DynamicBvh.h<1133:29> [b3DynamicBvh.h <1142:6 1142:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<1133:29> [b3DynamicBvh.h <1143:6 1143:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<1144:19> [b3DynamicBvh.h <1144:19 1144:24>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <1144:10 1144:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<1134:16> [b3DynamicBvh.h <1144:30 1144:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<1145:34> [b3DynamicBvh.h <1145:34 1145:38>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3AlignedObjectArray<b3DynamicBvh::sStkNPS> [b3DynamicBvh.h <1145:4 1145:23>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<b3DynamicBvh::sStkNPS> -> b3DynamicBvh::sStkNPS [b3DynamicBvh.h <1145:25 1145:31>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::b3AlignedObjectArray()
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::b3AlignedObjectArray() [b3DynamicBvh.h <1145:34 1145:38>]
LOCAL_SYMBOL: b3DynamicBvh.h<1146:31> [b3DynamicBvh.h <1146:31 1146:35>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3AlignedObjectArray<int> [b3DynamicBvh.h <1146:4 1146:23>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<int> -> int [b3DynamicBvh.h <1146:25 1146:27>]
SYMBOL_FUNCTION void b3AlignedObjectArray<int>::b3AlignedObjectArray()
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<int>::b3AlignedObjectArray() [b3DynamicBvh.h <1146:31 1146:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1147:31 1147:35>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3AlignedObjectArray<int> [b3DynamicBvh.h <1147:4 1147:23>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<int> -> int [b3DynamicBvh.h <1147:25 1147:27>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<int>::b3AlignedObjectArray() [b3DynamicBvh.h <1147:31 1147:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<1148:15> [b3DynamicBvh.h <1148:15 1148:19>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <1148:4 1148:6>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> unsigned int [b3DynamicBvh.h <1148:28 1148:35>]
LOCAL_SYMBOL: b3DynamicBvh.h<1150:12> [b3DynamicBvh.h <1150:12 1150:12>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <1150:8 1150:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<1150:12> [b3DynamicBvh.h <1150:16 1150:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<1134:16> [b3DynamicBvh.h <1150:18 1150:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1150:12> [b3DynamicBvh.h <1150:26 1150:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<1151:4> [b3DynamicBvh.h <1151:4 1151:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<1151:4> [b3DynamicBvh.h <1155:4 1155:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<1148:15> [b3DynamicBvh.h <1152:5 1152:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1150:12> [b3DynamicBvh.h <1152:11 1152:11>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.h <1152:28 1152:28>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <1152:28 1152:28>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <1152:28 1152:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<1131:29> [b3DynamicBvh.h <1152:17 1152:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1150:12> [b3DynamicBvh.h <1152:25 1152:25>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.h <1153:19 1153:19>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <1153:19 1153:19>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <1153:19 1153:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<1131:29> [b3DynamicBvh.h <1153:8 1153:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<1150:12> [b3DynamicBvh.h <1153:16 1153:16>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.h <1154:19 1154:19>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.h <1154:19 1154:19>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.h <1154:19 1154:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<1131:29> [b3DynamicBvh.h <1154:8 1154:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<1150:12> [b3DynamicBvh.h <1154:16 1154:16>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::reserve(int) [b3DynamicBvh.h <1156:10 1156:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<1145:34> [b3DynamicBvh.h <1156:4 1156:8>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_SIMPLE_STACKSIZE [b3DynamicBvh.h <1156:18 1156:36>]
SYMBOL_FUNCTION void b3AlignedObjectArray<int>::reserve(int)
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<int>::reserve(int) [b3DynamicBvh.h <1157:10 1157:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1157:4 1157:8>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_SIMPLE_STACKSIZE [b3DynamicBvh.h <1157:18 1157:36>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<int>::reserve(int) [b3DynamicBvh.h <1158:10 1158:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<1146:31> [b3DynamicBvh.h <1158:4 1158:8>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_SIMPLE_STACKSIZE [b3DynamicBvh.h <1158:18 1158:36>]
SYMBOL_FUNCTION void b3AlignedObjectArray<int>::push_back(const int &)
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<int>::push_back(const int &) [b3DynamicBvh.h <1159:10 1159:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1159:4 1159:8>]
SYMBOL_FUNCTION static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &)
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) [b3DynamicBvh.h <1159:20 1159:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<1146:31> [b3DynamicBvh.h <1159:29 1159:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<1145:34> [b3DynamicBvh.h <1159:35 1159:39>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkNPS::sStkNPS(const b3DbvtNode *, unsigned int, b3Scalar)
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3DynamicBvh::sStkNPS::sStkNPS(const b3DbvtNode *, unsigned int, b3Scalar) [b3DynamicBvh.h <1159:41 1159:47>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::sStkNPS [b3DynamicBvh.h <1159:41 1159:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<1130:58> [b3DynamicBvh.h <1159:49 1159:52>]
SYMBOL_FUNCTION b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const [b3DynamicBvh.h <1159:69 1159:82>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <1159:62 1159:67>]
LOCAL_SYMBOL: b3DynamicBvh.h<1130:58> [b3DynamicBvh.h <1159:56 1159:59>]
LOCAL_SYMBOL: b3DynamicBvh.h<1133:29> [b3DynamicBvh.h <1159:84 1159:91>]
LOCAL_SYMBOL: b3DynamicBvh.h<1141:23> [b3DynamicBvh.h <1159:93 1159:99>]
LOCAL_SYMBOL: b3DynamicBvh.h<1160:7> [b3DynamicBvh.h <1160:7 1160:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1160:7> [b3DynamicBvh.h <1222:4 1222:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<1161:15> [b3DynamicBvh.h <1161:15 1161:16>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <1161:11 1161:13>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int & b3AlignedObjectArray<int>::operator[](int) [b3DynamicBvh.h <1161:23 1161:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1161:18 1161:22>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3AlignedObjectArray<int>::size() const [b3DynamicBvh.h <1161:30 1161:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1161:24 1161:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1162:14 1162:15>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::sStkNPS [b3DynamicBvh.h <1162:5 1162:11>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3DynamicBvh::sStkNPS::sStkNPS(const b3DynamicBvh::sStkNPS &) [b3DynamicBvh.h <1162:25 1162:25>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int) [b3DynamicBvh.h <1162:22 1162:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1145:34> [b3DynamicBvh.h <1162:17 1162:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<1161:15> [b3DynamicBvh.h <1162:23 1162:24>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<int>::pop_back() [b3DynamicBvh.h <1163:11 1163:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1163:5 1163:9>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<int>::push_back(const int &) [b3DynamicBvh.h <1163:28 1163:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<1146:31> [b3DynamicBvh.h <1163:22 1163:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<1161:15> [b3DynamicBvh.h <1163:38 1163:39>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3DynamicBvh::sStkNPS::mask [b3DynamicBvh.h <1164:11 1164:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1164:8 1164:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1144:19> [b3DynamicBvh.h <1164:17 1164:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1165:5> [b3DynamicBvh.h <1165:5 1165:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<1165:5> [b3DynamicBvh.h <1180:5 1180:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<1166:11> [b3DynamicBvh.h <1166:11 1166:13>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> bool [b3DynamicBvh.h <1166:6 1166:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1167:14> [b3DynamicBvh.h <1167:14 1167:14>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <1167:10 1167:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<1167:18> [b3DynamicBvh.h <1167:18 1167:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1166:11> [b3DynamicBvh.h <1167:24 1167:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<1167:14> [b3DynamicBvh.h <1167:31 1167:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<1134:16> [b3DynamicBvh.h <1167:33 1167:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<1167:14> [b3DynamicBvh.h <1167:42 1167:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<1167:18> [b3DynamicBvh.h <1167:44 1167:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<1168:6> [b3DynamicBvh.h <1168:6 1168:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1168:6> [b3DynamicBvh.h <1178:6 1178:6>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3DynamicBvh::sStkNPS::mask [b3DynamicBvh.h <1169:17 1169:20>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1169:14 1169:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<1167:18> [b3DynamicBvh.h <1169:22 1169:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1170:7> [b3DynamicBvh.h <1170:7 1170:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1170:7> [b3DynamicBvh.h <1177:7 1177:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1171:18> [b3DynamicBvh.h <1171:18 1171:21>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <1171:14 1171:16>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3DbvtAabbMm::Classify(const b3Vector3 &, b3Scalar, int) const [b3DynamicBvh.h <1171:39 1171:46>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <1171:32 1171:37>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> const b3DbvtNode * b3DynamicBvh::sStkNPS::node [b3DynamicBvh.h <1171:26 1171:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1171:23 1171:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<1131:29> [b3DynamicBvh.h <1171:48 1171:54>]
LOCAL_SYMBOL: b3DynamicBvh.h<1167:14> [b3DynamicBvh.h <1171:56 1171:56>]
LOCAL_SYMBOL: b3DynamicBvh.h<1132:28> [b3DynamicBvh.h <1171:59 1171:65>]
LOCAL_SYMBOL: b3DynamicBvh.h<1167:14> [b3DynamicBvh.h <1171:67 1171:67>]
LOCAL_SYMBOL: b3DynamicBvh.h<1148:15> [b3DynamicBvh.h <1171:70 1171:74>]
LOCAL_SYMBOL: b3DynamicBvh.h<1167:14> [b3DynamicBvh.h <1171:76 1171:76>]
LOCAL_SYMBOL: b3DynamicBvh.h<1171:18> [b3DynamicBvh.h <1172:15 1172:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1173:8> [b3DynamicBvh.h <1173:8 1173:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<1173:8> [b3DynamicBvh.h <1176:8 1176:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<1166:11> [b3DynamicBvh.h <1174:17 1174:19>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3DynamicBvh::sStkNPS::mask [b3DynamicBvh.h <1175:20 1175:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1175:17 1175:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1167:18> [b3DynamicBvh.h <1175:26 1175:26>]
LOCAL_SYMBOL: b3DynamicBvh.h<1166:11> [b3DynamicBvh.h <1179:9 1179:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<1135:12> [b3DynamicBvh.h <1181:8 1181:13>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> const b3DbvtNode * b3DynamicBvh::sStkNPS::node [b3DynamicBvh.h <1181:26 1181:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1181:23 1181:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<1182:5> [b3DynamicBvh.h <1182:5 1182:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<1182:5> [b3DynamicBvh.h <1221:5 1221:5>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <1183:18 1183:27>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> const b3DbvtNode * b3DynamicBvh::sStkNPS::node [b3DynamicBvh.h <1183:12 1183:15>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1183:9 1183:10>]
LOCAL_SYMBOL: b3DynamicBvh.h<1184:6> [b3DynamicBvh.h <1184:6 1184:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1184:6> [b3DynamicBvh.h <1216:6 1216:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1185:25> [b3DynamicBvh.h <1185:25 1185:27>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DbvtNode [b3DynamicBvh.h <1185:13 1185:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1185:31> [b3DynamicBvh.h <1185:31 1185:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<1185:31> [b3DynamicBvh.h <1185:70 1185:70>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <1185:42 1185:47>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <1185:42 1185:47>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> const b3DbvtNode * b3DynamicBvh::sStkNPS::node [b3DynamicBvh.h <1185:36 1185:39>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1185:33 1185:34>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <1185:61 1185:66>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <1185:61 1185:66>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> const b3DbvtNode * b3DynamicBvh::sStkNPS::node [b3DynamicBvh.h <1185:55 1185:58>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1185:52 1185:53>]
LOCAL_SYMBOL: b3DynamicBvh.h<1186:16> [b3DynamicBvh.h <1186:16 1186:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::sStkNPS [b3DynamicBvh.h <1186:7 1186:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<1186:22> [b3DynamicBvh.h <1186:22 1186:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1186:22> [b3DynamicBvh.h <1187:79 1187:79>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3DynamicBvh::sStkNPS::sStkNPS(const b3DbvtNode *, unsigned int, b3Scalar) [b3DynamicBvh.h <1186:24 1186:30>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::sStkNPS [b3DynamicBvh.h <1186:24 1186:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<1185:25> [b3DynamicBvh.h <1186:32 1186:34>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3DynamicBvh::sStkNPS::mask [b3DynamicBvh.h <1186:42 1186:45>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1186:39 1186:40>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const [b3DynamicBvh.h <1186:62 1186:75>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <1186:55 1186:60>]
LOCAL_SYMBOL: b3DynamicBvh.h<1185:25> [b3DynamicBvh.h <1186:47 1186:49>]
LOCAL_SYMBOL: b3DynamicBvh.h<1133:29> [b3DynamicBvh.h <1186:77 1186:84>]
LOCAL_SYMBOL: b3DynamicBvh.h<1141:23> [b3DynamicBvh.h <1186:86 1186:92>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3DynamicBvh::sStkNPS::sStkNPS(const b3DbvtNode *, unsigned int, b3Scalar) [b3DynamicBvh.h <1187:8 1187:14>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::sStkNPS [b3DynamicBvh.h <1187:8 1187:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<1185:25> [b3DynamicBvh.h <1187:16 1187:18>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3DynamicBvh::sStkNPS::mask [b3DynamicBvh.h <1187:26 1187:29>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1187:23 1187:24>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Scalar b3DbvtAabbMm::ProjectMinimum(const b3Vector3 &, unsigned int) const [b3DynamicBvh.h <1187:46 1187:59>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.h <1187:39 1187:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<1185:25> [b3DynamicBvh.h <1187:31 1187:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<1133:29> [b3DynamicBvh.h <1187:61 1187:68>]
LOCAL_SYMBOL: b3DynamicBvh.h<1141:23> [b3DynamicBvh.h <1187:70 1187:76>]
LOCAL_SYMBOL: b3DynamicBvh.h<1188:17> [b3DynamicBvh.h <1188:17 1188:17>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <1188:13 1188:15>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Scalar b3DynamicBvh::sStkNPS::value [b3DynamicBvh.h <1188:26 1188:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<1186:16> [b3DynamicBvh.h <1188:19 1188:21>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Scalar b3DynamicBvh::sStkNPS::value [b3DynamicBvh.h <1188:39 1188:43>]
LOCAL_SYMBOL: b3DynamicBvh.h<1186:16> [b3DynamicBvh.h <1188:32 1188:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1189:13 1189:13>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <1189:7 1189:9>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3AlignedObjectArray<int>::size() const [b3DynamicBvh.h <1189:21 1189:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1189:15 1189:19>]
LOCAL_SYMBOL: b3DynamicBvh.h<1136:17> [b3DynamicBvh.h <1190:10 1190:14>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1190:18 1190:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1191:7> [b3DynamicBvh.h <1191:7 1191:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1191:7> [b3DynamicBvh.h <1210:7 1210:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1193:8 1193:8>]
SYMBOL_FUNCTION static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int)
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int) [b3DynamicBvh.h <1193:10 1193:16>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int & b3AlignedObjectArray<int>::operator[](int) [b3DynamicBvh.h <1193:24 1193:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1193:19 1193:23>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int) [b3DynamicBvh.h <1193:34 1193:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<1145:34> [b3DynamicBvh.h <1193:29 1193:33>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Scalar b3DynamicBvh::sStkNPS::value [b3DynamicBvh.h <1193:45 1193:49>]
LOCAL_SYMBOL: b3DynamicBvh.h<1186:16> [b3DynamicBvh.h <1193:38 1193:40>]
LOCAL_SYMBOL: b3DynamicBvh.h<1188:17> [b3DynamicBvh.h <1193:42 1193:42>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3AlignedObjectArray<int>::size() const [b3DynamicBvh.h <1193:59 1193:62>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1193:53 1193:57>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<int>::push_back(const int &) [b3DynamicBvh.h <1194:14 1194:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1194:8 1194:12>]
SYMBOL_FUNCTION void * memmove(void *, const void *, size_t)
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void * memmove(void *, const void *, size_t) [b3DynamicBvh.h <1196:8 1196:14>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int & b3AlignedObjectArray<int>::operator[](int) [b3DynamicBvh.h <1196:22 1196:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1196:17 1196:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1196:23 1196:23>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int & b3AlignedObjectArray<int>::operator[](int) [b3DynamicBvh.h <1196:34 1196:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1196:29 1196:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1196:35 1196:35>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <1196:45 1196:47>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3AlignedObjectArray<int>::size() const [b3DynamicBvh.h <1196:57 1196:60>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1196:51 1196:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1196:64 1196:64>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int & b3AlignedObjectArray<int>::operator[](int) [b3DynamicBvh.h <1200:13 1200:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1200:8 1200:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1200:14 1200:14>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) [b3DynamicBvh.h <1200:17 1200:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<1146:31> [b3DynamicBvh.h <1200:26 1200:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<1145:34> [b3DynamicBvh.h <1200:32 1200:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<1186:16> [b3DynamicBvh.h <1200:38 1200:40>]
LOCAL_SYMBOL: b3DynamicBvh.h<1188:17> [b3DynamicBvh.h <1200:42 1200:42>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1202:8 1202:8>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> static int b3DynamicBvh::nearest(const int *, const b3DynamicBvh::sStkNPS *, b3Scalar, int, int) [b3DynamicBvh.h <1202:10 1202:16>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int & b3AlignedObjectArray<int>::operator[](int) [b3DynamicBvh.h <1202:24 1202:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1202:19 1202:23>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3DynamicBvh::sStkNPS & b3AlignedObjectArray<b3DynamicBvh::sStkNPS>::operator[](int) [b3DynamicBvh.h <1202:34 1202:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<1145:34> [b3DynamicBvh.h <1202:29 1202:33>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Scalar b3DynamicBvh::sStkNPS::value [b3DynamicBvh.h <1202:47 1202:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<1186:16> [b3DynamicBvh.h <1202:38 1202:40>]
LOCAL_SYMBOL: b3DynamicBvh.h<1188:17> [b3DynamicBvh.h <1202:44 1202:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1202:53 1202:53>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3AlignedObjectArray<int>::size() const [b3DynamicBvh.h <1202:61 1202:64>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1202:55 1202:59>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<int>::push_back(const int &) [b3DynamicBvh.h <1203:14 1203:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1203:8 1203:12>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void * memmove(void *, const void *, size_t) [b3DynamicBvh.h <1205:8 1205:14>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int & b3AlignedObjectArray<int>::operator[](int) [b3DynamicBvh.h <1205:22 1205:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1205:17 1205:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1205:23 1205:23>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int & b3AlignedObjectArray<int>::operator[](int) [b3DynamicBvh.h <1205:34 1205:34>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1205:29 1205:33>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1205:35 1205:35>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int [b3DynamicBvh.h <1205:45 1205:47>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3AlignedObjectArray<int>::size() const [b3DynamicBvh.h <1205:57 1205:60>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1205:51 1205:55>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1205:64 1205:64>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int & b3AlignedObjectArray<int>::operator[](int) [b3DynamicBvh.h <1209:13 1209:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1209:8 1209:12>]
LOCAL_SYMBOL: b3DynamicBvh.h<1189:13> [b3DynamicBvh.h <1209:14 1209:14>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) [b3DynamicBvh.h <1209:17 1209:24>]
LOCAL_SYMBOL: b3DynamicBvh.h<1146:31> [b3DynamicBvh.h <1209:26 1209:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<1145:34> [b3DynamicBvh.h <1209:32 1209:36>]
LOCAL_SYMBOL: b3DynamicBvh.h<1186:16> [b3DynamicBvh.h <1209:38 1209:40>]
LOCAL_SYMBOL: b3DynamicBvh.h<1188:17> [b3DynamicBvh.h <1209:44 1209:44>]
LOCAL_SYMBOL: b3DynamicBvh.h<1212:7> [b3DynamicBvh.h <1212:7 1212:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1212:7> [b3DynamicBvh.h <1215:7 1215:7>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<int>::push_back(const int &) [b3DynamicBvh.h <1213:14 1213:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1213:8 1213:12>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) [b3DynamicBvh.h <1213:24 1213:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<1146:31> [b3DynamicBvh.h <1213:33 1213:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<1145:34> [b3DynamicBvh.h <1213:39 1213:43>]
LOCAL_SYMBOL: b3DynamicBvh.h<1186:16> [b3DynamicBvh.h <1213:45 1213:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<1188:17> [b3DynamicBvh.h <1213:49 1213:49>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> void b3AlignedObjectArray<int>::push_back(const int &) [b3DynamicBvh.h <1214:14 1214:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1214:8 1214:12>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> static int b3DynamicBvh::allocate(b3AlignedObjectArray<int> &, b3AlignedObjectArray<b3DynamicBvh::sStkNPS> &, const b3DynamicBvh::sStkNPS &) [b3DynamicBvh.h <1214:24 1214:31>]
LOCAL_SYMBOL: b3DynamicBvh.h<1146:31> [b3DynamicBvh.h <1214:33 1214:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<1145:34> [b3DynamicBvh.h <1214:39 1214:43>]
LOCAL_SYMBOL: b3DynamicBvh.h<1186:16> [b3DynamicBvh.h <1214:45 1214:47>]
LOCAL_SYMBOL: b3DynamicBvh.h<1188:17> [b3DynamicBvh.h <1214:51 1214:51>]
LOCAL_SYMBOL: b3DynamicBvh.h<1218:6> [b3DynamicBvh.h <1218:6 1218:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1218:6> [b3DynamicBvh.h <1220:6 1220:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1135:12> [b3DynamicBvh.h <1219:7 1219:12>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> const b3DbvtNode * b3DynamicBvh::sStkNPS::node [b3DynamicBvh.h <1219:25 1219:28>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1219:22 1219:23>]
REFERENCE_USAGE static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> b3Scalar b3DynamicBvh::sStkNPS::value [b3DynamicBvh.h <1219:33 1219:37>]
LOCAL_SYMBOL: b3DynamicBvh.h<1162:14> [b3DynamicBvh.h <1219:30 1219:31>]
REFERENCE_CALL static void b3DynamicBvh::collideOCL<typename T>(const b3DbvtNode *, const b3Vector3 *, const b3Scalar *, const b3Vector3 &, int, T &, bool) -> int b3AlignedObjectArray<int>::size() const [b3DynamicBvh.h <1222:18 1222:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<1147:31> [b3DynamicBvh.h <1222:12 1222:16>]
SYMBOL_TEMPLATE_PARAMETER b3DynamicBvh::collideTU<typename T>::T [b3DynamicBvh.h <1227:1 1227:14>]
SYMBOL_METHOD public static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) [b3DynamicBvh.h <1227:1 <1228:28 1228:36> 1249:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.h <1228:14 1228:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <1228:8 1228:11>]
LOCAL_SYMBOL: b3DynamicBvh.h<1228:57> [b3DynamicBvh.h <1228:57 1228:60>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <1228:45 1228:54>]
LOCAL_SYMBOL: b3DynamicBvh.h<1229:11> [b3DynamicBvh.h <1229:11 1229:25>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::collideTU<typename T>::T [b3DynamicBvh.h <1229:11 1229:25>]
LOCAL_SYMBOL: b3DynamicBvh.h<1230:1> [b3DynamicBvh.h <1230:1 1230:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<1230:1> [b3DynamicBvh.h <1249:1 1249:1>]
LOCAL_SYMBOL: b3DynamicBvh.h<1231:2> [b3DynamicBvh.h <1231:2 1231:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::ICollide [b3DynamicBvh.h <1231:2 1231:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::collideTU<typename T>::T [b3DynamicBvh.h <1231:2 1231:18>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> void [b3DynamicBvh.h <1231:2 1231:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1228:57> [b3DynamicBvh.h <1232:6 1232:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1233:3> [b3DynamicBvh.h <1233:3 1233:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<1233:3> [b3DynamicBvh.h <1248:3 1248:3>]
LOCAL_SYMBOL: b3DynamicBvh.h<1234:44> [b3DynamicBvh.h <1234:44 1234:48>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3AlignedObjectArray<const b3DbvtNode *> [b3DynamicBvh.h <1234:4 1234:23>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<const b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.h <1234:31 1234:40>]
REFERENCE_CALL static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.h <1234:44 1234:48>]
REFERENCE_CALL static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) [b3DynamicBvh.h <1235:10 1235:16>]
LOCAL_SYMBOL: b3DynamicBvh.h<1234:44> [b3DynamicBvh.h <1235:4 1235:8>]
REFERENCE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DynamicBvh::anonymous enum (b3DynamicBvh.h<252:2>)::B3_SIMPLE_STACKSIZE [b3DynamicBvh.h <1235:18 1235:36>]
REFERENCE_CALL static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) [b3DynamicBvh.h <1236:10 1236:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1234:44> [b3DynamicBvh.h <1236:4 1236:8>]
LOCAL_SYMBOL: b3DynamicBvh.h<1228:57> [b3DynamicBvh.h <1236:20 1236:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1237:7> [b3DynamicBvh.h <1237:7 1237:7>]
LOCAL_SYMBOL: b3DynamicBvh.h<1237:7> [b3DynamicBvh.h <1247:4 1247:4>]
LOCAL_SYMBOL: b3DynamicBvh.h<1238:23> [b3DynamicBvh.h <1238:23 1238:23>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode [b3DynamicBvh.h <1238:11 1238:20>]
REFERENCE_CALL static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.h <1238:30 1238:30>]
LOCAL_SYMBOL: b3DynamicBvh.h<1234:44> [b3DynamicBvh.h <1238:25 1238:29>]
REFERENCE_CALL static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.h <1238:37 1238:40>]
LOCAL_SYMBOL: b3DynamicBvh.h<1234:44> [b3DynamicBvh.h <1238:31 1238:35>]
REFERENCE_CALL static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> void b3AlignedObjectArray<const b3DbvtNode *>::pop_back() [b3DynamicBvh.h <1239:11 1239:18>]
LOCAL_SYMBOL: b3DynamicBvh.h<1234:44> [b3DynamicBvh.h <1239:5 1239:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1229:11> [b3DynamicBvh.h <1240:8 1240:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<1238:23> [b3DynamicBvh.h <1240:23 1240:23>]
LOCAL_SYMBOL: b3DynamicBvh.h<1241:5> [b3DynamicBvh.h <1241:5 1241:5>]
LOCAL_SYMBOL: b3DynamicBvh.h<1241:5> [b3DynamicBvh.h <1246:5 1246:5>]
REFERENCE_CALL static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.h <1242:12 1242:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<1238:23> [b3DynamicBvh.h <1242:9 1242:9>]
LOCAL_SYMBOL: b3DynamicBvh.h<1243:6> [b3DynamicBvh.h <1243:6 1243:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1243:6> [b3DynamicBvh.h <1243:69 1243:69>]
REFERENCE_CALL static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) [b3DynamicBvh.h <1243:14 1243:22>]
LOCAL_SYMBOL: b3DynamicBvh.h<1234:44> [b3DynamicBvh.h <1243:8 1243:12>]
REFERENCE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <1243:27 1243:32>]
REFERENCE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <1243:27 1243:32>]
LOCAL_SYMBOL: b3DynamicBvh.h<1238:23> [b3DynamicBvh.h <1243:24 1243:24>]
REFERENCE_CALL static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) [b3DynamicBvh.h <1243:44 1243:52>]
LOCAL_SYMBOL: b3DynamicBvh.h<1234:44> [b3DynamicBvh.h <1243:38 1243:42>]
REFERENCE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.h <1243:57 1243:62>]
REFERENCE_USAGE static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.h <1243:57 1243:62>]
LOCAL_SYMBOL: b3DynamicBvh.h<1238:23> [b3DynamicBvh.h <1243:54 1243:54>]
LOCAL_SYMBOL: b3DynamicBvh.h<1245:6> [b3DynamicBvh.h <1245:6 1245:6>]
LOCAL_SYMBOL: b3DynamicBvh.h<1245:6> [b3DynamicBvh.h <1245:27 1245:27>]
LOCAL_SYMBOL: b3DynamicBvh.h<1229:11> [b3DynamicBvh.h <1245:8 1245:13>]
LOCAL_SYMBOL: b3DynamicBvh.h<1238:23> [b3DynamicBvh.h <1245:23 1245:23>]
REFERENCE_CALL static void b3DynamicBvh::collideTU<typename T>(const b3DbvtNode *, T &) -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.h <1247:18 1247:21>]
LOCAL_SYMBOL: b3DynamicBvh.h<1234:44> [b3DynamicBvh.h <1247:12 1247:16>]
SYMBOL_TYPEDEF b3NodeArray [b3DynamicBvh.cpp <20:45 20:55>]
REFERENCE_TYPE_USAGE b3NodeArray -> b3AlignedObjectArray<b3DbvtNode *> [b3DynamicBvh.cpp <20:9 20:28>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.cpp <20:30 20:39>]
SYMBOL_TYPEDEF b3ConstNodeArray [b3DynamicBvh.cpp <21:49 21:64>]
REFERENCE_TYPE_USAGE b3ConstNodeArray -> b3AlignedObjectArray<const b3DbvtNode *> [b3DynamicBvh.cpp <21:9 21:28>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<const b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.cpp <21:36 21:45>]
SYMBOL_STRUCT b3DbvtNodeEnumerator [b3DynamicBvh.cpp <24:1 <24:8 24:27> 28:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<25:1> [b3DynamicBvh.cpp <25:1 25:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<25:1> [b3DynamicBvh.cpp <28:1 28:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <24:31 24:42>]
REFERENCE_INHERITANCE b3DbvtNodeEnumerator -> b3DynamicBvh::ICollide [b3DynamicBvh.cpp <24:45 24:52>]
SYMBOL_FIELD public b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <26:19 26:23>]
REFERENCE_TYPE_USAGE b3ConstNodeArray b3DbvtNodeEnumerator::nodes -> b3ConstNodeArray [b3DynamicBvh.cpp <26:2 26:17>]
SYMBOL_METHOD public void b3DbvtNodeEnumerator::Process(const b3DbvtNode *) [b3DynamicBvh.cpp <27:2 <27:7 27:13> 27:58>]
REFERENCE_TYPE_USAGE void b3DbvtNodeEnumerator::Process(const b3DbvtNode *) -> void [b3DynamicBvh.cpp <27:2 27:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<27:33> [b3DynamicBvh.cpp <27:33 27:33>]
REFERENCE_TYPE_USAGE void b3DbvtNodeEnumerator::Process(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <27:21 27:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<27:36> [b3DynamicBvh.cpp <27:36 27:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<27:36> [b3DynamicBvh.cpp <27:58 27:58>]
REFERENCE_CALL void b3DbvtNodeEnumerator::Process(const b3DbvtNode *) -> void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) [b3DynamicBvh.cpp <27:44 27:52>]
REFERENCE_USAGE void b3DbvtNodeEnumerator::Process(const b3DbvtNode *) -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <27:38 27:42>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<27:33> [b3DynamicBvh.cpp <27:54 27:54>]
SYMBOL_METHOD public void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator(const b3DbvtNodeEnumerator &) [b3DynamicBvh.cpp <24:8 24:27>]
SYMBOL_METHOD public void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator(b3DbvtNodeEnumerator &&) [b3DynamicBvh.cpp <24:8 24:27>]
SYMBOL_METHOD public b3DbvtNodeEnumerator & b3DbvtNodeEnumerator::operator=(b3DbvtNodeEnumerator &&) [b3DynamicBvh.cpp <24:8 24:27>]
SYMBOL_METHOD public void b3DbvtNodeEnumerator::~b3DbvtNodeEnumerator() [b3DynamicBvh.cpp <24:8 <24:8 24:27> 24:27>]
SYMBOL_METHOD public void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator() [b3DynamicBvh.cpp <24:8 <24:8 24:27> 24:27>]
SYMBOL_FUNCTION void b3DynamicBvh::ICollide::ICollide()
REFERENCE_CALL void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator() -> void b3DynamicBvh::ICollide::ICollide() [b3DynamicBvh.cpp <24:8 24:27>]
REFERENCE_USAGE void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator() -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <24:8 24:27>]
REFERENCE_CALL void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator() -> void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.cpp <24:8 24:27>]
SYMBOL_FUNCTION static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <31:1 <31:29 31:37> 34:1>]
REFERENCE_TYPE_USAGE static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <31:23 31:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<31:57> [b3DynamicBvh.cpp <31:57 31:60>]
REFERENCE_TYPE_USAGE static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <31:45 31:54>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<32:1> [b3DynamicBvh.cpp <32:1 32:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<32:1> [b3DynamicBvh.cpp <34:1 34:1>]
REFERENCE_USAGE static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <33:23 33:28>]
REFERENCE_USAGE static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <33:23 33:28>]
REFERENCE_USAGE static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <33:15 33:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<31:57> [b3DynamicBvh.cpp <33:9 33:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<31:57> [b3DynamicBvh.cpp <33:34 33:37>]
SYMBOL_FUNCTION static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <37:1 <37:36 37:42> 48:1>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <37:23 37:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<37:65> [b3DynamicBvh.cpp <37:65 37:65>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <37:51 37:62>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<38:32> [b3DynamicBvh.cpp <38:32 38:32>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <38:18 38:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<39:1> [b3DynamicBvh.cpp <39:1 39:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<39:1> [b3DynamicBvh.cpp <48:1 48:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<41:30> [b3DynamicBvh.cpp <41:30 41:35>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp) -> char [b3DynamicBvh.cpp <41:25 41:28>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3DbvtAabbMm [b3DynamicBvh.cpp <41:44 41:55>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<42:16> [b3DynamicBvh.cpp <42:16 42:18>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <42:2 42:13>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <42:22 42:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<41:30> [b3DynamicBvh.cpp <42:36 42:41>]
SYMBOL_FUNCTION void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp) -> void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <46:2 46:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<37:65> [b3DynamicBvh.cpp <46:10 46:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<38:32> [b3DynamicBvh.cpp <46:12 46:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<42:16> [b3DynamicBvh.cpp <46:14 46:16>]
REFERENCE_CALL static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp) -> void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <47:12 47:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<42:16> [b3DynamicBvh.cpp <47:9 47:11>]
SYMBOL_FUNCTION static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <51:1 <51:33 51:38> 56:1>]
REFERENCE_TYPE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Scalar [b3DynamicBvh.cpp <51:23 51:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<51:60> [b3DynamicBvh.cpp <51:60 51:60>]
REFERENCE_TYPE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <51:46 51:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<52:1> [b3DynamicBvh.cpp <52:1 52:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<52:1> [b3DynamicBvh.cpp <56:1 56:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <53:18 53:22>]
REFERENCE_TYPE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3 [b3DynamicBvh.cpp <53:8 53:16>]
SYMBOL_FUNCTION b3Vector3 b3DbvtAabbMm::Lengths() const
REFERENCE_CALL static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3 b3DbvtAabbMm::Lengths() const [b3DynamicBvh.cpp <53:26 53:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<51:60> [b3DynamicBvh.cpp <53:24 53:24>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.cpp <54:16 54:16>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <54:16 54:16>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <54:16 54:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <54:10 54:14>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.cpp <54:24 54:24>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <54:24 54:24>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <54:24 54:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <54:18 54:22>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.cpp <54:32 54:32>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <54:32 54:32>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <54:32 54:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <54:26 54:30>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.cpp <55:9 55:9>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <55:9 55:9>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <55:9 55:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <55:3 55:7>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.cpp <55:17 55:17>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <55:17 55:17>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <55:17 55:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <55:11 55:15>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.cpp <55:25 55:25>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <55:25 55:25>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <55:25 55:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <55:19 55:23>]
SYMBOL_FUNCTION static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <59:1 <59:18 59:30> 66:1>]
REFERENCE_TYPE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> void [b3DynamicBvh.cpp <59:8 59:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:50> [b3DynamicBvh.cpp <59:50 59:53>]
REFERENCE_TYPE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <59:38 59:47>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:59> [b3DynamicBvh.cpp <59:59 59:63>]
REFERENCE_TYPE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <59:55 59:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:70> [b3DynamicBvh.cpp <59:70 59:77>]
REFERENCE_TYPE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <59:65 59:67>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<60:1> [b3DynamicBvh.cpp <60:1 60:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<60:1> [b3DynamicBvh.cpp <66:1 66:1>]
REFERENCE_CALL static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <61:11 61:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:50> [b3DynamicBvh.cpp <61:5 61:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<62:2> [b3DynamicBvh.cpp <62:2 62:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<62:2> [b3DynamicBvh.cpp <65:2 65:2>]
SYMBOL_FUNCTION static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp)
REFERENCE_CALL static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <63:3 63:15>]
REFERENCE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <63:23 63:28>]
REFERENCE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <63:23 63:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:50> [b3DynamicBvh.cpp <63:17 63:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:59> [b3DynamicBvh.cpp <63:33 63:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:70> [b3DynamicBvh.cpp <63:41 63:48>]
REFERENCE_CALL static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <64:3 64:15>]
REFERENCE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <64:23 64:28>]
REFERENCE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <64:23 64:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:50> [b3DynamicBvh.cpp <64:17 64:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:59> [b3DynamicBvh.cpp <64:33 64:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:70> [b3DynamicBvh.cpp <64:41 64:48>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:70> [b3DynamicBvh.cpp <65:9 65:16>]
SYMBOL_FUNCTION const int & b3Max<int>(const int &, const int &)
REFERENCE_CALL static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) -> const int & b3Max<int>(const int &, const int &) [b3DynamicBvh.cpp <65:18 65:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:70> [b3DynamicBvh.cpp <65:24 65:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:59> [b3DynamicBvh.cpp <65:33 65:37>]
SYMBOL_FUNCTION static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <69:1 <69:30 69:41> 74:1>]
REFERENCE_TYPE_USAGE static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> void [b3DynamicBvh.cpp <69:23 69:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<69:58> [b3DynamicBvh.cpp <69:58 69:62>]
REFERENCE_TYPE_USAGE static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DynamicBvh [b3DynamicBvh.cpp <69:44 69:55>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<70:26> [b3DynamicBvh.cpp <70:26 70:29>]
REFERENCE_TYPE_USAGE static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <70:14 70:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<71:1> [b3DynamicBvh.cpp <71:1 71:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<71:1> [b3DynamicBvh.cpp <74:1 74:1>]
REFERENCE_CALL static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> void b3AlignedFreeInternal(void *) [b3DynamicBvh.cpp <72:2 72:14>]
REFERENCE_USAGE static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <72:23 72:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<69:58> [b3DynamicBvh.cpp <72:16 72:20>]
REFERENCE_USAGE static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <73:9 73:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<69:58> [b3DynamicBvh.cpp <73:2 73:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<70:26> [b3DynamicBvh.cpp <73:16 73:19>]
SYMBOL_FUNCTION static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <77:1 <77:18 77:36> 87:1>]
REFERENCE_TYPE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> void [b3DynamicBvh.cpp <77:8 77:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <77:53 77:57>]
REFERENCE_TYPE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DynamicBvh [b3DynamicBvh.cpp <77:39 77:50>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <78:27 78:30>]
REFERENCE_TYPE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <78:15 78:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<79:1> [b3DynamicBvh.cpp <79:1 79:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<79:1> [b3DynamicBvh.cpp <87:1 87:1>]
REFERENCE_CALL static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> bool b3DbvtNode::isleaf() const [b3DynamicBvh.cpp <80:12 80:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <80:6 80:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<81:2> [b3DynamicBvh.cpp <81:2 81:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<81:2> [b3DynamicBvh.cpp <84:2 84:2>]
SYMBOL_FUNCTION static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp)
REFERENCE_CALL static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <82:3 82:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <82:23 82:27>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <82:35 82:40>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <82:35 82:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <82:29 82:32>]
REFERENCE_CALL static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <83:3 83:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <83:23 83:27>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <83:35 83:40>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <83:35 83:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <83:29 83:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <85:5 85:8>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <85:18 85:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <85:11 85:15>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <85:33 85:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <85:26 85:30>]
SYMBOL_FUNCTION static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp)
REFERENCE_CALL static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <86:2 86:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <86:15 86:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <86:21 86:24>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <90:1 <90:35 90:46> 103:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <90:23 90:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<90:63> [b3DynamicBvh.cpp <90:63 90:67>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DynamicBvh [b3DynamicBvh.cpp <90:49 90:60>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<91:26> [b3DynamicBvh.cpp <91:26 91:31>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <91:14 91:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<92:20> [b3DynamicBvh.cpp <92:20 92:23>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> void [b3DynamicBvh.cpp <92:14 92:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<93:1> [b3DynamicBvh.cpp <93:1 93:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<93:1> [b3DynamicBvh.cpp <103:1 103:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <94:14 94:17>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <94:2 94:11>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <95:12 95:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<90:63> [b3DynamicBvh.cpp <95:5 95:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<96:2> [b3DynamicBvh.cpp <96:2 96:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<96:2> [b3DynamicBvh.cpp <96:40 96:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <96:4 96:7>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <96:16 96:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<90:63> [b3DynamicBvh.cpp <96:9 96:13>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <96:30 96:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<90:63> [b3DynamicBvh.cpp <96:23 96:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<98:2> [b3DynamicBvh.cpp <98:2 98:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<98:2> [b3DynamicBvh.cpp <98:66 98:66>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <98:4 98:7>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <98:52 98:61>]
SYMBOL_FUNCTION void b3DbvtNode::b3DbvtNode()
REFERENCE_CALL static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> void b3DbvtNode::b3DbvtNode() [b3DynamicBvh.cpp <98:52 98:61>]
REFERENCE_CALL static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> void * b3AlignedAllocInternal(size_t, int) [b3DynamicBvh.cpp <98:13 98:26>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <98:35 98:44>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <99:8 99:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <99:2 99:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<91:26> [b3DynamicBvh.cpp <99:17 99:22>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> void * b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::data [b3DynamicBvh.cpp <100:8 100:11>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <100:8 100:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <100:2 100:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<92:20> [b3DynamicBvh.cpp <100:16 100:19>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <101:8 101:13>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <101:8 101:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <101:2 101:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <102:9 102:12>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <106:1 <106:35 106:46> 114:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <106:23 106:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<106:63> [b3DynamicBvh.cpp <106:63 106:67>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DynamicBvh [b3DynamicBvh.cpp <106:49 106:60>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<107:26> [b3DynamicBvh.cpp <107:26 107:31>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <107:14 107:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<108:34> [b3DynamicBvh.cpp <108:34 108:39>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <108:20 108:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<109:20> [b3DynamicBvh.cpp <109:20 109:23>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> void [b3DynamicBvh.cpp <109:14 109:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<110:1> [b3DynamicBvh.cpp <110:1 110:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<110:1> [b3DynamicBvh.cpp <114:1 114:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<111:14> [b3DynamicBvh.cpp <111:14 111:17>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <111:2 111:11>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp)
REFERENCE_CALL static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <111:19 111:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<106:63> [b3DynamicBvh.cpp <111:32 111:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<107:26> [b3DynamicBvh.cpp <111:38 111:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<109:20> [b3DynamicBvh.cpp <111:45 111:48>]
REFERENCE_CALL static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <112:14 112:14>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <112:8 112:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<111:14> [b3DynamicBvh.cpp <112:2 112:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<108:34> [b3DynamicBvh.cpp <112:15 112:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<111:14> [b3DynamicBvh.cpp <113:9 113:12>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <117:1 <117:35 117:46> 126:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <117:23 117:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<117:63> [b3DynamicBvh.cpp <117:63 117:67>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DynamicBvh [b3DynamicBvh.cpp <117:49 117:60>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<118:26> [b3DynamicBvh.cpp <118:26 118:31>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <118:14 118:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<119:34> [b3DynamicBvh.cpp <119:34 119:40>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <119:20 119:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<120:34> [b3DynamicBvh.cpp <120:34 120:40>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <120:20 120:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<121:20> [b3DynamicBvh.cpp <121:20 121:23>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> void [b3DynamicBvh.cpp <121:14 121:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<122:1> [b3DynamicBvh.cpp <122:1 122:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<122:1> [b3DynamicBvh.cpp <126:1 126:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<123:14> [b3DynamicBvh.cpp <123:14 123:17>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <123:2 123:11>]
REFERENCE_CALL static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <123:19 123:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<117:63> [b3DynamicBvh.cpp <123:32 123:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<118:26> [b3DynamicBvh.cpp <123:38 123:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<121:20> [b3DynamicBvh.cpp <123:45 123:48>]
REFERENCE_CALL static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <124:2 124:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<119:34> [b3DynamicBvh.cpp <124:10 124:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<120:34> [b3DynamicBvh.cpp <124:18 124:24>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <124:32 124:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<123:14> [b3DynamicBvh.cpp <124:26 124:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<123:14> [b3DynamicBvh.cpp <125:9 125:12>]
SYMBOL_FUNCTION static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <129:1 <129:18 129:29> 170:1>]
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> void [b3DynamicBvh.cpp <129:8 129:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<129:46> [b3DynamicBvh.cpp <129:46 129:50>]
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DynamicBvh [b3DynamicBvh.cpp <129:32 129:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <130:26 130:29>]
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <130:14 130:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <131:26 131:29>]
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <131:14 131:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<132:1> [b3DynamicBvh.cpp <132:1 132:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<132:1> [b3DynamicBvh.cpp <170:1 170:1>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <133:13 133:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<129:46> [b3DynamicBvh.cpp <133:6 133:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<134:2> [b3DynamicBvh.cpp <134:2 134:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<134:2> [b3DynamicBvh.cpp <137:2 137:2>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <135:10 135:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<129:46> [b3DynamicBvh.cpp <135:3 135:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <135:19 135:22>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <136:9 136:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <136:3 136:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<139:2> [b3DynamicBvh.cpp <139:2 139:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<139:2> [b3DynamicBvh.cpp <169:2 169:2>]
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> bool b3DbvtNode::isleaf() const [b3DynamicBvh.cpp <140:13 140:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <140:7 140:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<141:3> [b3DynamicBvh.cpp <141:3 141:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<141:3> [b3DynamicBvh.cpp <147:3 147:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<142:7> [b3DynamicBvh.cpp <142:7 142:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<142:7> [b3DynamicBvh.cpp <146:4 146:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <143:5 143:8>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <143:16 143:21>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <143:16 143:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <143:10 143:13>]
SYMBOL_FUNCTION int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &)
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.cpp <143:23 143:30>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <143:39 143:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <143:33 143:36>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <144:23 144:28>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <144:12 144:17>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <144:12 144:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <144:6 144:9>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <145:23 145:28>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <145:12 145:17>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <145:12 145:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <145:6 145:9>]
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> bool b3DbvtNode::isleaf() const [b3DynamicBvh.cpp <146:19 146:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <146:13 146:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <148:15 148:18>]
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <148:3 148:12>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <148:26 148:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <148:20 148:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <149:15 149:18>]
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <149:3 149:12>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp)
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <149:20 149:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<129:46> [b3DynamicBvh.cpp <149:33 149:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <149:39 149:42>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <149:50 149:55>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <149:44 149:47>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <149:63 149:68>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <149:57 149:60>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <150:6 150:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<151:3> [b3DynamicBvh.cpp <151:3 151:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<151:3> [b3DynamicBvh.cpp <162:3 162:3>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <152:10 152:15>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <152:10 152:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <152:4 152:7>]
SYMBOL_FUNCTION static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp)
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <152:17 152:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <152:27 152:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <152:36 152:39>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <153:10 153:15>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <153:10 153:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <153:4 153:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <153:25 153:28>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <153:36 153:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <153:30 153:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <153:43 153:46>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <154:10 154:15>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <154:10 154:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <154:4 154:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <154:25 154:28>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <154:36 154:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <154:30 154:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <154:43 154:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<155:7> [b3DynamicBvh.cpp <155:7 155:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<155:7> [b3DynamicBvh.cpp <161:4 161:4>]
SYMBOL_FUNCTION bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const [b3DynamicBvh.cpp <156:22 156:28>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <156:15 156:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <156:9 156:12>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <156:36 156:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <156:30 156:33>]
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <157:6 157:12>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <157:31 157:36>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <157:20 157:25>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <157:20 157:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <157:14 157:17>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <157:55 157:60>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <157:44 157:49>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <157:44 157:49>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <157:38 157:41>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <157:68 157:73>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <157:62 157:65>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <160:5 160:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <160:10 160:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <161:16 161:19>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <161:27 161:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <161:21 161:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<164:3> [b3DynamicBvh.cpp <164:3 164:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<164:3> [b3DynamicBvh.cpp <168:3 168:3>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <165:10 165:15>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <165:10 165:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <165:4 165:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <165:22 165:25>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <165:33 165:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <165:27 165:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <165:40 165:43>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <166:10 166:15>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <166:10 166:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <166:4 166:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <166:22 166:25>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <166:33 166:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <166:27 166:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <166:40 166:43>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <167:11 167:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<129:46> [b3DynamicBvh.cpp <167:4 167:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <167:20 167:23>]
SYMBOL_FUNCTION static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <173:1 <173:23 173:34> 210:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <173:8 173:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <173:51 173:55>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DynamicBvh [b3DynamicBvh.cpp <173:37 173:48>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<174:26> [b3DynamicBvh.cpp <174:26 174:29>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <174:14 174:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<175:1> [b3DynamicBvh.cpp <175:1 175:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<175:1> [b3DynamicBvh.cpp <210:1 210:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<174:26> [b3DynamicBvh.cpp <176:5 176:8>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <176:18 176:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <176:11 176:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<177:2> [b3DynamicBvh.cpp <177:2 177:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<177:2> [b3DynamicBvh.cpp <180:2 180:2>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <178:10 178:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <178:3 178:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<182:2> [b3DynamicBvh.cpp <182:2 182:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<182:2> [b3DynamicBvh.cpp <209:2 209:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <183:15 183:20>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <183:3 183:12>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <183:28 183:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<174:26> [b3DynamicBvh.cpp <183:22 183:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <184:15 184:18>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <184:3 184:12>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <184:28 184:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <184:20 184:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<185:15> [b3DynamicBvh.cpp <185:15 185:21>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <185:3 185:12>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <185:31 185:36>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <185:31 185:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <185:23 185:28>]
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <185:40 185:48>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<174:26> [b3DynamicBvh.cpp <185:50 185:53>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <186:6 186:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<187:3> [b3DynamicBvh.cpp <187:3 187:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<187:3> [b3DynamicBvh.cpp <201:3 201:3>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <188:10 188:15>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <188:10 188:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <188:4 188:7>]
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <188:17 188:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <188:27 188:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<185:15> [b3DynamicBvh.cpp <188:36 188:42>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <189:13 189:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<185:15> [b3DynamicBvh.cpp <189:4 189:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <189:20 189:23>]
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <190:4 190:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <190:17 190:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <190:23 190:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <191:10 191:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<192:4> [b3DynamicBvh.cpp <192:4 192:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<192:4> [b3DynamicBvh.cpp <199:4 199:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<193:24> [b3DynamicBvh.cpp <193:24 193:25>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <193:11 193:22>]
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <193:33 193:38>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <193:33 193:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <193:27 193:30>]
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <194:5 194:11>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <194:30 194:35>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <194:19 194:24>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <194:19 194:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <194:13 194:16>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <194:54 194:59>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <194:43 194:48>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <194:43 194:48>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <194:37 194:40>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <194:67 194:72>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <194:61 194:64>]
SYMBOL_FUNCTION bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.cpp <195:8 195:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<193:24> [b3DynamicBvh.cpp <195:19 195:20>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <195:28 195:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <195:22 195:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<196:5> [b3DynamicBvh.cpp <196:5 196:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<196:5> [b3DynamicBvh.cpp <198:5 198:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <197:6 197:9>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <197:17 197:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <197:11 197:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <200:11 200:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <200:16 200:19>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <200:28 200:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <200:21 200:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<203:3> [b3DynamicBvh.cpp <203:3 203:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<203:3> [b3DynamicBvh.cpp <208:3 208:3>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <204:11 204:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <204:4 204:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<185:15> [b3DynamicBvh.cpp <204:18 204:24>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <205:13 205:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<185:15> [b3DynamicBvh.cpp <205:4 205:10>]
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <206:4 206:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <206:17 206:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <206:23 206:28>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <207:18 207:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <207:11 207:15>]
SYMBOL_FUNCTION static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <213:1 <213:18 213:30> 228:1>]
REFERENCE_TYPE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> void [b3DynamicBvh.cpp <213:8 213:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<213:46> [b3DynamicBvh.cpp <213:46 213:50>]
REFERENCE_TYPE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DynamicBvh [b3DynamicBvh.cpp <213:32 213:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <214:24 214:27>]
REFERENCE_TYPE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <214:12 214:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<215:25> [b3DynamicBvh.cpp <215:25 215:30>]
REFERENCE_TYPE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3NodeArray [b3DynamicBvh.cpp <215:12 215:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<216:16> [b3DynamicBvh.cpp <216:16 216:20>]
REFERENCE_TYPE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <216:12 216:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<217:1> [b3DynamicBvh.cpp <217:1 217:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<217:1> [b3DynamicBvh.cpp <228:1 228:1>]
REFERENCE_CALL static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <218:11 218:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <218:5 218:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<216:16> [b3DynamicBvh.cpp <218:25 218:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<219:2> [b3DynamicBvh.cpp <219:2 219:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<219:2> [b3DynamicBvh.cpp <223:2 223:2>]
SYMBOL_FUNCTION static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp)
REFERENCE_CALL static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <220:3 220:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<213:46> [b3DynamicBvh.cpp <220:17 220:21>]
REFERENCE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <220:29 220:34>]
REFERENCE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <220:29 220:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <220:23 220:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<215:25> [b3DynamicBvh.cpp <220:39 220:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<216:16> [b3DynamicBvh.cpp <220:46 220:50>]
REFERENCE_CALL static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <221:3 221:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<213:46> [b3DynamicBvh.cpp <221:17 221:21>]
REFERENCE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <221:29 221:34>]
REFERENCE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <221:29 221:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <221:23 221:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<215:25> [b3DynamicBvh.cpp <221:39 221:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<216:16> [b3DynamicBvh.cpp <221:46 221:50>]
REFERENCE_CALL static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <222:3 222:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<213:46> [b3DynamicBvh.cpp <222:16 222:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <222:22 222:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<225:2> [b3DynamicBvh.cpp <225:2 225:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<225:2> [b3DynamicBvh.cpp <227:2 227:2>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &)
REFERENCE_CALL static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) [b3DynamicBvh.cpp <226:10 226:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<215:25> [b3DynamicBvh.cpp <226:3 226:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <226:20 226:23>]
SYMBOL_FUNCTION static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <231:1 <231:18 231:24> 246:1>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> void [b3DynamicBvh.cpp <231:8 231:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<231:46> [b3DynamicBvh.cpp <231:46 231:51>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3NodeArray [b3DynamicBvh.cpp <231:33 231:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<232:25> [b3DynamicBvh.cpp <232:25 232:28>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3NodeArray [b3DynamicBvh.cpp <232:12 232:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<233:25> [b3DynamicBvh.cpp <233:25 233:29>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3NodeArray [b3DynamicBvh.cpp <233:12 233:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<234:29> [b3DynamicBvh.cpp <234:29 234:31>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3Vector3 [b3DynamicBvh.cpp <234:18 234:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<235:29> [b3DynamicBvh.cpp <235:29 235:32>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3Vector3 [b3DynamicBvh.cpp <235:18 235:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<236:1> [b3DynamicBvh.cpp <236:1 236:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<236:1> [b3DynamicBvh.cpp <246:1 246:1>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &)
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) [b3DynamicBvh.cpp <237:7 237:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<232:25> [b3DynamicBvh.cpp <237:2 237:5>]
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) [b3DynamicBvh.cpp <238:8 238:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<233:25> [b3DynamicBvh.cpp <238:2 238:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <239:10 239:10>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <239:6 239:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:14> [b3DynamicBvh.cpp <239:14 239:15>]
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <239:24 239:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<231:46> [b3DynamicBvh.cpp <239:17 239:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <239:31 239:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:14> [b3DynamicBvh.cpp <239:33 239:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <239:38 239:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<240:2> [b3DynamicBvh.cpp <240:2 240:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<240:2> [b3DynamicBvh.cpp <245:2 245:2>]
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.cpp <241:6 241:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<235:29> [b3DynamicBvh.cpp <241:12 241:15>]
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.cpp <241:43 241:43>]
SYMBOL_FUNCTION b3Vector3 b3DbvtAabbMm::Center() const
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3Vector3 b3DbvtAabbMm::Center() const [b3DynamicBvh.cpp <241:35 241:40>]
REFERENCE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <241:28 241:33>]
SYMBOL_FUNCTION b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const [b3DynamicBvh.cpp <241:23 241:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<231:46> [b3DynamicBvh.cpp <241:17 241:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <241:24 241:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<234:29> [b3DynamicBvh.cpp <241:44 241:46>]
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) [b3DynamicBvh.cpp <242:9 242:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<232:25> [b3DynamicBvh.cpp <242:4 242:7>]
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const [b3DynamicBvh.cpp <242:25 242:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<231:46> [b3DynamicBvh.cpp <242:19 242:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <242:26 242:26>]
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) [b3DynamicBvh.cpp <244:10 244:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<233:25> [b3DynamicBvh.cpp <244:4 244:8>]
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) -> b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const [b3DynamicBvh.cpp <244:26 244:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<231:46> [b3DynamicBvh.cpp <244:20 244:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <244:27 244:27>]
SYMBOL_FUNCTION static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <249:1 <249:24 249:31> 263:1>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <249:8 249:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<249:53> [b3DynamicBvh.cpp <249:53 249:58>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> b3NodeArray [b3DynamicBvh.cpp <249:40 249:50>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<250:1> [b3DynamicBvh.cpp <250:1 250:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<250:1> [b3DynamicBvh.cpp <263:1 263:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<252:30> [b3DynamicBvh.cpp <252:30 252:35>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> char [b3DynamicBvh.cpp <252:25 252:28>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <252:44 252:55>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<253:16> [b3DynamicBvh.cpp <253:16 253:21>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <253:2 253:13>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <253:25 253:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<252:30> [b3DynamicBvh.cpp <253:39 253:44>]
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <254:8 254:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<253:16> [b3DynamicBvh.cpp <254:2 254:7>]
REFERENCE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <254:20 254:25>]
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const [b3DynamicBvh.cpp <254:15 254:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<249:53> [b3DynamicBvh.cpp <254:9 254:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:10> [b3DynamicBvh.cpp <258:10 258:10>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <258:6 258:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:14> [b3DynamicBvh.cpp <258:14 258:15>]
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <258:24 258:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<249:53> [b3DynamicBvh.cpp <258:17 258:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:10> [b3DynamicBvh.cpp <258:31 258:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:14> [b3DynamicBvh.cpp <258:33 258:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:10> [b3DynamicBvh.cpp <258:38 258:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<259:2> [b3DynamicBvh.cpp <259:2 259:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<259:2> [b3DynamicBvh.cpp <261:2 261:2>]
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <260:3 260:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<253:16> [b3DynamicBvh.cpp <260:11 260:16>]
REFERENCE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <260:29 260:34>]
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const [b3DynamicBvh.cpp <260:24 260:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<249:53> [b3DynamicBvh.cpp <260:18 260:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:10> [b3DynamicBvh.cpp <260:25 260:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<253:16> [b3DynamicBvh.cpp <260:36 260:41>]
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) -> void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <262:15 262:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<253:16> [b3DynamicBvh.cpp <262:9 262:14>]
SYMBOL_FUNCTION static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <266:1 <266:18 266:27> 296:1>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> void [b3DynamicBvh.cpp <266:8 266:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<266:44> [b3DynamicBvh.cpp <266:44 266:48>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DynamicBvh [b3DynamicBvh.cpp <266:30 266:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <267:25 267:30>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3NodeArray [b3DynamicBvh.cpp <267:12 267:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<268:1> [b3DynamicBvh.cpp <268:1 268:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<268:1> [b3DynamicBvh.cpp <296:1 296:1>]
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <269:15 269:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <269:8 269:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<270:2> [b3DynamicBvh.cpp <270:2 270:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<270:2> [b3DynamicBvh.cpp <295:2 295:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<271:12> [b3DynamicBvh.cpp <271:12 271:18>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3Scalar [b3DynamicBvh.cpp <271:3 271:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <272:9 272:14>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <272:3 272:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:19> [b3DynamicBvh.cpp <272:19 272:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:19> [b3DynamicBvh.cpp <272:25 272:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <273:11 273:11>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <273:7 273:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <273:15 273:15>]
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <273:24 273:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <273:17 273:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <273:33 273:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<274:3> [b3DynamicBvh.cpp <274:3 274:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<274:3> [b3DynamicBvh.cpp <285:3 285:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<275:12> [b3DynamicBvh.cpp <275:12 275:12>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <275:8 275:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <275:14 275:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<275:12> [b3DynamicBvh.cpp <275:18 275:18>]
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <275:27 275:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <275:20 275:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<275:12> [b3DynamicBvh.cpp <275:36 275:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<276:4> [b3DynamicBvh.cpp <276:4 276:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<276:4> [b3DynamicBvh.cpp <284:4 284:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<277:20> [b3DynamicBvh.cpp <277:20 277:21>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3Scalar [b3DynamicBvh.cpp <277:11 277:18>]
SYMBOL_FUNCTION static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> static b3Scalar b3Size(const b3DbvtVolume &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <277:23 277:28>]
SYMBOL_FUNCTION static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <277:30 277:36>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <277:49 277:54>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <277:44 277:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <277:38 277:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <277:45 277:45>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <277:67 277:72>]
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <277:62 277:62>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <277:56 277:61>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<275:12> [b3DynamicBvh.cpp <277:63 277:63>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<277:20> [b3DynamicBvh.cpp <278:8 278:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<271:12> [b3DynamicBvh.cpp <278:11 278:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<279:5> [b3DynamicBvh.cpp <279:5 279:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<279:5> [b3DynamicBvh.cpp <283:5 283:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<271:12> [b3DynamicBvh.cpp <280:6 280:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<277:20> [b3DynamicBvh.cpp <280:17 280:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <281:6 281:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <281:18 281:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <282:6 282:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<275:12> [b3DynamicBvh.cpp <282:18 282:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <286:15 286:15>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <286:3 286:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:21> [b3DynamicBvh.cpp <286:21 286:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:21> [b3DynamicBvh.cpp <286:57 286:57>]
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <286:28 286:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <286:22 286:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <286:29 286:34>]
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <286:46 286:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <286:40 286:45>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <286:47 286:52>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <287:15 287:15>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <287:3 287:12>]
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <287:19 287:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<266:44> [b3DynamicBvh.cpp <287:32 287:36>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <287:46 287:51>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <287:40 287:40>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <287:59 287:64>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <287:53 287:53>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <288:6 288:11>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <288:6 288:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <288:3 288:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <288:19 288:19>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <289:6 289:11>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <289:6 289:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <289:3 289:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <289:19 289:19>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <290:9 290:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <290:3 290:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <290:19 290:19>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <291:9 291:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <291:3 291:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <291:19 291:19>]
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <292:9 292:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <292:3 292:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <292:10 292:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <292:23 292:23>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int) [b3DynamicBvh.cpp <293:10 293:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <293:3 293:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <293:15 293:20>]
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <293:32 293:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <293:25 293:30>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::pop_back()
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::pop_back() [b3DynamicBvh.cpp <294:10 294:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <294:3 294:8>]
SYMBOL_FUNCTION static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <299:1 <299:22 299:30> 366:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <299:8 299:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<299:46> [b3DynamicBvh.cpp <299:46 299:50>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DynamicBvh [b3DynamicBvh.cpp <299:32 299:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <300:23 300:28>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3NodeArray [b3DynamicBvh.cpp <300:10 300:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<301:14> [b3DynamicBvh.cpp <301:14 301:24>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <301:10 301:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<302:1> [b3DynamicBvh.cpp <302:1 302:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<302:1> [b3DynamicBvh.cpp <366:1 366:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<303:25> [b3DynamicBvh.cpp <303:25 303:28>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Vector3 [b3DynamicBvh.cpp <303:15 303:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<303:32> [b3DynamicBvh.cpp <303:32 303:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<303:32> [b3DynamicBvh.cpp <305:23 305:23>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <303:33 303:45>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <304:3 304:15>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <305:3 305:15>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <306:12 306:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <306:5 306:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<307:2> [b3DynamicBvh.cpp <307:2 307:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<307:2> [b3DynamicBvh.cpp <364:2 364:2>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <308:13 308:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <308:6 308:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<301:14> [b3DynamicBvh.cpp <308:20 308:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<309:3> [b3DynamicBvh.cpp <309:3 309:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<309:3> [b3DynamicBvh.cpp <358:3 358:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<310:23> [b3DynamicBvh.cpp <310:23 310:25>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtVolume [b3DynamicBvh.cpp <310:10 310:21>]
SYMBOL_FUNCTION static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> static b3DbvtVolume b3Bounds(const b3NodeArray &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <310:27 310:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <310:36 310:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<311:22> [b3DynamicBvh.cpp <311:22 311:24>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Vector3 [b3DynamicBvh.cpp <311:10 311:18>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Vector3 b3DbvtAabbMm::Center() const [b3DynamicBvh.cpp <311:30 311:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<310:23> [b3DynamicBvh.cpp <311:26 311:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <312:19 312:22>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3NodeArray [b3DynamicBvh.cpp <312:4 312:14>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray()
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.cpp <312:19 312:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <313:13 313:20>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <313:4 313:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<314:13> [b3DynamicBvh.cpp <314:13 314:20>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <314:4 314:6>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <314:29 314:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <314:22 314:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <315:13 315:22>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <315:4 315:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:30> [b3DynamicBvh.cpp <315:30 315:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:30> [b3DynamicBvh.cpp <315:48 315:48>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:31> [b3DynamicBvh.cpp <315:31 315:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:31> [b3DynamicBvh.cpp <315:35 315:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:37> [b3DynamicBvh.cpp <315:37 315:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:37> [b3DynamicBvh.cpp <315:41 315:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:43> [b3DynamicBvh.cpp <315:43 315:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:43> [b3DynamicBvh.cpp <315:47 315:47>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <316:8 316:8>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <316:4 316:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <317:9 317:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <317:13 317:13>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <317:22 317:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <317:15 317:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <317:31 317:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<318:4> [b3DynamicBvh.cpp <318:4 318:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<318:4> [b3DynamicBvh.cpp <324:4 324:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<319:21> [b3DynamicBvh.cpp <319:21 319:21>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Vector3 [b3DynamicBvh.cpp <319:11 319:19>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.cpp <319:49 319:49>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Vector3 b3DbvtAabbMm::Center() const [b3DynamicBvh.cpp <319:41 319:46>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <319:34 319:39>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <319:29 319:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <319:23 319:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <319:30 319:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<311:22> [b3DynamicBvh.cpp <319:50 319:52>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<320:13> [b3DynamicBvh.cpp <320:13 320:13>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <320:9 320:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<320:13> [b3DynamicBvh.cpp <320:17 320:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<320:13> [b3DynamicBvh.cpp <320:23 320:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<321:5> [b3DynamicBvh.cpp <321:5 321:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<321:5> [b3DynamicBvh.cpp <323:5 323:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <322:8 322:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<320:13> [b3DynamicBvh.cpp <322:19 322:19>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.cpp <322:22 322:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<319:21> [b3DynamicBvh.cpp <322:28 322:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<303:25> [b3DynamicBvh.cpp <322:30 322:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<320:13> [b3DynamicBvh.cpp <322:35 322:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <325:9 325:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <325:13 325:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <325:19 325:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<326:4> [b3DynamicBvh.cpp <326:4 326:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<326:4> [b3DynamicBvh.cpp <336:4 336:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <327:9 327:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <327:20 327:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <327:31 327:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <327:42 327:42>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<328:5> [b3DynamicBvh.cpp <328:5 328:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<328:5> [b3DynamicBvh.cpp <335:5 335:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<329:16> [b3DynamicBvh.cpp <329:16 329:19>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <329:12 329:14>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <329:22 329:24>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Scalar b3Fabs(b3Scalar) [b3DynamicBvh.cpp <329:26 329:31>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3Scalar [b3DynamicBvh.cpp <329:33 329:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <329:42 329:51>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <329:53 329:53>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <329:59 329:68>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <329:70 329:70>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<329:16> [b3DynamicBvh.cpp <330:9 330:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<314:13> [b3DynamicBvh.cpp <330:14 330:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<331:6> [b3DynamicBvh.cpp <331:6 331:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<331:6> [b3DynamicBvh.cpp <334:6 334:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <332:7 332:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <332:16 332:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<314:13> [b3DynamicBvh.cpp <333:7 333:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<329:16> [b3DynamicBvh.cpp <333:16 333:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <337:7 337:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<338:4> [b3DynamicBvh.cpp <338:4 338:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<338:4> [b3DynamicBvh.cpp <342:4 342:4>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <339:13 339:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <339:5 339:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <339:21 339:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <339:32 339:39>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <340:13 340:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <340:5 340:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <340:21 340:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <340:32 340:39>]
SYMBOL_FUNCTION static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <341:5 341:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <341:13 341:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <341:20 341:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <341:28 341:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<311:22> [b3DynamicBvh.cpp <341:36 341:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<303:25> [b3DynamicBvh.cpp <341:40 341:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <341:45 341:52>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<344:4> [b3DynamicBvh.cpp <344:4 344:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<344:4> [b3DynamicBvh.cpp <351:4 351:4>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <345:13 345:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <345:5 345:8>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <345:28 345:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <345:21 345:26>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <346:13 346:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <346:5 346:8>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <346:28 346:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <346:21 346:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:13> [b3DynamicBvh.cpp <347:13 347:13>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <347:9 347:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:17> [b3DynamicBvh.cpp <347:17 347:18>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <347:27 347:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <347:20 347:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:13> [b3DynamicBvh.cpp <347:34 347:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:17> [b3DynamicBvh.cpp <347:36 347:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:13> [b3DynamicBvh.cpp <347:41 347:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<348:5> [b3DynamicBvh.cpp <348:5 348:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<348:5> [b3DynamicBvh.cpp <350:5 350:5>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) [b3DynamicBvh.cpp <349:16 349:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <349:6 349:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:13> [b3DynamicBvh.cpp <349:11 349:11>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <349:32 349:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <349:26 349:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:13> [b3DynamicBvh.cpp <349:33 349:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <352:16 352:19>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <352:4 352:13>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <352:21 352:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<299:46> [b3DynamicBvh.cpp <352:34 352:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<310:23> [b3DynamicBvh.cpp <352:42 352:44>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <353:10 353:15>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <353:10 353:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <353:4 353:7>]
SYMBOL_FUNCTION static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <353:20 353:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<299:46> [b3DynamicBvh.cpp <353:30 353:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <353:36 353:39>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<301:14> [b3DynamicBvh.cpp <353:44 353:54>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <354:10 354:15>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <354:10 354:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <354:4 354:7>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <354:20 354:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<299:46> [b3DynamicBvh.cpp <354:30 354:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <354:36 354:39>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<301:14> [b3DynamicBvh.cpp <354:44 354:54>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <355:21 355:26>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <355:10 355:15>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <355:10 355:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <355:4 355:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <355:28 355:31>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <356:21 356:26>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <356:10 356:15>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <356:10 356:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <356:4 356:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <356:28 356:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <357:11 357:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<360:3> [b3DynamicBvh.cpp <360:3 360:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<360:3> [b3DynamicBvh.cpp <363:3 363:3>]
SYMBOL_FUNCTION static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <361:4 361:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<299:46> [b3DynamicBvh.cpp <361:15 361:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <361:21 361:26>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <362:17 362:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <362:11 362:16>]
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <365:15 365:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <365:9 365:14>]
SYMBOL_FUNCTION static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <369:1 <369:35 369:40> 394:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <369:23 369:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <369:54 369:54>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <369:42 369:51>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:69> [b3DynamicBvh.cpp <369:69 369:69>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <369:56 369:65>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<370:1> [b3DynamicBvh.cpp <370:1 370:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<370:1> [b3DynamicBvh.cpp <394:1 394:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <371:14 371:14>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <371:2 371:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <371:19 371:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <371:16 371:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <373:5 373:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <373:7 373:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<374:2> [b3DynamicBvh.cpp <374:2 374:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<374:2> [b3DynamicBvh.cpp <392:2 392:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<375:14> [b3DynamicBvh.cpp <375:14 375:14>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <375:9 375:11>]
REFERENCE_CALL static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <375:16 375:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <375:26 375:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<376:14> [b3DynamicBvh.cpp <376:14 376:14>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> int [b3DynamicBvh.cpp <376:9 376:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<375:14> [b3DynamicBvh.cpp <376:18 376:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<377:15> [b3DynamicBvh.cpp <377:15 377:15>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <377:3 377:12>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <377:20 377:25>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <377:20 377:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <377:17 377:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<376:14> [b3DynamicBvh.cpp <377:27 377:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<378:15> [b3DynamicBvh.cpp <378:15 378:15>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode [b3DynamicBvh.cpp <378:3 378:12>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <378:20 378:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <378:17 378:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<378:15> [b3DynamicBvh.cpp <380:6 380:6>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <380:12 380:17>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <380:12 380:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<378:15> [b3DynamicBvh.cpp <380:9 380:9>]
REFERENCE_CALL static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> static int b3IndexOf(const b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <380:19 380:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <380:29 380:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <380:33 380:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:69> [b3DynamicBvh.cpp <380:41 380:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <380:43 380:43>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <381:6 381:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<377:15> [b3DynamicBvh.cpp <381:3 381:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <381:13 381:13>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <382:6 382:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <382:3 382:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <382:13 382:13>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <383:6 383:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <383:3 383:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<378:15> [b3DynamicBvh.cpp <383:13 383:13>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <384:6 384:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <384:6 384:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <384:3 384:3>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <384:19 384:24>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <384:19 384:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <384:16 384:16>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <385:6 385:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <385:6 385:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <385:3 385:3>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <385:19 385:24>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <385:19 385:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <385:16 385:16>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <386:17 386:22>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <386:6 386:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <386:6 386:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <386:3 386:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <386:24 386:24>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <387:17 387:22>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <387:6 387:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <387:6 387:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <387:3 387:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <387:24 387:24>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <388:6 388:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <388:6 388:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <388:3 388:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<375:14> [b3DynamicBvh.cpp <388:13 388:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <388:16 388:16>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <389:6 389:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <389:6 389:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <389:3 389:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<376:14> [b3DynamicBvh.cpp <389:13 389:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<377:15> [b3DynamicBvh.cpp <389:16 389:16>]
SYMBOL_FUNCTION void b3Swap<b3DbvtAabbMm>(b3DbvtAabbMm &, b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> void b3Swap<b3DbvtAabbMm>(b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <390:3 390:8>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <390:13 390:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <390:10 390:10>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <390:23 390:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <390:20 390:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <391:10 391:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <393:9 393:9>]
SYMBOL_METHOD public void b3DynamicBvh::b3DynamicBvh() [b3DynamicBvh.cpp <409:1 <409:15 409:26> 416:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <409:1 409:12>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.cpp <409:15 409:26>]
REFERENCE_CALL void b3DynamicBvh::b3DynamicBvh() -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray() [b3DynamicBvh.cpp <409:15 409:26>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> b3AlignedObjectArray<const b3DbvtNode *> b3DynamicBvh::m_rayTestStack [b3DynamicBvh.cpp <409:15 409:26>]
REFERENCE_CALL void b3DynamicBvh::b3DynamicBvh() -> void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.cpp <409:15 409:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<410:1> [b3DynamicBvh.cpp <410:1 410:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<410:1> [b3DynamicBvh.cpp <416:1 416:1>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <411:2 411:7>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <412:2 412:7>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> int b3DynamicBvh::m_lkhd [b3DynamicBvh.cpp <413:2 413:7>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <414:2 414:9>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> unsigned int b3DynamicBvh::m_opath [b3DynamicBvh.cpp <415:2 415:8>]
SYMBOL_METHOD public void b3DynamicBvh::~b3DynamicBvh() [b3DynamicBvh.cpp <419:1 <419:15 419:27> 422:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <419:1 419:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<420:1> [b3DynamicBvh.cpp <420:1 420:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<420:1> [b3DynamicBvh.cpp <422:1 422:1>]
SYMBOL_FUNCTION void b3DynamicBvh::clear()
REFERENCE_CALL void b3DynamicBvh::~b3DynamicBvh() -> void b3DynamicBvh::clear() [b3DynamicBvh.cpp <421:2 421:6>]
SYMBOL_METHOD public void b3DynamicBvh::clear() [b3DynamicBvh.cpp <425:1 <425:22 425:26> 435:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <425:8 425:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clear() -> void [b3DynamicBvh.cpp <425:1 425:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<426:1> [b3DynamicBvh.cpp <426:1 426:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<426:1> [b3DynamicBvh.cpp <435:1 435:1>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <427:5 427:10>]
REFERENCE_CALL void b3DynamicBvh::clear() -> static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <428:3 428:21>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <428:28 428:33>]
REFERENCE_CALL void b3DynamicBvh::clear() -> void b3AlignedFreeInternal(void *) [b3DynamicBvh.cpp <429:2 429:14>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <429:16 429:21>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <430:2 430:7>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> int b3DynamicBvh::m_lkhd [b3DynamicBvh.cpp <431:2 431:7>]
REFERENCE_CALL void b3DynamicBvh::clear() -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear() [b3DynamicBvh.cpp <432:13 432:17>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.cpp <432:2 432:11>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> unsigned int b3DynamicBvh::m_opath [b3DynamicBvh.cpp <433:2 433:8>]
SYMBOL_METHOD public void b3DynamicBvh::optimizeBottomUp() [b3DynamicBvh.cpp <438:1 <438:22 438:37> 448:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <438:8 438:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeBottomUp() -> void [b3DynamicBvh.cpp <438:1 438:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<439:1> [b3DynamicBvh.cpp <439:1 439:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<439:1> [b3DynamicBvh.cpp <448:1 448:1>]
REFERENCE_USAGE void b3DynamicBvh::optimizeBottomUp() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <440:5 440:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<441:2> [b3DynamicBvh.cpp <441:2 441:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<441:2> [b3DynamicBvh.cpp <447:2 447:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<442:15> [b3DynamicBvh.cpp <442:15 442:20>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeBottomUp() -> b3NodeArray [b3DynamicBvh.cpp <442:3 442:13>]
REFERENCE_CALL void b3DynamicBvh::optimizeBottomUp() -> void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.cpp <442:15 442:20>]
REFERENCE_CALL void b3DynamicBvh::optimizeBottomUp() -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <443:10 443:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<442:15> [b3DynamicBvh.cpp <443:3 443:8>]
REFERENCE_USAGE void b3DynamicBvh::optimizeBottomUp() -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <443:18 443:25>]
REFERENCE_CALL void b3DynamicBvh::optimizeBottomUp() -> static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <444:3 444:15>]
REFERENCE_USAGE void b3DynamicBvh::optimizeBottomUp() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <444:22 444:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<442:15> [b3DynamicBvh.cpp <444:29 444:34>]
REFERENCE_CALL void b3DynamicBvh::optimizeBottomUp() -> static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <445:3 445:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<442:15> [b3DynamicBvh.cpp <445:19 445:24>]
REFERENCE_USAGE void b3DynamicBvh::optimizeBottomUp() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <446:3 446:8>]
REFERENCE_CALL void b3DynamicBvh::optimizeBottomUp() -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <446:16 446:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<442:15> [b3DynamicBvh.cpp <446:10 446:15>]
SYMBOL_METHOD public void b3DynamicBvh::optimizeTopDown(int) [b3DynamicBvh.cpp <451:1 <451:22 451:36> 460:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <451:8 451:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> void [b3DynamicBvh.cpp <451:1 451:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<451:42> [b3DynamicBvh.cpp <451:42 451:52>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> int [b3DynamicBvh.cpp <451:38 451:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<452:1> [b3DynamicBvh.cpp <452:1 452:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<452:1> [b3DynamicBvh.cpp <460:1 460:1>]
REFERENCE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <453:5 453:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<454:2> [b3DynamicBvh.cpp <454:2 454:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<454:2> [b3DynamicBvh.cpp <459:2 459:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<455:15> [b3DynamicBvh.cpp <455:15 455:20>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> b3NodeArray [b3DynamicBvh.cpp <455:3 455:13>]
REFERENCE_CALL void b3DynamicBvh::optimizeTopDown(int) -> void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.cpp <455:15 455:20>]
REFERENCE_CALL void b3DynamicBvh::optimizeTopDown(int) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <456:10 456:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<455:15> [b3DynamicBvh.cpp <456:3 456:8>]
REFERENCE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <456:18 456:25>]
REFERENCE_CALL void b3DynamicBvh::optimizeTopDown(int) -> static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <457:3 457:15>]
REFERENCE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <457:22 457:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<455:15> [b3DynamicBvh.cpp <457:29 457:34>]
REFERENCE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <458:3 458:8>]
REFERENCE_CALL void b3DynamicBvh::optimizeTopDown(int) -> static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <458:10 458:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<455:15> [b3DynamicBvh.cpp <458:25 458:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<451:42> [b3DynamicBvh.cpp <458:32 458:42>]
SYMBOL_METHOD public void b3DynamicBvh::optimizeIncremental(int) [b3DynamicBvh.cpp <463:1 <463:22 463:40> 480:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <463:8 463:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> void [b3DynamicBvh.cpp <463:1 463:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<463:46> [b3DynamicBvh.cpp <463:46 463:51>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> int [b3DynamicBvh.cpp <463:42 463:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<464:1> [b3DynamicBvh.cpp <464:1 464:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<464:1> [b3DynamicBvh.cpp <480:1 480:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<463:46> [b3DynamicBvh.cpp <465:5 465:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<463:46> [b3DynamicBvh.cpp <465:15 465:20>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <465:22 465:29>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <466:5 466:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<463:46> [b3DynamicBvh.cpp <466:14 466:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<467:2> [b3DynamicBvh.cpp <467:2 467:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<467:2> [b3DynamicBvh.cpp <479:2 479:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<468:6> [b3DynamicBvh.cpp <468:6 468:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<468:6> [b3DynamicBvh.cpp <478:3 478:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<469:17> [b3DynamicBvh.cpp <469:17 469:20>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode [b3DynamicBvh.cpp <469:4 469:13>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <469:22 469:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<470:13> [b3DynamicBvh.cpp <470:13 470:15>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> unsigned int [b3DynamicBvh.cpp <470:4 470:11>]
REFERENCE_CALL void b3DynamicBvh::optimizeIncremental(int) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <471:16 471:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<469:17> [b3DynamicBvh.cpp <471:10 471:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<472:4> [b3DynamicBvh.cpp <472:4 472:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<472:4> [b3DynamicBvh.cpp <475:4 475:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<469:17> [b3DynamicBvh.cpp <473:5 473:8>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <473:31 473:36>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <473:31 473:36>]
SYMBOL_FUNCTION static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp)
REFERENCE_CALL void b3DynamicBvh::optimizeIncremental(int) -> static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <473:10 473:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<469:17> [b3DynamicBvh.cpp <473:17 473:20>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <473:22 473:27>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> unsigned int b3DynamicBvh::m_opath [b3DynamicBvh.cpp <473:39 473:45>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<470:13> [b3DynamicBvh.cpp <473:48 473:50>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<470:13> [b3DynamicBvh.cpp <474:5 474:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<470:13> [b3DynamicBvh.cpp <474:10 474:12>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> unsigned int [b3DynamicBvh.cpp <474:25 474:32>]
SYMBOL_FUNCTION void b3DynamicBvh::update(b3DbvtNode *, int)
REFERENCE_CALL void b3DynamicBvh::optimizeIncremental(int) -> void b3DynamicBvh::update(b3DbvtNode *, int) [b3DynamicBvh.cpp <476:4 476:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<469:17> [b3DynamicBvh.cpp <476:11 476:14>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> unsigned int b3DynamicBvh::m_opath [b3DynamicBvh.cpp <477:6 477:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<463:46> [b3DynamicBvh.cpp <478:13 478:18>]
SYMBOL_METHOD public b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) [b3DynamicBvh.cpp <483:1 <483:27 483:32> 489:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <483:13 483:24>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> b3DbvtNode [b3DynamicBvh.cpp <483:1 483:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<483:54> [b3DynamicBvh.cpp <483:54 483:59>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> b3DbvtVolume [b3DynamicBvh.cpp <483:40 483:51>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<483:67> [b3DynamicBvh.cpp <483:67 483:70>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> void [b3DynamicBvh.cpp <483:61 483:64>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<484:1> [b3DynamicBvh.cpp <484:1 484:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<484:1> [b3DynamicBvh.cpp <489:1 489:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<485:14> [b3DynamicBvh.cpp <485:14 485:17>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> b3DbvtNode [b3DynamicBvh.cpp <485:2 485:11>]
REFERENCE_CALL b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <485:19 485:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<483:54> [b3DynamicBvh.cpp <485:39 485:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<483:67> [b3DynamicBvh.cpp <485:46 485:49>]
SYMBOL_FUNCTION static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp)
REFERENCE_CALL b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <486:2 486:13>]
REFERENCE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <486:20 486:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<485:14> [b3DynamicBvh.cpp <486:27 486:30>]
REFERENCE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <487:4 487:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<485:14> [b3DynamicBvh.cpp <488:9 488:12>]
SYMBOL_METHOD public void b3DynamicBvh::update(b3DbvtNode *, int) [b3DynamicBvh.cpp <492:1 <492:22 492:27> 506:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <492:8 492:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> void [b3DynamicBvh.cpp <492:1 492:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:41> [b3DynamicBvh.cpp <492:41 492:44>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> b3DbvtNode [b3DynamicBvh.cpp <492:29 492:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:50> [b3DynamicBvh.cpp <492:50 492:58>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> int [b3DynamicBvh.cpp <492:46 492:48>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<493:1> [b3DynamicBvh.cpp <493:1 493:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<493:1> [b3DynamicBvh.cpp <506:1 506:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <494:14 494:17>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> b3DbvtNode [b3DynamicBvh.cpp <494:2 494:11>]
SYMBOL_FUNCTION static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp)
REFERENCE_CALL void b3DynamicBvh::update(b3DbvtNode *, int) -> static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <494:19 494:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:41> [b3DynamicBvh.cpp <494:37 494:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <495:5 495:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<496:2> [b3DynamicBvh.cpp <496:2 496:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<496:2> [b3DynamicBvh.cpp <504:2 504:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:50> [b3DynamicBvh.cpp <497:6 497:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<498:3> [b3DynamicBvh.cpp <498:3 498:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<498:3> [b3DynamicBvh.cpp <503:3 503:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<499:12> [b3DynamicBvh.cpp <499:12 499:12>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> int [b3DynamicBvh.cpp <499:8 499:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<499:12> [b3DynamicBvh.cpp <499:17 499:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:50> [b3DynamicBvh.cpp <499:19 499:27>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <499:37 499:42>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <499:31 499:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<499:12> [b3DynamicBvh.cpp <499:46 499:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<500:4> [b3DynamicBvh.cpp <500:4 500:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<500:4> [b3DynamicBvh.cpp <502:4 502:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <501:5 501:8>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <501:16 501:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <501:10 501:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <503:10 503:13>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <503:15 503:20>]
REFERENCE_CALL void b3DynamicBvh::update(b3DbvtNode *, int) -> static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <505:2 505:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <505:20 505:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:41> [b3DynamicBvh.cpp <505:25 505:28>]
SYMBOL_METHOD public void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) [b3DynamicBvh.cpp <509:1 <509:22 509:27> 524:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <509:8 509:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> void [b3DynamicBvh.cpp <509:1 509:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:41> [b3DynamicBvh.cpp <509:41 509:44>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtNode [b3DynamicBvh.cpp <509:29 509:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:60> [b3DynamicBvh.cpp <509:60 509:65>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtVolume [b3DynamicBvh.cpp <509:46 509:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<510:1> [b3DynamicBvh.cpp <510:1 510:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<510:1> [b3DynamicBvh.cpp <524:1 524:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <511:14 511:17>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtNode [b3DynamicBvh.cpp <511:2 511:11>]
REFERENCE_CALL void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <511:19 511:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:41> [b3DynamicBvh.cpp <511:37 511:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <512:5 512:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<513:2> [b3DynamicBvh.cpp <513:2 513:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<513:2> [b3DynamicBvh.cpp <521:2 521:2>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> int b3DynamicBvh::m_lkhd [b3DynamicBvh.cpp <514:6 514:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<515:3> [b3DynamicBvh.cpp <515:3 515:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<515:3> [b3DynamicBvh.cpp <520:3 520:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<516:12> [b3DynamicBvh.cpp <516:12 516:12>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> int [b3DynamicBvh.cpp <516:8 516:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<516:12> [b3DynamicBvh.cpp <516:17 516:17>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> int b3DynamicBvh::m_lkhd [b3DynamicBvh.cpp <516:19 516:24>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <516:34 516:39>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <516:28 516:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<516:12> [b3DynamicBvh.cpp <516:43 516:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<517:4> [b3DynamicBvh.cpp <517:4 517:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<517:4> [b3DynamicBvh.cpp <519:4 519:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <518:5 518:8>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <518:16 518:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <518:10 518:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <520:10 520:13>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <520:15 520:20>]
REFERENCE_CALL void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <522:14 522:14>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <522:8 522:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:41> [b3DynamicBvh.cpp <522:2 522:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:60> [b3DynamicBvh.cpp <522:15 522:20>]
REFERENCE_CALL void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <523:2 523:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <523:20 523:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:41> [b3DynamicBvh.cpp <523:25 523:28>]
SYMBOL_METHOD public bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) [b3DynamicBvh.cpp <527:1 <527:22 527:27> 534:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <527:8 527:19>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> bool [b3DynamicBvh.cpp <527:1 527:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:41> [b3DynamicBvh.cpp <527:41 527:44>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3DbvtNode [b3DynamicBvh.cpp <527:29 527:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:60> [b3DynamicBvh.cpp <527:60 527:65>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3DbvtVolume [b3DynamicBvh.cpp <527:46 527:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:84> [b3DynamicBvh.cpp <527:84 527:91>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3Vector3 [b3DynamicBvh.cpp <527:73 527:81>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:102> [b3DynamicBvh.cpp <527:102 527:107>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3Scalar [b3DynamicBvh.cpp <527:93 527:100>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<528:1> [b3DynamicBvh.cpp <528:1 528:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<528:1> [b3DynamicBvh.cpp <534:1 534:1>]
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const [b3DynamicBvh.cpp <529:18 529:24>]
REFERENCE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <529:11 529:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:41> [b3DynamicBvh.cpp <529:5 529:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:60> [b3DynamicBvh.cpp <529:26 529:31>]
SYMBOL_FUNCTION void b3DbvtAabbMm::Expand(const b3Vector3 &)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> void b3DbvtAabbMm::Expand(const b3Vector3 &) [b3DynamicBvh.cpp <530:9 530:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:60> [b3DynamicBvh.cpp <530:2 530:7>]
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <530:16 530:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:102> [b3DynamicBvh.cpp <530:30 530:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:102> [b3DynamicBvh.cpp <530:37 530:42>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:102> [b3DynamicBvh.cpp <530:44 530:49>]
SYMBOL_FUNCTION void b3DbvtAabbMm::SignedExpand(const b3Vector3 &)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) [b3DynamicBvh.cpp <531:9 531:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:60> [b3DynamicBvh.cpp <531:2 531:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:84> [b3DynamicBvh.cpp <531:22 531:29>]
SYMBOL_FUNCTION void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) [b3DynamicBvh.cpp <532:2 532:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:41> [b3DynamicBvh.cpp <532:9 532:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:60> [b3DynamicBvh.cpp <532:14 532:19>]
SYMBOL_METHOD public bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) [b3DynamicBvh.cpp <537:1 <537:22 537:27> 543:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <537:8 537:19>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> bool [b3DynamicBvh.cpp <537:1 537:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:41> [b3DynamicBvh.cpp <537:41 537:44>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> b3DbvtNode [b3DynamicBvh.cpp <537:29 537:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:60> [b3DynamicBvh.cpp <537:60 537:65>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> b3DbvtVolume [b3DynamicBvh.cpp <537:46 537:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:84> [b3DynamicBvh.cpp <537:84 537:91>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.cpp <537:73 537:81>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<538:1> [b3DynamicBvh.cpp <538:1 538:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<538:1> [b3DynamicBvh.cpp <543:1 543:1>]
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const [b3DynamicBvh.cpp <539:18 539:24>]
REFERENCE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <539:11 539:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:41> [b3DynamicBvh.cpp <539:5 539:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:60> [b3DynamicBvh.cpp <539:26 539:31>]
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) [b3DynamicBvh.cpp <540:9 540:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:60> [b3DynamicBvh.cpp <540:2 540:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:84> [b3DynamicBvh.cpp <540:22 540:29>]
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) [b3DynamicBvh.cpp <541:2 541:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:41> [b3DynamicBvh.cpp <541:9 541:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:60> [b3DynamicBvh.cpp <541:14 541:19>]
SYMBOL_METHOD public bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) [b3DynamicBvh.cpp <546:1 <546:22 546:27> 552:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <546:8 546:19>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> bool [b3DynamicBvh.cpp <546:1 546:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:41> [b3DynamicBvh.cpp <546:41 546:44>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3DbvtNode [b3DynamicBvh.cpp <546:29 546:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:60> [b3DynamicBvh.cpp <546:60 546:65>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3DbvtVolume [b3DynamicBvh.cpp <546:46 546:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:76> [b3DynamicBvh.cpp <546:76 546:81>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3Scalar [b3DynamicBvh.cpp <546:67 546:74>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<547:1> [b3DynamicBvh.cpp <547:1 547:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<547:1> [b3DynamicBvh.cpp <552:1 552:1>]
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const [b3DynamicBvh.cpp <548:18 548:24>]
REFERENCE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <548:11 548:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:41> [b3DynamicBvh.cpp <548:5 548:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:60> [b3DynamicBvh.cpp <548:26 548:31>]
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> void b3DbvtAabbMm::Expand(const b3Vector3 &) [b3DynamicBvh.cpp <549:9 549:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:60> [b3DynamicBvh.cpp <549:2 549:7>]
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <549:16 549:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:76> [b3DynamicBvh.cpp <549:30 549:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:76> [b3DynamicBvh.cpp <549:37 549:42>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:76> [b3DynamicBvh.cpp <549:44 549:49>]
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) [b3DynamicBvh.cpp <550:2 550:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:41> [b3DynamicBvh.cpp <550:9 550:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:60> [b3DynamicBvh.cpp <550:14 550:19>]
SYMBOL_METHOD public void b3DynamicBvh::remove(b3DbvtNode *) [b3DynamicBvh.cpp <555:1 <555:22 555:27> 560:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <555:8 555:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::remove(b3DbvtNode *) -> void [b3DynamicBvh.cpp <555:1 555:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<555:41> [b3DynamicBvh.cpp <555:41 555:44>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::remove(b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <555:29 555:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<556:1> [b3DynamicBvh.cpp <556:1 556:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<556:1> [b3DynamicBvh.cpp <560:1 560:1>]
REFERENCE_CALL void b3DynamicBvh::remove(b3DbvtNode *) -> static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <557:2 557:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<555:41> [b3DynamicBvh.cpp <557:20 557:23>]
REFERENCE_CALL void b3DynamicBvh::remove(b3DbvtNode *) -> static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <558:2 558:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<555:41> [b3DynamicBvh.cpp <558:20 558:23>]
REFERENCE_USAGE void b3DynamicBvh::remove(b3DbvtNode *) -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <559:4 559:11>]
SYMBOL_METHOD public void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const [b3DynamicBvh.cpp <563:1 <563:22 563:26> 585:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <563:8 563:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void [b3DynamicBvh.cpp <563:1 563:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<563:37> [b3DynamicBvh.cpp <563:37 563:43>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DynamicBvh::IWriter [b3DynamicBvh.cpp <563:28 563:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<564:1> [b3DynamicBvh.cpp <564:1 564:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<564:1> [b3DynamicBvh.cpp <585:1 585:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <565:23 565:27>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNodeEnumerator [b3DynamicBvh.cpp <565:2 565:21>]
SYMBOL_FUNCTION void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator()
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator() [b3DynamicBvh.cpp <565:23 565:27>]
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <566:14 566:20>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <566:8 566:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <566:2 566:6>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <566:22 566:29>]
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) [b3DynamicBvh.cpp <567:2 567:10>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <567:12 567:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <567:19 567:23>]
SYMBOL_FUNCTION void b3DynamicBvh::IWriter::Prepare(const b3DbvtNode *, int)
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void b3DynamicBvh::IWriter::Prepare(const b3DbvtNode *, int) [b3DynamicBvh.cpp <568:11 568:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<563:37> [b3DynamicBvh.cpp <568:2 568:8>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <568:19 568:24>]
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.cpp <568:38 568:41>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <568:32 568:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <568:26 568:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <569:10 569:10>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int [b3DynamicBvh.cpp <569:6 569:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <569:14 569:14>]
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.cpp <569:28 569:31>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <569:22 569:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <569:16 569:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <569:37 569:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<570:2> [b3DynamicBvh.cpp <570:2 570:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<570:2> [b3DynamicBvh.cpp <584:2 584:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <571:21 571:21>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode [b3DynamicBvh.cpp <571:9 571:18>]
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <571:34 571:34>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <571:29 571:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <571:23 571:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <571:35 571:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<572:9> [b3DynamicBvh.cpp <572:9 572:9>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int [b3DynamicBvh.cpp <572:3 572:5>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <573:9 573:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <573:6 573:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<572:9> [b3DynamicBvh.cpp <573:17 573:17>]
SYMBOL_FUNCTION int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const [b3DynamicBvh.cpp <573:31 573:46>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <573:25 573:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <573:19 573:23>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <573:51 573:56>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <573:48 573:48>]
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <574:9 574:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <574:6 574:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<575:3> [b3DynamicBvh.cpp <575:3 575:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<575:3> [b3DynamicBvh.cpp <579:3 579:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<576:14> [b3DynamicBvh.cpp <576:14 576:15>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int [b3DynamicBvh.cpp <576:10 576:12>]
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const [b3DynamicBvh.cpp <576:29 576:44>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <576:23 576:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <576:17 576:21>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <576:49 576:54>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <576:49 576:54>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <576:46 576:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<577:14> [b3DynamicBvh.cpp <577:14 577:15>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int [b3DynamicBvh.cpp <577:10 577:12>]
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const [b3DynamicBvh.cpp <577:29 577:44>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <577:23 577:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <577:17 577:21>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <577:49 577:54>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <577:49 577:54>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <577:46 577:46>]
SYMBOL_FUNCTION void b3DynamicBvh::IWriter::WriteNode(const b3DbvtNode *, int, int, int, int)
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void b3DynamicBvh::IWriter::WriteNode(const b3DbvtNode *, int, int, int, int) [b3DynamicBvh.cpp <578:13 578:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<563:37> [b3DynamicBvh.cpp <578:4 578:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <578:23 578:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <578:25 578:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<572:9> [b3DynamicBvh.cpp <578:27 578:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<576:14> [b3DynamicBvh.cpp <578:29 578:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<577:14> [b3DynamicBvh.cpp <578:32 578:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<581:3> [b3DynamicBvh.cpp <581:3 581:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<581:3> [b3DynamicBvh.cpp <583:3 583:3>]
SYMBOL_FUNCTION void b3DynamicBvh::IWriter::WriteLeaf(const b3DbvtNode *, int, int)
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void b3DynamicBvh::IWriter::WriteLeaf(const b3DbvtNode *, int, int) [b3DynamicBvh.cpp <582:13 582:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<563:37> [b3DynamicBvh.cpp <582:4 582:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <582:23 582:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <582:25 582:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<572:9> [b3DynamicBvh.cpp <582:27 582:27>]
SYMBOL_METHOD public void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const [b3DynamicBvh.cpp <588:1 <588:22 588:26> 616:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <588:8 588:19>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void [b3DynamicBvh.cpp <588:1 588:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:42> [b3DynamicBvh.cpp <588:42 588:45>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh [b3DynamicBvh.cpp <588:28 588:39>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:55> [b3DynamicBvh.cpp <588:55 588:60>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::IClone [b3DynamicBvh.cpp <588:47 588:52>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<589:1> [b3DynamicBvh.cpp <589:1 589:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<589:1> [b3DynamicBvh.cpp <616:1 616:1>]
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::clear() [b3DynamicBvh.cpp <590:7 590:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:42> [b3DynamicBvh.cpp <590:2 590:5>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <591:5 591:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<592:2> [b3DynamicBvh.cpp <592:2 592:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<592:2> [b3DynamicBvh.cpp <615:2 615:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <593:33 593:37>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3AlignedObjectArray<b3DynamicBvh::sStkCLN> [b3DynamicBvh.cpp <593:3 593:22>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<b3DynamicBvh::sStkCLN> -> b3DynamicBvh::sStkCLN [b3DynamicBvh.cpp <593:24 593:30>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray()
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray() [b3DynamicBvh.cpp <593:33 593:37>]
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) [b3DynamicBvh.cpp <594:9 594:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <594:3 594:7>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <594:17 594:24>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) [b3DynamicBvh.cpp <595:9 595:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <595:3 595:7>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *) [b3DynamicBvh.cpp <595:19 595:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::sStkCLN [b3DynamicBvh.cpp <595:19 595:25>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <595:27 595:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<596:6> [b3DynamicBvh.cpp <596:6 596:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<596:6> [b3DynamicBvh.cpp <614:3 614:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<597:15> [b3DynamicBvh.cpp <597:15 597:15>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> int [b3DynamicBvh.cpp <597:10 597:12>]
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const [b3DynamicBvh.cpp <597:23 597:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <597:17 597:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <598:18 598:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::sStkCLN [b3DynamicBvh.cpp <598:10 598:16>]
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::sStkCLN::sStkCLN(const b3DynamicBvh::sStkCLN &) [b3DynamicBvh.cpp <598:27 598:27>]
SYMBOL_FUNCTION b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator[](int)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator[](int) [b3DynamicBvh.cpp <598:25 598:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <598:20 598:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<597:15> [b3DynamicBvh.cpp <598:26 598:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <599:18 599:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode [b3DynamicBvh.cpp <599:4 599:13>]
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <599:20 599:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:42> [b3DynamicBvh.cpp <599:34 599:37>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::sStkCLN::parent [b3DynamicBvh.cpp <599:41 599:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <599:39 599:39>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <599:56 599:61>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.cpp <599:50 599:53>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <599:48 599:48>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void * b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::data [b3DynamicBvh.cpp <599:71 599:74>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <599:71 599:74>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.cpp <599:65 599:68>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <599:63 599:63>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::pop_back()
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::pop_back() [b3DynamicBvh.cpp <600:10 600:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <600:4 600:8>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::sStkCLN::parent [b3DynamicBvh.cpp <601:9 601:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <601:7 601:7>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <602:15 602:20>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <602:15 602:20>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::sStkCLN::parent [b3DynamicBvh.cpp <602:7 602:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <602:5 602:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<597:15> [b3DynamicBvh.cpp <602:22 602:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <602:27 602:27>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <604:10 604:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:42> [b3DynamicBvh.cpp <604:5 604:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <604:17 604:17>]
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <605:15 605:24>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.cpp <605:9 605:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <605:7 605:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<606:4> [b3DynamicBvh.cpp <606:4 606:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<606:4> [b3DynamicBvh.cpp <609:4 609:4>]
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) [b3DynamicBvh.cpp <607:11 607:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <607:5 607:9>]
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *) [b3DynamicBvh.cpp <607:21 607:27>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::sStkCLN [b3DynamicBvh.cpp <607:21 607:27>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <607:37 607:42>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <607:37 607:42>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.cpp <607:31 607:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <607:29 607:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <607:47 607:47>]
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) [b3DynamicBvh.cpp <608:11 608:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <608:5 608:9>]
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *) [b3DynamicBvh.cpp <608:21 608:27>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::sStkCLN [b3DynamicBvh.cpp <608:21 608:27>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <608:37 608:42>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <608:37 608:42>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.cpp <608:31 608:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <608:29 608:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <608:47 608:47>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<611:4> [b3DynamicBvh.cpp <611:4 611:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<611:4> [b3DynamicBvh.cpp <613:4 613:4>]
SYMBOL_FUNCTION void b3DynamicBvh::IClone::CloneLeaf(b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::IClone::CloneLeaf(b3DbvtNode *) [b3DynamicBvh.cpp <612:13 612:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:55> [b3DynamicBvh.cpp <612:5 612:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <612:23 612:23>]
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const [b3DynamicBvh.cpp <614:17 614:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <614:11 614:15>]
SYMBOL_METHOD public static int b3DynamicBvh::maxdepth(const b3DbvtNode *) [b3DynamicBvh.cpp <619:1 <619:22 619:29> 624:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <619:8 619:19>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::maxdepth(const b3DbvtNode *) -> int [b3DynamicBvh.cpp <619:1 619:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<619:49> [b3DynamicBvh.cpp <619:49 619:52>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::maxdepth(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <619:37 619:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<620:1> [b3DynamicBvh.cpp <620:1 620:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<620:1> [b3DynamicBvh.cpp <624:1 624:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<621:6> [b3DynamicBvh.cpp <621:6 621:10>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::maxdepth(const b3DbvtNode *) -> int [b3DynamicBvh.cpp <621:2 621:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<619:49> [b3DynamicBvh.cpp <622:5 622:8>]
REFERENCE_CALL static int b3DynamicBvh::maxdepth(const b3DbvtNode *) -> static void b3GetMaxDepth(const b3DbvtNode *, int, int &) (b3DynamicBvh.cpp) [b3DynamicBvh.cpp <622:11 622:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<619:49> [b3DynamicBvh.cpp <622:25 622:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<621:6> [b3DynamicBvh.cpp <622:32 622:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<621:6> [b3DynamicBvh.cpp <623:9 623:13>]
SYMBOL_METHOD public static int b3DynamicBvh::countLeaves(const b3DbvtNode *) [b3DynamicBvh.cpp <627:1 <627:22 627:32> 633:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <627:8 627:19>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> int [b3DynamicBvh.cpp <627:1 627:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<627:52> [b3DynamicBvh.cpp <627:52 627:55>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <627:40 627:49>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<628:1> [b3DynamicBvh.cpp <628:1 628:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<628:1> [b3DynamicBvh.cpp <633:1 633:1>]
REFERENCE_CALL static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <629:11 629:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<627:52> [b3DynamicBvh.cpp <629:5 629:8>]
SYMBOL_FUNCTION static int b3DynamicBvh::countLeaves(const b3DbvtNode *)
REFERENCE_CALL static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> static int b3DynamicBvh::countLeaves(const b3DbvtNode *) [b3DynamicBvh.cpp <630:10 630:20>]
REFERENCE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <630:28 630:33>]
REFERENCE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <630:28 630:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<627:52> [b3DynamicBvh.cpp <630:22 630:25>]
REFERENCE_CALL static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> static int b3DynamicBvh::countLeaves(const b3DbvtNode *) [b3DynamicBvh.cpp <630:39 630:49>]
REFERENCE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <630:57 630:62>]
REFERENCE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <630:57 630:62>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<627:52> [b3DynamicBvh.cpp <630:51 630:54>]
SYMBOL_METHOD public static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) [b3DynamicBvh.cpp <636:1 <636:22 636:34> 647:1>]
QUALIFIER: b3DynamicBvh [b3DynamicBvh.cpp <636:8 636:19>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> void [b3DynamicBvh.cpp <636:1 636:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:54> [b3DynamicBvh.cpp <636:54 636:57>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3DbvtNode [b3DynamicBvh.cpp <636:42 636:51>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:100> [b3DynamicBvh.cpp <636:100 636:105>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3AlignedObjectArray<const b3DbvtNode *> [b3DynamicBvh.cpp <636:59 636:78>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<const b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.cpp <636:86 636:95>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<637:1> [b3DynamicBvh.cpp <637:1 637:1>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<637:1> [b3DynamicBvh.cpp <647:1 647:1>]
REFERENCE_CALL static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <638:11 638:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:54> [b3DynamicBvh.cpp <638:5 638:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<639:2> [b3DynamicBvh.cpp <639:2 639:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<639:2> [b3DynamicBvh.cpp <642:2 642:2>]
SYMBOL_FUNCTION static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &)
REFERENCE_CALL static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) [b3DynamicBvh.cpp <640:3 640:15>]
REFERENCE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <640:23 640:28>]
REFERENCE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <640:23 640:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:54> [b3DynamicBvh.cpp <640:17 640:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:100> [b3DynamicBvh.cpp <640:33 640:38>]
REFERENCE_CALL static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) [b3DynamicBvh.cpp <641:3 641:15>]
REFERENCE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <641:23 641:28>]
REFERENCE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <641:23 641:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:54> [b3DynamicBvh.cpp <641:17 641:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:100> [b3DynamicBvh.cpp <641:33 641:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<644:2> [b3DynamicBvh.cpp <644:2 644:2>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<644:2> [b3DynamicBvh.cpp <646:2 646:2>]
REFERENCE_CALL static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) [b3DynamicBvh.cpp <645:10 645:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:100> [b3DynamicBvh.cpp <645:3 645:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:54> [b3DynamicBvh.cpp <645:20 645:23>]
