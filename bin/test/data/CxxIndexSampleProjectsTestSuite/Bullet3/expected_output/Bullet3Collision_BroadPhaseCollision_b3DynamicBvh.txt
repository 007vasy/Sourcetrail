FILE: b3DynamicBvh.cpp
FILE: b3DynamicBvh.cpp
COMMENT: comment [b3DynamicBvh.cpp <1:1 14:3>]
COMMENT: comment [b3DynamicBvh.cpp <15:1 15:52>]
FILE: b3DynamicBvh.cpp
COMMENT: comment [b3DynamicBvh.cpp <19:1 19:3>]
COMMENT: comment [b3DynamicBvh.cpp <23:1 23:3>]
COMMENT: comment [b3DynamicBvh.cpp <30:1 30:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <31:8 31:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_FORCE_INLINE [b3DynamicBvh.h <55:27 55:41>]
COMMENT: comment [b3DynamicBvh.cpp <36:1 36:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <37:8 37:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_FORCE_INLINE [b3DynamicBvh.h <55:27 55:41>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_ATTRIBUTE_ALIGNED16 [b3DynamicBvh.cpp <41:2 41:23>]
COMMENT: comment [b3DynamicBvh.cpp <50:1 50:23>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <51:8 51:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_FORCE_INLINE [b3DynamicBvh.h <55:27 55:41>]
COMMENT: comment [b3DynamicBvh.cpp <58:1 58:3>]
COMMENT: comment [b3DynamicBvh.cpp <68:1 68:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <69:8 69:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_FORCE_INLINE [b3DynamicBvh.h <55:27 55:41>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> b3AlignedFree [b3DynamicBvh.cpp <72:2 72:14>]
COMMENT: comment [b3DynamicBvh.cpp <76:1 76:3>]
COMMENT: comment [b3DynamicBvh.cpp <89:1 89:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <90:8 90:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_FORCE_INLINE [b3DynamicBvh.h <55:27 55:41>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> b3AlignedAlloc [b3DynamicBvh.cpp <98:13 98:26>]
COMMENT: comment [b3DynamicBvh.cpp <105:1 105:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <106:8 106:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_FORCE_INLINE [b3DynamicBvh.h <55:27 55:41>]
COMMENT: comment [b3DynamicBvh.cpp <116:1 116:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <117:8 117:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_FORCE_INLINE [b3DynamicBvh.h <55:27 55:41>]
COMMENT: comment [b3DynamicBvh.cpp <128:1 128:3>]
COMMENT: comment [b3DynamicBvh.cpp <172:1 172:3>]
COMMENT: comment [b3DynamicBvh.cpp <212:1 212:3>]
COMMENT: comment [b3DynamicBvh.cpp <230:1 230:3>]
COMMENT: comment [b3DynamicBvh.cpp <248:1 248:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_ATTRIBUTE_ALIGNED16 [b3DynamicBvh.cpp <252:2 252:23>]
COMMENT: comment [b3DynamicBvh.cpp <265:1 265:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_INFINITY [b3DynamicBvh.cpp <271:20 271:30>]
REFERENCE_MACRO_USAGE b3Scalar.h -> FLT_MAX [b3Scalar.h <423:25 423:31>]
COMMENT: comment [b3DynamicBvh.cpp <298:1 298:3>]
COMMENT: comment [b3DynamicBvh.cpp <368:1 368:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_INLINE [b3DynamicBvh.cpp <369:8 369:21>]
REFERENCE_MACRO_USAGE b3DynamicBvh.h -> B3_FORCE_INLINE [b3DynamicBvh.h <55:27 55:41>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> b3Assert [b3DynamicBvh.cpp <372:2 372:9>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> b3Assert [b3DynamicBvh.cpp <379:3 379:10>]
COMMENT: comment [b3DynamicBvh.cpp <404:1 404:3>]
COMMENT: comment [b3DynamicBvh.cpp <405:1 405:7>]
COMMENT: comment [b3DynamicBvh.cpp <406:1 406:3>]
COMMENT: comment [b3DynamicBvh.cpp <408:1 408:3>]
COMMENT: comment [b3DynamicBvh.cpp <418:1 418:3>]
COMMENT: comment [b3DynamicBvh.cpp <424:1 424:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> b3AlignedFree [b3DynamicBvh.cpp <429:2 429:14>]
COMMENT: comment [b3DynamicBvh.cpp <437:1 437:3>]
COMMENT: comment [b3DynamicBvh.cpp <450:1 450:3>]
COMMENT: comment [b3DynamicBvh.cpp <462:1 462:3>]
COMMENT: comment [b3DynamicBvh.cpp <482:1 482:3>]
COMMENT: comment [b3DynamicBvh.cpp <491:1 491:3>]
COMMENT: comment [b3DynamicBvh.cpp <508:1 508:3>]
COMMENT: comment [b3DynamicBvh.cpp <526:1 526:3>]
COMMENT: comment [b3DynamicBvh.cpp <536:1 536:3>]
COMMENT: comment [b3DynamicBvh.cpp <545:1 545:3>]
COMMENT: comment [b3DynamicBvh.cpp <554:1 554:3>]
COMMENT: comment [b3DynamicBvh.cpp <562:1 562:3>]
COMMENT: comment [b3DynamicBvh.cpp <587:1 587:3>]
COMMENT: comment [b3DynamicBvh.cpp <618:1 618:3>]
COMMENT: comment [b3DynamicBvh.cpp <626:1 626:3>]
COMMENT: comment [b3DynamicBvh.cpp <635:1 635:3>]
COMMENT: comment [b3DynamicBvh.cpp <649:1 649:3>]
REFERENCE_MACRO_USAGE b3DynamicBvh.cpp -> B3_DBVT_ENABLE_BENCHMARK [b3DynamicBvh.cpp <650:5 650:28>]
SYMBOL_TYPEDEF b3NodeArray [b3DynamicBvh.cpp <20:45 20:55>]
REFERENCE_TYPE_USAGE b3NodeArray -> b3AlignedObjectArray<b3DbvtNode *> [b3DynamicBvh.cpp <20:9 20:28>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.cpp <20:30 20:39>]
SYMBOL_TYPEDEF b3ConstNodeArray [b3DynamicBvh.cpp <21:49 21:64>]
REFERENCE_TYPE_USAGE b3ConstNodeArray -> b3AlignedObjectArray<const b3DbvtNode *> [b3DynamicBvh.cpp <21:9 21:28>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<const b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.cpp <21:36 21:45>]
SYMBOL_STRUCT b3DbvtNodeEnumerator [b3DynamicBvh.cpp <24:1 <24:8 24:27> 28:1>]
SYMBOL_STRUCT b3DynamicBvh
REFERENCE_INHERITANCE b3DbvtNodeEnumerator -> b3DynamicBvh::ICollide [b3DynamicBvh.cpp <24:45 24:52>]
SYMBOL_FIELD public b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <26:19 26:23>]
REFERENCE_TYPE_USAGE b3ConstNodeArray b3DbvtNodeEnumerator::nodes -> b3ConstNodeArray [b3DynamicBvh.cpp <26:2 26:17>]
SYMBOL_METHOD public void b3DbvtNodeEnumerator::Process(const b3DbvtNode *) [b3DynamicBvh.cpp <27:2 <27:7 27:13> 27:58>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3DbvtNodeEnumerator::Process(const b3DbvtNode *) -> void [b3DynamicBvh.cpp <27:2 27:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<27:33> [b3DynamicBvh.cpp <27:33 27:33>]
REFERENCE_TYPE_USAGE void b3DbvtNodeEnumerator::Process(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <27:21 27:30>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &)
REFERENCE_CALL void b3DbvtNodeEnumerator::Process(const b3DbvtNode *) -> void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) [b3DynamicBvh.cpp <27:44 27:52>]
REFERENCE_USAGE void b3DbvtNodeEnumerator::Process(const b3DbvtNode *) -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <27:38 27:42>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<27:33> [b3DynamicBvh.cpp <27:54 27:54>]
SYMBOL_METHOD public void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator(const b3DbvtNodeEnumerator &) [b3DynamicBvh.cpp <24:8 24:27>]
SYMBOL_METHOD public void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator(b3DbvtNodeEnumerator &) [b3DynamicBvh.cpp <24:8 24:27>]
SYMBOL_METHOD public b3DbvtNodeEnumerator & b3DbvtNodeEnumerator::operator=(b3DbvtNodeEnumerator &) [b3DynamicBvh.cpp <24:8 24:27>]
SYMBOL_METHOD public void b3DbvtNodeEnumerator::~b3DbvtNodeEnumerator() [b3DynamicBvh.cpp <24:8 <24:8 24:27> 24:27>]
SYMBOL_METHOD public void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator() [b3DynamicBvh.cpp <24:8 <24:8 24:27> 24:27>]
SYMBOL_FUNCTION void b3DynamicBvh::ICollide::ICollide()
REFERENCE_CALL void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator() -> void b3DynamicBvh::ICollide::ICollide() [b3DynamicBvh.cpp <24:8 24:27>]
REFERENCE_USAGE void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator() -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <24:8 24:27>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray()
REFERENCE_CALL void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator() -> void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.cpp <24:8 24:27>]
SYMBOL_FUNCTION static int b3IndexOf(const b3DbvtNode *) [b3DynamicBvh.cpp <31:1 <31:29 31:37> 34:1>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static int b3IndexOf(const b3DbvtNode *) -> int [b3DynamicBvh.cpp <31:23 31:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<31:57> [b3DynamicBvh.cpp <31:57 31:60>]
REFERENCE_TYPE_USAGE static int b3IndexOf(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <31:45 31:54>]
REFERENCE_USAGE static int b3IndexOf(const b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <33:23 33:28>]
REFERENCE_USAGE static int b3IndexOf(const b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <33:23 33:28>]
REFERENCE_USAGE static int b3IndexOf(const b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <33:15 33:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<31:57> [b3DynamicBvh.cpp <33:9 33:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<31:57> [b3DynamicBvh.cpp <33:34 33:37>]
SYMBOL_FUNCTION static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) [b3DynamicBvh.cpp <37:1 <37:36 37:42> 48:1>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) -> b3DbvtVolume [b3DynamicBvh.cpp <37:23 37:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<37:65> [b3DynamicBvh.cpp <37:65 37:65>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) -> b3DbvtVolume [b3DynamicBvh.cpp <37:51 37:62>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<38:32> [b3DynamicBvh.cpp <38:32 38:32>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) -> b3DbvtVolume [b3DynamicBvh.cpp <38:18 38:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<41:30> [b3DynamicBvh.cpp <41:30 41:35>]
SYMBOL_BUILTIN_TYPE char
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) -> char [b3DynamicBvh.cpp <41:25 41:28>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) -> b3DbvtAabbMm [b3DynamicBvh.cpp <41:44 41:55>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<42:16> [b3DynamicBvh.cpp <42:16 42:18>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) -> b3DbvtVolume [b3DynamicBvh.cpp <42:2 42:13>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) -> b3DbvtVolume [b3DynamicBvh.cpp <42:22 42:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<41:30> [b3DynamicBvh.cpp <42:36 42:41>]
SYMBOL_FUNCTION void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) -> void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <46:2 46:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<37:65> [b3DynamicBvh.cpp <46:10 46:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<38:32> [b3DynamicBvh.cpp <46:12 46:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<42:16> [b3DynamicBvh.cpp <46:14 46:16>]
SYMBOL_FUNCTION void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) -> void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <47:12 47:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<42:16> [b3DynamicBvh.cpp <47:9 47:11>]
SYMBOL_FUNCTION static b3Scalar b3Size(const b3DbvtVolume &) [b3DynamicBvh.cpp <51:1 <51:33 51:38> 56:1>]
REFERENCE_TYPE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Scalar [b3DynamicBvh.cpp <51:23 51:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<51:60> [b3DynamicBvh.cpp <51:60 51:60>]
REFERENCE_TYPE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3DbvtVolume [b3DynamicBvh.cpp <51:46 51:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <53:18 53:22>]
REFERENCE_TYPE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3 [b3DynamicBvh.cpp <53:8 53:16>]
SYMBOL_FUNCTION b3Vector3 b3DbvtAabbMm::Lengths() const
REFERENCE_CALL static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3 b3DbvtAabbMm::Lengths() const [b3DynamicBvh.cpp <53:26 53:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<51:60> [b3DynamicBvh.cpp <53:24 53:24>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.cpp <54:16 54:16>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <54:16 54:16>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <54:16 54:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <54:10 54:14>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.cpp <54:24 54:24>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <54:24 54:24>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <54:24 54:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <54:18 54:22>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.cpp <54:32 54:32>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <54:32 54:32>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <54:32 54:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <54:26 54:30>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::x [b3DynamicBvh.cpp <55:9 55:9>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <55:9 55:9>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <55:9 55:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <55:3 55:7>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::y [b3DynamicBvh.cpp <55:17 55:17>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <55:17 55:17>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <55:17 55:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <55:11 55:15>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> float b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>)::z [b3DynamicBvh.cpp <55:25 55:25>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>)::anonymous struct (b3Vector3.h<99:4>) b3Vector3::anonymous union (b3Vector3.h<96:9>):: [b3DynamicBvh.cpp <55:25 55:25>]
REFERENCE_USAGE static b3Scalar b3Size(const b3DbvtVolume &) -> b3Vector3::anonymous union (b3Vector3.h<96:9>) b3Vector3:: [b3DynamicBvh.cpp <55:25 55:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<53:18> [b3DynamicBvh.cpp <55:19 55:23>]
SYMBOL_FUNCTION static void b3GetMaxDepth(const b3DbvtNode *, int, int &) [b3DynamicBvh.cpp <59:1 <59:18 59:30> 66:1>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> void [b3DynamicBvh.cpp <59:8 59:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:50> [b3DynamicBvh.cpp <59:50 59:53>]
REFERENCE_TYPE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> b3DbvtNode [b3DynamicBvh.cpp <59:38 59:47>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:59> [b3DynamicBvh.cpp <59:59 59:63>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> int [b3DynamicBvh.cpp <59:55 59:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:70> [b3DynamicBvh.cpp <59:70 59:77>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> int [b3DynamicBvh.cpp <59:65 59:67>]
SYMBOL_FUNCTION bool b3DbvtNode::isinternal() const
REFERENCE_CALL static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <61:11 61:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:50> [b3DynamicBvh.cpp <61:5 61:8>]
SYMBOL_FUNCTION static void b3GetMaxDepth(const b3DbvtNode *, int, int &)
REFERENCE_CALL static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> static void b3GetMaxDepth(const b3DbvtNode *, int, int &) [b3DynamicBvh.cpp <63:3 63:15>]
REFERENCE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <63:23 63:28>]
REFERENCE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <63:23 63:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:50> [b3DynamicBvh.cpp <63:17 63:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:59> [b3DynamicBvh.cpp <63:33 63:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:70> [b3DynamicBvh.cpp <63:41 63:48>]
SYMBOL_FUNCTION static void b3GetMaxDepth(const b3DbvtNode *, int, int &)
REFERENCE_CALL static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> static void b3GetMaxDepth(const b3DbvtNode *, int, int &) [b3DynamicBvh.cpp <64:3 64:15>]
REFERENCE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <64:23 64:28>]
REFERENCE_USAGE static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <64:23 64:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:50> [b3DynamicBvh.cpp <64:17 64:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:59> [b3DynamicBvh.cpp <64:33 64:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:70> [b3DynamicBvh.cpp <64:41 64:48>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:70> [b3DynamicBvh.cpp <65:9 65:16>]
SYMBOL_FUNCTION const int & b3Max<int>(const int &, const int &)
REFERENCE_CALL static void b3GetMaxDepth(const b3DbvtNode *, int, int &) -> const int & b3Max<int>(const int &, const int &) [b3DynamicBvh.cpp <65:18 65:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:70> [b3DynamicBvh.cpp <65:24 65:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<59:59> [b3DynamicBvh.cpp <65:33 65:37>]
SYMBOL_FUNCTION static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <69:1 <69:30 69:41> 74:1>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) -> void [b3DynamicBvh.cpp <69:23 69:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<69:58> [b3DynamicBvh.cpp <69:58 69:62>]
REFERENCE_TYPE_USAGE static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DynamicBvh [b3DynamicBvh.cpp <69:44 69:55>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<70:26> [b3DynamicBvh.cpp <70:26 70:29>]
REFERENCE_TYPE_USAGE static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <70:14 70:23>]
REFERENCE_USAGE static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <72:23 72:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<69:58> [b3DynamicBvh.cpp <72:16 72:20>]
REFERENCE_USAGE static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <73:9 73:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<69:58> [b3DynamicBvh.cpp <73:2 73:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<70:26> [b3DynamicBvh.cpp <73:16 73:19>]
SYMBOL_FUNCTION static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <77:1 <77:18 77:36> 87:1>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> void [b3DynamicBvh.cpp <77:8 77:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <77:53 77:57>]
REFERENCE_TYPE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DynamicBvh [b3DynamicBvh.cpp <77:39 77:50>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <78:27 78:30>]
REFERENCE_TYPE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <78:15 78:24>]
SYMBOL_FUNCTION bool b3DbvtNode::isleaf() const
REFERENCE_CALL static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> bool b3DbvtNode::isleaf() const [b3DynamicBvh.cpp <80:12 80:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <80:6 80:9>]
SYMBOL_FUNCTION static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *)
REFERENCE_CALL static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <82:3 82:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <82:23 82:27>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <82:35 82:40>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <82:35 82:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <82:29 82:32>]
SYMBOL_FUNCTION static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *)
REFERENCE_CALL static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <83:3 83:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <83:23 83:27>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <83:35 83:40>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <83:35 83:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <83:29 83:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <85:5 85:8>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <85:18 85:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <85:11 85:15>]
REFERENCE_USAGE static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <85:33 85:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <85:26 85:30>]
SYMBOL_FUNCTION static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *)
REFERENCE_CALL static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) -> static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <86:2 86:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<77:53> [b3DynamicBvh.cpp <86:15 86:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<78:27> [b3DynamicBvh.cpp <86:21 86:24>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) [b3DynamicBvh.cpp <90:1 <90:35 90:46> 103:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode [b3DynamicBvh.cpp <90:23 90:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<90:63> [b3DynamicBvh.cpp <90:63 90:67>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DynamicBvh [b3DynamicBvh.cpp <90:49 90:60>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<91:26> [b3DynamicBvh.cpp <91:26 91:31>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode [b3DynamicBvh.cpp <91:14 91:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<92:20> [b3DynamicBvh.cpp <92:20 92:23>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> void [b3DynamicBvh.cpp <92:14 92:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <94:14 94:17>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode [b3DynamicBvh.cpp <94:2 94:11>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <95:12 95:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<90:63> [b3DynamicBvh.cpp <95:5 95:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <96:4 96:7>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <96:16 96:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<90:63> [b3DynamicBvh.cpp <96:9 96:13>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <96:30 96:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<90:63> [b3DynamicBvh.cpp <96:23 96:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <98:4 98:7>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode [b3DynamicBvh.cpp <98:52 98:61>]
SYMBOL_FUNCTION void b3DbvtNode::b3DbvtNode()
REFERENCE_CALL static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> void b3DbvtNode::b3DbvtNode() [b3DynamicBvh.cpp <98:52 98:61>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode [b3DynamicBvh.cpp <98:35 98:44>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <99:8 99:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <99:2 99:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<91:26> [b3DynamicBvh.cpp <99:17 99:22>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> void * b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::data [b3DynamicBvh.cpp <100:8 100:11>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <100:8 100:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <100:2 100:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<92:20> [b3DynamicBvh.cpp <100:16 100:19>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <101:8 101:13>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <101:8 101:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <101:2 101:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<94:14> [b3DynamicBvh.cpp <102:9 102:12>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) [b3DynamicBvh.cpp <106:1 <106:35 106:46> 114:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) -> b3DbvtNode [b3DynamicBvh.cpp <106:23 106:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<106:63> [b3DynamicBvh.cpp <106:63 106:67>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) -> b3DynamicBvh [b3DynamicBvh.cpp <106:49 106:60>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<107:26> [b3DynamicBvh.cpp <107:26 107:31>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) -> b3DbvtNode [b3DynamicBvh.cpp <107:14 107:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<108:34> [b3DynamicBvh.cpp <108:34 108:39>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) -> b3DbvtVolume [b3DynamicBvh.cpp <108:20 108:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<109:20> [b3DynamicBvh.cpp <109:20 109:23>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) -> void [b3DynamicBvh.cpp <109:14 109:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<111:14> [b3DynamicBvh.cpp <111:14 111:17>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) -> b3DbvtNode [b3DynamicBvh.cpp <111:2 111:11>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *)
REFERENCE_CALL static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) [b3DynamicBvh.cpp <111:19 111:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<106:63> [b3DynamicBvh.cpp <111:32 111:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<107:26> [b3DynamicBvh.cpp <111:38 111:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<109:20> [b3DynamicBvh.cpp <111:45 111:48>]
SYMBOL_FUNCTION b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) -> b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <112:14 112:14>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <112:8 112:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<111:14> [b3DynamicBvh.cpp <112:2 112:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<108:34> [b3DynamicBvh.cpp <112:15 112:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<111:14> [b3DynamicBvh.cpp <113:9 113:12>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) [b3DynamicBvh.cpp <117:1 <117:35 117:46> 126:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) -> b3DbvtNode [b3DynamicBvh.cpp <117:23 117:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<117:63> [b3DynamicBvh.cpp <117:63 117:67>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) -> b3DynamicBvh [b3DynamicBvh.cpp <117:49 117:60>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<118:26> [b3DynamicBvh.cpp <118:26 118:31>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) -> b3DbvtNode [b3DynamicBvh.cpp <118:14 118:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<119:34> [b3DynamicBvh.cpp <119:34 119:40>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) -> b3DbvtVolume [b3DynamicBvh.cpp <119:20 119:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<120:34> [b3DynamicBvh.cpp <120:34 120:40>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) -> b3DbvtVolume [b3DynamicBvh.cpp <120:20 120:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<121:20> [b3DynamicBvh.cpp <121:20 121:23>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) -> void [b3DynamicBvh.cpp <121:14 121:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<123:14> [b3DynamicBvh.cpp <123:14 123:17>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) -> b3DbvtNode [b3DynamicBvh.cpp <123:2 123:11>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *)
REFERENCE_CALL static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, void *) [b3DynamicBvh.cpp <123:19 123:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<117:63> [b3DynamicBvh.cpp <123:32 123:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<118:26> [b3DynamicBvh.cpp <123:38 123:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<121:20> [b3DynamicBvh.cpp <123:45 123:48>]
SYMBOL_FUNCTION void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) -> void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <124:2 124:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<119:34> [b3DynamicBvh.cpp <124:10 124:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<120:34> [b3DynamicBvh.cpp <124:18 124:24>]
REFERENCE_USAGE static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <124:32 124:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<123:14> [b3DynamicBvh.cpp <124:26 124:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<123:14> [b3DynamicBvh.cpp <125:9 125:12>]
SYMBOL_FUNCTION static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) [b3DynamicBvh.cpp <129:1 <129:18 129:29> 170:1>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> void [b3DynamicBvh.cpp <129:8 129:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<129:46> [b3DynamicBvh.cpp <129:46 129:50>]
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DynamicBvh [b3DynamicBvh.cpp <129:32 129:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <130:26 130:29>]
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <130:14 130:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <131:26 131:29>]
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <131:14 131:23>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <133:13 133:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<129:46> [b3DynamicBvh.cpp <133:6 133:10>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <135:10 135:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<129:46> [b3DynamicBvh.cpp <135:3 135:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <135:19 135:22>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <136:9 136:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <136:3 136:6>]
SYMBOL_FUNCTION bool b3DbvtNode::isleaf() const
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> bool b3DbvtNode::isleaf() const [b3DynamicBvh.cpp <140:13 140:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <140:7 140:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <143:5 143:8>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <143:16 143:21>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <143:16 143:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <143:10 143:13>]
SYMBOL_FUNCTION int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &)
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> int b3Select(const b3DbvtAabbMm &, const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.cpp <143:23 143:30>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <143:39 143:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <143:33 143:36>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <144:23 144:28>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <144:12 144:17>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <144:12 144:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <144:6 144:9>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <145:23 145:28>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <145:12 145:17>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <145:12 145:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <145:6 145:9>]
SYMBOL_FUNCTION bool b3DbvtNode::isleaf() const
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> bool b3DbvtNode::isleaf() const [b3DynamicBvh.cpp <146:19 146:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <146:13 146:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <148:15 148:18>]
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <148:3 148:12>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <148:26 148:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <148:20 148:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <149:15 149:18>]
REFERENCE_TYPE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <149:3 149:12>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *)
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) [b3DynamicBvh.cpp <149:20 149:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<129:46> [b3DynamicBvh.cpp <149:33 149:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <149:39 149:42>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <149:50 149:55>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <149:44 149:47>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <149:63 149:68>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <149:57 149:60>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <150:6 150:9>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <152:10 152:15>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <152:10 152:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <152:4 152:7>]
SYMBOL_FUNCTION static int b3IndexOf(const b3DbvtNode *)
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> static int b3IndexOf(const b3DbvtNode *) [b3DynamicBvh.cpp <152:17 152:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <152:27 152:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <152:36 152:39>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <153:10 153:15>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <153:10 153:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <153:4 153:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <153:25 153:28>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <153:36 153:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <153:30 153:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <153:43 153:46>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <154:10 154:15>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <154:10 154:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <154:4 154:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <154:25 154:28>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <154:36 154:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <154:30 154:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <154:43 154:46>]
SYMBOL_FUNCTION bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const [b3DynamicBvh.cpp <156:22 156:28>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <156:15 156:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <156:9 156:12>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <156:36 156:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <156:30 156:33>]
SYMBOL_FUNCTION void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &)
REFERENCE_CALL static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <157:6 157:12>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <157:31 157:36>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <157:20 157:25>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <157:20 157:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <157:14 157:17>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <157:55 157:60>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <157:44 157:49>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <157:44 157:49>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <157:38 157:41>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <157:68 157:73>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <157:62 157:65>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <160:5 160:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <160:10 160:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<148:15> [b3DynamicBvh.cpp <161:16 161:19>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <161:27 161:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <161:21 161:24>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <165:10 165:15>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <165:10 165:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <165:4 165:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <165:22 165:25>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <165:33 165:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<130:26> [b3DynamicBvh.cpp <165:27 165:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <165:40 165:43>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <166:10 166:15>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <166:10 166:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <166:4 166:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <166:22 166:25>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <166:33 166:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<131:26> [b3DynamicBvh.cpp <166:27 166:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <166:40 166:43>]
REFERENCE_USAGE static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <167:11 167:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<129:46> [b3DynamicBvh.cpp <167:4 167:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<149:15> [b3DynamicBvh.cpp <167:20 167:23>]
SYMBOL_FUNCTION static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <173:1 <173:23 173:34> 210:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <173:8 173:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <173:51 173:55>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DynamicBvh [b3DynamicBvh.cpp <173:37 173:48>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<174:26> [b3DynamicBvh.cpp <174:26 174:29>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <174:14 174:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<174:26> [b3DynamicBvh.cpp <176:5 176:8>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <176:18 176:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <176:11 176:15>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <178:10 178:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <178:3 178:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <183:15 183:20>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <183:3 183:12>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <183:28 183:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<174:26> [b3DynamicBvh.cpp <183:22 183:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <184:15 184:18>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <184:3 184:12>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <184:28 184:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <184:20 184:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<185:15> [b3DynamicBvh.cpp <185:15 185:21>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <185:3 185:12>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <185:31 185:36>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <185:31 185:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <185:23 185:28>]
SYMBOL_FUNCTION static int b3IndexOf(const b3DbvtNode *)
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> static int b3IndexOf(const b3DbvtNode *) [b3DynamicBvh.cpp <185:40 185:48>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<174:26> [b3DynamicBvh.cpp <185:50 185:53>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <186:6 186:9>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <188:10 188:15>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <188:10 188:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <188:4 188:7>]
SYMBOL_FUNCTION static int b3IndexOf(const b3DbvtNode *)
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> static int b3IndexOf(const b3DbvtNode *) [b3DynamicBvh.cpp <188:17 188:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <188:27 188:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<185:15> [b3DynamicBvh.cpp <188:36 188:42>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <189:13 189:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<185:15> [b3DynamicBvh.cpp <189:4 189:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <189:20 189:23>]
SYMBOL_FUNCTION static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *)
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <190:4 190:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <190:17 190:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <190:23 190:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <191:10 191:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<193:24> [b3DynamicBvh.cpp <193:24 193:25>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtVolume [b3DynamicBvh.cpp <193:11 193:22>]
SYMBOL_FUNCTION void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <193:33 193:38>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <193:33 193:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <193:27 193:30>]
SYMBOL_FUNCTION void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <194:5 194:11>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <194:30 194:35>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <194:19 194:24>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <194:19 194:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <194:13 194:16>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <194:54 194:59>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <194:43 194:48>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <194:43 194:48>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <194:37 194:40>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <194:67 194:72>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <194:61 194:64>]
SYMBOL_FUNCTION bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> bool b3NotEqual(const b3DbvtAabbMm &, const b3DbvtAabbMm &) [b3DynamicBvh.cpp <195:8 195:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<193:24> [b3DynamicBvh.cpp <195:19 195:20>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <195:28 195:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <195:22 195:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <197:6 197:9>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <197:17 197:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <197:11 197:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <200:11 200:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<184:15> [b3DynamicBvh.cpp <200:16 200:19>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <200:28 200:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <200:21 200:25>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <204:11 204:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <204:4 204:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<185:15> [b3DynamicBvh.cpp <204:18 204:24>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <205:13 205:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<185:15> [b3DynamicBvh.cpp <205:4 205:10>]
SYMBOL_FUNCTION static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *)
REFERENCE_CALL static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <206:4 206:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <206:17 206:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<183:15> [b3DynamicBvh.cpp <206:23 206:28>]
REFERENCE_USAGE static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <207:18 207:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<173:51> [b3DynamicBvh.cpp <207:11 207:15>]
SYMBOL_FUNCTION static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) [b3DynamicBvh.cpp <213:1 <213:18 213:30> 228:1>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> void [b3DynamicBvh.cpp <213:8 213:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<213:46> [b3DynamicBvh.cpp <213:46 213:50>]
REFERENCE_TYPE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> b3DynamicBvh [b3DynamicBvh.cpp <213:32 213:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <214:24 214:27>]
REFERENCE_TYPE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> b3DbvtNode [b3DynamicBvh.cpp <214:12 214:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<215:25> [b3DynamicBvh.cpp <215:25 215:30>]
REFERENCE_TYPE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> b3NodeArray [b3DynamicBvh.cpp <215:12 215:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<216:16> [b3DynamicBvh.cpp <216:16 216:20>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> int [b3DynamicBvh.cpp <216:12 216:14>]
SYMBOL_FUNCTION bool b3DbvtNode::isinternal() const
REFERENCE_CALL static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <218:11 218:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <218:5 218:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<216:16> [b3DynamicBvh.cpp <218:25 218:29>]
SYMBOL_FUNCTION static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int)
REFERENCE_CALL static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) [b3DynamicBvh.cpp <220:3 220:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<213:46> [b3DynamicBvh.cpp <220:17 220:21>]
REFERENCE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <220:29 220:34>]
REFERENCE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <220:29 220:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <220:23 220:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<215:25> [b3DynamicBvh.cpp <220:39 220:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<216:16> [b3DynamicBvh.cpp <220:46 220:50>]
SYMBOL_FUNCTION static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int)
REFERENCE_CALL static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) [b3DynamicBvh.cpp <221:3 221:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<213:46> [b3DynamicBvh.cpp <221:17 221:21>]
REFERENCE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <221:29 221:34>]
REFERENCE_USAGE static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <221:29 221:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <221:23 221:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<215:25> [b3DynamicBvh.cpp <221:39 221:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<216:16> [b3DynamicBvh.cpp <221:46 221:50>]
SYMBOL_FUNCTION static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *)
REFERENCE_CALL static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <222:3 222:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<213:46> [b3DynamicBvh.cpp <222:16 222:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <222:22 222:25>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &)
REFERENCE_CALL static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) -> void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) [b3DynamicBvh.cpp <226:10 226:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<215:25> [b3DynamicBvh.cpp <226:3 226:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<214:24> [b3DynamicBvh.cpp <226:20 226:23>]
SYMBOL_FUNCTION static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.cpp <231:1 <231:18 231:24> 246:1>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> void [b3DynamicBvh.cpp <231:8 231:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<231:46> [b3DynamicBvh.cpp <231:46 231:51>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3NodeArray [b3DynamicBvh.cpp <231:33 231:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<232:25> [b3DynamicBvh.cpp <232:25 232:28>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3NodeArray [b3DynamicBvh.cpp <232:12 232:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<233:25> [b3DynamicBvh.cpp <233:25 233:29>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3NodeArray [b3DynamicBvh.cpp <233:12 233:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<234:29> [b3DynamicBvh.cpp <234:29 234:31>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.cpp <234:18 234:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<235:29> [b3DynamicBvh.cpp <235:29 235:32>]
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.cpp <235:18 235:26>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &)
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) [b3DynamicBvh.cpp <237:7 237:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<232:25> [b3DynamicBvh.cpp <237:2 237:5>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &)
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> void b3AlignedObjectArray<b3DbvtNode *>::resize(int, b3DbvtNode * const &) [b3DynamicBvh.cpp <238:8 238:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<233:25> [b3DynamicBvh.cpp <238:2 238:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <239:10 239:10>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> int [b3DynamicBvh.cpp <239:6 239:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:14> [b3DynamicBvh.cpp <239:14 239:15>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> int [b3DynamicBvh.cpp <239:6 239:8>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <239:24 239:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<231:46> [b3DynamicBvh.cpp <239:17 239:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <239:31 239:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:14> [b3DynamicBvh.cpp <239:33 239:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <239:38 239:38>]
SYMBOL_FUNCTION b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.cpp <241:6 241:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<235:29> [b3DynamicBvh.cpp <241:12 241:15>]
SYMBOL_FUNCTION b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.cpp <241:43 241:43>]
SYMBOL_FUNCTION b3Vector3 b3DbvtAabbMm::Center() const
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3Vector3 b3DbvtAabbMm::Center() const [b3DynamicBvh.cpp <241:35 241:40>]
REFERENCE_USAGE static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <241:28 241:33>]
SYMBOL_FUNCTION b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const [b3DynamicBvh.cpp <241:23 241:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<231:46> [b3DynamicBvh.cpp <241:17 241:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <241:24 241:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<234:29> [b3DynamicBvh.cpp <241:44 241:46>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &)
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) [b3DynamicBvh.cpp <242:9 242:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<232:25> [b3DynamicBvh.cpp <242:4 242:7>]
SYMBOL_FUNCTION b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const [b3DynamicBvh.cpp <242:25 242:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<231:46> [b3DynamicBvh.cpp <242:19 242:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <242:26 242:26>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &)
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) [b3DynamicBvh.cpp <244:10 244:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<233:25> [b3DynamicBvh.cpp <244:4 244:8>]
SYMBOL_FUNCTION b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const
REFERENCE_CALL static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) -> b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const [b3DynamicBvh.cpp <244:26 244:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<231:46> [b3DynamicBvh.cpp <244:20 244:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<239:10> [b3DynamicBvh.cpp <244:27 244:27>]
SYMBOL_FUNCTION static b3DbvtVolume b3Bounds(const b3NodeArray &) [b3DynamicBvh.cpp <249:1 <249:24 249:31> 263:1>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) -> b3DbvtVolume [b3DynamicBvh.cpp <249:8 249:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<249:53> [b3DynamicBvh.cpp <249:53 249:58>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) -> b3NodeArray [b3DynamicBvh.cpp <249:40 249:50>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<252:30> [b3DynamicBvh.cpp <252:30 252:35>]
SYMBOL_BUILTIN_TYPE char
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) -> char [b3DynamicBvh.cpp <252:25 252:28>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) -> b3DbvtVolume [b3DynamicBvh.cpp <252:44 252:55>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<253:16> [b3DynamicBvh.cpp <253:16 253:21>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) -> b3DbvtVolume [b3DynamicBvh.cpp <253:2 253:13>]
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) -> b3DbvtVolume [b3DynamicBvh.cpp <253:25 253:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<252:30> [b3DynamicBvh.cpp <253:39 253:44>]
SYMBOL_FUNCTION b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) -> b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <254:8 254:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<253:16> [b3DynamicBvh.cpp <254:2 254:7>]
REFERENCE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <254:20 254:25>]
SYMBOL_FUNCTION b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) -> b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const [b3DynamicBvh.cpp <254:15 254:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<249:53> [b3DynamicBvh.cpp <254:9 254:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:10> [b3DynamicBvh.cpp <258:10 258:10>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) -> int [b3DynamicBvh.cpp <258:6 258:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:14> [b3DynamicBvh.cpp <258:14 258:15>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) -> int [b3DynamicBvh.cpp <258:6 258:8>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <258:24 258:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<249:53> [b3DynamicBvh.cpp <258:17 258:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:10> [b3DynamicBvh.cpp <258:31 258:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:14> [b3DynamicBvh.cpp <258:33 258:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:10> [b3DynamicBvh.cpp <258:38 258:38>]
SYMBOL_FUNCTION void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) -> void b3Merge(const b3DbvtAabbMm &, const b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <260:3 260:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<253:16> [b3DynamicBvh.cpp <260:11 260:16>]
REFERENCE_USAGE static b3DbvtVolume b3Bounds(const b3NodeArray &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <260:29 260:34>]
SYMBOL_FUNCTION b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) -> b3DbvtNode * const & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) const [b3DynamicBvh.cpp <260:24 260:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<249:53> [b3DynamicBvh.cpp <260:18 260:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<258:10> [b3DynamicBvh.cpp <260:25 260:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<253:16> [b3DynamicBvh.cpp <260:36 260:41>]
SYMBOL_FUNCTION void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtVolume b3Bounds(const b3NodeArray &) -> void b3DbvtAabbMm::b3DbvtAabbMm(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <262:15 262:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<253:16> [b3DynamicBvh.cpp <262:9 262:14>]
SYMBOL_FUNCTION static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) [b3DynamicBvh.cpp <266:1 <266:18 266:27> 296:1>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> void [b3DynamicBvh.cpp <266:8 266:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<266:44> [b3DynamicBvh.cpp <266:44 266:48>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DynamicBvh [b3DynamicBvh.cpp <266:30 266:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <267:25 267:30>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3NodeArray [b3DynamicBvh.cpp <267:12 267:22>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <269:15 269:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <269:8 269:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<271:12> [b3DynamicBvh.cpp <271:12 271:18>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3Scalar [b3DynamicBvh.cpp <271:3 271:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <272:9 272:14>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> int [b3DynamicBvh.cpp <272:3 272:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <273:11 273:11>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> int [b3DynamicBvh.cpp <273:7 273:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <273:15 273:15>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <273:24 273:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <273:17 273:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <273:33 273:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<275:12> [b3DynamicBvh.cpp <275:12 275:12>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> int [b3DynamicBvh.cpp <275:8 275:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <275:14 275:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<275:12> [b3DynamicBvh.cpp <275:18 275:18>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <275:27 275:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <275:20 275:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<275:12> [b3DynamicBvh.cpp <275:36 275:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<277:20> [b3DynamicBvh.cpp <277:20 277:21>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3Scalar [b3DynamicBvh.cpp <277:11 277:18>]
SYMBOL_FUNCTION static b3Scalar b3Size(const b3DbvtVolume &)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> static b3Scalar b3Size(const b3DbvtVolume &) [b3DynamicBvh.cpp <277:23 277:28>]
SYMBOL_FUNCTION static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> static b3DbvtVolume b3Merge(const b3DbvtVolume &, const b3DbvtVolume &) [b3DynamicBvh.cpp <277:30 277:36>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <277:49 277:54>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <277:44 277:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <277:38 277:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <277:45 277:45>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <277:67 277:72>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <277:62 277:62>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <277:56 277:61>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<275:12> [b3DynamicBvh.cpp <277:63 277:63>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<277:20> [b3DynamicBvh.cpp <278:8 278:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<271:12> [b3DynamicBvh.cpp <278:11 278:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<271:12> [b3DynamicBvh.cpp <280:6 280:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<277:20> [b3DynamicBvh.cpp <280:17 280:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <281:6 281:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<273:11> [b3DynamicBvh.cpp <281:18 281:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <282:6 282:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<275:12> [b3DynamicBvh.cpp <282:18 282:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <286:15 286:15>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode [b3DynamicBvh.cpp <286:3 286:12>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <286:28 286:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <286:22 286:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <286:29 286:34>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <286:46 286:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <286:40 286:45>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <286:47 286:52>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <286:28 286:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <286:22 286:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <286:29 286:34>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <286:46 286:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <286:40 286:45>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <286:47 286:52>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <287:15 287:15>]
REFERENCE_TYPE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode [b3DynamicBvh.cpp <287:3 287:12>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, const b3DbvtVolume &, void *) [b3DynamicBvh.cpp <287:19 287:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<266:44> [b3DynamicBvh.cpp <287:32 287:36>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <287:46 287:51>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <287:40 287:40>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <287:59 287:64>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <287:53 287:53>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <288:6 288:11>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <288:6 288:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <288:3 288:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <288:19 288:19>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <289:6 289:11>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <289:6 289:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <289:3 289:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <289:19 289:19>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <290:9 290:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <290:3 290:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <290:19 290:19>]
REFERENCE_USAGE static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <291:9 291:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<286:15> [b3DynamicBvh.cpp <291:3 291:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <291:19 291:19>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <292:9 292:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <292:3 292:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <292:10 292:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<287:15> [b3DynamicBvh.cpp <292:23 292:23>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int)
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> void b3AlignedObjectArray<b3DbvtNode *>::swap(int, int) [b3DynamicBvh.cpp <293:10 293:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <293:3 293:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<272:9> [b3DynamicBvh.cpp <293:15 293:20>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <293:32 293:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <293:25 293:30>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::pop_back()
REFERENCE_CALL static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) -> void b3AlignedObjectArray<b3DbvtNode *>::pop_back() [b3DynamicBvh.cpp <294:10 294:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<267:25> [b3DynamicBvh.cpp <294:3 294:8>]
SYMBOL_FUNCTION static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) [b3DynamicBvh.cpp <299:1 <299:22 299:30> 366:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode [b3DynamicBvh.cpp <299:8 299:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<299:46> [b3DynamicBvh.cpp <299:46 299:50>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DynamicBvh [b3DynamicBvh.cpp <299:32 299:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <300:23 300:28>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3NodeArray [b3DynamicBvh.cpp <300:10 300:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<301:14> [b3DynamicBvh.cpp <301:14 301:24>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int [b3DynamicBvh.cpp <301:10 301:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<303:25> [b3DynamicBvh.cpp <303:25 303:28>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 [b3DynamicBvh.cpp <303:15 303:23>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <303:33 303:45>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <304:3 304:15>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <305:3 305:15>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <303:33 303:45>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <304:3 304:15>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <305:3 305:15>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <306:12 306:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <306:5 306:10>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <308:13 308:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <308:6 308:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<301:14> [b3DynamicBvh.cpp <308:20 308:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<310:23> [b3DynamicBvh.cpp <310:23 310:25>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtVolume [b3DynamicBvh.cpp <310:10 310:21>]
SYMBOL_FUNCTION static b3DbvtVolume b3Bounds(const b3NodeArray &)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> static b3DbvtVolume b3Bounds(const b3NodeArray &) [b3DynamicBvh.cpp <310:27 310:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <310:36 310:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<311:22> [b3DynamicBvh.cpp <311:22 311:24>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 [b3DynamicBvh.cpp <311:10 311:18>]
SYMBOL_FUNCTION b3Vector3 b3DbvtAabbMm::Center() const
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 b3DbvtAabbMm::Center() const [b3DynamicBvh.cpp <311:30 311:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<310:23> [b3DynamicBvh.cpp <311:26 311:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <312:19 312:22>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3NodeArray [b3DynamicBvh.cpp <312:4 312:14>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray()
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.cpp <312:19 312:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <313:13 313:20>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int [b3DynamicBvh.cpp <313:4 313:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<314:13> [b3DynamicBvh.cpp <314:13 314:20>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int [b3DynamicBvh.cpp <314:4 314:6>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <314:29 314:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <314:22 314:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <315:13 315:22>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int [b3DynamicBvh.cpp <315:4 315:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <316:8 316:8>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int [b3DynamicBvh.cpp <316:4 316:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <317:9 317:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <317:13 317:13>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <317:22 317:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <317:15 317:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <317:31 317:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<319:21> [b3DynamicBvh.cpp <319:21 319:21>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 [b3DynamicBvh.cpp <319:11 319:19>]
SYMBOL_FUNCTION b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 operator-(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.cpp <319:49 319:49>]
SYMBOL_FUNCTION b3Vector3 b3DbvtAabbMm::Center() const
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Vector3 b3DbvtAabbMm::Center() const [b3DynamicBvh.cpp <319:41 319:46>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <319:34 319:39>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <319:29 319:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <319:23 319:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <319:30 319:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<311:22> [b3DynamicBvh.cpp <319:50 319:52>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<320:13> [b3DynamicBvh.cpp <320:13 320:13>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int [b3DynamicBvh.cpp <320:9 320:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<320:13> [b3DynamicBvh.cpp <320:17 320:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<320:13> [b3DynamicBvh.cpp <320:23 320:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <322:8 322:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<320:13> [b3DynamicBvh.cpp <322:19 322:19>]
SYMBOL_FUNCTION b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Scalar b3Dot(const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.cpp <322:22 322:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<319:21> [b3DynamicBvh.cpp <322:28 322:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<303:25> [b3DynamicBvh.cpp <322:30 322:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<320:13> [b3DynamicBvh.cpp <322:35 322:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <325:9 325:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <325:13 325:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <325:19 325:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <327:9 327:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <327:20 327:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <327:31 327:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <327:42 327:42>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<329:16> [b3DynamicBvh.cpp <329:16 329:19>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int [b3DynamicBvh.cpp <329:12 329:14>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int [b3DynamicBvh.cpp <329:22 329:24>]
SYMBOL_FUNCTION b3Scalar b3Fabs(b3Scalar)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Scalar b3Fabs(b3Scalar) [b3DynamicBvh.cpp <329:26 329:31>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3Scalar [b3DynamicBvh.cpp <329:33 329:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <329:42 329:51>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <329:53 329:53>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <329:59 329:68>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <329:70 329:70>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<329:16> [b3DynamicBvh.cpp <330:9 330:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<314:13> [b3DynamicBvh.cpp <330:14 330:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <332:7 332:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<316:8> [b3DynamicBvh.cpp <332:16 332:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<314:13> [b3DynamicBvh.cpp <333:7 333:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<329:16> [b3DynamicBvh.cpp <333:16 333:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <337:7 337:14>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::reserve(int)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <339:13 339:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <339:5 339:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <339:21 339:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <339:32 339:39>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::reserve(int)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <340:13 340:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <340:5 340:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<315:13> [b3DynamicBvh.cpp <340:21 340:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <340:32 340:39>]
SYMBOL_FUNCTION static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> static void b3Split(const b3NodeArray &, b3NodeArray &, b3NodeArray &, const b3Vector3 &, const b3Vector3 &) [b3DynamicBvh.cpp <341:5 341:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <341:13 341:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <341:20 341:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <341:28 341:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<311:22> [b3DynamicBvh.cpp <341:36 341:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<303:25> [b3DynamicBvh.cpp <341:40 341:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<313:13> [b3DynamicBvh.cpp <341:45 341:52>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::reserve(int)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <345:13 345:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <345:5 345:8>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <345:28 345:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <345:21 345:26>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::reserve(int)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <346:13 346:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <346:5 346:8>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <346:28 346:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <346:21 346:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:13> [b3DynamicBvh.cpp <347:13 347:13>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int [b3DynamicBvh.cpp <347:9 347:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:17> [b3DynamicBvh.cpp <347:17 347:18>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int [b3DynamicBvh.cpp <347:9 347:11>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DbvtNode *>::size() const
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> int b3AlignedObjectArray<b3DbvtNode *>::size() const [b3DynamicBvh.cpp <347:27 347:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <347:20 347:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:13> [b3DynamicBvh.cpp <347:34 347:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:17> [b3DynamicBvh.cpp <347:36 347:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:13> [b3DynamicBvh.cpp <347:41 347:41>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> void b3AlignedObjectArray<b3DbvtNode *>::push_back(b3DbvtNode * const &) [b3DynamicBvh.cpp <349:16 349:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <349:6 349:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:13> [b3DynamicBvh.cpp <349:11 349:11>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <349:32 349:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <349:26 349:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<347:13> [b3DynamicBvh.cpp <349:33 349:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <352:16 352:19>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode [b3DynamicBvh.cpp <352:4 352:13>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) [b3DynamicBvh.cpp <352:21 352:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<299:46> [b3DynamicBvh.cpp <352:34 352:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<310:23> [b3DynamicBvh.cpp <352:42 352:44>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <353:10 353:15>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <353:10 353:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <353:4 353:7>]
SYMBOL_FUNCTION static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) [b3DynamicBvh.cpp <353:20 353:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<299:46> [b3DynamicBvh.cpp <353:30 353:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <353:36 353:39>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<301:14> [b3DynamicBvh.cpp <353:44 353:54>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <354:10 354:15>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <354:10 354:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <354:4 354:7>]
SYMBOL_FUNCTION static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) [b3DynamicBvh.cpp <354:20 354:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<299:46> [b3DynamicBvh.cpp <354:30 354:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<312:19> [b3DynamicBvh.cpp <354:36 354:39>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<301:14> [b3DynamicBvh.cpp <354:44 354:54>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <355:21 355:26>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <355:10 355:15>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <355:10 355:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <355:4 355:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <355:28 355:31>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <356:21 356:26>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <356:10 356:15>]
REFERENCE_USAGE static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <356:10 356:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <356:4 356:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <356:28 356:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<352:16> [b3DynamicBvh.cpp <357:11 357:14>]
SYMBOL_FUNCTION static void b3BottomUp(b3DynamicBvh *, b3NodeArray &)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) [b3DynamicBvh.cpp <361:4 361:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<299:46> [b3DynamicBvh.cpp <361:15 361:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <361:21 361:26>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <362:17 362:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <362:11 362:16>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <365:15 365:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<300:23> [b3DynamicBvh.cpp <365:9 365:14>]
SYMBOL_FUNCTION static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) [b3DynamicBvh.cpp <369:1 <369:35 369:40> 394:1>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode [b3DynamicBvh.cpp <369:23 369:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <369:54 369:54>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode [b3DynamicBvh.cpp <369:42 369:51>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:69> [b3DynamicBvh.cpp <369:69 369:69>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode [b3DynamicBvh.cpp <369:56 369:65>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <371:14 371:14>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode [b3DynamicBvh.cpp <371:2 371:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <371:19 371:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <371:16 371:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <373:5 373:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <373:7 373:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<375:14> [b3DynamicBvh.cpp <375:14 375:14>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> int [b3DynamicBvh.cpp <375:9 375:11>]
SYMBOL_FUNCTION static int b3IndexOf(const b3DbvtNode *)
REFERENCE_CALL static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> static int b3IndexOf(const b3DbvtNode *) [b3DynamicBvh.cpp <375:16 375:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <375:26 375:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<376:14> [b3DynamicBvh.cpp <376:14 376:14>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> int [b3DynamicBvh.cpp <376:9 376:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<375:14> [b3DynamicBvh.cpp <376:18 376:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<377:15> [b3DynamicBvh.cpp <377:15 377:15>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode [b3DynamicBvh.cpp <377:3 377:12>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <377:20 377:25>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <377:20 377:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <377:17 377:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<376:14> [b3DynamicBvh.cpp <377:27 377:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<378:15> [b3DynamicBvh.cpp <378:15 378:15>]
REFERENCE_TYPE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode [b3DynamicBvh.cpp <378:3 378:12>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <378:20 378:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <378:17 378:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<378:15> [b3DynamicBvh.cpp <380:6 380:6>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <380:12 380:17>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <380:12 380:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<378:15> [b3DynamicBvh.cpp <380:9 380:9>]
SYMBOL_FUNCTION static int b3IndexOf(const b3DbvtNode *)
REFERENCE_CALL static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> static int b3IndexOf(const b3DbvtNode *) [b3DynamicBvh.cpp <380:19 380:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <380:29 380:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <380:33 380:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:69> [b3DynamicBvh.cpp <380:41 380:41>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <380:43 380:43>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <381:6 381:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<377:15> [b3DynamicBvh.cpp <381:3 381:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <381:13 381:13>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <382:6 382:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <382:3 382:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <382:13 382:13>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <383:6 383:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <383:3 383:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<378:15> [b3DynamicBvh.cpp <383:13 383:13>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <384:6 384:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <384:6 384:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <384:3 384:3>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <384:19 384:24>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <384:19 384:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <384:16 384:16>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <385:6 385:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <385:6 385:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <385:3 385:3>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <385:19 385:24>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <385:19 385:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <385:16 385:16>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <386:17 386:22>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <386:6 386:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <386:6 386:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <386:3 386:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <386:24 386:24>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <387:17 387:22>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <387:6 387:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <387:6 387:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <387:3 387:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <387:24 387:24>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <388:6 388:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <388:6 388:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <388:3 388:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<375:14> [b3DynamicBvh.cpp <388:13 388:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <388:16 388:16>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <389:6 389:11>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <389:6 389:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <389:3 389:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<376:14> [b3DynamicBvh.cpp <389:13 389:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<377:15> [b3DynamicBvh.cpp <389:16 389:16>]
SYMBOL_FUNCTION void b3Swap<b3DbvtAabbMm>(b3DbvtAabbMm &, b3DbvtAabbMm &)
REFERENCE_CALL static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> void b3Swap<b3DbvtAabbMm>(b3DbvtAabbMm &, b3DbvtAabbMm &) [b3DynamicBvh.cpp <390:3 390:8>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <390:13 390:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <390:10 390:10>]
REFERENCE_USAGE static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <390:23 390:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <390:20 390:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<371:14> [b3DynamicBvh.cpp <391:10 391:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<369:54> [b3DynamicBvh.cpp <393:9 393:9>]
SYMBOL_METHOD public void b3DynamicBvh::b3DynamicBvh() [b3DynamicBvh.cpp <409:1 <409:15 409:26> 416:1>]
SYMBOL_STRUCT b3DynamicBvh
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.cpp <409:15 409:26>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray()
REFERENCE_CALL void b3DynamicBvh::b3DynamicBvh() -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::b3AlignedObjectArray() [b3DynamicBvh.cpp <409:15 409:26>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> b3AlignedObjectArray<const b3DbvtNode *> b3DynamicBvh::m_rayTestStack [b3DynamicBvh.cpp <409:15 409:26>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray()
REFERENCE_CALL void b3DynamicBvh::b3DynamicBvh() -> void b3AlignedObjectArray<const b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.cpp <409:15 409:26>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <411:2 411:7>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <412:2 412:7>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> int b3DynamicBvh::m_lkhd [b3DynamicBvh.cpp <413:2 413:7>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <414:2 414:9>]
REFERENCE_USAGE void b3DynamicBvh::b3DynamicBvh() -> unsigned int b3DynamicBvh::m_opath [b3DynamicBvh.cpp <415:2 415:8>]
SYMBOL_METHOD public void b3DynamicBvh::~b3DynamicBvh() [b3DynamicBvh.cpp <419:1 <419:15 419:27> 422:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_FUNCTION void b3DynamicBvh::clear()
REFERENCE_CALL void b3DynamicBvh::~b3DynamicBvh() -> void b3DynamicBvh::clear() [b3DynamicBvh.cpp <421:2 421:6>]
SYMBOL_METHOD public void b3DynamicBvh::clear() [b3DynamicBvh.cpp <425:1 <425:22 425:26> 435:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3DynamicBvh::clear() -> void [b3DynamicBvh.cpp <425:1 425:4>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <427:5 427:10>]
SYMBOL_FUNCTION static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::clear() -> static void b3RecurseDeleteNode(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <428:3 428:21>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <428:28 428:33>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <429:16 429:21>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> b3DbvtNode * b3DynamicBvh::m_free [b3DynamicBvh.cpp <430:2 430:7>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> int b3DynamicBvh::m_lkhd [b3DynamicBvh.cpp <431:2 431:7>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear()
REFERENCE_CALL void b3DynamicBvh::clear() -> void b3AlignedObjectArray<b3DynamicBvh::sStkNN>::clear() [b3DynamicBvh.cpp <432:13 432:17>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> b3AlignedObjectArray<b3DynamicBvh::sStkNN> b3DynamicBvh::m_stkStack [b3DynamicBvh.cpp <432:2 432:11>]
REFERENCE_USAGE void b3DynamicBvh::clear() -> unsigned int b3DynamicBvh::m_opath [b3DynamicBvh.cpp <433:2 433:8>]
SYMBOL_METHOD public void b3DynamicBvh::optimizeBottomUp() [b3DynamicBvh.cpp <438:1 <438:22 438:37> 448:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeBottomUp() -> void [b3DynamicBvh.cpp <438:1 438:4>]
REFERENCE_USAGE void b3DynamicBvh::optimizeBottomUp() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <440:5 440:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<442:15> [b3DynamicBvh.cpp <442:15 442:20>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeBottomUp() -> b3NodeArray [b3DynamicBvh.cpp <442:3 442:13>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray()
REFERENCE_CALL void b3DynamicBvh::optimizeBottomUp() -> void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.cpp <442:15 442:20>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::reserve(int)
REFERENCE_CALL void b3DynamicBvh::optimizeBottomUp() -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <443:10 443:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<442:15> [b3DynamicBvh.cpp <443:3 443:8>]
REFERENCE_USAGE void b3DynamicBvh::optimizeBottomUp() -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <443:18 443:25>]
SYMBOL_FUNCTION static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int)
REFERENCE_CALL void b3DynamicBvh::optimizeBottomUp() -> static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) [b3DynamicBvh.cpp <444:3 444:15>]
REFERENCE_USAGE void b3DynamicBvh::optimizeBottomUp() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <444:22 444:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<442:15> [b3DynamicBvh.cpp <444:29 444:34>]
SYMBOL_FUNCTION static void b3BottomUp(b3DynamicBvh *, b3NodeArray &)
REFERENCE_CALL void b3DynamicBvh::optimizeBottomUp() -> static void b3BottomUp(b3DynamicBvh *, b3NodeArray &) [b3DynamicBvh.cpp <445:3 445:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<442:15> [b3DynamicBvh.cpp <445:19 445:24>]
REFERENCE_USAGE void b3DynamicBvh::optimizeBottomUp() -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <446:3 446:8>]
SYMBOL_FUNCTION b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int)
REFERENCE_CALL void b3DynamicBvh::optimizeBottomUp() -> b3DbvtNode * & b3AlignedObjectArray<b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <446:16 446:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<442:15> [b3DynamicBvh.cpp <446:10 446:15>]
SYMBOL_METHOD public void b3DynamicBvh::optimizeTopDown(int) [b3DynamicBvh.cpp <451:1 <451:22 451:36> 460:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> void [b3DynamicBvh.cpp <451:1 451:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<451:42> [b3DynamicBvh.cpp <451:42 451:52>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> int [b3DynamicBvh.cpp <451:38 451:40>]
REFERENCE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <453:5 453:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<455:15> [b3DynamicBvh.cpp <455:15 455:20>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> b3NodeArray [b3DynamicBvh.cpp <455:3 455:13>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray()
REFERENCE_CALL void b3DynamicBvh::optimizeTopDown(int) -> void b3AlignedObjectArray<b3DbvtNode *>::b3AlignedObjectArray() [b3DynamicBvh.cpp <455:15 455:20>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DbvtNode *>::reserve(int)
REFERENCE_CALL void b3DynamicBvh::optimizeTopDown(int) -> void b3AlignedObjectArray<b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <456:10 456:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<455:15> [b3DynamicBvh.cpp <456:3 456:8>]
REFERENCE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <456:18 456:25>]
SYMBOL_FUNCTION static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int)
REFERENCE_CALL void b3DynamicBvh::optimizeTopDown(int) -> static void b3FetchLeaves(b3DynamicBvh *, b3DbvtNode *, b3NodeArray &, int) [b3DynamicBvh.cpp <457:3 457:15>]
REFERENCE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <457:22 457:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<455:15> [b3DynamicBvh.cpp <457:29 457:34>]
REFERENCE_USAGE void b3DynamicBvh::optimizeTopDown(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <458:3 458:8>]
SYMBOL_FUNCTION static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int)
REFERENCE_CALL void b3DynamicBvh::optimizeTopDown(int) -> static b3DbvtNode * b3TopDown(b3DynamicBvh *, b3NodeArray &, int) [b3DynamicBvh.cpp <458:10 458:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<455:15> [b3DynamicBvh.cpp <458:25 458:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<451:42> [b3DynamicBvh.cpp <458:32 458:42>]
SYMBOL_METHOD public void b3DynamicBvh::optimizeIncremental(int) [b3DynamicBvh.cpp <463:1 <463:22 463:40> 480:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> void [b3DynamicBvh.cpp <463:1 463:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<463:46> [b3DynamicBvh.cpp <463:46 463:51>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> int [b3DynamicBvh.cpp <463:42 463:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<463:46> [b3DynamicBvh.cpp <465:5 465:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<463:46> [b3DynamicBvh.cpp <465:15 465:20>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <465:22 465:29>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <466:5 466:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<463:46> [b3DynamicBvh.cpp <466:14 466:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<469:17> [b3DynamicBvh.cpp <469:17 469:20>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode [b3DynamicBvh.cpp <469:4 469:13>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <469:22 469:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<470:13> [b3DynamicBvh.cpp <470:13 470:15>]
SYMBOL_BUILTIN_TYPE unsigned int
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> unsigned int [b3DynamicBvh.cpp <470:4 470:11>]
SYMBOL_FUNCTION bool b3DbvtNode::isinternal() const
REFERENCE_CALL void b3DynamicBvh::optimizeIncremental(int) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <471:16 471:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<469:17> [b3DynamicBvh.cpp <471:10 471:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<469:17> [b3DynamicBvh.cpp <473:5 473:8>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <473:31 473:36>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <473:31 473:36>]
SYMBOL_FUNCTION static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &)
REFERENCE_CALL void b3DynamicBvh::optimizeIncremental(int) -> static b3DbvtNode * b3Sort(b3DbvtNode *, b3DbvtNode * &) [b3DynamicBvh.cpp <473:10 473:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<469:17> [b3DynamicBvh.cpp <473:17 473:20>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <473:22 473:27>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> unsigned int b3DynamicBvh::m_opath [b3DynamicBvh.cpp <473:39 473:45>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<470:13> [b3DynamicBvh.cpp <473:48 473:50>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<470:13> [b3DynamicBvh.cpp <474:5 474:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<470:13> [b3DynamicBvh.cpp <474:10 474:12>]
SYMBOL_BUILTIN_TYPE unsigned int
REFERENCE_TYPE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> unsigned int [b3DynamicBvh.cpp <474:25 474:32>]
SYMBOL_FUNCTION void b3DynamicBvh::update(b3DbvtNode *, int)
REFERENCE_CALL void b3DynamicBvh::optimizeIncremental(int) -> void b3DynamicBvh::update(b3DbvtNode *, int) [b3DynamicBvh.cpp <476:4 476:9>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<469:17> [b3DynamicBvh.cpp <476:11 476:14>]
REFERENCE_USAGE void b3DynamicBvh::optimizeIncremental(int) -> unsigned int b3DynamicBvh::m_opath [b3DynamicBvh.cpp <477:6 477:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<463:46> [b3DynamicBvh.cpp <478:13 478:18>]
SYMBOL_METHOD public b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) [b3DynamicBvh.cpp <483:1 <483:27 483:32> 489:1>]
SYMBOL_STRUCT b3DynamicBvh
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> b3DbvtNode [b3DynamicBvh.cpp <483:1 483:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<483:54> [b3DynamicBvh.cpp <483:54 483:59>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> b3DbvtVolume [b3DynamicBvh.cpp <483:40 483:51>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<483:67> [b3DynamicBvh.cpp <483:67 483:70>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> void [b3DynamicBvh.cpp <483:61 483:64>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<485:14> [b3DynamicBvh.cpp <485:14 485:17>]
REFERENCE_TYPE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> b3DbvtNode [b3DynamicBvh.cpp <485:2 485:11>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *)
REFERENCE_CALL b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) [b3DynamicBvh.cpp <485:19 485:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<483:54> [b3DynamicBvh.cpp <485:39 485:44>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<483:67> [b3DynamicBvh.cpp <485:46 485:49>]
SYMBOL_FUNCTION static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *)
REFERENCE_CALL b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) [b3DynamicBvh.cpp <486:2 486:13>]
REFERENCE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <486:20 486:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<485:14> [b3DynamicBvh.cpp <486:27 486:30>]
REFERENCE_USAGE b3DbvtNode * b3DynamicBvh::insert(const b3DbvtVolume &, void *) -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <487:4 487:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<485:14> [b3DynamicBvh.cpp <488:9 488:12>]
SYMBOL_METHOD public void b3DynamicBvh::update(b3DbvtNode *, int) [b3DynamicBvh.cpp <492:1 <492:22 492:27> 506:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> void [b3DynamicBvh.cpp <492:1 492:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:41> [b3DynamicBvh.cpp <492:41 492:44>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> b3DbvtNode [b3DynamicBvh.cpp <492:29 492:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:50> [b3DynamicBvh.cpp <492:50 492:58>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> int [b3DynamicBvh.cpp <492:46 492:48>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <494:14 494:17>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> b3DbvtNode [b3DynamicBvh.cpp <494:2 494:11>]
SYMBOL_FUNCTION static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::update(b3DbvtNode *, int) -> static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <494:19 494:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:41> [b3DynamicBvh.cpp <494:37 494:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <495:5 495:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:50> [b3DynamicBvh.cpp <497:6 497:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<499:12> [b3DynamicBvh.cpp <499:12 499:12>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> int [b3DynamicBvh.cpp <499:8 499:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<499:12> [b3DynamicBvh.cpp <499:17 499:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:50> [b3DynamicBvh.cpp <499:19 499:27>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <499:37 499:42>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <499:31 499:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<499:12> [b3DynamicBvh.cpp <499:46 499:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <501:5 501:8>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <501:16 501:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <501:10 501:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <503:10 503:13>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, int) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <503:15 503:20>]
SYMBOL_FUNCTION static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::update(b3DbvtNode *, int) -> static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) [b3DynamicBvh.cpp <505:2 505:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<494:14> [b3DynamicBvh.cpp <505:20 505:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<492:41> [b3DynamicBvh.cpp <505:25 505:28>]
SYMBOL_METHOD public void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) [b3DynamicBvh.cpp <509:1 <509:22 509:27> 524:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> void [b3DynamicBvh.cpp <509:1 509:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:41> [b3DynamicBvh.cpp <509:41 509:44>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtNode [b3DynamicBvh.cpp <509:29 509:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:60> [b3DynamicBvh.cpp <509:60 509:65>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtVolume [b3DynamicBvh.cpp <509:46 509:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <511:14 511:17>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtNode [b3DynamicBvh.cpp <511:2 511:11>]
SYMBOL_FUNCTION static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <511:19 511:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:41> [b3DynamicBvh.cpp <511:37 511:40>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <512:5 512:8>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> int b3DynamicBvh::m_lkhd [b3DynamicBvh.cpp <514:6 514:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<516:12> [b3DynamicBvh.cpp <516:12 516:12>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> int [b3DynamicBvh.cpp <516:8 516:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<516:12> [b3DynamicBvh.cpp <516:17 516:17>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> int b3DynamicBvh::m_lkhd [b3DynamicBvh.cpp <516:19 516:24>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <516:34 516:39>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <516:28 516:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<516:12> [b3DynamicBvh.cpp <516:43 516:43>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <518:5 518:8>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <518:16 518:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <518:10 518:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <520:10 520:13>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <520:15 520:20>]
SYMBOL_FUNCTION b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &)
REFERENCE_CALL void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtAabbMm & b3DbvtAabbMm::operator=(const b3DbvtAabbMm &) [b3DynamicBvh.cpp <522:14 522:14>]
REFERENCE_USAGE void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <522:8 522:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:41> [b3DynamicBvh.cpp <522:2 522:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:60> [b3DynamicBvh.cpp <522:15 522:20>]
SYMBOL_FUNCTION static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) -> static void b3InsertLeaf(b3DynamicBvh *, b3DbvtNode *, b3DbvtNode *) [b3DynamicBvh.cpp <523:2 523:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<511:14> [b3DynamicBvh.cpp <523:20 523:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<509:41> [b3DynamicBvh.cpp <523:25 523:28>]
SYMBOL_METHOD public bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) [b3DynamicBvh.cpp <527:1 <527:22 527:27> 534:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> bool [b3DynamicBvh.cpp <527:1 527:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:41> [b3DynamicBvh.cpp <527:41 527:44>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3DbvtNode [b3DynamicBvh.cpp <527:29 527:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:60> [b3DynamicBvh.cpp <527:60 527:65>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3DbvtVolume [b3DynamicBvh.cpp <527:46 527:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:84> [b3DynamicBvh.cpp <527:84 527:91>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3Vector3 [b3DynamicBvh.cpp <527:73 527:81>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:102> [b3DynamicBvh.cpp <527:102 527:107>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3Scalar [b3DynamicBvh.cpp <527:93 527:100>]
SYMBOL_FUNCTION bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const [b3DynamicBvh.cpp <529:18 529:24>]
REFERENCE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <529:11 529:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:41> [b3DynamicBvh.cpp <529:5 529:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:60> [b3DynamicBvh.cpp <529:26 529:31>]
SYMBOL_FUNCTION void b3DbvtAabbMm::Expand(const b3Vector3 &)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> void b3DbvtAabbMm::Expand(const b3Vector3 &) [b3DynamicBvh.cpp <530:9 530:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:60> [b3DynamicBvh.cpp <530:2 530:7>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <530:16 530:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:102> [b3DynamicBvh.cpp <530:30 530:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:102> [b3DynamicBvh.cpp <530:37 530:42>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:102> [b3DynamicBvh.cpp <530:44 530:49>]
SYMBOL_FUNCTION void b3DbvtAabbMm::SignedExpand(const b3Vector3 &)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) [b3DynamicBvh.cpp <531:9 531:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:60> [b3DynamicBvh.cpp <531:2 531:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:84> [b3DynamicBvh.cpp <531:22 531:29>]
SYMBOL_FUNCTION void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &, b3Scalar) -> void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) [b3DynamicBvh.cpp <532:2 532:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:41> [b3DynamicBvh.cpp <532:9 532:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<527:60> [b3DynamicBvh.cpp <532:14 532:19>]
SYMBOL_METHOD public bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) [b3DynamicBvh.cpp <537:1 <537:22 537:27> 543:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> bool [b3DynamicBvh.cpp <537:1 537:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:41> [b3DynamicBvh.cpp <537:41 537:44>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> b3DbvtNode [b3DynamicBvh.cpp <537:29 537:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:60> [b3DynamicBvh.cpp <537:60 537:65>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> b3DbvtVolume [b3DynamicBvh.cpp <537:46 537:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:84> [b3DynamicBvh.cpp <537:84 537:91>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> b3Vector3 [b3DynamicBvh.cpp <537:73 537:81>]
SYMBOL_FUNCTION bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const [b3DynamicBvh.cpp <539:18 539:24>]
REFERENCE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <539:11 539:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:41> [b3DynamicBvh.cpp <539:5 539:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:60> [b3DynamicBvh.cpp <539:26 539:31>]
SYMBOL_FUNCTION void b3DbvtAabbMm::SignedExpand(const b3Vector3 &)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> void b3DbvtAabbMm::SignedExpand(const b3Vector3 &) [b3DynamicBvh.cpp <540:9 540:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:60> [b3DynamicBvh.cpp <540:2 540:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:84> [b3DynamicBvh.cpp <540:22 540:29>]
SYMBOL_FUNCTION void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, const b3Vector3 &) -> void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) [b3DynamicBvh.cpp <541:2 541:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:41> [b3DynamicBvh.cpp <541:9 541:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<537:60> [b3DynamicBvh.cpp <541:14 541:19>]
SYMBOL_METHOD public bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) [b3DynamicBvh.cpp <546:1 <546:22 546:27> 552:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> bool [b3DynamicBvh.cpp <546:1 546:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:41> [b3DynamicBvh.cpp <546:41 546:44>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3DbvtNode [b3DynamicBvh.cpp <546:29 546:38>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:60> [b3DynamicBvh.cpp <546:60 546:65>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3DbvtVolume [b3DynamicBvh.cpp <546:46 546:57>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:76> [b3DynamicBvh.cpp <546:76 546:81>]
REFERENCE_TYPE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3Scalar [b3DynamicBvh.cpp <546:67 546:74>]
SYMBOL_FUNCTION bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> bool b3DbvtAabbMm::Contain(const b3DbvtAabbMm &) const [b3DynamicBvh.cpp <548:18 548:24>]
REFERENCE_USAGE bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <548:11 548:16>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:41> [b3DynamicBvh.cpp <548:5 548:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:60> [b3DynamicBvh.cpp <548:26 548:31>]
SYMBOL_FUNCTION void b3DbvtAabbMm::Expand(const b3Vector3 &)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> void b3DbvtAabbMm::Expand(const b3Vector3 &) [b3DynamicBvh.cpp <549:9 549:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:60> [b3DynamicBvh.cpp <549:2 549:7>]
SYMBOL_FUNCTION b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> b3Vector3 b3MakeVector3(b3Scalar, b3Scalar, b3Scalar) [b3DynamicBvh.cpp <549:16 549:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:76> [b3DynamicBvh.cpp <549:30 549:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:76> [b3DynamicBvh.cpp <549:37 549:42>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:76> [b3DynamicBvh.cpp <549:44 549:49>]
SYMBOL_FUNCTION void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &)
REFERENCE_CALL bool b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &, b3Scalar) -> void b3DynamicBvh::update(b3DbvtNode *, b3DbvtVolume &) [b3DynamicBvh.cpp <550:2 550:7>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:41> [b3DynamicBvh.cpp <550:9 550:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<546:60> [b3DynamicBvh.cpp <550:14 550:19>]
SYMBOL_METHOD public void b3DynamicBvh::remove(b3DbvtNode *) [b3DynamicBvh.cpp <555:1 <555:22 555:27> 560:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3DynamicBvh::remove(b3DbvtNode *) -> void [b3DynamicBvh.cpp <555:1 555:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<555:41> [b3DynamicBvh.cpp <555:41 555:44>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::remove(b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <555:29 555:38>]
SYMBOL_FUNCTION static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::remove(b3DbvtNode *) -> static b3DbvtNode * b3RemoveLeaf(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <557:2 557:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<555:41> [b3DynamicBvh.cpp <557:20 557:23>]
SYMBOL_FUNCTION static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::remove(b3DbvtNode *) -> static void b3DeleteNode(b3DynamicBvh *, b3DbvtNode *) [b3DynamicBvh.cpp <558:2 558:13>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<555:41> [b3DynamicBvh.cpp <558:20 558:23>]
REFERENCE_USAGE void b3DynamicBvh::remove(b3DbvtNode *) -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <559:4 559:11>]
SYMBOL_METHOD public void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const [b3DynamicBvh.cpp <563:1 <563:22 563:26> 585:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void [b3DynamicBvh.cpp <563:1 563:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<563:37> [b3DynamicBvh.cpp <563:37 563:43>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DynamicBvh::IWriter [b3DynamicBvh.cpp <563:28 563:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <565:23 565:27>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNodeEnumerator [b3DynamicBvh.cpp <565:2 565:21>]
SYMBOL_FUNCTION void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator()
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void b3DbvtNodeEnumerator::b3DbvtNodeEnumerator() [b3DynamicBvh.cpp <565:23 565:27>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int)
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void b3AlignedObjectArray<const b3DbvtNode *>::reserve(int) [b3DynamicBvh.cpp <566:14 566:20>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <566:8 566:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <566:2 566:6>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <566:22 566:29>]
SYMBOL_FUNCTION static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &)
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> static void b3DynamicBvh::enumNodes<b3DbvtNodeEnumerator>(const b3DbvtNode *, b3DbvtNodeEnumerator &) [b3DynamicBvh.cpp <567:2 567:10>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <567:12 567:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <567:19 567:23>]
SYMBOL_FUNCTION void b3DynamicBvh::IWriter::Prepare(const b3DbvtNode *, int)
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void b3DynamicBvh::IWriter::Prepare(const b3DbvtNode *, int) [b3DynamicBvh.cpp <568:11 568:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<563:37> [b3DynamicBvh.cpp <568:2 568:8>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <568:19 568:24>]
SYMBOL_FUNCTION int b3AlignedObjectArray<const b3DbvtNode *>::size() const
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.cpp <568:38 568:41>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <568:32 568:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <568:26 568:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <569:10 569:10>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int [b3DynamicBvh.cpp <569:6 569:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <569:14 569:14>]
SYMBOL_FUNCTION int b3AlignedObjectArray<const b3DbvtNode *>::size() const
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3AlignedObjectArray<const b3DbvtNode *>::size() const [b3DynamicBvh.cpp <569:28 569:31>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <569:22 569:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <569:16 569:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <569:37 569:37>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <571:21 571:21>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode [b3DynamicBvh.cpp <571:9 571:18>]
SYMBOL_FUNCTION const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int)
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> const b3DbvtNode * & b3AlignedObjectArray<const b3DbvtNode *>::operator[](int) [b3DynamicBvh.cpp <571:34 571:34>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <571:29 571:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <571:23 571:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <571:35 571:35>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<572:9> [b3DynamicBvh.cpp <572:9 572:9>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int [b3DynamicBvh.cpp <572:3 572:5>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <573:9 573:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <573:6 573:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<572:9> [b3DynamicBvh.cpp <573:17 573:17>]
SYMBOL_FUNCTION int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const [b3DynamicBvh.cpp <573:31 573:46>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <573:25 573:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <573:19 573:23>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * b3DbvtNode::parent [b3DynamicBvh.cpp <573:51 573:56>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <573:48 573:48>]
SYMBOL_FUNCTION bool b3DbvtNode::isinternal() const
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <574:9 574:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <574:6 574:6>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<576:14> [b3DynamicBvh.cpp <576:14 576:15>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int [b3DynamicBvh.cpp <576:10 576:12>]
SYMBOL_FUNCTION int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const [b3DynamicBvh.cpp <576:29 576:44>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <576:23 576:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <576:17 576:21>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <576:49 576:54>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <576:49 576:54>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <576:46 576:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<577:14> [b3DynamicBvh.cpp <577:14 577:15>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int [b3DynamicBvh.cpp <577:10 577:12>]
SYMBOL_FUNCTION int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> int b3AlignedObjectArray<const b3DbvtNode *>::findLinearSearch(const b3DbvtNode * const &) const [b3DynamicBvh.cpp <577:29 577:44>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3ConstNodeArray b3DbvtNodeEnumerator::nodes [b3DynamicBvh.cpp <577:23 577:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<565:23> [b3DynamicBvh.cpp <577:17 577:21>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <577:49 577:54>]
REFERENCE_USAGE void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <577:49 577:54>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <577:46 577:46>]
SYMBOL_FUNCTION void b3DynamicBvh::IWriter::WriteNode(const b3DbvtNode *, int, int, int, int)
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void b3DynamicBvh::IWriter::WriteNode(const b3DbvtNode *, int, int, int, int) [b3DynamicBvh.cpp <578:13 578:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<563:37> [b3DynamicBvh.cpp <578:4 578:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <578:23 578:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <578:25 578:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<572:9> [b3DynamicBvh.cpp <578:27 578:27>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<576:14> [b3DynamicBvh.cpp <578:29 578:30>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<577:14> [b3DynamicBvh.cpp <578:32 578:33>]
SYMBOL_FUNCTION void b3DynamicBvh::IWriter::WriteLeaf(const b3DbvtNode *, int, int)
REFERENCE_CALL void b3DynamicBvh::write(b3DynamicBvh::IWriter *) const -> void b3DynamicBvh::IWriter::WriteLeaf(const b3DbvtNode *, int, int) [b3DynamicBvh.cpp <582:13 582:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<563:37> [b3DynamicBvh.cpp <582:4 582:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<571:21> [b3DynamicBvh.cpp <582:23 582:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<569:10> [b3DynamicBvh.cpp <582:25 582:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<572:9> [b3DynamicBvh.cpp <582:27 582:27>]
SYMBOL_METHOD public void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const [b3DynamicBvh.cpp <588:1 <588:22 588:26> 616:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void [b3DynamicBvh.cpp <588:1 588:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:42> [b3DynamicBvh.cpp <588:42 588:45>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh [b3DynamicBvh.cpp <588:28 588:39>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:55> [b3DynamicBvh.cpp <588:55 588:60>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::IClone [b3DynamicBvh.cpp <588:47 588:52>]
SYMBOL_FUNCTION void b3DynamicBvh::clear()
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::clear() [b3DynamicBvh.cpp <590:7 590:11>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:42> [b3DynamicBvh.cpp <590:2 590:5>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <591:5 591:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <593:33 593:37>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3AlignedObjectArray<b3DynamicBvh::sStkCLN> [b3DynamicBvh.cpp <593:3 593:22>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<b3DynamicBvh::sStkCLN> -> b3DynamicBvh::sStkCLN [b3DynamicBvh.cpp <593:24 593:30>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray()
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::b3AlignedObjectArray() [b3DynamicBvh.cpp <593:33 593:37>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::reserve(int) [b3DynamicBvh.cpp <594:9 594:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <594:3 594:7>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> int b3DynamicBvh::m_leaves [b3DynamicBvh.cpp <594:17 594:24>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) [b3DynamicBvh.cpp <595:9 595:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <595:3 595:7>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *) [b3DynamicBvh.cpp <595:19 595:25>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::sStkCLN [b3DynamicBvh.cpp <595:19 595:25>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <595:27 595:32>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<597:15> [b3DynamicBvh.cpp <597:15 597:15>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> int [b3DynamicBvh.cpp <597:10 597:12>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const [b3DynamicBvh.cpp <597:23 597:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <597:17 597:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <598:18 598:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::sStkCLN [b3DynamicBvh.cpp <598:10 598:16>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkCLN::sStkCLN(const b3DynamicBvh::sStkCLN &)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::sStkCLN::sStkCLN(const b3DynamicBvh::sStkCLN &) [b3DynamicBvh.cpp <598:27 598:27>]
SYMBOL_FUNCTION b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator[](int)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::sStkCLN & b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::operator[](int) [b3DynamicBvh.cpp <598:25 598:25>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <598:20 598:24>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<597:15> [b3DynamicBvh.cpp <598:26 598:26>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <599:18 599:18>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode [b3DynamicBvh.cpp <599:4 599:13>]
SYMBOL_FUNCTION static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> static b3DbvtNode * b3CreateNode(b3DynamicBvh *, b3DbvtNode *, const b3DbvtVolume &, void *) [b3DynamicBvh.cpp <599:20 599:31>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:42> [b3DynamicBvh.cpp <599:34 599:37>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::sStkCLN::parent [b3DynamicBvh.cpp <599:41 599:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <599:39 599:39>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtVolume b3DbvtNode::volume [b3DynamicBvh.cpp <599:56 599:61>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.cpp <599:50 599:53>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <599:48 599:48>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void * b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::data [b3DynamicBvh.cpp <599:71 599:74>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <599:71 599:74>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.cpp <599:65 599:68>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <599:63 599:63>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::pop_back()
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::pop_back() [b3DynamicBvh.cpp <600:10 600:17>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <600:4 600:8>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::sStkCLN::parent [b3DynamicBvh.cpp <601:9 601:14>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <601:7 601:7>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <602:15 602:20>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <602:15 602:20>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::sStkCLN::parent [b3DynamicBvh.cpp <602:7 602:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <602:5 602:5>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<597:15> [b3DynamicBvh.cpp <602:22 602:22>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <602:27 602:27>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * b3DynamicBvh::m_root [b3DynamicBvh.cpp <604:10 604:15>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:42> [b3DynamicBvh.cpp <604:5 604:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <604:17 604:17>]
SYMBOL_FUNCTION bool b3DbvtNode::isinternal() const
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <605:15 605:24>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.cpp <605:9 605:12>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <605:7 605:7>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) [b3DynamicBvh.cpp <607:11 607:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <607:5 607:9>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *) [b3DynamicBvh.cpp <607:21 607:27>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::sStkCLN [b3DynamicBvh.cpp <607:21 607:27>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <607:37 607:42>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <607:37 607:42>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.cpp <607:31 607:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <607:29 607:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <607:47 607:47>]
SYMBOL_FUNCTION void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::push_back(const b3DynamicBvh::sStkCLN &) [b3DynamicBvh.cpp <608:11 608:19>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <608:5 608:9>]
SYMBOL_FUNCTION void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::sStkCLN::sStkCLN(const b3DbvtNode *, b3DbvtNode *) [b3DynamicBvh.cpp <608:21 608:27>]
REFERENCE_TYPE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DynamicBvh::sStkCLN [b3DynamicBvh.cpp <608:21 608:27>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <608:37 608:42>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <608:37 608:42>]
REFERENCE_USAGE void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> const b3DbvtNode * b3DynamicBvh::sStkCLN::node [b3DynamicBvh.cpp <608:31 608:34>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<598:18> [b3DynamicBvh.cpp <608:29 608:29>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <608:47 608:47>]
SYMBOL_FUNCTION void b3DynamicBvh::IClone::CloneLeaf(b3DbvtNode *)
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> void b3DynamicBvh::IClone::CloneLeaf(b3DbvtNode *) [b3DynamicBvh.cpp <612:13 612:21>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<588:55> [b3DynamicBvh.cpp <612:5 612:10>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<599:18> [b3DynamicBvh.cpp <612:23 612:23>]
SYMBOL_FUNCTION int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const
REFERENCE_CALL void b3DynamicBvh::clone(b3DynamicBvh &, b3DynamicBvh::IClone *) const -> int b3AlignedObjectArray<b3DynamicBvh::sStkCLN>::size() const [b3DynamicBvh.cpp <614:17 614:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<593:33> [b3DynamicBvh.cpp <614:11 614:15>]
SYMBOL_METHOD public static int b3DynamicBvh::maxdepth(const b3DbvtNode *) [b3DynamicBvh.cpp <619:1 <619:22 619:29> 624:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static int b3DynamicBvh::maxdepth(const b3DbvtNode *) -> int [b3DynamicBvh.cpp <619:1 619:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<619:49> [b3DynamicBvh.cpp <619:49 619:52>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::maxdepth(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <619:37 619:46>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<621:6> [b3DynamicBvh.cpp <621:6 621:10>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static int b3DynamicBvh::maxdepth(const b3DbvtNode *) -> int [b3DynamicBvh.cpp <621:2 621:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<619:49> [b3DynamicBvh.cpp <622:5 622:8>]
SYMBOL_FUNCTION static void b3GetMaxDepth(const b3DbvtNode *, int, int &)
REFERENCE_CALL static int b3DynamicBvh::maxdepth(const b3DbvtNode *) -> static void b3GetMaxDepth(const b3DbvtNode *, int, int &) [b3DynamicBvh.cpp <622:11 622:23>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<619:49> [b3DynamicBvh.cpp <622:25 622:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<621:6> [b3DynamicBvh.cpp <622:32 622:36>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<621:6> [b3DynamicBvh.cpp <623:9 623:13>]
SYMBOL_METHOD public static int b3DynamicBvh::countLeaves(const b3DbvtNode *) [b3DynamicBvh.cpp <627:1 <627:22 627:32> 633:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> int [b3DynamicBvh.cpp <627:1 627:3>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<627:52> [b3DynamicBvh.cpp <627:52 627:55>]
REFERENCE_TYPE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> b3DbvtNode [b3DynamicBvh.cpp <627:40 627:49>]
SYMBOL_FUNCTION bool b3DbvtNode::isinternal() const
REFERENCE_CALL static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <629:11 629:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<627:52> [b3DynamicBvh.cpp <629:5 629:8>]
SYMBOL_FUNCTION static int b3DynamicBvh::countLeaves(const b3DbvtNode *)
REFERENCE_CALL static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> static int b3DynamicBvh::countLeaves(const b3DbvtNode *) [b3DynamicBvh.cpp <630:10 630:20>]
REFERENCE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <630:28 630:33>]
REFERENCE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <630:28 630:33>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<627:52> [b3DynamicBvh.cpp <630:22 630:25>]
SYMBOL_FUNCTION static int b3DynamicBvh::countLeaves(const b3DbvtNode *)
REFERENCE_CALL static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> static int b3DynamicBvh::countLeaves(const b3DbvtNode *) [b3DynamicBvh.cpp <630:39 630:49>]
REFERENCE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <630:57 630:62>]
REFERENCE_USAGE static int b3DynamicBvh::countLeaves(const b3DbvtNode *) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <630:57 630:62>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<627:52> [b3DynamicBvh.cpp <630:51 630:54>]
SYMBOL_METHOD public static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) [b3DynamicBvh.cpp <636:1 <636:22 636:34> 647:1>]
SYMBOL_STRUCT b3DynamicBvh
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> void [b3DynamicBvh.cpp <636:1 636:4>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:54> [b3DynamicBvh.cpp <636:54 636:57>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3DbvtNode [b3DynamicBvh.cpp <636:42 636:51>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:100> [b3DynamicBvh.cpp <636:100 636:105>]
REFERENCE_TYPE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3AlignedObjectArray<const b3DbvtNode *> [b3DynamicBvh.cpp <636:59 636:78>]
REFERENCE_TEMPLATE_ARGUMENT b3AlignedObjectArray<const b3DbvtNode *> -> b3DbvtNode [b3DynamicBvh.cpp <636:86 636:95>]
SYMBOL_FUNCTION bool b3DbvtNode::isinternal() const
REFERENCE_CALL static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> bool b3DbvtNode::isinternal() const [b3DynamicBvh.cpp <638:11 638:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:54> [b3DynamicBvh.cpp <638:5 638:8>]
SYMBOL_FUNCTION static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &)
REFERENCE_CALL static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) [b3DynamicBvh.cpp <640:3 640:15>]
REFERENCE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <640:23 640:28>]
REFERENCE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <640:23 640:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:54> [b3DynamicBvh.cpp <640:17 640:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:100> [b3DynamicBvh.cpp <640:33 640:38>]
SYMBOL_FUNCTION static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &)
REFERENCE_CALL static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) [b3DynamicBvh.cpp <641:3 641:15>]
REFERENCE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3DbvtNode * [] b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>)::childs [b3DynamicBvh.cpp <641:23 641:28>]
REFERENCE_USAGE static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> b3DbvtNode::anonymous union (b3DynamicBvh.h<183:2>) b3DbvtNode:: [b3DynamicBvh.cpp <641:23 641:28>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:54> [b3DynamicBvh.cpp <641:17 641:20>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:100> [b3DynamicBvh.cpp <641:33 641:38>]
SYMBOL_FUNCTION void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &)
REFERENCE_CALL static void b3DynamicBvh::extractLeaves(const b3DbvtNode *, b3AlignedObjectArray<const b3DbvtNode *> &) -> void b3AlignedObjectArray<const b3DbvtNode *>::push_back(const b3DbvtNode * const &) [b3DynamicBvh.cpp <645:10 645:18>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:100> [b3DynamicBvh.cpp <645:3 645:8>]
LOCAL_SYMBOL: b3DynamicBvh.cpp<636:54> [b3DynamicBvh.cpp <645:20 645:23>]
