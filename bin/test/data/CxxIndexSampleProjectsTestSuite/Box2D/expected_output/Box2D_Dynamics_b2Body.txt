FILE: b2Body.cpp
FILE: b2Body.h
FILE: b2Math.h
FILE: b2Settings.h
FILE: stddef.h non-indexed
FILE: corecrt.h non-indexed
FILE: vcruntime.h non-indexed
FILE: sal.h non-indexed
FILE: concurrencysal.h non-indexed
FILE: vadefs.h non-indexed
FILE: assert.h non-indexed
FILE: float.h non-indexed
FILE: math.h non-indexed
FILE: b2Shape.h
FILE: b2BlockAllocator.h
FILE: b2Collision.h
FILE: limits.h non-indexed
FILE: memory non-indexed
FILE: xmemory non-indexed
FILE: xmemory0 non-indexed
FILE: cstdint non-indexed
FILE: yvals.h non-indexed
FILE: yvals_core.h non-indexed
FILE: xkeycheck.h non-indexed
FILE: crtdefs.h non-indexed
FILE: crtdbg.h non-indexed
FILE: vcruntime_new_debug.h non-indexed
FILE: vcruntime_new.h non-indexed
FILE: use_ansi.h non-indexed
FILE: stdint.h non-indexed
FILE: cstdlib non-indexed
FILE: stdlib.h non-indexed
FILE: corecrt_malloc.h non-indexed
FILE: corecrt_search.h non-indexed
FILE: corecrt_wstdlib.h non-indexed
FILE: limits non-indexed
FILE: ymath.h non-indexed
FILE: cfloat non-indexed
FILE: climits non-indexed
FILE: cmath non-indexed
FILE: xtgmath.h non-indexed
FILE: xtr1common non-indexed
FILE: cwchar non-indexed
FILE: wchar.h non-indexed
FILE: corecrt_memcpy_s.h non-indexed
FILE: errno.h non-indexed
FILE: vcruntime_string.h non-indexed
FILE: corecrt_wconio.h non-indexed
FILE: corecrt_stdio_config.h non-indexed
FILE: corecrt_wctype.h non-indexed
FILE: corecrt_wdirect.h non-indexed
FILE: corecrt_wio.h non-indexed
FILE: corecrt_share.h non-indexed
FILE: corecrt_wprocess.h non-indexed
FILE: corecrt_wstdio.h non-indexed
FILE: corecrt_wstring.h non-indexed
FILE: corecrt_wtime.h non-indexed
FILE: stat.h non-indexed
FILE: types.h non-indexed
FILE: xstddef non-indexed
FILE: cstddef non-indexed
FILE: initializer_list non-indexed
FILE: new non-indexed
FILE: exception non-indexed
FILE: type_traits non-indexed
FILE: malloc.h non-indexed
FILE: vcruntime_exception.h non-indexed
FILE: eh.h non-indexed
FILE: corecrt_terminate.h non-indexed
FILE: xutility non-indexed
FILE: utility non-indexed
FILE: iosfwd non-indexed
FILE: cstdio non-indexed
FILE: stdio.h non-indexed
FILE: cstring non-indexed
FILE: string.h non-indexed
FILE: corecrt_memory.h non-indexed
FILE: xatomic0.h non-indexed
FILE: intrin0.h non-indexed
FILE: typeinfo non-indexed
FILE: vcruntime_typeinfo.h non-indexed
FILE: b2Fixture.h
FILE: b2World.h
FILE: b2StackAllocator.h
FILE: b2ContactManager.h
FILE: b2BroadPhase.h
FILE: b2DynamicTree.h
FILE: b2GrowableStack.h
FILE: algorithm non-indexed
FILE: b2WorldCallbacks.h
FILE: b2TimeStep.h
FILE: b2Contact.h
FILE: b2Joint.h
SYMBOL_MACRO: B2_BODY_H [b2Body.h <20:9 20:17>]
SYMBOL_MACRO: B2_MATH_H [b2Math.h <20:9 20:17>]
SYMBOL_MACRO: B2_SETTINGS_H [b2Settings.h <20:9 20:21>]
SYMBOL_MACRO: b2DEBUG [b2Settings.h <27:10 27:16>]
SYMBOL_MACRO: B2_NOT_USED [b2Settings.h <30:9 <30:9 30:19> 30:33>]
SYMBOL_MACRO: b2Assert [b2Settings.h <31:9 <31:9 31:16> 31:28>]
SYMBOL_MACRO: b2_maxFloat [b2Settings.h <42:9 <42:9 42:19> 42:21>]
SYMBOL_MACRO: b2_epsilon [b2Settings.h <43:9 <43:9 43:18> 43:20>]
SYMBOL_MACRO: b2_pi [b2Settings.h <44:9 <44:9 44:13> 44:16>]
SYMBOL_MACRO: b2_maxManifoldPoints [b2Settings.h <54:9 <54:9 54:28> 54:29>]
SYMBOL_MACRO: b2_maxPolygonVertices [b2Settings.h <58:9 <58:9 58:29> 58:30>]
SYMBOL_MACRO: b2_aabbExtension [b2Settings.h <63:9 <63:9 63:24> 63:26>]
SYMBOL_MACRO: b2_aabbMultiplier [b2Settings.h <68:9 <68:9 68:25> 68:27>]
SYMBOL_MACRO: b2_linearSlop [b2Settings.h <72:9 <72:9 72:21> 72:24>]
SYMBOL_MACRO: b2_angularSlop [b2Settings.h <76:9 <76:9 76:22> 76:47>]
SYMBOL_MACRO: b2_polygonRadius [b2Settings.h <81:9 <81:9 81:24> 81:47>]
SYMBOL_MACRO: b2_maxSubSteps [b2Settings.h <84:9 <84:9 84:22> 84:25>]
SYMBOL_MACRO: b2_maxTOIContacts [b2Settings.h <90:9 <90:9 90:25> 90:28>]
SYMBOL_MACRO: b2_velocityThreshold [b2Settings.h <94:9 <94:9 94:28> 94:30>]
SYMBOL_MACRO: b2_maxLinearCorrection [b2Settings.h <98:9 <98:9 98:30> 98:32>]
SYMBOL_MACRO: b2_maxAngularCorrection [b2Settings.h <102:9 <102:9 102:31> 102:55>]
SYMBOL_MACRO: b2_maxTranslation [b2Settings.h <106:9 <106:9 106:25> 106:28>]
SYMBOL_MACRO: b2_maxTranslationSquared [b2Settings.h <107:9 <107:9 107:32> 107:71>]
SYMBOL_MACRO: b2_maxRotation [b2Settings.h <111:9 <111:9 111:22> 111:39>]
SYMBOL_MACRO: b2_maxRotationSquared [b2Settings.h <112:9 <112:9 112:29> 112:63>]
SYMBOL_MACRO: b2_baumgarte [b2Settings.h <117:9 <117:9 117:20> 117:24>]
SYMBOL_MACRO: b2_toiBaugarte [b2Settings.h <118:9 <118:9 118:22> 118:26>]
SYMBOL_MACRO: b2_timeToSleep [b2Settings.h <124:9 <124:9 124:22> 124:26>]
SYMBOL_MACRO: b2_linearSleepTolerance [b2Settings.h <127:9 <127:9 127:31> 127:33>]
SYMBOL_MACRO: b2_angularSleepTolerance [b2Settings.h <130:9 <130:9 130:32> 130:55>]
SYMBOL_MACRO: b2Sqrt [b2Math.h <49:9 <49:9 49:14> 49:25>]
SYMBOL_MACRO: b2Atan2 [b2Math.h <50:9 <50:9 50:15> 50:33>]
SYMBOL_MACRO: B2_SHAPE_H [b2Shape.h <20:9 20:18>]
SYMBOL_MACRO: B2_BLOCK_ALLOCATOR_H [b2BlockAllocator.h <20:9 20:28>]
SYMBOL_MACRO: B2_COLLISION_H [b2Collision.h <20:9 20:22>]
SYMBOL_MACRO: B2_FIXTURE_H [b2Fixture.h <20:9 20:20>]
SYMBOL_MACRO: B2_WORLD_H [b2World.h <20:9 20:18>]
SYMBOL_MACRO: B2_STACK_ALLOCATOR_H [b2StackAllocator.h <20:9 20:28>]
SYMBOL_MACRO: B2_CONTACT_MANAGER_H [b2ContactManager.h <20:9 20:28>]
SYMBOL_MACRO: B2_BROAD_PHASE_H [b2BroadPhase.h <20:9 20:24>]
SYMBOL_MACRO: B2_DYNAMIC_TREE_H [b2DynamicTree.h <20:9 20:25>]
SYMBOL_MACRO: B2_GROWABLE_STACK_H [b2GrowableStack.h <20:9 20:27>]
SYMBOL_MACRO: b2_nullNode [b2DynamicTree.h <25:9 <25:9 25:19> 25:23>]
SYMBOL_MACRO: B2_WORLD_CALLBACKS_H [b2WorldCallbacks.h <20:9 20:28>]
SYMBOL_MACRO: B2_TIME_STEP_H [b2TimeStep.h <20:9 20:22>]
SYMBOL_MACRO: B2_CONTACT_H [b2Contact.h <20:9 20:20>]
SYMBOL_MACRO: B2_JOINT_H [b2Joint.h <20:9 20:18>]
SYMBOL_TYPEDEF: int8 [b2Settings.h <33:21 33:24>]
SYMBOL_BUILTIN_TYPE: signed char
SYMBOL_TYPEDEF: int16 [b2Settings.h <34:22 34:26>]
SYMBOL_BUILTIN_TYPE: short
SYMBOL_TYPEDEF: int32 [b2Settings.h <35:20 35:24>]
SYMBOL_BUILTIN_TYPE: int
SYMBOL_TYPEDEF: uint8 [b2Settings.h <36:23 36:27>]
SYMBOL_BUILTIN_TYPE: unsigned char
SYMBOL_TYPEDEF: uint16 [b2Settings.h <37:24 37:29>]
SYMBOL_BUILTIN_TYPE: unsigned short
SYMBOL_TYPEDEF: uint32 [b2Settings.h <38:22 38:27>]
SYMBOL_BUILTIN_TYPE: unsigned int
SYMBOL_TYPEDEF: float32 [b2Settings.h <39:15 39:21>]
SYMBOL_BUILTIN_TYPE: float
SYMBOL_TYPEDEF: float64 [b2Settings.h <40:16 40:22>]
SYMBOL_BUILTIN_TYPE: double
SYMBOL_FUNCTION: void * b2Alloc(int32) [b2Settings.h <135:1 <135:7 135:13> 135:25>]
SYMBOL_BUILTIN_TYPE: void
SYMBOL_FUNCTION: void b2Free(void *) [b2Settings.h <138:1 <138:6 138:11> 138:22>]
SYMBOL_FUNCTION: void b2Log(const char *) [b2Settings.h <141:1 <141:6 141:10> 141:35>]
SYMBOL_BUILTIN_TYPE: char
SYMBOL_STRUCT: b2Version [b2Settings.h <145:1 <145:8 145:16> 150:1>]
SYMBOL_FIELD: public int32 b2Version::major [b2Settings.h <147:8 147:12>]
SYMBOL_FIELD: public int32 b2Version::minor [b2Settings.h <148:8 148:12>]
SYMBOL_FIELD: public int32 b2Version::revision [b2Settings.h <149:8 149:15>]
SYMBOL_GLOBAL_VARIABLE: b2Version b2_version [b2Settings.h <153:18 153:27>]
SYMBOL_FUNCTION: bool b2IsValid(float32) [b2Math.h <26:1 <26:1 <26:13 26:21> 26:32> 30:1>]
SYMBOL_BUILTIN_TYPE: bool
SYMBOL_FUNCTION: float32 b2InvSqrt(float32) [b2Math.h <33:1 <33:1 <33:16 33:24> 33:35> 47:1>]
SYMBOL_UNION: b2InvSqrt::anonymous union (b2Math.h<35:2>) [b2Math.h <35:2 <35:2 35:6> 39:2>]
SYMBOL_FIELD: public float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <37:11 37:11>]
SYMBOL_FIELD: public int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <38:9 38:9>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::() [b2Math.h <35:2 <35:2 35:6> 35:6>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::(const b2InvSqrt::anonymous union (b2Math.h<35:2>) &) [b2Math.h <35:2 <35:2 35:6> 35:6>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::(b2InvSqrt::anonymous union (b2Math.h<35:2>) &&) [b2Math.h <35:2 <35:2 35:6> 35:6>]
SYMBOL_STRUCT: b2Vec2 [b2Math.h <53:1 <53:8 53:13> 141:1>]
SYMBOL_STRUCT: b2Vec2 [b2WorldCallbacks.h <24:8 24:13>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2() [b2Math.h <56:2 <56:2 <56:2 56:7> 56:9> 56:12>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(float32, float32) [b2Math.h <59:2 <59:2 <59:2 59:7> 59:33> 59:53>]
SYMBOL_FIELD: public float32 b2Vec2::x [b2Math.h <140:10 140:10>]
SYMBOL_FIELD: public float32 b2Vec2::y [b2Math.h <140:13 140:13>]
SYMBOL_METHOD: public void b2Vec2::SetZero() [b2Math.h <62:2 <62:2 <62:7 62:13> 62:15> 62:39>]
SYMBOL_METHOD: public void b2Vec2::Set(float32, float32) [b2Math.h <65:2 <65:2 <65:7 65:9> 65:33> 65:53>]
SYMBOL_METHOD: public b2Vec2 b2Vec2::operator-() const [b2Math.h <68:2 <68:2 <68:9 68:18> 68:26> 68:65>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public float32 b2Vec2::operator()(int32) const [b2Math.h <71:2 <71:2 <71:10 71:20> 71:36> 74:2>]
SYMBOL_METHOD: public float32 & b2Vec2::operator()(int32) [b2Math.h <77:2 <77:2 <77:11 77:21> 77:31> 80:2>]
SYMBOL_METHOD: public void b2Vec2::operator+=(const b2Vec2 &) [b2Math.h <83:2 <83:2 <83:7 83:17> 83:35> 86:2>]
SYMBOL_METHOD: public void b2Vec2::operator-=(const b2Vec2 &) [b2Math.h <89:2 <89:2 <89:7 89:17> 89:35> 92:2>]
SYMBOL_METHOD: public void b2Vec2::operator*=(float32) [b2Math.h <95:2 <95:2 <95:7 95:17> 95:29> 98:2>]
SYMBOL_METHOD: public float32 b2Vec2::Length() const [b2Math.h <101:2 <101:2 <101:10 101:15> 101:23> 104:2>]
SYMBOL_FUNCTION: float sqrtf(float)
SYMBOL_METHOD: public float32 b2Vec2::LengthSquared() const [b2Math.h <108:2 <108:2 <108:10 108:22> 108:30> 111:2>]
SYMBOL_METHOD: public float32 b2Vec2::Normalize() [b2Math.h <114:2 <114:2 <114:10 114:18> 114:20> 126:2>]
SYMBOL_METHOD: public bool b2Vec2::IsValid() const [b2Math.h <129:2 <129:2 <129:7 129:13> 129:21> 132:2>]
SYMBOL_METHOD: public b2Vec2 b2Vec2::Skew() const [b2Math.h <135:2 <135:2 <135:9 135:12> 135:20> 138:2>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(const b2Vec2 &) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public void b2Vec2::~b2Vec2() [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_STRUCT: b2Vec3 [b2Math.h <144:1 <144:8 144:13> 180:1>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3() [b2Math.h <147:2 <147:2 <147:2 147:7> 147:9> 147:12>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <150:2 <150:2 <150:2 150:7> 150:46> 150:74>]
SYMBOL_FIELD: public float32 b2Vec3::x [b2Math.h <179:10 179:10>]
SYMBOL_FIELD: public float32 b2Vec3::y [b2Math.h <179:13 179:13>]
SYMBOL_FIELD: public float32 b2Vec3::z [b2Math.h <179:16 179:16>]
SYMBOL_METHOD: public void b2Vec3::SetZero() [b2Math.h <153:2 <153:2 <153:7 153:13> 153:15> 153:49>]
SYMBOL_METHOD: public void b2Vec3::Set(float32, float32, float32) [b2Math.h <156:2 <156:2 <156:7 156:9> 156:45> 156:73>]
SYMBOL_METHOD: public b2Vec3 b2Vec3::operator-() const [b2Math.h <159:2 <159:2 <159:9 159:18> 159:26> 159:69>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(b2Vec3 &&) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public void b2Vec3::operator+=(const b2Vec3 &) [b2Math.h <162:2 <162:2 <162:7 162:17> 162:35> 165:2>]
SYMBOL_METHOD: public void b2Vec3::operator-=(const b2Vec3 &) [b2Math.h <168:2 <168:2 <168:7 168:17> 168:35> 171:2>]
SYMBOL_METHOD: public void b2Vec3::operator*=(float32) [b2Math.h <174:2 <174:2 <174:7 174:17> 174:29> 177:2>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(const b2Vec3 &) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public b2Vec3 & b2Vec3::operator=(b2Vec3 &&) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public void b2Vec3::~b2Vec3() [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_STRUCT: b2Mat22 [b2Math.h <183:1 <183:8 183:14> 254:1>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22() [b2Math.h <186:2 <186:2 <186:2 186:8> 186:10> 186:13>]
SYMBOL_FIELD: public b2Vec2 b2Mat22::ex [b2Math.h <253:9 253:10>]
SYMBOL_FIELD: public b2Vec2 b2Mat22::ey [b2Math.h <253:13 253:14>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <189:2 <189:2 <189:2 189:8> 189:44> 193:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(float32, float32, float32, float32) [b2Math.h <196:2 <196:2 <196:2 196:8> 196:60> 200:2>]
SYMBOL_METHOD: public void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) [b2Math.h <203:2 <203:2 <203:7 203:9> 203:45> 207:2>]
SYMBOL_METHOD: public void b2Mat22::SetIdentity() [b2Math.h <210:2 <210:2 <210:7 210:17> 210:19> 214:2>]
SYMBOL_METHOD: public void b2Mat22::SetZero() [b2Math.h <217:2 <217:2 <217:7 217:13> 217:15> 221:2>]
SYMBOL_METHOD: public b2Mat22 b2Mat22::GetInverse() const [b2Math.h <223:2 <223:2 <223:10 223:19> 223:27> 235:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(b2Mat22 &&) [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_METHOD: public b2Vec2 b2Mat22::Solve(const b2Vec2 &) const [b2Math.h <239:2 <239:2 <239:9 239:13> 239:36> 251:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(const b2Mat22 &) [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_METHOD: public void b2Mat22::~b2Mat22() [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_STRUCT: b2Mat33 [b2Math.h <257:1 <257:8 257:14> 296:1>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33() [b2Math.h <260:2 <260:2 <260:2 260:8> 260:10> 260:13>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ex [b2Math.h <295:9 295:10>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ey [b2Math.h <295:13 295:14>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ez [b2Math.h <295:17 295:18>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) [b2Math.h <263:2 <263:2 <263:2 263:8> 263:62> 268:2>]
SYMBOL_METHOD: public void b2Mat33::SetZero() [b2Math.h <271:2 <271:2 <271:7 271:13> 271:15> 276:2>]
SYMBOL_METHOD: public b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const [b2Math.h <280:2 <280:9 280:15> 280:38>]
SYMBOL_METHOD: public b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const [b2Math.h <285:2 <285:9 285:15> 285:38>]
SYMBOL_METHOD: public void b2Mat33::GetInverse22(b2Mat33 *) const [b2Math.h <289:2 <289:7 289:18> 289:36>]
SYMBOL_METHOD: public void b2Mat33::GetSymInverse33(b2Mat33 *) const [b2Math.h <293:2 <293:7 293:21> 293:39>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(const b2Mat33 &) [b2Math.h <257:8 <257:8 257:14> 257:14>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(b2Mat33 &&) [b2Math.h <257:8 <257:8 257:14> 257:14>]
SYMBOL_STRUCT: b2Rot [b2Math.h <299:1 <299:8 299:12> 346:1>]
SYMBOL_METHOD: public void b2Rot::b2Rot() [b2Math.h <301:2 <301:2 <301:2 301:6> 301:8> 301:11>]
SYMBOL_METHOD: public void b2Rot::b2Rot(float32) [b2Math.h <304:2 <304:2 <304:11 304:15> 304:30> 309:2>]
SYMBOL_FIELD: public float32 b2Rot::s [b2Math.h <345:10 345:10>]
SYMBOL_FUNCTION: float sinf(float)
SYMBOL_FIELD: public float32 b2Rot::c [b2Math.h <345:13 345:13>]
SYMBOL_FUNCTION: float cosf(float)
SYMBOL_METHOD: public void b2Rot::Set(float32) [b2Math.h <312:2 <312:2 <312:7 312:9> 312:24> 317:2>]
SYMBOL_METHOD: public void b2Rot::SetIdentity() [b2Math.h <320:2 <320:2 <320:7 320:17> 320:19> 324:2>]
SYMBOL_METHOD: public float32 b2Rot::GetAngle() const [b2Math.h <327:2 <327:2 <327:10 327:17> 327:25> 330:2>]
SYMBOL_FUNCTION: float atan2f(float, float)
SYMBOL_METHOD: public b2Vec2 b2Rot::GetXAxis() const [b2Math.h <333:2 <333:2 <333:9 333:16> 333:24> 336:2>]
SYMBOL_METHOD: public b2Vec2 b2Rot::GetYAxis() const [b2Math.h <339:2 <339:2 <339:9 339:16> 339:24> 342:2>]
SYMBOL_METHOD: public void b2Rot::b2Rot(const b2Rot &) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public void b2Rot::b2Rot(b2Rot &&) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public void b2Rot::~b2Rot() [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public b2Rot & b2Rot::operator=(const b2Rot &) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_STRUCT: b2Transform [b2Math.h <350:1 <350:8 350:18> 374:1>]
SYMBOL_STRUCT: b2Transform [b2WorldCallbacks.h <25:8 25:18>]
SYMBOL_METHOD: public void b2Transform::b2Transform() [b2Math.h <353:2 <353:2 <353:2 353:12> 353:14> 353:17>]
SYMBOL_FIELD: public b2Vec2 b2Transform::p [b2Math.h <372:9 372:9>]
SYMBOL_FIELD: public b2Rot b2Transform::q [b2Math.h <373:8 373:8>]
SYMBOL_METHOD: public void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) [b2Math.h <356:2 <356:2 <356:2 356:12> 356:59> 356:89>]
SYMBOL_METHOD: public void b2Transform::SetIdentity() [b2Math.h <359:2 <359:2 <359:7 359:17> 359:19> 363:2>]
SYMBOL_METHOD: public void b2Transform::Set(const b2Vec2 &, float32) [b2Math.h <366:2 <366:2 <366:7 366:9> 366:48> 370:2>]
SYMBOL_METHOD: public void b2Transform::b2Transform(const b2Transform &) [b2Math.h <350:8 <350:8 350:18> 350:18>]
SYMBOL_METHOD: public void b2Transform::b2Transform(b2Transform &&) [b2Math.h <350:8 <350:8 350:18> 350:18>]
SYMBOL_METHOD: public void b2Transform::~b2Transform() [b2Math.h <350:8 <350:8 350:18> 350:18>]
QUALIFIER: b2Sweep [b2Math.h <697:13 697:19>]
QUALIFIER: b2Sweep [b2Math.h <707:13 707:19>]
QUALIFIER: b2Sweep [b2Math.h <717:13 717:19>]
SYMBOL_STRUCT: b2Sweep [b2Math.h <380:1 <380:8 380:14> 400:1>]
SYMBOL_METHOD: public void b2Sweep::GetTransform(b2Transform *, float32) const [b2Math.h <384:2 <384:7 384:18> 384:56>]
SYMBOL_METHOD: public void b2Sweep::GetTransform(b2Transform *, float32) const [b2Math.h <697:1 <697:22 697:33> 705:1>]
SYMBOL_METHOD: public void b2Sweep::Advance(float32) [b2Math.h <388:2 <388:7 388:13> 388:28>]
SYMBOL_METHOD: public void b2Sweep::Advance(float32) [b2Math.h <707:1 <707:22 707:28> 714:1>]
SYMBOL_METHOD: public void b2Sweep::Normalize() [b2Math.h <391:2 <391:7 391:15> 391:17>]
SYMBOL_METHOD: public void b2Sweep::Normalize() [b2Math.h <717:1 <717:22 717:30> 723:1>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::localCenter [b2Math.h <393:9 393:19>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::c0 [b2Math.h <394:9 394:10>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::c [b2Math.h <394:13 394:13>]
SYMBOL_FIELD: public float32 b2Sweep::a0 [b2Math.h <395:10 395:11>]
SYMBOL_FIELD: public float32 b2Sweep::a [b2Math.h <395:14 395:14>]
SYMBOL_FIELD: public float32 b2Sweep::alpha0 [b2Math.h <399:10 399:15>]
SYMBOL_METHOD: public void b2Sweep::b2Sweep(const b2Sweep &) [b2Math.h <380:8 <380:8 380:14> 380:14>]
SYMBOL_METHOD: public void b2Sweep::b2Sweep(b2Sweep &&) [b2Math.h <380:8 <380:8 380:14> 380:14>]
SYMBOL_METHOD: public void b2Sweep::~b2Sweep() [b2Math.h <380:8 <380:8 380:14> 380:14>]
SYMBOL_METHOD: public void b2Sweep::b2Sweep() [b2Math.h <380:8 <380:8 380:14> 380:14>]
SYMBOL_GLOBAL_VARIABLE: const b2Vec2 b2Vec2_zero [b2Math.h <403:21 403:31>]
SYMBOL_FUNCTION: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <406:1 <406:1 <406:16 406:20> 406:54> 409:1>]
SYMBOL_FUNCTION: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2Math.h <412:1 <412:1 <412:16 412:22> 412:56> 415:1>]
SYMBOL_FUNCTION: b2Vec2 b2Cross(const b2Vec2 &, float32) [b2Math.h <419:1 <419:1 <419:15 419:21> 419:49> 422:1>]
SYMBOL_FUNCTION: b2Vec2 b2Cross(float32, const b2Vec2 &) [b2Math.h <426:1 <426:1 <426:15 426:21> 426:49> 429:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <433:1 <433:1 <433:15 433:19> 433:54> 436:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) [b2Math.h <440:1 <440:1 <440:15 440:20> 440:55> 443:1>]
SYMBOL_FUNCTION: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <446:1 <446:1 <446:15 446:24> 446:59> 449:1>]
SYMBOL_FUNCTION: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <452:1 <452:1 <452:15 452:24> 452:59> 455:1>]
SYMBOL_FUNCTION: b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <457:1 <457:1 <457:15 457:24> 457:53> 460:1>]
SYMBOL_FUNCTION: bool operator==(const b2Vec2 &, const b2Vec2 &) [b2Math.h <462:1 <462:1 <462:13 462:23> 462:58> 465:1>]
SYMBOL_FUNCTION: bool operator!=(const b2Vec2 &, const b2Vec2 &) [b2Math.h <467:1 <467:1 <467:13 467:23> 467:58> 470:1>]
SYMBOL_FUNCTION: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) [b2Math.h <472:1 <472:1 <472:16 472:25> 472:59> 476:1>]
SYMBOL_FUNCTION: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) [b2Math.h <478:1 <478:1 <478:16 478:32> 478:66> 482:1>]
SYMBOL_FUNCTION: b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <484:1 <484:1 <484:15 484:24> 484:53> 487:1>]
SYMBOL_FUNCTION: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <490:1 <490:1 <490:15 490:24> 490:59> 493:1>]
SYMBOL_FUNCTION: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) [b2Math.h <496:1 <496:1 <496:15 496:24> 496:59> 499:1>]
SYMBOL_FUNCTION: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) [b2Math.h <502:1 <502:1 <502:16 502:20> 502:54> 505:1>]
SYMBOL_FUNCTION: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) [b2Math.h <508:1 <508:1 <508:15 508:21> 508:55> 511:1>]
SYMBOL_FUNCTION: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) [b2Math.h <513:1 <513:1 <513:16 513:25> 513:62> 516:1>]
SYMBOL_FUNCTION: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) [b2Math.h <519:1 <519:1 <519:16 519:20> 519:56> 522:1>]
SYMBOL_FUNCTION: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) [b2Math.h <525:1 <525:1 <525:16 525:21> 525:57> 530:1>]
SYMBOL_FUNCTION: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) [b2Math.h <533:1 <533:1 <533:15 533:19> 533:54> 536:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) [b2Math.h <539:1 <539:1 <539:15 539:21> 539:56> 542:1>]
SYMBOL_FUNCTION: b2Rot b2Mul(const b2Rot &, const b2Rot &) [b2Math.h <545:1 <545:1 <545:14 545:18> 545:50> 555:1>]
SYMBOL_FUNCTION: b2Rot b2MulT(const b2Rot &, const b2Rot &) [b2Math.h <558:1 <558:1 <558:14 558:19> 558:51> 568:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <571:1 <571:1 <571:15 571:19> 571:52> 574:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2Math.h <577:1 <577:1 <577:15 577:20> 577:53> 580:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Math.h <582:1 <582:1 <582:15 582:19> 582:58> 588:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) [b2Math.h <590:1 <590:1 <590:15 590:20> 590:59> 598:1>]
SYMBOL_FUNCTION: b2Transform b2Mul(const b2Transform &, const b2Transform &) [b2Math.h <602:1 <602:1 <602:20 602:24> 602:68> 608:1>]
SYMBOL_FUNCTION: b2Transform b2MulT(const b2Transform &, const b2Transform &) [b2Math.h <612:1 <612:1 <612:20 612:25> 612:69> 618:1>]
SYMBOL_FUNCTION: T b2Abs<typename T>(T) [b2Math.h <620:1 <621:1 <621:10 621:14> 621:19> 624:1>]
SYMBOL_FUNCTION: float b2Abs<float>(float) [b2Math.h <621:1 <621:1 <621:10 621:14> 621:19> 624:1>]
SYMBOL_FUNCTION: b2Vec2 b2Abs<b2Vec2>(b2Vec2) [b2Math.h <621:1 <621:10 621:14> 624:1>]
SYMBOL_FUNCTION: b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <626:1 <626:1 <626:15 626:19> 626:36> 629:1>]
SYMBOL_FUNCTION: b2Mat22 b2Abs(const b2Mat22 &) [b2Math.h <631:1 <631:1 <631:16 631:20> 631:38> 634:1>]
SYMBOL_FUNCTION: T b2Min<typename T>(T, T) [b2Math.h <636:1 <637:1 <637:10 637:14> 637:24> 640:1>]
SYMBOL_FUNCTION: float b2Min<float>(float, float) [b2Math.h <637:1 <637:1 <637:10 637:14> 637:24> 640:1>]
SYMBOL_FUNCTION: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) [b2Math.h <637:1 <637:10 637:14> 640:1>]
SYMBOL_FUNCTION: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Math.h <642:1 <642:1 <642:15 642:19> 642:53> 645:1>]
SYMBOL_FUNCTION: T b2Max<typename T>(T, T) [b2Math.h <647:1 <648:1 <648:10 648:14> 648:24> 651:1>]
SYMBOL_FUNCTION: float b2Max<float>(float, float) [b2Math.h <648:1 <648:1 <648:10 648:14> 648:24> 651:1>]
SYMBOL_FUNCTION: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) [b2Math.h <648:1 <648:10 648:14> 651:1>]
SYMBOL_FUNCTION: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Math.h <653:1 <653:1 <653:15 653:19> 653:53> 656:1>]
SYMBOL_FUNCTION: T b2Clamp<typename T>(T, T, T) [b2Math.h <658:1 <659:1 <659:10 659:16> 659:36> 662:1>]
SYMBOL_FUNCTION: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) [b2Math.h <664:1 <664:1 <664:15 664:21> 664:77> 667:1>]
SYMBOL_FUNCTION: void b2Swap<typename T>(T &, T &) [b2Math.h <669:1 <669:22 <669:34 669:39> 669:51> 674:1>]
SYMBOL_FUNCTION: uint32 b2NextPowerOfTwo(uint32) [b2Math.h <681:1 <681:1 <681:15 681:30> 681:40> 689:1>]
SYMBOL_FUNCTION: bool b2IsPowerOfTwo(uint32) [b2Math.h <691:1 <691:1 <691:13 691:26> 691:36> 695:1>]
SYMBOL_FUNCTION: void _wassert(const wchar_t *, const wchar_t *, unsigned int)
SYMBOL_FUNCTION: float floorf(float)
SYMBOL_GLOBAL_VARIABLE: const int32 b2_chunkSize [b2BlockAllocator.h <24:13 24:24>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_maxBlockSize [b2BlockAllocator.h <25:13 25:27>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_blockSizes [b2BlockAllocator.h <26:13 26:25>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_chunkArrayIncrement [b2BlockAllocator.h <27:13 27:34>]
SYMBOL_STRUCT: b2Block [b2BlockAllocator.h <29:8 29:14>]
SYMBOL_STRUCT: b2Chunk [b2BlockAllocator.h <30:8 30:14>]
SYMBOL_CLASS: b2BlockAllocator [b2BlockAllocator.h <35:1 <35:7 35:22> 60:1>]
SYMBOL_CLASS: b2BlockAllocator [b2Fixture.h <26:7 26:22>]
SYMBOL_CLASS: b2BlockAllocator [b2ContactManager.h <27:7 27:22>]
SYMBOL_CLASS: b2BlockAllocator [b2Contact.h <31:7 31:22>]
SYMBOL_CLASS: b2BlockAllocator [b2Joint.h <27:7 27:22>]
SYMBOL_METHOD: public void b2BlockAllocator::b2BlockAllocator() [b2BlockAllocator.h <38:2 <38:2 38:17> 38:19>]
SYMBOL_METHOD: public void b2BlockAllocator::~b2BlockAllocator() [b2BlockAllocator.h <39:2 <39:2 39:18> 39:20>]
SYMBOL_METHOD: public void * b2BlockAllocator::Allocate(int32) [b2BlockAllocator.h <42:2 <42:8 42:15> 42:27>]
SYMBOL_METHOD: public void b2BlockAllocator::Free(void *, int32) [b2BlockAllocator.h <45:2 <45:7 45:10> 45:31>]
SYMBOL_METHOD: public void b2BlockAllocator::Clear() [b2BlockAllocator.h <47:2 <47:7 47:11> 47:13>]
SYMBOL_FIELD: private b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.h <51:11 51:18>]
SYMBOL_FIELD: private int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.h <52:8 52:19>]
SYMBOL_FIELD: private int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.h <53:8 53:19>]
SYMBOL_FIELD: private b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.h <55:11 55:21>]
SYMBOL_FIELD: private static int32 [] b2BlockAllocator::s_blockSizes [b2BlockAllocator.h <57:15 57:26>]
SYMBOL_FIELD: private static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.h <58:15 58:31>]
SYMBOL_FIELD: private static bool b2BlockAllocator::s_blockSizeLookupInitialized [b2BlockAllocator.h <59:14 59:41>]
SYMBOL_METHOD: public void b2BlockAllocator::b2BlockAllocator(const b2BlockAllocator &) [b2BlockAllocator.h <35:7 <35:7 35:22> 35:22>]
QUALIFIER: b2Shape [b2Shape.h <99:8 99:14>]
QUALIFIER: b2Shape [b2Shape.h <99:22 99:28>]
QUALIFIER: b2Shape [b2Fixture.h <112:2 112:8>]
QUALIFIER: b2Shape [b2Fixture.h <238:8 238:14>]
QUALIFIER: b2Shape [b2Contact.h <180:7 180:13>]
QUALIFIER: b2Shape [b2Contact.h <180:28 180:34>]
QUALIFIER: b2Shape [b2Contact.h <183:42 183:48>]
QUALIFIER: b2Shape [b2Contact.h <183:63 183:69>]
QUALIFIER: b2Shape [b2Contact.h <192:39 192:45>]
QUALIFIER: b2Shape [b2Contact.h <192:61 192:67>]
SYMBOL_CLASS: b2Shape [b2Shape.h <42:1 <42:7 42:13> 97:1>]
SYMBOL_CLASS: b2Shape [b2Collision.h <29:7 29:13>]
SYMBOL_CLASS: b2CircleShape [b2Collision.h <30:7 30:19>]
SYMBOL_CLASS: b2EdgeShape [b2Collision.h <31:7 31:17>]
SYMBOL_CLASS: b2PolygonShape [b2Collision.h <32:7 32:20>]
SYMBOL_GLOBAL_VARIABLE: const uint8 b2_nullFeature [b2Collision.h <34:13 34:26>]
SYMBOL_STRUCT: b2ContactFeature [b2Collision.h <38:1 <38:8 38:23> 50:1>]
SYMBOL_ENUM: public b2ContactFeature::Type [b2Collision.h <40:2 <40:7 40:10> 44:2>]
SYMBOL_ENUM_CONSTANT: b2ContactFeature::Type::e_vertex [b2Collision.h <42:3 42:10>]
SYMBOL_ENUM_CONSTANT: b2ContactFeature::Type::e_face [b2Collision.h <43:3 43:8>]
SYMBOL_FIELD: public uint8 b2ContactFeature::indexA [b2Collision.h <46:8 46:13>]
SYMBOL_FIELD: public uint8 b2ContactFeature::indexB [b2Collision.h <47:8 47:13>]
SYMBOL_FIELD: public uint8 b2ContactFeature::typeA [b2Collision.h <48:8 48:12>]
SYMBOL_FIELD: public uint8 b2ContactFeature::typeB [b2Collision.h <49:8 49:12>]
SYMBOL_METHOD: public b2ContactFeature & b2ContactFeature::operator=(const b2ContactFeature &) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public b2ContactFeature & b2ContactFeature::operator=(b2ContactFeature &&) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public void b2ContactFeature::b2ContactFeature() [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public void b2ContactFeature::~b2ContactFeature() [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public void b2ContactFeature::b2ContactFeature(const b2ContactFeature &) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public void b2ContactFeature::b2ContactFeature(b2ContactFeature &&) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_UNION: b2ContactID [b2Collision.h <53:1 <53:7 53:17> 57:1>]
SYMBOL_FIELD: public b2ContactFeature b2ContactID::cf [b2Collision.h <55:19 55:20>]
SYMBOL_FIELD: public uint32 b2ContactID::key [b2Collision.h <56:9 56:11>]
SYMBOL_METHOD: public b2ContactID & b2ContactID::operator=(const b2ContactID &) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public b2ContactID & b2ContactID::operator=(b2ContactID &&) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public void b2ContactID::b2ContactID() [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public void b2ContactID::~b2ContactID() [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public void b2ContactID::b2ContactID(const b2ContactID &) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public void b2ContactID::b2ContactID(b2ContactID &&) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_STRUCT: b2ManifoldPoint [b2Collision.h <69:1 <69:8 69:22> 75:1>]
SYMBOL_FIELD: public b2Vec2 b2ManifoldPoint::localPoint [b2Collision.h <71:9 71:18>]
SYMBOL_FIELD: public float32 b2ManifoldPoint::normalImpulse [b2Collision.h <72:10 72:22>]
SYMBOL_FIELD: public float32 b2ManifoldPoint::tangentImpulse [b2Collision.h <73:10 73:23>]
SYMBOL_FIELD: public b2ContactID b2ManifoldPoint::id [b2Collision.h <74:14 74:15>]
SYMBOL_METHOD: public b2ManifoldPoint & b2ManifoldPoint::operator=(const b2ManifoldPoint &) [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_METHOD: public b2ManifoldPoint & b2ManifoldPoint::operator=(b2ManifoldPoint &&) [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_METHOD: public void b2ManifoldPoint::b2ManifoldPoint() [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_METHOD: public void b2ManifoldPoint::~b2ManifoldPoint() [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_METHOD: public void b2ManifoldPoint::b2ManifoldPoint(const b2ManifoldPoint &) [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_METHOD: public void b2ManifoldPoint::b2ManifoldPoint(b2ManifoldPoint &&) [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_STRUCT: b2Manifold [b2Collision.h <93:1 <93:8 93:17> 107:1>]
SYMBOL_STRUCT: b2Manifold [b2WorldCallbacks.h <31:8 31:17>]
SYMBOL_ENUM: public b2Manifold::Type [b2Collision.h <95:2 <95:7 95:10> 100:2>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_circles [b2Collision.h <97:3 97:11>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_faceA [b2Collision.h <98:3 98:9>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_faceB [b2Collision.h <99:3 99:9>]
SYMBOL_FIELD: public b2ManifoldPoint [] b2Manifold::points [b2Collision.h <102:18 102:23>]
SYMBOL_FIELD: public b2Vec2 b2Manifold::localNormal [b2Collision.h <103:9 103:19>]
SYMBOL_FIELD: public b2Vec2 b2Manifold::localPoint [b2Collision.h <104:9 104:18>]
SYMBOL_FIELD: public b2Manifold::Type b2Manifold::type [b2Collision.h <105:7 105:10>]
SYMBOL_FIELD: public int32 b2Manifold::pointCount [b2Collision.h <106:8 106:17>]
SYMBOL_METHOD: public b2Manifold & b2Manifold::operator=(const b2Manifold &) [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_METHOD: public b2Manifold & b2Manifold::operator=(b2Manifold &&) [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_METHOD: public void b2Manifold::b2Manifold() [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_METHOD: public void b2Manifold::b2Manifold(const b2Manifold &) [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_METHOD: public void b2Manifold::b2Manifold(b2Manifold &&) [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_METHOD: public void b2Manifold::~b2Manifold() [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_STRUCT: b2WorldManifold [b2Collision.h <110:1 <110:8 110:22> 123:1>]
SYMBOL_METHOD: public void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) [b2Collision.h <116:2 <116:7 116:16> 118:45>]
SYMBOL_FIELD: public b2Vec2 b2WorldManifold::normal [b2Collision.h <120:9 120:14>]
SYMBOL_FIELD: public b2Vec2 [] b2WorldManifold::points [b2Collision.h <121:9 121:14>]
SYMBOL_FIELD: public float32 [] b2WorldManifold::separations [b2Collision.h <122:10 122:20>]
SYMBOL_ENUM: b2PointState [b2Collision.h <126:1 <126:6 126:17> 132:1>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_nullState [b2Collision.h <128:2 128:13>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_addState [b2Collision.h <129:2 129:12>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_persistState [b2Collision.h <130:2 130:16>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_removeState [b2Collision.h <131:2 131:15>]
SYMBOL_FUNCTION: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) [b2Collision.h <136:1 <136:6 136:21> 137:64>]
SYMBOL_STRUCT: b2ClipVertex [b2Collision.h <140:1 <140:8 140:19> 144:1>]
SYMBOL_FIELD: public b2Vec2 b2ClipVertex::v [b2Collision.h <142:9 142:9>]
SYMBOL_FIELD: public b2ContactID b2ClipVertex::id [b2Collision.h <143:14 143:15>]
SYMBOL_STRUCT: b2RayCastInput [b2Collision.h <147:1 <147:8 147:21> 151:1>]
SYMBOL_FIELD: public b2Vec2 b2RayCastInput::p1 [b2Collision.h <149:9 149:10>]
SYMBOL_FIELD: public b2Vec2 b2RayCastInput::p2 [b2Collision.h <149:13 149:14>]
SYMBOL_FIELD: public float32 b2RayCastInput::maxFraction [b2Collision.h <150:10 150:20>]
SYMBOL_METHOD: public void b2RayCastInput::b2RayCastInput() [b2Collision.h <147:8 <147:8 147:21> 147:21>]
SYMBOL_METHOD: public void b2RayCastInput::b2RayCastInput(const b2RayCastInput &) [b2Collision.h <147:8 <147:8 147:21> 147:21>]
SYMBOL_METHOD: public void b2RayCastInput::b2RayCastInput(b2RayCastInput &&) [b2Collision.h <147:8 <147:8 147:21> 147:21>]
SYMBOL_STRUCT: b2RayCastOutput [b2Collision.h <155:1 <155:8 155:22> 159:1>]
SYMBOL_FIELD: public b2Vec2 b2RayCastOutput::normal [b2Collision.h <157:9 157:14>]
SYMBOL_FIELD: public float32 b2RayCastOutput::fraction [b2Collision.h <158:10 158:17>]
QUALIFIER: b2AABB [b2Collision.h <254:13 254:18>]
SYMBOL_STRUCT: b2AABB [b2Collision.h <162:1 <162:8 162:13> 216:1>]
SYMBOL_STRUCT: b2AABB [b2World.h <29:8 29:13>]
SYMBOL_METHOD: public bool b2AABB::IsValid() const [b2Collision.h <165:2 <165:7 165:13> 165:21>]
SYMBOL_METHOD: public bool b2AABB::IsValid() const [b2Collision.h <254:1 <254:21 254:27> 260:1>]
SYMBOL_METHOD: public b2Vec2 b2AABB::GetCenter() const [b2Collision.h <168:2 <168:2 <168:9 168:17> 168:25> 171:2>]
SYMBOL_FIELD: public b2Vec2 b2AABB::lowerBound [b2Collision.h <214:9 214:18>]
SYMBOL_FIELD: public b2Vec2 b2AABB::upperBound [b2Collision.h <215:9 215:18>]
SYMBOL_METHOD: public b2Vec2 b2AABB::GetExtents() const [b2Collision.h <174:2 <174:2 <174:9 174:18> 174:26> 177:2>]
SYMBOL_METHOD: public float32 b2AABB::GetPerimeter() const [b2Collision.h <180:2 <180:2 <180:10 180:21> 180:29> 185:2>]
SYMBOL_METHOD: public void b2AABB::Combine(const b2AABB &) [b2Collision.h <188:2 <188:2 <188:7 188:13> 188:33> 192:2>]
SYMBOL_METHOD: public void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2Collision.h <195:2 <195:2 <195:7 195:13> 195:55> 199:2>]
SYMBOL_METHOD: public bool b2AABB::Contains(const b2AABB &) const [b2Collision.h <202:2 <202:2 <202:7 202:14> 202:40> 210:2>]
SYMBOL_METHOD: public bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const [b2Collision.h <212:2 <212:7 212:13> 212:73>]
SYMBOL_METHOD: public void b2AABB::b2AABB() [b2Collision.h <162:8 <162:8 162:13> 162:13>]
SYMBOL_METHOD: public void b2AABB::b2AABB(const b2AABB &) [b2Collision.h <162:8 <162:8 162:13> 162:13>]
SYMBOL_METHOD: public void b2AABB::b2AABB(b2AABB &&) [b2Collision.h <162:8 <162:8 162:13> 162:13>]
SYMBOL_FUNCTION: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <219:1 <219:6 219:21> 221:60>]
SYMBOL_FUNCTION: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <224:1 <224:6 224:30> 226:63>]
SYMBOL_FUNCTION: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2Collision.h <229:1 <229:6 229:22> 231:63>]
SYMBOL_FUNCTION: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <234:1 <234:6 234:27> 236:63>]
SYMBOL_FUNCTION: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2Collision.h <239:1 <239:6 239:28> 241:64>]
SYMBOL_FUNCTION: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) [b2Collision.h <244:1 <244:7 244:25> 245:64>]
SYMBOL_FUNCTION: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) [b2Collision.h <248:1 <248:6 248:18> 250:52>]
SYMBOL_FUNCTION: bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2Collision.h <262:1 <262:1 <262:13 262:25> 262:59> 275:1>]
SYMBOL_STRUCT: b2MassData [b2Shape.h <27:1 <27:8 27:17> 37:1>]
SYMBOL_FIELD: public float32 b2MassData::mass [b2Shape.h <30:10 30:13>]
SYMBOL_FIELD: public b2Vec2 b2MassData::center [b2Shape.h <33:9 33:14>]
SYMBOL_FIELD: public float32 b2MassData::I [b2Shape.h <36:10 36:10>]
SYMBOL_METHOD: public void b2MassData::b2MassData() [b2Shape.h <27:8 <27:8 27:17> 27:17>]
SYMBOL_METHOD: public void b2MassData::b2MassData(const b2MassData &) [b2Shape.h <27:8 <27:8 27:17> 27:17>]
SYMBOL_METHOD: public void b2MassData::b2MassData(b2MassData &&) [b2Shape.h <27:8 <27:8 27:17> 27:17>]
SYMBOL_ENUM: public b2Shape::Type [b2Shape.h <46:2 <46:7 46:10> 53:2>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_circle [b2Shape.h <48:3 48:10>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_edge [b2Shape.h <49:3 49:8>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_polygon [b2Shape.h <50:3 50:11>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_chain [b2Shape.h <51:3 51:9>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_typeCount [b2Shape.h <52:3 52:13>]
SYMBOL_METHOD: public void b2Shape::~b2Shape() [b2Shape.h <55:2 <55:2 <55:10 55:17> 55:19> 55:22>]
SYMBOL_METHOD: public b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2Shape.h <58:2 <58:19 58:23> 58:62>]
SYMBOL_METHOD: public b2Shape::Type b2Shape::GetType() const [b2Shape.h <62:2 <62:7 62:13> 62:21>]
SYMBOL_METHOD: public b2Shape::Type b2Shape::GetType() const [b2Shape.h <99:1 <99:31 99:37> 102:1>]
SYMBOL_METHOD: public int32 b2Shape::GetChildCount() const [b2Shape.h <65:2 <65:16 65:28> 65:40>]
SYMBOL_METHOD: public bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2Shape.h <70:2 <70:15 70:23> 70:73>]
SYMBOL_METHOD: public bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2Shape.h <77:2 <77:15 77:21> 78:63>]
SYMBOL_METHOD: public void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2Shape.h <84:2 <84:15 84:25> 84:90>]
SYMBOL_METHOD: public void b2Shape::ComputeMass(b2MassData *, float32) const [b2Shape.h <90:2 <90:15 90:25> 90:74>]
SYMBOL_FIELD: public b2Shape::Type b2Shape::m_type [b2Shape.h <92:7 92:12>]
SYMBOL_FIELD: public float32 b2Shape::m_radius [b2Shape.h <96:10 96:17>]
SYMBOL_METHOD: public b2Shape & b2Shape::operator=(const b2Shape &) [b2Shape.h <42:7 <42:7 42:13> 42:13>]
QUALIFIER: b2Fixture [b2Fixture.h <238:22 238:30>]
QUALIFIER: b2Fixture [b2Fixture.h <243:17 243:25>]
QUALIFIER: b2Fixture [b2Fixture.h <248:23 248:31>]
QUALIFIER: b2Fixture [b2Fixture.h <253:13 253:21>]
QUALIFIER: b2Fixture [b2Fixture.h <258:24 258:32>]
QUALIFIER: b2Fixture [b2Fixture.h <263:14 263:22>]
QUALIFIER: b2Fixture [b2Fixture.h <268:13 268:21>]
QUALIFIER: b2Fixture [b2Fixture.h <273:16 273:24>]
QUALIFIER: b2Fixture [b2Fixture.h <278:22 278:30>]
QUALIFIER: b2Fixture [b2Fixture.h <283:19 283:27>]
QUALIFIER: b2Fixture [b2Fixture.h <288:25 288:33>]
QUALIFIER: b2Fixture [b2Fixture.h <293:13 293:21>]
QUALIFIER: b2Fixture [b2Fixture.h <299:16 299:24>]
QUALIFIER: b2Fixture [b2Fixture.h <304:16 304:24>]
QUALIFIER: b2Fixture [b2Fixture.h <309:13 309:21>]
QUALIFIER: b2Fixture [b2Fixture.h <314:16 314:24>]
QUALIFIER: b2Fixture [b2Fixture.h <319:13 319:21>]
QUALIFIER: b2Fixture [b2Fixture.h <324:13 324:21>]
QUALIFIER: b2Fixture [b2Fixture.h <329:13 329:21>]
QUALIFIER: b2Fixture [b2Fixture.h <334:13 334:21>]
QUALIFIER: b2Fixture [b2Fixture.h <339:22 339:30>]
SYMBOL_CLASS: b2Fixture [b2Body.h <26:7 26:15>]
SYMBOL_CLASS: b2Fixture [b2Fixture.h <29:7 29:15>]
SYMBOL_CLASS: b2Fixture [b2Fixture.h <107:1 <107:7 107:15> 236:1>]
SYMBOL_CLASS: b2Fixture [b2World.h <35:7 35:15>]
SYMBOL_CLASS: b2Fixture [b2WorldCallbacks.h <26:7 26:15>]
SYMBOL_CLASS: b2Fixture [b2Contact.h <29:7 29:15>]
QUALIFIER: b2Joint [b2Joint.h <186:20 186:26>]
QUALIFIER: b2Joint [b2Joint.h <191:16 191:22>]
QUALIFIER: b2Joint [b2Joint.h <196:16 196:22>]
QUALIFIER: b2Joint [b2Joint.h <201:17 201:23>]
QUALIFIER: b2Joint [b2Joint.h <206:23 206:29>]
QUALIFIER: b2Joint [b2Joint.h <211:14 211:20>]
QUALIFIER: b2Joint [b2Joint.h <216:13 216:19>]
QUALIFIER: b2Joint [b2Joint.h <221:13 221:19>]
SYMBOL_CLASS: b2Joint [b2Body.h <27:7 27:13>]
SYMBOL_CLASS: b2Joint [b2World.h <36:7 36:13>]
SYMBOL_CLASS: b2Joint [b2WorldCallbacks.h <28:7 28:13>]
SYMBOL_CLASS: b2Joint [b2Joint.h <25:7 25:13>]
SYMBOL_CLASS: b2Joint [b2Joint.h <103:1 <103:7 103:13> 184:1>]
QUALIFIER: b2Contact [b2Contact.h <222:20 222:28>]
QUALIFIER: b2Contact [b2Contact.h <227:26 227:34>]
QUALIFIER: b2Contact [b2Contact.h <232:13 232:21>]
QUALIFIER: b2Contact [b2Contact.h <242:13 242:21>]
QUALIFIER: b2Contact [b2Contact.h <254:13 254:21>]
QUALIFIER: b2Contact [b2Contact.h <259:13 259:21>]
QUALIFIER: b2Contact [b2Contact.h <264:19 264:27>]
QUALIFIER: b2Contact [b2Contact.h <269:25 269:33>]
QUALIFIER: b2Contact [b2Contact.h <274:19 274:27>]
QUALIFIER: b2Contact [b2Contact.h <279:25 279:33>]
QUALIFIER: b2Contact [b2Contact.h <284:19 284:27>]
QUALIFIER: b2Contact [b2Contact.h <289:14 289:22>]
QUALIFIER: b2Contact [b2Contact.h <294:25 294:33>]
QUALIFIER: b2Contact [b2Contact.h <299:14 299:22>]
QUALIFIER: b2Contact [b2Contact.h <304:13 304:21>]
QUALIFIER: b2Contact [b2Contact.h <309:13 309:21>]
QUALIFIER: b2Contact [b2Contact.h <314:16 314:24>]
QUALIFIER: b2Contact [b2Contact.h <319:13 319:21>]
QUALIFIER: b2Contact [b2Contact.h <324:13 324:21>]
QUALIFIER: b2Contact [b2Contact.h <329:16 329:24>]
QUALIFIER: b2Contact [b2Contact.h <334:13 334:21>]
QUALIFIER: b2Contact [b2Contact.h <339:13 339:21>]
QUALIFIER: b2Contact [b2Contact.h <344:16 344:24>]
SYMBOL_CLASS: b2Contact [b2Body.h <28:7 28:15>]
SYMBOL_CLASS: b2Contact [b2ContactManager.h <24:7 24:15>]
SYMBOL_CLASS: b2Contact [b2WorldCallbacks.h <29:7 29:15>]
SYMBOL_CLASS: b2Contact [b2Contact.h <28:7 28:15>]
SYMBOL_CLASS: b2Contact [b2Contact.h <77:1 <77:7 77:15> 220:1>]
SYMBOL_CLASS: b2Controller [b2Body.h <29:7 29:18>]
QUALIFIER: b2World [b2Body.cpp <200:22 200:28>]
QUALIFIER: b2World [b2World.h <266:16 266:22>]
QUALIFIER: b2World [b2World.h <271:22 271:28>]
QUALIFIER: b2World [b2World.h <276:17 276:23>]
QUALIFIER: b2World [b2World.h <281:23 281:29>]
QUALIFIER: b2World [b2World.h <286:19 286:25>]
QUALIFIER: b2World [b2World.h <291:25 291:31>]
QUALIFIER: b2World [b2World.h <296:14 296:20>]
QUALIFIER: b2World [b2World.h <301:14 301:20>]
QUALIFIER: b2World [b2World.h <306:14 306:20>]
QUALIFIER: b2World [b2World.h <311:13 311:19>]
QUALIFIER: b2World [b2World.h <316:15 316:21>]
QUALIFIER: b2World [b2World.h <321:13 321:19>]
QUALIFIER: b2World [b2World.h <326:13 326:19>]
QUALIFIER: b2World [b2World.h <339:13 339:19>]
QUALIFIER: b2World [b2World.h <344:32 344:38>]
QUALIFIER: b2World [b2World.h <349:25 349:31>]
SYMBOL_CLASS: b2World [b2Body.h <30:7 30:13>]
SYMBOL_CLASS: b2World [b2World.h <41:1 <41:7 41:13> 264:1>]
SYMBOL_CLASS: b2World [b2Contact.h <30:7 30:13>]
SYMBOL_STRUCT: b2FixtureDef [b2Body.h <31:8 31:19>]
SYMBOL_STRUCT: b2FixtureDef [b2Fixture.h <56:1 <56:8 56:19> 91:1>]
SYMBOL_STRUCT: b2JointEdge [b2Body.h <32:8 32:18>]
SYMBOL_STRUCT: b2JointEdge [b2Joint.h <65:1 <65:8 65:18> 71:1>]
SYMBOL_STRUCT: b2ContactEdge [b2Body.h <33:8 33:20>]
SYMBOL_STRUCT: b2ContactEdge [b2Contact.h <66:1 <66:8 66:20> 72:1>]
SYMBOL_ENUM: b2BodyType [b2Body.h <39:1 <39:6 39:15> 47:1>]
SYMBOL_ENUM_CONSTANT: b2BodyType::b2_staticBody [b2Body.h <41:2 41:14>]
SYMBOL_ENUM_CONSTANT: b2BodyType::b2_kinematicBody [b2Body.h <42:2 42:17>]
SYMBOL_ENUM_CONSTANT: b2BodyType::b2_dynamicBody [b2Body.h <43:2 43:15>]
SYMBOL_STRUCT: b2BodyDef [b2Body.h <51:1 <51:8 51:16> 125:1>]
SYMBOL_STRUCT: b2BodyDef [b2World.h <30:8 30:16>]
SYMBOL_METHOD: public void b2BodyDef::b2BodyDef() [b2Body.h <54:2 <54:2 <54:2 54:10> 54:12> 70:2>]
SYMBOL_FIELD: public b2Vec2 b2BodyDef::position [b2Body.h <78:9 78:16>]
SYMBOL_FIELD: public b2Vec2 b2BodyDef::linearVelocity [b2Body.h <84:9 84:22>]
SYMBOL_FIELD: public void * b2BodyDef::userData [b2Body.h <121:8 121:15>]
SYMBOL_FIELD: public float32 b2BodyDef::angle [b2Body.h <81:10 81:14>]
SYMBOL_FIELD: public float32 b2BodyDef::angularVelocity [b2Body.h <87:10 87:24>]
SYMBOL_FIELD: public float32 b2BodyDef::linearDamping [b2Body.h <93:10 93:22>]
SYMBOL_FIELD: public float32 b2BodyDef::angularDamping [b2Body.h <99:10 99:23>]
SYMBOL_FIELD: public bool b2BodyDef::allowSleep [b2Body.h <103:7 103:16>]
SYMBOL_FIELD: public bool b2BodyDef::awake [b2Body.h <106:7 106:11>]
SYMBOL_FIELD: public bool b2BodyDef::fixedRotation [b2Body.h <109:7 109:19>]
SYMBOL_FIELD: public bool b2BodyDef::bullet [b2Body.h <115:7 115:12>]
SYMBOL_FIELD: public b2BodyType b2BodyDef::type [b2Body.h <74:13 74:16>]
SYMBOL_FIELD: public bool b2BodyDef::active [b2Body.h <118:7 118:12>]
SYMBOL_FIELD: public float32 b2BodyDef::gravityScale [b2Body.h <124:10 124:21>]
QUALIFIER: b2Body [b2Body.cpp <25:1 25:6>]
QUALIFIER: b2Body [b2Body.cpp <108:1 108:6>]
QUALIFIER: b2Body [b2Body.cpp <113:6 113:11>]
QUALIFIER: b2Body [b2Body.cpp <166:12 166:17>]
QUALIFIER: b2Body [b2Body.cpp <205:12 205:17>]
QUALIFIER: b2Body [b2Body.cpp <214:6 214:11>]
QUALIFIER: b2Body [b2Body.cpp <286:6 286:11>]
QUALIFIER: b2Body [b2Body.cpp <358:6 358:11>]
QUALIFIER: b2Body [b2Body.cpp <383:39 383:44>]
QUALIFIER: b2Body [b2Body.cpp <399:6 399:11>]
QUALIFIER: b2Body [b2Body.cpp <422:6 422:11>]
QUALIFIER: b2Body [b2Body.cpp <446:6 446:11>]
QUALIFIER: b2Body [b2Body.cpp <459:6 459:11>]
QUALIFIER: b2Body [b2Body.cpp <504:6 504:11>]
QUALIFIER: b2Body [b2Body.cpp <526:6 526:11>]
QUALIFIER: b2Body [b2Body.h <475:19 475:24>]
QUALIFIER: b2Body [b2Body.h <480:27 480:32>]
QUALIFIER: b2Body [b2Body.h <485:22 485:27>]
QUALIFIER: b2Body [b2Body.h <490:16 490:21>]
QUALIFIER: b2Body [b2Body.h <495:22 495:27>]
QUALIFIER: b2Body [b2Body.h <500:22 500:27>]
QUALIFIER: b2Body [b2Body.h <505:13 505:18>]
QUALIFIER: b2Body [b2Body.h <520:22 520:27>]
QUALIFIER: b2Body [b2Body.h <525:13 525:18>]
QUALIFIER: b2Body [b2Body.h <540:16 540:21>]
QUALIFIER: b2Body [b2Body.h <545:16 545:21>]
QUALIFIER: b2Body [b2Body.h <550:16 550:21>]
QUALIFIER: b2Body [b2Body.h <555:13 555:18>]
QUALIFIER: b2Body [b2Body.h <562:15 562:20>]
QUALIFIER: b2Body [b2Body.h <567:15 567:20>]
QUALIFIER: b2Body [b2Body.h <572:15 572:20>]
QUALIFIER: b2Body [b2Body.h <577:15 577:20>]
QUALIFIER: b2Body [b2Body.h <582:15 582:20>]
QUALIFIER: b2Body [b2Body.h <587:15 587:20>]
QUALIFIER: b2Body [b2Body.h <592:16 592:21>]
QUALIFIER: b2Body [b2Body.h <597:13 597:18>]
QUALIFIER: b2Body [b2Body.h <602:16 602:21>]
QUALIFIER: b2Body [b2Body.h <607:13 607:18>]
QUALIFIER: b2Body [b2Body.h <612:16 612:21>]
QUALIFIER: b2Body [b2Body.h <617:13 617:18>]
QUALIFIER: b2Body [b2Body.h <622:13 622:18>]
QUALIFIER: b2Body [b2Body.h <634:13 634:18>]
QUALIFIER: b2Body [b2Body.h <639:13 639:18>]
QUALIFIER: b2Body [b2Body.h <657:13 657:18>]
QUALIFIER: b2Body [b2Body.h <662:13 662:18>]
QUALIFIER: b2Body [b2Body.h <667:13 667:18>]
QUALIFIER: b2Body [b2Body.h <672:13 672:18>]
QUALIFIER: b2Body [b2Body.h <685:13 685:18>]
QUALIFIER: b2Body [b2Body.h <690:19 690:24>]
QUALIFIER: b2Body [b2Body.h <695:25 695:30>]
QUALIFIER: b2Body [b2Body.h <700:21 700:26>]
QUALIFIER: b2Body [b2Body.h <705:27 705:32>]
QUALIFIER: b2Body [b2Body.h <710:23 710:28>]
QUALIFIER: b2Body [b2Body.h <715:29 715:34>]
QUALIFIER: b2Body [b2Body.h <720:16 720:21>]
QUALIFIER: b2Body [b2Body.h <725:22 725:27>]
QUALIFIER: b2Body [b2Body.h <730:13 730:18>]
QUALIFIER: b2Body [b2Body.h <735:14 735:19>]
QUALIFIER: b2Body [b2Body.h <740:13 740:18>]
QUALIFIER: b2Body [b2Body.h <760:13 760:18>]
QUALIFIER: b2Body [b2Body.h <779:13 779:18>]
QUALIFIER: b2Body [b2Body.h <798:13 798:18>]
QUALIFIER: b2Body [b2Body.h <818:13 818:18>]
QUALIFIER: b2Body [b2Body.h <837:13 837:18>]
QUALIFIER: b2Body [b2Body.h <856:13 856:18>]
QUALIFIER: b2Body [b2Body.h <862:13 862:18>]
QUALIFIER: b2Body [b2Body.h <872:17 872:22>]
QUALIFIER: b2Body [b2Body.h <877:23 877:28>]
SYMBOL_CLASS: b2Body [b2Body.h <128:1 <128:7 128:12> 473:1>]
SYMBOL_CLASS: b2Body [b2Fixture.h <27:7 27:12>]
SYMBOL_CLASS: b2Body [b2World.h <33:7 33:12>]
SYMBOL_CLASS: b2Body [b2WorldCallbacks.h <27:7 27:12>]
SYMBOL_CLASS: b2Body [b2Contact.h <27:7 27:12>]
SYMBOL_CLASS: b2Body [b2Joint.h <24:7 24:12>]
SYMBOL_METHOD: public b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) [b2Body.cpp <166:1 <166:20 166:32> 203:1>]
SYMBOL_METHOD: public b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) [b2Body.h <138:2 <138:13 138:25> 138:50>]
SYMBOL_METHOD: public b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) [b2Body.cpp <205:1 <205:20 205:32> 212:1>]
SYMBOL_METHOD: public b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) [b2Body.h <147:2 <147:13 147:25> 147:64>]
SYMBOL_METHOD: public void b2Body::DestroyFixture(b2Fixture *) [b2Body.cpp <214:1 <214:14 214:27> 284:1>]
SYMBOL_METHOD: public void b2Body::DestroyFixture(b2Fixture *) [b2Body.h <156:2 <156:7 156:20> 156:40>]
SYMBOL_METHOD: public void b2Body::SetTransform(const b2Vec2 &, float32) [b2Body.cpp <422:1 <422:14 422:25> 444:1>]
SYMBOL_METHOD: public void b2Body::SetTransform(const b2Vec2 &, float32) [b2Body.h <163:2 <163:7 163:18> 163:57>]
SYMBOL_METHOD: public const b2Transform & b2Body::GetTransform() const [b2Body.h <167:2 <167:21 167:32> 167:40>]
SYMBOL_METHOD: public const b2Transform & b2Body::GetTransform() const [b2Body.h <480:1 <480:35 480:46> 483:1>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetPosition() const [b2Body.h <171:2 <171:16 171:26> 171:34>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetPosition() const [b2Body.h <485:1 <485:30 485:40> 488:1>]
SYMBOL_METHOD: public float32 b2Body::GetAngle() const [b2Body.h <175:2 <175:10 175:17> 175:25>]
SYMBOL_METHOD: public float32 b2Body::GetAngle() const [b2Body.h <490:1 <490:24 490:31> 493:1>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetWorldCenter() const [b2Body.h <178:2 <178:16 178:29> 178:37>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetWorldCenter() const [b2Body.h <495:1 <495:30 495:43> 498:1>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetLocalCenter() const [b2Body.h <181:2 <181:16 181:29> 181:37>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetLocalCenter() const [b2Body.h <500:1 <500:30 500:43> 503:1>]
SYMBOL_METHOD: public void b2Body::SetLinearVelocity(const b2Vec2 &) [b2Body.h <185:2 <185:7 185:23> 185:40>]
SYMBOL_METHOD: public void b2Body::SetLinearVelocity(const b2Vec2 &) [b2Body.h <505:1 <505:21 505:37> 518:1>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetLinearVelocity() const [b2Body.h <189:2 <189:16 189:32> 189:40>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetLinearVelocity() const [b2Body.h <520:1 <520:30 520:46> 523:1>]
SYMBOL_METHOD: public void b2Body::SetAngularVelocity(float32) [b2Body.h <193:2 <193:7 193:24> 193:39>]
SYMBOL_METHOD: public void b2Body::SetAngularVelocity(float32) [b2Body.h <525:1 <525:21 525:38> 538:1>]
SYMBOL_METHOD: public float32 b2Body::GetAngularVelocity() const [b2Body.h <197:2 <197:10 197:27> 197:35>]
SYMBOL_METHOD: public float32 b2Body::GetAngularVelocity() const [b2Body.h <540:1 <540:24 540:41> 543:1>]
SYMBOL_METHOD: public void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) [b2Body.h <205:2 <205:7 205:16> 205:69>]
SYMBOL_METHOD: public void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) [b2Body.h <740:1 <740:21 740:30> 758:1>]
SYMBOL_METHOD: public void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) [b2Body.h <210:2 <210:7 210:24> 210:56>]
SYMBOL_METHOD: public void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) [b2Body.h <760:1 <760:21 760:38> 777:1>]
SYMBOL_METHOD: public void b2Body::ApplyTorque(float32, bool) [b2Body.h <216:2 <216:7 216:17> 216:44>]
SYMBOL_METHOD: public void b2Body::ApplyTorque(float32, bool) [b2Body.h <779:1 <779:21 779:31> 796:1>]
SYMBOL_METHOD: public void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) [b2Body.h <224:2 <224:7 224:24> 224:79>]
SYMBOL_METHOD: public void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) [b2Body.h <798:1 <798:21 798:38> 816:1>]
SYMBOL_METHOD: public void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) [b2Body.h <229:2 <229:7 229:32> 229:66>]
SYMBOL_METHOD: public void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) [b2Body.h <818:1 <818:21 818:46> 835:1>]
SYMBOL_METHOD: public void b2Body::ApplyAngularImpulse(float32, bool) [b2Body.h <234:2 <234:7 234:25> 234:53>]
SYMBOL_METHOD: public void b2Body::ApplyAngularImpulse(float32, bool) [b2Body.h <837:1 <837:21 837:39> 854:1>]
SYMBOL_METHOD: public float32 b2Body::GetMass() const [b2Body.h <238:2 <238:10 238:16> 238:24>]
SYMBOL_METHOD: public float32 b2Body::GetMass() const [b2Body.h <545:1 <545:24 545:30> 548:1>]
SYMBOL_METHOD: public float32 b2Body::GetInertia() const [b2Body.h <242:2 <242:10 242:19> 242:27>]
SYMBOL_METHOD: public float32 b2Body::GetInertia() const [b2Body.h <550:1 <550:24 550:33> 553:1>]
SYMBOL_METHOD: public void b2Body::GetMassData(b2MassData *) const [b2Body.h <246:2 <246:7 246:17> 246:41>]
SYMBOL_METHOD: public void b2Body::GetMassData(b2MassData *) const [b2Body.h <555:1 <555:21 555:31> 560:1>]
SYMBOL_METHOD: public void b2Body::SetMassData(const b2MassData *) [b2Body.cpp <358:1 <358:14 358:24> 397:1>]
SYMBOL_METHOD: public void b2Body::SetMassData(const b2MassData *) [b2Body.h <253:2 <253:7 253:17> 253:41>]
SYMBOL_METHOD: public void b2Body::ResetMassData() [b2Body.cpp <286:1 <286:14 286:26> 356:1>]
SYMBOL_METHOD: public void b2Body::ResetMassData() [b2Body.h <258:2 <258:7 258:19> 258:21>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const [b2Body.h <263:2 <263:9 263:21> 263:53>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const [b2Body.h <562:1 <562:23 562:35> 565:1>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const [b2Body.h <268:2 <268:9 268:22> 268:55>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const [b2Body.h <567:1 <567:23 567:36> 570:1>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const [b2Body.h <273:2 <273:9 273:21> 273:53>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const [b2Body.h <572:1 <572:23 572:35> 575:1>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const [b2Body.h <278:2 <278:9 278:22> 278:55>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const [b2Body.h <577:1 <577:23 577:36> 580:1>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const [b2Body.h <283:2 <283:9 283:39> 283:71>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const [b2Body.h <582:1 <582:23 582:53> 585:1>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const [b2Body.h <288:2 <288:9 288:39> 288:71>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const [b2Body.h <587:1 <587:23 587:53> 590:1>]
SYMBOL_METHOD: public float32 b2Body::GetLinearDamping() const [b2Body.h <291:2 <291:10 291:25> 291:33>]
SYMBOL_METHOD: public float32 b2Body::GetLinearDamping() const [b2Body.h <592:1 <592:24 592:39> 595:1>]
SYMBOL_METHOD: public void b2Body::SetLinearDamping(float32) [b2Body.h <294:2 <294:7 294:22> 294:45>]
SYMBOL_METHOD: public void b2Body::SetLinearDamping(float32) [b2Body.h <597:1 <597:21 597:36> 600:1>]
SYMBOL_METHOD: public float32 b2Body::GetAngularDamping() const [b2Body.h <297:2 <297:10 297:26> 297:34>]
SYMBOL_METHOD: public float32 b2Body::GetAngularDamping() const [b2Body.h <602:1 <602:24 602:40> 605:1>]
SYMBOL_METHOD: public void b2Body::SetAngularDamping(float32) [b2Body.h <300:2 <300:7 300:23> 300:47>]
SYMBOL_METHOD: public void b2Body::SetAngularDamping(float32) [b2Body.h <607:1 <607:21 607:37> 610:1>]
SYMBOL_METHOD: public float32 b2Body::GetGravityScale() const [b2Body.h <303:2 <303:10 303:24> 303:32>]
SYMBOL_METHOD: public float32 b2Body::GetGravityScale() const [b2Body.h <612:1 <612:24 612:38> 615:1>]
SYMBOL_METHOD: public void b2Body::SetGravityScale(float32) [b2Body.h <306:2 <306:7 306:21> 306:36>]
SYMBOL_METHOD: public void b2Body::SetGravityScale(float32) [b2Body.h <617:1 <617:21 617:35> 620:1>]
SYMBOL_METHOD: public void b2Body::SetType(b2BodyType) [b2Body.cpp <113:1 <113:14 113:20> 164:1>]
SYMBOL_METHOD: public void b2Body::SetType(b2BodyType) [b2Body.h <309:2 <309:7 309:13> 309:30>]
SYMBOL_METHOD: public b2BodyType b2Body::GetType() const [b2Body.h <312:2 <312:13 312:19> 312:27>]
SYMBOL_METHOD: public b2BodyType b2Body::GetType() const [b2Body.h <475:1 <475:27 475:33> 478:1>]
SYMBOL_METHOD: public void b2Body::SetBullet(bool) [b2Body.h <315:2 <315:7 315:15> 315:26>]
SYMBOL_METHOD: public void b2Body::SetBullet(bool) [b2Body.h <622:1 <622:21 622:29> 632:1>]
SYMBOL_METHOD: public bool b2Body::IsBullet() const [b2Body.h <318:2 <318:7 318:14> 318:22>]
SYMBOL_METHOD: public bool b2Body::IsBullet() const [b2Body.h <634:1 <634:21 634:28> 637:1>]
SYMBOL_METHOD: public void b2Body::SetSleepingAllowed(bool) [b2Body.h <322:2 <322:7 322:24> 322:35>]
SYMBOL_METHOD: public void b2Body::SetSleepingAllowed(bool) [b2Body.h <672:1 <672:21 672:38> 683:1>]
SYMBOL_METHOD: public bool b2Body::IsSleepingAllowed() const [b2Body.h <325:2 <325:7 325:23> 325:31>]
SYMBOL_METHOD: public bool b2Body::IsSleepingAllowed() const [b2Body.h <685:1 <685:21 685:37> 688:1>]
SYMBOL_METHOD: public void b2Body::SetAwake(bool) [b2Body.h <330:2 <330:7 330:14> 330:25>]
SYMBOL_METHOD: public void b2Body::SetAwake(bool) [b2Body.h <639:1 <639:21 639:28> 655:1>]
SYMBOL_METHOD: public bool b2Body::IsAwake() const [b2Body.h <334:2 <334:7 334:13> 334:21>]
SYMBOL_METHOD: public bool b2Body::IsAwake() const [b2Body.h <657:1 <657:21 657:27> 660:1>]
SYMBOL_METHOD: public void b2Body::SetActive(bool) [b2Body.cpp <459:1 <459:14 459:22> 502:1>]
SYMBOL_METHOD: public void b2Body::SetActive(bool) [b2Body.h <349:2 <349:7 349:15> 349:26>]
SYMBOL_METHOD: public bool b2Body::IsActive() const [b2Body.h <352:2 <352:7 352:14> 352:22>]
SYMBOL_METHOD: public bool b2Body::IsActive() const [b2Body.h <662:1 <662:21 662:28> 665:1>]
SYMBOL_METHOD: public void b2Body::SetFixedRotation(bool) [b2Body.cpp <504:1 <504:14 504:29> 524:1>]
SYMBOL_METHOD: public void b2Body::SetFixedRotation(bool) [b2Body.h <356:2 <356:7 356:22> 356:33>]
SYMBOL_METHOD: public bool b2Body::IsFixedRotation() const [b2Body.h <359:2 <359:7 359:21> 359:29>]
SYMBOL_METHOD: public bool b2Body::IsFixedRotation() const [b2Body.h <667:1 <667:21 667:35> 670:1>]
SYMBOL_METHOD: public b2Fixture * b2Body::GetFixtureList() [b2Body.h <362:2 <362:13 362:26> 362:28>]
SYMBOL_METHOD: public b2Fixture * b2Body::GetFixtureList() [b2Body.h <690:1 <690:27 690:40> 693:1>]
SYMBOL_METHOD: public const b2Fixture * b2Body::GetFixtureList() const [b2Body.h <363:2 <363:19 363:32> 363:40>]
SYMBOL_METHOD: public const b2Fixture * b2Body::GetFixtureList() const [b2Body.h <695:1 <695:33 695:46> 698:1>]
SYMBOL_METHOD: public b2JointEdge * b2Body::GetJointList() [b2Body.h <366:2 <366:15 366:26> 366:28>]
SYMBOL_METHOD: public b2JointEdge * b2Body::GetJointList() [b2Body.h <700:1 <700:29 700:40> 703:1>]
SYMBOL_METHOD: public const b2JointEdge * b2Body::GetJointList() const [b2Body.h <367:2 <367:21 367:32> 367:40>]
SYMBOL_METHOD: public const b2JointEdge * b2Body::GetJointList() const [b2Body.h <705:1 <705:35 705:46> 708:1>]
SYMBOL_METHOD: public b2ContactEdge * b2Body::GetContactList() [b2Body.h <372:2 <372:17 372:30> 372:32>]
SYMBOL_METHOD: public b2ContactEdge * b2Body::GetContactList() [b2Body.h <710:1 <710:31 710:44> 713:1>]
SYMBOL_METHOD: public const b2ContactEdge * b2Body::GetContactList() const [b2Body.h <373:2 <373:23 373:36> 373:44>]
SYMBOL_METHOD: public const b2ContactEdge * b2Body::GetContactList() const [b2Body.h <715:1 <715:37 715:50> 718:1>]
SYMBOL_METHOD: public b2Body * b2Body::GetNext() [b2Body.h <376:2 <376:10 376:16> 376:18>]
SYMBOL_METHOD: public b2Body * b2Body::GetNext() [b2Body.h <720:1 <720:24 720:30> 723:1>]
SYMBOL_METHOD: public const b2Body * b2Body::GetNext() const [b2Body.h <377:2 <377:16 377:22> 377:30>]
SYMBOL_METHOD: public const b2Body * b2Body::GetNext() const [b2Body.h <725:1 <725:30 725:36> 728:1>]
SYMBOL_METHOD: public void * b2Body::GetUserData() const [b2Body.h <380:2 <380:8 380:18> 380:26>]
SYMBOL_METHOD: public void * b2Body::GetUserData() const [b2Body.h <735:1 <735:22 735:32> 738:1>]
SYMBOL_METHOD: public void b2Body::SetUserData(void *) [b2Body.h <383:2 <383:7 383:17> 383:29>]
SYMBOL_METHOD: public void b2Body::SetUserData(void *) [b2Body.h <730:1 <730:21 730:31> 733:1>]
SYMBOL_METHOD: public b2World * b2Body::GetWorld() [b2Body.h <386:2 <386:11 386:18> 386:20>]
SYMBOL_METHOD: public b2World * b2Body::GetWorld() [b2Body.h <872:1 <872:25 872:32> 875:1>]
SYMBOL_METHOD: public const b2World * b2Body::GetWorld() const [b2Body.h <387:2 <387:17 387:24> 387:32>]
SYMBOL_METHOD: public const b2World * b2Body::GetWorld() const [b2Body.h <877:1 <877:31 877:38> 880:1>]
SYMBOL_METHOD: public void b2Body::Dump() [b2Body.cpp <526:1 <526:14 526:17> 554:1>]
SYMBOL_METHOD: public void b2Body::Dump() [b2Body.h <390:2 <390:7 390:10> 390:12>]
SYMBOL_CLASS: b2ContactManager [b2ContactManager.h <30:1 <30:7 30:22> 50:1>]
SYMBOL_ENUM: private b2Body::anonymous enum (b2Body.h<413:2>) [b2Body.h <413:2 <413:2 413:5> 422:2>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2Body.h <415:3 415:14>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <416:3 416:13>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.h <417:3 417:17>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.h <418:3 418:14>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.h <419:3 419:21>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.h <420:3 420:14>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_toiFlag [b2Body.h <421:3 421:11>]
SYMBOL_METHOD: private void b2Body::b2Body(const b2BodyDef *, b2World *) [b2Body.cpp <25:1 <25:9 25:14> 106:1>]
SYMBOL_METHOD: private void b2Body::b2Body(const b2BodyDef *, b2World *) [b2Body.h <424:2 <424:2 424:7> 424:44>]
SYMBOL_METHOD: private void b2Body::~b2Body() [b2Body.cpp <108:1 <108:9 108:15> 111:1>]
SYMBOL_METHOD: private void b2Body::~b2Body() [b2Body.h <425:2 <425:2 425:8> 425:10>]
SYMBOL_METHOD: private void b2Body::SynchronizeFixtures() [b2Body.cpp <446:1 <446:14 446:32> 457:1>]
SYMBOL_METHOD: private void b2Body::SynchronizeFixtures() [b2Body.h <427:2 <427:7 427:25> 427:27>]
SYMBOL_METHOD: private void b2Body::SynchronizeTransform() [b2Body.h <428:2 <428:7 428:26> 428:28>]
SYMBOL_METHOD: private void b2Body::SynchronizeTransform() [b2Body.h <856:1 <856:21 856:40> 860:1>]
SYMBOL_METHOD: private bool b2Body::ShouldCollide(const b2Body *) const [b2Body.cpp <399:1 <399:14 399:26> 420:1>]
SYMBOL_METHOD: private bool b2Body::ShouldCollide(const b2Body *) const [b2Body.h <432:2 <432:7 432:19> 432:46>]
SYMBOL_METHOD: private void b2Body::Advance(float32) [b2Body.h <434:2 <434:7 434:13> 434:24>]
SYMBOL_METHOD: private void b2Body::Advance(float32) [b2Body.h <862:1 <862:21 862:27> 870:1>]
SYMBOL_FIELD: private b2BodyType b2Body::m_type [b2Body.h <436:13 436:18>]
SYMBOL_FIELD: private uint16 b2Body::m_flags [b2Body.h <438:9 438:15>]
SYMBOL_FIELD: private int32 b2Body::m_islandIndex [b2Body.h <440:8 440:20>]
SYMBOL_FIELD: private b2Transform b2Body::m_xf [b2Body.h <442:14 442:17>]
SYMBOL_FIELD: private b2Sweep b2Body::m_sweep [b2Body.h <443:10 443:16>]
SYMBOL_FIELD: private b2Vec2 b2Body::m_linearVelocity [b2Body.h <445:9 445:24>]
SYMBOL_FIELD: private float32 b2Body::m_angularVelocity [b2Body.h <446:10 446:26>]
SYMBOL_FIELD: private b2Vec2 b2Body::m_force [b2Body.h <448:9 448:15>]
SYMBOL_FIELD: private float32 b2Body::m_torque [b2Body.h <449:10 449:17>]
SYMBOL_FIELD: private b2World * b2Body::m_world [b2Body.h <451:11 451:17>]
SYMBOL_FIELD: private b2Body * b2Body::m_prev [b2Body.h <452:10 452:15>]
SYMBOL_FIELD: private b2Body * b2Body::m_next [b2Body.h <453:10 453:15>]
SYMBOL_FIELD: private b2Fixture * b2Body::m_fixtureList [b2Body.h <455:13 455:25>]
SYMBOL_FIELD: private int32 b2Body::m_fixtureCount [b2Body.h <456:8 456:21>]
SYMBOL_FIELD: private b2JointEdge * b2Body::m_jointList [b2Body.h <458:15 458:25>]
SYMBOL_FIELD: private b2ContactEdge * b2Body::m_contactList [b2Body.h <459:17 459:29>]
SYMBOL_FIELD: private float32 b2Body::m_mass [b2Body.h <461:10 461:15>]
SYMBOL_FIELD: private float32 b2Body::m_invMass [b2Body.h <461:18 461:26>]
SYMBOL_FIELD: private float32 b2Body::m_I [b2Body.h <464:10 464:12>]
SYMBOL_FIELD: private float32 b2Body::m_invI [b2Body.h <464:15 464:20>]
SYMBOL_FIELD: private float32 b2Body::m_linearDamping [b2Body.h <466:10 466:24>]
SYMBOL_FIELD: private float32 b2Body::m_angularDamping [b2Body.h <467:10 467:25>]
SYMBOL_FIELD: private float32 b2Body::m_gravityScale [b2Body.h <468:10 468:23>]
SYMBOL_FIELD: private float32 b2Body::m_sleepTime [b2Body.h <470:10 470:20>]
SYMBOL_FIELD: private void * b2Body::m_userData [b2Body.h <472:8 472:17>]
SYMBOL_METHOD: public void b2Body::b2Body(const b2Body &) [b2Body.h <128:7 <128:7 128:12> 128:12>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <147:14 147:25>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <152:13 152:24>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <159:22 159:33>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <164:14 164:25>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <169:14 169:25>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <174:14 174:25>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <179:16 179:27>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <185:6 185:17>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <241:13 241:24>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <247:13 247:24>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <252:13 252:24>]
SYMBOL_CLASS: b2BroadPhase [b2Fixture.h <28:7 28:18>]
SYMBOL_CLASS: b2BroadPhase [b2BroadPhase.h <36:1 <36:7 36:18> 129:1>]
SYMBOL_STRUCT: b2Filter [b2Fixture.h <32:1 <32:8 32:15> 52:1>]
SYMBOL_METHOD: public void b2Filter::b2Filter() [b2Fixture.h <34:2 <34:2 <34:2 34:9> 34:11> 39:2>]
SYMBOL_FIELD: public uint16 b2Filter::categoryBits [b2Fixture.h <42:9 42:20>]
SYMBOL_FIELD: public uint16 b2Filter::maskBits [b2Fixture.h <46:9 46:16>]
SYMBOL_FIELD: public int16 b2Filter::groupIndex [b2Fixture.h <51:8 51:17>]
SYMBOL_METHOD: public void b2Filter::b2Filter(const b2Filter &) [b2Fixture.h <32:8 <32:8 32:15> 32:15>]
SYMBOL_METHOD: public void b2Filter::b2Filter(b2Filter &&) [b2Fixture.h <32:8 <32:8 32:15> 32:15>]
SYMBOL_METHOD: public void b2Filter::~b2Filter() [b2Fixture.h <32:8 <32:8 32:15> 32:15>]
SYMBOL_METHOD: public void b2FixtureDef::b2FixtureDef() [b2Fixture.h <59:2 <59:2 <59:2 59:13> 59:15> 67:2>]
SYMBOL_FIELD: public b2Filter b2FixtureDef::filter [b2Fixture.h <90:11 90:16>]
SYMBOL_FIELD: public const b2Shape * b2FixtureDef::shape [b2Fixture.h <71:17 71:21>]
SYMBOL_FIELD: public void * b2FixtureDef::userData [b2Fixture.h <74:8 74:15>]
SYMBOL_FIELD: public float32 b2FixtureDef::friction [b2Fixture.h <77:10 77:17>]
SYMBOL_FIELD: public float32 b2FixtureDef::restitution [b2Fixture.h <80:10 80:20>]
SYMBOL_FIELD: public float32 b2FixtureDef::density [b2Fixture.h <83:10 83:16>]
SYMBOL_FIELD: public bool b2FixtureDef::isSensor [b2Fixture.h <87:7 87:14>]
SYMBOL_METHOD: public void b2FixtureDef::b2FixtureDef(const b2FixtureDef &) [b2Fixture.h <56:8 <56:8 56:19> 56:19>]
SYMBOL_METHOD: public void b2FixtureDef::b2FixtureDef(b2FixtureDef &&) [b2Fixture.h <56:8 <56:8 56:19> 56:19>]
SYMBOL_STRUCT: b2FixtureProxy [b2Fixture.h <94:1 <94:8 94:21> 100:1>]
SYMBOL_FIELD: public b2AABB b2FixtureProxy::aabb [b2Fixture.h <96:9 96:12>]
SYMBOL_FIELD: public b2Fixture * b2FixtureProxy::fixture [b2Fixture.h <97:13 97:19>]
SYMBOL_FIELD: public int32 b2FixtureProxy::childIndex [b2Fixture.h <98:8 98:17>]
SYMBOL_FIELD: public int32 b2FixtureProxy::proxyId [b2Fixture.h <99:8 99:14>]
SYMBOL_METHOD: public b2Shape::Type b2Fixture::GetType() const [b2Fixture.h <112:2 <112:16 112:22> 112:30>]
SYMBOL_METHOD: public b2Shape::Type b2Fixture::GetType() const [b2Fixture.h <238:1 <238:33 238:39> 241:1>]
SYMBOL_METHOD: public b2Shape * b2Fixture::GetShape() [b2Fixture.h <117:2 <117:11 117:18> 117:20>]
SYMBOL_METHOD: public b2Shape * b2Fixture::GetShape() [b2Fixture.h <243:1 <243:28 243:35> 246:1>]
SYMBOL_METHOD: public const b2Shape * b2Fixture::GetShape() const [b2Fixture.h <118:2 <118:17 118:24> 118:32>]
SYMBOL_METHOD: public const b2Shape * b2Fixture::GetShape() const [b2Fixture.h <248:1 <248:34 248:41> 251:1>]
SYMBOL_METHOD: public void b2Fixture::SetSensor(bool) [b2Fixture.h <121:2 <121:7 121:15> 121:28>]
SYMBOL_METHOD: public bool b2Fixture::IsSensor() const [b2Fixture.h <125:2 <125:7 125:14> 125:22>]
SYMBOL_METHOD: public bool b2Fixture::IsSensor() const [b2Fixture.h <253:1 <253:24 253:31> 256:1>]
SYMBOL_METHOD: public void b2Fixture::SetFilterData(const b2Filter &) [b2Fixture.h <130:2 <130:7 130:19> 130:43>]
SYMBOL_METHOD: public const b2Filter & b2Fixture::GetFilterData() const [b2Fixture.h <133:2 <133:18 133:30> 133:38>]
SYMBOL_METHOD: public const b2Filter & b2Fixture::GetFilterData() const [b2Fixture.h <258:1 <258:35 258:47> 261:1>]
SYMBOL_METHOD: public void b2Fixture::Refilter() [b2Fixture.h <136:2 <136:7 136:14> 136:16>]
SYMBOL_METHOD: public b2Body * b2Fixture::GetBody() [b2Fixture.h <140:2 <140:10 140:16> 140:18>]
SYMBOL_METHOD: public b2Body * b2Fixture::GetBody() [b2Fixture.h <273:1 <273:27 273:33> 276:1>]
SYMBOL_METHOD: public const b2Body * b2Fixture::GetBody() const [b2Fixture.h <141:2 <141:16 141:22> 141:30>]
SYMBOL_METHOD: public const b2Body * b2Fixture::GetBody() const [b2Fixture.h <278:1 <278:33 278:39> 281:1>]
SYMBOL_METHOD: public b2Fixture * b2Fixture::GetNext() [b2Fixture.h <145:2 <145:13 145:19> 145:21>]
SYMBOL_METHOD: public b2Fixture * b2Fixture::GetNext() [b2Fixture.h <283:1 <283:30 283:36> 286:1>]
SYMBOL_METHOD: public const b2Fixture * b2Fixture::GetNext() const [b2Fixture.h <146:2 <146:19 146:25> 146:33>]
SYMBOL_METHOD: public const b2Fixture * b2Fixture::GetNext() const [b2Fixture.h <288:1 <288:36 288:42> 291:1>]
SYMBOL_METHOD: public void * b2Fixture::GetUserData() const [b2Fixture.h <150:2 <150:8 150:18> 150:26>]
SYMBOL_METHOD: public void * b2Fixture::GetUserData() const [b2Fixture.h <263:1 <263:25 263:35> 266:1>]
SYMBOL_METHOD: public void b2Fixture::SetUserData(void *) [b2Fixture.h <153:2 <153:7 153:17> 153:29>]
SYMBOL_METHOD: public void b2Fixture::SetUserData(void *) [b2Fixture.h <268:1 <268:24 268:34> 271:1>]
SYMBOL_METHOD: public bool b2Fixture::TestPoint(const b2Vec2 &) const [b2Fixture.h <157:2 <157:7 157:15> 157:38>]
SYMBOL_METHOD: public bool b2Fixture::TestPoint(const b2Vec2 &) const [b2Fixture.h <324:1 <324:24 324:32> 327:1>]
SYMBOL_METHOD: public bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const [b2Fixture.h <162:2 <162:7 162:13> 162:91>]
SYMBOL_METHOD: public bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const [b2Fixture.h <329:1 <329:24 329:30> 332:1>]
SYMBOL_METHOD: public void b2Fixture::GetMassData(b2MassData *) const [b2Fixture.h <167:2 <167:7 167:17> 167:45>]
SYMBOL_METHOD: public void b2Fixture::GetMassData(b2MassData *) const [b2Fixture.h <334:1 <334:24 334:34> 337:1>]
SYMBOL_METHOD: public void b2Fixture::SetDensity(float32) [b2Fixture.h <171:2 <171:7 171:16> 171:33>]
SYMBOL_METHOD: public void b2Fixture::SetDensity(float32) [b2Fixture.h <293:1 <293:24 293:33> 297:1>]
SYMBOL_METHOD: public float32 b2Fixture::GetDensity() const [b2Fixture.h <174:2 <174:10 174:19> 174:27>]
SYMBOL_METHOD: public float32 b2Fixture::GetDensity() const [b2Fixture.h <299:1 <299:27 299:36> 302:1>]
SYMBOL_METHOD: public float32 b2Fixture::GetFriction() const [b2Fixture.h <177:2 <177:10 177:20> 177:28>]
SYMBOL_METHOD: public float32 b2Fixture::GetFriction() const [b2Fixture.h <304:1 <304:27 304:37> 307:1>]
SYMBOL_METHOD: public void b2Fixture::SetFriction(float32) [b2Fixture.h <181:2 <181:7 181:17> 181:35>]
SYMBOL_METHOD: public void b2Fixture::SetFriction(float32) [b2Fixture.h <309:1 <309:24 309:34> 312:1>]
SYMBOL_METHOD: public float32 b2Fixture::GetRestitution() const [b2Fixture.h <184:2 <184:10 184:23> 184:31>]
SYMBOL_METHOD: public float32 b2Fixture::GetRestitution() const [b2Fixture.h <314:1 <314:27 314:40> 317:1>]
SYMBOL_METHOD: public void b2Fixture::SetRestitution(float32) [b2Fixture.h <188:2 <188:7 188:20> 188:41>]
SYMBOL_METHOD: public void b2Fixture::SetRestitution(float32) [b2Fixture.h <319:1 <319:24 319:37> 322:1>]
SYMBOL_METHOD: public const b2AABB & b2Fixture::GetAABB(int32) const [b2Fixture.h <193:2 <193:16 193:22> 193:46>]
SYMBOL_METHOD: public const b2AABB & b2Fixture::GetAABB(int32) const [b2Fixture.h <339:1 <339:33 339:39> 343:1>]
SYMBOL_METHOD: public void b2Fixture::Dump(int32) [b2Fixture.h <196:2 <196:7 196:10> 196:27>]
SYMBOL_METHOD: protected void b2Fixture::b2Fixture() [b2Fixture.h <205:2 <205:2 205:10> 205:12>]
SYMBOL_METHOD: protected void b2Fixture::Create(b2BlockAllocator *, b2Body *, const b2FixtureDef *) [b2Fixture.h <209:2 <209:7 209:12> 209:80>]
SYMBOL_METHOD: protected void b2Fixture::Destroy(b2BlockAllocator *) [b2Fixture.h <210:2 <210:7 210:13> 210:42>]
SYMBOL_METHOD: protected void b2Fixture::CreateProxies(b2BroadPhase *, const b2Transform &) [b2Fixture.h <213:2 <213:7 213:19> 213:68>]
SYMBOL_METHOD: protected void b2Fixture::DestroyProxies(b2BroadPhase *) [b2Fixture.h <214:2 <214:7 214:20> 214:46>]
SYMBOL_METHOD: protected void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) [b2Fixture.h <216:2 <216:7 216:17> 216:91>]
SYMBOL_FIELD: protected float32 b2Fixture::m_density [b2Fixture.h <218:10 218:18>]
SYMBOL_FIELD: protected b2Fixture * b2Fixture::m_next [b2Fixture.h <220:13 220:18>]
SYMBOL_FIELD: protected b2Body * b2Fixture::m_body [b2Fixture.h <221:10 221:15>]
SYMBOL_FIELD: protected b2Shape * b2Fixture::m_shape [b2Fixture.h <223:11 223:17>]
SYMBOL_FIELD: protected float32 b2Fixture::m_friction [b2Fixture.h <225:10 225:19>]
SYMBOL_FIELD: protected float32 b2Fixture::m_restitution [b2Fixture.h <226:10 226:22>]
SYMBOL_FIELD: protected b2FixtureProxy * b2Fixture::m_proxies [b2Fixture.h <228:18 228:26>]
SYMBOL_FIELD: protected int32 b2Fixture::m_proxyCount [b2Fixture.h <229:8 229:19>]
SYMBOL_FIELD: protected b2Filter b2Fixture::m_filter [b2Fixture.h <231:11 231:18>]
SYMBOL_FIELD: protected bool b2Fixture::m_isSensor [b2Fixture.h <233:7 233:16>]
SYMBOL_FIELD: protected void * b2Fixture::m_userData [b2Fixture.h <235:8 235:17>]
SYMBOL_METHOD: public void b2Fixture::b2Fixture(const b2Fixture &) [b2Fixture.h <107:7 <107:7 107:15> 107:15>]
SYMBOL_METHOD: public void b2Fixture::b2Fixture(b2Fixture &&) [b2Fixture.h <107:7 <107:7 107:15> 107:15>]
SYMBOL_METHOD: public void b2Fixture::~b2Fixture() [b2Fixture.h <107:7 <107:7 107:15> 107:15>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_stackSize [b2StackAllocator.h <24:13 24:24>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_maxStackEntries [b2StackAllocator.h <25:13 25:30>]
SYMBOL_STRUCT: b2StackEntry [b2StackAllocator.h <27:1 <27:8 27:19> 32:1>]
SYMBOL_FIELD: public char * b2StackEntry::data [b2StackAllocator.h <29:8 29:11>]
SYMBOL_FIELD: public int32 b2StackEntry::size [b2StackAllocator.h <30:8 30:11>]
SYMBOL_FIELD: public bool b2StackEntry::usedMalloc [b2StackAllocator.h <31:7 31:16>]
SYMBOL_METHOD: public void b2StackEntry::b2StackEntry(const b2StackEntry &) [b2StackAllocator.h <27:8 <27:8 27:19> 27:19>]
SYMBOL_METHOD: public void b2StackEntry::b2StackEntry(b2StackEntry &&) [b2StackAllocator.h <27:8 <27:8 27:19> 27:19>]
SYMBOL_METHOD: public void b2StackEntry::~b2StackEntry() [b2StackAllocator.h <27:8 <27:8 27:19> 27:19>]
SYMBOL_CLASS: b2StackAllocator [b2StackAllocator.h <37:1 <37:7 37:22> 58:1>]
SYMBOL_CLASS: b2StackAllocator [b2Contact.h <32:7 32:22>]
SYMBOL_METHOD: public void b2StackAllocator::b2StackAllocator() [b2StackAllocator.h <40:2 <40:2 40:17> 40:19>]
SYMBOL_METHOD: public void b2StackAllocator::~b2StackAllocator() [b2StackAllocator.h <41:2 <41:2 41:18> 41:20>]
SYMBOL_METHOD: public void * b2StackAllocator::Allocate(int32) [b2StackAllocator.h <43:2 <43:8 43:15> 43:27>]
SYMBOL_METHOD: public void b2StackAllocator::Free(void *) [b2StackAllocator.h <44:2 <44:7 44:10> 44:19>]
SYMBOL_METHOD: public int32 b2StackAllocator::GetMaxAllocation() const [b2StackAllocator.h <46:2 <46:8 46:23> 46:31>]
SYMBOL_FIELD: private char [] b2StackAllocator::m_data [b2StackAllocator.h <50:7 50:12>]
SYMBOL_FIELD: private int32 b2StackAllocator::m_index [b2StackAllocator.h <51:8 51:14>]
SYMBOL_FIELD: private int32 b2StackAllocator::m_allocation [b2StackAllocator.h <53:8 53:19>]
SYMBOL_FIELD: private int32 b2StackAllocator::m_maxAllocation [b2StackAllocator.h <54:8 54:22>]
SYMBOL_FIELD: private b2StackEntry [] b2StackAllocator::m_entries [b2StackAllocator.h <56:15 56:23>]
SYMBOL_FIELD: private int32 b2StackAllocator::m_entryCount [b2StackAllocator.h <57:8 57:19>]
SYMBOL_METHOD: public void b2StackAllocator::b2StackAllocator(const b2StackAllocator &) [b2StackAllocator.h <37:7 <37:7 37:22> 37:22>]
SYMBOL_CLASS: b2GrowableStack<typename T, int32 N> [b2GrowableStack.h <27:1 <28:7 28:21> 82:1>]
SYMBOL_METHOD: public void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() [b2GrowableStack.h <31:2 <31:2 <31:2 31:16> 31:18> 36:2>]
SYMBOL_FIELD: private T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <78:5 78:11>]
SYMBOL_FIELD: private T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <79:4 79:10>]
SYMBOL_FIELD: private int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <80:8 80:14>]
SYMBOL_FIELD: private int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <81:8 81:17>]
SYMBOL_METHOD: public void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() [b2GrowableStack.h <38:2 <38:2 <38:2 38:17> 38:19> 45:2>]
SYMBOL_METHOD: public void b2GrowableStack<typename T, int32 N>::Push(const T &) [b2GrowableStack.h <47:2 <47:2 <47:7 47:10> 47:28> 63:2>]
SYMBOL_METHOD: public T b2GrowableStack<typename T, int32 N>::Pop() [b2GrowableStack.h <65:2 <65:2 <65:4 65:6> 65:8> 70:2>]
SYMBOL_METHOD: public int32 b2GrowableStack<typename T, int32 N>::GetCount() [b2GrowableStack.h <72:2 <72:2 <72:8 72:15> 72:17> 75:2>]
SYMBOL_CLASS: public b2GrowableStack<int, 256> [b2GrowableStack.h <27:1 <28:7 28:21> 82:1>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::b2GrowableStack() [b2GrowableStack.h <31:2 <31:2 31:16> 36:2>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::~b2GrowableStack() [b2GrowableStack.h <38:2 <38:2 38:17> 45:2>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::Push(const int &) [b2GrowableStack.h <47:2 <47:7 47:10> 63:2>]
SYMBOL_METHOD: public int b2GrowableStack<int, 256>::Pop() [b2GrowableStack.h <65:2 <65:4 65:6> 70:2>]
SYMBOL_METHOD: public int32 b2GrowableStack<int, 256>::GetCount() [b2GrowableStack.h <72:2 <72:8 72:15> 75:2>]
SYMBOL_FIELD: private int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <78:5 78:11>]
SYMBOL_FIELD: private int [] b2GrowableStack<int, 256>::m_array [b2GrowableStack.h <79:4 79:10>]
SYMBOL_FIELD: private int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <80:8 80:14>]
SYMBOL_FIELD: private int32 b2GrowableStack<int, 256>::m_capacity [b2GrowableStack.h <81:8 81:17>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::b2GrowableStack(const b2GrowableStack<int, 256> &) [b2GrowableStack.h <28:7 <28:7 28:21> 28:21>]
SYMBOL_STRUCT: b2TreeNode [b2DynamicTree.h <28:1 <28:8 28:17> 51:1>]
SYMBOL_METHOD: public bool b2TreeNode::IsLeaf() const [b2DynamicTree.h <30:2 <30:2 <30:7 30:12> 30:20> 33:2>]
SYMBOL_FIELD: public int32 b2TreeNode::child1 [b2DynamicTree.h <46:8 46:13>]
SYMBOL_FIELD: public b2AABB b2TreeNode::aabb [b2DynamicTree.h <36:9 36:12>]
SYMBOL_FIELD: public void * b2TreeNode::userData [b2DynamicTree.h <38:8 38:15>]
SYMBOL_UNION: public b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) [b2DynamicTree.h <40:2 <40:2 40:6> 44:2>]
SYMBOL_FIELD: public int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.h <42:9 42:14>]
SYMBOL_FIELD: public int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next [b2DynamicTree.h <43:9 43:12>]
SYMBOL_FIELD: public b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.h <40:2 40:6>]
SYMBOL_FIELD: public int32 b2TreeNode::child2 [b2DynamicTree.h <47:8 47:13>]
SYMBOL_FIELD: public int32 b2TreeNode::height [b2DynamicTree.h <50:8 50:13>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <156:14 156:26>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <162:22 162:34>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <169:13 169:25>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <204:13 204:25>]
SYMBOL_CLASS: b2DynamicTree [b2DynamicTree.h <61:1 <61:7 61:19> 154:1>]
SYMBOL_METHOD: public void b2DynamicTree::b2DynamicTree() [b2DynamicTree.h <65:2 <65:2 65:14> 65:16>]
SYMBOL_METHOD: public void b2DynamicTree::~b2DynamicTree() [b2DynamicTree.h <68:2 <68:2 68:15> 68:17>]
SYMBOL_METHOD: public int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) [b2DynamicTree.h <71:2 <71:8 71:18> 71:54>]
SYMBOL_METHOD: public void b2DynamicTree::DestroyProxy(int32) [b2DynamicTree.h <74:2 <74:7 74:18> 74:33>]
SYMBOL_METHOD: public bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) [b2DynamicTree.h <80:2 <80:7 80:15> 80:79>]
SYMBOL_METHOD: public void * b2DynamicTree::GetUserData(int32) const [b2DynamicTree.h <84:2 <84:8 84:18> 84:39>]
SYMBOL_METHOD: public void * b2DynamicTree::GetUserData(int32) const [b2DynamicTree.h <156:1 <156:29 156:39> 160:1>]
SYMBOL_METHOD: public const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2DynamicTree.h <87:2 <87:16 87:25> 87:46>]
SYMBOL_METHOD: public const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2DynamicTree.h <162:1 <162:37 162:46> 166:1>]
SYMBOL_METHOD: public void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const [b2DynamicTree.h <92:2 <92:7 92:11> 92:50>]
SYMBOL_METHOD: public void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const [b2DynamicTree.h <168:1 <169:28 169:32> 201:1>]
SYMBOL_METHOD: public void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const [b2DynamicTree.h <169:1 <169:28 169:32> 201:1>]
SYMBOL_METHOD: public void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const [b2DynamicTree.h <102:2 <102:7 102:13> 102:61>]
SYMBOL_METHOD: public void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const [b2DynamicTree.h <203:1 <204:28 204:34> 287:1>]
SYMBOL_METHOD: public void b2DynamicTree::Validate() const [b2DynamicTree.h <105:2 <105:7 105:14> 105:22>]
SYMBOL_METHOD: public int32 b2DynamicTree::GetHeight() const [b2DynamicTree.h <109:2 <109:8 109:16> 109:24>]
SYMBOL_METHOD: public int32 b2DynamicTree::GetMaxBalance() const [b2DynamicTree.h <113:2 <113:8 113:20> 113:28>]
SYMBOL_METHOD: public float32 b2DynamicTree::GetAreaRatio() const [b2DynamicTree.h <116:2 <116:10 116:21> 116:29>]
SYMBOL_METHOD: public void b2DynamicTree::RebuildBottomUp() [b2DynamicTree.h <119:2 <119:7 119:21> 119:23>]
SYMBOL_METHOD: public void b2DynamicTree::ShiftOrigin(const b2Vec2 &) [b2DynamicTree.h <124:2 <124:7 124:17> 124:42>]
SYMBOL_METHOD: private int32 b2DynamicTree::AllocateNode() [b2DynamicTree.h <128:2 <128:8 128:19> 128:21>]
SYMBOL_METHOD: private void b2DynamicTree::FreeNode(int32) [b2DynamicTree.h <129:2 <129:7 129:14> 129:26>]
SYMBOL_METHOD: private void b2DynamicTree::InsertLeaf(int32) [b2DynamicTree.h <131:2 <131:7 131:16> 131:28>]
SYMBOL_METHOD: private void b2DynamicTree::RemoveLeaf(int32) [b2DynamicTree.h <132:2 <132:7 132:16> 132:28>]
SYMBOL_METHOD: private int32 b2DynamicTree::Balance(int32) [b2DynamicTree.h <134:2 <134:8 134:14> 134:27>]
SYMBOL_METHOD: private int32 b2DynamicTree::ComputeHeight() const [b2DynamicTree.h <136:2 <136:8 136:20> 136:28>]
SYMBOL_METHOD: private int32 b2DynamicTree::ComputeHeight(int32) const [b2DynamicTree.h <137:2 <137:8 137:20> 137:40>]
SYMBOL_METHOD: private void b2DynamicTree::ValidateStructure(int32) const [b2DynamicTree.h <139:2 <139:7 139:23> 139:42>]
SYMBOL_METHOD: private void b2DynamicTree::ValidateMetrics(int32) const [b2DynamicTree.h <140:2 <140:7 140:21> 140:40>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_root [b2DynamicTree.h <142:8 142:13>]
SYMBOL_FIELD: private b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <144:14 144:20>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_nodeCount [b2DynamicTree.h <145:8 145:18>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.h <146:8 146:21>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_freeList [b2DynamicTree.h <148:8 148:17>]
SYMBOL_FIELD: private uint32 b2DynamicTree::m_path [b2DynamicTree.h <151:9 151:14>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_insertionCount [b2DynamicTree.h <153:8 153:23>]
SYMBOL_METHOD: public void b2DynamicTree::b2DynamicTree(const b2DynamicTree &) [b2DynamicTree.h <61:7 <61:7 61:19> 61:19>]
SYMBOL_METHOD: public b2DynamicTree & b2DynamicTree::operator=(const b2DynamicTree &) [b2DynamicTree.h <61:7 <61:7 61:19> 61:19>]
SYMBOL_STRUCT: b2Pair [b2BroadPhase.h <27:1 <27:8 27:13> 31:1>]
SYMBOL_FIELD: public int32 b2Pair::proxyIdA [b2BroadPhase.h <29:8 29:15>]
SYMBOL_FIELD: public int32 b2Pair::proxyIdB [b2BroadPhase.h <30:8 30:15>]
SYMBOL_ENUM: public b2BroadPhase::anonymous enum (b2BroadPhase.h<40:2>) [b2BroadPhase.h <40:2 <40:2 40:5> 43:2>]
SYMBOL_ENUM_CONSTANT: b2BroadPhase::anonymous enum (b2BroadPhase.h<40:2>)::e_nullProxy [b2BroadPhase.h <42:3 42:13>]
SYMBOL_METHOD: public void b2BroadPhase::b2BroadPhase() [b2BroadPhase.h <45:2 <45:2 45:13> 45:15>]
SYMBOL_METHOD: public void b2BroadPhase::~b2BroadPhase() [b2BroadPhase.h <46:2 <46:2 46:14> 46:16>]
SYMBOL_METHOD: public int32 b2BroadPhase::CreateProxy(const b2AABB &, void *) [b2BroadPhase.h <50:2 <50:8 50:18> 50:54>]
SYMBOL_METHOD: public void b2BroadPhase::DestroyProxy(int32) [b2BroadPhase.h <53:2 <53:7 53:18> 53:33>]
SYMBOL_METHOD: public void b2BroadPhase::MoveProxy(int32, const b2AABB &, const b2Vec2 &) [b2BroadPhase.h <57:2 <57:7 57:15> 57:78>]
SYMBOL_METHOD: public void b2BroadPhase::TouchProxy(int32) [b2BroadPhase.h <60:2 <60:7 60:16> 60:31>]
SYMBOL_METHOD: public const b2AABB & b2BroadPhase::GetFatAABB(int32) const [b2BroadPhase.h <63:2 <63:16 63:25> 63:46>]
SYMBOL_METHOD: public const b2AABB & b2BroadPhase::GetFatAABB(int32) const [b2BroadPhase.h <159:1 <159:36 159:45> 162:1>]
SYMBOL_METHOD: public void * b2BroadPhase::GetUserData(int32) const [b2BroadPhase.h <66:2 <66:8 66:18> 66:39>]
SYMBOL_METHOD: public void * b2BroadPhase::GetUserData(int32) const [b2BroadPhase.h <147:1 <147:28 147:38> 150:1>]
SYMBOL_METHOD: public bool b2BroadPhase::TestOverlap(int32, int32) const [b2BroadPhase.h <69:2 <69:7 69:17> 69:55>]
SYMBOL_METHOD: public bool b2BroadPhase::TestOverlap(int32, int32) const [b2BroadPhase.h <152:1 <152:27 152:37> 157:1>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetProxyCount() const [b2BroadPhase.h <72:2 <72:8 72:20> 72:28>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetProxyCount() const [b2BroadPhase.h <164:1 <164:28 164:40> 167:1>]
SYMBOL_METHOD: public void b2BroadPhase::UpdatePairs<typename T>(T *) [b2BroadPhase.h <76:2 <76:7 76:17> 76:30>]
SYMBOL_METHOD: public void b2BroadPhase::UpdatePairs<typename T>(T *) [b2BroadPhase.h <184:1 <185:20 185:30> 238:1>]
SYMBOL_METHOD: public void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const [b2BroadPhase.h <81:2 <81:7 81:11> 81:50>]
SYMBOL_METHOD: public void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const [b2BroadPhase.h <240:1 <241:27 241:31> 244:1>]
SYMBOL_METHOD: public void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const [b2BroadPhase.h <91:2 <91:7 91:13> 91:61>]
SYMBOL_METHOD: public void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const [b2BroadPhase.h <246:1 <247:27 247:33> 250:1>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetTreeHeight() const [b2BroadPhase.h <94:2 <94:8 94:20> 94:28>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetTreeHeight() const [b2BroadPhase.h <169:1 <169:28 169:40> 172:1>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetTreeBalance() const [b2BroadPhase.h <97:2 <97:8 97:21> 97:29>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetTreeBalance() const [b2BroadPhase.h <174:1 <174:28 174:41> 177:1>]
SYMBOL_METHOD: public float32 b2BroadPhase::GetTreeQuality() const [b2BroadPhase.h <100:2 <100:10 100:23> 100:31>]
SYMBOL_METHOD: public float32 b2BroadPhase::GetTreeQuality() const [b2BroadPhase.h <179:1 <179:30 179:43> 182:1>]
SYMBOL_METHOD: public void b2BroadPhase::ShiftOrigin(const b2Vec2 &) [b2BroadPhase.h <105:2 <105:7 105:17> 105:42>]
SYMBOL_METHOD: public void b2BroadPhase::ShiftOrigin(const b2Vec2 &) [b2BroadPhase.h <252:1 <252:27 252:37> 255:1>]
SYMBOL_METHOD: private void b2BroadPhase::BufferMove(int32) [b2BroadPhase.h <111:2 <111:7 111:16> 111:31>]
SYMBOL_METHOD: private void b2BroadPhase::UnBufferMove(int32) [b2BroadPhase.h <112:2 <112:7 112:18> 112:33>]
SYMBOL_METHOD: private bool b2BroadPhase::QueryCallback(int32) [b2BroadPhase.h <114:2 <114:7 114:19> 114:34>]
SYMBOL_FIELD: private b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <116:16 116:21>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_proxyCount [b2BroadPhase.h <118:8 118:19>]
SYMBOL_FIELD: private int32 * b2BroadPhase::m_moveBuffer [b2BroadPhase.h <120:9 120:20>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_moveCapacity [b2BroadPhase.h <121:8 121:21>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_moveCount [b2BroadPhase.h <122:8 122:18>]
SYMBOL_FIELD: private b2Pair * b2BroadPhase::m_pairBuffer [b2BroadPhase.h <124:10 124:21>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_pairCapacity [b2BroadPhase.h <125:8 125:21>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_pairCount [b2BroadPhase.h <126:8 126:18>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_queryProxyId [b2BroadPhase.h <128:8 128:21>]
SYMBOL_METHOD: public void b2BroadPhase::b2BroadPhase(const b2BroadPhase &) [b2BroadPhase.h <36:7 <36:7 36:18> 36:18>]
SYMBOL_METHOD: public b2BroadPhase & b2BroadPhase::operator=(const b2BroadPhase &) [b2BroadPhase.h <36:7 <36:7 36:18> 36:18>]
SYMBOL_FUNCTION: bool b2PairLessThan(const b2Pair &, const b2Pair &) [b2BroadPhase.h <132:1 <132:1 <132:13 132:26> 132:68> 145:1>]
SYMBOL_FUNCTION: void std::sort<b2Pair *, bool(const b2Pair &, const b2Pair &) *>(b2Pair * const, b2Pair * const, bool(const b2Pair &, const b2Pair &) *)
QUALIFIER: std [b2BroadPhase.h <211:2 211:4>]
SYMBOL_NAMESPACE: std
SYMBOL_CLASS: b2ContactFilter [b2ContactManager.h <25:7 25:21>]
SYMBOL_CLASS: b2ContactFilter [b2WorldCallbacks.h <52:1 <52:7 52:21> 60:1>]
SYMBOL_CLASS: b2ContactListener [b2ContactManager.h <26:7 26:23>]
SYMBOL_CLASS: b2ContactListener [b2WorldCallbacks.h <81:1 <81:7 81:23> 119:1>]
SYMBOL_CLASS: b2ContactListener [b2Contact.h <33:7 33:23>]
SYMBOL_METHOD: public void b2ContactManager::b2ContactManager() [b2ContactManager.h <33:2 <33:2 33:17> 33:19>]
SYMBOL_METHOD: public void b2ContactManager::AddPair(void *, void *) [b2ContactManager.h <36:2 <36:7 36:13> 36:57>]
SYMBOL_METHOD: public void b2ContactManager::FindNewContacts() [b2ContactManager.h <38:2 <38:7 38:21> 38:23>]
SYMBOL_METHOD: public void b2ContactManager::Destroy(b2Contact *) [b2ContactManager.h <40:2 <40:7 40:13> 40:27>]
SYMBOL_METHOD: public void b2ContactManager::Collide() [b2ContactManager.h <42:2 <42:7 42:13> 42:15>]
SYMBOL_FIELD: public b2BroadPhase b2ContactManager::m_broadPhase [b2ContactManager.h <44:15 44:26>]
SYMBOL_FIELD: public b2Contact * b2ContactManager::m_contactList [b2ContactManager.h <45:13 45:25>]
SYMBOL_FIELD: public int32 b2ContactManager::m_contactCount [b2ContactManager.h <46:8 46:21>]
SYMBOL_FIELD: public b2ContactFilter * b2ContactManager::m_contactFilter [b2ContactManager.h <47:19 47:33>]
SYMBOL_FIELD: public b2ContactListener * b2ContactManager::m_contactListener [b2ContactManager.h <48:21 48:37>]
SYMBOL_FIELD: public b2BlockAllocator * b2ContactManager::m_allocator [b2ContactManager.h <49:20 49:30>]
SYMBOL_METHOD: public void b2ContactManager::b2ContactManager(const b2ContactManager &) [b2ContactManager.h <30:7 <30:7 30:22> 30:22>]
SYMBOL_METHOD: public void b2ContactManager::b2ContactManager(b2ContactManager &&) [b2ContactManager.h <30:7 <30:7 30:22> 30:22>]
SYMBOL_METHOD: public b2ContactManager & b2ContactManager::operator=(b2ContactManager &&) [b2ContactManager.h <30:7 <30:7 30:22> 30:22>]
SYMBOL_METHOD: public void b2ContactManager::~b2ContactManager() [b2ContactManager.h <30:7 <30:7 30:22> 30:22>]
SYMBOL_STRUCT: b2ContactResult [b2WorldCallbacks.h <30:8 30:22>]
SYMBOL_CLASS: b2DestructionListener [b2WorldCallbacks.h <36:1 <36:7 36:27> 48:1>]
SYMBOL_METHOD: public void b2DestructionListener::~b2DestructionListener() [b2WorldCallbacks.h <39:2 <39:2 <39:10 39:31> 39:33> 39:36>]
SYMBOL_METHOD: public void b2DestructionListener::SayGoodbye(b2Joint *) [b2WorldCallbacks.h <43:2 <43:15 43:24> 43:44>]
SYMBOL_METHOD: public void b2DestructionListener::SayGoodbye(b2Fixture *) [b2WorldCallbacks.h <47:2 <47:15 47:24> 47:48>]
SYMBOL_METHOD: public b2DestructionListener & b2DestructionListener::operator=(const b2DestructionListener &) [b2WorldCallbacks.h <36:7 <36:7 36:27> 36:27>]
SYMBOL_METHOD: public void b2ContactFilter::~b2ContactFilter() [b2WorldCallbacks.h <55:2 <55:2 <55:10 55:25> 55:27> 55:30>]
SYMBOL_METHOD: public bool b2ContactFilter::ShouldCollide(b2Fixture *, b2Fixture *) [b2WorldCallbacks.h <59:2 <59:15 59:27> 59:69>]
SYMBOL_METHOD: public b2ContactFilter & b2ContactFilter::operator=(const b2ContactFilter &) [b2WorldCallbacks.h <52:7 <52:7 52:21> 52:21>]
SYMBOL_STRUCT: b2ContactImpulse [b2WorldCallbacks.h <65:1 <65:8 65:23> 70:1>]
SYMBOL_FIELD: public float32 [] b2ContactImpulse::normalImpulses [b2WorldCallbacks.h <67:10 67:23>]
SYMBOL_FIELD: public float32 [] b2ContactImpulse::tangentImpulses [b2WorldCallbacks.h <68:10 68:24>]
SYMBOL_FIELD: public int32 b2ContactImpulse::count [b2WorldCallbacks.h <69:8 69:12>]
SYMBOL_METHOD: public void b2ContactListener::~b2ContactListener() [b2WorldCallbacks.h <84:2 <84:2 <84:10 84:27> 84:29> 84:32>]
SYMBOL_METHOD: public void b2ContactListener::BeginContact(b2Contact *) [b2WorldCallbacks.h <87:2 <87:2 <87:15 87:26> 87:46> 87:72>]
SYMBOL_METHOD: public void b2ContactListener::EndContact(b2Contact *) [b2WorldCallbacks.h <90:2 <90:2 <90:15 90:24> 90:44> 90:70>]
SYMBOL_METHOD: public void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) [b2WorldCallbacks.h <102:2 <102:2 <102:15 102:22> 102:73> 106:2>]
SYMBOL_METHOD: public void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) [b2WorldCallbacks.h <114:2 <114:2 <114:15 114:23> 114:76> 118:2>]
SYMBOL_METHOD: public b2ContactListener & b2ContactListener::operator=(const b2ContactListener &) [b2WorldCallbacks.h <81:7 <81:7 81:23> 81:23>]
SYMBOL_CLASS: b2QueryCallback [b2WorldCallbacks.h <123:1 <123:7 123:21> 131:1>]
SYMBOL_METHOD: public void b2QueryCallback::~b2QueryCallback() [b2WorldCallbacks.h <126:2 <126:2 <126:10 126:25> 126:27> 126:30>]
SYMBOL_METHOD: public bool b2QueryCallback::ReportFixture(b2Fixture *) [b2WorldCallbacks.h <130:2 <130:15 130:27> 130:51>]
SYMBOL_METHOD: public b2QueryCallback & b2QueryCallback::operator=(const b2QueryCallback &) [b2WorldCallbacks.h <123:7 <123:7 123:21> 123:21>]
SYMBOL_CLASS: b2RayCastCallback [b2WorldCallbacks.h <135:1 <135:7 135:23> 153:1>]
SYMBOL_METHOD: public void b2RayCastCallback::~b2RayCastCallback() [b2WorldCallbacks.h <138:2 <138:2 <138:10 138:27> 138:29> 138:32>]
SYMBOL_METHOD: public float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) [b2WorldCallbacks.h <151:2 <151:18 151:30> 152:52>]
SYMBOL_METHOD: public b2RayCastCallback & b2RayCastCallback::operator=(const b2RayCastCallback &) [b2WorldCallbacks.h <135:7 <135:7 135:23> 135:23>]
SYMBOL_STRUCT: b2Profile [b2TimeStep.h <25:1 <25:8 25:16> 35:1>]
SYMBOL_FIELD: public float32 b2Profile::step [b2TimeStep.h <27:10 27:13>]
SYMBOL_FIELD: public float32 b2Profile::collide [b2TimeStep.h <28:10 28:16>]
SYMBOL_FIELD: public float32 b2Profile::solve [b2TimeStep.h <29:10 29:14>]
SYMBOL_FIELD: public float32 b2Profile::solveInit [b2TimeStep.h <30:10 30:18>]
SYMBOL_FIELD: public float32 b2Profile::solveVelocity [b2TimeStep.h <31:10 31:22>]
SYMBOL_FIELD: public float32 b2Profile::solvePosition [b2TimeStep.h <32:10 32:22>]
SYMBOL_FIELD: public float32 b2Profile::broadphase [b2TimeStep.h <33:10 33:19>]
SYMBOL_FIELD: public float32 b2Profile::solveTOI [b2TimeStep.h <34:10 34:17>]
SYMBOL_METHOD: public void b2Profile::b2Profile(const b2Profile &) [b2TimeStep.h <25:8 <25:8 25:16> 25:16>]
SYMBOL_METHOD: public void b2Profile::b2Profile(b2Profile &&) [b2TimeStep.h <25:8 <25:8 25:16> 25:16>]
SYMBOL_METHOD: public void b2Profile::~b2Profile() [b2TimeStep.h <25:8 <25:8 25:16> 25:16>]
SYMBOL_STRUCT: b2TimeStep [b2TimeStep.h <38:1 <38:8 38:17> 46:1>]
SYMBOL_FIELD: public float32 b2TimeStep::dt [b2TimeStep.h <40:10 40:11>]
SYMBOL_FIELD: public float32 b2TimeStep::inv_dt [b2TimeStep.h <41:10 41:15>]
SYMBOL_FIELD: public float32 b2TimeStep::dtRatio [b2TimeStep.h <42:10 42:16>]
SYMBOL_FIELD: public int32 b2TimeStep::velocityIterations [b2TimeStep.h <43:8 43:25>]
SYMBOL_FIELD: public int32 b2TimeStep::positionIterations [b2TimeStep.h <44:8 44:25>]
SYMBOL_FIELD: public bool b2TimeStep::warmStarting [b2TimeStep.h <45:7 45:18>]
SYMBOL_STRUCT: b2Position [b2TimeStep.h <49:1 <49:8 49:17> 53:1>]
SYMBOL_FIELD: public b2Vec2 b2Position::c [b2TimeStep.h <51:9 51:9>]
SYMBOL_FIELD: public float32 b2Position::a [b2TimeStep.h <52:10 52:10>]
SYMBOL_STRUCT: b2Velocity [b2TimeStep.h <56:1 <56:8 56:17> 60:1>]
SYMBOL_FIELD: public b2Vec2 b2Velocity::v [b2TimeStep.h <58:9 58:9>]
SYMBOL_FIELD: public float32 b2Velocity::w [b2TimeStep.h <59:10 59:10>]
SYMBOL_STRUCT: b2SolverData [b2TimeStep.h <63:1 <63:8 63:19> 68:1>]
SYMBOL_STRUCT: b2SolverData [b2Joint.h <26:8 26:19>]
SYMBOL_FIELD: public b2TimeStep b2SolverData::step [b2TimeStep.h <65:13 65:16>]
SYMBOL_FIELD: public b2Position * b2SolverData::positions [b2TimeStep.h <66:14 66:22>]
SYMBOL_FIELD: public b2Velocity * b2SolverData::velocities [b2TimeStep.h <67:14 67:23>]
SYMBOL_STRUCT: b2Color [b2World.h <31:8 31:14>]
SYMBOL_STRUCT: b2JointDef [b2World.h <32:8 32:17>]
SYMBOL_STRUCT: b2JointDef [b2Joint.h <74:1 <74:8 74:17> 99:1>]
SYMBOL_CLASS: b2Draw [b2World.h <34:7 34:12>]
SYMBOL_METHOD: public void b2World::b2World(const b2Vec2 &) [b2World.h <46:2 <46:2 46:8> 46:31>]
SYMBOL_METHOD: public void b2World::~b2World() [b2World.h <49:2 <49:2 49:9> 49:11>]
SYMBOL_METHOD: public void b2World::SetDestructionListener(b2DestructionListener *) [b2World.h <53:2 <53:7 53:28> 53:61>]
SYMBOL_METHOD: public void b2World::SetContactFilter(b2ContactFilter *) [b2World.h <58:2 <58:7 58:22> 58:47>]
SYMBOL_METHOD: public void b2World::SetContactListener(b2ContactListener *) [b2World.h <62:2 <62:7 62:24> 62:53>]
SYMBOL_METHOD: public void b2World::SetDebugDraw(b2Draw *) [b2World.h <67:2 <67:7 67:18> 67:37>]
SYMBOL_METHOD: public b2Body * b2World::CreateBody(const b2BodyDef *) [b2World.h <72:2 <72:10 72:19> 72:41>]
SYMBOL_METHOD: public void b2World::DestroyBody(b2Body *) [b2World.h <78:2 <78:7 78:17> 78:31>]
SYMBOL_METHOD: public b2Joint * b2World::CreateJoint(const b2JointDef *) [b2World.h <83:2 <83:11 83:21> 83:44>]
SYMBOL_METHOD: public void b2World::DestroyJoint(b2Joint *) [b2World.h <87:2 <87:7 87:18> 87:34>]
SYMBOL_METHOD: public void b2World::Step(float32, int32, int32) [b2World.h <94:2 <94:7 94:10> 96:29>]
SYMBOL_METHOD: public void b2World::ClearForces() [b2World.h <105:2 <105:7 105:17> 105:19>]
SYMBOL_METHOD: public void b2World::DrawDebugData() [b2World.h <108:2 <108:7 108:19> 108:21>]
SYMBOL_METHOD: public void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const [b2World.h <114:2 <114:7 114:15> 114:68>]
SYMBOL_METHOD: public void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const [b2World.h <122:2 <122:7 122:13> 122:92>]
SYMBOL_METHOD: public b2Body * b2World::GetBodyList() [b2World.h <127:2 <127:10 127:20> 127:22>]
SYMBOL_METHOD: public b2Body * b2World::GetBodyList() [b2World.h <266:1 <266:25 266:35> 269:1>]
SYMBOL_METHOD: public const b2Body * b2World::GetBodyList() const [b2World.h <128:2 <128:16 128:26> 128:34>]
SYMBOL_METHOD: public const b2Body * b2World::GetBodyList() const [b2World.h <271:1 <271:31 271:41> 274:1>]
SYMBOL_METHOD: public b2Joint * b2World::GetJointList() [b2World.h <133:2 <133:11 133:22> 133:24>]
SYMBOL_METHOD: public b2Joint * b2World::GetJointList() [b2World.h <276:1 <276:26 276:37> 279:1>]
SYMBOL_METHOD: public const b2Joint * b2World::GetJointList() const [b2World.h <134:2 <134:17 134:28> 134:36>]
SYMBOL_METHOD: public const b2Joint * b2World::GetJointList() const [b2World.h <281:1 <281:32 281:43> 284:1>]
SYMBOL_METHOD: public b2Contact * b2World::GetContactList() [b2World.h <141:2 <141:13 141:26> 141:28>]
SYMBOL_METHOD: public b2Contact * b2World::GetContactList() [b2World.h <286:1 <286:28 286:41> 289:1>]
SYMBOL_METHOD: public const b2Contact * b2World::GetContactList() const [b2World.h <142:2 <142:19 142:32> 142:40>]
SYMBOL_METHOD: public const b2Contact * b2World::GetContactList() const [b2World.h <291:1 <291:34 291:47> 294:1>]
SYMBOL_METHOD: public void b2World::SetAllowSleeping(bool) [b2World.h <145:2 <145:7 145:22> 145:33>]
SYMBOL_METHOD: public bool b2World::GetAllowSleeping() const [b2World.h <146:2 <146:2 <146:7 146:22> 146:30> 146:55>]
SYMBOL_FIELD: private bool b2World::m_allowSleep [b2World.h <247:7 247:18>]
SYMBOL_METHOD: public void b2World::SetWarmStarting(bool) [b2World.h <149:2 <149:2 <149:7 149:21> 149:32> 149:59>]
SYMBOL_FIELD: private bool b2World::m_warmStarting [b2World.h <257:7 257:20>]
SYMBOL_METHOD: public bool b2World::GetWarmStarting() const [b2World.h <150:2 <150:2 <150:7 150:21> 150:29> 150:56>]
SYMBOL_METHOD: public void b2World::SetContinuousPhysics(bool) [b2World.h <153:2 <153:2 <153:7 153:26> 153:37> 153:69>]
SYMBOL_FIELD: private bool b2World::m_continuousPhysics [b2World.h <258:7 258:25>]
SYMBOL_METHOD: public bool b2World::GetContinuousPhysics() const [b2World.h <154:2 <154:2 <154:7 154:26> 154:34> 154:66>]
SYMBOL_METHOD: public void b2World::SetSubStepping(bool) [b2World.h <157:2 <157:2 <157:7 157:20> 157:31> 157:57>]
SYMBOL_FIELD: private bool b2World::m_subStepping [b2World.h <259:7 259:19>]
SYMBOL_METHOD: public bool b2World::GetSubStepping() const [b2World.h <158:2 <158:2 <158:7 158:20> 158:28> 158:54>]
SYMBOL_METHOD: public int32 b2World::GetProxyCount() const [b2World.h <161:2 <161:8 161:20> 161:28>]
SYMBOL_METHOD: public int32 b2World::GetBodyCount() const [b2World.h <164:2 <164:8 164:19> 164:27>]
SYMBOL_METHOD: public int32 b2World::GetBodyCount() const [b2World.h <296:1 <296:23 296:34> 299:1>]
SYMBOL_METHOD: public int32 b2World::GetJointCount() const [b2World.h <167:2 <167:8 167:20> 167:28>]
SYMBOL_METHOD: public int32 b2World::GetJointCount() const [b2World.h <301:1 <301:23 301:35> 304:1>]
SYMBOL_METHOD: public int32 b2World::GetContactCount() const [b2World.h <170:2 <170:8 170:22> 170:30>]
SYMBOL_METHOD: public int32 b2World::GetContactCount() const [b2World.h <306:1 <306:23 306:37> 309:1>]
SYMBOL_METHOD: public int32 b2World::GetTreeHeight() const [b2World.h <173:2 <173:8 173:20> 173:28>]
SYMBOL_METHOD: public int32 b2World::GetTreeBalance() const [b2World.h <176:2 <176:8 176:21> 176:29>]
SYMBOL_METHOD: public float32 b2World::GetTreeQuality() const [b2World.h <180:2 <180:10 180:23> 180:31>]
SYMBOL_METHOD: public void b2World::SetGravity(const b2Vec2 &) [b2World.h <183:2 <183:7 183:16> 183:39>]
SYMBOL_METHOD: public void b2World::SetGravity(const b2Vec2 &) [b2World.h <311:1 <311:22 311:31> 314:1>]
SYMBOL_METHOD: public b2Vec2 b2World::GetGravity() const [b2World.h <186:2 <186:9 186:18> 186:26>]
SYMBOL_METHOD: public b2Vec2 b2World::GetGravity() const [b2World.h <316:1 <316:24 316:33> 319:1>]
SYMBOL_METHOD: public bool b2World::IsLocked() const [b2World.h <189:2 <189:7 189:14> 189:22>]
SYMBOL_METHOD: public bool b2World::IsLocked() const [b2World.h <321:1 <321:22 321:29> 324:1>]
SYMBOL_METHOD: public void b2World::SetAutoClearForces(bool) [b2World.h <192:2 <192:7 192:24> 192:35>]
SYMBOL_METHOD: public void b2World::SetAutoClearForces(bool) [b2World.h <326:1 <326:22 326:39> 336:1>]
SYMBOL_METHOD: public bool b2World::GetAutoClearForces() const [b2World.h <195:2 <195:7 195:24> 195:32>]
SYMBOL_METHOD: public bool b2World::GetAutoClearForces() const [b2World.h <339:1 <339:22 339:39> 342:1>]
SYMBOL_METHOD: public void b2World::ShiftOrigin(const b2Vec2 &) [b2World.h <200:2 <200:7 200:17> 200:42>]
SYMBOL_METHOD: public const b2ContactManager & b2World::GetContactManager() const [b2World.h <203:2 <203:26 203:42> 203:50>]
SYMBOL_METHOD: public const b2ContactManager & b2World::GetContactManager() const [b2World.h <344:1 <344:41 344:57> 347:1>]
SYMBOL_METHOD: public const b2Profile & b2World::GetProfile() const [b2World.h <206:2 <206:19 206:28> 206:36>]
SYMBOL_METHOD: public const b2Profile & b2World::GetProfile() const [b2World.h <349:1 <349:34 349:43> 352:1>]
SYMBOL_METHOD: public void b2World::Dump() [b2World.h <210:2 <210:7 210:10> 210:12>]
SYMBOL_ENUM: private b2World::anonymous enum (b2World.h<215:2>) [b2World.h <215:2 <215:2 215:5> 220:2>]
SYMBOL_ENUM_CONSTANT: b2World::anonymous enum (b2World.h<215:2>)::e_newFixture [b2World.h <217:3 217:14>]
SYMBOL_ENUM_CONSTANT: b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.h <218:3 218:10>]
SYMBOL_ENUM_CONSTANT: b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.h <219:3 219:15>]
SYMBOL_METHOD: private void b2World::Solve(const b2TimeStep &) [b2World.h <227:2 <227:7 227:11> 227:35>]
SYMBOL_METHOD: private void b2World::SolveTOI(const b2TimeStep &) [b2World.h <228:2 <228:7 228:14> 228:38>]
SYMBOL_METHOD: private void b2World::DrawJoint(b2Joint *) [b2World.h <230:2 <230:7 230:15> 230:31>]
SYMBOL_METHOD: private void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) [b2World.h <231:2 <231:7 231:15> 231:78>]
SYMBOL_FIELD: private b2BlockAllocator b2World::m_blockAllocator [b2World.h <233:19 233:34>]
SYMBOL_FIELD: private b2StackAllocator b2World::m_stackAllocator [b2World.h <234:19 234:34>]
SYMBOL_FIELD: private int32 b2World::m_flags [b2World.h <236:8 236:14>]
SYMBOL_FIELD: private b2ContactManager b2World::m_contactManager [b2World.h <238:19 238:34>]
SYMBOL_FIELD: private b2Body * b2World::m_bodyList [b2World.h <240:10 240:19>]
SYMBOL_FIELD: private b2Joint * b2World::m_jointList [b2World.h <241:11 241:21>]
SYMBOL_FIELD: private int32 b2World::m_bodyCount [b2World.h <243:8 243:18>]
SYMBOL_FIELD: private int32 b2World::m_jointCount [b2World.h <244:8 244:19>]
SYMBOL_FIELD: private b2Vec2 b2World::m_gravity [b2World.h <246:9 246:17>]
SYMBOL_FIELD: private b2DestructionListener * b2World::m_destructionListener [b2World.h <249:25 249:45>]
SYMBOL_FIELD: private b2Draw * b2World::g_debugDraw [b2World.h <250:10 250:20>]
SYMBOL_FIELD: private float32 b2World::m_inv_dt0 [b2World.h <254:10 254:18>]
SYMBOL_FIELD: private bool b2World::m_stepComplete [b2World.h <261:7 261:20>]
SYMBOL_FIELD: private b2Profile b2World::m_profile [b2World.h <263:12 263:20>]
SYMBOL_METHOD: public void b2World::b2World(const b2World &) [b2World.h <41:7 <41:7 41:13> 41:13>]
SYMBOL_FUNCTION: float32 b2MixFriction(float32, float32) [b2Contact.h <37:1 <37:1 <37:16 37:28> 37:66> 40:1>]
SYMBOL_FUNCTION: float32 b2MixRestitution(float32, float32) [b2Contact.h <44:1 <44:1 <44:16 44:31> 44:75> 47:1>]
SYMBOL_TYPEDEF: b2ContactCreateFcn [b2Contact.h <49:20 49:37>]
SYMBOL_TYPEDEF: b2ContactDestroyFcn [b2Contact.h <52:14 52:32>]
SYMBOL_STRUCT: b2ContactRegister [b2Contact.h <54:1 <54:8 54:24> 59:1>]
SYMBOL_FIELD: public b2ContactCreateFcn * b2ContactRegister::createFcn [b2Contact.h <56:22 56:30>]
SYMBOL_FIELD: public b2ContactDestroyFcn * b2ContactRegister::destroyFcn [b2Contact.h <57:23 57:32>]
SYMBOL_FIELD: public bool b2ContactRegister::primary [b2Contact.h <58:7 58:13>]
SYMBOL_FIELD: public b2Body * b2ContactEdge::other [b2Contact.h <68:10 68:14>]
SYMBOL_FIELD: public b2Contact * b2ContactEdge::contact [b2Contact.h <69:13 69:19>]
SYMBOL_FIELD: public b2ContactEdge * b2ContactEdge::prev [b2Contact.h <70:17 70:20>]
SYMBOL_FIELD: public b2ContactEdge * b2ContactEdge::next [b2Contact.h <71:17 71:20>]
SYMBOL_METHOD: public b2ContactEdge & b2ContactEdge::operator=(const b2ContactEdge &) [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public b2ContactEdge & b2ContactEdge::operator=(b2ContactEdge &&) [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public void b2ContactEdge::b2ContactEdge() [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public void b2ContactEdge::b2ContactEdge(const b2ContactEdge &) [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public void b2ContactEdge::b2ContactEdge(b2ContactEdge &&) [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public void b2ContactEdge::~b2ContactEdge() [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public b2Manifold * b2Contact::GetManifold() [b2Contact.h <83:2 <83:14 83:24> 83:26>]
SYMBOL_METHOD: public b2Manifold * b2Contact::GetManifold() [b2Contact.h <222:1 <222:31 222:41> 225:1>]
SYMBOL_METHOD: public const b2Manifold * b2Contact::GetManifold() const [b2Contact.h <84:2 <84:20 84:30> 84:38>]
SYMBOL_METHOD: public const b2Manifold * b2Contact::GetManifold() const [b2Contact.h <227:1 <227:37 227:47> 230:1>]
SYMBOL_METHOD: public void b2Contact::GetWorldManifold(b2WorldManifold *) const [b2Contact.h <87:2 <87:7 87:22> 87:60>]
SYMBOL_METHOD: public void b2Contact::GetWorldManifold(b2WorldManifold *) const [b2Contact.h <232:1 <232:24 232:39> 240:1>]
SYMBOL_METHOD: public bool b2Contact::IsTouching() const [b2Contact.h <90:2 <90:7 90:16> 90:24>]
SYMBOL_METHOD: public bool b2Contact::IsTouching() const [b2Contact.h <259:1 <259:24 259:33> 262:1>]
SYMBOL_METHOD: public void b2Contact::SetEnabled(bool) [b2Contact.h <95:2 <95:7 95:16> 95:27>]
SYMBOL_METHOD: public void b2Contact::SetEnabled(bool) [b2Contact.h <242:1 <242:24 242:33> 252:1>]
SYMBOL_METHOD: public bool b2Contact::IsEnabled() const [b2Contact.h <98:2 <98:7 98:15> 98:23>]
SYMBOL_METHOD: public bool b2Contact::IsEnabled() const [b2Contact.h <254:1 <254:24 254:32> 257:1>]
SYMBOL_METHOD: public b2Contact * b2Contact::GetNext() [b2Contact.h <101:2 <101:13 101:19> 101:21>]
SYMBOL_METHOD: public b2Contact * b2Contact::GetNext() [b2Contact.h <264:1 <264:30 264:36> 267:1>]
SYMBOL_METHOD: public const b2Contact * b2Contact::GetNext() const [b2Contact.h <102:2 <102:19 102:25> 102:33>]
SYMBOL_METHOD: public const b2Contact * b2Contact::GetNext() const [b2Contact.h <269:1 <269:36 269:42> 272:1>]
SYMBOL_METHOD: public b2Fixture * b2Contact::GetFixtureA() [b2Contact.h <105:2 <105:13 105:23> 105:25>]
SYMBOL_METHOD: public b2Fixture * b2Contact::GetFixtureA() [b2Contact.h <274:1 <274:30 274:40> 277:1>]
SYMBOL_METHOD: public const b2Fixture * b2Contact::GetFixtureA() const [b2Contact.h <106:2 <106:19 106:29> 106:37>]
SYMBOL_METHOD: public const b2Fixture * b2Contact::GetFixtureA() const [b2Contact.h <279:1 <279:36 279:46> 282:1>]
SYMBOL_METHOD: public int32 b2Contact::GetChildIndexA() const [b2Contact.h <109:2 <109:8 109:21> 109:29>]
SYMBOL_METHOD: public int32 b2Contact::GetChildIndexA() const [b2Contact.h <289:1 <289:25 289:38> 292:1>]
SYMBOL_METHOD: public b2Fixture * b2Contact::GetFixtureB() [b2Contact.h <112:2 <112:13 112:23> 112:25>]
SYMBOL_METHOD: public b2Fixture * b2Contact::GetFixtureB() [b2Contact.h <284:1 <284:30 284:40> 287:1>]
SYMBOL_METHOD: public const b2Fixture * b2Contact::GetFixtureB() const [b2Contact.h <113:2 <113:19 113:29> 113:37>]
SYMBOL_METHOD: public const b2Fixture * b2Contact::GetFixtureB() const [b2Contact.h <294:1 <294:36 294:46> 297:1>]
SYMBOL_METHOD: public int32 b2Contact::GetChildIndexB() const [b2Contact.h <116:2 <116:8 116:21> 116:29>]
SYMBOL_METHOD: public int32 b2Contact::GetChildIndexB() const [b2Contact.h <299:1 <299:25 299:38> 302:1>]
SYMBOL_METHOD: public void b2Contact::SetFriction(float32) [b2Contact.h <120:2 <120:7 120:17> 120:35>]
SYMBOL_METHOD: public void b2Contact::SetFriction(float32) [b2Contact.h <309:1 <309:24 309:34> 312:1>]
SYMBOL_METHOD: public float32 b2Contact::GetFriction() const [b2Contact.h <123:2 <123:10 123:20> 123:28>]
SYMBOL_METHOD: public float32 b2Contact::GetFriction() const [b2Contact.h <314:1 <314:27 314:37> 317:1>]
SYMBOL_METHOD: public void b2Contact::ResetFriction() [b2Contact.h <126:2 <126:7 126:19> 126:21>]
SYMBOL_METHOD: public void b2Contact::ResetFriction() [b2Contact.h <319:1 <319:24 319:36> 322:1>]
SYMBOL_METHOD: public void b2Contact::SetRestitution(float32) [b2Contact.h <130:2 <130:7 130:20> 130:41>]
SYMBOL_METHOD: public void b2Contact::SetRestitution(float32) [b2Contact.h <324:1 <324:24 324:37> 327:1>]
SYMBOL_METHOD: public float32 b2Contact::GetRestitution() const [b2Contact.h <133:2 <133:10 133:23> 133:31>]
SYMBOL_METHOD: public float32 b2Contact::GetRestitution() const [b2Contact.h <329:1 <329:27 329:40> 332:1>]
SYMBOL_METHOD: public void b2Contact::ResetRestitution() [b2Contact.h <136:2 <136:7 136:22> 136:24>]
SYMBOL_METHOD: public void b2Contact::ResetRestitution() [b2Contact.h <334:1 <334:24 334:39> 337:1>]
SYMBOL_METHOD: public void b2Contact::SetTangentSpeed(float32) [b2Contact.h <139:2 <139:7 139:21> 139:36>]
SYMBOL_METHOD: public void b2Contact::SetTangentSpeed(float32) [b2Contact.h <339:1 <339:24 339:38> 342:1>]
SYMBOL_METHOD: public float32 b2Contact::GetTangentSpeed() const [b2Contact.h <142:2 <142:10 142:24> 142:32>]
SYMBOL_METHOD: public float32 b2Contact::GetTangentSpeed() const [b2Contact.h <344:1 <344:27 344:41> 347:1>]
SYMBOL_METHOD: public void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) [b2Contact.h <145:2 <145:15 145:22> 145:96>]
SYMBOL_ENUM: protected b2Contact::anonymous enum (b2Contact.h<155:2>) [b2Contact.h <155:2 <155:2 155:5> 174:2>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_islandFlag [b2Contact.h <158:3 158:14>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_touchingFlag [b2Contact.h <161:3 161:16>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_enabledFlag [b2Contact.h <164:3 164:15>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_filterFlag [b2Contact.h <167:3 167:14>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_bulletHitFlag [b2Contact.h <170:3 170:17>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_toiFlag [b2Contact.h <173:3 173:11>]
SYMBOL_METHOD: protected void b2Contact::FlagForFiltering() [b2Contact.h <177:2 <177:7 177:22> 177:24>]
SYMBOL_METHOD: protected void b2Contact::FlagForFiltering() [b2Contact.h <304:1 <304:24 304:39> 307:1>]
SYMBOL_METHOD: protected static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) [b2Contact.h <179:2 <179:14 179:20> 180:47>]
SYMBOL_METHOD: protected static void b2Contact::InitializeRegisters() [b2Contact.h <181:2 <181:14 181:32> 181:34>]
SYMBOL_METHOD: protected static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) [b2Contact.h <182:2 <182:20 182:25> 182:124>]
SYMBOL_METHOD: protected static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) [b2Contact.h <183:2 <183:14 183:20> 183:111>]
SYMBOL_METHOD: protected static void b2Contact::Destroy(b2Contact *, b2BlockAllocator *) [b2Contact.h <184:2 <184:14 184:20> 184:69>]
SYMBOL_METHOD: protected void b2Contact::b2Contact() [b2Contact.h <186:2 <186:2 <186:2 186:10> 186:12> 186:58>]
SYMBOL_FIELD: protected b2ContactEdge b2Contact::m_nodeA [b2Contact.h <202:16 202:22>]
SYMBOL_FIELD: protected b2ContactEdge b2Contact::m_nodeB [b2Contact.h <203:16 203:22>]
SYMBOL_FIELD: protected b2Fixture * b2Contact::m_fixtureA [b2Contact.h <205:13 205:22>]
SYMBOL_FIELD: protected b2Fixture * b2Contact::m_fixtureB [b2Contact.h <206:13 206:22>]
SYMBOL_FIELD: protected b2Manifold b2Contact::m_manifold [b2Contact.h <211:13 211:22>]
SYMBOL_METHOD: protected void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) [b2Contact.h <187:2 <187:2 187:10> 187:80>]
SYMBOL_METHOD: protected void b2Contact::~b2Contact() [b2Contact.h <188:2 <188:2 <188:10 188:19> 188:21> 188:24>]
SYMBOL_METHOD: protected void b2Contact::Update(b2ContactListener *) [b2Contact.h <190:2 <190:7 190:12> 190:41>]
SYMBOL_FIELD: protected static b2ContactRegister [] [] b2Contact::s_registers [b2Contact.h <192:27 192:37>]
SYMBOL_FIELD: protected static bool b2Contact::s_initialized [b2Contact.h <193:14 193:26>]
SYMBOL_FIELD: protected uint32 b2Contact::m_flags [b2Contact.h <195:9 195:15>]
SYMBOL_FIELD: protected b2Contact * b2Contact::m_prev [b2Contact.h <198:13 198:18>]
SYMBOL_FIELD: protected b2Contact * b2Contact::m_next [b2Contact.h <199:13 199:18>]
SYMBOL_FIELD: protected int32 b2Contact::m_indexA [b2Contact.h <208:8 208:15>]
SYMBOL_FIELD: protected int32 b2Contact::m_indexB [b2Contact.h <209:8 209:15>]
SYMBOL_FIELD: protected int32 b2Contact::m_toiCount [b2Contact.h <213:8 213:17>]
SYMBOL_FIELD: protected float32 b2Contact::m_toi [b2Contact.h <214:10 214:14>]
SYMBOL_FIELD: protected float32 b2Contact::m_friction [b2Contact.h <216:10 216:19>]
SYMBOL_FIELD: protected float32 b2Contact::m_restitution [b2Contact.h <217:10 217:22>]
SYMBOL_FIELD: protected float32 b2Contact::m_tangentSpeed [b2Contact.h <219:10 219:23>]
SYMBOL_METHOD: public b2Contact & b2Contact::operator=(const b2Contact &) [b2Contact.h <77:7 <77:7 77:15> 77:15>]
SYMBOL_ENUM: b2JointType [b2Joint.h <29:1 <29:6 29:16> 43:1>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_unknownJoint [b2Joint.h <31:2 31:15>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_revoluteJoint [b2Joint.h <32:2 32:16>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_prismaticJoint [b2Joint.h <33:2 33:17>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_distanceJoint [b2Joint.h <34:2 34:16>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_pulleyJoint [b2Joint.h <35:2 35:14>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_mouseJoint [b2Joint.h <36:2 36:13>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_gearJoint [b2Joint.h <37:2 37:12>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_wheelJoint [b2Joint.h <38:2 38:13>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_weldJoint [b2Joint.h <39:5 39:15>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_frictionJoint [b2Joint.h <40:2 40:16>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_ropeJoint [b2Joint.h <41:2 41:12>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_motorJoint [b2Joint.h <42:2 42:13>]
SYMBOL_ENUM: b2LimitState [b2Joint.h <45:1 <45:6 45:17> 51:1>]
SYMBOL_ENUM_CONSTANT: b2LimitState::e_inactiveLimit [b2Joint.h <47:2 47:16>]
SYMBOL_ENUM_CONSTANT: b2LimitState::e_atLowerLimit [b2Joint.h <48:2 48:15>]
SYMBOL_ENUM_CONSTANT: b2LimitState::e_atUpperLimit [b2Joint.h <49:2 49:15>]
SYMBOL_ENUM_CONSTANT: b2LimitState::e_equalLimits [b2Joint.h <50:2 50:14>]
SYMBOL_STRUCT: b2Jacobian [b2Joint.h <53:1 <53:8 53:17> 58:1>]
SYMBOL_FIELD: public b2Vec2 b2Jacobian::linear [b2Joint.h <55:9 55:14>]
SYMBOL_FIELD: public float32 b2Jacobian::angularA [b2Joint.h <56:10 56:17>]
SYMBOL_FIELD: public float32 b2Jacobian::angularB [b2Joint.h <57:10 57:17>]
SYMBOL_FIELD: public b2Body * b2JointEdge::other [b2Joint.h <67:10 67:14>]
SYMBOL_FIELD: public b2Joint * b2JointEdge::joint [b2Joint.h <68:11 68:15>]
SYMBOL_FIELD: public b2JointEdge * b2JointEdge::prev [b2Joint.h <69:15 69:18>]
SYMBOL_FIELD: public b2JointEdge * b2JointEdge::next [b2Joint.h <70:15 70:18>]
SYMBOL_METHOD: public b2JointEdge & b2JointEdge::operator=(const b2JointEdge &) [b2Joint.h <65:8 <65:8 65:18> 65:18>]
SYMBOL_METHOD: public b2JointEdge & b2JointEdge::operator=(b2JointEdge &&) [b2Joint.h <65:8 <65:8 65:18> 65:18>]
SYMBOL_METHOD: public void b2JointEdge::~b2JointEdge() [b2Joint.h <65:8 <65:8 65:18> 65:18>]
SYMBOL_METHOD: public void b2JointDef::b2JointDef() [b2Joint.h <76:2 <76:2 <76:2 76:11> 76:13> 83:2>]
SYMBOL_FIELD: public b2JointType b2JointDef::type [b2Joint.h <86:14 86:17>]
SYMBOL_FIELD: public void * b2JointDef::userData [b2Joint.h <89:8 89:15>]
SYMBOL_FIELD: public b2Body * b2JointDef::bodyA [b2Joint.h <92:10 92:14>]
SYMBOL_FIELD: public b2Body * b2JointDef::bodyB [b2Joint.h <95:10 95:14>]
SYMBOL_FIELD: public bool b2JointDef::collideConnected [b2Joint.h <98:7 98:22>]
SYMBOL_METHOD: public b2JointType b2Joint::GetType() const [b2Joint.h <108:2 <108:14 108:20> 108:28>]
SYMBOL_METHOD: public b2JointType b2Joint::GetType() const [b2Joint.h <186:1 <186:29 186:35> 189:1>]
SYMBOL_METHOD: public b2Body * b2Joint::GetBodyA() [b2Joint.h <111:2 <111:10 111:17> 111:19>]
SYMBOL_METHOD: public b2Body * b2Joint::GetBodyA() [b2Joint.h <191:1 <191:25 191:32> 194:1>]
SYMBOL_METHOD: public b2Body * b2Joint::GetBodyB() [b2Joint.h <114:2 <114:10 114:17> 114:19>]
SYMBOL_METHOD: public b2Body * b2Joint::GetBodyB() [b2Joint.h <196:1 <196:25 196:32> 199:1>]
SYMBOL_METHOD: public b2Vec2 b2Joint::GetAnchorA() const [b2Joint.h <117:2 <117:17 117:26> 117:38>]
SYMBOL_METHOD: public b2Vec2 b2Joint::GetAnchorB() const [b2Joint.h <120:2 <120:17 120:26> 120:38>]
SYMBOL_METHOD: public b2Vec2 b2Joint::GetReactionForce(float32) const [b2Joint.h <123:2 <123:17 123:32> 123:58>]
SYMBOL_METHOD: public float32 b2Joint::GetReactionTorque(float32) const [b2Joint.h <126:2 <126:18 126:34> 126:60>]
SYMBOL_METHOD: public b2Joint * b2Joint::GetNext() [b2Joint.h <129:2 <129:11 129:17> 129:19>]
SYMBOL_METHOD: public b2Joint * b2Joint::GetNext() [b2Joint.h <201:1 <201:26 201:32> 204:1>]
SYMBOL_METHOD: public const b2Joint * b2Joint::GetNext() const [b2Joint.h <130:2 <130:17 130:23> 130:31>]
SYMBOL_METHOD: public const b2Joint * b2Joint::GetNext() const [b2Joint.h <206:1 <206:32 206:38> 209:1>]
SYMBOL_METHOD: public void * b2Joint::GetUserData() const [b2Joint.h <133:2 <133:8 133:18> 133:26>]
SYMBOL_METHOD: public void * b2Joint::GetUserData() const [b2Joint.h <211:1 <211:23 211:33> 214:1>]
SYMBOL_METHOD: public void b2Joint::SetUserData(void *) [b2Joint.h <136:2 <136:7 136:17> 136:29>]
SYMBOL_METHOD: public void b2Joint::SetUserData(void *) [b2Joint.h <216:1 <216:22 216:32> 219:1>]
SYMBOL_METHOD: public bool b2Joint::IsActive() const [b2Joint.h <139:2 <139:7 139:14> 139:22>]
SYMBOL_METHOD: public bool b2Joint::GetCollideConnected() const [b2Joint.h <144:2 <144:7 144:25> 144:33>]
SYMBOL_METHOD: public bool b2Joint::GetCollideConnected() const [b2Joint.h <221:1 <221:22 221:40> 224:1>]
SYMBOL_METHOD: public void b2Joint::Dump() [b2Joint.h <147:2 <147:2 <147:15 147:18> 147:20> 147:82>]
SYMBOL_METHOD: public void b2Joint::ShiftOrigin(const b2Vec2 &) [b2Joint.h <150:2 <150:2 <150:15 150:25> 150:50> 150:79>]
SYMBOL_METHOD: protected static b2Joint * b2Joint::Create(const b2JointDef *, b2BlockAllocator *) [b2Joint.h <158:2 <158:18 158:23> 158:75>]
SYMBOL_METHOD: protected static void b2Joint::Destroy(b2Joint *, b2BlockAllocator *) [b2Joint.h <159:2 <159:14 159:20> 159:65>]
SYMBOL_METHOD: protected void b2Joint::b2Joint(const b2JointDef *) [b2Joint.h <161:2 <161:2 161:8> 161:31>]
SYMBOL_METHOD: protected void b2Joint::~b2Joint() [b2Joint.h <162:2 <162:2 <162:10 162:17> 162:19> 162:22>]
SYMBOL_METHOD: protected void b2Joint::InitVelocityConstraints(const b2SolverData &) [b2Joint.h <164:2 <164:15 164:37> 164:67>]
SYMBOL_METHOD: protected void b2Joint::SolveVelocityConstraints(const b2SolverData &) [b2Joint.h <165:2 <165:15 165:38> 165:68>]
SYMBOL_METHOD: protected bool b2Joint::SolvePositionConstraints(const b2SolverData &) [b2Joint.h <168:2 <168:15 168:38> 168:68>]
SYMBOL_FIELD: protected b2JointType b2Joint::m_type [b2Joint.h <170:14 170:19>]
SYMBOL_FIELD: protected b2Joint * b2Joint::m_prev [b2Joint.h <171:11 171:16>]
SYMBOL_FIELD: protected b2Joint * b2Joint::m_next [b2Joint.h <172:11 172:16>]
SYMBOL_FIELD: protected b2JointEdge b2Joint::m_edgeA [b2Joint.h <173:14 173:20>]
SYMBOL_FIELD: protected b2JointEdge b2Joint::m_edgeB [b2Joint.h <174:14 174:20>]
SYMBOL_FIELD: protected b2Body * b2Joint::m_bodyA [b2Joint.h <175:10 175:16>]
SYMBOL_FIELD: protected b2Body * b2Joint::m_bodyB [b2Joint.h <176:10 176:16>]
SYMBOL_FIELD: protected int32 b2Joint::m_index [b2Joint.h <178:8 178:14>]
SYMBOL_FIELD: protected bool b2Joint::m_islandFlag [b2Joint.h <180:7 180:18>]
SYMBOL_FIELD: protected bool b2Joint::m_collideConnected [b2Joint.h <181:7 181:24>]
SYMBOL_FIELD: protected void * b2Joint::m_userData [b2Joint.h <183:8 183:17>]
SYMBOL_METHOD: public b2Joint & b2Joint::operator=(const b2Joint &) [b2Joint.h <103:7 <103:7 103:13> 103:13>]
REFERENCE_INCLUDE: b2Body.cpp -> b2Body.h [b2Body.cpp <19:10 19:34>]
REFERENCE_MACRO_USAGE: b2Body.h -> B2_BODY_H [b2Body.h <19:9 19:17>]
REFERENCE_INCLUDE: b2Body.h -> b2Math.h [b2Body.h <22:10 22:32>]
REFERENCE_MACRO_USAGE: b2Math.h -> B2_MATH_H [b2Math.h <19:9 19:17>]
REFERENCE_INCLUDE: b2Math.h -> b2Settings.h [b2Math.h <22:10 22:36>]
REFERENCE_MACRO_USAGE: b2Settings.h -> B2_SETTINGS_H [b2Settings.h <19:9 19:21>]
REFERENCE_INCLUDE: b2Settings.h -> stddef.h [b2Settings.h <22:10 22:19>]
REFERENCE_INCLUDE: stddef.h -> corecrt.h [stddef.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt.h -> vcruntime.h [corecrt.h <10:10 10:22>]
REFERENCE_INCLUDE: vcruntime.h -> sal.h [vcruntime.h <47:10 47:16>]
REFERENCE_INCLUDE: sal.h -> concurrencysal.h [sal.h <2990:10 2990:27>]
REFERENCE_INCLUDE: vcruntime.h -> vadefs.h [vcruntime.h <48:10 48:19>]
REFERENCE_INCLUDE: b2Settings.h -> assert.h [b2Settings.h <23:10 23:19>]
REFERENCE_INCLUDE: assert.h -> corecrt.h [assert.h <12:10 12:20>]
REFERENCE_INCLUDE: b2Settings.h -> float.h [b2Settings.h <24:10 24:18>]
REFERENCE_INCLUDE: float.h -> corecrt.h [float.h <12:10 12:20>]
REFERENCE_MACRO_USAGE: b2Settings.h -> NDEBUG [b2Settings.h <26:14 26:19>]
REFERENCE_INCLUDE: b2Math.h -> math.h [b2Math.h <23:10 23:17>]
REFERENCE_INCLUDE: math.h -> corecrt.h [math.h <11:10 11:20>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Sqrt [b2Math.h <103:10 103:15>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2_epsilon [b2Math.h <117:16 117:25>]
REFERENCE_MACRO_USAGE: b2Settings.h -> FLT_EPSILON [b2Settings.h <43:21 43:31>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Atan2 [b2Math.h <329:10 329:16>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Assert [b2Math.h <709:2 709:9>]
REFERENCE_MACRO_USAGE: b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2_pi [b2Math.h <719:25 719:29>]
REFERENCE_INCLUDE: b2Body.h -> b2Shape.h [b2Body.h <23:10 23:43>]
REFERENCE_MACRO_USAGE: b2Shape.h -> B2_SHAPE_H [b2Shape.h <19:9 19:18>]
REFERENCE_INCLUDE: b2Shape.h -> b2BlockAllocator.h [b2Shape.h <22:10 22:42>]
REFERENCE_MACRO_USAGE: b2BlockAllocator.h -> B2_BLOCK_ALLOCATOR_H [b2BlockAllocator.h <19:9 19:28>]
REFERENCE_INCLUDE: b2BlockAllocator.h -> b2Settings.h [b2BlockAllocator.h <22:10 22:36>]
REFERENCE_INCLUDE: b2Shape.h -> b2Math.h [b2Shape.h <23:10 23:32>]
REFERENCE_INCLUDE: b2Shape.h -> b2Collision.h [b2Shape.h <24:10 24:40>]
REFERENCE_MACRO_USAGE: b2Collision.h -> B2_COLLISION_H [b2Collision.h <19:9 19:22>]
REFERENCE_INCLUDE: b2Collision.h -> b2Math.h [b2Collision.h <22:10 22:32>]
REFERENCE_INCLUDE: b2Collision.h -> limits.h [b2Collision.h <23:10 23:19>]
REFERENCE_INCLUDE: limits.h -> vcruntime.h [limits.h <11:10 11:22>]
REFERENCE_MACRO_USAGE: b2Collision.h -> UCHAR_MAX [b2Collision.h <34:30 34:38>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <102:25 102:44>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <121:16 121:35>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <122:22 122:41>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <136:43 136:62>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <136:86 136:105>]
REFERENCE_INCLUDE: b2Body.h -> memory [b2Body.h <24:10 24:17>]
REFERENCE_INCLUDE: memory -> xmemory [memory <6:10 6:18>]
REFERENCE_INCLUDE: xmemory -> xmemory0 [xmemory <6:10 6:19>]
REFERENCE_INCLUDE: xmemory0 -> cstdint [xmemory0 <6:10 6:18>]
REFERENCE_INCLUDE: cstdint -> yvals.h [cstdint <7:10 7:18>]
REFERENCE_INCLUDE: yvals.h -> yvals_core.h [yvals.h <7:10 7:23>]
REFERENCE_INCLUDE: yvals_core.h -> xkeycheck.h [yvals_core.h <220:10 220:22>]
REFERENCE_INCLUDE: yvals_core.h -> crtdefs.h [yvals_core.h <221:10 221:20>]
REFERENCE_INCLUDE: crtdefs.h -> vcruntime.h [crtdefs.h <9:10 9:22>]
REFERENCE_INCLUDE: crtdefs.h -> corecrt.h [crtdefs.h <10:10 10:20>]
REFERENCE_INCLUDE: yvals.h -> crtdbg.h [yvals.h <8:10 8:19>]
REFERENCE_INCLUDE: crtdbg.h -> corecrt.h [crtdbg.h <11:10 11:20>]
REFERENCE_INCLUDE: crtdbg.h -> vcruntime_new_debug.h [crtdbg.h <12:10 12:32>]
REFERENCE_INCLUDE: vcruntime_new_debug.h -> vcruntime_new.h [vcruntime_new_debug.h <10:10 10:26>]
REFERENCE_INCLUDE: vcruntime_new.h -> vcruntime.h [vcruntime_new.h <10:10 10:22>]
REFERENCE_INCLUDE: yvals.h -> use_ansi.h [yvals.h <201:10 201:21>]
REFERENCE_INCLUDE: cstdint -> stdint.h [cstdint <8:10 8:19>]
REFERENCE_INCLUDE: stdint.h -> vcruntime.h [stdint.h <13:10 13:22>]
REFERENCE_INCLUDE: xmemory0 -> cstdlib [xmemory0 <7:10 7:18>]
REFERENCE_INCLUDE: cstdlib -> yvals_core.h [cstdlib <7:10 7:23>]
REFERENCE_INCLUDE: cstdlib -> stdlib.h [cstdlib <8:10 8:19>]
REFERENCE_INCLUDE: stdlib.h -> corecrt.h [stdlib.h <11:10 11:20>]
REFERENCE_INCLUDE: stdlib.h -> corecrt_malloc.h [stdlib.h <12:10 12:27>]
REFERENCE_INCLUDE: corecrt_malloc.h -> corecrt.h [corecrt_malloc.h <11:10 11:20>]
REFERENCE_INCLUDE: stdlib.h -> corecrt_search.h [stdlib.h <13:10 13:27>]
REFERENCE_INCLUDE: corecrt_search.h -> corecrt.h [corecrt_search.h <13:10 13:20>]
REFERENCE_INCLUDE: corecrt_search.h -> stddef.h [corecrt_search.h <14:10 14:19>]
REFERENCE_INCLUDE: stdlib.h -> corecrt_wstdlib.h [stdlib.h <14:10 14:28>]
REFERENCE_INCLUDE: corecrt_wstdlib.h -> corecrt.h [corecrt_wstdlib.h <11:10 11:20>]
REFERENCE_INCLUDE: stdlib.h -> limits.h [stdlib.h <15:10 15:19>]
REFERENCE_INCLUDE: cstdlib -> math.h [cstdlib <9:10 9:17>]
REFERENCE_INCLUDE: xmemory0 -> limits [xmemory0 <8:10 8:17>]
REFERENCE_INCLUDE: limits -> ymath.h [limits <6:10 6:18>]
REFERENCE_INCLUDE: ymath.h -> yvals.h [ymath.h <6:10 6:18>]
REFERENCE_INCLUDE: limits -> cfloat [limits <7:10 7:17>]
REFERENCE_INCLUDE: cfloat -> yvals.h [cfloat <5:10 5:18>]
REFERENCE_INCLUDE: cfloat -> float.h [cfloat <7:10 7:18>]
REFERENCE_INCLUDE: limits -> climits [limits <8:10 8:18>]
REFERENCE_INCLUDE: climits -> yvals.h [climits <7:10 7:18>]
REFERENCE_INCLUDE: climits -> limits.h [climits <8:10 8:19>]
REFERENCE_INCLUDE: limits -> cmath [limits <9:10 9:16>]
REFERENCE_INCLUDE: cmath -> yvals.h [cmath <7:10 7:18>]
REFERENCE_INCLUDE: cmath -> cstdlib [cmath <8:10 8:18>]
REFERENCE_INCLUDE: cmath -> xtgmath.h [cmath <625:10 625:20>]
REFERENCE_INCLUDE: xtgmath.h -> cstdlib [xtgmath.h <8:10 8:18>]
REFERENCE_INCLUDE: xtgmath.h -> xtr1common [xtgmath.h <9:10 9:21>]
REFERENCE_INCLUDE: xtr1common -> yvals_core.h [xtr1common <6:10 6:23>]
REFERENCE_INCLUDE: xtgmath.h -> yvals.h [xtgmath.h <10:10 10:18>]
REFERENCE_INCLUDE: limits -> cwchar [limits <10:10 10:17>]
REFERENCE_INCLUDE: cwchar -> yvals.h [cwchar <7:10 7:18>]
REFERENCE_INCLUDE: cwchar -> wchar.h [cwchar <8:10 8:18>]
REFERENCE_INCLUDE: wchar.h -> corecrt.h [wchar.h <13:10 13:20>]
REFERENCE_INCLUDE: wchar.h -> corecrt_memcpy_s.h [wchar.h <14:10 14:29>]
REFERENCE_INCLUDE: corecrt_memcpy_s.h -> corecrt.h [corecrt_memcpy_s.h <10:10 10:20>]
REFERENCE_INCLUDE: corecrt_memcpy_s.h -> errno.h [corecrt_memcpy_s.h <11:10 11:18>]
REFERENCE_INCLUDE: errno.h -> corecrt.h [errno.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt_memcpy_s.h -> vcruntime_string.h [corecrt_memcpy_s.h <12:10 12:29>]
REFERENCE_INCLUDE: vcruntime_string.h -> vcruntime.h [vcruntime_string.h <10:10 10:22>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wconio.h [wchar.h <15:10 15:27>]
REFERENCE_INCLUDE: corecrt_wconio.h -> corecrt.h [corecrt_wconio.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt_wconio.h -> corecrt_stdio_config.h [corecrt_wconio.h <12:10 12:33>]
REFERENCE_INCLUDE: corecrt_stdio_config.h -> corecrt.h [corecrt_stdio_config.h <10:10 10:20>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wctype.h [wchar.h <16:10 16:27>]
REFERENCE_INCLUDE: corecrt_wctype.h -> corecrt.h [corecrt_wctype.h <11:10 11:20>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wdirect.h [wchar.h <17:10 17:28>]
REFERENCE_INCLUDE: corecrt_wdirect.h -> corecrt.h [corecrt_wdirect.h <11:10 11:20>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wio.h [wchar.h <18:10 18:24>]
REFERENCE_INCLUDE: corecrt_wio.h -> corecrt.h [corecrt_wio.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt_wio.h -> corecrt_share.h [corecrt_wio.h <12:10 12:26>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wprocess.h [wchar.h <19:10 19:29>]
REFERENCE_INCLUDE: corecrt_wprocess.h -> corecrt.h [corecrt_wprocess.h <11:10 11:20>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wstdio.h [wchar.h <20:10 20:27>]
REFERENCE_INCLUDE: corecrt_wstdio.h -> corecrt.h [corecrt_wstdio.h <12:10 12:20>]
REFERENCE_INCLUDE: corecrt_wstdio.h -> corecrt_stdio_config.h [corecrt_wstdio.h <13:10 13:33>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wstdlib.h [wchar.h <21:10 21:28>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wstring.h [wchar.h <22:10 22:28>]
REFERENCE_INCLUDE: corecrt_wstring.h -> corecrt.h [corecrt_wstring.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt_wstring.h -> vcruntime_string.h [corecrt_wstring.h <12:10 12:29>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wtime.h [wchar.h <23:10 23:26>]
REFERENCE_INCLUDE: corecrt_wtime.h -> corecrt.h [corecrt_wtime.h <11:10 11:20>]
REFERENCE_INCLUDE: wchar.h -> stat.h [wchar.h <24:10 24:21>]
REFERENCE_INCLUDE: stat.h -> corecrt.h [stat.h <10:10 10:20>]
REFERENCE_INCLUDE: stat.h -> types.h [stat.h <11:10 11:22>]
REFERENCE_INCLUDE: wchar.h -> types.h [wchar.h <25:10 25:22>]
REFERENCE_INCLUDE: wchar.h -> vcruntime_string.h [wchar.h <26:10 26:29>]
REFERENCE_INCLUDE: limits -> xstddef [limits <11:10 11:18>]
REFERENCE_INCLUDE: xstddef -> cstddef [xstddef <6:10 6:18>]
REFERENCE_INCLUDE: cstddef -> stddef.h [cstddef <7:10 7:19>]
REFERENCE_INCLUDE: cstddef -> xtr1common [cstddef <8:10 8:21>]
REFERENCE_INCLUDE: xstddef -> cstdlib [xstddef <7:10 7:18>]
REFERENCE_INCLUDE: xstddef -> initializer_list [xstddef <8:10 8:27>]
REFERENCE_INCLUDE: initializer_list -> cstddef [initializer_list <6:10 6:18>]
REFERENCE_INCLUDE: xstddef -> xtr1common [xstddef <9:10 9:21>]
REFERENCE_INCLUDE: xmemory0 -> new [xmemory0 <9:10 9:14>]
REFERENCE_INCLUDE: new -> exception [new <6:10 6:20>]
REFERENCE_INCLUDE: exception -> yvals.h [exception <7:10 7:18>]
REFERENCE_INCLUDE: exception -> type_traits [exception <8:10 8:22>]
REFERENCE_INCLUDE: type_traits -> xstddef [type_traits <6:10 6:18>]
REFERENCE_INCLUDE: exception -> malloc.h [exception <26:10 26:19>]
REFERENCE_INCLUDE: malloc.h -> corecrt.h [malloc.h <11:10 11:20>]
REFERENCE_INCLUDE: malloc.h -> corecrt_malloc.h [malloc.h <12:10 12:27>]
REFERENCE_INCLUDE: exception -> vcruntime_exception.h [exception <27:10 27:32>]
REFERENCE_INCLUDE: vcruntime_exception.h -> eh.h [vcruntime_exception.h <10:10 10:15>]
REFERENCE_INCLUDE: eh.h -> corecrt_terminate.h [eh.h <11:10 11:30>]
REFERENCE_INCLUDE: corecrt_terminate.h -> corecrt.h [corecrt_terminate.h <10:10 10:20>]
REFERENCE_INCLUDE: new -> vcruntime_new.h [new <7:10 7:26>]
REFERENCE_INCLUDE: xmemory0 -> xutility [xmemory0 <10:10 10:19>]
REFERENCE_INCLUDE: xutility -> climits [xutility <6:10 6:18>]
REFERENCE_INCLUDE: xutility -> cstdlib [xutility <7:10 7:18>]
REFERENCE_INCLUDE: xutility -> utility [xutility <8:10 8:18>]
REFERENCE_INCLUDE: utility -> xstddef [utility <6:10 6:18>]
REFERENCE_INCLUDE: utility -> iosfwd [utility <7:10 7:17>]
REFERENCE_INCLUDE: iosfwd -> cstdio [iosfwd <6:10 6:17>]
REFERENCE_INCLUDE: cstdio -> yvals.h [cstdio <7:10 7:18>]
REFERENCE_INCLUDE: cstdio -> stdio.h [cstdio <8:10 8:18>]
REFERENCE_INCLUDE: stdio.h -> corecrt.h [stdio.h <11:10 11:20>]
REFERENCE_INCLUDE: stdio.h -> corecrt_wstdio.h [stdio.h <12:10 12:27>]
REFERENCE_INCLUDE: iosfwd -> cstring [iosfwd <7:10 7:18>]
REFERENCE_INCLUDE: cstring -> yvals.h [cstring <7:10 7:18>]
REFERENCE_INCLUDE: cstring -> string.h [cstring <8:10 8:19>]
REFERENCE_INCLUDE: string.h -> corecrt.h [string.h <11:10 11:20>]
REFERENCE_INCLUDE: string.h -> corecrt_memory.h [string.h <12:10 12:27>]
REFERENCE_INCLUDE: corecrt_memory.h -> corecrt.h [corecrt_memory.h <13:10 13:20>]
REFERENCE_INCLUDE: corecrt_memory.h -> corecrt_memcpy_s.h [corecrt_memory.h <14:10 14:29>]
REFERENCE_INCLUDE: corecrt_memory.h -> vcruntime_string.h [corecrt_memory.h <15:10 15:29>]
REFERENCE_INCLUDE: string.h -> corecrt_wstring.h [string.h <13:10 13:28>]
REFERENCE_INCLUDE: string.h -> vcruntime_string.h [string.h <14:10 14:29>]
REFERENCE_INCLUDE: iosfwd -> cwchar [iosfwd <8:10 8:17>]
REFERENCE_INCLUDE: iosfwd -> xstddef [iosfwd <9:10 9:18>]
REFERENCE_INCLUDE: iosfwd -> yvals.h [iosfwd <10:10 10:18>]
REFERENCE_INCLUDE: iosfwd -> crtdbg.h [iosfwd <12:10 12:19>]
REFERENCE_INCLUDE: utility -> type_traits [utility <8:10 8:22>]
REFERENCE_INCLUDE: xmemory0 -> xatomic0.h [xmemory0 <1228:12 1228:23>]
REFERENCE_INCLUDE: xatomic0.h -> yvals.h [xatomic0.h <6:10 6:18>]
REFERENCE_INCLUDE: xmemory0 -> intrin0.h [xmemory0 <1231:13 1231:23>]
REFERENCE_INCLUDE: memory -> exception [memory <7:10 7:20>]
REFERENCE_INCLUDE: memory -> typeinfo [memory <8:10 8:19>]
REFERENCE_INCLUDE: typeinfo -> exception [typeinfo <22:10 22:20>]
REFERENCE_INCLUDE: typeinfo -> vcruntime_typeinfo.h [typeinfo <33:10 33:31>]
REFERENCE_INCLUDE: vcruntime_typeinfo.h -> vcruntime.h [vcruntime_typeinfo.h <10:10 10:22>]
REFERENCE_INCLUDE: vcruntime_typeinfo.h -> vcruntime_exception.h [vcruntime_typeinfo.h <11:10 11:32>]
REFERENCE_INCLUDE: memory -> type_traits [memory <9:10 9:22>]
REFERENCE_INCLUDE: b2Body.cpp -> b2Fixture.h [b2Body.cpp <20:10 20:37>]
REFERENCE_MACRO_USAGE: b2Fixture.h -> B2_FIXTURE_H [b2Fixture.h <19:9 19:20>]
REFERENCE_INCLUDE: b2Fixture.h -> b2Body.h [b2Fixture.h <22:10 22:34>]
REFERENCE_INCLUDE: b2Fixture.h -> b2Collision.h [b2Fixture.h <23:10 23:40>]
REFERENCE_INCLUDE: b2Fixture.h -> b2Shape.h [b2Fixture.h <24:10 24:43>]
REFERENCE_MACRO_USAGE: b2Fixture.h -> b2Assert [b2Fixture.h <295:2 295:9>]
REFERENCE_MACRO_USAGE: b2Fixture.h -> b2Assert [b2Fixture.h <341:2 341:9>]
REFERENCE_INCLUDE: b2Body.cpp -> b2World.h [b2Body.cpp <21:10 21:35>]
REFERENCE_MACRO_USAGE: b2World.h -> B2_WORLD_H [b2World.h <19:9 19:18>]
REFERENCE_INCLUDE: b2World.h -> b2Math.h [b2World.h <22:10 22:32>]
REFERENCE_INCLUDE: b2World.h -> b2BlockAllocator.h [b2World.h <23:10 23:42>]
REFERENCE_INCLUDE: b2World.h -> b2StackAllocator.h [b2World.h <24:10 24:42>]
REFERENCE_MACRO_USAGE: b2StackAllocator.h -> B2_STACK_ALLOCATOR_H [b2StackAllocator.h <19:9 19:28>]
REFERENCE_INCLUDE: b2StackAllocator.h -> b2Settings.h [b2StackAllocator.h <22:10 22:36>]
REFERENCE_INCLUDE: b2World.h -> b2ContactManager.h [b2World.h <25:10 25:44>]
REFERENCE_MACRO_USAGE: b2ContactManager.h -> B2_CONTACT_MANAGER_H [b2ContactManager.h <19:9 19:28>]
REFERENCE_INCLUDE: b2ContactManager.h -> b2BroadPhase.h [b2ContactManager.h <22:10 22:41>]
REFERENCE_MACRO_USAGE: b2BroadPhase.h -> B2_BROAD_PHASE_H [b2BroadPhase.h <19:9 19:24>]
REFERENCE_INCLUDE: b2BroadPhase.h -> b2Settings.h [b2BroadPhase.h <22:10 22:36>]
REFERENCE_INCLUDE: b2BroadPhase.h -> b2Collision.h [b2BroadPhase.h <23:10 23:40>]
REFERENCE_INCLUDE: b2BroadPhase.h -> b2DynamicTree.h [b2BroadPhase.h <24:10 24:42>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> B2_DYNAMIC_TREE_H [b2DynamicTree.h <19:9 19:25>]
REFERENCE_INCLUDE: b2DynamicTree.h -> b2Collision.h [b2DynamicTree.h <22:10 22:40>]
REFERENCE_INCLUDE: b2DynamicTree.h -> b2GrowableStack.h [b2DynamicTree.h <23:10 23:41>]
REFERENCE_MACRO_USAGE: b2GrowableStack.h -> B2_GROWABLE_STACK_H [b2GrowableStack.h <19:9 19:27>]
REFERENCE_INCLUDE: b2GrowableStack.h -> b2Settings.h [b2GrowableStack.h <21:10 21:36>]
REFERENCE_INCLUDE: b2GrowableStack.h -> string.h [b2GrowableStack.h <22:10 22:19>]
REFERENCE_MACRO_USAGE: b2GrowableStack.h -> b2Assert [b2GrowableStack.h <67:3 67:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2_nullNode [b2DynamicTree.h <32:20 32:30>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2_nullNode [b2DynamicTree.h <177:17 177:27>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2_nullNode [b2DynamicTree.h <235:17 235:27>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2Assert [b2DynamicTree.h <158:2 158:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2Assert [b2DynamicTree.h <164:2 164:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2Assert [b2DynamicTree.h <209:2 209:9>]
REFERENCE_INCLUDE: b2BroadPhase.h -> algorithm [b2BroadPhase.h <25:10 25:20>]
REFERENCE_INCLUDE: algorithm -> xmemory [algorithm <6:10 6:18>]
REFERENCE_INCLUDE: b2World.h -> b2WorldCallbacks.h [b2World.h <26:10 26:44>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_WORLD_CALLBACKS_H [b2WorldCallbacks.h <19:9 19:28>]
REFERENCE_INCLUDE: b2WorldCallbacks.h -> b2Settings.h [b2WorldCallbacks.h <22:10 22:36>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> b2_maxManifoldPoints [b2WorldCallbacks.h <67:25 67:44>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> b2_maxManifoldPoints [b2WorldCallbacks.h <68:26 68:45>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <87:50 87:60>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <90:48 90:58>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <104:3 104:13>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <105:3 105:13>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <116:3 116:13>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <117:3 117:13>]
REFERENCE_INCLUDE: b2World.h -> b2TimeStep.h [b2World.h <27:10 27:38>]
REFERENCE_MACRO_USAGE: b2TimeStep.h -> B2_TIME_STEP_H [b2TimeStep.h <19:9 19:22>]
REFERENCE_INCLUDE: b2TimeStep.h -> b2Math.h [b2TimeStep.h <22:10 22:32>]
REFERENCE_INCLUDE: b2Body.cpp -> b2Contact.h [b2Body.cpp <22:10 22:46>]
REFERENCE_MACRO_USAGE: b2Contact.h -> B2_CONTACT_H [b2Contact.h <19:9 19:20>]
REFERENCE_INCLUDE: b2Contact.h -> b2Math.h [b2Contact.h <22:10 22:32>]
REFERENCE_INCLUDE: b2Contact.h -> b2Collision.h [b2Contact.h <23:10 23:40>]
REFERENCE_INCLUDE: b2Contact.h -> b2Shape.h [b2Contact.h <24:10 24:43>]
REFERENCE_INCLUDE: b2Contact.h -> b2Fixture.h [b2Contact.h <25:10 25:37>]
REFERENCE_MACRO_USAGE: b2Contact.h -> b2Sqrt [b2Contact.h <39:9 39:14>]
REFERENCE_INCLUDE: b2Body.cpp -> b2Joint.h [b2Body.cpp <23:10 23:42>]
REFERENCE_MACRO_USAGE: b2Joint.h -> B2_JOINT_H [b2Joint.h <19:9 19:18>]
REFERENCE_INCLUDE: b2Joint.h -> b2Math.h [b2Joint.h <22:10 22:32>]
REFERENCE_MACRO_USAGE: b2Joint.h -> B2_NOT_USED [b2Joint.h <150:54 150:64>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <27:2 27:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <28:2 28:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <29:2 29:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <30:2 30:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <31:2 31:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <32:2 32:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <115:2 115:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <168:2 168:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <221:2 221:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <227:2 227:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <230:2 230:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <246:2 246:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <304:2 304:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <339:3 339:10>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <360:2 360:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <386:3 386:10>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <424:2 424:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> b2Assert [b2Body.cpp <461:2 461:9>]
REFERENCE_MACRO_USAGE: b2Body.cpp -> NULL [b2Body.cpp <216:17 216:20>]
REFERENCE_TYPE_USAGE: int8 -> signed char [b2Settings.h <33:9 33:14>]
REFERENCE_TYPE_USAGE: int16 -> short [b2Settings.h <34:9 34:14>]
REFERENCE_TYPE_USAGE: int32 -> int [b2Settings.h <35:9 35:14>]
REFERENCE_TYPE_USAGE: uint8 -> unsigned char [b2Settings.h <36:9 36:16>]
REFERENCE_TYPE_USAGE: uint16 -> unsigned short [b2Settings.h <37:9 37:16>]
REFERENCE_TYPE_USAGE: uint32 -> unsigned int [b2Settings.h <38:9 38:16>]
REFERENCE_TYPE_USAGE: float32 -> float [b2Settings.h <39:9 39:13>]
REFERENCE_TYPE_USAGE: float64 -> double [b2Settings.h <40:9 40:14>]
REFERENCE_TYPE_USAGE: void * b2Alloc(int32) -> void [b2Settings.h <135:1 135:4>]
REFERENCE_TYPE_USAGE: void * b2Alloc(int32) -> int32 [b2Settings.h <135:15 135:19>]
REFERENCE_TYPE_USAGE: void b2Free(void *) -> void [b2Settings.h <138:1 138:4>]
REFERENCE_TYPE_USAGE: void b2Free(void *) -> void [b2Settings.h <138:13 138:16>]
REFERENCE_TYPE_USAGE: void b2Log(const char *) -> void [b2Settings.h <141:1 141:4>]
REFERENCE_TYPE_USAGE: void b2Log(const char *) -> char [b2Settings.h <141:18 141:21>]
REFERENCE_TYPE_USAGE: int32 b2Version::major -> int32 [b2Settings.h <147:2 147:6>]
REFERENCE_TYPE_USAGE: int32 b2Version::minor -> int32 [b2Settings.h <148:2 148:6>]
REFERENCE_TYPE_USAGE: int32 b2Version::revision -> int32 [b2Settings.h <149:2 149:6>]
REFERENCE_TYPE_USAGE: b2Version b2_version -> b2Version [b2Settings.h <153:8 153:16>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> bool [b2Math.h <26:8 26:11>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> float32 [b2Math.h <26:23 26:29>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> int32 [b2Math.h <28:2 28:6>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> int32 [b2Math.h <28:31 28:35>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <33:8 33:14>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <33:26 33:32>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <42:2 42:8>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x -> float32 [b2Math.h <37:3 37:9>]
REFERENCE_TYPE_USAGE: int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i -> int32 [b2Math.h <38:3 38:7>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> b2InvSqrt::anonymous union (b2Math.h<35:2>) [b2Math.h <35:2 35:6>]
REFERENCE_CALL: float32 b2InvSqrt(float32) -> void b2InvSqrt::anonymous union (b2Math.h<35:2>)::() [b2Math.h <39:4 39:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <41:10 41:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <44:14 44:14>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <43:10 43:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <43:36 43:36>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 [b2Math.h <59:9 59:15>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 [b2Math.h <59:22 59:28>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 b2Vec2::x [b2Math.h <59:37 59:37>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 b2Vec2::y [b2Math.h <59:45 59:45>]
REFERENCE_TYPE_USAGE: void b2Vec2::SetZero() -> void [b2Math.h <62:2 62:5>]
REFERENCE_USAGE: void b2Vec2::SetZero() -> float32 b2Vec2::x [b2Math.h <62:19 62:19>]
REFERENCE_USAGE: void b2Vec2::SetZero() -> float32 b2Vec2::y [b2Math.h <62:29 62:29>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> void [b2Math.h <65:2 65:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> float32 [b2Math.h <65:11 65:17>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> float32 [b2Math.h <65:23 65:29>]
REFERENCE_USAGE: void b2Vec2::Set(float32, float32) -> float32 b2Vec2::x [b2Math.h <65:37 65:37>]
REFERENCE_USAGE: void b2Vec2::Set(float32, float32) -> float32 b2Vec2::y [b2Math.h <65:45 65:45>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::operator-() const -> b2Vec2 [b2Math.h <68:2 68:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::operator-() const -> b2Vec2 [b2Math.h <68:30 68:35>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::b2Vec2() [b2Math.h <68:37 68:37>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::Set(float32, float32) [b2Math.h <68:42 68:44>]
REFERENCE_USAGE: b2Vec2 b2Vec2::operator-() const -> float32 b2Vec2::x [b2Math.h <68:47 68:47>]
REFERENCE_USAGE: b2Vec2 b2Vec2::operator-() const -> float32 b2Vec2::y [b2Math.h <68:51 68:51>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <68:62 68:62>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::operator()(int32) const -> float32 [b2Math.h <71:2 71:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::operator()(int32) const -> int32 [b2Math.h <71:23 71:27>]
REFERENCE_USAGE: float32 b2Vec2::operator()(int32) const -> float32 b2Vec2::x [b2Math.h <73:12 73:12>]
REFERENCE_TYPE_USAGE: float32 & b2Vec2::operator()(int32) -> float32 [b2Math.h <77:2 77:8>]
REFERENCE_TYPE_USAGE: float32 & b2Vec2::operator()(int32) -> int32 [b2Math.h <77:24 77:28>]
REFERENCE_USAGE: float32 & b2Vec2::operator()(int32) -> float32 b2Vec2::x [b2Math.h <79:12 79:12>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> void [b2Math.h <83:2 83:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> b2Vec2 [b2Math.h <83:26 83:31>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <85:3 85:3>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <85:10 85:10>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <85:13 85:13>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <85:20 85:20>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> void [b2Math.h <89:2 89:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> b2Vec2 [b2Math.h <89:26 89:31>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <91:3 91:3>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <91:10 91:10>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <91:13 91:13>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <91:20 91:20>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator*=(float32) -> void [b2Math.h <95:2 95:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator*=(float32) -> float32 [b2Math.h <95:20 95:26>]
REFERENCE_USAGE: void b2Vec2::operator*=(float32) -> float32 b2Vec2::x [b2Math.h <97:3 97:3>]
REFERENCE_USAGE: void b2Vec2::operator*=(float32) -> float32 b2Vec2::y [b2Math.h <97:11 97:11>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Length() const -> float32 [b2Math.h <101:2 101:8>]
REFERENCE_CALL: float32 b2Vec2::Length() const -> float sqrtf(float) [b2Math.h <103:10 103:15>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::x [b2Math.h <103:17 103:17>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::x [b2Math.h <103:21 103:21>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::y [b2Math.h <103:25 103:25>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::y [b2Math.h <103:29 103:29>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 [b2Math.h <108:2 108:8>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::x [b2Math.h <110:10 110:10>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::x [b2Math.h <110:14 110:14>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::y [b2Math.h <110:18 110:18>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::y [b2Math.h <110:22 110:22>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <114:2 114:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <116:3 116:9>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <121:3 121:9>]
REFERENCE_CALL: float32 b2Vec2::Normalize() -> float32 b2Vec2::Length() const [b2Math.h <116:20 116:25>]
REFERENCE_USAGE: float32 b2Vec2::Normalize() -> float32 b2Vec2::x [b2Math.h <122:3 122:3>]
REFERENCE_USAGE: float32 b2Vec2::Normalize() -> float32 b2Vec2::y [b2Math.h <123:3 123:3>]
REFERENCE_TYPE_USAGE: bool b2Vec2::IsValid() const -> bool [b2Math.h <129:2 129:5>]
REFERENCE_CALL: bool b2Vec2::IsValid() const -> bool b2IsValid(float32) [b2Math.h <131:10 131:18>]
REFERENCE_CALL: bool b2Vec2::IsValid() const -> bool b2IsValid(float32) [b2Math.h <131:26 131:34>]
REFERENCE_USAGE: bool b2Vec2::IsValid() const -> float32 b2Vec2::x [b2Math.h <131:20 131:20>]
REFERENCE_USAGE: bool b2Vec2::IsValid() const -> float32 b2Vec2::y [b2Math.h <131:36 131:36>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::Skew() const -> b2Vec2 [b2Math.h <135:2 135:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::Skew() const -> b2Vec2 [b2Math.h <137:10 137:15>]
REFERENCE_CALL: b2Vec2 b2Vec2::Skew() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <137:10 137:15>]
REFERENCE_USAGE: b2Vec2 b2Vec2::Skew() const -> float32 b2Vec2::y [b2Math.h <137:18 137:18>]
REFERENCE_USAGE: b2Vec2 b2Vec2::Skew() const -> float32 b2Vec2::x [b2Math.h <137:21 137:21>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::x -> float32 [b2Math.h <140:2 140:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::y -> float32 [b2Math.h <140:2 140:8>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> b2Vec2 [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> b2Vec2 [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:9 150:15>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:22 150:28>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:35 150:41>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::x [b2Math.h <150:50 150:50>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::y [b2Math.h <150:58 150:58>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::z [b2Math.h <150:66 150:66>]
REFERENCE_TYPE_USAGE: void b2Vec3::SetZero() -> void [b2Math.h <153:2 153:5>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::x [b2Math.h <153:19 153:19>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::y [b2Math.h <153:29 153:29>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::z [b2Math.h <153:39 153:39>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> void [b2Math.h <156:2 156:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:11 156:17>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:23 156:29>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:35 156:41>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::x [b2Math.h <156:49 156:49>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::y [b2Math.h <156:57 156:57>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::z [b2Math.h <156:65 156:65>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Vec3::operator-() const -> b2Vec3 [b2Math.h <159:2 159:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Vec3::operator-() const -> b2Vec3 [b2Math.h <159:30 159:35>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::b2Vec3() [b2Math.h <159:37 159:37>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::Set(float32, float32, float32) [b2Math.h <159:42 159:44>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::x [b2Math.h <159:47 159:47>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::y [b2Math.h <159:51 159:51>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::z [b2Math.h <159:55 159:55>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::b2Vec3(b2Vec3 &&) [b2Math.h <159:66 159:66>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> void [b2Math.h <162:2 162:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> b2Vec3 [b2Math.h <162:26 162:31>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <164:3 164:3>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <164:10 164:10>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <164:13 164:13>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <164:20 164:20>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <164:23 164:23>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <164:30 164:30>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> void [b2Math.h <168:2 168:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> b2Vec3 [b2Math.h <168:26 168:31>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <170:3 170:3>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <170:10 170:10>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <170:13 170:13>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <170:20 170:20>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <170:23 170:23>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <170:30 170:30>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator*=(float32) -> void [b2Math.h <174:2 174:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator*=(float32) -> float32 [b2Math.h <174:20 174:26>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::x [b2Math.h <176:3 176:3>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::y [b2Math.h <176:11 176:11>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::z [b2Math.h <176:19 176:19>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::x -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::y -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::z -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::x [b2Math.h <144:8 144:13>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> b2Vec3 [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::y [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::z [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Mat22::b2Mat22() -> b2Vec2 b2Mat22::ex [b2Math.h <186:2 186:8>]
REFERENCE_CALL: void b2Mat22::b2Mat22() -> void b2Vec2::b2Vec2() [b2Math.h <186:2 186:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22() -> b2Vec2 b2Mat22::ey [b2Math.h <186:2 186:8>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <189:16 189:21>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <189:34 189:39>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <191:3 191:4>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2() [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <192:3 192:4>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <191:6 191:6>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <192:6 192:6>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:10 196:16>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:23 196:29>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:36 196:42>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:49 196:55>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <198:3 198:4>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <198:15 198:16>]
REFERENCE_CALL: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> void b2Vec2::b2Vec2() [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <199:3 199:4>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <199:15 199:16>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::x [b2Math.h <198:6 198:6>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::x [b2Math.h <199:6 199:6>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::y [b2Math.h <198:18 198:18>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::y [b2Math.h <199:18 199:18>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> void [b2Math.h <203:2 203:5>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <203:17 203:22>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <203:35 203:40>]
REFERENCE_CALL: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <205:6 205:6>]
REFERENCE_CALL: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <206:6 206:6>]
REFERENCE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <205:3 205:4>]
REFERENCE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <206:3 206:4>]
REFERENCE_TYPE_USAGE: void b2Mat22::SetIdentity() -> void [b2Math.h <210:2 210:5>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::x [b2Math.h <212:6 212:6>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::x [b2Math.h <212:19 212:19>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ex [b2Math.h <212:3 212:4>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ex [b2Math.h <213:3 213:4>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ey [b2Math.h <212:16 212:17>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ey [b2Math.h <213:16 213:17>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::y [b2Math.h <213:6 213:6>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::y [b2Math.h <213:19 213:19>]
REFERENCE_TYPE_USAGE: void b2Mat22::SetZero() -> void [b2Math.h <217:2 217:5>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::x [b2Math.h <219:6 219:6>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::x [b2Math.h <219:19 219:19>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ex [b2Math.h <219:3 219:4>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ex [b2Math.h <220:3 220:4>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ey [b2Math.h <219:16 219:17>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ey [b2Math.h <220:16 220:17>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::y [b2Math.h <220:6 220:6>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::y [b2Math.h <220:19 220:19>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Mat22 [b2Math.h <223:2 223:8>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Mat22 [b2Math.h <226:3 226:9>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 [b2Math.h <225:3 225:9>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 [b2Math.h <227:3 227:9>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <225:18 225:18>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <225:28 225:28>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <232:8 232:8>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <232:27 232:27>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <225:15 225:16>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <225:35 225:36>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <232:5 232:6>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <233:5 233:6>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <225:25 225:26>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <225:45 225:46>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <232:24 232:25>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <233:24 233:25>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <225:38 225:38>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <225:48 225:48>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <233:8 233:8>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <233:27 233:27>]
REFERENCE_CALL: b2Mat22 b2Mat22::GetInverse() const -> void b2Mat22::b2Mat22() [b2Math.h <226:11 226:11>]
REFERENCE_CALL: b2Mat22 b2Mat22::GetInverse() const -> void b2Mat22::b2Mat22(b2Mat22 &&) [b2Math.h <234:10 234:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <239:2 239:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <239:21 239:26>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <247:3 247:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 [b2Math.h <241:3 241:9>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 [b2Math.h <242:3 242:9>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <241:20 241:20>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <241:32 241:32>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <248:5 248:5>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <248:24 248:24>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <249:36 249:36>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ex [b2Math.h <241:17 241:18>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ex [b2Math.h <241:41 241:42>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ey [b2Math.h <241:29 241:30>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ey [b2Math.h <241:53 241:54>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <241:44 241:44>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <241:56 241:56>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <248:36 248:36>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <249:5 249:5>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <249:24 249:24>]
REFERENCE_CALL: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> void b2Vec2::b2Vec2() [b2Math.h <247:10 247:10>]
REFERENCE_CALL: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <250:10 250:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::ex -> b2Vec2 [b2Math.h <253:2 253:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::ey -> b2Vec2 [b2Math.h <253:2 253:7>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Vec2 b2Mat22::ex [b2Math.h <183:8 183:14>]
REFERENCE_CALL: void b2Mat22::b2Mat22(b2Mat22 &&) -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <183:8 183:14>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Mat22 [b2Math.h <183:8 183:14>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Vec2 b2Mat22::ey [b2Math.h <183:8 183:14>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ex [b2Math.h <260:2 260:8>]
REFERENCE_CALL: void b2Mat33::b2Mat33() -> void b2Vec3::b2Vec3() [b2Math.h <260:2 260:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ey [b2Math.h <260:2 260:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ez [b2Math.h <260:2 260:8>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:16 263:21>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:34 263:39>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:52 263:57>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <265:3 265:4>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3() [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <266:3 266:4>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <267:3 267:4>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <265:6 265:6>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <266:6 266:6>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <267:6 267:6>]
REFERENCE_TYPE_USAGE: void b2Mat33::SetZero() -> void [b2Math.h <271:2 271:5>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <273:6 273:12>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <274:6 274:12>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <275:6 275:12>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ex [b2Math.h <273:3 273:4>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ey [b2Math.h <274:3 274:4>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ez [b2Math.h <275:3 275:4>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const -> b2Vec3 [b2Math.h <280:2 280:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const -> b2Vec3 [b2Math.h <280:23 280:28>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const -> b2Vec2 [b2Math.h <285:2 285:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const -> b2Vec2 [b2Math.h <285:23 285:28>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetInverse22(b2Mat33 *) const -> void [b2Math.h <289:2 289:5>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetInverse22(b2Mat33 *) const -> b2Mat33 [b2Math.h <289:20 289:26>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetSymInverse33(b2Mat33 *) const -> void [b2Math.h <293:2 293:5>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetSymInverse33(b2Mat33 *) const -> b2Mat33 [b2Math.h <293:23 293:29>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ex -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ey -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ez -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: void b2Rot::b2Rot(float32) -> float32 [b2Math.h <304:17 304:23>]
REFERENCE_USAGE: void b2Rot::b2Rot(float32) -> float32 b2Rot::s [b2Math.h <307:3 307:3>]
REFERENCE_CALL: void b2Rot::b2Rot(float32) -> float sinf(float) [b2Math.h <307:7 307:10>]
REFERENCE_USAGE: void b2Rot::b2Rot(float32) -> float32 b2Rot::c [b2Math.h <308:3 308:3>]
REFERENCE_CALL: void b2Rot::b2Rot(float32) -> float cosf(float) [b2Math.h <308:7 308:10>]
REFERENCE_TYPE_USAGE: void b2Rot::Set(float32) -> void [b2Math.h <312:2 312:5>]
REFERENCE_TYPE_USAGE: void b2Rot::Set(float32) -> float32 [b2Math.h <312:11 312:17>]
REFERENCE_USAGE: void b2Rot::Set(float32) -> float32 b2Rot::s [b2Math.h <315:3 315:3>]
REFERENCE_CALL: void b2Rot::Set(float32) -> float sinf(float) [b2Math.h <315:7 315:10>]
REFERENCE_USAGE: void b2Rot::Set(float32) -> float32 b2Rot::c [b2Math.h <316:3 316:3>]
REFERENCE_CALL: void b2Rot::Set(float32) -> float cosf(float) [b2Math.h <316:7 316:10>]
REFERENCE_TYPE_USAGE: void b2Rot::SetIdentity() -> void [b2Math.h <320:2 320:5>]
REFERENCE_USAGE: void b2Rot::SetIdentity() -> float32 b2Rot::s [b2Math.h <322:3 322:3>]
REFERENCE_USAGE: void b2Rot::SetIdentity() -> float32 b2Rot::c [b2Math.h <323:3 323:3>]
REFERENCE_TYPE_USAGE: float32 b2Rot::GetAngle() const -> float32 [b2Math.h <327:2 327:8>]
REFERENCE_CALL: float32 b2Rot::GetAngle() const -> float atan2f(float, float) [b2Math.h <329:10 329:16>]
REFERENCE_USAGE: float32 b2Rot::GetAngle() const -> float32 b2Rot::s [b2Math.h <329:18 329:18>]
REFERENCE_USAGE: float32 b2Rot::GetAngle() const -> float32 b2Rot::c [b2Math.h <329:21 329:21>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> b2Vec2 [b2Math.h <333:2 333:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> b2Vec2 [b2Math.h <335:10 335:15>]
REFERENCE_CALL: b2Vec2 b2Rot::GetXAxis() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <335:10 335:15>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> float32 b2Rot::c [b2Math.h <335:17 335:17>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> float32 b2Rot::s [b2Math.h <335:20 335:20>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> b2Vec2 [b2Math.h <339:2 339:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> b2Vec2 [b2Math.h <341:10 341:15>]
REFERENCE_CALL: b2Vec2 b2Rot::GetYAxis() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <341:10 341:15>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> float32 b2Rot::s [b2Math.h <341:18 341:18>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> float32 b2Rot::c [b2Math.h <341:21 341:21>]
REFERENCE_TYPE_USAGE: float32 b2Rot::s -> float32 [b2Math.h <345:2 345:8>]
REFERENCE_TYPE_USAGE: float32 b2Rot::c -> float32 [b2Math.h <345:2 345:8>]
REFERENCE_USAGE: void b2Rot::b2Rot(const b2Rot &) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(const b2Rot &) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_TYPE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> b2Rot [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_TYPE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> b2Rot [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Transform::b2Transform() -> b2Vec2 b2Transform::p [b2Math.h <353:2 353:12>]
REFERENCE_CALL: void b2Transform::b2Transform() -> void b2Vec2::b2Vec2() [b2Math.h <353:2 353:12>]
REFERENCE_USAGE: void b2Transform::b2Transform() -> b2Rot b2Transform::q [b2Math.h <353:2 353:12>]
REFERENCE_CALL: void b2Transform::b2Transform() -> void b2Rot::b2Rot() [b2Math.h <353:2 353:12>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Vec2 [b2Math.h <356:20 356:25>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Rot [b2Math.h <356:44 356:48>]
REFERENCE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Vec2 b2Transform::p [b2Math.h <356:63 356:63>]
REFERENCE_CALL: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Math.h <356:63 356:63>]
REFERENCE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Rot b2Transform::q [b2Math.h <356:76 356:76>]
REFERENCE_CALL: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> void b2Rot::b2Rot(const b2Rot &) [b2Math.h <356:76 356:76>]
REFERENCE_TYPE_USAGE: void b2Transform::SetIdentity() -> void [b2Math.h <359:2 359:5>]
REFERENCE_CALL: void b2Transform::SetIdentity() -> void b2Vec2::SetZero() [b2Math.h <361:5 361:11>]
REFERENCE_USAGE: void b2Transform::SetIdentity() -> b2Vec2 b2Transform::p [b2Math.h <361:3 361:3>]
REFERENCE_CALL: void b2Transform::SetIdentity() -> void b2Rot::SetIdentity() [b2Math.h <362:5 362:15>]
REFERENCE_USAGE: void b2Transform::SetIdentity() -> b2Rot b2Transform::q [b2Math.h <362:3 362:3>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> void [b2Math.h <366:2 366:5>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <366:17 366:22>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> float32 [b2Math.h <366:35 366:41>]
REFERENCE_CALL: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <368:5 368:5>]
REFERENCE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 b2Transform::p [b2Math.h <368:3 368:3>]
REFERENCE_CALL: void b2Transform::Set(const b2Vec2 &, float32) -> void b2Rot::Set(float32) [b2Math.h <369:5 369:7>]
REFERENCE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Rot b2Transform::q [b2Math.h <369:3 369:3>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Transform::p -> b2Vec2 [b2Math.h <372:2 372:7>]
REFERENCE_TYPE_USAGE: b2Rot b2Transform::q -> b2Rot [b2Math.h <373:2 373:6>]
REFERENCE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Vec2 b2Transform::p [b2Math.h <350:8 350:18>]
REFERENCE_CALL: void b2Transform::b2Transform(b2Transform &&) -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <350:8 350:18>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Transform [b2Math.h <350:8 350:18>]
REFERENCE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Rot b2Transform::q [b2Math.h <350:8 350:18>]
REFERENCE_CALL: void b2Transform::b2Transform(b2Transform &&) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <350:8 350:18>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> void [b2Math.h <384:2 384:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> void [b2Math.h <697:8 697:11>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Transform [b2Math.h <384:20 384:30>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Transform [b2Math.h <697:35 697:45>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <384:38 384:44>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <697:52 697:58>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <700:2 700:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <388:2 388:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <707:8 707:11>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <709:2 709:9>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <388:15 388:21>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <707:30 707:36>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <710:2 710:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> void [b2Math.h <391:2 391:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> void [b2Math.h <717:8 717:11>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::localCenter -> b2Vec2 [b2Math.h <393:2 393:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::c0 -> b2Vec2 [b2Math.h <394:2 394:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::c -> b2Vec2 [b2Math.h <394:2 394:7>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::a0 -> float32 [b2Math.h <395:2 395:8>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::a -> float32 [b2Math.h <395:2 395:8>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::alpha0 -> float32 [b2Math.h <399:2 399:8>]
REFERENCE_USAGE: void b2Sweep::b2Sweep() -> b2Vec2 b2Sweep::localCenter [b2Math.h <380:8 380:14>]
REFERENCE_CALL: void b2Sweep::b2Sweep() -> void b2Vec2::b2Vec2() [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: void b2Sweep::b2Sweep() -> b2Vec2 b2Sweep::c0 [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: void b2Sweep::b2Sweep() -> b2Vec2 b2Sweep::c [b2Math.h <380:8 380:14>]
REFERENCE_TYPE_USAGE: const b2Vec2 b2Vec2_zero -> b2Vec2 [b2Math.h <403:14 403:19>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <406:8 406:14>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <406:28 406:33>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <406:45 406:50>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <408:11 408:11>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <408:17 408:17>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <408:23 408:23>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <408:29 408:29>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <412:8 412:14>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <412:30 412:35>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <412:47 412:52>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <414:11 414:11>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <414:29 414:29>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <414:17 414:17>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <414:23 414:23>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <419:8 419:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <419:29 419:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <421:9 421:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 [b2Math.h <419:40 419:46>]
REFERENCE_CALL: b2Vec2 b2Cross(const b2Vec2 &, float32) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <421:9 421:14>]
REFERENCE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 b2Vec2::y [b2Math.h <421:22 421:22>]
REFERENCE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 b2Vec2::x [b2Math.h <421:32 421:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <426:8 426:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <426:40 426:45>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <428:9 428:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 [b2Math.h <426:23 426:29>]
REFERENCE_CALL: b2Vec2 b2Cross(float32, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <428:9 428:14>]
REFERENCE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <428:23 428:23>]
REFERENCE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <428:32 428:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <433:8 433:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <433:45 433:50>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <435:9 435:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Mat22 [b2Math.h <433:27 433:33>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <435:9 435:14>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:21 435:21>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:27 435:27>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:36 435:36>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:56 435:56>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <435:18 435:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <435:47 435:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <435:33 435:34>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <435:62 435:63>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:42 435:42>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:50 435:50>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:65 435:65>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:71 435:71>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <440:8 440:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <440:46 440:51>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <442:9 442:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Mat22 [b2Math.h <440:28 440:34>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <442:9 442:14>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <442:16 442:20>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <442:32 442:36>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <442:27 442:28>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <442:43 442:44>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:8 446:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:33 446:38>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:50 446:55>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <448:9 448:14>]
REFERENCE_CALL: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <448:9 448:14>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <448:18 448:18>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <448:24 448:24>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <448:29 448:29>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <448:35 448:35>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:8 452:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:33 452:38>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:50 452:55>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <454:9 454:14>]
REFERENCE_CALL: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <454:9 454:14>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <454:18 454:18>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <454:24 454:24>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <454:29 454:29>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <454:35 454:35>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <457:8 457:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <457:44 457:49>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <459:9 459:14>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 [b2Math.h <457:27 457:33>]
REFERENCE_CALL: b2Vec2 operator*(float32, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <459:9 459:14>]
REFERENCE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <459:22 459:22>]
REFERENCE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <459:31 459:31>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> bool [b2Math.h <462:8 462:11>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <462:32 462:37>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <462:49 462:54>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <464:11 464:11>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <464:18 464:18>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <464:25 464:25>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <464:32 464:32>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> bool [b2Math.h <467:8 467:11>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <467:32 467:37>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <467:49 467:54>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <469:11 469:11>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <469:18 469:18>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <469:25 469:25>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <469:32 469:32>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <472:8 472:14>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <472:33 472:38>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <472:50 472:55>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <474:2 474:7>]
REFERENCE_CALL: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <474:15 474:15>]
REFERENCE_CALL: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::Length() const [b2Math.h <475:11 475:16>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <478:8 478:14>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <478:40 478:45>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <478:57 478:62>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <480:2 480:7>]
REFERENCE_CALL: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <480:15 480:15>]
REFERENCE_CALL: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <481:9 481:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <484:8 484:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <484:44 484:49>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <486:9 486:14>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 [b2Math.h <484:27 484:33>]
REFERENCE_CALL: b2Vec3 operator*(float32, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <486:9 486:14>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <486:22 486:22>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <486:31 486:31>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <486:40 486:40>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:8 490:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:33 490:38>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:50 490:55>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <492:9 492:14>]
REFERENCE_CALL: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <492:9 492:14>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <492:18 492:18>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <492:24 492:24>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <492:29 492:29>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <492:35 492:35>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <492:40 492:40>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <492:46 492:46>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:8 496:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:33 496:38>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:50 496:55>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <498:9 498:14>]
REFERENCE_CALL: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <498:9 498:14>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <498:18 498:18>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <498:24 498:24>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <498:29 498:29>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <498:35 498:35>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <498:40 498:40>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <498:46 498:46>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 [b2Math.h <502:8 502:14>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <502:28 502:33>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <502:45 502:50>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <504:11 504:11>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <504:17 504:17>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <504:23 504:23>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <504:29 504:29>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <504:35 504:35>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <504:41 504:41>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:8 508:13>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:29 508:34>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:46 508:51>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <510:9 510:14>]
REFERENCE_CALL: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <510:9 510:14>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:18 510:18>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:36 510:36>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:70 510:70>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:76 510:76>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:24 510:24>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:30 510:30>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:41 510:41>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:59 510:59>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:47 510:47>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:53 510:53>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:64 510:64>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:82 510:82>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:8 513:14>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:34 513:40>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:52 513:58>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <515:9 515:15>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:9 515:15>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:22 515:22>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:35 515:35>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <515:19 515:20>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <515:26 515:27>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <515:32 515:33>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <515:39 515:40>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:8 519:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:28 519:34>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:46 519:52>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <521:9 521:15>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <521:9 521:15>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <521:17 521:21>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <521:33 521:37>]
REFERENCE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <521:28 521:29>]
REFERENCE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <521:44 521:45>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:8 525:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:29 525:35>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:47 525:53>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <529:9 529:15>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 [b2Math.h <527:2 527:7>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 [b2Math.h <528:2 528:7>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <527:9 527:10>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <528:9 528:10>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <527:12 527:16>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <527:31 527:35>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <528:12 528:16>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <528:31 528:35>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:20 527:21>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:26 527:27>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:45 527:46>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <528:20 528:21>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <527:39 527:40>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:26 528:27>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:39 528:40>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:45 528:46>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <529:9 529:15>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <533:8 533:13>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <533:45 533:50>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Mat33 [b2Math.h <533:27 533:33>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <535:20 535:20>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <535:33 535:33>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:13 535:13>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:26 535:26>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:39 535:39>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <535:11 535:11>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <535:17 535:18>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <535:24 535:24>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <535:30 535:31>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <535:37 535:37>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <535:43 535:44>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <539:8 539:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <539:47 539:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <541:9 541:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Mat33 [b2Math.h <539:29 539:35>]
REFERENCE_CALL: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <541:9 541:14>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::x [b2Math.h <541:21 541:21>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::x [b2Math.h <541:36 541:36>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ex [b2Math.h <541:18 541:19>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ex [b2Math.h <541:47 541:48>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <541:27 541:27>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <541:56 541:56>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ey [b2Math.h <541:33 541:34>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ey [b2Math.h <541:62 541:63>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <541:42 541:42>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <541:71 541:71>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::y [b2Math.h <541:50 541:50>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::y [b2Math.h <541:65 541:65>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:8 545:12>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:26 545:30>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:42 545:46>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <551:2 551:6>]
REFERENCE_CALL: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot() [b2Math.h <551:8 551:9>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:5 552:5>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:11 552:11>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:29 552:29>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <553:23 553:23>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <553:29 553:29>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <552:17 552:17>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <552:23 552:23>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:5 553:5>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:11 553:11>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:17 553:17>]
REFERENCE_CALL: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <554:9 554:10>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:8 558:12>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:27 558:31>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:43 558:47>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <564:2 564:6>]
REFERENCE_CALL: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot() [b2Math.h <564:8 564:9>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:5 565:5>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:17 565:17>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:23 565:23>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <566:23 566:23>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <566:29 566:29>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <565:11 565:11>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <565:29 565:29>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:5 566:5>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:11 566:11>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:17 566:17>]
REFERENCE_CALL: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <567:9 567:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <571:8 571:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <571:43 571:48>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <573:9 573:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Rot [b2Math.h <571:27 571:31>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <573:9 573:14>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <573:18 573:18>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <573:53 573:53>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <573:24 573:24>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <573:47 573:47>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <573:30 573:30>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <573:41 573:41>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <573:36 573:36>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <573:59 573:59>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <577:8 577:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <577:44 577:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <579:9 579:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Rot [b2Math.h <577:28 577:32>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <579:9 579:14>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <579:18 579:18>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <579:54 579:54>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <579:24 579:24>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <579:48 579:48>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <579:30 579:30>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <579:42 579:42>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <579:36 579:36>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <579:60 579:60>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <582:8 582:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <582:49 582:54>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <587:9 587:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Transform [b2Math.h <582:27 582:37>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <584:2 584:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <585:2 585:8>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <584:19 584:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <585:33 585:33>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <584:17 584:17>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <584:31 584:31>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <585:17 585:17>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <585:31 585:31>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <584:25 584:25>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <584:48 584:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <585:25 585:25>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <584:33 584:33>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <585:19 585:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <584:39 584:39>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <585:39 585:39>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <585:48 585:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <584:46 584:46>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <585:46 585:46>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <587:9 587:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <590:8 590:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <590:50 590:55>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <597:9 597:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Transform [b2Math.h <590:28 590:38>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <592:2 592:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <593:2 593:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <594:2 594:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <595:2 595:8>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <592:17 592:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <592:25 592:25>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <592:23 592:23>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <593:23 593:23>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <593:17 593:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <593:25 593:25>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <594:19 594:19>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <595:33 595:33>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <594:17 594:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <594:30 594:30>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <595:18 595:18>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <595:31 595:31>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <594:32 594:32>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <595:20 595:20>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <597:9 597:14>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:8 602:18>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:32 602:42>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:54 602:64>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <604:2 604:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform() [b2Math.h <604:14 604:14>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <605:6 605:6>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:4 605:4>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:16 605:16>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:21 605:21>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <606:16 606:16>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Mul(const b2Rot &, const b2Rot &) [b2Math.h <605:8 605:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <606:6 606:6>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:4 606:4>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:21 606:21>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:28 606:28>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <606:24 606:24>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <606:8 606:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform(b2Transform &&) [b2Math.h <607:9 607:9>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:8 612:18>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:33 612:43>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:55 612:65>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <614:2 614:12>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform() [b2Math.h <614:14 614:14>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <615:6 615:6>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:4 615:4>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:17 615:17>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:22 615:22>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <616:17 616:17>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2MulT(const b2Rot &, const b2Rot &) [b2Math.h <615:8 615:13>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <616:6 616:6>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:4 616:4>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:22 616:22>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:28 616:28>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2Math.h <616:8 616:13>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <616:24 616:24>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform(b2Transform &&) [b2Math.h <617:9 617:9>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Abs<float>(float) -> T b2Abs<typename T>(T) [b2Math.h <621:10 621:14>]
REFERENCE_TYPE_USAGE: float b2Abs<float>(float) -> float [b2Math.h <621:8 621:8>]
REFERENCE_TYPE_USAGE: float b2Abs<float>(float) -> float [b2Math.h <621:16 621:16>]
REFERENCE_TYPE_USAGE: float b2Abs<float>(float) -> float [b2Math.h <623:13 623:13>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Abs<b2Vec2>(b2Vec2) -> T b2Abs<typename T>(T) [b2Math.h <621:10 621:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs<b2Vec2>(b2Vec2) -> b2Vec2 [b2Math.h <621:8 621:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs<b2Vec2>(b2Vec2) -> b2Vec2 [b2Math.h <621:16 621:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <626:8 626:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <626:27 626:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <628:9 628:14>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <628:9 628:14>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> float b2Abs<float>(float) [b2Math.h <628:16 628:20>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> float b2Abs<float>(float) [b2Math.h <628:28 628:32>]
REFERENCE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <628:24 628:24>]
REFERENCE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <628:36 628:36>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <631:8 631:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <631:28 631:34>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <633:9 633:15>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <633:9 633:15>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <633:17 633:21>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <633:30 633:34>]
REFERENCE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <633:25 633:26>]
REFERENCE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <633:38 633:39>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Min<float>(float, float) -> T b2Min<typename T>(T, T) [b2Math.h <637:10 637:14>]
REFERENCE_TYPE_USAGE: float b2Min<float>(float, float) -> float [b2Math.h <637:8 637:8>]
REFERENCE_TYPE_USAGE: float b2Min<float>(float, float) -> float [b2Math.h <637:16 637:16>]
REFERENCE_TYPE_USAGE: float b2Min<float>(float, float) -> float [b2Math.h <637:21 637:21>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> T b2Min<typename T>(T, T) [b2Math.h <637:10 637:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <637:8 637:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <637:16 637:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <637:21 637:21>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:8 642:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:27 642:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:44 642:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <644:9 644:14>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <644:9 644:14>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float b2Min<float>(float, float) [b2Math.h <644:16 644:20>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float b2Min<float>(float, float) [b2Math.h <644:33 644:37>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <644:24 644:24>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <644:29 644:29>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <644:41 644:41>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <644:46 644:46>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Max<float>(float, float) -> T b2Max<typename T>(T, T) [b2Math.h <648:10 648:14>]
REFERENCE_TYPE_USAGE: float b2Max<float>(float, float) -> float [b2Math.h <648:8 648:8>]
REFERENCE_TYPE_USAGE: float b2Max<float>(float, float) -> float [b2Math.h <648:16 648:16>]
REFERENCE_TYPE_USAGE: float b2Max<float>(float, float) -> float [b2Math.h <648:21 648:21>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> T b2Max<typename T>(T, T) [b2Math.h <648:10 648:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <648:8 648:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <648:16 648:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <648:21 648:21>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:8 653:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:27 653:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:44 653:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <655:9 655:14>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <655:9 655:14>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float b2Max<float>(float, float) [b2Math.h <655:16 655:20>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float b2Max<float>(float, float) [b2Math.h <655:33 655:37>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <655:24 655:24>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <655:29 655:29>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <655:41 655:41>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <655:46 655:46>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:8 664:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:29 664:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:46 664:51>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:65 664:70>]
REFERENCE_CALL: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Math.h <666:9 666:13>]
REFERENCE_CALL: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Math.h <666:20 666:24>]
REFERENCE_TYPE_USAGE: void b2Swap<typename T>(T &, T &) -> void [b2Math.h <669:29 669:32>]
REFERENCE_TYPE_USAGE: uint32 b2NextPowerOfTwo(uint32) -> uint32 [b2Math.h <681:8 681:13>]
REFERENCE_TYPE_USAGE: uint32 b2NextPowerOfTwo(uint32) -> uint32 [b2Math.h <681:32 681:37>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> bool [b2Math.h <691:8 691:11>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> bool [b2Math.h <693:2 693:5>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> uint32 [b2Math.h <691:28 691:33>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <699:8 699:8>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Transform::p [b2Math.h <699:6 699:6>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Transform::p [b2Math.h <704:6 704:6>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <699:29 699:29>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <699:24 699:24>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <699:36 699:36>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::c0 [b2Math.h <699:26 699:27>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::c [b2Math.h <699:38 699:38>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 b2Sweep::a0 [b2Math.h <700:34 700:35>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 b2Sweep::a [b2Math.h <700:46 700:46>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> void b2Rot::Set(float32) [b2Math.h <701:8 701:10>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Rot b2Transform::q [b2Math.h <701:6 701:6>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Rot b2Transform::q [b2Math.h <704:21 704:21>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> void b2Vec2::operator-=(const b2Vec2 &) [b2Math.h <704:8 704:9>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <704:11 704:15>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::localCenter [b2Math.h <704:24 704:34>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <709:11 709:16>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <710:26 710:31>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <710:44 710:49>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <713:2 713:7>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Math.h <709:2 709:9>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> unsigned int [b2Math.h <709:2 709:9>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Math.h <711:5 711:6>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c0 [b2Math.h <711:2 711:3>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c0 [b2Math.h <711:20 711:21>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <711:13 711:13>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <711:18 711:18>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c [b2Math.h <711:16 711:16>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a0 [b2Math.h <712:2 712:3>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a0 [b2Math.h <712:20 712:21>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a [b2Math.h <712:16 712:16>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> float32 [b2Math.h <719:2 719:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> float32 [b2Math.h <720:2 720:8>]
REFERENCE_CALL: void b2Sweep::Normalize() -> float floorf(float) [b2Math.h <720:23 720:28>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a0 [b2Math.h <720:30 720:31>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a0 [b2Math.h <721:2 721:3>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a [b2Math.h <722:2 722:2>]
REFERENCE_TYPE_USAGE: const int32 b2_chunkSize -> int32 [b2BlockAllocator.h <24:7 24:11>]
REFERENCE_TYPE_USAGE: const int32 b2_maxBlockSize -> int32 [b2BlockAllocator.h <25:7 25:11>]
REFERENCE_TYPE_USAGE: const int32 b2_blockSizes -> int32 [b2BlockAllocator.h <26:7 26:11>]
REFERENCE_TYPE_USAGE: const int32 b2_chunkArrayIncrement -> int32 [b2BlockAllocator.h <27:7 27:11>]
REFERENCE_TYPE_USAGE: void * b2BlockAllocator::Allocate(int32) -> void [b2BlockAllocator.h <42:2 42:5>]
REFERENCE_TYPE_USAGE: void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.h <42:17 42:21>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.h <45:2 45:5>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.h <45:12 45:15>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Free(void *, int32) -> int32 [b2BlockAllocator.h <45:21 45:25>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Clear() -> void [b2BlockAllocator.h <47:2 47:5>]
REFERENCE_TYPE_USAGE: b2Chunk * b2BlockAllocator::m_chunks -> b2Chunk [b2BlockAllocator.h <51:2 51:8>]
REFERENCE_TYPE_USAGE: int32 b2BlockAllocator::m_chunkCount -> int32 [b2BlockAllocator.h <52:2 52:6>]
REFERENCE_TYPE_USAGE: int32 b2BlockAllocator::m_chunkSpace -> int32 [b2BlockAllocator.h <53:2 53:6>]
REFERENCE_TYPE_USAGE: b2Block * [] b2BlockAllocator::m_freeLists -> b2Block [b2BlockAllocator.h <55:2 55:8>]
REFERENCE_USAGE: b2Block * [] b2BlockAllocator::m_freeLists -> const int32 b2_blockSizes [b2BlockAllocator.h <55:23 55:35>]
REFERENCE_TYPE_USAGE: static int32 [] b2BlockAllocator::s_blockSizes -> int32 [b2BlockAllocator.h <57:9 57:13>]
REFERENCE_USAGE: static int32 [] b2BlockAllocator::s_blockSizes -> const int32 b2_blockSizes [b2BlockAllocator.h <57:28 57:40>]
REFERENCE_TYPE_USAGE: static uint8 [] b2BlockAllocator::s_blockSizeLookup -> uint8 [b2BlockAllocator.h <58:9 58:13>]
REFERENCE_USAGE: static uint8 [] b2BlockAllocator::s_blockSizeLookup -> const int32 b2_maxBlockSize [b2BlockAllocator.h <58:33 58:47>]
REFERENCE_TYPE_USAGE: static bool b2BlockAllocator::s_blockSizeLookupInitialized -> bool [b2BlockAllocator.h <59:9 59:12>]
REFERENCE_TYPE_USAGE: const uint8 b2_nullFeature -> uint8 [b2Collision.h <34:7 34:11>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::indexA -> uint8 [b2Collision.h <46:2 46:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::indexB -> uint8 [b2Collision.h <47:2 47:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::typeA -> uint8 [b2Collision.h <48:2 48:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::typeB -> uint8 [b2Collision.h <49:2 49:6>]
REFERENCE_TYPE_USAGE: b2ContactFeature b2ContactID::cf -> b2ContactFeature [b2Collision.h <55:2 55:17>]
REFERENCE_TYPE_USAGE: uint32 b2ContactID::key -> uint32 [b2Collision.h <56:2 56:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ManifoldPoint::localPoint -> b2Vec2 [b2Collision.h <71:2 71:7>]
REFERENCE_TYPE_USAGE: float32 b2ManifoldPoint::normalImpulse -> float32 [b2Collision.h <72:2 72:8>]
REFERENCE_TYPE_USAGE: float32 b2ManifoldPoint::tangentImpulse -> float32 [b2Collision.h <73:2 73:8>]
REFERENCE_TYPE_USAGE: b2ContactID b2ManifoldPoint::id -> b2ContactID [b2Collision.h <74:2 74:12>]
REFERENCE_USAGE: void b2ManifoldPoint::b2ManifoldPoint() -> b2Vec2 b2ManifoldPoint::localPoint [b2Collision.h <69:8 69:22>]
REFERENCE_CALL: void b2ManifoldPoint::b2ManifoldPoint() -> void b2Vec2::b2Vec2() [b2Collision.h <69:8 69:22>]
REFERENCE_USAGE: void b2ManifoldPoint::b2ManifoldPoint() -> b2ContactID b2ManifoldPoint::id [b2Collision.h <69:8 69:22>]
REFERENCE_CALL: void b2ManifoldPoint::b2ManifoldPoint() -> void b2ContactID::b2ContactID() [b2Collision.h <69:8 69:22>]
REFERENCE_TYPE_USAGE: b2ManifoldPoint [] b2Manifold::points -> b2ManifoldPoint [b2Collision.h <102:2 102:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Manifold::localNormal -> b2Vec2 [b2Collision.h <103:2 103:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Manifold::localPoint -> b2Vec2 [b2Collision.h <104:2 104:7>]
REFERENCE_TYPE_USAGE: b2Manifold::Type b2Manifold::type -> b2Manifold::Type [b2Collision.h <105:2 105:5>]
REFERENCE_TYPE_USAGE: int32 b2Manifold::pointCount -> int32 [b2Collision.h <106:2 106:6>]
REFERENCE_USAGE: void b2Manifold::b2Manifold() -> b2ManifoldPoint [] b2Manifold::points [b2Collision.h <93:8 93:17>]
REFERENCE_CALL: void b2Manifold::b2Manifold() -> void b2ManifoldPoint::b2ManifoldPoint() [b2Collision.h <93:8 93:17>]
REFERENCE_USAGE: void b2Manifold::b2Manifold() -> b2Vec2 b2Manifold::localNormal [b2Collision.h <93:8 93:17>]
REFERENCE_CALL: void b2Manifold::b2Manifold() -> void b2Vec2::b2Vec2() [b2Collision.h <93:8 93:17>]
REFERENCE_USAGE: void b2Manifold::b2Manifold() -> b2Vec2 b2Manifold::localPoint [b2Collision.h <93:8 93:17>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> void [b2Collision.h <116:2 116:5>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Manifold [b2Collision.h <116:24 116:33>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Transform [b2Collision.h <117:12 117:22>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Transform [b2Collision.h <118:12 118:22>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [b2Collision.h <117:30 117:36>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [b2Collision.h <118:30 118:36>]
REFERENCE_TYPE_USAGE: b2Vec2 b2WorldManifold::normal -> b2Vec2 [b2Collision.h <120:2 120:7>]
REFERENCE_TYPE_USAGE: b2Vec2 [] b2WorldManifold::points -> b2Vec2 [b2Collision.h <121:2 121:7>]
REFERENCE_TYPE_USAGE: float32 [] b2WorldManifold::separations -> float32 [b2Collision.h <122:2 122:8>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> void [b2Collision.h <136:1 136:4>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState [b2Collision.h <136:23 136:34>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState [b2Collision.h <136:66 136:77>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2Manifold [b2Collision.h <137:14 137:23>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2Manifold [b2Collision.h <137:43 137:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ClipVertex::v -> b2Vec2 [b2Collision.h <142:2 142:7>]
REFERENCE_TYPE_USAGE: b2ContactID b2ClipVertex::id -> b2ContactID [b2Collision.h <143:2 143:12>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastInput::p1 -> b2Vec2 [b2Collision.h <149:2 149:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastInput::p2 -> b2Vec2 [b2Collision.h <149:2 149:7>]
REFERENCE_TYPE_USAGE: float32 b2RayCastInput::maxFraction -> float32 [b2Collision.h <150:2 150:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastOutput::normal -> b2Vec2 [b2Collision.h <157:2 157:7>]
REFERENCE_TYPE_USAGE: float32 b2RayCastOutput::fraction -> float32 [b2Collision.h <158:2 158:8>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <165:2 165:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <254:8 254:11>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <257:2 257:5>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 [b2Collision.h <168:2 168:7>]
REFERENCE_CALL: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.h <170:15 170:15>]
REFERENCE_CALL: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <170:29 170:29>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <170:18 170:27>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <170:31 170:40>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 [b2Collision.h <174:2 174:7>]
REFERENCE_CALL: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.h <176:15 176:15>]
REFERENCE_CALL: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <176:29 176:29>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <176:18 176:27>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <176:31 176:40>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <180:2 180:8>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <182:3 182:9>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <183:3 183:9>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::x [b2Collision.h <182:27 182:27>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::x [b2Collision.h <182:42 182:42>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <182:16 182:25>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <183:16 183:25>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <182:31 182:40>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <183:31 183:40>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::y [b2Collision.h <183:27 183:27>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::y [b2Collision.h <183:42 183:42>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &) -> void [b2Collision.h <188:2 188:5>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2AABB [b2Collision.h <188:21 188:26>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <190:14 190:14>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <191:14 191:14>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:3 190:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:22 190:31>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:39 190:48>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <190:16 190:20>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:3 191:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:22 191:31>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:39 191:48>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <191:16 191:20>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> void [b2Collision.h <195:2 195:5>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <195:21 195:26>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <195:42 195:47>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <197:14 197:14>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <198:14 198:14>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:3 197:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:28 197:37>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:46 197:55>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <197:16 197:20>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:3 198:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:28 198:37>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:46 198:55>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <198:16 198:20>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> bool [b2Collision.h <202:2 202:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> bool [b2Collision.h <204:3 204:6>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2AABB [b2Collision.h <202:22 202:27>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <205:33 205:33>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <205:54 205:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <207:38 207:38>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <207:54 207:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <205:22 205:31>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <205:43 205:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <206:22 206:31>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <206:43 206:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <206:33 206:33>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <206:54 206:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <208:38 208:38>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <208:54 208:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <207:27 207:36>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <207:43 207:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <208:27 208:36>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <208:43 208:52>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> bool [b2Collision.h <212:2 212:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2RayCastOutput [b2Collision.h <212:15 212:29>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2RayCastInput [b2Collision.h <212:46 212:59>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::lowerBound -> b2Vec2 [b2Collision.h <214:2 214:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::upperBound -> b2Vec2 [b2Collision.h <215:2 215:7>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <219:1 219:4>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <219:23 219:32>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <220:14 220:26>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <221:14 221:26>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <220:44 220:54>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <221:44 221:54>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <224:1 224:4>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <224:32 224:41>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <225:17 225:30>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <225:49 225:59>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <226:47 226:57>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <226:17 226:29>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void [b2Collision.h <229:1 229:4>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold [b2Collision.h <229:24 229:33>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <230:15 230:28>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <231:15 231:28>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <230:47 230:57>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <231:47 231:57>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <234:1 234:4>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <234:29 234:38>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2EdgeShape [b2Collision.h <235:17 235:27>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <235:46 235:56>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <236:47 236:57>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <236:17 236:29>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void [b2Collision.h <239:1 239:4>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold [b2Collision.h <239:30 239:39>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EdgeShape [b2Collision.h <240:17 240:27>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <240:43 240:53>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <241:48 241:58>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <241:17 241:30>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> int32 [b2Collision.h <244:1 244:5>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> int32 [b2Collision.h <245:46 245:50>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex [b2Collision.h <244:27 244:38>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex [b2Collision.h <244:55 244:66>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 [b2Collision.h <245:14 245:19>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> float32 [b2Collision.h <245:30 245:36>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> bool [b2Collision.h <248:1 248:4>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Shape [b2Collision.h <248:27 248:33>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Shape [b2Collision.h <249:12 249:18>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> int32 [b2Collision.h <248:44 248:48>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> int32 [b2Collision.h <249:29 249:33>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform [b2Collision.h <250:12 250:22>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform [b2Collision.h <250:36 250:46>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 [b2Collision.h <256:2 256:7>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <256:24 256:24>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <256:13 256:22>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <258:43 258:52>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <256:26 256:35>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <258:19 258:28>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> float32 b2Vec2::x [b2Collision.h <257:17 257:17>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> float32 b2Vec2::y [b2Collision.h <257:32 257:32>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> bool b2Vec2::IsValid() const [b2Collision.h <258:30 258:36>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> bool b2Vec2::IsValid() const [b2Collision.h <258:54 258:60>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> bool [b2Collision.h <262:8 262:11>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <262:33 262:38>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <262:50 262:55>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 [b2Collision.h <264:2 264:7>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> void b2Vec2::b2Vec2() [b2Collision.h <264:9 264:10>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> void b2Vec2::b2Vec2() [b2Collision.h <264:13 264:14>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <265:5 265:5>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <266:5 266:5>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <265:20 265:20>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <266:20 266:20>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <265:9 265:18>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <266:9 266:18>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <265:24 265:33>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <266:24 266:33>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::x [b2Collision.h <268:9 268:9>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::x [b2Collision.h <271:9 271:9>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::y [b2Collision.h <268:24 268:24>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::y [b2Collision.h <271:24 271:24>]
REFERENCE_TYPE_USAGE: float32 b2MassData::mass -> float32 [b2Shape.h <30:2 30:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MassData::center -> b2Vec2 [b2Shape.h <33:2 33:7>]
REFERENCE_TYPE_USAGE: float32 b2MassData::I -> float32 [b2Shape.h <36:2 36:8>]
REFERENCE_USAGE: void b2MassData::b2MassData() -> b2Vec2 b2MassData::center [b2Shape.h <27:8 27:17>]
REFERENCE_CALL: void b2MassData::b2MassData() -> void b2Vec2::b2Vec2() [b2Shape.h <27:8 27:17>]
REFERENCE_TYPE_USAGE: b2Shape * b2Shape::Clone(b2BlockAllocator *) const -> b2Shape [b2Shape.h <58:10 58:16>]
REFERENCE_TYPE_USAGE: b2Shape * b2Shape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2Shape.h <58:25 58:40>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Shape::GetType() const -> b2Shape::Type [b2Shape.h <62:2 62:5>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Shape::GetType() const -> b2Shape::Type [b2Shape.h <99:17 99:20>]
REFERENCE_TYPE_USAGE: int32 b2Shape::GetChildCount() const -> int32 [b2Shape.h <65:10 65:14>]
REFERENCE_TYPE_USAGE: bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2Shape.h <70:10 70:13>]
REFERENCE_TYPE_USAGE: bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2Shape.h <70:31 70:41>]
REFERENCE_TYPE_USAGE: bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2Shape.h <70:54 70:59>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2Shape.h <77:10 77:13>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2Shape.h <77:23 77:37>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2Shape.h <77:54 77:67>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2Shape.h <78:13 78:23>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2Shape.h <78:37 78:41>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2Shape.h <84:10 84:13>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2Shape.h <84:27 84:32>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2Shape.h <84:47 84:57>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2Shape.h <84:64 84:68>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeMass(b2MassData *, float32) const -> void [b2Shape.h <90:10 90:13>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2Shape.h <90:27 90:36>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeMass(b2MassData *, float32) const -> float32 [b2Shape.h <90:49 90:55>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Shape::m_type -> b2Shape::Type [b2Shape.h <92:2 92:5>]
REFERENCE_TYPE_USAGE: float32 b2Shape::m_radius -> float32 [b2Shape.h <96:2 96:8>]
REFERENCE_USAGE: b2Shape::Type b2Shape::GetType() const -> b2Shape::Type b2Shape::m_type [b2Shape.h <101:9 101:14>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2Vec2 b2BodyDef::position [b2Body.h <54:2 54:10>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2Vec2 b2BodyDef::position [b2Body.h <57:3 57:10>]
REFERENCE_CALL: void b2BodyDef::b2BodyDef() -> void b2Vec2::b2Vec2() [b2Body.h <54:2 54:10>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2Vec2 b2BodyDef::linearVelocity [b2Body.h <54:2 54:10>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2Vec2 b2BodyDef::linearVelocity [b2Body.h <59:3 59:16>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> void * b2BodyDef::userData [b2Body.h <56:3 56:10>]
REFERENCE_CALL: void b2BodyDef::b2BodyDef() -> void b2Vec2::Set(float32, float32) [b2Body.h <57:12 57:14>]
REFERENCE_CALL: void b2BodyDef::b2BodyDef() -> void b2Vec2::Set(float32, float32) [b2Body.h <59:18 59:20>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> float32 b2BodyDef::angle [b2Body.h <58:3 58:7>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> float32 b2BodyDef::angularVelocity [b2Body.h <60:3 60:17>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> float32 b2BodyDef::linearDamping [b2Body.h <61:3 61:15>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> float32 b2BodyDef::angularDamping [b2Body.h <62:3 62:16>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> bool b2BodyDef::allowSleep [b2Body.h <63:3 63:12>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> bool b2BodyDef::awake [b2Body.h <64:3 64:7>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> bool b2BodyDef::fixedRotation [b2Body.h <65:3 65:15>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> bool b2BodyDef::bullet [b2Body.h <66:3 66:8>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2BodyType b2BodyDef::type [b2Body.h <67:3 67:6>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2BodyType::b2_staticBody [b2Body.h <67:10 67:22>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> bool b2BodyDef::active [b2Body.h <68:3 68:8>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> float32 b2BodyDef::gravityScale [b2Body.h <69:3 69:14>]
REFERENCE_TYPE_USAGE: b2BodyType b2BodyDef::type -> b2BodyType [b2Body.h <74:2 74:11>]
REFERENCE_TYPE_USAGE: b2Vec2 b2BodyDef::position -> b2Vec2 [b2Body.h <78:2 78:7>]
REFERENCE_TYPE_USAGE: float32 b2BodyDef::angle -> float32 [b2Body.h <81:2 81:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2BodyDef::linearVelocity -> b2Vec2 [b2Body.h <84:2 84:7>]
REFERENCE_TYPE_USAGE: float32 b2BodyDef::angularVelocity -> float32 [b2Body.h <87:2 87:8>]
REFERENCE_TYPE_USAGE: float32 b2BodyDef::linearDamping -> float32 [b2Body.h <93:2 93:8>]
REFERENCE_TYPE_USAGE: float32 b2BodyDef::angularDamping -> float32 [b2Body.h <99:2 99:8>]
REFERENCE_TYPE_USAGE: bool b2BodyDef::allowSleep -> bool [b2Body.h <103:2 103:5>]
REFERENCE_TYPE_USAGE: bool b2BodyDef::awake -> bool [b2Body.h <106:2 106:5>]
REFERENCE_TYPE_USAGE: bool b2BodyDef::fixedRotation -> bool [b2Body.h <109:2 109:5>]
REFERENCE_TYPE_USAGE: bool b2BodyDef::bullet -> bool [b2Body.h <115:2 115:5>]
REFERENCE_TYPE_USAGE: bool b2BodyDef::active -> bool [b2Body.h <118:2 118:5>]
REFERENCE_TYPE_USAGE: void * b2BodyDef::userData -> void [b2Body.h <121:2 121:5>]
REFERENCE_TYPE_USAGE: float32 b2BodyDef::gravityScale -> float32 [b2Body.h <124:2 124:8>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Fixture [b2Body.cpp <166:1 166:9>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Fixture [b2Body.cpp <176:44 176:52>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Fixture [b2Body.cpp <177:2 177:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Fixture [b2Body.cpp <177:36 177:44>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Fixture [b2Body.h <138:2 138:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2FixtureDef [b2Body.cpp <166:40 166:51>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2FixtureDef [b2Body.h <138:33 138:44>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> b2Fixture [b2Body.cpp <205:1 205:9>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> b2Fixture [b2Body.h <147:2 147:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> b2Shape [b2Body.cpp <205:40 205:46>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> b2Shape [b2Body.h <147:33 147:39>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> float32 [b2Body.cpp <205:56 205:62>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> float32 [b2Body.h <147:49 147:55>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> void [b2Body.cpp <214:1 214:4>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> void [b2Body.cpp <221:2 221:9>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> void [b2Body.cpp <227:2 227:9>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> void [b2Body.cpp <230:2 230:9>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> void [b2Body.cpp <246:2 246:9>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> void [b2Body.h <156:2 156:5>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture [b2Body.cpp <214:29 214:37>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture [b2Body.cpp <231:2 231:10>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture [b2Body.cpp <255:3 255:11>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture [b2Body.cpp <256:3 256:11>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture [b2Body.cpp <278:34 278:42>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture [b2Body.h <156:22 156:30>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> void [b2Body.cpp <422:1 422:4>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> void [b2Body.cpp <424:2 424:9>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> void [b2Body.h <163:2 163:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 [b2Body.cpp <422:33 422:38>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 [b2Body.h <163:26 163:31>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> float32 [b2Body.cpp <422:51 422:57>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> float32 [b2Body.h <163:44 163:50>]
REFERENCE_TYPE_USAGE: const b2Transform & b2Body::GetTransform() const -> b2Transform [b2Body.h <167:8 167:18>]
REFERENCE_TYPE_USAGE: const b2Transform & b2Body::GetTransform() const -> b2Transform [b2Body.h <480:14 480:24>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetPosition() const -> b2Vec2 [b2Body.h <171:8 171:13>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetPosition() const -> b2Vec2 [b2Body.h <485:14 485:19>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngle() const -> float32 [b2Body.h <175:2 175:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngle() const -> float32 [b2Body.h <490:8 490:14>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetWorldCenter() const -> b2Vec2 [b2Body.h <178:8 178:13>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetWorldCenter() const -> b2Vec2 [b2Body.h <495:14 495:19>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetLocalCenter() const -> b2Vec2 [b2Body.h <181:8 181:13>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetLocalCenter() const -> b2Vec2 [b2Body.h <500:14 500:19>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> void [b2Body.h <185:2 185:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> void [b2Body.h <505:8 505:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2Vec2 [b2Body.h <185:31 185:36>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2Vec2 [b2Body.h <505:45 505:50>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetLinearVelocity() const -> b2Vec2 [b2Body.h <189:8 189:13>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetLinearVelocity() const -> b2Vec2 [b2Body.h <520:14 520:19>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularVelocity(float32) -> void [b2Body.h <193:2 193:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularVelocity(float32) -> void [b2Body.h <525:8 525:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularVelocity(float32) -> float32 [b2Body.h <193:26 193:32>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularVelocity(float32) -> float32 [b2Body.h <525:40 525:46>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngularVelocity() const -> float32 [b2Body.h <197:2 197:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngularVelocity() const -> float32 [b2Body.h <540:8 540:14>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> void [b2Body.h <205:2 205:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> void [b2Body.h <740:8 740:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <205:24 205:29>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <205:45 205:50>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <740:38 740:43>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <740:59 740:64>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> bool [b2Body.h <205:60 205:63>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> bool [b2Body.h <740:74 740:77>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> void [b2Body.h <210:2 210:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> void [b2Body.h <760:8 760:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <210:32 210:37>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <760:46 760:51>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> bool [b2Body.h <210:47 210:50>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> bool [b2Body.h <760:61 760:64>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> void [b2Body.h <216:2 216:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> void [b2Body.h <779:8 779:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> float32 [b2Body.h <216:19 216:25>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> float32 [b2Body.h <779:33 779:39>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> bool [b2Body.h <216:35 216:38>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> bool [b2Body.h <779:49 779:52>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> void [b2Body.h <224:2 224:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> void [b2Body.h <798:8 798:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <224:32 224:37>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <224:55 224:60>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <798:46 798:51>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <798:69 798:74>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> bool [b2Body.h <224:70 224:73>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> bool [b2Body.h <798:84 798:87>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> void [b2Body.h <229:2 229:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> void [b2Body.h <818:8 818:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <229:40 229:45>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <818:54 818:59>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> bool [b2Body.h <229:57 229:60>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> bool [b2Body.h <818:71 818:74>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> void [b2Body.h <234:2 234:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> void [b2Body.h <837:8 837:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> float32 [b2Body.h <234:27 234:33>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> float32 [b2Body.h <837:41 837:47>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> bool [b2Body.h <234:44 234:47>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> bool [b2Body.h <837:58 837:61>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetMass() const -> float32 [b2Body.h <238:2 238:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetMass() const -> float32 [b2Body.h <545:8 545:14>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetInertia() const -> float32 [b2Body.h <242:2 242:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetInertia() const -> float32 [b2Body.h <550:8 550:14>]
REFERENCE_TYPE_USAGE: void b2Body::GetMassData(b2MassData *) const -> void [b2Body.h <246:2 246:5>]
REFERENCE_TYPE_USAGE: void b2Body::GetMassData(b2MassData *) const -> void [b2Body.h <555:8 555:11>]
REFERENCE_TYPE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2MassData [b2Body.h <246:19 246:28>]
REFERENCE_TYPE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2MassData [b2Body.h <555:33 555:42>]
REFERENCE_TYPE_USAGE: void b2Body::SetMassData(const b2MassData *) -> void [b2Body.cpp <358:1 358:4>]
REFERENCE_TYPE_USAGE: void b2Body::SetMassData(const b2MassData *) -> void [b2Body.cpp <360:2 360:9>]
REFERENCE_TYPE_USAGE: void b2Body::SetMassData(const b2MassData *) -> void [b2Body.cpp <386:3 386:10>]
REFERENCE_TYPE_USAGE: void b2Body::SetMassData(const b2MassData *) -> void [b2Body.h <253:2 253:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2MassData [b2Body.cpp <358:32 358:41>]
REFERENCE_TYPE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2MassData [b2Body.h <253:25 253:34>]
REFERENCE_TYPE_USAGE: void b2Body::ResetMassData() -> void [b2Body.cpp <286:1 286:4>]
REFERENCE_TYPE_USAGE: void b2Body::ResetMassData() -> void [b2Body.cpp <304:2 304:9>]
REFERENCE_TYPE_USAGE: void b2Body::ResetMassData() -> void [b2Body.cpp <339:3 339:10>]
REFERENCE_TYPE_USAGE: void b2Body::ResetMassData() -> void [b2Body.h <258:2 258:5>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <263:2 263:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <263:29 263:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <562:8 562:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <562:43 562:48>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <268:2 268:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <268:30 268:35>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <567:8 567:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <567:44 567:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <273:2 273:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <273:29 273:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <572:8 572:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <572:43 572:48>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <278:2 278:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <278:30 278:35>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <577:8 577:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <577:44 577:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <283:2 283:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <283:47 283:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <582:8 582:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <582:61 582:66>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <288:2 288:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <288:47 288:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <587:8 587:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <587:61 587:66>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetLinearDamping() const -> float32 [b2Body.h <291:2 291:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetLinearDamping() const -> float32 [b2Body.h <592:8 592:14>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearDamping(float32) -> void [b2Body.h <294:2 294:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearDamping(float32) -> void [b2Body.h <597:8 597:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearDamping(float32) -> float32 [b2Body.h <294:24 294:30>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearDamping(float32) -> float32 [b2Body.h <597:38 597:44>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngularDamping() const -> float32 [b2Body.h <297:2 297:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngularDamping() const -> float32 [b2Body.h <602:8 602:14>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularDamping(float32) -> void [b2Body.h <300:2 300:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularDamping(float32) -> void [b2Body.h <607:8 607:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularDamping(float32) -> float32 [b2Body.h <300:25 300:31>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularDamping(float32) -> float32 [b2Body.h <607:39 607:45>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetGravityScale() const -> float32 [b2Body.h <303:2 303:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetGravityScale() const -> float32 [b2Body.h <612:8 612:14>]
REFERENCE_TYPE_USAGE: void b2Body::SetGravityScale(float32) -> void [b2Body.h <306:2 306:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetGravityScale(float32) -> void [b2Body.h <617:8 617:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetGravityScale(float32) -> float32 [b2Body.h <306:23 306:29>]
REFERENCE_TYPE_USAGE: void b2Body::SetGravityScale(float32) -> float32 [b2Body.h <617:37 617:43>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> void [b2Body.cpp <113:1 113:4>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> void [b2Body.cpp <115:2 115:9>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> void [b2Body.h <309:2 309:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> b2BodyType [b2Body.cpp <113:22 113:31>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> b2BodyType [b2Body.h <309:15 309:24>]
REFERENCE_TYPE_USAGE: b2BodyType b2Body::GetType() const -> b2BodyType [b2Body.h <312:2 312:11>]
REFERENCE_TYPE_USAGE: b2BodyType b2Body::GetType() const -> b2BodyType [b2Body.h <475:8 475:17>]
REFERENCE_TYPE_USAGE: void b2Body::SetBullet(bool) -> void [b2Body.h <315:2 315:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetBullet(bool) -> void [b2Body.h <622:8 622:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetBullet(bool) -> bool [b2Body.h <315:17 315:20>]
REFERENCE_TYPE_USAGE: void b2Body::SetBullet(bool) -> bool [b2Body.h <622:31 622:34>]
REFERENCE_TYPE_USAGE: bool b2Body::IsBullet() const -> bool [b2Body.h <318:2 318:5>]
REFERENCE_TYPE_USAGE: bool b2Body::IsBullet() const -> bool [b2Body.h <634:8 634:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetSleepingAllowed(bool) -> void [b2Body.h <322:2 322:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetSleepingAllowed(bool) -> void [b2Body.h <672:8 672:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetSleepingAllowed(bool) -> bool [b2Body.h <322:26 322:29>]
REFERENCE_TYPE_USAGE: void b2Body::SetSleepingAllowed(bool) -> bool [b2Body.h <672:40 672:43>]
REFERENCE_TYPE_USAGE: bool b2Body::IsSleepingAllowed() const -> bool [b2Body.h <325:2 325:5>]
REFERENCE_TYPE_USAGE: bool b2Body::IsSleepingAllowed() const -> bool [b2Body.h <685:8 685:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetAwake(bool) -> void [b2Body.h <330:2 330:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetAwake(bool) -> void [b2Body.h <639:8 639:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetAwake(bool) -> bool [b2Body.h <330:16 330:19>]
REFERENCE_TYPE_USAGE: void b2Body::SetAwake(bool) -> bool [b2Body.h <639:30 639:33>]
REFERENCE_TYPE_USAGE: bool b2Body::IsAwake() const -> bool [b2Body.h <334:2 334:5>]
REFERENCE_TYPE_USAGE: bool b2Body::IsAwake() const -> bool [b2Body.h <657:8 657:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> void [b2Body.cpp <459:1 459:4>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> void [b2Body.cpp <461:2 461:9>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> void [b2Body.h <349:2 349:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> bool [b2Body.cpp <459:24 459:27>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> bool [b2Body.h <349:17 349:20>]
REFERENCE_TYPE_USAGE: bool b2Body::IsActive() const -> bool [b2Body.h <352:2 352:5>]
REFERENCE_TYPE_USAGE: bool b2Body::IsActive() const -> bool [b2Body.h <662:8 662:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetFixedRotation(bool) -> void [b2Body.cpp <504:1 504:4>]
REFERENCE_TYPE_USAGE: void b2Body::SetFixedRotation(bool) -> void [b2Body.h <356:2 356:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetFixedRotation(bool) -> bool [b2Body.cpp <504:31 504:34>]
REFERENCE_TYPE_USAGE: void b2Body::SetFixedRotation(bool) -> bool [b2Body.cpp <506:2 506:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetFixedRotation(bool) -> bool [b2Body.h <356:24 356:27>]
REFERENCE_TYPE_USAGE: bool b2Body::IsFixedRotation() const -> bool [b2Body.h <359:2 359:5>]
REFERENCE_TYPE_USAGE: bool b2Body::IsFixedRotation() const -> bool [b2Body.h <667:8 667:11>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::GetFixtureList() -> b2Fixture [b2Body.h <362:2 362:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::GetFixtureList() -> b2Fixture [b2Body.h <690:8 690:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Body::GetFixtureList() const -> b2Fixture [b2Body.h <363:8 363:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Body::GetFixtureList() const -> b2Fixture [b2Body.h <695:14 695:22>]
REFERENCE_TYPE_USAGE: b2JointEdge * b2Body::GetJointList() -> b2JointEdge [b2Body.h <366:2 366:12>]
REFERENCE_TYPE_USAGE: b2JointEdge * b2Body::GetJointList() -> b2JointEdge [b2Body.h <700:8 700:18>]
REFERENCE_TYPE_USAGE: const b2JointEdge * b2Body::GetJointList() const -> b2JointEdge [b2Body.h <367:8 367:18>]
REFERENCE_TYPE_USAGE: const b2JointEdge * b2Body::GetJointList() const -> b2JointEdge [b2Body.h <705:14 705:24>]
REFERENCE_TYPE_USAGE: b2ContactEdge * b2Body::GetContactList() -> b2ContactEdge [b2Body.h <372:2 372:14>]
REFERENCE_TYPE_USAGE: b2ContactEdge * b2Body::GetContactList() -> b2ContactEdge [b2Body.h <710:8 710:20>]
REFERENCE_TYPE_USAGE: const b2ContactEdge * b2Body::GetContactList() const -> b2ContactEdge [b2Body.h <373:8 373:20>]
REFERENCE_TYPE_USAGE: const b2ContactEdge * b2Body::GetContactList() const -> b2ContactEdge [b2Body.h <715:14 715:26>]
REFERENCE_TYPE_USAGE: b2Body * b2Body::GetNext() -> b2Body [b2Body.h <376:2 376:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Body::GetNext() -> b2Body [b2Body.h <720:8 720:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2Body::GetNext() const -> b2Body [b2Body.h <377:8 377:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2Body::GetNext() const -> b2Body [b2Body.h <725:14 725:19>]
REFERENCE_TYPE_USAGE: void * b2Body::GetUserData() const -> void [b2Body.h <380:2 380:5>]
REFERENCE_TYPE_USAGE: void * b2Body::GetUserData() const -> void [b2Body.h <735:8 735:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetUserData(void *) -> void [b2Body.h <383:2 383:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetUserData(void *) -> void [b2Body.h <383:19 383:22>]
REFERENCE_TYPE_USAGE: void b2Body::SetUserData(void *) -> void [b2Body.h <730:8 730:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetUserData(void *) -> void [b2Body.h <730:33 730:36>]
REFERENCE_TYPE_USAGE: b2World * b2Body::GetWorld() -> b2World [b2Body.h <386:2 386:8>]
REFERENCE_TYPE_USAGE: b2World * b2Body::GetWorld() -> b2World [b2Body.h <872:8 872:14>]
REFERENCE_TYPE_USAGE: const b2World * b2Body::GetWorld() const -> b2World [b2Body.h <387:8 387:14>]
REFERENCE_TYPE_USAGE: const b2World * b2Body::GetWorld() const -> b2World [b2Body.h <877:14 877:20>]
REFERENCE_TYPE_USAGE: void b2Body::Dump() -> void [b2Body.cpp <526:1 526:4>]
REFERENCE_TYPE_USAGE: void b2Body::Dump() -> void [b2Body.h <390:2 390:5>]
REFERENCE_TYPE_USAGE: b2Body -> b2World [b2Body.h <394:15 394:21>]
REFERENCE_TYPE_USAGE: b2Body -> b2Island [b2Body.h <395:15 395:22>]
REFERENCE_TYPE_USAGE: b2Body -> b2ContactManager [b2Body.h <396:15 396:30>]
REFERENCE_TYPE_USAGE: b2Body -> b2ContactSolver [b2Body.h <397:15 397:29>]
REFERENCE_TYPE_USAGE: b2Body -> b2Contact [b2Body.h <398:15 398:23>]
REFERENCE_TYPE_USAGE: b2Body -> b2DistanceJoint [b2Body.h <400:15 400:29>]
REFERENCE_TYPE_USAGE: b2Body -> b2FrictionJoint [b2Body.h <401:15 401:29>]
REFERENCE_TYPE_USAGE: b2Body -> b2GearJoint [b2Body.h <402:15 402:25>]
REFERENCE_TYPE_USAGE: b2Body -> b2MotorJoint [b2Body.h <403:15 403:26>]
REFERENCE_TYPE_USAGE: b2Body -> b2MouseJoint [b2Body.h <404:15 404:26>]
REFERENCE_TYPE_USAGE: b2Body -> b2PrismaticJoint [b2Body.h <405:15 405:30>]
REFERENCE_TYPE_USAGE: b2Body -> b2PulleyJoint [b2Body.h <406:15 406:27>]
REFERENCE_TYPE_USAGE: b2Body -> b2RevoluteJoint [b2Body.h <407:15 407:29>]
REFERENCE_TYPE_USAGE: b2Body -> b2RopeJoint [b2Body.h <408:15 408:25>]
REFERENCE_TYPE_USAGE: b2Body -> b2WeldJoint [b2Body.h <409:15 409:25>]
REFERENCE_TYPE_USAGE: b2Body -> b2WheelJoint [b2Body.h <410:15 410:26>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2BodyDef [b2Body.cpp <25:22 25:30>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2BodyDef [b2Body.h <424:15 424:23>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2World [b2Body.cpp <25:37 25:43>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2World [b2Body.h <424:30 424:36>]
REFERENCE_TYPE_USAGE: void b2Body::SynchronizeFixtures() -> void [b2Body.cpp <446:1 446:4>]
REFERENCE_TYPE_USAGE: void b2Body::SynchronizeFixtures() -> void [b2Body.h <427:2 427:5>]
REFERENCE_TYPE_USAGE: void b2Body::SynchronizeTransform() -> void [b2Body.h <428:2 428:5>]
REFERENCE_TYPE_USAGE: void b2Body::SynchronizeTransform() -> void [b2Body.h <856:8 856:11>]
REFERENCE_TYPE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> bool [b2Body.cpp <399:1 399:4>]
REFERENCE_TYPE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> bool [b2Body.h <432:2 432:5>]
REFERENCE_TYPE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2Body [b2Body.cpp <399:34 399:39>]
REFERENCE_TYPE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2Body [b2Body.h <432:27 432:32>]
REFERENCE_TYPE_USAGE: void b2Body::Advance(float32) -> void [b2Body.h <434:2 434:5>]
REFERENCE_TYPE_USAGE: void b2Body::Advance(float32) -> void [b2Body.h <862:8 862:11>]
REFERENCE_TYPE_USAGE: void b2Body::Advance(float32) -> float32 [b2Body.h <434:15 434:21>]
REFERENCE_TYPE_USAGE: void b2Body::Advance(float32) -> float32 [b2Body.h <862:29 862:35>]
REFERENCE_TYPE_USAGE: b2BodyType b2Body::m_type -> b2BodyType [b2Body.h <436:2 436:11>]
REFERENCE_TYPE_USAGE: uint16 b2Body::m_flags -> uint16 [b2Body.h <438:2 438:7>]
REFERENCE_TYPE_USAGE: int32 b2Body::m_islandIndex -> int32 [b2Body.h <440:2 440:6>]
REFERENCE_TYPE_USAGE: b2Transform b2Body::m_xf -> b2Transform [b2Body.h <442:2 442:12>]
REFERENCE_TYPE_USAGE: b2Sweep b2Body::m_sweep -> b2Sweep [b2Body.h <443:2 443:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::m_linearVelocity -> b2Vec2 [b2Body.h <445:2 445:7>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_angularVelocity -> float32 [b2Body.h <446:2 446:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::m_force -> b2Vec2 [b2Body.h <448:2 448:7>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_torque -> float32 [b2Body.h <449:2 449:8>]
REFERENCE_TYPE_USAGE: b2World * b2Body::m_world -> b2World [b2Body.h <451:2 451:8>]
REFERENCE_TYPE_USAGE: b2Body * b2Body::m_prev -> b2Body [b2Body.h <452:2 452:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Body::m_next -> b2Body [b2Body.h <453:2 453:7>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::m_fixtureList -> b2Fixture [b2Body.h <455:2 455:10>]
REFERENCE_TYPE_USAGE: int32 b2Body::m_fixtureCount -> int32 [b2Body.h <456:2 456:6>]
REFERENCE_TYPE_USAGE: b2JointEdge * b2Body::m_jointList -> b2JointEdge [b2Body.h <458:2 458:12>]
REFERENCE_TYPE_USAGE: b2ContactEdge * b2Body::m_contactList -> b2ContactEdge [b2Body.h <459:2 459:14>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_mass -> float32 [b2Body.h <461:2 461:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_invMass -> float32 [b2Body.h <461:2 461:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_I -> float32 [b2Body.h <464:2 464:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_invI -> float32 [b2Body.h <464:2 464:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_linearDamping -> float32 [b2Body.h <466:2 466:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_angularDamping -> float32 [b2Body.h <467:2 467:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_gravityScale -> float32 [b2Body.h <468:2 468:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_sleepTime -> float32 [b2Body.h <470:2 470:8>]
REFERENCE_TYPE_USAGE: void * b2Body::m_userData -> void [b2Body.h <472:2 472:5>]
REFERENCE_USAGE: b2BodyType b2Body::GetType() const -> b2BodyType b2Body::m_type [b2Body.h <477:9 477:14>]
REFERENCE_USAGE: const b2Transform & b2Body::GetTransform() const -> b2Transform b2Body::m_xf [b2Body.h <482:9 482:12>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetPosition() const -> b2Vec2 b2Transform::p [b2Body.h <487:14 487:14>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetPosition() const -> b2Transform b2Body::m_xf [b2Body.h <487:9 487:12>]
REFERENCE_USAGE: float32 b2Body::GetAngle() const -> float32 b2Sweep::a [b2Body.h <492:17 492:17>]
REFERENCE_USAGE: float32 b2Body::GetAngle() const -> b2Sweep b2Body::m_sweep [b2Body.h <492:9 492:15>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetWorldCenter() const -> b2Vec2 b2Sweep::c [b2Body.h <497:17 497:17>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetWorldCenter() const -> b2Sweep b2Body::m_sweep [b2Body.h <497:9 497:15>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetLocalCenter() const -> b2Vec2 b2Sweep::localCenter [b2Body.h <502:17 502:27>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetLocalCenter() const -> b2Sweep b2Body::m_sweep [b2Body.h <502:9 502:15>]
REFERENCE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2BodyType b2Body::m_type [b2Body.h <507:6 507:11>]
REFERENCE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2BodyType::b2_staticBody [b2Body.h <507:16 507:28>]
REFERENCE_CALL: void b2Body::SetLinearVelocity(const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Body.h <512:6 512:10>]
REFERENCE_CALL: void b2Body::SetLinearVelocity(const b2Vec2 &) -> void b2Body::SetAwake(bool) [b2Body.h <514:3 514:10>]
REFERENCE_CALL: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.h <517:19 517:19>]
REFERENCE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <517:2 517:17>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetLinearVelocity() const -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <522:9 522:24>]
REFERENCE_USAGE: void b2Body::SetAngularVelocity(float32) -> b2BodyType b2Body::m_type [b2Body.h <527:6 527:11>]
REFERENCE_USAGE: void b2Body::SetAngularVelocity(float32) -> b2BodyType::b2_staticBody [b2Body.h <527:16 527:28>]
REFERENCE_CALL: void b2Body::SetAngularVelocity(float32) -> void b2Body::SetAwake(bool) [b2Body.h <534:3 534:10>]
REFERENCE_USAGE: void b2Body::SetAngularVelocity(float32) -> float32 b2Body::m_angularVelocity [b2Body.h <537:2 537:18>]
REFERENCE_USAGE: float32 b2Body::GetAngularVelocity() const -> float32 b2Body::m_angularVelocity [b2Body.h <542:9 542:25>]
REFERENCE_USAGE: float32 b2Body::GetMass() const -> float32 b2Body::m_mass [b2Body.h <547:9 547:14>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> float32 b2Body::m_I [b2Body.h <552:9 552:11>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> float32 b2Body::m_mass [b2Body.h <552:15 552:20>]
REFERENCE_CALL: float32 b2Body::GetInertia() const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Body.h <552:24 552:28>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> b2Vec2 b2Sweep::localCenter [b2Body.h <552:38 552:48>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> b2Vec2 b2Sweep::localCenter [b2Body.h <552:59 552:69>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> b2Sweep b2Body::m_sweep [b2Body.h <552:30 552:36>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> b2Sweep b2Body::m_sweep [b2Body.h <552:51 552:57>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> float32 b2MassData::mass [b2Body.h <557:8 557:11>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> float32 b2Body::m_mass [b2Body.h <557:15 557:20>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> float32 b2Body::m_mass [b2Body.h <558:18 558:23>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> float32 b2MassData::I [b2Body.h <558:8 558:8>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> float32 b2Body::m_I [b2Body.h <558:12 558:14>]
REFERENCE_CALL: void b2Body::GetMassData(b2MassData *) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Body.h <558:27 558:31>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Vec2 b2Sweep::localCenter [b2Body.h <558:41 558:51>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Vec2 b2Sweep::localCenter [b2Body.h <558:62 558:72>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Vec2 b2Sweep::localCenter [b2Body.h <559:25 559:35>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Sweep b2Body::m_sweep [b2Body.h <558:33 558:39>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Sweep b2Body::m_sweep [b2Body.h <558:54 558:60>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Sweep b2Body::m_sweep [b2Body.h <559:17 559:23>]
REFERENCE_CALL: void b2Body::GetMassData(b2MassData *) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.h <559:15 559:15>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Vec2 b2MassData::center [b2Body.h <559:8 559:13>]
REFERENCE_CALL: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Body.h <564:9 564:13>]
REFERENCE_USAGE: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Transform b2Body::m_xf [b2Body.h <564:15 564:18>]
REFERENCE_CALL: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Body.h <569:9 569:13>]
REFERENCE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Rot b2Transform::q [b2Body.h <569:20 569:20>]
REFERENCE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Transform b2Body::m_xf [b2Body.h <569:15 569:18>]
REFERENCE_CALL: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) [b2Body.h <574:9 574:14>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Transform b2Body::m_xf [b2Body.h <574:16 574:19>]
REFERENCE_CALL: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2Body.h <579:9 579:14>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Rot b2Transform::q [b2Body.h <579:21 579:21>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Transform b2Body::m_xf [b2Body.h <579:16 579:19>]
REFERENCE_CALL: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Body.h <584:26 584:26>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <584:9 584:24>]
REFERENCE_CALL: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 b2Cross(float32, const b2Vec2 &) [b2Body.h <584:28 584:34>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> float32 b2Body::m_angularVelocity [b2Body.h <584:36 584:52>]
REFERENCE_CALL: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.h <584:66 584:66>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 b2Sweep::c [b2Body.h <584:76 584:76>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Sweep b2Body::m_sweep [b2Body.h <584:68 584:74>]
REFERENCE_CALL: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const [b2Body.h <589:9 589:39>]
REFERENCE_CALL: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const [b2Body.h <589:41 589:53>]
REFERENCE_USAGE: float32 b2Body::GetLinearDamping() const -> float32 b2Body::m_linearDamping [b2Body.h <594:9 594:23>]
REFERENCE_USAGE: void b2Body::SetLinearDamping(float32) -> float32 b2Body::m_linearDamping [b2Body.h <599:2 599:16>]
REFERENCE_USAGE: float32 b2Body::GetAngularDamping() const -> float32 b2Body::m_angularDamping [b2Body.h <604:9 604:24>]
REFERENCE_USAGE: void b2Body::SetAngularDamping(float32) -> float32 b2Body::m_angularDamping [b2Body.h <609:2 609:17>]
REFERENCE_USAGE: float32 b2Body::GetGravityScale() const -> float32 b2Body::m_gravityScale [b2Body.h <614:9 614:22>]
REFERENCE_USAGE: void b2Body::SetGravityScale(float32) -> float32 b2Body::m_gravityScale [b2Body.h <619:2 619:15>]
REFERENCE_USAGE: void b2Body::SetBullet(bool) -> uint16 b2Body::m_flags [b2Body.h <626:3 626:9>]
REFERENCE_USAGE: void b2Body::SetBullet(bool) -> uint16 b2Body::m_flags [b2Body.h <630:3 630:9>]
REFERENCE_USAGE: void b2Body::SetBullet(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.h <626:14 626:25>]
REFERENCE_USAGE: void b2Body::SetBullet(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.h <630:15 630:26>]
REFERENCE_USAGE: bool b2Body::IsBullet() const -> uint16 b2Body::m_flags [b2Body.h <636:10 636:16>]
REFERENCE_USAGE: bool b2Body::IsBullet() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.h <636:20 636:31>]
REFERENCE_USAGE: bool b2Body::IsBullet() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.h <636:37 636:48>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> uint16 b2Body::m_flags [b2Body.h <643:3 643:9>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> uint16 b2Body::m_flags [b2Body.h <648:3 648:9>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <643:14 643:24>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <648:15 648:25>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> float32 b2Body::m_sleepTime [b2Body.h <644:3 644:13>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> float32 b2Body::m_sleepTime [b2Body.h <649:3 649:13>]
REFERENCE_CALL: void b2Body::SetAwake(bool) -> void b2Vec2::SetZero() [b2Body.h <650:20 650:26>]
REFERENCE_CALL: void b2Body::SetAwake(bool) -> void b2Vec2::SetZero() [b2Body.h <652:11 652:17>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <650:3 650:18>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> float32 b2Body::m_angularVelocity [b2Body.h <651:3 651:19>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> b2Vec2 b2Body::m_force [b2Body.h <652:3 652:9>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> float32 b2Body::m_torque [b2Body.h <653:3 653:10>]
REFERENCE_USAGE: bool b2Body::IsAwake() const -> uint16 b2Body::m_flags [b2Body.h <659:10 659:16>]
REFERENCE_USAGE: bool b2Body::IsAwake() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <659:20 659:30>]
REFERENCE_USAGE: bool b2Body::IsAwake() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <659:36 659:46>]
REFERENCE_USAGE: bool b2Body::IsActive() const -> uint16 b2Body::m_flags [b2Body.h <664:10 664:16>]
REFERENCE_USAGE: bool b2Body::IsActive() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.h <664:20 664:31>]
REFERENCE_USAGE: bool b2Body::IsActive() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.h <664:37 664:48>]
REFERENCE_USAGE: bool b2Body::IsFixedRotation() const -> uint16 b2Body::m_flags [b2Body.h <669:10 669:16>]
REFERENCE_USAGE: bool b2Body::IsFixedRotation() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.h <669:20 669:38>]
REFERENCE_USAGE: bool b2Body::IsFixedRotation() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.h <669:44 669:62>]
REFERENCE_USAGE: void b2Body::SetSleepingAllowed(bool) -> uint16 b2Body::m_flags [b2Body.h <676:3 676:9>]
REFERENCE_USAGE: void b2Body::SetSleepingAllowed(bool) -> uint16 b2Body::m_flags [b2Body.h <680:3 680:9>]
REFERENCE_USAGE: void b2Body::SetSleepingAllowed(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.h <676:14 676:28>]
REFERENCE_USAGE: void b2Body::SetSleepingAllowed(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.h <680:15 680:29>]
REFERENCE_CALL: void b2Body::SetSleepingAllowed(bool) -> void b2Body::SetAwake(bool) [b2Body.h <681:3 681:10>]
REFERENCE_USAGE: bool b2Body::IsSleepingAllowed() const -> uint16 b2Body::m_flags [b2Body.h <687:10 687:16>]
REFERENCE_USAGE: bool b2Body::IsSleepingAllowed() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.h <687:20 687:34>]
REFERENCE_USAGE: bool b2Body::IsSleepingAllowed() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.h <687:40 687:54>]
REFERENCE_USAGE: b2Fixture * b2Body::GetFixtureList() -> b2Fixture * b2Body::m_fixtureList [b2Body.h <692:9 692:21>]
REFERENCE_USAGE: const b2Fixture * b2Body::GetFixtureList() const -> b2Fixture * b2Body::m_fixtureList [b2Body.h <697:9 697:21>]
REFERENCE_USAGE: b2JointEdge * b2Body::GetJointList() -> b2JointEdge * b2Body::m_jointList [b2Body.h <702:9 702:19>]
REFERENCE_USAGE: const b2JointEdge * b2Body::GetJointList() const -> b2JointEdge * b2Body::m_jointList [b2Body.h <707:9 707:19>]
REFERENCE_USAGE: b2ContactEdge * b2Body::GetContactList() -> b2ContactEdge * b2Body::m_contactList [b2Body.h <712:9 712:21>]
REFERENCE_USAGE: const b2ContactEdge * b2Body::GetContactList() const -> b2ContactEdge * b2Body::m_contactList [b2Body.h <717:9 717:21>]
REFERENCE_USAGE: b2Body * b2Body::GetNext() -> b2Body * b2Body::m_next [b2Body.h <722:9 722:14>]
REFERENCE_USAGE: const b2Body * b2Body::GetNext() const -> b2Body * b2Body::m_next [b2Body.h <727:9 727:14>]
REFERENCE_USAGE: void b2Body::SetUserData(void *) -> void * b2Body::m_userData [b2Body.h <732:2 732:11>]
REFERENCE_USAGE: void * b2Body::GetUserData() const -> void * b2Body::m_userData [b2Body.h <737:9 737:18>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2BodyType b2Body::m_type [b2Body.h <742:6 742:11>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <742:16 742:29>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <747:15 747:21>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <753:6 753:12>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <747:25 747:35>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <753:16 753:26>]
REFERENCE_CALL: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> void b2Body::SetAwake(bool) [b2Body.h <749:3 749:10>]
REFERENCE_CALL: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Body.h <755:11 755:12>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 b2Body::m_force [b2Body.h <755:3 755:9>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Body::m_torque [b2Body.h <756:3 756:10>]
REFERENCE_CALL: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2Body.h <756:15 756:21>]
REFERENCE_CALL: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.h <756:29 756:29>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 b2Sweep::c [b2Body.h <756:39 756:39>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Body.h <756:31 756:37>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2BodyType b2Body::m_type [b2Body.h <762:6 762:11>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <762:16 762:29>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <767:15 767:21>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <773:6 773:12>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <767:25 767:35>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <773:16 773:26>]
REFERENCE_CALL: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> void b2Body::SetAwake(bool) [b2Body.h <769:3 769:10>]
REFERENCE_CALL: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Body.h <775:11 775:12>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2Vec2 b2Body::m_force [b2Body.h <775:3 775:9>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> b2BodyType b2Body::m_type [b2Body.h <781:6 781:11>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <781:16 781:29>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> uint16 b2Body::m_flags [b2Body.h <786:15 786:21>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> uint16 b2Body::m_flags [b2Body.h <792:6 792:12>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <786:25 786:35>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <792:16 792:26>]
REFERENCE_CALL: void b2Body::ApplyTorque(float32, bool) -> void b2Body::SetAwake(bool) [b2Body.h <788:3 788:10>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> float32 b2Body::m_torque [b2Body.h <794:3 794:10>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2BodyType b2Body::m_type [b2Body.h <800:6 800:11>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <800:16 800:29>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <805:15 805:21>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <811:6 811:12>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <805:25 805:35>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <811:16 811:26>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> void b2Body::SetAwake(bool) [b2Body.h <807:3 807:10>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Body.h <813:20 813:21>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <813:3 813:18>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Body.h <813:33 813:33>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Body::m_invMass [b2Body.h <813:23 813:31>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Body::m_angularVelocity [b2Body.h <814:3 814:19>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Body::m_invI [b2Body.h <814:24 814:29>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2Body.h <814:33 814:39>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.h <814:47 814:47>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 b2Sweep::c [b2Body.h <814:57 814:57>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Body.h <814:49 814:55>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2BodyType b2Body::m_type [b2Body.h <820:6 820:11>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <820:16 820:29>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <825:15 825:21>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <831:6 831:12>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <825:25 825:35>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <831:16 831:26>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> void b2Body::SetAwake(bool) [b2Body.h <827:3 827:10>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Body.h <833:20 833:21>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <833:3 833:18>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Body.h <833:33 833:33>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> float32 b2Body::m_invMass [b2Body.h <833:23 833:31>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> b2BodyType b2Body::m_type [b2Body.h <839:6 839:11>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <839:16 839:29>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> uint16 b2Body::m_flags [b2Body.h <844:15 844:21>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> uint16 b2Body::m_flags [b2Body.h <850:6 850:12>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <844:25 844:35>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <850:16 850:26>]
REFERENCE_CALL: void b2Body::ApplyAngularImpulse(float32, bool) -> void b2Body::SetAwake(bool) [b2Body.h <846:3 846:10>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> float32 b2Body::m_angularVelocity [b2Body.h <852:3 852:19>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> float32 b2Body::m_invI [b2Body.h <852:24 852:29>]
REFERENCE_CALL: void b2Body::SynchronizeTransform() -> void b2Rot::Set(float32) [b2Body.h <858:9 858:11>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Rot b2Transform::q [b2Body.h <858:7 858:7>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Rot b2Transform::q [b2Body.h <859:34 859:34>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Transform b2Body::m_xf [b2Body.h <858:2 858:5>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Transform b2Body::m_xf [b2Body.h <859:2 859:5>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Transform b2Body::m_xf [b2Body.h <859:29 859:32>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> float32 b2Sweep::a [b2Body.h <858:21 858:21>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Sweep b2Body::m_sweep [b2Body.h <858:13 858:19>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Sweep b2Body::m_sweep [b2Body.h <859:11 859:17>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Sweep b2Body::m_sweep [b2Body.h <859:37 859:43>]
REFERENCE_CALL: void b2Body::SynchronizeTransform() -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Body.h <859:9 859:9>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Vec2 b2Transform::p [b2Body.h <859:7 859:7>]
REFERENCE_CALL: void b2Body::SynchronizeTransform() -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.h <859:21 859:21>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Vec2 b2Sweep::c [b2Body.h <859:19 859:19>]
REFERENCE_CALL: void b2Body::SynchronizeTransform() -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Body.h <859:23 859:27>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Vec2 b2Sweep::localCenter [b2Body.h <859:45 859:55>]
REFERENCE_CALL: void b2Body::Advance(float32) -> void b2Sweep::Advance(float32) [b2Body.h <865:10 865:16>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <865:2 865:8>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <866:2 866:8>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <866:14 866:20>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <867:2 867:8>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <867:14 867:20>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <868:13 868:19>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <869:11 869:17>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <869:37 869:43>]
REFERENCE_CALL: void b2Body::Advance(float32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.h <866:12 866:12>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Vec2 b2Sweep::c [b2Body.h <866:10 866:10>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Vec2 b2Sweep::c [b2Body.h <869:19 869:19>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Vec2 b2Sweep::c0 [b2Body.h <866:22 866:23>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> float32 b2Sweep::a [b2Body.h <867:10 867:10>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> float32 b2Sweep::a [b2Body.h <868:21 868:21>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> float32 b2Sweep::a0 [b2Body.h <867:22 867:23>]
REFERENCE_CALL: void b2Body::Advance(float32) -> void b2Rot::Set(float32) [b2Body.h <868:9 868:11>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Rot b2Transform::q [b2Body.h <868:7 868:7>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Rot b2Transform::q [b2Body.h <869:34 869:34>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Transform b2Body::m_xf [b2Body.h <868:2 868:5>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Transform b2Body::m_xf [b2Body.h <869:2 869:5>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Transform b2Body::m_xf [b2Body.h <869:29 869:32>]
REFERENCE_CALL: void b2Body::Advance(float32) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Body.h <869:9 869:9>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Vec2 b2Transform::p [b2Body.h <869:7 869:7>]
REFERENCE_CALL: void b2Body::Advance(float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.h <869:21 869:21>]
REFERENCE_CALL: void b2Body::Advance(float32) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Body.h <869:23 869:27>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Vec2 b2Sweep::localCenter [b2Body.h <869:45 869:55>]
REFERENCE_USAGE: b2World * b2Body::GetWorld() -> b2World * b2Body::m_world [b2Body.h <874:9 874:15>]
REFERENCE_USAGE: const b2World * b2Body::GetWorld() const -> b2World * b2Body::m_world [b2Body.h <879:9 879:15>]
REFERENCE_USAGE: void b2Filter::b2Filter() -> uint16 b2Filter::categoryBits [b2Fixture.h <36:3 36:14>]
REFERENCE_USAGE: void b2Filter::b2Filter() -> uint16 b2Filter::maskBits [b2Fixture.h <37:3 37:10>]
REFERENCE_USAGE: void b2Filter::b2Filter() -> int16 b2Filter::groupIndex [b2Fixture.h <38:3 38:12>]
REFERENCE_TYPE_USAGE: uint16 b2Filter::categoryBits -> uint16 [b2Fixture.h <42:2 42:7>]
REFERENCE_TYPE_USAGE: uint16 b2Filter::maskBits -> uint16 [b2Fixture.h <46:2 46:7>]
REFERENCE_TYPE_USAGE: int16 b2Filter::groupIndex -> int16 [b2Fixture.h <51:2 51:6>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> b2Filter b2FixtureDef::filter [b2Fixture.h <59:2 59:13>]
REFERENCE_CALL: void b2FixtureDef::b2FixtureDef() -> void b2Filter::b2Filter() [b2Fixture.h <59:2 59:13>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> const b2Shape * b2FixtureDef::shape [b2Fixture.h <61:3 61:7>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> void * b2FixtureDef::userData [b2Fixture.h <62:3 62:10>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> float32 b2FixtureDef::friction [b2Fixture.h <63:3 63:10>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> float32 b2FixtureDef::restitution [b2Fixture.h <64:3 64:13>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> float32 b2FixtureDef::density [b2Fixture.h <65:3 65:9>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> bool b2FixtureDef::isSensor [b2Fixture.h <66:3 66:10>]
REFERENCE_TYPE_USAGE: const b2Shape * b2FixtureDef::shape -> b2Shape [b2Fixture.h <71:8 71:14>]
REFERENCE_TYPE_USAGE: void * b2FixtureDef::userData -> void [b2Fixture.h <74:2 74:5>]
REFERENCE_TYPE_USAGE: float32 b2FixtureDef::friction -> float32 [b2Fixture.h <77:2 77:8>]
REFERENCE_TYPE_USAGE: float32 b2FixtureDef::restitution -> float32 [b2Fixture.h <80:2 80:8>]
REFERENCE_TYPE_USAGE: float32 b2FixtureDef::density -> float32 [b2Fixture.h <83:2 83:8>]
REFERENCE_TYPE_USAGE: bool b2FixtureDef::isSensor -> bool [b2Fixture.h <87:2 87:5>]
REFERENCE_TYPE_USAGE: b2Filter b2FixtureDef::filter -> b2Filter [b2Fixture.h <90:2 90:9>]
REFERENCE_TYPE_USAGE: b2AABB b2FixtureProxy::aabb -> b2AABB [b2Fixture.h <96:2 96:7>]
REFERENCE_TYPE_USAGE: b2Fixture * b2FixtureProxy::fixture -> b2Fixture [b2Fixture.h <97:2 97:10>]
REFERENCE_TYPE_USAGE: int32 b2FixtureProxy::childIndex -> int32 [b2Fixture.h <98:2 98:6>]
REFERENCE_TYPE_USAGE: int32 b2FixtureProxy::proxyId -> int32 [b2Fixture.h <99:2 99:6>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Fixture::GetType() const -> b2Shape::Type [b2Fixture.h <112:11 112:14>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Fixture::GetType() const -> b2Shape::Type [b2Fixture.h <238:17 238:20>]
REFERENCE_TYPE_USAGE: b2Shape * b2Fixture::GetShape() -> b2Shape [b2Fixture.h <117:2 117:8>]
REFERENCE_TYPE_USAGE: b2Shape * b2Fixture::GetShape() -> b2Shape [b2Fixture.h <243:8 243:14>]
REFERENCE_TYPE_USAGE: const b2Shape * b2Fixture::GetShape() const -> b2Shape [b2Fixture.h <118:8 118:14>]
REFERENCE_TYPE_USAGE: const b2Shape * b2Fixture::GetShape() const -> b2Shape [b2Fixture.h <248:14 248:20>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetSensor(bool) -> void [b2Fixture.h <121:2 121:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetSensor(bool) -> bool [b2Fixture.h <121:17 121:20>]
REFERENCE_TYPE_USAGE: bool b2Fixture::IsSensor() const -> bool [b2Fixture.h <125:2 125:5>]
REFERENCE_TYPE_USAGE: bool b2Fixture::IsSensor() const -> bool [b2Fixture.h <253:8 253:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFilterData(const b2Filter &) -> void [b2Fixture.h <130:2 130:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFilterData(const b2Filter &) -> b2Filter [b2Fixture.h <130:27 130:34>]
REFERENCE_TYPE_USAGE: const b2Filter & b2Fixture::GetFilterData() const -> b2Filter [b2Fixture.h <133:8 133:15>]
REFERENCE_TYPE_USAGE: const b2Filter & b2Fixture::GetFilterData() const -> b2Filter [b2Fixture.h <258:14 258:21>]
REFERENCE_TYPE_USAGE: void b2Fixture::Refilter() -> void [b2Fixture.h <136:2 136:5>]
REFERENCE_TYPE_USAGE: b2Body * b2Fixture::GetBody() -> b2Body [b2Fixture.h <140:2 140:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Fixture::GetBody() -> b2Body [b2Fixture.h <273:8 273:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2Fixture::GetBody() const -> b2Body [b2Fixture.h <141:8 141:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2Fixture::GetBody() const -> b2Body [b2Fixture.h <278:14 278:19>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Fixture::GetNext() -> b2Fixture [b2Fixture.h <145:2 145:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Fixture::GetNext() -> b2Fixture [b2Fixture.h <283:8 283:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Fixture::GetNext() const -> b2Fixture [b2Fixture.h <146:8 146:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Fixture::GetNext() const -> b2Fixture [b2Fixture.h <288:14 288:22>]
REFERENCE_TYPE_USAGE: void * b2Fixture::GetUserData() const -> void [b2Fixture.h <150:2 150:5>]
REFERENCE_TYPE_USAGE: void * b2Fixture::GetUserData() const -> void [b2Fixture.h <263:8 263:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetUserData(void *) -> void [b2Fixture.h <153:2 153:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetUserData(void *) -> void [b2Fixture.h <153:19 153:22>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetUserData(void *) -> void [b2Fixture.h <268:8 268:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetUserData(void *) -> void [b2Fixture.h <268:36 268:39>]
REFERENCE_TYPE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> bool [b2Fixture.h <157:2 157:5>]
REFERENCE_TYPE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> bool [b2Fixture.h <324:8 324:11>]
REFERENCE_TYPE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> b2Vec2 [b2Fixture.h <157:23 157:28>]
REFERENCE_TYPE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> b2Vec2 [b2Fixture.h <324:40 324:45>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> bool [b2Fixture.h <162:2 162:5>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> bool [b2Fixture.h <329:8 329:11>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2RayCastOutput [b2Fixture.h <162:15 162:29>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2RayCastOutput [b2Fixture.h <329:32 329:46>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2RayCastInput [b2Fixture.h <162:46 162:59>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2RayCastInput [b2Fixture.h <329:63 329:76>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> int32 [b2Fixture.h <162:69 162:73>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> int32 [b2Fixture.h <329:86 329:90>]
REFERENCE_TYPE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> void [b2Fixture.h <167:2 167:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> void [b2Fixture.h <334:8 334:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> b2MassData [b2Fixture.h <167:19 167:28>]
REFERENCE_TYPE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> b2MassData [b2Fixture.h <334:36 334:45>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> void [b2Fixture.h <171:2 171:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> void [b2Fixture.h <293:8 293:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> void [b2Fixture.h <295:2 295:9>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> float32 [b2Fixture.h <171:18 171:24>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> float32 [b2Fixture.h <293:35 293:41>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetDensity() const -> float32 [b2Fixture.h <174:2 174:8>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetDensity() const -> float32 [b2Fixture.h <299:8 299:14>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetFriction() const -> float32 [b2Fixture.h <177:2 177:8>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetFriction() const -> float32 [b2Fixture.h <304:8 304:14>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFriction(float32) -> void [b2Fixture.h <181:2 181:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFriction(float32) -> void [b2Fixture.h <309:8 309:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFriction(float32) -> float32 [b2Fixture.h <181:19 181:25>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFriction(float32) -> float32 [b2Fixture.h <309:36 309:42>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetRestitution() const -> float32 [b2Fixture.h <184:2 184:8>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetRestitution() const -> float32 [b2Fixture.h <314:8 314:14>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetRestitution(float32) -> void [b2Fixture.h <188:2 188:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetRestitution(float32) -> void [b2Fixture.h <319:8 319:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetRestitution(float32) -> float32 [b2Fixture.h <188:22 188:28>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetRestitution(float32) -> float32 [b2Fixture.h <319:39 319:45>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> b2AABB [b2Fixture.h <193:8 193:13>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> b2AABB [b2Fixture.h <339:14 339:19>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> int32 [b2Fixture.h <193:24 193:28>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> int32 [b2Fixture.h <339:41 339:45>]
REFERENCE_TYPE_USAGE: void b2Fixture::Dump(int32) -> void [b2Fixture.h <196:2 196:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::Dump(int32) -> int32 [b2Fixture.h <196:12 196:16>]
REFERENCE_TYPE_USAGE: b2Fixture -> b2Body [b2Fixture.h <200:15 200:20>]
REFERENCE_TYPE_USAGE: b2Fixture -> b2World [b2Fixture.h <201:15 201:21>]
REFERENCE_TYPE_USAGE: b2Fixture -> b2Contact [b2Fixture.h <202:15 202:23>]
REFERENCE_TYPE_USAGE: b2Fixture -> b2ContactManager [b2Fixture.h <203:15 203:30>]
REFERENCE_TYPE_USAGE: void b2Fixture::Create(b2BlockAllocator *, b2Body *, const b2FixtureDef *) -> void [b2Fixture.h <209:2 209:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::Create(b2BlockAllocator *, b2Body *, const b2FixtureDef *) -> b2BlockAllocator [b2Fixture.h <209:14 209:29>]
REFERENCE_TYPE_USAGE: void b2Fixture::Create(b2BlockAllocator *, b2Body *, const b2FixtureDef *) -> b2Body [b2Fixture.h <209:43 209:48>]
REFERENCE_TYPE_USAGE: void b2Fixture::Create(b2BlockAllocator *, b2Body *, const b2FixtureDef *) -> b2FixtureDef [b2Fixture.h <209:63 209:74>]
REFERENCE_TYPE_USAGE: void b2Fixture::Destroy(b2BlockAllocator *) -> void [b2Fixture.h <210:2 210:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::Destroy(b2BlockAllocator *) -> b2BlockAllocator [b2Fixture.h <210:15 210:30>]
REFERENCE_TYPE_USAGE: void b2Fixture::CreateProxies(b2BroadPhase *, const b2Transform &) -> void [b2Fixture.h <213:2 213:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::CreateProxies(b2BroadPhase *, const b2Transform &) -> b2BroadPhase [b2Fixture.h <213:21 213:32>]
REFERENCE_TYPE_USAGE: void b2Fixture::CreateProxies(b2BroadPhase *, const b2Transform &) -> b2Transform [b2Fixture.h <213:53 213:63>]
REFERENCE_TYPE_USAGE: void b2Fixture::DestroyProxies(b2BroadPhase *) -> void [b2Fixture.h <214:2 214:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::DestroyProxies(b2BroadPhase *) -> b2BroadPhase [b2Fixture.h <214:22 214:33>]
REFERENCE_TYPE_USAGE: void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) -> void [b2Fixture.h <216:2 216:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) -> b2BroadPhase [b2Fixture.h <216:19 216:30>]
REFERENCE_TYPE_USAGE: void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) -> b2Transform [b2Fixture.h <216:51 216:61>]
REFERENCE_TYPE_USAGE: void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) -> b2Transform [b2Fixture.h <216:75 216:85>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::m_density -> float32 [b2Fixture.h <218:2 218:8>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Fixture::m_next -> b2Fixture [b2Fixture.h <220:2 220:10>]
REFERENCE_TYPE_USAGE: b2Body * b2Fixture::m_body -> b2Body [b2Fixture.h <221:2 221:7>]
REFERENCE_TYPE_USAGE: b2Shape * b2Fixture::m_shape -> b2Shape [b2Fixture.h <223:2 223:8>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::m_friction -> float32 [b2Fixture.h <225:2 225:8>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::m_restitution -> float32 [b2Fixture.h <226:2 226:8>]
REFERENCE_TYPE_USAGE: b2FixtureProxy * b2Fixture::m_proxies -> b2FixtureProxy [b2Fixture.h <228:2 228:15>]
REFERENCE_TYPE_USAGE: int32 b2Fixture::m_proxyCount -> int32 [b2Fixture.h <229:2 229:6>]
REFERENCE_TYPE_USAGE: b2Filter b2Fixture::m_filter -> b2Filter [b2Fixture.h <231:2 231:9>]
REFERENCE_TYPE_USAGE: bool b2Fixture::m_isSensor -> bool [b2Fixture.h <233:2 233:5>]
REFERENCE_TYPE_USAGE: void * b2Fixture::m_userData -> void [b2Fixture.h <235:2 235:5>]
REFERENCE_CALL: b2Shape::Type b2Fixture::GetType() const -> b2Shape::Type b2Shape::GetType() const [b2Fixture.h <240:18 240:24>]
REFERENCE_USAGE: b2Shape::Type b2Fixture::GetType() const -> b2Shape * b2Fixture::m_shape [b2Fixture.h <240:9 240:15>]
REFERENCE_USAGE: b2Shape * b2Fixture::GetShape() -> b2Shape * b2Fixture::m_shape [b2Fixture.h <245:9 245:15>]
REFERENCE_USAGE: const b2Shape * b2Fixture::GetShape() const -> b2Shape * b2Fixture::m_shape [b2Fixture.h <250:9 250:15>]
REFERENCE_USAGE: bool b2Fixture::IsSensor() const -> bool b2Fixture::m_isSensor [b2Fixture.h <255:9 255:18>]
REFERENCE_USAGE: const b2Filter & b2Fixture::GetFilterData() const -> b2Filter b2Fixture::m_filter [b2Fixture.h <260:9 260:16>]
REFERENCE_USAGE: void * b2Fixture::GetUserData() const -> void * b2Fixture::m_userData [b2Fixture.h <265:9 265:18>]
REFERENCE_USAGE: void b2Fixture::SetUserData(void *) -> void * b2Fixture::m_userData [b2Fixture.h <270:2 270:11>]
REFERENCE_USAGE: b2Body * b2Fixture::GetBody() -> b2Body * b2Fixture::m_body [b2Fixture.h <275:9 275:14>]
REFERENCE_USAGE: const b2Body * b2Fixture::GetBody() const -> b2Body * b2Fixture::m_body [b2Fixture.h <280:9 280:14>]
REFERENCE_USAGE: b2Fixture * b2Fixture::GetNext() -> b2Fixture * b2Fixture::m_next [b2Fixture.h <285:9 285:14>]
REFERENCE_USAGE: const b2Fixture * b2Fixture::GetNext() const -> b2Fixture * b2Fixture::m_next [b2Fixture.h <290:9 290:14>]
REFERENCE_CALL: void b2Fixture::SetDensity(float32) -> bool b2IsValid(float32) [b2Fixture.h <295:11 295:19>]
REFERENCE_CALL: void b2Fixture::SetDensity(float32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Fixture.h <295:2 295:9>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> unsigned int [b2Fixture.h <295:2 295:9>]
REFERENCE_USAGE: void b2Fixture::SetDensity(float32) -> float32 b2Fixture::m_density [b2Fixture.h <296:2 296:10>]
REFERENCE_USAGE: float32 b2Fixture::GetDensity() const -> float32 b2Fixture::m_density [b2Fixture.h <301:9 301:17>]
REFERENCE_USAGE: float32 b2Fixture::GetFriction() const -> float32 b2Fixture::m_friction [b2Fixture.h <306:9 306:18>]
REFERENCE_USAGE: void b2Fixture::SetFriction(float32) -> float32 b2Fixture::m_friction [b2Fixture.h <311:2 311:11>]
REFERENCE_USAGE: float32 b2Fixture::GetRestitution() const -> float32 b2Fixture::m_restitution [b2Fixture.h <316:9 316:21>]
REFERENCE_USAGE: void b2Fixture::SetRestitution(float32) -> float32 b2Fixture::m_restitution [b2Fixture.h <321:2 321:14>]
REFERENCE_CALL: bool b2Fixture::TestPoint(const b2Vec2 &) const -> bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2Fixture.h <326:18 326:26>]
REFERENCE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> b2Shape * b2Fixture::m_shape [b2Fixture.h <326:9 326:15>]
REFERENCE_CALL: bool b2Fixture::TestPoint(const b2Vec2 &) const -> const b2Transform & b2Body::GetTransform() const [b2Fixture.h <326:36 326:47>]
REFERENCE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> b2Body * b2Fixture::m_body [b2Fixture.h <326:28 326:33>]
REFERENCE_CALL: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2Fixture.h <331:18 331:24>]
REFERENCE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2Shape * b2Fixture::m_shape [b2Fixture.h <331:9 331:15>]
REFERENCE_CALL: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> const b2Transform & b2Body::GetTransform() const [b2Fixture.h <331:49 331:60>]
REFERENCE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2Body * b2Fixture::m_body [b2Fixture.h <331:41 331:46>]
REFERENCE_CALL: void b2Fixture::GetMassData(b2MassData *) const -> void b2Shape::ComputeMass(b2MassData *, float32) const [b2Fixture.h <336:11 336:21>]
REFERENCE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> b2Shape * b2Fixture::m_shape [b2Fixture.h <336:2 336:8>]
REFERENCE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> float32 b2Fixture::m_density [b2Fixture.h <336:33 336:41>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> void [b2Fixture.h <341:2 341:9>]
REFERENCE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> int32 b2Fixture::m_proxyCount [b2Fixture.h <341:43 341:54>]
REFERENCE_CALL: const b2AABB & b2Fixture::GetAABB(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Fixture.h <341:2 341:9>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> unsigned int [b2Fixture.h <341:2 341:9>]
REFERENCE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> b2AABB b2FixtureProxy::aabb [b2Fixture.h <342:31 342:34>]
REFERENCE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> b2FixtureProxy * b2Fixture::m_proxies [b2Fixture.h <342:9 342:17>]
REFERENCE_TYPE_USAGE: const int32 b2_stackSize -> int32 [b2StackAllocator.h <24:7 24:11>]
REFERENCE_TYPE_USAGE: const int32 b2_maxStackEntries -> int32 [b2StackAllocator.h <25:7 25:11>]
REFERENCE_TYPE_USAGE: char * b2StackEntry::data -> char [b2StackAllocator.h <29:2 29:5>]
REFERENCE_TYPE_USAGE: int32 b2StackEntry::size -> int32 [b2StackAllocator.h <30:2 30:6>]
REFERENCE_TYPE_USAGE: bool b2StackEntry::usedMalloc -> bool [b2StackAllocator.h <31:2 31:5>]
REFERENCE_TYPE_USAGE: void * b2StackAllocator::Allocate(int32) -> void [b2StackAllocator.h <43:2 43:5>]
REFERENCE_TYPE_USAGE: void * b2StackAllocator::Allocate(int32) -> int32 [b2StackAllocator.h <43:17 43:21>]
REFERENCE_TYPE_USAGE: void b2StackAllocator::Free(void *) -> void [b2StackAllocator.h <44:2 44:5>]
REFERENCE_TYPE_USAGE: void b2StackAllocator::Free(void *) -> void [b2StackAllocator.h <44:12 44:15>]
REFERENCE_TYPE_USAGE: int32 b2StackAllocator::GetMaxAllocation() const -> int32 [b2StackAllocator.h <46:2 46:6>]
REFERENCE_TYPE_USAGE: char [] b2StackAllocator::m_data -> char [b2StackAllocator.h <50:2 50:5>]
REFERENCE_USAGE: char [] b2StackAllocator::m_data -> const int32 b2_stackSize [b2StackAllocator.h <50:14 50:25>]
REFERENCE_TYPE_USAGE: int32 b2StackAllocator::m_index -> int32 [b2StackAllocator.h <51:2 51:6>]
REFERENCE_TYPE_USAGE: int32 b2StackAllocator::m_allocation -> int32 [b2StackAllocator.h <53:2 53:6>]
REFERENCE_TYPE_USAGE: int32 b2StackAllocator::m_maxAllocation -> int32 [b2StackAllocator.h <54:2 54:6>]
REFERENCE_TYPE_USAGE: b2StackEntry [] b2StackAllocator::m_entries -> b2StackEntry [b2StackAllocator.h <56:2 56:13>]
REFERENCE_USAGE: b2StackEntry [] b2StackAllocator::m_entries -> const int32 b2_maxStackEntries [b2StackAllocator.h <56:25 56:42>]
REFERENCE_TYPE_USAGE: int32 b2StackAllocator::m_entryCount -> int32 [b2StackAllocator.h <57:2 57:6>]
REFERENCE_TYPE_USAGE: b2GrowableStack<typename T, int32 N> -> int32 [b2GrowableStack.h <27:23 27:27>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <33:3 33:9>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <33:13 33:19>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <34:3 34:9>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <35:3 35:12>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <40:7 40:13>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <42:11 42:17>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <43:4 43:10>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <40:18 40:24>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> void [b2GrowableStack.h <47:2 47:5>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <49:7 49:13>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <54:25 54:31>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <61:11 61:17>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <62:5 62:11>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <49:18 49:27>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <52:4 52:13>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <53:26 53:35>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <51:13 51:19>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <53:4 53:10>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <54:11 54:17>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <61:3 61:9>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <55:15 55:21>]
REFERENCE_TYPE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> void [b2GrowableStack.h <67:3 67:10>]
REFERENCE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <67:12 67:18>]
REFERENCE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <68:5 68:11>]
REFERENCE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <69:18 69:24>]
REFERENCE_CALL: T b2GrowableStack<typename T, int32 N>::Pop() -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2GrowableStack.h <67:3 67:10>]
REFERENCE_TYPE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> unsigned int [b2GrowableStack.h <67:3 67:10>]
REFERENCE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <69:10 69:16>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<typename T, int32 N>::GetCount() -> int32 [b2GrowableStack.h <72:2 72:6>]
REFERENCE_USAGE: int32 b2GrowableStack<typename T, int32 N>::GetCount() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <74:10 74:16>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<typename T, int32 N>::m_count -> int32 [b2GrowableStack.h <80:2 80:6>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<typename T, int32 N>::m_capacity -> int32 [b2GrowableStack.h <81:2 81:6>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2GrowableStack<int, 256> -> b2GrowableStack<typename T, int32 N> [b2GrowableStack.h <28:7 28:21>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2GrowableStack<int, 256>::b2GrowableStack() -> void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() [b2GrowableStack.h <31:2 31:16>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2GrowableStack<int, 256>::~b2GrowableStack() -> void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() [b2GrowableStack.h <38:2 38:2>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2GrowableStack<int, 256>::Push(const int &) -> void b2GrowableStack<typename T, int32 N>::Push(const T &) [b2GrowableStack.h <47:7 47:10>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> void [b2GrowableStack.h <47:2 47:5>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int [b2GrowableStack.h <47:18 47:18>]
REFERENCE_TEMPLATE_SPECIALIZATION: int b2GrowableStack<int, 256>::Pop() -> T b2GrowableStack<typename T, int32 N>::Pop() [b2GrowableStack.h <65:4 65:6>]
REFERENCE_TYPE_USAGE: int b2GrowableStack<int, 256>::Pop() -> int [b2GrowableStack.h <65:2 65:2>]
REFERENCE_TEMPLATE_SPECIALIZATION: int32 b2GrowableStack<int, 256>::GetCount() -> int32 b2GrowableStack<typename T, int32 N>::GetCount() [b2GrowableStack.h <72:8 72:15>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<int, 256>::GetCount() -> int32 [b2GrowableStack.h <72:2 72:6>]
REFERENCE_TEMPLATE_SPECIALIZATION: int * b2GrowableStack<int, 256>::m_stack -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <78:5 78:11>]
REFERENCE_TYPE_USAGE: int * b2GrowableStack<int, 256>::m_stack -> int [b2GrowableStack.h <78:2 78:2>]
REFERENCE_TEMPLATE_SPECIALIZATION: int [] b2GrowableStack<int, 256>::m_array -> T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <79:4 79:10>]
REFERENCE_TYPE_USAGE: int [] b2GrowableStack<int, 256>::m_array -> int [b2GrowableStack.h <79:2 79:2>]
REFERENCE_TEMPLATE_SPECIALIZATION: int32 b2GrowableStack<int, 256>::m_count -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <80:8 80:14>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<int, 256>::m_count -> int32 [b2GrowableStack.h <80:2 80:6>]
REFERENCE_TEMPLATE_SPECIALIZATION: int32 b2GrowableStack<int, 256>::m_capacity -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <81:8 81:17>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<int, 256>::m_capacity -> int32 [b2GrowableStack.h <81:2 81:6>]
REFERENCE_TYPE_USAGE: bool b2TreeNode::IsLeaf() const -> bool [b2DynamicTree.h <30:2 30:5>]
REFERENCE_USAGE: bool b2TreeNode::IsLeaf() const -> int32 b2TreeNode::child1 [b2DynamicTree.h <32:10 32:15>]
REFERENCE_TYPE_USAGE: b2AABB b2TreeNode::aabb -> b2AABB [b2DynamicTree.h <36:2 36:7>]
REFERENCE_TYPE_USAGE: void * b2TreeNode::userData -> void [b2DynamicTree.h <38:2 38:5>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent -> int32 [b2DynamicTree.h <42:3 42:7>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next -> int32 [b2DynamicTree.h <43:3 43:7>]
REFERENCE_TYPE_USAGE: b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) [b2DynamicTree.h <40:2 40:6>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::child1 -> int32 [b2DynamicTree.h <46:2 46:6>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::child2 -> int32 [b2DynamicTree.h <47:2 47:6>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::height -> int32 [b2DynamicTree.h <50:2 50:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> int32 [b2DynamicTree.h <71:2 71:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2AABB [b2DynamicTree.h <71:26 71:31>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> void [b2DynamicTree.h <71:40 71:43>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> void [b2DynamicTree.h <74:2 74:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> int32 [b2DynamicTree.h <74:20 74:24>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> bool [b2DynamicTree.h <80:2 80:5>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> int32 [b2DynamicTree.h <80:17 80:21>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2AABB [b2DynamicTree.h <80:38 80:43>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 [b2DynamicTree.h <80:59 80:64>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void [b2DynamicTree.h <84:2 84:5>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void [b2DynamicTree.h <156:8 156:11>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void [b2DynamicTree.h <158:2 158:9>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> int32 [b2DynamicTree.h <84:20 84:24>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> int32 [b2DynamicTree.h <156:41 156:45>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2AABB [b2DynamicTree.h <87:8 87:13>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2AABB [b2DynamicTree.h <162:14 162:19>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> int32 [b2DynamicTree.h <87:27 87:31>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> int32 [b2DynamicTree.h <162:48 162:52>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void [b2DynamicTree.h <92:2 92:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void [b2DynamicTree.h <169:8 169:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2AABB [b2DynamicTree.h <92:32 92:37>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2AABB [b2DynamicTree.h <169:53 169:58>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const -> void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const [b2DynamicTree.h <169:28 169:32>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const -> void [b2DynamicTree.h <169:8 169:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const -> b2BroadPhase [b2DynamicTree.h <169:34 169:34>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const -> b2AABB [b2DynamicTree.h <169:53 169:58>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2DynamicTree.h <102:2 102:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2DynamicTree.h <204:8 204:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2DynamicTree.h <209:2 209:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2DynamicTree.h <102:34 102:47>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2DynamicTree.h <204:55 204:68>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2DynamicTree.h <259:4 259:17>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> void [b2DynamicTree.h <105:2 105:5>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetHeight() const -> int32 [b2DynamicTree.h <109:2 109:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 [b2DynamicTree.h <113:2 113:6>]
REFERENCE_TYPE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> float32 [b2DynamicTree.h <116:2 116:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> void [b2DynamicTree.h <119:2 119:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> void [b2DynamicTree.h <124:2 124:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2DynamicTree.h <124:25 124:30>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 [b2DynamicTree.h <128:2 128:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> void [b2DynamicTree.h <129:2 129:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> int32 [b2DynamicTree.h <129:16 129:20>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> void [b2DynamicTree.h <131:2 131:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.h <131:18 131:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> void [b2DynamicTree.h <132:2 132:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 [b2DynamicTree.h <132:18 132:22>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.h <134:2 134:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.h <134:16 134:20>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight() const -> int32 [b2DynamicTree.h <136:2 136:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 [b2DynamicTree.h <137:2 137:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 [b2DynamicTree.h <137:22 137:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.h <139:2 139:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 [b2DynamicTree.h <139:25 139:29>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.h <140:2 140:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 [b2DynamicTree.h <140:23 140:27>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_root -> int32 [b2DynamicTree.h <142:2 142:6>]
REFERENCE_TYPE_USAGE: b2TreeNode * b2DynamicTree::m_nodes -> b2TreeNode [b2DynamicTree.h <144:2 144:11>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_nodeCount -> int32 [b2DynamicTree.h <145:2 145:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_nodeCapacity -> int32 [b2DynamicTree.h <146:2 146:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_freeList -> int32 [b2DynamicTree.h <148:2 148:6>]
REFERENCE_TYPE_USAGE: uint32 b2DynamicTree::m_path -> uint32 [b2DynamicTree.h <151:2 151:7>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_insertionCount -> int32 [b2DynamicTree.h <153:2 153:6>]
REFERENCE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.h <158:37 158:50>]
REFERENCE_CALL: void * b2DynamicTree::GetUserData(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.h <158:2 158:9>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> unsigned int [b2DynamicTree.h <158:2 158:9>]
REFERENCE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void * b2TreeNode::userData [b2DynamicTree.h <159:26 159:33>]
REFERENCE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <159:9 159:15>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> void [b2DynamicTree.h <164:2 164:9>]
REFERENCE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.h <164:37 164:50>]
REFERENCE_CALL: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.h <164:2 164:9>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> unsigned int [b2DynamicTree.h <164:2 164:9>]
REFERENCE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <165:26 165:29>]
REFERENCE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <165:9 165:15>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2GrowableStack<int, 256> [b2DynamicTree.h <171:2 171:16>]
REFERENCE_TYPE_USAGE: b2GrowableStack<int, 256> -> int32 [b2DynamicTree.h <171:18 171:22>]
REFERENCE_TYPE_USAGE: b2GrowableStack<int, 256> -> int32 [b2DynamicTree.h <229:18 229:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 [b2DynamicTree.h <171:18 171:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 [b2DynamicTree.h <176:3 176:7>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::b2GrowableStack() [b2DynamicTree.h <171:30 171:34>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <172:8 172:11>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <196:11 196:14>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <197:11 197:14>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2DynamicTree::m_root [b2DynamicTree.h <172:13 172:18>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2GrowableStack<int, 256>::GetCount() [b2DynamicTree.h <174:15 174:22>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int b2GrowableStack<int, 256>::Pop() [b2DynamicTree.h <176:24 176:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2TreeNode [b2DynamicTree.h <182:9 182:18>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <182:28 182:34>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2DynamicTree.h <184:7 184:19>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <184:27 184:30>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.h <186:14 186:19>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> bool [b2DynamicTree.h <188:5 188:8>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2TreeNode::child1 [b2DynamicTree.h <196:22 196:27>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2TreeNode::child2 [b2DynamicTree.h <197:22 197:27>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <206:2 206:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <207:2 207:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <208:2 208:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <213:2 213:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <214:2 214:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <224:3 224:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <249:3 249:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <250:3 250:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <276:5 276:10>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2DynamicTree.h <206:20 206:21>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2DynamicTree.h <207:20 207:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <206:20 206:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <260:13 260:14>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <260:24 260:25>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <207:20 207:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <261:13 261:14>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <261:24 261:25>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <208:16 208:16>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <224:37 224:37>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:42 251:42>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <276:39 276:39>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Vec2::LengthSquared() const [b2DynamicTree.h <209:13 209:25>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.h <209:2 209:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> unsigned int [b2DynamicTree.h <209:2 209:9>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Vec2::Normalize() [b2DynamicTree.h <210:4 210:12>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Cross(float32, const b2Vec2 &) [b2DynamicTree.h <213:13 213:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Abs(const b2Vec2 &) [b2DynamicTree.h <214:17 214:21>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <219:2 219:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <251:3 251:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <264:4 264:10>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2RayCastInput::maxFraction [b2DynamicTree.h <219:30 219:40>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2RayCastInput::maxFraction [b2DynamicTree.h <262:13 262:23>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB [b2DynamicTree.h <222:2 222:7>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2AABB::b2AABB() [b2DynamicTree.h <222:9 222:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <224:17 224:17>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <276:19 276:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2DynamicTree.h <224:31 224:31>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2DynamicTree.h <276:33 276:33>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <225:26 225:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <226:26 226:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <277:28 277:28>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <278:28 278:28>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.h <225:15 225:24>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.h <277:17 277:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <225:28 225:32>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <277:30 277:34>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::upperBound [b2DynamicTree.h <226:15 226:24>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::upperBound [b2DynamicTree.h <278:17 278:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <226:28 226:32>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <278:30 278:34>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2GrowableStack<int, 256> [b2DynamicTree.h <229:2 229:16>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 [b2DynamicTree.h <229:18 229:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 [b2DynamicTree.h <234:3 234:7>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::b2GrowableStack() [b2DynamicTree.h <229:30 229:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <230:8 230:11>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <283:10 283:13>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <284:10 284:13>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2DynamicTree::m_root [b2DynamicTree.h <230:13 230:18>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2GrowableStack<int, 256>::GetCount() [b2DynamicTree.h <232:15 232:22>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int b2GrowableStack<int, 256>::Pop() [b2DynamicTree.h <234:24 234:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2TreeNode [b2DynamicTree.h <240:9 240:18>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <240:28 240:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2DynamicTree.h <242:7 242:19>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <242:27 242:30>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <249:20 249:23>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <250:20 250:23>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::GetCenter() const [b2DynamicTree.h <249:25 249:33>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::GetExtents() const [b2DynamicTree.h <250:25 250:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float b2Abs<float>(float) [b2DynamicTree.h <251:24 251:28>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:30 251:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:50 251:54>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.h <257:13 257:18>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2RayCastInput::b2RayCastInput() [b2DynamicTree.h <259:19 259:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2DynamicTree.h <260:16 260:16>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2DynamicTree.h <261:16 261:16>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2TreeNode::child1 [b2DynamicTree.h <283:21 283:26>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2TreeNode::child2 [b2DynamicTree.h <284:21 284:26>]
REFERENCE_TYPE_USAGE: int32 b2Pair::proxyIdA -> int32 [b2BroadPhase.h <29:2 29:6>]
REFERENCE_TYPE_USAGE: int32 b2Pair::proxyIdB -> int32 [b2BroadPhase.h <30:2 30:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::CreateProxy(const b2AABB &, void *) -> int32 [b2BroadPhase.h <50:2 50:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::CreateProxy(const b2AABB &, void *) -> b2AABB [b2BroadPhase.h <50:26 50:31>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::CreateProxy(const b2AABB &, void *) -> void [b2BroadPhase.h <50:40 50:43>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::DestroyProxy(int32) -> void [b2BroadPhase.h <53:2 53:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::DestroyProxy(int32) -> int32 [b2BroadPhase.h <53:20 53:24>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> void [b2BroadPhase.h <57:2 57:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> int32 [b2BroadPhase.h <57:17 57:21>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2AABB [b2BroadPhase.h <57:38 57:43>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 [b2BroadPhase.h <57:58 57:63>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::TouchProxy(int32) -> void [b2BroadPhase.h <60:2 60:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::TouchProxy(int32) -> int32 [b2BroadPhase.h <60:18 60:22>]
REFERENCE_TYPE_USAGE: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> b2AABB [b2BroadPhase.h <63:8 63:13>]
REFERENCE_TYPE_USAGE: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> b2AABB [b2BroadPhase.h <159:14 159:19>]
REFERENCE_TYPE_USAGE: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> int32 [b2BroadPhase.h <63:27 63:31>]
REFERENCE_TYPE_USAGE: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> int32 [b2BroadPhase.h <159:47 159:51>]
REFERENCE_TYPE_USAGE: void * b2BroadPhase::GetUserData(int32) const -> void [b2BroadPhase.h <66:2 66:5>]
REFERENCE_TYPE_USAGE: void * b2BroadPhase::GetUserData(int32) const -> void [b2BroadPhase.h <147:8 147:11>]
REFERENCE_TYPE_USAGE: void * b2BroadPhase::GetUserData(int32) const -> int32 [b2BroadPhase.h <66:20 66:24>]
REFERENCE_TYPE_USAGE: void * b2BroadPhase::GetUserData(int32) const -> int32 [b2BroadPhase.h <147:40 147:44>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> bool [b2BroadPhase.h <69:2 69:5>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> bool [b2BroadPhase.h <152:8 152:11>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> int32 [b2BroadPhase.h <69:19 69:23>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> int32 [b2BroadPhase.h <69:35 69:39>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> int32 [b2BroadPhase.h <152:39 152:43>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> int32 [b2BroadPhase.h <152:55 152:59>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetProxyCount() const -> int32 [b2BroadPhase.h <72:2 72:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetProxyCount() const -> int32 [b2BroadPhase.h <164:8 164:12>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void [b2BroadPhase.h <76:2 76:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void [b2BroadPhase.h <185:1 185:4>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void [b2BroadPhase.h <218:3 218:6>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void [b2BroadPhase.h <219:3 219:6>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const -> void [b2BroadPhase.h <81:2 81:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const -> void [b2BroadPhase.h <241:8 241:11>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const -> b2AABB [b2BroadPhase.h <81:32 81:37>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const -> b2AABB [b2BroadPhase.h <241:52 241:57>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2BroadPhase.h <91:2 91:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2BroadPhase.h <247:8 247:11>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2BroadPhase.h <91:34 91:47>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2BroadPhase.h <247:54 247:67>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetTreeHeight() const -> int32 [b2BroadPhase.h <94:2 94:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetTreeHeight() const -> int32 [b2BroadPhase.h <169:8 169:12>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetTreeBalance() const -> int32 [b2BroadPhase.h <97:2 97:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetTreeBalance() const -> int32 [b2BroadPhase.h <174:8 174:12>]
REFERENCE_TYPE_USAGE: float32 b2BroadPhase::GetTreeQuality() const -> float32 [b2BroadPhase.h <100:2 100:8>]
REFERENCE_TYPE_USAGE: float32 b2BroadPhase::GetTreeQuality() const -> float32 [b2BroadPhase.h <179:8 179:14>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> void [b2BroadPhase.h <105:2 105:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> void [b2BroadPhase.h <252:8 252:11>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2BroadPhase.h <105:25 105:30>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2BroadPhase.h <252:45 252:50>]
REFERENCE_TYPE_USAGE: b2BroadPhase -> b2DynamicTree [b2BroadPhase.h <109:15 109:27>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::BufferMove(int32) -> void [b2BroadPhase.h <111:2 111:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::BufferMove(int32) -> int32 [b2BroadPhase.h <111:18 111:22>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UnBufferMove(int32) -> void [b2BroadPhase.h <112:2 112:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UnBufferMove(int32) -> int32 [b2BroadPhase.h <112:20 112:24>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::QueryCallback(int32) -> bool [b2BroadPhase.h <114:2 114:5>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::QueryCallback(int32) -> int32 [b2BroadPhase.h <114:21 114:25>]
REFERENCE_TYPE_USAGE: b2DynamicTree b2BroadPhase::m_tree -> b2DynamicTree [b2BroadPhase.h <116:2 116:14>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_proxyCount -> int32 [b2BroadPhase.h <118:2 118:6>]
REFERENCE_TYPE_USAGE: int32 * b2BroadPhase::m_moveBuffer -> int32 [b2BroadPhase.h <120:2 120:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_moveCapacity -> int32 [b2BroadPhase.h <121:2 121:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_moveCount -> int32 [b2BroadPhase.h <122:2 122:6>]
REFERENCE_TYPE_USAGE: b2Pair * b2BroadPhase::m_pairBuffer -> b2Pair [b2BroadPhase.h <124:2 124:7>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_pairCapacity -> int32 [b2BroadPhase.h <125:2 125:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_pairCount -> int32 [b2BroadPhase.h <126:2 126:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_queryProxyId -> int32 [b2BroadPhase.h <128:2 128:6>]
REFERENCE_TYPE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> bool [b2BroadPhase.h <132:8 132:11>]
REFERENCE_TYPE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> b2Pair [b2BroadPhase.h <132:34 132:39>]
REFERENCE_TYPE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> b2Pair [b2BroadPhase.h <132:55 132:60>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <134:12 134:19>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <134:29 134:36>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <139:12 139:19>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <139:30 139:37>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdB [b2BroadPhase.h <141:16 141:23>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdB [b2BroadPhase.h <141:33 141:40>]
REFERENCE_CALL: void * b2BroadPhase::GetUserData(int32) const -> void * b2DynamicTree::GetUserData(int32) const [b2BroadPhase.h <149:16 149:26>]
REFERENCE_USAGE: void * b2BroadPhase::GetUserData(int32) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <149:9 149:14>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> b2AABB [b2BroadPhase.h <154:8 154:13>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> b2AABB [b2BroadPhase.h <155:8 155:13>]
REFERENCE_CALL: bool b2BroadPhase::TestOverlap(int32, int32) const -> const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2BroadPhase.h <154:31 154:40>]
REFERENCE_CALL: bool b2BroadPhase::TestOverlap(int32, int32) const -> const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2BroadPhase.h <155:31 155:40>]
REFERENCE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <154:24 154:29>]
REFERENCE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <155:24 155:29>]
REFERENCE_CALL: bool b2BroadPhase::TestOverlap(int32, int32) const -> bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2BroadPhase.h <156:9 156:21>]
REFERENCE_CALL: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2BroadPhase.h <161:16 161:25>]
REFERENCE_USAGE: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <161:9 161:14>]
REFERENCE_USAGE: int32 b2BroadPhase::GetProxyCount() const -> int32 b2BroadPhase::m_proxyCount [b2BroadPhase.h <166:9 166:20>]
REFERENCE_CALL: int32 b2BroadPhase::GetTreeHeight() const -> int32 b2DynamicTree::GetHeight() const [b2BroadPhase.h <171:16 171:24>]
REFERENCE_USAGE: int32 b2BroadPhase::GetTreeHeight() const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <171:9 171:14>]
REFERENCE_CALL: int32 b2BroadPhase::GetTreeBalance() const -> int32 b2DynamicTree::GetMaxBalance() const [b2BroadPhase.h <176:16 176:28>]
REFERENCE_USAGE: int32 b2BroadPhase::GetTreeBalance() const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <176:9 176:14>]
REFERENCE_CALL: float32 b2BroadPhase::GetTreeQuality() const -> float32 b2DynamicTree::GetAreaRatio() const [b2BroadPhase.h <181:16 181:27>]
REFERENCE_USAGE: float32 b2BroadPhase::GetTreeQuality() const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <181:9 181:14>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_pairCount [b2BroadPhase.h <188:2 188:12>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_pairCount [b2BroadPhase.h <211:41 211:51>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_pairCount [b2BroadPhase.h <215:13 215:23>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_pairCount [b2BroadPhase.h <225:14 225:24>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 [b2BroadPhase.h <191:7 191:11>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 [b2BroadPhase.h <214:2 214:6>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_moveCount [b2BroadPhase.h <191:24 191:34>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_moveCount [b2BroadPhase.h <208:2 208:12>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_queryProxyId [b2BroadPhase.h <193:3 193:16>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_queryProxyId [b2BroadPhase.h <194:7 194:20>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_queryProxyId [b2BroadPhase.h <201:45 201:58>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 * b2BroadPhase::m_moveBuffer [b2BroadPhase.h <193:20 193:31>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2BroadPhase::anonymous enum (b2BroadPhase.h<40:2>)::e_nullProxy [b2BroadPhase.h <194:25 194:35>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2AABB [b2BroadPhase.h <201:9 201:14>]
REFERENCE_CALL: void b2BroadPhase::UpdatePairs<typename T>(T *) -> const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2BroadPhase.h <201:34 201:43>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <201:27 201:32>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <204:3 204:8>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <218:21 218:26>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <219:21 219:26>]
REFERENCE_CALL: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const [b2BroadPhase.h <204:10 204:14>]
REFERENCE_CALL: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void std::sort<b2Pair *, bool(const b2Pair &, const b2Pair &) *>(b2Pair * const, b2Pair * const, bool(const b2Pair &, const b2Pair &) *) [b2BroadPhase.h <211:7 211:10>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair * b2BroadPhase::m_pairBuffer [b2BroadPhase.h <211:12 211:23>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair * b2BroadPhase::m_pairBuffer [b2BroadPhase.h <211:26 211:37>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair * b2BroadPhase::m_pairBuffer [b2BroadPhase.h <217:25 217:36>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair * b2BroadPhase::m_pairBuffer [b2BroadPhase.h <227:19 227:30>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> bool b2PairLessThan(const b2Pair &, const b2Pair &) [b2BroadPhase.h <211:54 211:67>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair [b2BroadPhase.h <217:3 217:8>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair [b2BroadPhase.h <227:4 227:9>]
REFERENCE_CALL: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void * b2DynamicTree::GetUserData(int32) const [b2BroadPhase.h <218:28 218:38>]
REFERENCE_CALL: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void * b2DynamicTree::GetUserData(int32) const [b2BroadPhase.h <219:28 219:38>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <218:53 218:60>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <228:14 228:21>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <228:39 228:46>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdB [b2BroadPhase.h <219:53 219:60>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdB [b2BroadPhase.h <228:57 228:64>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdB [b2BroadPhase.h <228:82 228:89>]
REFERENCE_USAGE: void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <243:2 243:7>]
REFERENCE_USAGE: void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <249:2 249:7>]
REFERENCE_CALL: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> void b2DynamicTree::ShiftOrigin(const b2Vec2 &) [b2BroadPhase.h <254:9 254:19>]
REFERENCE_USAGE: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <254:2 254:7>]
REFERENCE_TYPE_USAGE: void b2ContactManager::AddPair(void *, void *) -> void [b2ContactManager.h <36:2 36:5>]
REFERENCE_TYPE_USAGE: void b2ContactManager::AddPair(void *, void *) -> void [b2ContactManager.h <36:15 36:18>]
REFERENCE_TYPE_USAGE: void b2ContactManager::AddPair(void *, void *) -> void [b2ContactManager.h <36:37 36:40>]
REFERENCE_TYPE_USAGE: void b2ContactManager::FindNewContacts() -> void [b2ContactManager.h <38:2 38:5>]
REFERENCE_TYPE_USAGE: void b2ContactManager::Destroy(b2Contact *) -> void [b2ContactManager.h <40:2 40:5>]
REFERENCE_TYPE_USAGE: void b2ContactManager::Destroy(b2Contact *) -> b2Contact [b2ContactManager.h <40:15 40:23>]
REFERENCE_TYPE_USAGE: void b2ContactManager::Collide() -> void [b2ContactManager.h <42:2 42:5>]
REFERENCE_TYPE_USAGE: b2BroadPhase b2ContactManager::m_broadPhase -> b2BroadPhase [b2ContactManager.h <44:2 44:13>]
REFERENCE_TYPE_USAGE: b2Contact * b2ContactManager::m_contactList -> b2Contact [b2ContactManager.h <45:2 45:10>]
REFERENCE_TYPE_USAGE: int32 b2ContactManager::m_contactCount -> int32 [b2ContactManager.h <46:2 46:6>]
REFERENCE_TYPE_USAGE: b2ContactFilter * b2ContactManager::m_contactFilter -> b2ContactFilter [b2ContactManager.h <47:2 47:16>]
REFERENCE_TYPE_USAGE: b2ContactListener * b2ContactManager::m_contactListener -> b2ContactListener [b2ContactManager.h <48:2 48:18>]
REFERENCE_TYPE_USAGE: b2BlockAllocator * b2ContactManager::m_allocator -> b2BlockAllocator [b2ContactManager.h <49:2 49:17>]
REFERENCE_TYPE_USAGE: void b2DestructionListener::SayGoodbye(b2Joint *) -> void [b2WorldCallbacks.h <43:10 43:13>]
REFERENCE_TYPE_USAGE: void b2DestructionListener::SayGoodbye(b2Joint *) -> b2Joint [b2WorldCallbacks.h <43:26 43:32>]
REFERENCE_TYPE_USAGE: void b2DestructionListener::SayGoodbye(b2Fixture *) -> void [b2WorldCallbacks.h <47:10 47:13>]
REFERENCE_TYPE_USAGE: void b2DestructionListener::SayGoodbye(b2Fixture *) -> b2Fixture [b2WorldCallbacks.h <47:26 47:34>]
REFERENCE_TYPE_USAGE: bool b2ContactFilter::ShouldCollide(b2Fixture *, b2Fixture *) -> bool [b2WorldCallbacks.h <59:10 59:13>]
REFERENCE_TYPE_USAGE: bool b2ContactFilter::ShouldCollide(b2Fixture *, b2Fixture *) -> b2Fixture [b2WorldCallbacks.h <59:29 59:37>]
REFERENCE_TYPE_USAGE: bool b2ContactFilter::ShouldCollide(b2Fixture *, b2Fixture *) -> b2Fixture [b2WorldCallbacks.h <59:50 59:58>]
REFERENCE_TYPE_USAGE: float32 [] b2ContactImpulse::normalImpulses -> float32 [b2WorldCallbacks.h <67:2 67:8>]
REFERENCE_TYPE_USAGE: float32 [] b2ContactImpulse::tangentImpulses -> float32 [b2WorldCallbacks.h <68:2 68:8>]
REFERENCE_TYPE_USAGE: int32 b2ContactImpulse::count -> int32 [b2WorldCallbacks.h <69:2 69:6>]
REFERENCE_TYPE_USAGE: void b2ContactListener::BeginContact(b2Contact *) -> void [b2WorldCallbacks.h <87:10 87:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::BeginContact(b2Contact *) -> void [b2WorldCallbacks.h <87:50 87:60>]
REFERENCE_TYPE_USAGE: void b2ContactListener::BeginContact(b2Contact *) -> b2Contact [b2WorldCallbacks.h <87:28 87:36>]
REFERENCE_TYPE_USAGE: void b2ContactListener::EndContact(b2Contact *) -> void [b2WorldCallbacks.h <90:10 90:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::EndContact(b2Contact *) -> void [b2WorldCallbacks.h <90:48 90:58>]
REFERENCE_TYPE_USAGE: void b2ContactListener::EndContact(b2Contact *) -> b2Contact [b2WorldCallbacks.h <90:26 90:34>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) -> void [b2WorldCallbacks.h <102:10 102:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) -> void [b2WorldCallbacks.h <104:3 104:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) -> void [b2WorldCallbacks.h <105:3 105:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) -> b2Contact [b2WorldCallbacks.h <102:24 102:32>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) -> b2Manifold [b2WorldCallbacks.h <102:50 102:59>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) -> void [b2WorldCallbacks.h <114:10 114:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) -> void [b2WorldCallbacks.h <116:3 116:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) -> void [b2WorldCallbacks.h <117:3 117:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) -> b2Contact [b2WorldCallbacks.h <114:25 114:33>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) -> b2ContactImpulse [b2WorldCallbacks.h <114:51 114:66>]
REFERENCE_TYPE_USAGE: bool b2QueryCallback::ReportFixture(b2Fixture *) -> bool [b2WorldCallbacks.h <130:10 130:13>]
REFERENCE_TYPE_USAGE: bool b2QueryCallback::ReportFixture(b2Fixture *) -> b2Fixture [b2WorldCallbacks.h <130:29 130:37>]
REFERENCE_TYPE_USAGE: float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) -> float32 [b2WorldCallbacks.h <151:10 151:16>]
REFERENCE_TYPE_USAGE: float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) -> float32 [b2WorldCallbacks.h <152:32 152:38>]
REFERENCE_TYPE_USAGE: float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) -> b2Fixture [b2WorldCallbacks.h <151:33 151:41>]
REFERENCE_TYPE_USAGE: float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) -> b2Vec2 [b2WorldCallbacks.h <151:59 151:64>]
REFERENCE_TYPE_USAGE: float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) -> b2Vec2 [b2WorldCallbacks.h <152:16 152:21>]
REFERENCE_TYPE_USAGE: float32 b2Profile::step -> float32 [b2TimeStep.h <27:2 27:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::collide -> float32 [b2TimeStep.h <28:2 28:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::solve -> float32 [b2TimeStep.h <29:2 29:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::solveInit -> float32 [b2TimeStep.h <30:2 30:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::solveVelocity -> float32 [b2TimeStep.h <31:2 31:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::solvePosition -> float32 [b2TimeStep.h <32:2 32:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::broadphase -> float32 [b2TimeStep.h <33:2 33:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::solveTOI -> float32 [b2TimeStep.h <34:2 34:8>]
REFERENCE_TYPE_USAGE: float32 b2TimeStep::dt -> float32 [b2TimeStep.h <40:2 40:8>]
REFERENCE_TYPE_USAGE: float32 b2TimeStep::inv_dt -> float32 [b2TimeStep.h <41:2 41:8>]
REFERENCE_TYPE_USAGE: float32 b2TimeStep::dtRatio -> float32 [b2TimeStep.h <42:2 42:8>]
REFERENCE_TYPE_USAGE: int32 b2TimeStep::velocityIterations -> int32 [b2TimeStep.h <43:2 43:6>]
REFERENCE_TYPE_USAGE: int32 b2TimeStep::positionIterations -> int32 [b2TimeStep.h <44:2 44:6>]
REFERENCE_TYPE_USAGE: bool b2TimeStep::warmStarting -> bool [b2TimeStep.h <45:2 45:5>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Position::c -> b2Vec2 [b2TimeStep.h <51:2 51:7>]
REFERENCE_TYPE_USAGE: float32 b2Position::a -> float32 [b2TimeStep.h <52:2 52:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Velocity::v -> b2Vec2 [b2TimeStep.h <58:2 58:7>]
REFERENCE_TYPE_USAGE: float32 b2Velocity::w -> float32 [b2TimeStep.h <59:2 59:8>]
REFERENCE_TYPE_USAGE: b2TimeStep b2SolverData::step -> b2TimeStep [b2TimeStep.h <65:2 65:11>]
REFERENCE_TYPE_USAGE: b2Position * b2SolverData::positions -> b2Position [b2TimeStep.h <66:2 66:11>]
REFERENCE_TYPE_USAGE: b2Velocity * b2SolverData::velocities -> b2Velocity [b2TimeStep.h <67:2 67:11>]
REFERENCE_TYPE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2Vec2 [b2World.h <46:16 46:21>]
REFERENCE_TYPE_USAGE: void b2World::SetDestructionListener(b2DestructionListener *) -> void [b2World.h <53:2 53:5>]
REFERENCE_TYPE_USAGE: void b2World::SetDestructionListener(b2DestructionListener *) -> b2DestructionListener [b2World.h <53:30 53:50>]
REFERENCE_TYPE_USAGE: void b2World::SetContactFilter(b2ContactFilter *) -> void [b2World.h <58:2 58:5>]
REFERENCE_TYPE_USAGE: void b2World::SetContactFilter(b2ContactFilter *) -> b2ContactFilter [b2World.h <58:24 58:38>]
REFERENCE_TYPE_USAGE: void b2World::SetContactListener(b2ContactListener *) -> void [b2World.h <62:2 62:5>]
REFERENCE_TYPE_USAGE: void b2World::SetContactListener(b2ContactListener *) -> b2ContactListener [b2World.h <62:26 62:42>]
REFERENCE_TYPE_USAGE: void b2World::SetDebugDraw(b2Draw *) -> void [b2World.h <67:2 67:5>]
REFERENCE_TYPE_USAGE: void b2World::SetDebugDraw(b2Draw *) -> b2Draw [b2World.h <67:20 67:25>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body [b2World.h <72:2 72:7>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2BodyDef [b2World.h <72:27 72:35>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> void [b2World.h <78:2 78:5>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body [b2World.h <78:19 78:24>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint [b2World.h <83:2 83:8>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointDef [b2World.h <83:29 83:38>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> void [b2World.h <87:2 87:5>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint [b2World.h <87:20 87:26>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> void [b2World.h <94:2 94:5>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> float32 [b2World.h <94:13 94:19>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> int32 [b2World.h <95:5 95:9>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> int32 [b2World.h <96:5 96:9>]
REFERENCE_TYPE_USAGE: void b2World::ClearForces() -> void [b2World.h <105:2 105:5>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> void [b2World.h <108:2 108:5>]
REFERENCE_TYPE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> void [b2World.h <114:2 114:5>]
REFERENCE_TYPE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2QueryCallback [b2World.h <114:17 114:31>]
REFERENCE_TYPE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2AABB [b2World.h <114:50 114:55>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> void [b2World.h <122:2 122:5>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2RayCastCallback [b2World.h <122:15 122:31>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2Vec2 [b2World.h <122:50 122:55>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2Vec2 [b2World.h <122:72 122:77>]
REFERENCE_TYPE_USAGE: b2Body * b2World::GetBodyList() -> b2Body [b2World.h <127:2 127:7>]
REFERENCE_TYPE_USAGE: b2Body * b2World::GetBodyList() -> b2Body [b2World.h <266:8 266:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2World::GetBodyList() const -> b2Body [b2World.h <128:8 128:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2World::GetBodyList() const -> b2Body [b2World.h <271:14 271:19>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::GetJointList() -> b2Joint [b2World.h <133:2 133:8>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::GetJointList() -> b2Joint [b2World.h <276:8 276:14>]
REFERENCE_TYPE_USAGE: const b2Joint * b2World::GetJointList() const -> b2Joint [b2World.h <134:8 134:14>]
REFERENCE_TYPE_USAGE: const b2Joint * b2World::GetJointList() const -> b2Joint [b2World.h <281:14 281:20>]
REFERENCE_TYPE_USAGE: b2Contact * b2World::GetContactList() -> b2Contact [b2World.h <141:2 141:10>]
REFERENCE_TYPE_USAGE: b2Contact * b2World::GetContactList() -> b2Contact [b2World.h <286:8 286:16>]
REFERENCE_TYPE_USAGE: const b2Contact * b2World::GetContactList() const -> b2Contact [b2World.h <142:8 142:16>]
REFERENCE_TYPE_USAGE: const b2Contact * b2World::GetContactList() const -> b2Contact [b2World.h <291:14 291:22>]
REFERENCE_TYPE_USAGE: void b2World::SetAllowSleeping(bool) -> void [b2World.h <145:2 145:5>]
REFERENCE_TYPE_USAGE: void b2World::SetAllowSleeping(bool) -> bool [b2World.h <145:24 145:27>]
REFERENCE_TYPE_USAGE: bool b2World::GetAllowSleeping() const -> bool [b2World.h <146:2 146:5>]
REFERENCE_USAGE: bool b2World::GetAllowSleeping() const -> bool b2World::m_allowSleep [b2World.h <146:41 146:52>]
REFERENCE_TYPE_USAGE: void b2World::SetWarmStarting(bool) -> void [b2World.h <149:2 149:5>]
REFERENCE_TYPE_USAGE: void b2World::SetWarmStarting(bool) -> bool [b2World.h <149:23 149:26>]
REFERENCE_USAGE: void b2World::SetWarmStarting(bool) -> bool b2World::m_warmStarting [b2World.h <149:36 149:49>]
REFERENCE_TYPE_USAGE: bool b2World::GetWarmStarting() const -> bool [b2World.h <150:2 150:5>]
REFERENCE_USAGE: bool b2World::GetWarmStarting() const -> bool b2World::m_warmStarting [b2World.h <150:40 150:53>]
REFERENCE_TYPE_USAGE: void b2World::SetContinuousPhysics(bool) -> void [b2World.h <153:2 153:5>]
REFERENCE_TYPE_USAGE: void b2World::SetContinuousPhysics(bool) -> bool [b2World.h <153:28 153:31>]
REFERENCE_USAGE: void b2World::SetContinuousPhysics(bool) -> bool b2World::m_continuousPhysics [b2World.h <153:41 153:59>]
REFERENCE_TYPE_USAGE: bool b2World::GetContinuousPhysics() const -> bool [b2World.h <154:2 154:5>]
REFERENCE_USAGE: bool b2World::GetContinuousPhysics() const -> bool b2World::m_continuousPhysics [b2World.h <154:45 154:63>]
REFERENCE_TYPE_USAGE: void b2World::SetSubStepping(bool) -> void [b2World.h <157:2 157:5>]
REFERENCE_TYPE_USAGE: void b2World::SetSubStepping(bool) -> bool [b2World.h <157:22 157:25>]
REFERENCE_USAGE: void b2World::SetSubStepping(bool) -> bool b2World::m_subStepping [b2World.h <157:35 157:47>]
REFERENCE_TYPE_USAGE: bool b2World::GetSubStepping() const -> bool [b2World.h <158:2 158:5>]
REFERENCE_USAGE: bool b2World::GetSubStepping() const -> bool b2World::m_subStepping [b2World.h <158:39 158:51>]
REFERENCE_TYPE_USAGE: int32 b2World::GetProxyCount() const -> int32 [b2World.h <161:2 161:6>]
REFERENCE_TYPE_USAGE: int32 b2World::GetBodyCount() const -> int32 [b2World.h <164:2 164:6>]
REFERENCE_TYPE_USAGE: int32 b2World::GetBodyCount() const -> int32 [b2World.h <296:8 296:12>]
REFERENCE_TYPE_USAGE: int32 b2World::GetJointCount() const -> int32 [b2World.h <167:2 167:6>]
REFERENCE_TYPE_USAGE: int32 b2World::GetJointCount() const -> int32 [b2World.h <301:8 301:12>]
REFERENCE_TYPE_USAGE: int32 b2World::GetContactCount() const -> int32 [b2World.h <170:2 170:6>]
REFERENCE_TYPE_USAGE: int32 b2World::GetContactCount() const -> int32 [b2World.h <306:8 306:12>]
REFERENCE_TYPE_USAGE: int32 b2World::GetTreeHeight() const -> int32 [b2World.h <173:2 173:6>]
REFERENCE_TYPE_USAGE: int32 b2World::GetTreeBalance() const -> int32 [b2World.h <176:2 176:6>]
REFERENCE_TYPE_USAGE: float32 b2World::GetTreeQuality() const -> float32 [b2World.h <180:2 180:8>]
REFERENCE_TYPE_USAGE: void b2World::SetGravity(const b2Vec2 &) -> void [b2World.h <183:2 183:5>]
REFERENCE_TYPE_USAGE: void b2World::SetGravity(const b2Vec2 &) -> void [b2World.h <311:8 311:11>]
REFERENCE_TYPE_USAGE: void b2World::SetGravity(const b2Vec2 &) -> b2Vec2 [b2World.h <183:24 183:29>]
REFERENCE_TYPE_USAGE: void b2World::SetGravity(const b2Vec2 &) -> b2Vec2 [b2World.h <311:39 311:44>]
REFERENCE_TYPE_USAGE: b2Vec2 b2World::GetGravity() const -> b2Vec2 [b2World.h <186:2 186:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2World::GetGravity() const -> b2Vec2 [b2World.h <316:8 316:13>]
REFERENCE_TYPE_USAGE: bool b2World::IsLocked() const -> bool [b2World.h <189:2 189:5>]
REFERENCE_TYPE_USAGE: bool b2World::IsLocked() const -> bool [b2World.h <321:8 321:11>]
REFERENCE_TYPE_USAGE: void b2World::SetAutoClearForces(bool) -> void [b2World.h <192:2 192:5>]
REFERENCE_TYPE_USAGE: void b2World::SetAutoClearForces(bool) -> void [b2World.h <326:8 326:11>]
REFERENCE_TYPE_USAGE: void b2World::SetAutoClearForces(bool) -> bool [b2World.h <192:26 192:29>]
REFERENCE_TYPE_USAGE: void b2World::SetAutoClearForces(bool) -> bool [b2World.h <326:41 326:44>]
REFERENCE_TYPE_USAGE: bool b2World::GetAutoClearForces() const -> bool [b2World.h <195:2 195:5>]
REFERENCE_TYPE_USAGE: bool b2World::GetAutoClearForces() const -> bool [b2World.h <339:8 339:11>]
REFERENCE_TYPE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> void [b2World.h <200:2 200:5>]
REFERENCE_TYPE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2World.h <200:25 200:30>]
REFERENCE_TYPE_USAGE: const b2ContactManager & b2World::GetContactManager() const -> b2ContactManager [b2World.h <203:8 203:23>]
REFERENCE_TYPE_USAGE: const b2ContactManager & b2World::GetContactManager() const -> b2ContactManager [b2World.h <344:14 344:29>]
REFERENCE_TYPE_USAGE: const b2Profile & b2World::GetProfile() const -> b2Profile [b2World.h <206:8 206:16>]
REFERENCE_TYPE_USAGE: const b2Profile & b2World::GetProfile() const -> b2Profile [b2World.h <349:14 349:22>]
REFERENCE_TYPE_USAGE: void b2World::Dump() -> void [b2World.h <210:2 210:5>]
REFERENCE_TYPE_USAGE: b2World -> b2Body [b2World.h <222:15 222:20>]
REFERENCE_TYPE_USAGE: b2World -> b2Fixture [b2World.h <223:15 223:23>]
REFERENCE_TYPE_USAGE: b2World -> b2ContactManager [b2World.h <224:15 224:30>]
REFERENCE_TYPE_USAGE: b2World -> b2Controller [b2World.h <225:15 225:26>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> void [b2World.h <227:2 227:5>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2TimeStep [b2World.h <227:19 227:28>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> void [b2World.h <228:2 228:5>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2TimeStep [b2World.h <228:22 228:31>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> void [b2World.h <230:2 230:5>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Joint [b2World.h <230:17 230:23>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void [b2World.h <231:2 231:5>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Fixture [b2World.h <231:17 231:25>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Transform [b2World.h <231:41 231:51>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Color [b2World.h <231:64 231:70>]
REFERENCE_TYPE_USAGE: b2BlockAllocator b2World::m_blockAllocator -> b2BlockAllocator [b2World.h <233:2 233:17>]
REFERENCE_TYPE_USAGE: b2StackAllocator b2World::m_stackAllocator -> b2StackAllocator [b2World.h <234:2 234:17>]
REFERENCE_TYPE_USAGE: int32 b2World::m_flags -> int32 [b2World.h <236:2 236:6>]
REFERENCE_TYPE_USAGE: b2ContactManager b2World::m_contactManager -> b2ContactManager [b2World.h <238:2 238:17>]
REFERENCE_TYPE_USAGE: b2Body * b2World::m_bodyList -> b2Body [b2World.h <240:2 240:7>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::m_jointList -> b2Joint [b2World.h <241:2 241:8>]
REFERENCE_TYPE_USAGE: int32 b2World::m_bodyCount -> int32 [b2World.h <243:2 243:6>]
REFERENCE_TYPE_USAGE: int32 b2World::m_jointCount -> int32 [b2World.h <244:2 244:6>]
REFERENCE_TYPE_USAGE: b2Vec2 b2World::m_gravity -> b2Vec2 [b2World.h <246:2 246:7>]
REFERENCE_TYPE_USAGE: bool b2World::m_allowSleep -> bool [b2World.h <247:2 247:5>]
REFERENCE_TYPE_USAGE: b2DestructionListener * b2World::m_destructionListener -> b2DestructionListener [b2World.h <249:2 249:22>]
REFERENCE_TYPE_USAGE: b2Draw * b2World::g_debugDraw -> b2Draw [b2World.h <250:2 250:7>]
REFERENCE_TYPE_USAGE: float32 b2World::m_inv_dt0 -> float32 [b2World.h <254:2 254:8>]
REFERENCE_TYPE_USAGE: bool b2World::m_warmStarting -> bool [b2World.h <257:2 257:5>]
REFERENCE_TYPE_USAGE: bool b2World::m_continuousPhysics -> bool [b2World.h <258:2 258:5>]
REFERENCE_TYPE_USAGE: bool b2World::m_subStepping -> bool [b2World.h <259:2 259:5>]
REFERENCE_TYPE_USAGE: bool b2World::m_stepComplete -> bool [b2World.h <261:2 261:5>]
REFERENCE_TYPE_USAGE: b2Profile b2World::m_profile -> b2Profile [b2World.h <263:2 263:10>]
REFERENCE_USAGE: b2Body * b2World::GetBodyList() -> b2Body * b2World::m_bodyList [b2World.h <268:9 268:18>]
REFERENCE_USAGE: const b2Body * b2World::GetBodyList() const -> b2Body * b2World::m_bodyList [b2World.h <273:9 273:18>]
REFERENCE_USAGE: b2Joint * b2World::GetJointList() -> b2Joint * b2World::m_jointList [b2World.h <278:9 278:19>]
REFERENCE_USAGE: const b2Joint * b2World::GetJointList() const -> b2Joint * b2World::m_jointList [b2World.h <283:9 283:19>]
REFERENCE_USAGE: b2Contact * b2World::GetContactList() -> b2Contact * b2ContactManager::m_contactList [b2World.h <288:26 288:38>]
REFERENCE_USAGE: b2Contact * b2World::GetContactList() -> b2ContactManager b2World::m_contactManager [b2World.h <288:9 288:24>]
REFERENCE_USAGE: const b2Contact * b2World::GetContactList() const -> b2Contact * b2ContactManager::m_contactList [b2World.h <293:26 293:38>]
REFERENCE_USAGE: const b2Contact * b2World::GetContactList() const -> b2ContactManager b2World::m_contactManager [b2World.h <293:9 293:24>]
REFERENCE_USAGE: int32 b2World::GetBodyCount() const -> int32 b2World::m_bodyCount [b2World.h <298:9 298:19>]
REFERENCE_USAGE: int32 b2World::GetJointCount() const -> int32 b2World::m_jointCount [b2World.h <303:9 303:20>]
REFERENCE_USAGE: int32 b2World::GetContactCount() const -> int32 b2ContactManager::m_contactCount [b2World.h <308:26 308:39>]
REFERENCE_USAGE: int32 b2World::GetContactCount() const -> b2ContactManager b2World::m_contactManager [b2World.h <308:9 308:24>]
REFERENCE_CALL: void b2World::SetGravity(const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2World.h <313:12 313:12>]
REFERENCE_USAGE: void b2World::SetGravity(const b2Vec2 &) -> b2Vec2 b2World::m_gravity [b2World.h <313:2 313:10>]
REFERENCE_CALL: b2Vec2 b2World::GetGravity() const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2World.h <318:9 318:17>]
REFERENCE_USAGE: b2Vec2 b2World::GetGravity() const -> b2Vec2 b2World::m_gravity [b2World.h <318:9 318:17>]
REFERENCE_USAGE: bool b2World::IsLocked() const -> int32 b2World::m_flags [b2World.h <323:10 323:16>]
REFERENCE_USAGE: bool b2World::IsLocked() const -> b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.h <323:20 323:27>]
REFERENCE_USAGE: bool b2World::IsLocked() const -> b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.h <323:33 323:40>]
REFERENCE_USAGE: void b2World::SetAutoClearForces(bool) -> int32 b2World::m_flags [b2World.h <330:3 330:9>]
REFERENCE_USAGE: void b2World::SetAutoClearForces(bool) -> int32 b2World::m_flags [b2World.h <334:3 334:9>]
REFERENCE_USAGE: void b2World::SetAutoClearForces(bool) -> b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.h <330:14 330:26>]
REFERENCE_USAGE: void b2World::SetAutoClearForces(bool) -> b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.h <334:15 334:27>]
REFERENCE_USAGE: bool b2World::GetAutoClearForces() const -> int32 b2World::m_flags [b2World.h <341:10 341:16>]
REFERENCE_USAGE: bool b2World::GetAutoClearForces() const -> b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.h <341:20 341:32>]
REFERENCE_USAGE: bool b2World::GetAutoClearForces() const -> b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.h <341:38 341:50>]
REFERENCE_USAGE: const b2ContactManager & b2World::GetContactManager() const -> b2ContactManager b2World::m_contactManager [b2World.h <346:9 346:24>]
REFERENCE_USAGE: const b2Profile & b2World::GetProfile() const -> b2Profile b2World::m_profile [b2World.h <351:9 351:17>]
REFERENCE_TYPE_USAGE: float32 b2MixFriction(float32, float32) -> float32 [b2Contact.h <37:8 37:14>]
REFERENCE_TYPE_USAGE: float32 b2MixFriction(float32, float32) -> float32 [b2Contact.h <37:30 37:36>]
REFERENCE_TYPE_USAGE: float32 b2MixFriction(float32, float32) -> float32 [b2Contact.h <37:49 37:55>]
REFERENCE_CALL: float32 b2MixFriction(float32, float32) -> float sqrtf(float) [b2Contact.h <39:9 39:14>]
REFERENCE_TYPE_USAGE: float32 b2MixRestitution(float32, float32) -> float32 [b2Contact.h <44:8 44:14>]
REFERENCE_TYPE_USAGE: float32 b2MixRestitution(float32, float32) -> float32 [b2Contact.h <44:33 44:39>]
REFERENCE_TYPE_USAGE: float32 b2MixRestitution(float32, float32) -> float32 [b2Contact.h <44:55 44:61>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> b2Contact [b2Contact.h <49:9 49:17>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> b2Fixture [b2Contact.h <49:40 49:48>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> b2Fixture [b2Contact.h <50:11 50:19>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> int32 [b2Contact.h <49:61 49:65>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> int32 [b2Contact.h <50:32 50:36>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> b2BlockAllocator [b2Contact.h <51:11 51:26>]
REFERENCE_TYPE_USAGE: b2ContactDestroyFcn -> void [b2Contact.h <52:9 52:12>]
REFERENCE_TYPE_USAGE: b2ContactDestroyFcn -> b2Contact [b2Contact.h <52:34 52:42>]
REFERENCE_TYPE_USAGE: b2ContactDestroyFcn -> b2BlockAllocator [b2Contact.h <52:54 52:69>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn * b2ContactRegister::createFcn -> b2ContactCreateFcn [b2Contact.h <56:2 56:19>]
REFERENCE_TYPE_USAGE: b2ContactDestroyFcn * b2ContactRegister::destroyFcn -> b2ContactDestroyFcn [b2Contact.h <57:2 57:20>]
REFERENCE_TYPE_USAGE: bool b2ContactRegister::primary -> bool [b2Contact.h <58:2 58:5>]
REFERENCE_TYPE_USAGE: b2Body * b2ContactEdge::other -> b2Body [b2Contact.h <68:2 68:7>]
REFERENCE_TYPE_USAGE: b2Contact * b2ContactEdge::contact -> b2Contact [b2Contact.h <69:2 69:10>]
REFERENCE_TYPE_USAGE: b2ContactEdge * b2ContactEdge::prev -> b2ContactEdge [b2Contact.h <70:2 70:14>]
REFERENCE_TYPE_USAGE: b2ContactEdge * b2ContactEdge::next -> b2ContactEdge [b2Contact.h <71:2 71:14>]
REFERENCE_TYPE_USAGE: b2Manifold * b2Contact::GetManifold() -> b2Manifold [b2Contact.h <83:2 83:11>]
REFERENCE_TYPE_USAGE: b2Manifold * b2Contact::GetManifold() -> b2Manifold [b2Contact.h <222:8 222:17>]
REFERENCE_TYPE_USAGE: const b2Manifold * b2Contact::GetManifold() const -> b2Manifold [b2Contact.h <84:8 84:17>]
REFERENCE_TYPE_USAGE: const b2Manifold * b2Contact::GetManifold() const -> b2Manifold [b2Contact.h <227:14 227:23>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> void [b2Contact.h <87:2 87:5>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> void [b2Contact.h <232:8 232:11>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2WorldManifold [b2Contact.h <87:24 87:38>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2WorldManifold [b2Contact.h <232:41 232:55>]
REFERENCE_TYPE_USAGE: bool b2Contact::IsTouching() const -> bool [b2Contact.h <90:2 90:5>]
REFERENCE_TYPE_USAGE: bool b2Contact::IsTouching() const -> bool [b2Contact.h <259:8 259:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetEnabled(bool) -> void [b2Contact.h <95:2 95:5>]
REFERENCE_TYPE_USAGE: void b2Contact::SetEnabled(bool) -> void [b2Contact.h <242:8 242:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetEnabled(bool) -> bool [b2Contact.h <95:18 95:21>]
REFERENCE_TYPE_USAGE: void b2Contact::SetEnabled(bool) -> bool [b2Contact.h <242:35 242:38>]
REFERENCE_TYPE_USAGE: bool b2Contact::IsEnabled() const -> bool [b2Contact.h <98:2 98:5>]
REFERENCE_TYPE_USAGE: bool b2Contact::IsEnabled() const -> bool [b2Contact.h <254:8 254:11>]
REFERENCE_TYPE_USAGE: b2Contact * b2Contact::GetNext() -> b2Contact [b2Contact.h <101:2 101:10>]
REFERENCE_TYPE_USAGE: b2Contact * b2Contact::GetNext() -> b2Contact [b2Contact.h <264:8 264:16>]
REFERENCE_TYPE_USAGE: const b2Contact * b2Contact::GetNext() const -> b2Contact [b2Contact.h <102:8 102:16>]
REFERENCE_TYPE_USAGE: const b2Contact * b2Contact::GetNext() const -> b2Contact [b2Contact.h <269:14 269:22>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::GetFixtureA() -> b2Fixture [b2Contact.h <105:2 105:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::GetFixtureA() -> b2Fixture [b2Contact.h <274:8 274:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Contact::GetFixtureA() const -> b2Fixture [b2Contact.h <106:8 106:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Contact::GetFixtureA() const -> b2Fixture [b2Contact.h <279:14 279:22>]
REFERENCE_TYPE_USAGE: int32 b2Contact::GetChildIndexA() const -> int32 [b2Contact.h <109:2 109:6>]
REFERENCE_TYPE_USAGE: int32 b2Contact::GetChildIndexA() const -> int32 [b2Contact.h <289:8 289:12>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::GetFixtureB() -> b2Fixture [b2Contact.h <112:2 112:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::GetFixtureB() -> b2Fixture [b2Contact.h <284:8 284:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Contact::GetFixtureB() const -> b2Fixture [b2Contact.h <113:8 113:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Contact::GetFixtureB() const -> b2Fixture [b2Contact.h <294:14 294:22>]
REFERENCE_TYPE_USAGE: int32 b2Contact::GetChildIndexB() const -> int32 [b2Contact.h <116:2 116:6>]
REFERENCE_TYPE_USAGE: int32 b2Contact::GetChildIndexB() const -> int32 [b2Contact.h <299:8 299:12>]
REFERENCE_TYPE_USAGE: void b2Contact::SetFriction(float32) -> void [b2Contact.h <120:2 120:5>]
REFERENCE_TYPE_USAGE: void b2Contact::SetFriction(float32) -> void [b2Contact.h <309:8 309:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetFriction(float32) -> float32 [b2Contact.h <120:19 120:25>]
REFERENCE_TYPE_USAGE: void b2Contact::SetFriction(float32) -> float32 [b2Contact.h <309:36 309:42>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetFriction() const -> float32 [b2Contact.h <123:2 123:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetFriction() const -> float32 [b2Contact.h <314:8 314:14>]
REFERENCE_TYPE_USAGE: void b2Contact::ResetFriction() -> void [b2Contact.h <126:2 126:5>]
REFERENCE_TYPE_USAGE: void b2Contact::ResetFriction() -> void [b2Contact.h <319:8 319:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetRestitution(float32) -> void [b2Contact.h <130:2 130:5>]
REFERENCE_TYPE_USAGE: void b2Contact::SetRestitution(float32) -> void [b2Contact.h <324:8 324:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetRestitution(float32) -> float32 [b2Contact.h <130:22 130:28>]
REFERENCE_TYPE_USAGE: void b2Contact::SetRestitution(float32) -> float32 [b2Contact.h <324:39 324:45>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetRestitution() const -> float32 [b2Contact.h <133:2 133:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetRestitution() const -> float32 [b2Contact.h <329:8 329:14>]
REFERENCE_TYPE_USAGE: void b2Contact::ResetRestitution() -> void [b2Contact.h <136:2 136:5>]
REFERENCE_TYPE_USAGE: void b2Contact::ResetRestitution() -> void [b2Contact.h <334:8 334:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetTangentSpeed(float32) -> void [b2Contact.h <139:2 139:5>]
REFERENCE_TYPE_USAGE: void b2Contact::SetTangentSpeed(float32) -> void [b2Contact.h <339:8 339:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetTangentSpeed(float32) -> float32 [b2Contact.h <139:23 139:29>]
REFERENCE_TYPE_USAGE: void b2Contact::SetTangentSpeed(float32) -> float32 [b2Contact.h <339:40 339:46>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetTangentSpeed() const -> float32 [b2Contact.h <142:2 142:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetTangentSpeed() const -> float32 [b2Contact.h <344:8 344:14>]
REFERENCE_TYPE_USAGE: void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> void [b2Contact.h <145:10 145:13>]
REFERENCE_TYPE_USAGE: void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Manifold [b2Contact.h <145:24 145:33>]
REFERENCE_TYPE_USAGE: void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Transform [b2Contact.h <145:52 145:62>]
REFERENCE_TYPE_USAGE: void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Transform [b2Contact.h <145:76 145:86>]
REFERENCE_TYPE_USAGE: b2Contact -> b2ContactManager [b2Contact.h <148:15 148:30>]
REFERENCE_TYPE_USAGE: b2Contact -> b2World [b2Contact.h <149:15 149:21>]
REFERENCE_TYPE_USAGE: b2Contact -> b2ContactSolver [b2Contact.h <150:15 150:29>]
REFERENCE_TYPE_USAGE: b2Contact -> b2Body [b2Contact.h <151:15 151:20>]
REFERENCE_TYPE_USAGE: b2Contact -> b2Fixture [b2Contact.h <152:15 152:23>]
REFERENCE_TYPE_USAGE: void b2Contact::FlagForFiltering() -> void [b2Contact.h <177:2 177:5>]
REFERENCE_TYPE_USAGE: void b2Contact::FlagForFiltering() -> void [b2Contact.h <304:8 304:11>]
REFERENCE_TYPE_USAGE: static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) -> void [b2Contact.h <179:9 179:12>]
REFERENCE_TYPE_USAGE: static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) -> b2ContactCreateFcn [b2Contact.h <179:22 179:39>]
REFERENCE_TYPE_USAGE: static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) -> b2ContactDestroyFcn [b2Contact.h <179:53 179:71>]
REFERENCE_TYPE_USAGE: static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) -> b2Shape::Type [b2Contact.h <180:16 180:19>]
REFERENCE_TYPE_USAGE: static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) -> b2Shape::Type [b2Contact.h <180:37 180:40>]
REFERENCE_TYPE_USAGE: static void b2Contact::InitializeRegisters() -> void [b2Contact.h <181:9 181:12>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Contact [b2Contact.h <182:9 182:17>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Fixture [b2Contact.h <182:27 182:35>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Fixture [b2Contact.h <182:62 182:70>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> int32 [b2Contact.h <182:48 182:52>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> int32 [b2Contact.h <182:83 182:87>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2BlockAllocator [b2Contact.h <182:97 182:112>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) -> void [b2Contact.h <183:9 183:12>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) -> b2Contact [b2Contact.h <183:22 183:30>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) -> b2Shape::Type [b2Contact.h <183:51 183:54>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) -> b2Shape::Type [b2Contact.h <183:72 183:75>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) -> b2BlockAllocator [b2Contact.h <183:84 183:99>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2BlockAllocator *) -> void [b2Contact.h <184:9 184:12>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2BlockAllocator *) -> b2Contact [b2Contact.h <184:22 184:30>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2BlockAllocator *) -> b2BlockAllocator [b2Contact.h <184:42 184:57>]
REFERENCE_USAGE: void b2Contact::b2Contact() -> b2ContactEdge b2Contact::m_nodeA [b2Contact.h <186:2 186:10>]
REFERENCE_CALL: void b2Contact::b2Contact() -> void b2ContactEdge::b2ContactEdge() [b2Contact.h <186:2 186:10>]
REFERENCE_USAGE: void b2Contact::b2Contact() -> b2ContactEdge b2Contact::m_nodeB [b2Contact.h <186:2 186:10>]
REFERENCE_USAGE: void b2Contact::b2Contact() -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <186:16 186:25>]
REFERENCE_USAGE: void b2Contact::b2Contact() -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <186:37 186:46>]
REFERENCE_USAGE: void b2Contact::b2Contact() -> b2Manifold b2Contact::m_manifold [b2Contact.h <186:2 186:10>]
REFERENCE_CALL: void b2Contact::b2Contact() -> void b2Manifold::b2Manifold() [b2Contact.h <186:2 186:10>]
REFERENCE_TYPE_USAGE: void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) -> b2Fixture [b2Contact.h <187:12 187:20>]
REFERENCE_TYPE_USAGE: void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) -> b2Fixture [b2Contact.h <187:47 187:55>]
REFERENCE_TYPE_USAGE: void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) -> int32 [b2Contact.h <187:33 187:37>]
REFERENCE_TYPE_USAGE: void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) -> int32 [b2Contact.h <187:68 187:72>]
REFERENCE_TYPE_USAGE: void b2Contact::Update(b2ContactListener *) -> void [b2Contact.h <190:2 190:5>]
REFERENCE_TYPE_USAGE: void b2Contact::Update(b2ContactListener *) -> b2ContactListener [b2Contact.h <190:14 190:30>]
REFERENCE_TYPE_USAGE: static b2ContactRegister [] [] b2Contact::s_registers -> b2ContactRegister [b2Contact.h <192:9 192:25>]
REFERENCE_USAGE: static b2ContactRegister [] [] b2Contact::s_registers -> b2Shape::Type::e_typeCount [b2Contact.h <192:48 192:58>]
REFERENCE_USAGE: static b2ContactRegister [] [] b2Contact::s_registers -> b2Shape::Type::e_typeCount [b2Contact.h <192:70 192:80>]
REFERENCE_TYPE_USAGE: static bool b2Contact::s_initialized -> bool [b2Contact.h <193:9 193:12>]
REFERENCE_TYPE_USAGE: uint32 b2Contact::m_flags -> uint32 [b2Contact.h <195:2 195:7>]
REFERENCE_TYPE_USAGE: b2Contact * b2Contact::m_prev -> b2Contact [b2Contact.h <198:2 198:10>]
REFERENCE_TYPE_USAGE: b2Contact * b2Contact::m_next -> b2Contact [b2Contact.h <199:2 199:10>]
REFERENCE_TYPE_USAGE: b2ContactEdge b2Contact::m_nodeA -> b2ContactEdge [b2Contact.h <202:2 202:14>]
REFERENCE_TYPE_USAGE: b2ContactEdge b2Contact::m_nodeB -> b2ContactEdge [b2Contact.h <203:2 203:14>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::m_fixtureA -> b2Fixture [b2Contact.h <205:2 205:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::m_fixtureB -> b2Fixture [b2Contact.h <206:2 206:10>]
REFERENCE_TYPE_USAGE: int32 b2Contact::m_indexA -> int32 [b2Contact.h <208:2 208:6>]
REFERENCE_TYPE_USAGE: int32 b2Contact::m_indexB -> int32 [b2Contact.h <209:2 209:6>]
REFERENCE_TYPE_USAGE: b2Manifold b2Contact::m_manifold -> b2Manifold [b2Contact.h <211:2 211:11>]
REFERENCE_TYPE_USAGE: int32 b2Contact::m_toiCount -> int32 [b2Contact.h <213:2 213:6>]
REFERENCE_TYPE_USAGE: float32 b2Contact::m_toi -> float32 [b2Contact.h <214:2 214:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::m_friction -> float32 [b2Contact.h <216:2 216:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::m_restitution -> float32 [b2Contact.h <217:2 217:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::m_tangentSpeed -> float32 [b2Contact.h <219:2 219:8>]
REFERENCE_USAGE: b2Manifold * b2Contact::GetManifold() -> b2Manifold b2Contact::m_manifold [b2Contact.h <224:10 224:19>]
REFERENCE_USAGE: const b2Manifold * b2Contact::GetManifold() const -> b2Manifold b2Contact::m_manifold [b2Contact.h <229:10 229:19>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Body [b2Contact.h <234:8 234:13>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Body [b2Contact.h <235:8 235:13>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Body * b2Fixture::GetBody() [b2Contact.h <234:36 234:42>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Body * b2Fixture::GetBody() [b2Contact.h <235:36 235:42>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <234:24 234:33>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <236:26 236:35>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <235:24 235:33>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <237:26 237:35>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Shape [b2Contact.h <236:8 236:14>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Shape [b2Contact.h <237:8 237:14>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Shape * b2Fixture::GetShape() [b2Contact.h <236:38 236:45>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Shape * b2Fixture::GetShape() [b2Contact.h <237:38 237:45>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) [b2Contact.h <239:17 239:26>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Manifold b2Contact::m_manifold [b2Contact.h <239:29 239:38>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> const b2Transform & b2Body::GetTransform() const [b2Contact.h <239:48 239:59>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> const b2Transform & b2Body::GetTransform() const [b2Contact.h <239:89 239:100>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> float32 b2Shape::m_radius [b2Contact.h <239:72 239:79>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> float32 b2Shape::m_radius [b2Contact.h <239:113 239:120>]
REFERENCE_USAGE: void b2Contact::SetEnabled(bool) -> uint32 b2Contact::m_flags [b2Contact.h <246:3 246:9>]
REFERENCE_USAGE: void b2Contact::SetEnabled(bool) -> uint32 b2Contact::m_flags [b2Contact.h <250:3 250:9>]
REFERENCE_USAGE: void b2Contact::SetEnabled(bool) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_enabledFlag [b2Contact.h <246:14 246:26>]
REFERENCE_USAGE: void b2Contact::SetEnabled(bool) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_enabledFlag [b2Contact.h <250:15 250:27>]
REFERENCE_USAGE: bool b2Contact::IsEnabled() const -> uint32 b2Contact::m_flags [b2Contact.h <256:10 256:16>]
REFERENCE_USAGE: bool b2Contact::IsEnabled() const -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_enabledFlag [b2Contact.h <256:20 256:32>]
REFERENCE_USAGE: bool b2Contact::IsEnabled() const -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_enabledFlag [b2Contact.h <256:38 256:50>]
REFERENCE_USAGE: bool b2Contact::IsTouching() const -> uint32 b2Contact::m_flags [b2Contact.h <261:10 261:16>]
REFERENCE_USAGE: bool b2Contact::IsTouching() const -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_touchingFlag [b2Contact.h <261:20 261:33>]
REFERENCE_USAGE: bool b2Contact::IsTouching() const -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_touchingFlag [b2Contact.h <261:39 261:52>]
REFERENCE_USAGE: b2Contact * b2Contact::GetNext() -> b2Contact * b2Contact::m_next [b2Contact.h <266:9 266:14>]
REFERENCE_USAGE: const b2Contact * b2Contact::GetNext() const -> b2Contact * b2Contact::m_next [b2Contact.h <271:9 271:14>]
REFERENCE_USAGE: b2Fixture * b2Contact::GetFixtureA() -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <276:9 276:18>]
REFERENCE_USAGE: const b2Fixture * b2Contact::GetFixtureA() const -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <281:9 281:18>]
REFERENCE_USAGE: b2Fixture * b2Contact::GetFixtureB() -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <286:9 286:18>]
REFERENCE_USAGE: int32 b2Contact::GetChildIndexA() const -> int32 b2Contact::m_indexA [b2Contact.h <291:9 291:16>]
REFERENCE_USAGE: const b2Fixture * b2Contact::GetFixtureB() const -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <296:9 296:18>]
REFERENCE_USAGE: int32 b2Contact::GetChildIndexB() const -> int32 b2Contact::m_indexB [b2Contact.h <301:9 301:16>]
REFERENCE_USAGE: void b2Contact::FlagForFiltering() -> uint32 b2Contact::m_flags [b2Contact.h <306:2 306:8>]
REFERENCE_USAGE: void b2Contact::FlagForFiltering() -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_filterFlag [b2Contact.h <306:13 306:24>]
REFERENCE_USAGE: void b2Contact::SetFriction(float32) -> float32 b2Contact::m_friction [b2Contact.h <311:2 311:11>]
REFERENCE_USAGE: float32 b2Contact::GetFriction() const -> float32 b2Contact::m_friction [b2Contact.h <316:9 316:18>]
REFERENCE_USAGE: void b2Contact::ResetFriction() -> float32 b2Contact::m_friction [b2Contact.h <321:2 321:11>]
REFERENCE_CALL: void b2Contact::ResetFriction() -> float32 b2MixFriction(float32, float32) [b2Contact.h <321:15 321:27>]
REFERENCE_USAGE: void b2Contact::ResetFriction() -> float32 b2Fixture::m_friction [b2Contact.h <321:41 321:50>]
REFERENCE_USAGE: void b2Contact::ResetFriction() -> float32 b2Fixture::m_friction [b2Contact.h <321:65 321:74>]
REFERENCE_USAGE: void b2Contact::ResetFriction() -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <321:29 321:38>]
REFERENCE_USAGE: void b2Contact::ResetFriction() -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <321:53 321:62>]
REFERENCE_USAGE: void b2Contact::SetRestitution(float32) -> float32 b2Contact::m_restitution [b2Contact.h <326:2 326:14>]
REFERENCE_USAGE: float32 b2Contact::GetRestitution() const -> float32 b2Contact::m_restitution [b2Contact.h <331:9 331:21>]
REFERENCE_USAGE: void b2Contact::ResetRestitution() -> float32 b2Contact::m_restitution [b2Contact.h <336:2 336:14>]
REFERENCE_CALL: void b2Contact::ResetRestitution() -> float32 b2MixRestitution(float32, float32) [b2Contact.h <336:18 336:33>]
REFERENCE_USAGE: void b2Contact::ResetRestitution() -> float32 b2Fixture::m_restitution [b2Contact.h <336:47 336:59>]
REFERENCE_USAGE: void b2Contact::ResetRestitution() -> float32 b2Fixture::m_restitution [b2Contact.h <336:74 336:86>]
REFERENCE_USAGE: void b2Contact::ResetRestitution() -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <336:35 336:44>]
REFERENCE_USAGE: void b2Contact::ResetRestitution() -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <336:62 336:71>]
REFERENCE_USAGE: void b2Contact::SetTangentSpeed(float32) -> float32 b2Contact::m_tangentSpeed [b2Contact.h <341:2 341:15>]
REFERENCE_USAGE: float32 b2Contact::GetTangentSpeed() const -> float32 b2Contact::m_tangentSpeed [b2Contact.h <346:9 346:22>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Jacobian::linear -> b2Vec2 [b2Joint.h <55:2 55:7>]
REFERENCE_TYPE_USAGE: float32 b2Jacobian::angularA -> float32 [b2Joint.h <56:2 56:8>]
REFERENCE_TYPE_USAGE: float32 b2Jacobian::angularB -> float32 [b2Joint.h <57:2 57:8>]
REFERENCE_TYPE_USAGE: b2Body * b2JointEdge::other -> b2Body [b2Joint.h <67:2 67:7>]
REFERENCE_TYPE_USAGE: b2Joint * b2JointEdge::joint -> b2Joint [b2Joint.h <68:2 68:8>]
REFERENCE_TYPE_USAGE: b2JointEdge * b2JointEdge::prev -> b2JointEdge [b2Joint.h <69:2 69:12>]
REFERENCE_TYPE_USAGE: b2JointEdge * b2JointEdge::next -> b2JointEdge [b2Joint.h <70:2 70:12>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> b2JointType b2JointDef::type [b2Joint.h <78:3 78:6>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> b2JointType::e_unknownJoint [b2Joint.h <78:10 78:23>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> void * b2JointDef::userData [b2Joint.h <79:3 79:10>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> b2Body * b2JointDef::bodyA [b2Joint.h <80:3 80:7>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> b2Body * b2JointDef::bodyB [b2Joint.h <81:3 81:7>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> bool b2JointDef::collideConnected [b2Joint.h <82:3 82:18>]
REFERENCE_TYPE_USAGE: b2JointType b2JointDef::type -> b2JointType [b2Joint.h <86:2 86:12>]
REFERENCE_TYPE_USAGE: void * b2JointDef::userData -> void [b2Joint.h <89:2 89:5>]
REFERENCE_TYPE_USAGE: b2Body * b2JointDef::bodyA -> b2Body [b2Joint.h <92:2 92:7>]
REFERENCE_TYPE_USAGE: b2Body * b2JointDef::bodyB -> b2Body [b2Joint.h <95:2 95:7>]
REFERENCE_TYPE_USAGE: bool b2JointDef::collideConnected -> bool [b2Joint.h <98:2 98:5>]
REFERENCE_TYPE_USAGE: b2JointType b2Joint::GetType() const -> b2JointType [b2Joint.h <108:2 108:12>]
REFERENCE_TYPE_USAGE: b2JointType b2Joint::GetType() const -> b2JointType [b2Joint.h <186:8 186:18>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::GetBodyA() -> b2Body [b2Joint.h <111:2 111:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::GetBodyA() -> b2Body [b2Joint.h <191:8 191:13>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::GetBodyB() -> b2Body [b2Joint.h <114:2 114:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::GetBodyB() -> b2Body [b2Joint.h <196:8 196:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Joint::GetAnchorA() const -> b2Vec2 [b2Joint.h <117:10 117:15>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Joint::GetAnchorB() const -> b2Vec2 [b2Joint.h <120:10 120:15>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Joint::GetReactionForce(float32) const -> b2Vec2 [b2Joint.h <123:10 123:15>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Joint::GetReactionForce(float32) const -> float32 [b2Joint.h <123:34 123:40>]
REFERENCE_TYPE_USAGE: float32 b2Joint::GetReactionTorque(float32) const -> float32 [b2Joint.h <126:10 126:16>]
REFERENCE_TYPE_USAGE: float32 b2Joint::GetReactionTorque(float32) const -> float32 [b2Joint.h <126:36 126:42>]
REFERENCE_TYPE_USAGE: b2Joint * b2Joint::GetNext() -> b2Joint [b2Joint.h <129:2 129:8>]
REFERENCE_TYPE_USAGE: b2Joint * b2Joint::GetNext() -> b2Joint [b2Joint.h <201:8 201:14>]
REFERENCE_TYPE_USAGE: const b2Joint * b2Joint::GetNext() const -> b2Joint [b2Joint.h <130:8 130:14>]
REFERENCE_TYPE_USAGE: const b2Joint * b2Joint::GetNext() const -> b2Joint [b2Joint.h <206:14 206:20>]
REFERENCE_TYPE_USAGE: void * b2Joint::GetUserData() const -> void [b2Joint.h <133:2 133:5>]
REFERENCE_TYPE_USAGE: void * b2Joint::GetUserData() const -> void [b2Joint.h <211:8 211:11>]
REFERENCE_TYPE_USAGE: void b2Joint::SetUserData(void *) -> void [b2Joint.h <136:2 136:5>]
REFERENCE_TYPE_USAGE: void b2Joint::SetUserData(void *) -> void [b2Joint.h <136:19 136:22>]
REFERENCE_TYPE_USAGE: void b2Joint::SetUserData(void *) -> void [b2Joint.h <216:8 216:11>]
REFERENCE_TYPE_USAGE: void b2Joint::SetUserData(void *) -> void [b2Joint.h <216:34 216:37>]
REFERENCE_TYPE_USAGE: bool b2Joint::IsActive() const -> bool [b2Joint.h <139:2 139:5>]
REFERENCE_TYPE_USAGE: bool b2Joint::GetCollideConnected() const -> bool [b2Joint.h <144:2 144:5>]
REFERENCE_TYPE_USAGE: bool b2Joint::GetCollideConnected() const -> bool [b2Joint.h <221:8 221:11>]
REFERENCE_TYPE_USAGE: void b2Joint::Dump() -> void [b2Joint.h <147:10 147:13>]
REFERENCE_CALL: void b2Joint::Dump() -> void b2Log(const char *) [b2Joint.h <147:24 147:28>]
REFERENCE_TYPE_USAGE: void b2Joint::ShiftOrigin(const b2Vec2 &) -> void [b2Joint.h <150:10 150:13>]
REFERENCE_TYPE_USAGE: void b2Joint::ShiftOrigin(const b2Vec2 &) -> void [b2Joint.h <150:54 150:64>]
REFERENCE_TYPE_USAGE: void b2Joint::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2Joint.h <150:33 150:38>]
REFERENCE_TYPE_USAGE: b2Joint -> b2World [b2Joint.h <153:15 153:21>]
REFERENCE_TYPE_USAGE: b2Joint -> b2Body [b2Joint.h <154:15 154:20>]
REFERENCE_TYPE_USAGE: b2Joint -> b2Island [b2Joint.h <155:15 155:22>]
REFERENCE_TYPE_USAGE: b2Joint -> b2GearJoint [b2Joint.h <156:15 156:25>]
REFERENCE_TYPE_USAGE: static b2Joint * b2Joint::Create(const b2JointDef *, b2BlockAllocator *) -> b2Joint [b2Joint.h <158:9 158:15>]
REFERENCE_TYPE_USAGE: static b2Joint * b2Joint::Create(const b2JointDef *, b2BlockAllocator *) -> b2JointDef [b2Joint.h <158:31 158:40>]
REFERENCE_TYPE_USAGE: static b2Joint * b2Joint::Create(const b2JointDef *, b2BlockAllocator *) -> b2BlockAllocator [b2Joint.h <158:48 158:63>]
REFERENCE_TYPE_USAGE: static void b2Joint::Destroy(b2Joint *, b2BlockAllocator *) -> void [b2Joint.h <159:9 159:12>]
REFERENCE_TYPE_USAGE: static void b2Joint::Destroy(b2Joint *, b2BlockAllocator *) -> b2Joint [b2Joint.h <159:22 159:28>]
REFERENCE_TYPE_USAGE: static void b2Joint::Destroy(b2Joint *, b2BlockAllocator *) -> b2BlockAllocator [b2Joint.h <159:38 159:53>]
REFERENCE_TYPE_USAGE: void b2Joint::b2Joint(const b2JointDef *) -> b2JointDef [b2Joint.h <161:16 161:25>]
REFERENCE_TYPE_USAGE: void b2Joint::InitVelocityConstraints(const b2SolverData &) -> void [b2Joint.h <164:10 164:13>]
REFERENCE_TYPE_USAGE: void b2Joint::InitVelocityConstraints(const b2SolverData &) -> b2SolverData [b2Joint.h <164:45 164:56>]
REFERENCE_TYPE_USAGE: void b2Joint::SolveVelocityConstraints(const b2SolverData &) -> void [b2Joint.h <165:10 165:13>]
REFERENCE_TYPE_USAGE: void b2Joint::SolveVelocityConstraints(const b2SolverData &) -> b2SolverData [b2Joint.h <165:46 165:57>]
REFERENCE_TYPE_USAGE: bool b2Joint::SolvePositionConstraints(const b2SolverData &) -> bool [b2Joint.h <168:10 168:13>]
REFERENCE_TYPE_USAGE: bool b2Joint::SolvePositionConstraints(const b2SolverData &) -> b2SolverData [b2Joint.h <168:46 168:57>]
REFERENCE_TYPE_USAGE: b2JointType b2Joint::m_type -> b2JointType [b2Joint.h <170:2 170:12>]
REFERENCE_TYPE_USAGE: b2Joint * b2Joint::m_prev -> b2Joint [b2Joint.h <171:2 171:8>]
REFERENCE_TYPE_USAGE: b2Joint * b2Joint::m_next -> b2Joint [b2Joint.h <172:2 172:8>]
REFERENCE_TYPE_USAGE: b2JointEdge b2Joint::m_edgeA -> b2JointEdge [b2Joint.h <173:2 173:12>]
REFERENCE_TYPE_USAGE: b2JointEdge b2Joint::m_edgeB -> b2JointEdge [b2Joint.h <174:2 174:12>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::m_bodyA -> b2Body [b2Joint.h <175:2 175:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::m_bodyB -> b2Body [b2Joint.h <176:2 176:7>]
REFERENCE_TYPE_USAGE: int32 b2Joint::m_index -> int32 [b2Joint.h <178:2 178:6>]
REFERENCE_TYPE_USAGE: bool b2Joint::m_islandFlag -> bool [b2Joint.h <180:2 180:5>]
REFERENCE_TYPE_USAGE: bool b2Joint::m_collideConnected -> bool [b2Joint.h <181:2 181:5>]
REFERENCE_TYPE_USAGE: void * b2Joint::m_userData -> void [b2Joint.h <183:2 183:5>]
REFERENCE_USAGE: b2JointType b2Joint::GetType() const -> b2JointType b2Joint::m_type [b2Joint.h <188:9 188:14>]
REFERENCE_USAGE: b2Body * b2Joint::GetBodyA() -> b2Body * b2Joint::m_bodyA [b2Joint.h <193:9 193:15>]
REFERENCE_USAGE: b2Body * b2Joint::GetBodyB() -> b2Body * b2Joint::m_bodyB [b2Joint.h <198:9 198:15>]
REFERENCE_USAGE: b2Joint * b2Joint::GetNext() -> b2Joint * b2Joint::m_next [b2Joint.h <203:9 203:14>]
REFERENCE_USAGE: const b2Joint * b2Joint::GetNext() const -> b2Joint * b2Joint::m_next [b2Joint.h <208:9 208:14>]
REFERENCE_USAGE: void * b2Joint::GetUserData() const -> void * b2Joint::m_userData [b2Joint.h <213:9 213:18>]
REFERENCE_USAGE: void b2Joint::SetUserData(void *) -> void * b2Joint::m_userData [b2Joint.h <218:2 218:11>]
REFERENCE_USAGE: bool b2Joint::GetCollideConnected() const -> bool b2Joint::m_collideConnected [b2Joint.h <223:9 223:26>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Transform b2Body::m_xf [b2Body.cpp <25:9 25:14>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Transform b2Body::m_xf [b2Body.cpp <59:2 59:5>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Transform b2Body::m_xf [b2Body.cpp <60:2 60:5>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Transform b2Body::m_xf [b2Body.cpp <63:15 63:18>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Transform b2Body::m_xf [b2Body.cpp <64:14 64:17>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void b2Transform::b2Transform() [b2Body.cpp <25:9 25:14>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <25:9 25:14>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <62:2 62:8>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <63:2 63:8>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <64:2 64:8>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <65:2 65:8>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <66:2 66:8>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <67:2 67:8>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void b2Sweep::b2Sweep() [b2Body.cpp <25:9 25:14>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2Body::m_linearVelocity [b2Body.cpp <25:9 25:14>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2Body::m_linearVelocity [b2Body.cpp <74:2 74:17>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void b2Vec2::b2Vec2() [b2Body.cpp <25:9 25:14>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2Body::m_force [b2Body.cpp <25:9 25:14>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2Body::m_force [b2Body.cpp <81:2 81:8>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void [b2Body.cpp <27:2 27:9>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void [b2Body.cpp <28:2 28:9>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void [b2Body.cpp <29:2 29:9>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void [b2Body.cpp <30:2 30:9>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void [b2Body.cpp <31:2 31:9>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void [b2Body.cpp <32:2 32:9>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> bool b2Vec2::IsValid() const [b2Body.cpp <27:24 27:30>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> bool b2Vec2::IsValid() const [b2Body.cpp <28:30 28:36>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2BodyDef::position [b2Body.cpp <27:15 27:22>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2BodyDef::position [b2Body.cpp <59:15 59:22>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <27:2 27:9>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <28:2 28:9>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <29:2 29:9>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <30:2 30:9>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <31:2 31:9>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <32:2 32:9>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> unsigned int [b2Body.cpp <27:2 27:9>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> unsigned int [b2Body.cpp <28:2 28:9>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> unsigned int [b2Body.cpp <29:2 29:9>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> unsigned int [b2Body.cpp <30:2 30:9>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> unsigned int [b2Body.cpp <31:2 31:9>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> unsigned int [b2Body.cpp <32:2 32:9>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2BodyDef::linearVelocity [b2Body.cpp <28:15 28:28>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2BodyDef::linearVelocity [b2Body.cpp <74:25 74:38>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> bool b2IsValid(float32) [b2Body.cpp <29:11 29:19>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> bool b2IsValid(float32) [b2Body.cpp <30:11 30:19>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> bool b2IsValid(float32) [b2Body.cpp <31:11 31:19>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> bool b2IsValid(float32) [b2Body.cpp <32:11 32:19>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::angle [b2Body.cpp <29:25 29:29>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::angle [b2Body.cpp <60:17 60:21>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::angle [b2Body.cpp <65:19 65:23>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::angle [b2Body.cpp <66:18 66:22>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::angularVelocity [b2Body.cpp <30:25 30:39>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::angularVelocity [b2Body.cpp <75:26 75:40>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::angularDamping [b2Body.cpp <31:25 31:38>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::angularDamping [b2Body.cpp <31:48 31:61>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::angularDamping [b2Body.cpp <78:25 78:38>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::linearDamping [b2Body.cpp <32:25 32:37>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::linearDamping [b2Body.cpp <32:47 32:59>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::linearDamping [b2Body.cpp <77:24 77:36>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> uint16 b2Body::m_flags [b2Body.cpp <34:2 34:8>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> uint16 b2Body::m_flags [b2Body.cpp <38:3 38:9>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> uint16 b2Body::m_flags [b2Body.cpp <42:3 42:9>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> uint16 b2Body::m_flags [b2Body.cpp <46:3 46:9>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> uint16 b2Body::m_flags [b2Body.cpp <50:3 50:9>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> uint16 b2Body::m_flags [b2Body.cpp <54:3 54:9>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> bool b2BodyDef::bullet [b2Body.cpp <36:10 36:15>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.cpp <38:14 38:25>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> bool b2BodyDef::fixedRotation [b2Body.cpp <40:10 40:22>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.cpp <42:14 42:32>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> bool b2BodyDef::allowSleep [b2Body.cpp <44:10 44:19>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.cpp <46:14 46:28>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> bool b2BodyDef::awake [b2Body.cpp <48:10 48:14>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.cpp <50:14 50:24>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> bool b2BodyDef::active [b2Body.cpp <52:10 52:15>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.cpp <54:14 54:25>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2World * b2Body::m_world [b2Body.cpp <57:2 57:8>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <59:9 59:9>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <63:13 63:13>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <64:12 64:12>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <74:19 74:19>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2Transform::p [b2Body.cpp <59:7 59:7>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2Transform::p [b2Body.cpp <63:20 63:20>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2Transform::p [b2Body.cpp <64:19 64:19>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void b2Rot::Set(float32) [b2Body.cpp <60:9 60:11>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Rot b2Transform::q [b2Body.cpp <60:7 60:7>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void b2Vec2::SetZero() [b2Body.cpp <62:22 62:28>]
REFERENCE_CALL: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void b2Vec2::SetZero() [b2Body.cpp <81:10 81:16>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2Sweep::localCenter [b2Body.cpp <62:10 62:20>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2Sweep::c0 [b2Body.cpp <63:10 63:11>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Vec2 b2Sweep::c [b2Body.cpp <64:10 64:10>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Sweep::a0 [b2Body.cpp <65:10 65:11>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Sweep::a [b2Body.cpp <66:10 66:10>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Sweep::alpha0 [b2Body.cpp <67:10 67:15>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2JointEdge * b2Body::m_jointList [b2Body.cpp <69:2 69:12>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2ContactEdge * b2Body::m_contactList [b2Body.cpp <70:2 70:14>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Body * b2Body::m_prev [b2Body.cpp <71:2 71:7>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Body * b2Body::m_next [b2Body.cpp <72:2 72:7>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_angularVelocity [b2Body.cpp <75:2 75:18>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_linearDamping [b2Body.cpp <77:2 77:16>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_angularDamping [b2Body.cpp <78:2 78:17>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_gravityScale [b2Body.cpp <79:2 79:15>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2BodyDef::gravityScale [b2Body.cpp <79:23 79:34>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_torque [b2Body.cpp <82:2 82:9>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_sleepTime [b2Body.cpp <84:2 84:12>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2BodyType b2Body::m_type [b2Body.cpp <86:2 86:7>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2BodyType b2Body::m_type [b2Body.cpp <88:6 88:11>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2BodyType b2BodyDef::type [b2Body.cpp <86:15 86:18>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2BodyType::b2_dynamicBody [b2Body.cpp <88:16 88:29>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_mass [b2Body.cpp <90:3 90:8>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_mass [b2Body.cpp <95:3 95:8>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_invMass [b2Body.cpp <91:3 91:11>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_invMass [b2Body.cpp <96:3 96:11>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_I [b2Body.cpp <99:2 99:4>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> float32 b2Body::m_invI [b2Body.cpp <100:2 100:7>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void * b2Body::m_userData [b2Body.cpp <102:2 102:11>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> void * b2BodyDef::userData [b2Body.cpp <102:19 102:26>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2Fixture * b2Body::m_fixtureList [b2Body.cpp <104:2 104:14>]
REFERENCE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> int32 b2Body::m_fixtureCount [b2Body.cpp <105:2 105:15>]
REFERENCE_CALL: void b2Body::SetType(b2BodyType) -> bool b2World::IsLocked() const [b2Body.cpp <115:20 115:27>]
REFERENCE_CALL: void b2Body::SetType(b2BodyType) -> bool b2World::IsLocked() const [b2Body.cpp <116:15 116:22>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2World * b2Body::m_world [b2Body.cpp <115:11 115:17>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2World * b2Body::m_world [b2Body.cpp <116:6 116:12>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2World * b2Body::m_world [b2Body.cpp <150:3 150:9>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2World * b2Body::m_world [b2Body.cpp <155:30 155:36>]
REFERENCE_CALL: void b2Body::SetType(b2BodyType) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <115:2 115:9>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> unsigned int [b2Body.cpp <115:2 115:9>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2BodyType b2Body::m_type [b2Body.cpp <121:6 121:11>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2BodyType b2Body::m_type [b2Body.cpp <126:2 126:7>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2BodyType b2Body::m_type [b2Body.cpp <130:6 130:11>]
REFERENCE_CALL: void b2Body::SetType(b2BodyType) -> void b2Body::ResetMassData() [b2Body.cpp <128:2 128:14>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2BodyType::b2_staticBody [b2Body.cpp <130:16 130:28>]
REFERENCE_CALL: void b2Body::SetType(b2BodyType) -> void b2Vec2::SetZero() [b2Body.cpp <132:20 132:26>]
REFERENCE_CALL: void b2Body::SetType(b2BodyType) -> void b2Vec2::SetZero() [b2Body.cpp <141:10 141:16>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2Vec2 b2Body::m_linearVelocity [b2Body.cpp <132:3 132:18>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> float32 b2Body::m_angularVelocity [b2Body.cpp <133:3 133:19>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> float32 b2Sweep::a0 [b2Body.cpp <134:11 134:12>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2Sweep b2Body::m_sweep [b2Body.cpp <134:3 134:9>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2Sweep b2Body::m_sweep [b2Body.cpp <134:16 134:22>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2Sweep b2Body::m_sweep [b2Body.cpp <135:3 135:9>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2Sweep b2Body::m_sweep [b2Body.cpp <135:16 135:22>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> float32 b2Sweep::a [b2Body.cpp <134:24 134:24>]
REFERENCE_CALL: void b2Body::SetType(b2BodyType) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <135:14 135:14>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2Vec2 b2Sweep::c0 [b2Body.cpp <135:11 135:12>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2Vec2 b2Sweep::c [b2Body.cpp <135:24 135:24>]
REFERENCE_CALL: void b2Body::SetType(b2BodyType) -> void b2Body::SynchronizeFixtures() [b2Body.cpp <136:3 136:21>]
REFERENCE_CALL: void b2Body::SetType(b2BodyType) -> void b2Body::SetAwake(bool) [b2Body.cpp <139:2 139:9>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2Vec2 b2Body::m_force [b2Body.cpp <141:2 141:8>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> float32 b2Body::m_torque [b2Body.cpp <142:2 142:9>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> b2ContactEdge [b2Body.cpp <145:2 145:14>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> b2ContactEdge [b2Body.cpp <148:3 148:15>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2ContactEdge * b2Body::m_contactList [b2Body.cpp <145:22 145:34>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2ContactEdge * b2Body::m_contactList [b2Body.cpp <152:2 152:14>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2ContactEdge * b2ContactEdge::next [b2Body.cpp <149:12 149:15>]
REFERENCE_CALL: void b2Body::SetType(b2BodyType) -> void b2ContactManager::Destroy(b2Contact *) [b2Body.cpp <150:29 150:35>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2ContactManager b2World::m_contactManager [b2Body.cpp <150:12 150:27>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2ContactManager b2World::m_contactManager [b2Body.cpp <155:39 155:54>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2Contact * b2ContactEdge::contact [b2Body.cpp <150:42 150:48>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> b2BroadPhase [b2Body.cpp <155:2 155:13>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2BroadPhase b2ContactManager::m_broadPhase [b2Body.cpp <155:56 155:67>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> b2Fixture [b2Body.cpp <156:7 156:15>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2Fixture * b2Body::m_fixtureList [b2Body.cpp <156:22 156:34>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2Fixture * b2Fixture::m_next [b2Body.cpp <156:47 156:52>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> int32 [b2Body.cpp <158:3 158:7>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> int32 [b2Body.cpp <159:8 159:12>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> int32 b2Fixture::m_proxyCount [b2Body.cpp <158:25 158:36>]
REFERENCE_CALL: void b2Body::SetType(b2BodyType) -> void b2BroadPhase::TouchProxy(int32) [b2Body.cpp <161:16 161:25>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> int32 b2FixtureProxy::proxyId [b2Body.cpp <161:43 161:49>]
REFERENCE_USAGE: void b2Body::SetType(b2BodyType) -> b2FixtureProxy * b2Fixture::m_proxies [b2Body.cpp <161:30 161:38>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> void [b2Body.cpp <168:2 168:9>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> void [b2Body.cpp <176:2 176:5>]
REFERENCE_CALL: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> bool b2World::IsLocked() const [b2Body.cpp <168:20 168:27>]
REFERENCE_CALL: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> bool b2World::IsLocked() const [b2Body.cpp <169:15 169:22>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2World * b2Body::m_world [b2Body.cpp <168:11 168:17>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2World * b2Body::m_world [b2Body.cpp <169:6 169:12>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2World * b2Body::m_world [b2Body.cpp <174:33 174:39>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2World * b2Body::m_world [b2Body.cpp <182:31 182:37>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2World * b2Body::m_world [b2Body.cpp <200:2 200:8>]
REFERENCE_CALL: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <168:2 168:9>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> unsigned int [b2Body.cpp <168:2 168:9>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2BlockAllocator [b2Body.cpp <174:2 174:17>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2BlockAllocator b2World::m_blockAllocator [b2Body.cpp <174:42 174:57>]
REFERENCE_CALL: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> void * b2BlockAllocator::Allocate(int32) [b2Body.cpp <176:28 176:35>]
REFERENCE_CALL: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> void b2Fixture::b2Fixture() [b2Body.cpp <177:36 177:44>]
REFERENCE_CALL: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> void b2Fixture::Create(b2BlockAllocator *, b2Body *, const b2FixtureDef *) [b2Body.cpp <178:11 178:16>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> uint16 b2Body::m_flags [b2Body.cpp <180:6 180:12>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.cpp <180:16 180:27>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2BroadPhase [b2Body.cpp <182:3 182:14>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2BroadPhase b2ContactManager::m_broadPhase [b2Body.cpp <182:57 182:68>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2ContactManager b2World::m_contactManager [b2Body.cpp <182:40 182:55>]
REFERENCE_CALL: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> void b2Fixture::CreateProxies(b2BroadPhase *, const b2Transform &) [b2Body.cpp <183:12 183:24>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Transform b2Body::m_xf [b2Body.cpp <183:38 183:41>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Fixture * b2Fixture::m_next [b2Body.cpp <186:11 186:16>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Fixture * b2Body::m_fixtureList [b2Body.cpp <186:20 186:32>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Fixture * b2Body::m_fixtureList [b2Body.cpp <187:2 187:14>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> int32 b2Body::m_fixtureCount [b2Body.cpp <188:4 188:17>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Body * b2Fixture::m_body [b2Body.cpp <190:11 190:16>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> float32 b2Fixture::m_density [b2Body.cpp <193:15 193:23>]
REFERENCE_CALL: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> void b2Body::ResetMassData() [b2Body.cpp <195:3 195:15>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> int32 b2World::m_flags [b2Body.cpp <200:11 200:17>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2World::anonymous enum (b2World.h<215:2>)::e_newFixture [b2Body.cpp <200:31 200:42>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> b2FixtureDef [b2Body.cpp <207:2 207:13>]
REFERENCE_CALL: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> void b2FixtureDef::b2FixtureDef() [b2Body.cpp <207:15 207:17>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> const b2Shape * b2FixtureDef::shape [b2Body.cpp <208:6 208:10>]
REFERENCE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> float32 b2FixtureDef::density [b2Body.cpp <209:6 209:12>]
REFERENCE_CALL: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) [b2Body.cpp <211:9 211:21>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> bool b2World::IsLocked() const [b2Body.cpp <221:20 221:27>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> bool b2World::IsLocked() const [b2Body.cpp <222:15 222:22>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2World * b2Body::m_world [b2Body.cpp <221:11 221:17>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2World * b2Body::m_world [b2Body.cpp <222:6 222:12>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2World * b2Body::m_world [b2Body.cpp <262:4 262:10>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2World * b2Body::m_world [b2Body.cpp <266:33 266:39>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2World * b2Body::m_world [b2Body.cpp <270:31 270:37>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <221:2 221:9>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <227:2 227:9>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <230:2 230:9>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <246:2 246:9>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> unsigned int [b2Body.cpp <221:2 221:9>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> unsigned int [b2Body.cpp <227:2 227:9>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> unsigned int [b2Body.cpp <230:2 230:9>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> unsigned int [b2Body.cpp <246:2 246:9>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Body * b2Fixture::m_body [b2Body.cpp <227:20 227:25>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Body * b2Fixture::m_body [b2Body.cpp <274:11 274:16>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> int32 b2Body::m_fixtureCount [b2Body.cpp <230:11 230:24>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> int32 b2Body::m_fixtureCount [b2Body.cpp <280:4 280:17>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture * b2Body::m_fixtureList [b2Body.cpp <231:22 231:34>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> bool [b2Body.cpp <232:2 232:5>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture * b2Fixture::m_next [b2Body.cpp <237:21 237:26>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture * b2Fixture::m_next [b2Body.cpp <242:20 242:25>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture * b2Fixture::m_next [b2Body.cpp <275:11 275:16>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2ContactEdge [b2Body.cpp <249:2 249:14>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2ContactEdge * b2Body::m_contactList [b2Body.cpp <249:24 249:36>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Contact [b2Body.cpp <252:3 252:11>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Contact * b2ContactEdge::contact [b2Body.cpp <252:24 252:30>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2ContactEdge * b2ContactEdge::next [b2Body.cpp <253:16 253:19>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture * b2Contact::GetFixtureA() [b2Body.cpp <255:28 255:38>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture * b2Contact::GetFixtureB() [b2Body.cpp <256:28 256:38>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> void b2ContactManager::Destroy(b2Contact *) [b2Body.cpp <262:30 262:36>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2ContactManager b2World::m_contactManager [b2Body.cpp <262:13 262:28>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2ContactManager b2World::m_contactManager [b2Body.cpp <270:40 270:55>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2BlockAllocator [b2Body.cpp <266:2 266:17>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2BlockAllocator b2World::m_blockAllocator [b2Body.cpp <266:42 266:57>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> uint16 b2Body::m_flags [b2Body.cpp <268:6 268:12>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.cpp <268:16 268:27>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2BroadPhase [b2Body.cpp <270:3 270:14>]
REFERENCE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2BroadPhase b2ContactManager::m_broadPhase [b2Body.cpp <270:57 270:68>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> void b2Fixture::DestroyProxies(b2BroadPhase *) [b2Body.cpp <271:12 271:25>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> void b2Fixture::Destroy(b2BlockAllocator *) [b2Body.cpp <276:11 276:17>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> void b2Fixture::~b2Fixture() [b2Body.cpp <277:11 277:11>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> void b2BlockAllocator::Free(void *, int32) [b2Body.cpp <278:13 278:16>]
REFERENCE_CALL: void b2Body::DestroyFixture(b2Fixture *) -> void b2Body::ResetMassData() [b2Body.cpp <283:2 283:14>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_mass [b2Body.cpp <289:2 289:7>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_mass [b2Body.cpp <317:3 317:8>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_mass [b2Body.cpp <323:6 323:11>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_mass [b2Body.cpp <325:22 325:27>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_mass [b2Body.cpp <331:3 331:8>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_mass [b2Body.cpp <338:10 338:15>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_invMass [b2Body.cpp <290:2 290:10>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_invMass [b2Body.cpp <325:3 325:11>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_invMass [b2Body.cpp <326:18 326:26>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_invMass [b2Body.cpp <332:3 332:11>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_I [b2Body.cpp <291:2 291:4>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_I [b2Body.cpp <319:3 319:5>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_I [b2Body.cpp <335:6 335:8>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_I [b2Body.cpp <338:3 338:5>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_I [b2Body.cpp <339:12 339:14>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_I [b2Body.cpp <340:19 340:21>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_I [b2Body.cpp <345:3 345:5>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_invI [b2Body.cpp <292:2 292:7>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_invI [b2Body.cpp <340:3 340:8>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_invI [b2Body.cpp <346:3 346:8>]
REFERENCE_CALL: void b2Body::ResetMassData() -> void b2Vec2::SetZero() [b2Body.cpp <293:22 293:28>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Sweep::localCenter [b2Body.cpp <293:10 293:20>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Sweep::localCenter [b2Body.cpp <351:10 351:20>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Sweep::localCenter [b2Body.cpp <352:47 352:57>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Sweep b2Body::m_sweep [b2Body.cpp <293:2 293:8>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Sweep b2Body::m_sweep [b2Body.cpp <298:3 298:9>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Sweep b2Body::m_sweep [b2Body.cpp <299:3 299:9>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Sweep b2Body::m_sweep [b2Body.cpp <300:3 300:9>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Sweep b2Body::m_sweep [b2Body.cpp <300:16 300:22>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Sweep b2Body::m_sweep [b2Body.cpp <350:21 350:27>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Sweep b2Body::m_sweep [b2Body.cpp <351:2 351:8>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Sweep b2Body::m_sweep [b2Body.cpp <352:2 352:8>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Sweep b2Body::m_sweep [b2Body.cpp <352:15 352:21>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Sweep b2Body::m_sweep [b2Body.cpp <352:39 352:45>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Sweep b2Body::m_sweep [b2Body.cpp <355:49 355:55>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2BodyType b2Body::m_type [b2Body.cpp <296:6 296:11>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2BodyType b2Body::m_type [b2Body.cpp <296:33 296:38>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2BodyType b2Body::m_type [b2Body.cpp <304:11 304:16>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2BodyType::b2_staticBody [b2Body.cpp <296:16 296:28>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2BodyType::b2_kinematicBody [b2Body.cpp <296:43 296:58>]
REFERENCE_CALL: void b2Body::ResetMassData() -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <298:14 298:14>]
REFERENCE_CALL: void b2Body::ResetMassData() -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <299:13 299:13>]
REFERENCE_CALL: void b2Body::ResetMassData() -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <351:22 351:22>]
REFERENCE_CALL: void b2Body::ResetMassData() -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <352:13 352:13>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Sweep::c0 [b2Body.cpp <298:11 298:12>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Sweep::c0 [b2Body.cpp <352:10 352:11>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Transform::p [b2Body.cpp <298:21 298:21>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Transform::p [b2Body.cpp <299:20 299:20>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Transform b2Body::m_xf [b2Body.cpp <298:16 298:19>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Transform b2Body::m_xf [b2Body.cpp <299:15 299:18>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Transform b2Body::m_xf [b2Body.cpp <352:33 352:36>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Sweep::c [b2Body.cpp <299:11 299:11>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Sweep::c [b2Body.cpp <350:29 350:29>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Sweep::c [b2Body.cpp <352:23 352:23>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Sweep::c [b2Body.cpp <355:57 355:57>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Sweep::a0 [b2Body.cpp <300:11 300:12>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Sweep::a [b2Body.cpp <300:24 300:24>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2BodyType::b2_dynamicBody [b2Body.cpp <304:21 304:34>]
REFERENCE_CALL: void b2Body::ResetMassData() -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <304:2 304:9>]
REFERENCE_CALL: void b2Body::ResetMassData() -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <339:3 339:10>]
REFERENCE_TYPE_USAGE: void b2Body::ResetMassData() -> unsigned int [b2Body.cpp <304:2 304:9>]
REFERENCE_TYPE_USAGE: void b2Body::ResetMassData() -> unsigned int [b2Body.cpp <339:3 339:10>]
REFERENCE_TYPE_USAGE: void b2Body::ResetMassData() -> b2Vec2 [b2Body.cpp <307:2 307:7>]
REFERENCE_TYPE_USAGE: void b2Body::ResetMassData() -> b2Vec2 [b2Body.cpp <350:2 350:7>]
REFERENCE_CALL: void b2Body::ResetMassData() -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Body.cpp <307:23 307:33>]
REFERENCE_CALL: void b2Body::ResetMassData() -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Body.cpp <350:29 350:29>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> const b2Vec2 b2Vec2_zero [b2Body.cpp <307:23 307:33>]
REFERENCE_TYPE_USAGE: void b2Body::ResetMassData() -> b2Fixture [b2Body.cpp <308:7 308:15>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Fixture * b2Body::m_fixtureList [b2Body.cpp <308:22 308:34>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Fixture * b2Fixture::m_next [b2Body.cpp <308:47 308:52>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Fixture::m_density [b2Body.cpp <310:10 310:18>]
REFERENCE_TYPE_USAGE: void b2Body::ResetMassData() -> b2MassData [b2Body.cpp <315:3 315:12>]
REFERENCE_CALL: void b2Body::ResetMassData() -> void b2MassData::b2MassData() [b2Body.cpp <315:14 315:21>]
REFERENCE_CALL: void b2Body::ResetMassData() -> void b2Fixture::GetMassData(b2MassData *) const [b2Body.cpp <316:6 316:16>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2MassData::mass [b2Body.cpp <317:22 317:25>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2MassData::mass [b2Body.cpp <318:27 318:30>]
REFERENCE_CALL: void b2Body::ResetMassData() -> void b2Vec2::operator+=(const b2Vec2 &) [b2Body.cpp <318:15 318:16>]
REFERENCE_CALL: void b2Body::ResetMassData() -> void b2Vec2::operator+=(const b2Vec2 &) [b2Body.cpp <355:19 355:20>]
REFERENCE_CALL: void b2Body::ResetMassData() -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Body.cpp <318:32 318:32>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2MassData::center [b2Body.cpp <318:43 318:48>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2MassData::I [b2Body.cpp <319:19 319:19>]
REFERENCE_CALL: void b2Body::ResetMassData() -> void b2Vec2::operator*=(float32) [b2Body.cpp <326:15 326:16>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> uint16 b2Body::m_flags [b2Body.cpp <335:21 335:27>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.cpp <335:31 335:49>]
REFERENCE_CALL: void b2Body::ResetMassData() -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Body.cpp <338:19 338:23>]
REFERENCE_CALL: void b2Body::ResetMassData() -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Body.cpp <352:25 352:25>]
REFERENCE_CALL: void b2Body::ResetMassData() -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Body.cpp <352:27 352:31>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> b2Vec2 b2Body::m_linearVelocity [b2Body.cpp <355:2 355:17>]
REFERENCE_CALL: void b2Body::ResetMassData() -> b2Vec2 b2Cross(float32, const b2Vec2 &) [b2Body.cpp <355:22 355:28>]
REFERENCE_USAGE: void b2Body::ResetMassData() -> float32 b2Body::m_angularVelocity [b2Body.cpp <355:30 355:46>]
REFERENCE_CALL: void b2Body::ResetMassData() -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.cpp <355:59 355:59>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> bool b2World::IsLocked() const [b2Body.cpp <360:20 360:27>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> bool b2World::IsLocked() const [b2Body.cpp <361:15 361:22>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2World * b2Body::m_world [b2Body.cpp <360:11 360:17>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2World * b2Body::m_world [b2Body.cpp <361:6 361:12>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <360:2 360:9>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <386:3 386:10>]
REFERENCE_TYPE_USAGE: void b2Body::SetMassData(const b2MassData *) -> unsigned int [b2Body.cpp <360:2 360:9>]
REFERENCE_TYPE_USAGE: void b2Body::SetMassData(const b2MassData *) -> unsigned int [b2Body.cpp <386:3 386:10>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2BodyType b2Body::m_type [b2Body.cpp <366:6 366:11>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2BodyType::b2_dynamicBody [b2Body.cpp <366:16 366:29>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_invMass [b2Body.cpp <371:2 371:10>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_invMass [b2Body.cpp <381:2 381:10>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_I [b2Body.cpp <372:2 372:4>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_I [b2Body.cpp <385:3 385:5>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_I [b2Body.cpp <386:12 386:14>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_I [b2Body.cpp <387:19 387:21>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_invI [b2Body.cpp <373:2 373:7>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_invI [b2Body.cpp <387:3 387:8>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_mass [b2Body.cpp <375:2 375:7>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_mass [b2Body.cpp <376:6 376:11>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_mass [b2Body.cpp <378:3 378:8>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_mass [b2Body.cpp <381:21 381:26>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_mass [b2Body.cpp <385:23 385:28>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2MassData::mass [b2Body.cpp <375:21 375:24>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2MassData::I [b2Body.cpp <383:16 383:16>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2MassData::I [b2Body.cpp <385:19 385:19>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> uint16 b2Body::m_flags [b2Body.cpp <383:29 383:35>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.cpp <383:47 383:65>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Body.cpp <385:32 385:36>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2MassData::center [b2Body.cpp <385:48 385:53>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2MassData::center [b2Body.cpp <385:66 385:71>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2MassData::center [b2Body.cpp <392:35 392:40>]
REFERENCE_TYPE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 [b2Body.cpp <391:2 391:7>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Body.cpp <391:29 391:29>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2Sweep::c [b2Body.cpp <391:29 391:29>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2Sweep::c [b2Body.cpp <393:23 393:23>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2Sweep::c [b2Body.cpp <396:57 396:57>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <391:21 391:27>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <392:2 392:8>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <393:2 393:8>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <393:15 393:21>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <393:39 393:45>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Sweep b2Body::m_sweep [b2Body.cpp <396:49 396:55>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <392:22 392:22>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <393:13 393:13>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2Sweep::localCenter [b2Body.cpp <392:10 392:20>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2Sweep::localCenter [b2Body.cpp <393:47 393:57>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2Sweep::c0 [b2Body.cpp <393:10 393:11>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Body.cpp <393:25 393:25>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Body.cpp <393:27 393:31>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Transform b2Body::m_xf [b2Body.cpp <393:33 393:36>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Body.cpp <396:19 396:20>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2Body::m_linearVelocity [b2Body.cpp <396:2 396:17>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 b2Cross(float32, const b2Vec2 &) [b2Body.cpp <396:22 396:28>]
REFERENCE_USAGE: void b2Body::SetMassData(const b2MassData *) -> float32 b2Body::m_angularVelocity [b2Body.cpp <396:30 396:46>]
REFERENCE_CALL: void b2Body::SetMassData(const b2MassData *) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.cpp <396:59 396:59>]
REFERENCE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2BodyType b2Body::m_type [b2Body.cpp <402:6 402:11>]
REFERENCE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2BodyType b2Body::m_type [b2Body.cpp <402:41 402:46>]
REFERENCE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2BodyType::b2_dynamicBody [b2Body.cpp <402:16 402:29>]
REFERENCE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2BodyType::b2_dynamicBody [b2Body.cpp <402:51 402:64>]
REFERENCE_TYPE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2JointEdge [b2Body.cpp <408:7 408:17>]
REFERENCE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2JointEdge * b2Body::m_jointList [b2Body.cpp <408:25 408:35>]
REFERENCE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2JointEdge * b2JointEdge::next [b2Body.cpp <408:51 408:54>]
REFERENCE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2Body * b2JointEdge::other [b2Body.cpp <410:11 410:15>]
REFERENCE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> bool b2Joint::m_collideConnected [b2Body.cpp <412:19 412:36>]
REFERENCE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2Joint * b2JointEdge::joint [b2Body.cpp <412:12 412:16>]
REFERENCE_CALL: void b2Body::SetTransform(const b2Vec2 &, float32) -> bool b2World::IsLocked() const [b2Body.cpp <424:20 424:27>]
REFERENCE_CALL: void b2Body::SetTransform(const b2Vec2 &, float32) -> bool b2World::IsLocked() const [b2Body.cpp <425:15 425:22>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2World * b2Body::m_world [b2Body.cpp <424:11 424:17>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2World * b2Body::m_world [b2Body.cpp <425:6 425:12>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2World * b2Body::m_world [b2Body.cpp <439:30 439:36>]
REFERENCE_CALL: void b2Body::SetTransform(const b2Vec2 &, float32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <424:2 424:9>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> unsigned int [b2Body.cpp <424:2 424:9>]
REFERENCE_CALL: void b2Body::SetTransform(const b2Vec2 &, float32) -> void b2Rot::Set(float32) [b2Body.cpp <430:9 430:11>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Rot b2Transform::q [b2Body.cpp <430:7 430:7>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Transform b2Body::m_xf [b2Body.cpp <430:2 430:5>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Transform b2Body::m_xf [b2Body.cpp <431:2 431:5>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Transform b2Body::m_xf [b2Body.cpp <433:20 433:23>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Transform b2Body::m_xf [b2Body.cpp <442:30 442:33>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Transform b2Body::m_xf [b2Body.cpp <442:36 442:39>]
REFERENCE_CALL: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <431:9 431:9>]
REFERENCE_CALL: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.cpp <436:13 436:13>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 b2Transform::p [b2Body.cpp <431:7 431:7>]
REFERENCE_CALL: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Body.cpp <433:12 433:12>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 b2Sweep::c [b2Body.cpp <433:10 433:10>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 b2Sweep::c [b2Body.cpp <436:23 436:23>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Sweep b2Body::m_sweep [b2Body.cpp <433:2 433:8>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Sweep b2Body::m_sweep [b2Body.cpp <433:26 433:32>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Sweep b2Body::m_sweep [b2Body.cpp <434:2 434:8>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Sweep b2Body::m_sweep [b2Body.cpp <436:2 436:8>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Sweep b2Body::m_sweep [b2Body.cpp <436:15 436:21>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Sweep b2Body::m_sweep [b2Body.cpp <437:2 437:8>]
REFERENCE_CALL: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Body.cpp <433:14 433:18>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 b2Sweep::localCenter [b2Body.cpp <433:34 433:44>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> float32 b2Sweep::a [b2Body.cpp <434:10 434:10>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 b2Sweep::c0 [b2Body.cpp <436:10 436:11>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> float32 b2Sweep::a0 [b2Body.cpp <437:10 437:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2BroadPhase [b2Body.cpp <439:2 439:13>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2BroadPhase b2ContactManager::m_broadPhase [b2Body.cpp <439:56 439:67>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2ContactManager b2World::m_contactManager [b2Body.cpp <439:39 439:54>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Fixture [b2Body.cpp <440:7 440:15>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Fixture * b2Body::m_fixtureList [b2Body.cpp <440:22 440:34>]
REFERENCE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Fixture * b2Fixture::m_next [b2Body.cpp <440:47 440:52>]
REFERENCE_CALL: void b2Body::SetTransform(const b2Vec2 &, float32) -> void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) [b2Body.cpp <442:6 442:16>]
REFERENCE_TYPE_USAGE: void b2Body::SynchronizeFixtures() -> b2Transform [b2Body.cpp <448:2 448:12>]
REFERENCE_CALL: void b2Body::SynchronizeFixtures() -> void b2Transform::b2Transform() [b2Body.cpp <448:14 448:16>]
REFERENCE_CALL: void b2Body::SynchronizeFixtures() -> void b2Rot::Set(float32) [b2Body.cpp <449:8 449:10>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2Rot b2Transform::q [b2Body.cpp <449:6 449:6>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2Rot b2Transform::q [b2Body.cpp <450:33 450:33>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> float32 b2Sweep::a0 [b2Body.cpp <449:20 449:21>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2Sweep b2Body::m_sweep [b2Body.cpp <449:12 449:18>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2Sweep b2Body::m_sweep [b2Body.cpp <450:10 450:16>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2Sweep b2Body::m_sweep [b2Body.cpp <450:36 450:42>]
REFERENCE_CALL: void b2Body::SynchronizeFixtures() -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Body.cpp <450:8 450:8>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2Vec2 b2Transform::p [b2Body.cpp <450:6 450:6>]
REFERENCE_CALL: void b2Body::SynchronizeFixtures() -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.cpp <450:21 450:21>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2Vec2 b2Sweep::c0 [b2Body.cpp <450:18 450:19>]
REFERENCE_CALL: void b2Body::SynchronizeFixtures() -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Body.cpp <450:23 450:27>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2Vec2 b2Sweep::localCenter [b2Body.cpp <450:44 450:54>]
REFERENCE_TYPE_USAGE: void b2Body::SynchronizeFixtures() -> b2BroadPhase [b2Body.cpp <452:2 452:13>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2BroadPhase b2ContactManager::m_broadPhase [b2Body.cpp <452:56 452:67>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2ContactManager b2World::m_contactManager [b2Body.cpp <452:39 452:54>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2World * b2Body::m_world [b2Body.cpp <452:30 452:36>]
REFERENCE_TYPE_USAGE: void b2Body::SynchronizeFixtures() -> b2Fixture [b2Body.cpp <453:7 453:15>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2Fixture * b2Body::m_fixtureList [b2Body.cpp <453:22 453:34>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2Fixture * b2Fixture::m_next [b2Body.cpp <453:47 453:52>]
REFERENCE_CALL: void b2Body::SynchronizeFixtures() -> void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) [b2Body.cpp <455:6 455:16>]
REFERENCE_USAGE: void b2Body::SynchronizeFixtures() -> b2Transform b2Body::m_xf [b2Body.cpp <455:35 455:38>]
REFERENCE_CALL: void b2Body::SetActive(bool) -> bool b2World::IsLocked() const [b2Body.cpp <461:20 461:27>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2World * b2Body::m_world [b2Body.cpp <461:11 461:17>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2World * b2Body::m_world [b2Body.cpp <473:31 473:37>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2World * b2Body::m_world [b2Body.cpp <486:31 486:37>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2World * b2Body::m_world [b2Body.cpp <498:4 498:10>]
REFERENCE_CALL: void b2Body::SetActive(bool) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Body.cpp <461:2 461:9>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> unsigned int [b2Body.cpp <461:2 461:9>]
REFERENCE_CALL: void b2Body::SetActive(bool) -> bool b2Body::IsActive() const [b2Body.cpp <463:14 463:21>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> uint16 b2Body::m_flags [b2Body.cpp <470:3 470:9>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> uint16 b2Body::m_flags [b2Body.cpp <483:3 483:9>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.cpp <470:14 470:25>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.cpp <483:15 483:26>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> b2BroadPhase [b2Body.cpp <473:3 473:14>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> b2BroadPhase [b2Body.cpp <486:3 486:14>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2BroadPhase b2ContactManager::m_broadPhase [b2Body.cpp <473:57 473:68>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2BroadPhase b2ContactManager::m_broadPhase [b2Body.cpp <486:57 486:68>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2ContactManager b2World::m_contactManager [b2Body.cpp <473:40 473:55>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2ContactManager b2World::m_contactManager [b2Body.cpp <486:40 486:55>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2ContactManager b2World::m_contactManager [b2Body.cpp <498:13 498:28>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> b2Fixture [b2Body.cpp <474:8 474:16>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> b2Fixture [b2Body.cpp <487:8 487:16>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2Fixture * b2Body::m_fixtureList [b2Body.cpp <474:23 474:35>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2Fixture * b2Body::m_fixtureList [b2Body.cpp <487:23 487:35>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2Fixture * b2Fixture::m_next [b2Body.cpp <474:48 474:53>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2Fixture * b2Fixture::m_next [b2Body.cpp <487:48 487:53>]
REFERENCE_CALL: void b2Body::SetActive(bool) -> void b2Fixture::CreateProxies(b2BroadPhase *, const b2Transform &) [b2Body.cpp <476:7 476:19>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2Transform b2Body::m_xf [b2Body.cpp <476:33 476:36>]
REFERENCE_CALL: void b2Body::SetActive(bool) -> void b2Fixture::DestroyProxies(b2BroadPhase *) [b2Body.cpp <489:7 489:20>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> b2ContactEdge [b2Body.cpp <493:3 493:15>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> b2ContactEdge [b2Body.cpp <496:4 496:16>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2ContactEdge * b2Body::m_contactList [b2Body.cpp <493:23 493:35>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2ContactEdge * b2Body::m_contactList [b2Body.cpp <500:3 500:15>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2ContactEdge * b2ContactEdge::next [b2Body.cpp <497:13 497:16>]
REFERENCE_CALL: void b2Body::SetActive(bool) -> void b2ContactManager::Destroy(b2Contact *) [b2Body.cpp <498:30 498:36>]
REFERENCE_USAGE: void b2Body::SetActive(bool) -> b2Contact * b2ContactEdge::contact [b2Body.cpp <498:43 498:49>]
REFERENCE_USAGE: void b2Body::SetFixedRotation(bool) -> uint16 b2Body::m_flags [b2Body.cpp <506:17 506:23>]
REFERENCE_USAGE: void b2Body::SetFixedRotation(bool) -> uint16 b2Body::m_flags [b2Body.cpp <514:3 514:9>]
REFERENCE_USAGE: void b2Body::SetFixedRotation(bool) -> uint16 b2Body::m_flags [b2Body.cpp <518:3 518:9>]
REFERENCE_USAGE: void b2Body::SetFixedRotation(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.cpp <506:27 506:45>]
REFERENCE_USAGE: void b2Body::SetFixedRotation(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.cpp <506:51 506:69>]
REFERENCE_USAGE: void b2Body::SetFixedRotation(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.cpp <514:14 514:32>]
REFERENCE_USAGE: void b2Body::SetFixedRotation(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.cpp <518:15 518:33>]
REFERENCE_USAGE: void b2Body::SetFixedRotation(bool) -> float32 b2Body::m_angularVelocity [b2Body.cpp <521:2 521:18>]
REFERENCE_CALL: void b2Body::SetFixedRotation(bool) -> void b2Body::ResetMassData() [b2Body.cpp <523:2 523:14>]
REFERENCE_TYPE_USAGE: void b2Body::Dump() -> int32 [b2Body.cpp <528:2 528:6>]
REFERENCE_USAGE: void b2Body::Dump() -> int32 b2Body::m_islandIndex [b2Body.cpp <528:20 528:32>]
REFERENCE_USAGE: void b2Body::Dump() -> int32 b2Body::m_islandIndex [b2Body.cpp <545:54 545:66>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <530:2 530:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <531:2 531:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <532:2 532:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <533:2 533:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <534:2 534:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <535:2 535:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <536:2 536:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <537:2 537:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <538:2 538:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <539:2 539:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <540:2 540:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <541:2 541:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <542:2 542:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <543:2 543:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <544:2 544:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <545:2 545:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <546:2 546:6>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <549:3 549:7>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <551:3 551:7>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Log(const char *) [b2Body.cpp <553:2 553:6>]
REFERENCE_USAGE: void b2Body::Dump() -> b2BodyType b2Body::m_type [b2Body.cpp <532:41 532:46>]
REFERENCE_USAGE: void b2Body::Dump() -> float32 b2Vec2::x [b2Body.cpp <533:57 533:57>]
REFERENCE_USAGE: void b2Body::Dump() -> float32 b2Vec2::x [b2Body.cpp <535:73 535:73>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Vec2 b2Transform::p [b2Body.cpp <533:55 533:55>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Vec2 b2Transform::p [b2Body.cpp <533:65 533:65>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Transform b2Body::m_xf [b2Body.cpp <533:50 533:53>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Transform b2Body::m_xf [b2Body.cpp <533:60 533:63>]
REFERENCE_USAGE: void b2Body::Dump() -> float32 b2Vec2::y [b2Body.cpp <533:67 533:67>]
REFERENCE_USAGE: void b2Body::Dump() -> float32 b2Vec2::y [b2Body.cpp <535:93 535:93>]
REFERENCE_USAGE: void b2Body::Dump() -> float32 b2Sweep::a [b2Body.cpp <534:43 534:43>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Sweep b2Body::m_sweep [b2Body.cpp <534:35 534:41>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Vec2 b2Body::m_linearVelocity [b2Body.cpp <535:56 535:71>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Vec2 b2Body::m_linearVelocity [b2Body.cpp <535:76 535:91>]
REFERENCE_USAGE: void b2Body::Dump() -> float32 b2Body::m_angularVelocity [b2Body.cpp <536:45 536:61>]
REFERENCE_USAGE: void b2Body::Dump() -> float32 b2Body::m_linearDamping [b2Body.cpp <537:43 537:57>]
REFERENCE_USAGE: void b2Body::Dump() -> float32 b2Body::m_angularDamping [b2Body.cpp <538:44 538:59>]
REFERENCE_USAGE: void b2Body::Dump() -> uint16 b2Body::m_flags [b2Body.cpp <539:41 539:47>]
REFERENCE_USAGE: void b2Body::Dump() -> uint16 b2Body::m_flags [b2Body.cpp <540:36 540:42>]
REFERENCE_USAGE: void b2Body::Dump() -> uint16 b2Body::m_flags [b2Body.cpp <541:44 541:50>]
REFERENCE_USAGE: void b2Body::Dump() -> uint16 b2Body::m_flags [b2Body.cpp <542:37 542:43>]
REFERENCE_USAGE: void b2Body::Dump() -> uint16 b2Body::m_flags [b2Body.cpp <543:37 543:43>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.cpp <539:51 539:65>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.cpp <540:46 540:56>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.cpp <541:54 541:72>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.cpp <542:47 542:58>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.cpp <543:47 543:58>]
REFERENCE_USAGE: void b2Body::Dump() -> float32 b2Body::m_gravityScale [b2Body.cpp <544:42 544:55>]
REFERENCE_TYPE_USAGE: void b2Body::Dump() -> b2Fixture [b2Body.cpp <547:7 547:15>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Fixture * b2Body::m_fixtureList [b2Body.cpp <547:22 547:34>]
REFERENCE_USAGE: void b2Body::Dump() -> b2Fixture * b2Fixture::m_next [b2Body.cpp <547:47 547:52>]
REFERENCE_CALL: void b2Body::Dump() -> void b2Fixture::Dump(int32) [b2Body.cpp <550:6 550:9>]
LOCAL_SYMBOL: b2BlockAllocator.h<36:1> [b2BlockAllocator.h <36:1 36:1>]
LOCAL_SYMBOL: b2BlockAllocator.h<36:1> [b2BlockAllocator.h <60:1 60:1>]
LOCAL_SYMBOL: b2BlockAllocator.h<42:23> [b2BlockAllocator.h <42:23 42:26>]
LOCAL_SYMBOL: b2BlockAllocator.h<45:18> [b2BlockAllocator.h <45:18 45:18>]
LOCAL_SYMBOL: b2BlockAllocator.h<45:27> [b2BlockAllocator.h <45:27 45:30>]
LOCAL_SYMBOL: b2Body.cpp<109:1> [b2Body.cpp <109:1 109:1>]
LOCAL_SYMBOL: b2Body.cpp<109:1> [b2Body.cpp <111:1 111:1>]
LOCAL_SYMBOL: b2Body.cpp<113:33> [b2Body.cpp <113:33 113:36>]
LOCAL_SYMBOL: b2Body.cpp<113:33> [b2Body.cpp <121:16 121:19>]
LOCAL_SYMBOL: b2Body.cpp<113:33> [b2Body.cpp <126:11 126:14>]
LOCAL_SYMBOL: b2Body.cpp<114:1> [b2Body.cpp <114:1 114:1>]
LOCAL_SYMBOL: b2Body.cpp<114:1> [b2Body.cpp <164:1 164:1>]
LOCAL_SYMBOL: b2Body.cpp<117:2> [b2Body.cpp <117:2 117:2>]
LOCAL_SYMBOL: b2Body.cpp<117:2> [b2Body.cpp <119:2 119:2>]
LOCAL_SYMBOL: b2Body.cpp<122:2> [b2Body.cpp <122:2 122:2>]
LOCAL_SYMBOL: b2Body.cpp<122:2> [b2Body.cpp <124:2 124:2>]
LOCAL_SYMBOL: b2Body.cpp<131:2> [b2Body.cpp <131:2 131:2>]
LOCAL_SYMBOL: b2Body.cpp<131:2> [b2Body.cpp <137:2 137:2>]
LOCAL_SYMBOL: b2Body.cpp<145:17> [b2Body.cpp <145:17 145:18>]
LOCAL_SYMBOL: b2Body.cpp<145:17> [b2Body.cpp <146:9 146:10>]
LOCAL_SYMBOL: b2Body.cpp<145:17> [b2Body.cpp <148:24 148:25>]
LOCAL_SYMBOL: b2Body.cpp<145:17> [b2Body.cpp <149:3 149:4>]
LOCAL_SYMBOL: b2Body.cpp<145:17> [b2Body.cpp <149:8 149:9>]
LOCAL_SYMBOL: b2Body.cpp<147:2> [b2Body.cpp <147:2 147:2>]
LOCAL_SYMBOL: b2Body.cpp<147:2> [b2Body.cpp <151:2 151:2>]
LOCAL_SYMBOL: b2Body.cpp<148:18> [b2Body.cpp <148:18 148:20>]
LOCAL_SYMBOL: b2Body.cpp<148:18> [b2Body.cpp <150:37 150:39>]
LOCAL_SYMBOL: b2Body.cpp<155:16> [b2Body.cpp <155:16 155:25>]
LOCAL_SYMBOL: b2Body.cpp<155:16> [b2Body.cpp <161:4 161:13>]
LOCAL_SYMBOL: b2Body.cpp<156:18> [b2Body.cpp <156:18 156:18>]
LOCAL_SYMBOL: b2Body.cpp<156:18> [b2Body.cpp <156:37 156:37>]
LOCAL_SYMBOL: b2Body.cpp<156:18> [b2Body.cpp <156:40 156:40>]
LOCAL_SYMBOL: b2Body.cpp<156:18> [b2Body.cpp <156:44 156:44>]
LOCAL_SYMBOL: b2Body.cpp<156:18> [b2Body.cpp <158:22 158:22>]
LOCAL_SYMBOL: b2Body.cpp<156:18> [b2Body.cpp <161:27 161:27>]
LOCAL_SYMBOL: b2Body.cpp<157:2> [b2Body.cpp <157:2 157:2>]
LOCAL_SYMBOL: b2Body.cpp<157:2> [b2Body.cpp <163:2 163:2>]
LOCAL_SYMBOL: b2Body.cpp<158:9> [b2Body.cpp <158:9 158:18>]
LOCAL_SYMBOL: b2Body.cpp<158:9> [b2Body.cpp <159:25 159:34>]
LOCAL_SYMBOL: b2Body.cpp<159:14> [b2Body.cpp <159:14 159:14>]
LOCAL_SYMBOL: b2Body.cpp<159:14> [b2Body.cpp <159:21 159:21>]
LOCAL_SYMBOL: b2Body.cpp<159:14> [b2Body.cpp <159:39 159:39>]
LOCAL_SYMBOL: b2Body.cpp<159:14> [b2Body.cpp <161:40 161:40>]
LOCAL_SYMBOL: b2Body.cpp<160:3> [b2Body.cpp <160:3 160:3>]
LOCAL_SYMBOL: b2Body.cpp<160:3> [b2Body.cpp <162:3 162:3>]
LOCAL_SYMBOL: b2Body.cpp<166:54> [b2Body.cpp <166:54 166:56>]
LOCAL_SYMBOL: b2Body.cpp<166:54> [b2Body.cpp <178:35 178:37>]
LOCAL_SYMBOL: b2Body.cpp<167:1> [b2Body.cpp <167:1 167:1>]
LOCAL_SYMBOL: b2Body.cpp<167:1> [b2Body.cpp <203:1 203:1>]
LOCAL_SYMBOL: b2Body.cpp<170:2> [b2Body.cpp <170:2 170:2>]
LOCAL_SYMBOL: b2Body.cpp<170:2> [b2Body.cpp <172:2 172:2>]
LOCAL_SYMBOL: b2Body.cpp<174:20> [b2Body.cpp <174:20 174:28>]
LOCAL_SYMBOL: b2Body.cpp<174:20> [b2Body.cpp <176:17 176:25>]
LOCAL_SYMBOL: b2Body.cpp<174:20> [b2Body.cpp <178:18 178:26>]
LOCAL_SYMBOL: b2Body.cpp<176:8> [b2Body.cpp <176:8 176:13>]
LOCAL_SYMBOL: b2Body.cpp<176:8> [b2Body.cpp <177:28 177:33>]
LOCAL_SYMBOL: b2Body.cpp<177:13> [b2Body.cpp <177:13 177:19>]
LOCAL_SYMBOL: b2Body.cpp<177:13> [b2Body.cpp <178:2 178:8>]
LOCAL_SYMBOL: b2Body.cpp<177:13> [b2Body.cpp <183:3 183:9>]
LOCAL_SYMBOL: b2Body.cpp<177:13> [b2Body.cpp <186:2 186:8>]
LOCAL_SYMBOL: b2Body.cpp<177:13> [b2Body.cpp <187:18 187:24>]
LOCAL_SYMBOL: b2Body.cpp<177:13> [b2Body.cpp <190:2 190:8>]
LOCAL_SYMBOL: b2Body.cpp<177:13> [b2Body.cpp <193:6 193:12>]
LOCAL_SYMBOL: b2Body.cpp<177:13> [b2Body.cpp <202:9 202:15>]
LOCAL_SYMBOL: b2Body.cpp<181:2> [b2Body.cpp <181:2 181:2>]
LOCAL_SYMBOL: b2Body.cpp<181:2> [b2Body.cpp <184:2 184:2>]
LOCAL_SYMBOL: b2Body.cpp<182:17> [b2Body.cpp <182:17 182:26>]
LOCAL_SYMBOL: b2Body.cpp<182:17> [b2Body.cpp <183:26 183:35>]
LOCAL_SYMBOL: b2Body.cpp<194:2> [b2Body.cpp <194:2 194:2>]
LOCAL_SYMBOL: b2Body.cpp<194:2> [b2Body.cpp <196:2 196:2>]
LOCAL_SYMBOL: b2Body.cpp<205:49> [b2Body.cpp <205:49 205:53>]
LOCAL_SYMBOL: b2Body.cpp<205:49> [b2Body.cpp <208:14 208:18>]
LOCAL_SYMBOL: b2Body.cpp<205:64> [b2Body.cpp <205:64 205:70>]
LOCAL_SYMBOL: b2Body.cpp<205:64> [b2Body.cpp <209:16 209:22>]
LOCAL_SYMBOL: b2Body.cpp<206:1> [b2Body.cpp <206:1 206:1>]
LOCAL_SYMBOL: b2Body.cpp<206:1> [b2Body.cpp <212:1 212:1>]
LOCAL_SYMBOL: b2Body.cpp<207:15> [b2Body.cpp <207:15 207:17>]
LOCAL_SYMBOL: b2Body.cpp<207:15> [b2Body.cpp <208:2 208:4>]
LOCAL_SYMBOL: b2Body.cpp<207:15> [b2Body.cpp <209:2 209:4>]
LOCAL_SYMBOL: b2Body.cpp<207:15> [b2Body.cpp <211:24 211:26>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <214:40 214:46>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <216:6 216:12>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <227:11 227:17>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <235:16 235:22>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <237:12 237:18>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <258:7 258:13>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <258:30 258:36>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <271:3 271:9>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <274:2 274:8>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <275:2 275:8>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <276:2 276:8>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <277:2 277:8>]
LOCAL_SYMBOL: b2Body.cpp<214:40> [b2Body.cpp <278:18 278:24>]
LOCAL_SYMBOL: b2Body.cpp<215:1> [b2Body.cpp <215:1 215:1>]
LOCAL_SYMBOL: b2Body.cpp<215:1> [b2Body.cpp <284:1 284:1>]
LOCAL_SYMBOL: b2Body.cpp<217:2> [b2Body.cpp <217:2 217:2>]
LOCAL_SYMBOL: b2Body.cpp<217:2> [b2Body.cpp <219:2 219:2>]
LOCAL_SYMBOL: b2Body.cpp<223:2> [b2Body.cpp <223:2 223:2>]
LOCAL_SYMBOL: b2Body.cpp<223:2> [b2Body.cpp <225:2 225:2>]
LOCAL_SYMBOL: b2Body.cpp<231:14> [b2Body.cpp <231:14 231:17>]
LOCAL_SYMBOL: b2Body.cpp<231:14> [b2Body.cpp <233:10 233:13>]
LOCAL_SYMBOL: b2Body.cpp<231:14> [b2Body.cpp <235:8 235:11>]
LOCAL_SYMBOL: b2Body.cpp<231:14> [b2Body.cpp <237:5 237:8>]
LOCAL_SYMBOL: b2Body.cpp<231:14> [b2Body.cpp <242:3 242:6>]
LOCAL_SYMBOL: b2Body.cpp<231:14> [b2Body.cpp <242:13 242:16>]
LOCAL_SYMBOL: b2Body.cpp<232:7> [b2Body.cpp <232:7 232:11>]
LOCAL_SYMBOL: b2Body.cpp<232:7> [b2Body.cpp <238:4 238:8>]
LOCAL_SYMBOL: b2Body.cpp<232:7> [b2Body.cpp <246:11 246:15>]
LOCAL_SYMBOL: b2Body.cpp<234:2> [b2Body.cpp <234:2 234:2>]
LOCAL_SYMBOL: b2Body.cpp<234:2> [b2Body.cpp <243:2 243:2>]
LOCAL_SYMBOL: b2Body.cpp<236:3> [b2Body.cpp <236:3 236:3>]
LOCAL_SYMBOL: b2Body.cpp<236:3> [b2Body.cpp <240:3 240:3>]
LOCAL_SYMBOL: b2Body.cpp<249:17> [b2Body.cpp <249:17 249:20>]
LOCAL_SYMBOL: b2Body.cpp<249:17> [b2Body.cpp <250:9 250:12>]
LOCAL_SYMBOL: b2Body.cpp<249:17> [b2Body.cpp <252:18 252:21>]
LOCAL_SYMBOL: b2Body.cpp<249:17> [b2Body.cpp <253:3 253:6>]
LOCAL_SYMBOL: b2Body.cpp<249:17> [b2Body.cpp <253:10 253:13>]
LOCAL_SYMBOL: b2Body.cpp<251:2> [b2Body.cpp <251:2 251:2>]
LOCAL_SYMBOL: b2Body.cpp<251:2> [b2Body.cpp <264:2 264:2>]
LOCAL_SYMBOL: b2Body.cpp<252:14> [b2Body.cpp <252:14 252:14>]
LOCAL_SYMBOL: b2Body.cpp<252:14> [b2Body.cpp <255:25 255:25>]
LOCAL_SYMBOL: b2Body.cpp<252:14> [b2Body.cpp <256:25 256:25>]
LOCAL_SYMBOL: b2Body.cpp<252:14> [b2Body.cpp <262:38 262:38>]
LOCAL_SYMBOL: b2Body.cpp<255:14> [b2Body.cpp <255:14 255:21>]
LOCAL_SYMBOL: b2Body.cpp<255:14> [b2Body.cpp <258:18 258:25>]
LOCAL_SYMBOL: b2Body.cpp<256:14> [b2Body.cpp <256:14 256:21>]
LOCAL_SYMBOL: b2Body.cpp<256:14> [b2Body.cpp <258:41 258:48>]
LOCAL_SYMBOL: b2Body.cpp<259:3> [b2Body.cpp <259:3 259:3>]
LOCAL_SYMBOL: b2Body.cpp<259:3> [b2Body.cpp <263:3 263:3>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <25:33 25:34>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <27:11 27:12>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <28:11 28:12>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <29:21 29:22>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <30:21 30:22>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <31:21 31:22>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <31:44 31:45>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <32:21 32:22>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <32:43 32:44>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <36:6 36:7>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <40:6 40:7>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <44:6 44:7>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <48:6 48:7>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <52:6 52:7>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <59:11 59:12>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <60:13 60:14>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <65:15 65:16>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <66:14 66:15>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <74:21 74:22>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <75:22 75:23>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <77:20 77:21>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <78:21 78:22>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <79:19 79:20>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <86:11 86:12>]
LOCAL_SYMBOL: b2Body.cpp<25:33> [b2Body.cpp <102:15 102:16>]
LOCAL_SYMBOL: b2Body.cpp<25:46> [b2Body.cpp <25:46 25:50>]
LOCAL_SYMBOL: b2Body.cpp<25:46> [b2Body.cpp <57:12 57:16>]
LOCAL_SYMBOL: b2Body.cpp<266:20> [b2Body.cpp <266:20 266:28>]
LOCAL_SYMBOL: b2Body.cpp<266:20> [b2Body.cpp <276:19 276:27>]
LOCAL_SYMBOL: b2Body.cpp<266:20> [b2Body.cpp <278:2 278:10>]
LOCAL_SYMBOL: b2Body.cpp<269:2> [b2Body.cpp <269:2 269:2>]
LOCAL_SYMBOL: b2Body.cpp<269:2> [b2Body.cpp <272:2 272:2>]
LOCAL_SYMBOL: b2Body.cpp<26:1> [b2Body.cpp <26:1 26:1>]
LOCAL_SYMBOL: b2Body.cpp<26:1> [b2Body.cpp <106:1 106:1>]
LOCAL_SYMBOL: b2Body.cpp<270:17> [b2Body.cpp <270:17 270:26>]
LOCAL_SYMBOL: b2Body.cpp<270:17> [b2Body.cpp <271:27 271:36>]
LOCAL_SYMBOL: b2Body.cpp<287:1> [b2Body.cpp <287:1 287:1>]
LOCAL_SYMBOL: b2Body.cpp<287:1> [b2Body.cpp <356:1 356:1>]
LOCAL_SYMBOL: b2Body.cpp<297:2> [b2Body.cpp <297:2 297:2>]
LOCAL_SYMBOL: b2Body.cpp<297:2> [b2Body.cpp <302:2 302:2>]
LOCAL_SYMBOL: b2Body.cpp<307:9> [b2Body.cpp <307:9 307:19>]
LOCAL_SYMBOL: b2Body.cpp<307:9> [b2Body.cpp <318:3 318:13>]
LOCAL_SYMBOL: b2Body.cpp<307:9> [b2Body.cpp <326:3 326:13>]
LOCAL_SYMBOL: b2Body.cpp<307:9> [b2Body.cpp <338:25 338:35>]
LOCAL_SYMBOL: b2Body.cpp<307:9> [b2Body.cpp <338:38 338:48>]
LOCAL_SYMBOL: b2Body.cpp<307:9> [b2Body.cpp <351:24 351:34>]
LOCAL_SYMBOL: b2Body.cpp<308:18> [b2Body.cpp <308:18 308:18>]
LOCAL_SYMBOL: b2Body.cpp<308:18> [b2Body.cpp <308:37 308:37>]
LOCAL_SYMBOL: b2Body.cpp<308:18> [b2Body.cpp <308:40 308:40>]
LOCAL_SYMBOL: b2Body.cpp<308:18> [b2Body.cpp <308:44 308:44>]
LOCAL_SYMBOL: b2Body.cpp<308:18> [b2Body.cpp <310:7 310:7>]
LOCAL_SYMBOL: b2Body.cpp<308:18> [b2Body.cpp <316:3 316:3>]
LOCAL_SYMBOL: b2Body.cpp<309:2> [b2Body.cpp <309:2 309:2>]
LOCAL_SYMBOL: b2Body.cpp<309:2> [b2Body.cpp <320:2 320:2>]
LOCAL_SYMBOL: b2Body.cpp<311:3> [b2Body.cpp <311:3 311:3>]
LOCAL_SYMBOL: b2Body.cpp<311:3> [b2Body.cpp <313:3 313:3>]
LOCAL_SYMBOL: b2Body.cpp<315:14> [b2Body.cpp <315:14 315:21>]
LOCAL_SYMBOL: b2Body.cpp<315:14> [b2Body.cpp <316:19 316:26>]
LOCAL_SYMBOL: b2Body.cpp<315:14> [b2Body.cpp <317:13 317:20>]
LOCAL_SYMBOL: b2Body.cpp<315:14> [b2Body.cpp <318:18 318:25>]
LOCAL_SYMBOL: b2Body.cpp<315:14> [b2Body.cpp <318:34 318:41>]
LOCAL_SYMBOL: b2Body.cpp<315:14> [b2Body.cpp <319:10 319:17>]
LOCAL_SYMBOL: b2Body.cpp<324:2> [b2Body.cpp <324:2 324:2>]
LOCAL_SYMBOL: b2Body.cpp<324:2> [b2Body.cpp <327:2 327:2>]
LOCAL_SYMBOL: b2Body.cpp<329:2> [b2Body.cpp <329:2 329:2>]
LOCAL_SYMBOL: b2Body.cpp<329:2> [b2Body.cpp <333:2 333:2>]
LOCAL_SYMBOL: b2Body.cpp<336:2> [b2Body.cpp <336:2 336:2>]
LOCAL_SYMBOL: b2Body.cpp<336:2> [b2Body.cpp <342:2 342:2>]
LOCAL_SYMBOL: b2Body.cpp<344:2> [b2Body.cpp <344:2 344:2>]
LOCAL_SYMBOL: b2Body.cpp<344:2> [b2Body.cpp <347:2 347:2>]
LOCAL_SYMBOL: b2Body.cpp<350:9> [b2Body.cpp <350:9 350:17>]
LOCAL_SYMBOL: b2Body.cpp<350:9> [b2Body.cpp <355:61 355:69>]
LOCAL_SYMBOL: b2Body.cpp<358:44> [b2Body.cpp <358:44 358:51>]
LOCAL_SYMBOL: b2Body.cpp<358:44> [b2Body.cpp <375:11 375:18>]
LOCAL_SYMBOL: b2Body.cpp<358:44> [b2Body.cpp <383:6 383:13>]
LOCAL_SYMBOL: b2Body.cpp<358:44> [b2Body.cpp <385:9 385:16>]
LOCAL_SYMBOL: b2Body.cpp<358:44> [b2Body.cpp <385:38 385:45>]
LOCAL_SYMBOL: b2Body.cpp<358:44> [b2Body.cpp <385:56 385:63>]
LOCAL_SYMBOL: b2Body.cpp<358:44> [b2Body.cpp <392:25 392:32>]
LOCAL_SYMBOL: b2Body.cpp<359:1> [b2Body.cpp <359:1 359:1>]
LOCAL_SYMBOL: b2Body.cpp<359:1> [b2Body.cpp <397:1 397:1>]
LOCAL_SYMBOL: b2Body.cpp<362:2> [b2Body.cpp <362:2 362:2>]
LOCAL_SYMBOL: b2Body.cpp<362:2> [b2Body.cpp <364:2 364:2>]
LOCAL_SYMBOL: b2Body.cpp<367:2> [b2Body.cpp <367:2 367:2>]
LOCAL_SYMBOL: b2Body.cpp<367:2> [b2Body.cpp <369:2 369:2>]
LOCAL_SYMBOL: b2Body.cpp<377:2> [b2Body.cpp <377:2 377:2>]
LOCAL_SYMBOL: b2Body.cpp<377:2> [b2Body.cpp <379:2 379:2>]
LOCAL_SYMBOL: b2Body.cpp<37:2> [b2Body.cpp <37:2 37:2>]
LOCAL_SYMBOL: b2Body.cpp<37:2> [b2Body.cpp <39:2 39:2>]
LOCAL_SYMBOL: b2Body.cpp<384:2> [b2Body.cpp <384:2 384:2>]
LOCAL_SYMBOL: b2Body.cpp<384:2> [b2Body.cpp <388:2 388:2>]
LOCAL_SYMBOL: b2Body.cpp<391:9> [b2Body.cpp <391:9 391:17>]
LOCAL_SYMBOL: b2Body.cpp<391:9> [b2Body.cpp <396:61 396:69>]
LOCAL_SYMBOL: b2Body.cpp<399:42> [b2Body.cpp <399:42 399:46>]
LOCAL_SYMBOL: b2Body.cpp<399:42> [b2Body.cpp <402:34 402:38>]
LOCAL_SYMBOL: b2Body.cpp<399:42> [b2Body.cpp <410:20 410:24>]
LOCAL_SYMBOL: b2Body.cpp<400:1> [b2Body.cpp <400:1 400:1>]
LOCAL_SYMBOL: b2Body.cpp<400:1> [b2Body.cpp <420:1 420:1>]
LOCAL_SYMBOL: b2Body.cpp<403:2> [b2Body.cpp <403:2 403:2>]
LOCAL_SYMBOL: b2Body.cpp<403:2> [b2Body.cpp <405:2 405:2>]
LOCAL_SYMBOL: b2Body.cpp<408:20> [b2Body.cpp <408:20 408:21>]
LOCAL_SYMBOL: b2Body.cpp<408:20> [b2Body.cpp <408:38 408:39>]
LOCAL_SYMBOL: b2Body.cpp<408:20> [b2Body.cpp <408:42 408:43>]
LOCAL_SYMBOL: b2Body.cpp<408:20> [b2Body.cpp <408:47 408:48>]
LOCAL_SYMBOL: b2Body.cpp<408:20> [b2Body.cpp <410:7 410:8>]
LOCAL_SYMBOL: b2Body.cpp<408:20> [b2Body.cpp <412:8 412:9>]
LOCAL_SYMBOL: b2Body.cpp<409:2> [b2Body.cpp <409:2 409:2>]
LOCAL_SYMBOL: b2Body.cpp<409:2> [b2Body.cpp <417:2 417:2>]
LOCAL_SYMBOL: b2Body.cpp<411:3> [b2Body.cpp <411:3 411:3>]
LOCAL_SYMBOL: b2Body.cpp<411:3> [b2Body.cpp <416:3 416:3>]
LOCAL_SYMBOL: b2Body.cpp<413:4> [b2Body.cpp <413:4 413:4>]
LOCAL_SYMBOL: b2Body.cpp<413:4> [b2Body.cpp <415:4 415:4>]
LOCAL_SYMBOL: b2Body.cpp<41:2> [b2Body.cpp <41:2 41:2>]
LOCAL_SYMBOL: b2Body.cpp<41:2> [b2Body.cpp <43:2 43:2>]
LOCAL_SYMBOL: b2Body.cpp<422:41> [b2Body.cpp <422:41 422:48>]
LOCAL_SYMBOL: b2Body.cpp<422:41> [b2Body.cpp <431:11 431:18>]
LOCAL_SYMBOL: b2Body.cpp<422:59> [b2Body.cpp <422:59 422:63>]
LOCAL_SYMBOL: b2Body.cpp<422:59> [b2Body.cpp <430:13 430:17>]
LOCAL_SYMBOL: b2Body.cpp<422:59> [b2Body.cpp <434:14 434:18>]
LOCAL_SYMBOL: b2Body.cpp<422:59> [b2Body.cpp <437:15 437:19>]
LOCAL_SYMBOL: b2Body.cpp<423:1> [b2Body.cpp <423:1 423:1>]
LOCAL_SYMBOL: b2Body.cpp<423:1> [b2Body.cpp <444:1 444:1>]
LOCAL_SYMBOL: b2Body.cpp<426:2> [b2Body.cpp <426:2 426:2>]
LOCAL_SYMBOL: b2Body.cpp<426:2> [b2Body.cpp <428:2 428:2>]
LOCAL_SYMBOL: b2Body.cpp<439:16> [b2Body.cpp <439:16 439:25>]
LOCAL_SYMBOL: b2Body.cpp<439:16> [b2Body.cpp <442:18 442:27>]
LOCAL_SYMBOL: b2Body.cpp<440:18> [b2Body.cpp <440:18 440:18>]
LOCAL_SYMBOL: b2Body.cpp<440:18> [b2Body.cpp <440:37 440:37>]
LOCAL_SYMBOL: b2Body.cpp<440:18> [b2Body.cpp <440:40 440:40>]
LOCAL_SYMBOL: b2Body.cpp<440:18> [b2Body.cpp <440:44 440:44>]
LOCAL_SYMBOL: b2Body.cpp<440:18> [b2Body.cpp <442:3 442:3>]
LOCAL_SYMBOL: b2Body.cpp<441:2> [b2Body.cpp <441:2 441:2>]
LOCAL_SYMBOL: b2Body.cpp<441:2> [b2Body.cpp <443:2 443:2>]
LOCAL_SYMBOL: b2Body.cpp<447:1> [b2Body.cpp <447:1 447:1>]
LOCAL_SYMBOL: b2Body.cpp<447:1> [b2Body.cpp <457:1 457:1>]
LOCAL_SYMBOL: b2Body.cpp<448:14> [b2Body.cpp <448:14 448:16>]
LOCAL_SYMBOL: b2Body.cpp<448:14> [b2Body.cpp <449:2 449:4>]
LOCAL_SYMBOL: b2Body.cpp<448:14> [b2Body.cpp <450:2 450:4>]
LOCAL_SYMBOL: b2Body.cpp<448:14> [b2Body.cpp <450:29 450:31>]
LOCAL_SYMBOL: b2Body.cpp<448:14> [b2Body.cpp <455:30 455:32>]
LOCAL_SYMBOL: b2Body.cpp<452:16> [b2Body.cpp <452:16 452:25>]
LOCAL_SYMBOL: b2Body.cpp<452:16> [b2Body.cpp <455:18 455:27>]
LOCAL_SYMBOL: b2Body.cpp<453:18> [b2Body.cpp <453:18 453:18>]
LOCAL_SYMBOL: b2Body.cpp<453:18> [b2Body.cpp <453:37 453:37>]
LOCAL_SYMBOL: b2Body.cpp<453:18> [b2Body.cpp <453:40 453:40>]
LOCAL_SYMBOL: b2Body.cpp<453:18> [b2Body.cpp <453:44 453:44>]
LOCAL_SYMBOL: b2Body.cpp<453:18> [b2Body.cpp <455:3 455:3>]
LOCAL_SYMBOL: b2Body.cpp<454:2> [b2Body.cpp <454:2 454:2>]
LOCAL_SYMBOL: b2Body.cpp<454:2> [b2Body.cpp <456:2 456:2>]
LOCAL_SYMBOL: b2Body.cpp<459:29> [b2Body.cpp <459:29 459:32>]
LOCAL_SYMBOL: b2Body.cpp<459:29> [b2Body.cpp <463:6 463:9>]
LOCAL_SYMBOL: b2Body.cpp<459:29> [b2Body.cpp <468:6 468:9>]
LOCAL_SYMBOL: b2Body.cpp<45:2> [b2Body.cpp <45:2 45:2>]
LOCAL_SYMBOL: b2Body.cpp<45:2> [b2Body.cpp <47:2 47:2>]
LOCAL_SYMBOL: b2Body.cpp<460:1> [b2Body.cpp <460:1 460:1>]
LOCAL_SYMBOL: b2Body.cpp<460:1> [b2Body.cpp <502:1 502:1>]
LOCAL_SYMBOL: b2Body.cpp<464:2> [b2Body.cpp <464:2 464:2>]
LOCAL_SYMBOL: b2Body.cpp<464:2> [b2Body.cpp <466:2 466:2>]
LOCAL_SYMBOL: b2Body.cpp<469:2> [b2Body.cpp <469:2 469:2>]
LOCAL_SYMBOL: b2Body.cpp<469:2> [b2Body.cpp <480:2 480:2>]
LOCAL_SYMBOL: b2Body.cpp<473:17> [b2Body.cpp <473:17 473:26>]
LOCAL_SYMBOL: b2Body.cpp<473:17> [b2Body.cpp <476:21 476:30>]
LOCAL_SYMBOL: b2Body.cpp<474:19> [b2Body.cpp <474:19 474:19>]
LOCAL_SYMBOL: b2Body.cpp<474:19> [b2Body.cpp <474:38 474:38>]
LOCAL_SYMBOL: b2Body.cpp<474:19> [b2Body.cpp <474:41 474:41>]
LOCAL_SYMBOL: b2Body.cpp<474:19> [b2Body.cpp <474:45 474:45>]
LOCAL_SYMBOL: b2Body.cpp<474:19> [b2Body.cpp <476:4 476:4>]
LOCAL_SYMBOL: b2Body.cpp<475:3> [b2Body.cpp <475:3 475:3>]
LOCAL_SYMBOL: b2Body.cpp<475:3> [b2Body.cpp <477:3 477:3>]
LOCAL_SYMBOL: b2Body.cpp<482:2> [b2Body.cpp <482:2 482:2>]
LOCAL_SYMBOL: b2Body.cpp<482:2> [b2Body.cpp <501:2 501:2>]
LOCAL_SYMBOL: b2Body.cpp<486:17> [b2Body.cpp <486:17 486:26>]
LOCAL_SYMBOL: b2Body.cpp<486:17> [b2Body.cpp <489:22 489:31>]
LOCAL_SYMBOL: b2Body.cpp<487:19> [b2Body.cpp <487:19 487:19>]
LOCAL_SYMBOL: b2Body.cpp<487:19> [b2Body.cpp <487:38 487:38>]
LOCAL_SYMBOL: b2Body.cpp<487:19> [b2Body.cpp <487:41 487:41>]
LOCAL_SYMBOL: b2Body.cpp<487:19> [b2Body.cpp <487:45 487:45>]
LOCAL_SYMBOL: b2Body.cpp<487:19> [b2Body.cpp <489:4 489:4>]
LOCAL_SYMBOL: b2Body.cpp<488:3> [b2Body.cpp <488:3 488:3>]
LOCAL_SYMBOL: b2Body.cpp<488:3> [b2Body.cpp <490:3 490:3>]
LOCAL_SYMBOL: b2Body.cpp<493:18> [b2Body.cpp <493:18 493:19>]
LOCAL_SYMBOL: b2Body.cpp<493:18> [b2Body.cpp <494:10 494:11>]
LOCAL_SYMBOL: b2Body.cpp<493:18> [b2Body.cpp <496:25 496:26>]
LOCAL_SYMBOL: b2Body.cpp<493:18> [b2Body.cpp <497:4 497:5>]
LOCAL_SYMBOL: b2Body.cpp<493:18> [b2Body.cpp <497:9 497:10>]
LOCAL_SYMBOL: b2Body.cpp<495:3> [b2Body.cpp <495:3 495:3>]
LOCAL_SYMBOL: b2Body.cpp<495:3> [b2Body.cpp <499:3 499:3>]
LOCAL_SYMBOL: b2Body.cpp<496:19> [b2Body.cpp <496:19 496:21>]
LOCAL_SYMBOL: b2Body.cpp<496:19> [b2Body.cpp <498:38 498:40>]
LOCAL_SYMBOL: b2Body.cpp<49:2> [b2Body.cpp <49:2 49:2>]
LOCAL_SYMBOL: b2Body.cpp<49:2> [b2Body.cpp <51:2 51:2>]
LOCAL_SYMBOL: b2Body.cpp<504:36> [b2Body.cpp <504:36 504:39>]
LOCAL_SYMBOL: b2Body.cpp<504:36> [b2Body.cpp <507:16 507:19>]
LOCAL_SYMBOL: b2Body.cpp<504:36> [b2Body.cpp <512:6 512:9>]
LOCAL_SYMBOL: b2Body.cpp<505:1> [b2Body.cpp <505:1 505:1>]
LOCAL_SYMBOL: b2Body.cpp<505:1> [b2Body.cpp <524:1 524:1>]
LOCAL_SYMBOL: b2Body.cpp<506:7> [b2Body.cpp <506:7 506:12>]
LOCAL_SYMBOL: b2Body.cpp<506:7> [b2Body.cpp <507:6 507:11>]
LOCAL_SYMBOL: b2Body.cpp<508:2> [b2Body.cpp <508:2 508:2>]
LOCAL_SYMBOL: b2Body.cpp<508:2> [b2Body.cpp <510:2 510:2>]
LOCAL_SYMBOL: b2Body.cpp<513:2> [b2Body.cpp <513:2 513:2>]
LOCAL_SYMBOL: b2Body.cpp<513:2> [b2Body.cpp <515:2 515:2>]
LOCAL_SYMBOL: b2Body.cpp<517:2> [b2Body.cpp <517:2 517:2>]
LOCAL_SYMBOL: b2Body.cpp<517:2> [b2Body.cpp <519:2 519:2>]
LOCAL_SYMBOL: b2Body.cpp<527:1> [b2Body.cpp <527:1 527:1>]
LOCAL_SYMBOL: b2Body.cpp<527:1> [b2Body.cpp <554:1 554:1>]
LOCAL_SYMBOL: b2Body.cpp<528:8> [b2Body.cpp <528:8 528:16>]
LOCAL_SYMBOL: b2Body.cpp<528:8> [b2Body.cpp <550:11 550:19>]
LOCAL_SYMBOL: b2Body.cpp<53:2> [b2Body.cpp <53:2 53:2>]
LOCAL_SYMBOL: b2Body.cpp<53:2> [b2Body.cpp <55:2 55:2>]
LOCAL_SYMBOL: b2Body.cpp<547:18> [b2Body.cpp <547:18 547:18>]
LOCAL_SYMBOL: b2Body.cpp<547:18> [b2Body.cpp <547:37 547:37>]
LOCAL_SYMBOL: b2Body.cpp<547:18> [b2Body.cpp <547:40 547:40>]
LOCAL_SYMBOL: b2Body.cpp<547:18> [b2Body.cpp <547:44 547:44>]
LOCAL_SYMBOL: b2Body.cpp<547:18> [b2Body.cpp <550:3 550:3>]
LOCAL_SYMBOL: b2Body.cpp<548:2> [b2Body.cpp <548:2 548:2>]
LOCAL_SYMBOL: b2Body.cpp<548:2> [b2Body.cpp <552:2 552:2>]
LOCAL_SYMBOL: b2Body.cpp<89:2> [b2Body.cpp <89:2 89:2>]
LOCAL_SYMBOL: b2Body.cpp<89:2> [b2Body.cpp <92:2 92:2>]
LOCAL_SYMBOL: b2Body.cpp<94:2> [b2Body.cpp <94:2 94:2>]
LOCAL_SYMBOL: b2Body.cpp<94:2> [b2Body.cpp <97:2 97:2>]
LOCAL_SYMBOL: b2Body.h<129:1> [b2Body.h <129:1 129:1>]
LOCAL_SYMBOL: b2Body.h<129:1> [b2Body.h <473:1 473:1>]
LOCAL_SYMBOL: b2Body.h<138:47> [b2Body.h <138:47 138:49>]
LOCAL_SYMBOL: b2Body.h<147:42> [b2Body.h <147:42 147:46>]
LOCAL_SYMBOL: b2Body.h<147:57> [b2Body.h <147:57 147:63>]
LOCAL_SYMBOL: b2Body.h<156:33> [b2Body.h <156:33 156:39>]
LOCAL_SYMBOL: b2Body.h<163:34> [b2Body.h <163:34 163:41>]
LOCAL_SYMBOL: b2Body.h<163:52> [b2Body.h <163:52 163:56>]
LOCAL_SYMBOL: b2Body.h<185:39> [b2Body.h <185:39 185:39>]
LOCAL_SYMBOL: b2Body.h<193:34> [b2Body.h <193:34 193:38>]
LOCAL_SYMBOL: b2Body.h<205:32> [b2Body.h <205:32 205:36>]
LOCAL_SYMBOL: b2Body.h<205:53> [b2Body.h <205:53 205:57>]
LOCAL_SYMBOL: b2Body.h<205:65> [b2Body.h <205:65 205:68>]
LOCAL_SYMBOL: b2Body.h<210:40> [b2Body.h <210:40 210:44>]
LOCAL_SYMBOL: b2Body.h<210:52> [b2Body.h <210:52 210:55>]
LOCAL_SYMBOL: b2Body.h<216:27> [b2Body.h <216:27 216:32>]
LOCAL_SYMBOL: b2Body.h<216:40> [b2Body.h <216:40 216:43>]
LOCAL_SYMBOL: b2Body.h<224:40> [b2Body.h <224:40 224:46>]
LOCAL_SYMBOL: b2Body.h<224:63> [b2Body.h <224:63 224:67>]
LOCAL_SYMBOL: b2Body.h<224:75> [b2Body.h <224:75 224:78>]
LOCAL_SYMBOL: b2Body.h<229:48> [b2Body.h <229:48 229:54>]
LOCAL_SYMBOL: b2Body.h<229:62> [b2Body.h <229:62 229:65>]
LOCAL_SYMBOL: b2Body.h<234:35> [b2Body.h <234:35 234:41>]
LOCAL_SYMBOL: b2Body.h<234:49> [b2Body.h <234:49 234:52>]
LOCAL_SYMBOL: b2Body.h<246:31> [b2Body.h <246:31 246:34>]
LOCAL_SYMBOL: b2Body.h<253:37> [b2Body.h <253:37 253:40>]
LOCAL_SYMBOL: b2Body.h<263:37> [b2Body.h <263:37 263:46>]
LOCAL_SYMBOL: b2Body.h<268:38> [b2Body.h <268:38 268:48>]
LOCAL_SYMBOL: b2Body.h<273:37> [b2Body.h <273:37 273:46>]
LOCAL_SYMBOL: b2Body.h<278:38> [b2Body.h <278:38 278:48>]
LOCAL_SYMBOL: b2Body.h<283:55> [b2Body.h <283:55 283:64>]
LOCAL_SYMBOL: b2Body.h<288:55> [b2Body.h <288:55 288:64>]
LOCAL_SYMBOL: b2Body.h<294:32> [b2Body.h <294:32 294:44>]
LOCAL_SYMBOL: b2Body.h<300:33> [b2Body.h <300:33 300:46>]
LOCAL_SYMBOL: b2Body.h<306:31> [b2Body.h <306:31 306:35>]
LOCAL_SYMBOL: b2Body.h<309:26> [b2Body.h <309:26 309:29>]
LOCAL_SYMBOL: b2Body.h<315:22> [b2Body.h <315:22 315:25>]
LOCAL_SYMBOL: b2Body.h<322:31> [b2Body.h <322:31 322:34>]
LOCAL_SYMBOL: b2Body.h<330:21> [b2Body.h <330:21 330:24>]
LOCAL_SYMBOL: b2Body.h<349:22> [b2Body.h <349:22 349:25>]
LOCAL_SYMBOL: b2Body.h<356:29> [b2Body.h <356:29 356:32>]
LOCAL_SYMBOL: b2Body.h<383:25> [b2Body.h <383:25 383:28>]
LOCAL_SYMBOL: b2Body.h<40:1> [b2Body.h <40:1 40:1>]
LOCAL_SYMBOL: b2Body.h<40:1> [b2Body.h <47:1 47:1>]
LOCAL_SYMBOL: b2Body.h<414:2> [b2Body.h <414:2 414:2>]
LOCAL_SYMBOL: b2Body.h<414:2> [b2Body.h <422:2 422:2>]
LOCAL_SYMBOL: b2Body.h<424:26> [b2Body.h <424:26 424:27>]
LOCAL_SYMBOL: b2Body.h<424:39> [b2Body.h <424:39 424:43>]
LOCAL_SYMBOL: b2Body.h<432:35> [b2Body.h <432:35 432:39>]
LOCAL_SYMBOL: b2Body.h<434:23> [b2Body.h <434:23 434:23>]
LOCAL_SYMBOL: b2Body.h<476:1> [b2Body.h <476:1 476:1>]
LOCAL_SYMBOL: b2Body.h<476:1> [b2Body.h <478:1 478:1>]
LOCAL_SYMBOL: b2Body.h<481:1> [b2Body.h <481:1 481:1>]
LOCAL_SYMBOL: b2Body.h<481:1> [b2Body.h <483:1 483:1>]
LOCAL_SYMBOL: b2Body.h<486:1> [b2Body.h <486:1 486:1>]
LOCAL_SYMBOL: b2Body.h<486:1> [b2Body.h <488:1 488:1>]
LOCAL_SYMBOL: b2Body.h<491:1> [b2Body.h <491:1 491:1>]
LOCAL_SYMBOL: b2Body.h<491:1> [b2Body.h <493:1 493:1>]
LOCAL_SYMBOL: b2Body.h<496:1> [b2Body.h <496:1 496:1>]
LOCAL_SYMBOL: b2Body.h<496:1> [b2Body.h <498:1 498:1>]
LOCAL_SYMBOL: b2Body.h<501:1> [b2Body.h <501:1 501:1>]
LOCAL_SYMBOL: b2Body.h<501:1> [b2Body.h <503:1 503:1>]
LOCAL_SYMBOL: b2Body.h<505:53> [b2Body.h <505:53 505:53>]
LOCAL_SYMBOL: b2Body.h<505:53> [b2Body.h <512:12 512:12>]
LOCAL_SYMBOL: b2Body.h<505:53> [b2Body.h <512:14 512:14>]
LOCAL_SYMBOL: b2Body.h<505:53> [b2Body.h <517:21 517:21>]
LOCAL_SYMBOL: b2Body.h<506:1> [b2Body.h <506:1 506:1>]
LOCAL_SYMBOL: b2Body.h<506:1> [b2Body.h <518:1 518:1>]
LOCAL_SYMBOL: b2Body.h<508:2> [b2Body.h <508:2 508:2>]
LOCAL_SYMBOL: b2Body.h<508:2> [b2Body.h <510:2 510:2>]
LOCAL_SYMBOL: b2Body.h<513:2> [b2Body.h <513:2 513:2>]
LOCAL_SYMBOL: b2Body.h<513:2> [b2Body.h <515:2 515:2>]
LOCAL_SYMBOL: b2Body.h<521:1> [b2Body.h <521:1 521:1>]
LOCAL_SYMBOL: b2Body.h<521:1> [b2Body.h <523:1 523:1>]
LOCAL_SYMBOL: b2Body.h<525:48> [b2Body.h <525:48 525:48>]
LOCAL_SYMBOL: b2Body.h<525:48> [b2Body.h <532:6 532:6>]
LOCAL_SYMBOL: b2Body.h<525:48> [b2Body.h <532:10 532:10>]
LOCAL_SYMBOL: b2Body.h<525:48> [b2Body.h <537:22 537:22>]
LOCAL_SYMBOL: b2Body.h<526:1> [b2Body.h <526:1 526:1>]
LOCAL_SYMBOL: b2Body.h<526:1> [b2Body.h <538:1 538:1>]
LOCAL_SYMBOL: b2Body.h<528:2> [b2Body.h <528:2 528:2>]
LOCAL_SYMBOL: b2Body.h<528:2> [b2Body.h <530:2 530:2>]
LOCAL_SYMBOL: b2Body.h<52:1> [b2Body.h <52:1 52:1>]
LOCAL_SYMBOL: b2Body.h<52:1> [b2Body.h <125:1 125:1>]
LOCAL_SYMBOL: b2Body.h<533:2> [b2Body.h <533:2 533:2>]
LOCAL_SYMBOL: b2Body.h<533:2> [b2Body.h <535:2 535:2>]
LOCAL_SYMBOL: b2Body.h<541:1> [b2Body.h <541:1 541:1>]
LOCAL_SYMBOL: b2Body.h<541:1> [b2Body.h <543:1 543:1>]
LOCAL_SYMBOL: b2Body.h<546:1> [b2Body.h <546:1 546:1>]
LOCAL_SYMBOL: b2Body.h<546:1> [b2Body.h <548:1 548:1>]
LOCAL_SYMBOL: b2Body.h<551:1> [b2Body.h <551:1 551:1>]
LOCAL_SYMBOL: b2Body.h<551:1> [b2Body.h <553:1 553:1>]
LOCAL_SYMBOL: b2Body.h<555:45> [b2Body.h <555:45 555:48>]
LOCAL_SYMBOL: b2Body.h<555:45> [b2Body.h <557:2 557:5>]
LOCAL_SYMBOL: b2Body.h<555:45> [b2Body.h <558:2 558:5>]
LOCAL_SYMBOL: b2Body.h<555:45> [b2Body.h <559:2 559:5>]
LOCAL_SYMBOL: b2Body.h<556:1> [b2Body.h <556:1 556:1>]
LOCAL_SYMBOL: b2Body.h<556:1> [b2Body.h <560:1 560:1>]
LOCAL_SYMBOL: b2Body.h<55:2> [b2Body.h <55:2 55:2>]
LOCAL_SYMBOL: b2Body.h<55:2> [b2Body.h <70:2 70:2>]
LOCAL_SYMBOL: b2Body.h<562:51> [b2Body.h <562:51 562:60>]
LOCAL_SYMBOL: b2Body.h<562:51> [b2Body.h <564:21 564:30>]
LOCAL_SYMBOL: b2Body.h<563:1> [b2Body.h <563:1 563:1>]
LOCAL_SYMBOL: b2Body.h<563:1> [b2Body.h <565:1 565:1>]
LOCAL_SYMBOL: b2Body.h<567:52> [b2Body.h <567:52 567:62>]
LOCAL_SYMBOL: b2Body.h<567:52> [b2Body.h <569:23 569:33>]
LOCAL_SYMBOL: b2Body.h<568:1> [b2Body.h <568:1 568:1>]
LOCAL_SYMBOL: b2Body.h<568:1> [b2Body.h <570:1 570:1>]
LOCAL_SYMBOL: b2Body.h<572:51> [b2Body.h <572:51 572:60>]
LOCAL_SYMBOL: b2Body.h<572:51> [b2Body.h <574:22 574:31>]
LOCAL_SYMBOL: b2Body.h<573:1> [b2Body.h <573:1 573:1>]
LOCAL_SYMBOL: b2Body.h<573:1> [b2Body.h <575:1 575:1>]
LOCAL_SYMBOL: b2Body.h<577:52> [b2Body.h <577:52 577:62>]
LOCAL_SYMBOL: b2Body.h<577:52> [b2Body.h <579:24 579:34>]
LOCAL_SYMBOL: b2Body.h<578:1> [b2Body.h <578:1 578:1>]
LOCAL_SYMBOL: b2Body.h<578:1> [b2Body.h <580:1 580:1>]
LOCAL_SYMBOL: b2Body.h<582:69> [b2Body.h <582:69 582:78>]
LOCAL_SYMBOL: b2Body.h<582:69> [b2Body.h <584:55 584:64>]
LOCAL_SYMBOL: b2Body.h<583:1> [b2Body.h <583:1 583:1>]
LOCAL_SYMBOL: b2Body.h<583:1> [b2Body.h <585:1 585:1>]
LOCAL_SYMBOL: b2Body.h<587:69> [b2Body.h <587:69 587:78>]
LOCAL_SYMBOL: b2Body.h<587:69> [b2Body.h <589:55 589:64>]
LOCAL_SYMBOL: b2Body.h<588:1> [b2Body.h <588:1 588:1>]
LOCAL_SYMBOL: b2Body.h<588:1> [b2Body.h <590:1 590:1>]
LOCAL_SYMBOL: b2Body.h<593:1> [b2Body.h <593:1 593:1>]
LOCAL_SYMBOL: b2Body.h<593:1> [b2Body.h <595:1 595:1>]
LOCAL_SYMBOL: b2Body.h<597:46> [b2Body.h <597:46 597:58>]
LOCAL_SYMBOL: b2Body.h<597:46> [b2Body.h <599:20 599:32>]
LOCAL_SYMBOL: b2Body.h<598:1> [b2Body.h <598:1 598:1>]
LOCAL_SYMBOL: b2Body.h<598:1> [b2Body.h <600:1 600:1>]
LOCAL_SYMBOL: b2Body.h<603:1> [b2Body.h <603:1 603:1>]
LOCAL_SYMBOL: b2Body.h<603:1> [b2Body.h <605:1 605:1>]
LOCAL_SYMBOL: b2Body.h<607:47> [b2Body.h <607:47 607:60>]
LOCAL_SYMBOL: b2Body.h<607:47> [b2Body.h <609:21 609:34>]
LOCAL_SYMBOL: b2Body.h<608:1> [b2Body.h <608:1 608:1>]
LOCAL_SYMBOL: b2Body.h<608:1> [b2Body.h <610:1 610:1>]
LOCAL_SYMBOL: b2Body.h<613:1> [b2Body.h <613:1 613:1>]
LOCAL_SYMBOL: b2Body.h<613:1> [b2Body.h <615:1 615:1>]
LOCAL_SYMBOL: b2Body.h<617:45> [b2Body.h <617:45 617:49>]
LOCAL_SYMBOL: b2Body.h<617:45> [b2Body.h <619:19 619:23>]
LOCAL_SYMBOL: b2Body.h<618:1> [b2Body.h <618:1 618:1>]
LOCAL_SYMBOL: b2Body.h<618:1> [b2Body.h <620:1 620:1>]
LOCAL_SYMBOL: b2Body.h<622:36> [b2Body.h <622:36 622:39>]
LOCAL_SYMBOL: b2Body.h<622:36> [b2Body.h <624:6 624:9>]
LOCAL_SYMBOL: b2Body.h<623:1> [b2Body.h <623:1 623:1>]
LOCAL_SYMBOL: b2Body.h<623:1> [b2Body.h <632:1 632:1>]
LOCAL_SYMBOL: b2Body.h<625:2> [b2Body.h <625:2 625:2>]
LOCAL_SYMBOL: b2Body.h<625:2> [b2Body.h <627:2 627:2>]
LOCAL_SYMBOL: b2Body.h<629:2> [b2Body.h <629:2 629:2>]
LOCAL_SYMBOL: b2Body.h<629:2> [b2Body.h <631:2 631:2>]
LOCAL_SYMBOL: b2Body.h<635:1> [b2Body.h <635:1 635:1>]
LOCAL_SYMBOL: b2Body.h<635:1> [b2Body.h <637:1 637:1>]
LOCAL_SYMBOL: b2Body.h<639:35> [b2Body.h <639:35 639:38>]
LOCAL_SYMBOL: b2Body.h<639:35> [b2Body.h <641:6 641:9>]
LOCAL_SYMBOL: b2Body.h<640:1> [b2Body.h <640:1 640:1>]
LOCAL_SYMBOL: b2Body.h<640:1> [b2Body.h <655:1 655:1>]
LOCAL_SYMBOL: b2Body.h<642:2> [b2Body.h <642:2 642:2>]
LOCAL_SYMBOL: b2Body.h<642:2> [b2Body.h <645:2 645:2>]
LOCAL_SYMBOL: b2Body.h<647:2> [b2Body.h <647:2 647:2>]
LOCAL_SYMBOL: b2Body.h<647:2> [b2Body.h <654:2 654:2>]
LOCAL_SYMBOL: b2Body.h<658:1> [b2Body.h <658:1 658:1>]
LOCAL_SYMBOL: b2Body.h<658:1> [b2Body.h <660:1 660:1>]
LOCAL_SYMBOL: b2Body.h<663:1> [b2Body.h <663:1 663:1>]
LOCAL_SYMBOL: b2Body.h<663:1> [b2Body.h <665:1 665:1>]
LOCAL_SYMBOL: b2Body.h<668:1> [b2Body.h <668:1 668:1>]
LOCAL_SYMBOL: b2Body.h<668:1> [b2Body.h <670:1 670:1>]
LOCAL_SYMBOL: b2Body.h<672:45> [b2Body.h <672:45 672:48>]
LOCAL_SYMBOL: b2Body.h<672:45> [b2Body.h <674:6 674:9>]
LOCAL_SYMBOL: b2Body.h<673:1> [b2Body.h <673:1 673:1>]
LOCAL_SYMBOL: b2Body.h<673:1> [b2Body.h <683:1 683:1>]
LOCAL_SYMBOL: b2Body.h<675:2> [b2Body.h <675:2 675:2>]
LOCAL_SYMBOL: b2Body.h<675:2> [b2Body.h <677:2 677:2>]
LOCAL_SYMBOL: b2Body.h<679:2> [b2Body.h <679:2 679:2>]
LOCAL_SYMBOL: b2Body.h<679:2> [b2Body.h <682:2 682:2>]
LOCAL_SYMBOL: b2Body.h<686:1> [b2Body.h <686:1 686:1>]
LOCAL_SYMBOL: b2Body.h<686:1> [b2Body.h <688:1 688:1>]
LOCAL_SYMBOL: b2Body.h<691:1> [b2Body.h <691:1 691:1>]
LOCAL_SYMBOL: b2Body.h<691:1> [b2Body.h <693:1 693:1>]
LOCAL_SYMBOL: b2Body.h<696:1> [b2Body.h <696:1 696:1>]
LOCAL_SYMBOL: b2Body.h<696:1> [b2Body.h <698:1 698:1>]
LOCAL_SYMBOL: b2Body.h<701:1> [b2Body.h <701:1 701:1>]
LOCAL_SYMBOL: b2Body.h<701:1> [b2Body.h <703:1 703:1>]
LOCAL_SYMBOL: b2Body.h<706:1> [b2Body.h <706:1 706:1>]
LOCAL_SYMBOL: b2Body.h<706:1> [b2Body.h <708:1 708:1>]
LOCAL_SYMBOL: b2Body.h<711:1> [b2Body.h <711:1 711:1>]
LOCAL_SYMBOL: b2Body.h<711:1> [b2Body.h <713:1 713:1>]
LOCAL_SYMBOL: b2Body.h<716:1> [b2Body.h <716:1 716:1>]
LOCAL_SYMBOL: b2Body.h<716:1> [b2Body.h <718:1 718:1>]
LOCAL_SYMBOL: b2Body.h<721:1> [b2Body.h <721:1 721:1>]
LOCAL_SYMBOL: b2Body.h<721:1> [b2Body.h <723:1 723:1>]
LOCAL_SYMBOL: b2Body.h<726:1> [b2Body.h <726:1 726:1>]
LOCAL_SYMBOL: b2Body.h<726:1> [b2Body.h <728:1 728:1>]
LOCAL_SYMBOL: b2Body.h<730:39> [b2Body.h <730:39 730:42>]
LOCAL_SYMBOL: b2Body.h<730:39> [b2Body.h <732:15 732:18>]
LOCAL_SYMBOL: b2Body.h<731:1> [b2Body.h <731:1 731:1>]
LOCAL_SYMBOL: b2Body.h<731:1> [b2Body.h <733:1 733:1>]
LOCAL_SYMBOL: b2Body.h<736:1> [b2Body.h <736:1 736:1>]
LOCAL_SYMBOL: b2Body.h<736:1> [b2Body.h <738:1 738:1>]
LOCAL_SYMBOL: b2Body.h<740:46> [b2Body.h <740:46 740:50>]
LOCAL_SYMBOL: b2Body.h<740:46> [b2Body.h <755:14 755:18>]
LOCAL_SYMBOL: b2Body.h<740:46> [b2Body.h <756:42 756:46>]
LOCAL_SYMBOL: b2Body.h<740:67> [b2Body.h <740:67 740:71>]
LOCAL_SYMBOL: b2Body.h<740:67> [b2Body.h <756:23 756:27>]
LOCAL_SYMBOL: b2Body.h<740:79> [b2Body.h <740:79 740:82>]
LOCAL_SYMBOL: b2Body.h<740:79> [b2Body.h <747:6 747:9>]
LOCAL_SYMBOL: b2Body.h<741:1> [b2Body.h <741:1 741:1>]
LOCAL_SYMBOL: b2Body.h<741:1> [b2Body.h <758:1 758:1>]
LOCAL_SYMBOL: b2Body.h<743:2> [b2Body.h <743:2 743:2>]
LOCAL_SYMBOL: b2Body.h<743:2> [b2Body.h <745:2 745:2>]
LOCAL_SYMBOL: b2Body.h<748:2> [b2Body.h <748:2 748:2>]
LOCAL_SYMBOL: b2Body.h<748:2> [b2Body.h <750:2 750:2>]
LOCAL_SYMBOL: b2Body.h<754:2> [b2Body.h <754:2 754:2>]
LOCAL_SYMBOL: b2Body.h<754:2> [b2Body.h <757:2 757:2>]
LOCAL_SYMBOL: b2Body.h<760:54> [b2Body.h <760:54 760:58>]
LOCAL_SYMBOL: b2Body.h<760:54> [b2Body.h <775:14 775:18>]
LOCAL_SYMBOL: b2Body.h<760:66> [b2Body.h <760:66 760:69>]
LOCAL_SYMBOL: b2Body.h<760:66> [b2Body.h <767:6 767:9>]
LOCAL_SYMBOL: b2Body.h<761:1> [b2Body.h <761:1 761:1>]
LOCAL_SYMBOL: b2Body.h<761:1> [b2Body.h <777:1 777:1>]
LOCAL_SYMBOL: b2Body.h<763:2> [b2Body.h <763:2 763:2>]
LOCAL_SYMBOL: b2Body.h<763:2> [b2Body.h <765:2 765:2>]
LOCAL_SYMBOL: b2Body.h<768:2> [b2Body.h <768:2 768:2>]
LOCAL_SYMBOL: b2Body.h<768:2> [b2Body.h <770:2 770:2>]
LOCAL_SYMBOL: b2Body.h<774:2> [b2Body.h <774:2 774:2>]
LOCAL_SYMBOL: b2Body.h<774:2> [b2Body.h <776:2 776:2>]
LOCAL_SYMBOL: b2Body.h<779:41> [b2Body.h <779:41 779:46>]
LOCAL_SYMBOL: b2Body.h<779:41> [b2Body.h <794:15 794:20>]
LOCAL_SYMBOL: b2Body.h<779:54> [b2Body.h <779:54 779:57>]
LOCAL_SYMBOL: b2Body.h<779:54> [b2Body.h <786:6 786:9>]
LOCAL_SYMBOL: b2Body.h<780:1> [b2Body.h <780:1 780:1>]
LOCAL_SYMBOL: b2Body.h<780:1> [b2Body.h <796:1 796:1>]
LOCAL_SYMBOL: b2Body.h<782:2> [b2Body.h <782:2 782:2>]
LOCAL_SYMBOL: b2Body.h<782:2> [b2Body.h <784:2 784:2>]
LOCAL_SYMBOL: b2Body.h<787:2> [b2Body.h <787:2 787:2>]
LOCAL_SYMBOL: b2Body.h<787:2> [b2Body.h <789:2 789:2>]
LOCAL_SYMBOL: b2Body.h<793:2> [b2Body.h <793:2 793:2>]
LOCAL_SYMBOL: b2Body.h<793:2> [b2Body.h <795:2 795:2>]
LOCAL_SYMBOL: b2Body.h<798:54> [b2Body.h <798:54 798:60>]
LOCAL_SYMBOL: b2Body.h<798:54> [b2Body.h <813:35 813:41>]
LOCAL_SYMBOL: b2Body.h<798:54> [b2Body.h <814:60 814:66>]
LOCAL_SYMBOL: b2Body.h<798:77> [b2Body.h <798:77 798:81>]
LOCAL_SYMBOL: b2Body.h<798:77> [b2Body.h <814:41 814:45>]
LOCAL_SYMBOL: b2Body.h<798:89> [b2Body.h <798:89 798:92>]
LOCAL_SYMBOL: b2Body.h<798:89> [b2Body.h <805:6 805:9>]
LOCAL_SYMBOL: b2Body.h<799:1> [b2Body.h <799:1 799:1>]
LOCAL_SYMBOL: b2Body.h<799:1> [b2Body.h <816:1 816:1>]
LOCAL_SYMBOL: b2Body.h<801:2> [b2Body.h <801:2 801:2>]
LOCAL_SYMBOL: b2Body.h<801:2> [b2Body.h <803:2 803:2>]
LOCAL_SYMBOL: b2Body.h<806:2> [b2Body.h <806:2 806:2>]
LOCAL_SYMBOL: b2Body.h<806:2> [b2Body.h <808:2 808:2>]
LOCAL_SYMBOL: b2Body.h<812:2> [b2Body.h <812:2 812:2>]
LOCAL_SYMBOL: b2Body.h<812:2> [b2Body.h <815:2 815:2>]
LOCAL_SYMBOL: b2Body.h<818:62> [b2Body.h <818:62 818:68>]
LOCAL_SYMBOL: b2Body.h<818:62> [b2Body.h <833:35 833:41>]
LOCAL_SYMBOL: b2Body.h<818:76> [b2Body.h <818:76 818:79>]
LOCAL_SYMBOL: b2Body.h<818:76> [b2Body.h <825:6 825:9>]
LOCAL_SYMBOL: b2Body.h<819:1> [b2Body.h <819:1 819:1>]
LOCAL_SYMBOL: b2Body.h<819:1> [b2Body.h <835:1 835:1>]
LOCAL_SYMBOL: b2Body.h<821:2> [b2Body.h <821:2 821:2>]
LOCAL_SYMBOL: b2Body.h<821:2> [b2Body.h <823:2 823:2>]
LOCAL_SYMBOL: b2Body.h<826:2> [b2Body.h <826:2 826:2>]
LOCAL_SYMBOL: b2Body.h<826:2> [b2Body.h <828:2 828:2>]
LOCAL_SYMBOL: b2Body.h<832:2> [b2Body.h <832:2 832:2>]
LOCAL_SYMBOL: b2Body.h<832:2> [b2Body.h <834:2 834:2>]
LOCAL_SYMBOL: b2Body.h<837:49> [b2Body.h <837:49 837:55>]
LOCAL_SYMBOL: b2Body.h<837:49> [b2Body.h <852:33 852:39>]
LOCAL_SYMBOL: b2Body.h<837:63> [b2Body.h <837:63 837:66>]
LOCAL_SYMBOL: b2Body.h<837:63> [b2Body.h <844:6 844:9>]
LOCAL_SYMBOL: b2Body.h<838:1> [b2Body.h <838:1 838:1>]
LOCAL_SYMBOL: b2Body.h<838:1> [b2Body.h <854:1 854:1>]
LOCAL_SYMBOL: b2Body.h<840:2> [b2Body.h <840:2 840:2>]
LOCAL_SYMBOL: b2Body.h<840:2> [b2Body.h <842:2 842:2>]
LOCAL_SYMBOL: b2Body.h<845:2> [b2Body.h <845:2 845:2>]
LOCAL_SYMBOL: b2Body.h<845:2> [b2Body.h <847:2 847:2>]
LOCAL_SYMBOL: b2Body.h<851:2> [b2Body.h <851:2 851:2>]
LOCAL_SYMBOL: b2Body.h<851:2> [b2Body.h <853:2 853:2>]
LOCAL_SYMBOL: b2Body.h<857:1> [b2Body.h <857:1 857:1>]
LOCAL_SYMBOL: b2Body.h<857:1> [b2Body.h <860:1 860:1>]
LOCAL_SYMBOL: b2Body.h<862:37> [b2Body.h <862:37 862:41>]
LOCAL_SYMBOL: b2Body.h<862:37> [b2Body.h <865:18 865:22>]
LOCAL_SYMBOL: b2Body.h<863:1> [b2Body.h <863:1 863:1>]
LOCAL_SYMBOL: b2Body.h<863:1> [b2Body.h <870:1 870:1>]
LOCAL_SYMBOL: b2Body.h<873:1> [b2Body.h <873:1 873:1>]
LOCAL_SYMBOL: b2Body.h<873:1> [b2Body.h <875:1 875:1>]
LOCAL_SYMBOL: b2Body.h<878:1> [b2Body.h <878:1 878:1>]
LOCAL_SYMBOL: b2Body.h<878:1> [b2Body.h <880:1 880:1>]
LOCAL_SYMBOL: b2BroadPhase.h<105:33> [b2BroadPhase.h <105:33 105:41>]
LOCAL_SYMBOL: b2BroadPhase.h<111:24> [b2BroadPhase.h <111:24 111:30>]
LOCAL_SYMBOL: b2BroadPhase.h<112:26> [b2BroadPhase.h <112:26 112:32>]
LOCAL_SYMBOL: b2BroadPhase.h<114:27> [b2BroadPhase.h <114:27 114:33>]
LOCAL_SYMBOL: b2BroadPhase.h<132:42> [b2BroadPhase.h <132:42 132:46>]
LOCAL_SYMBOL: b2BroadPhase.h<132:42> [b2BroadPhase.h <134:6 134:10>]
LOCAL_SYMBOL: b2BroadPhase.h<132:42> [b2BroadPhase.h <139:6 139:10>]
LOCAL_SYMBOL: b2BroadPhase.h<132:42> [b2BroadPhase.h <141:10 141:14>]
LOCAL_SYMBOL: b2BroadPhase.h<132:63> [b2BroadPhase.h <132:63 132:67>]
LOCAL_SYMBOL: b2BroadPhase.h<132:63> [b2BroadPhase.h <134:23 134:27>]
LOCAL_SYMBOL: b2BroadPhase.h<132:63> [b2BroadPhase.h <139:24 139:28>]
LOCAL_SYMBOL: b2BroadPhase.h<132:63> [b2BroadPhase.h <141:27 141:31>]
LOCAL_SYMBOL: b2BroadPhase.h<133:1> [b2BroadPhase.h <133:1 133:1>]
LOCAL_SYMBOL: b2BroadPhase.h<133:1> [b2BroadPhase.h <145:1 145:1>]
LOCAL_SYMBOL: b2BroadPhase.h<135:2> [b2BroadPhase.h <135:2 135:2>]
LOCAL_SYMBOL: b2BroadPhase.h<135:2> [b2BroadPhase.h <137:2 137:2>]
LOCAL_SYMBOL: b2BroadPhase.h<140:2> [b2BroadPhase.h <140:2 140:2>]
LOCAL_SYMBOL: b2BroadPhase.h<140:2> [b2BroadPhase.h <142:2 142:2>]
LOCAL_SYMBOL: b2BroadPhase.h<147:46> [b2BroadPhase.h <147:46 147:52>]
LOCAL_SYMBOL: b2BroadPhase.h<147:46> [b2BroadPhase.h <149:28 149:34>]
LOCAL_SYMBOL: b2BroadPhase.h<148:1> [b2BroadPhase.h <148:1 148:1>]
LOCAL_SYMBOL: b2BroadPhase.h<148:1> [b2BroadPhase.h <150:1 150:1>]
LOCAL_SYMBOL: b2BroadPhase.h<152:45> [b2BroadPhase.h <152:45 152:52>]
LOCAL_SYMBOL: b2BroadPhase.h<152:45> [b2BroadPhase.h <154:42 154:49>]
LOCAL_SYMBOL: b2BroadPhase.h<152:61> [b2BroadPhase.h <152:61 152:68>]
LOCAL_SYMBOL: b2BroadPhase.h<152:61> [b2BroadPhase.h <155:42 155:49>]
LOCAL_SYMBOL: b2BroadPhase.h<153:1> [b2BroadPhase.h <153:1 153:1>]
LOCAL_SYMBOL: b2BroadPhase.h<153:1> [b2BroadPhase.h <157:1 157:1>]
LOCAL_SYMBOL: b2BroadPhase.h<154:16> [b2BroadPhase.h <154:16 154:20>]
LOCAL_SYMBOL: b2BroadPhase.h<154:16> [b2BroadPhase.h <156:23 156:27>]
LOCAL_SYMBOL: b2BroadPhase.h<155:16> [b2BroadPhase.h <155:16 155:20>]
LOCAL_SYMBOL: b2BroadPhase.h<155:16> [b2BroadPhase.h <156:30 156:34>]
LOCAL_SYMBOL: b2BroadPhase.h<159:53> [b2BroadPhase.h <159:53 159:59>]
LOCAL_SYMBOL: b2BroadPhase.h<159:53> [b2BroadPhase.h <161:27 161:33>]
LOCAL_SYMBOL: b2BroadPhase.h<160:1> [b2BroadPhase.h <160:1 160:1>]
LOCAL_SYMBOL: b2BroadPhase.h<160:1> [b2BroadPhase.h <162:1 162:1>]
LOCAL_SYMBOL: b2BroadPhase.h<165:1> [b2BroadPhase.h <165:1 165:1>]
LOCAL_SYMBOL: b2BroadPhase.h<165:1> [b2BroadPhase.h <167:1 167:1>]
LOCAL_SYMBOL: b2BroadPhase.h<170:1> [b2BroadPhase.h <170:1 170:1>]
LOCAL_SYMBOL: b2BroadPhase.h<170:1> [b2BroadPhase.h <172:1 172:1>]
LOCAL_SYMBOL: b2BroadPhase.h<175:1> [b2BroadPhase.h <175:1 175:1>]
LOCAL_SYMBOL: b2BroadPhase.h<175:1> [b2BroadPhase.h <177:1 177:1>]
LOCAL_SYMBOL: b2BroadPhase.h<180:1> [b2BroadPhase.h <180:1 180:1>]
LOCAL_SYMBOL: b2BroadPhase.h<180:1> [b2BroadPhase.h <182:1 182:1>]
LOCAL_SYMBOL: b2BroadPhase.h<184:20> [b2BroadPhase.h <184:20 184:20>]
LOCAL_SYMBOL: b2BroadPhase.h<184:20> [b2BroadPhase.h <185:32 185:32>]
LOCAL_SYMBOL: b2BroadPhase.h<185:35> [b2BroadPhase.h <185:35 185:42>]
LOCAL_SYMBOL: b2BroadPhase.h<185:35> [b2BroadPhase.h <221:3 221:10>]
LOCAL_SYMBOL: b2BroadPhase.h<186:1> [b2BroadPhase.h <186:1 186:1>]
LOCAL_SYMBOL: b2BroadPhase.h<186:1> [b2BroadPhase.h <238:1 238:1>]
LOCAL_SYMBOL: b2BroadPhase.h<191:13> [b2BroadPhase.h <191:13 191:13>]
LOCAL_SYMBOL: b2BroadPhase.h<191:13> [b2BroadPhase.h <191:20 191:20>]
LOCAL_SYMBOL: b2BroadPhase.h<191:13> [b2BroadPhase.h <191:39 191:39>]
LOCAL_SYMBOL: b2BroadPhase.h<191:13> [b2BroadPhase.h <193:33 193:33>]
LOCAL_SYMBOL: b2BroadPhase.h<192:2> [b2BroadPhase.h <192:2 192:2>]
LOCAL_SYMBOL: b2BroadPhase.h<192:2> [b2BroadPhase.h <205:2 205:2>]
LOCAL_SYMBOL: b2BroadPhase.h<195:3> [b2BroadPhase.h <195:3 195:3>]
LOCAL_SYMBOL: b2BroadPhase.h<195:3> [b2BroadPhase.h <197:3 197:3>]
LOCAL_SYMBOL: b2BroadPhase.h<201:17> [b2BroadPhase.h <201:17 201:23>]
LOCAL_SYMBOL: b2BroadPhase.h<201:17> [b2BroadPhase.h <204:22 204:28>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <214:8 214:8>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <215:9 215:9>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <217:40 217:40>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <222:5 222:5>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <225:10 225:10>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <227:34 227:34>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <232:6 232:6>]
LOCAL_SYMBOL: b2BroadPhase.h<216:2> [b2BroadPhase.h <216:2 216:2>]
LOCAL_SYMBOL: b2BroadPhase.h<216:2> [b2BroadPhase.h <234:2 234:2>]
LOCAL_SYMBOL: b2BroadPhase.h<217:11> [b2BroadPhase.h <217:11 217:21>]
LOCAL_SYMBOL: b2BroadPhase.h<217:11> [b2BroadPhase.h <218:40 218:50>]
LOCAL_SYMBOL: b2BroadPhase.h<217:11> [b2BroadPhase.h <219:40 219:50>]
LOCAL_SYMBOL: b2BroadPhase.h<217:11> [b2BroadPhase.h <228:26 228:36>]
LOCAL_SYMBOL: b2BroadPhase.h<217:11> [b2BroadPhase.h <228:69 228:79>]
LOCAL_SYMBOL: b2BroadPhase.h<218:9> [b2BroadPhase.h <218:9 218:17>]
LOCAL_SYMBOL: b2BroadPhase.h<218:9> [b2BroadPhase.h <221:21 221:29>]
LOCAL_SYMBOL: b2BroadPhase.h<219:9> [b2BroadPhase.h <219:9 219:17>]
LOCAL_SYMBOL: b2BroadPhase.h<219:9> [b2BroadPhase.h <221:32 221:40>]
LOCAL_SYMBOL: b2BroadPhase.h<226:3> [b2BroadPhase.h <226:3 226:3>]
LOCAL_SYMBOL: b2BroadPhase.h<226:3> [b2BroadPhase.h <233:3 233:3>]
LOCAL_SYMBOL: b2BroadPhase.h<227:12> [b2BroadPhase.h <227:12 227:15>]
LOCAL_SYMBOL: b2BroadPhase.h<227:12> [b2BroadPhase.h <228:8 228:11>]
LOCAL_SYMBOL: b2BroadPhase.h<227:12> [b2BroadPhase.h <228:51 228:54>]
LOCAL_SYMBOL: b2BroadPhase.h<229:4> [b2BroadPhase.h <229:4 229:4>]
LOCAL_SYMBOL: b2BroadPhase.h<229:4> [b2BroadPhase.h <231:4 231:4>]
LOCAL_SYMBOL: b2BroadPhase.h<240:20> [b2BroadPhase.h <240:20 240:20>]
LOCAL_SYMBOL: b2BroadPhase.h<240:20> [b2BroadPhase.h <241:33 241:33>]
LOCAL_SYMBOL: b2BroadPhase.h<241:36> [b2BroadPhase.h <241:36 241:43>]
LOCAL_SYMBOL: b2BroadPhase.h<241:36> [b2BroadPhase.h <243:15 243:22>]
LOCAL_SYMBOL: b2BroadPhase.h<241:60> [b2BroadPhase.h <241:60 241:63>]
LOCAL_SYMBOL: b2BroadPhase.h<241:60> [b2BroadPhase.h <243:25 243:28>]
LOCAL_SYMBOL: b2BroadPhase.h<242:1> [b2BroadPhase.h <242:1 242:1>]
LOCAL_SYMBOL: b2BroadPhase.h<242:1> [b2BroadPhase.h <244:1 244:1>]
LOCAL_SYMBOL: b2BroadPhase.h<246:20> [b2BroadPhase.h <246:20 246:20>]
LOCAL_SYMBOL: b2BroadPhase.h<246:20> [b2BroadPhase.h <247:35 247:35>]
LOCAL_SYMBOL: b2BroadPhase.h<247:38> [b2BroadPhase.h <247:38 247:45>]
LOCAL_SYMBOL: b2BroadPhase.h<247:38> [b2BroadPhase.h <249:17 249:24>]
LOCAL_SYMBOL: b2BroadPhase.h<247:70> [b2BroadPhase.h <247:70 247:74>]
LOCAL_SYMBOL: b2BroadPhase.h<247:70> [b2BroadPhase.h <249:27 249:31>]
LOCAL_SYMBOL: b2BroadPhase.h<248:1> [b2BroadPhase.h <248:1 248:1>]
LOCAL_SYMBOL: b2BroadPhase.h<248:1> [b2BroadPhase.h <250:1 250:1>]
LOCAL_SYMBOL: b2BroadPhase.h<252:53> [b2BroadPhase.h <252:53 252:61>]
LOCAL_SYMBOL: b2BroadPhase.h<252:53> [b2BroadPhase.h <254:21 254:29>]
LOCAL_SYMBOL: b2BroadPhase.h<253:1> [b2BroadPhase.h <253:1 253:1>]
LOCAL_SYMBOL: b2BroadPhase.h<253:1> [b2BroadPhase.h <255:1 255:1>]
LOCAL_SYMBOL: b2BroadPhase.h<28:1> [b2BroadPhase.h <28:1 28:1>]
LOCAL_SYMBOL: b2BroadPhase.h<28:1> [b2BroadPhase.h <31:1 31:1>]
LOCAL_SYMBOL: b2BroadPhase.h<37:1> [b2BroadPhase.h <37:1 37:1>]
LOCAL_SYMBOL: b2BroadPhase.h<37:1> [b2BroadPhase.h <129:1 129:1>]
LOCAL_SYMBOL: b2BroadPhase.h<41:2> [b2BroadPhase.h <41:2 41:2>]
LOCAL_SYMBOL: b2BroadPhase.h<41:2> [b2BroadPhase.h <43:2 43:2>]
LOCAL_SYMBOL: b2BroadPhase.h<50:34> [b2BroadPhase.h <50:34 50:37>]
LOCAL_SYMBOL: b2BroadPhase.h<50:46> [b2BroadPhase.h <50:46 50:53>]
LOCAL_SYMBOL: b2BroadPhase.h<53:26> [b2BroadPhase.h <53:26 53:32>]
LOCAL_SYMBOL: b2BroadPhase.h<57:23> [b2BroadPhase.h <57:23 57:29>]
LOCAL_SYMBOL: b2BroadPhase.h<57:46> [b2BroadPhase.h <57:46 57:49>]
LOCAL_SYMBOL: b2BroadPhase.h<57:66> [b2BroadPhase.h <57:66 57:77>]
LOCAL_SYMBOL: b2BroadPhase.h<60:24> [b2BroadPhase.h <60:24 60:30>]
LOCAL_SYMBOL: b2BroadPhase.h<63:33> [b2BroadPhase.h <63:33 63:39>]
LOCAL_SYMBOL: b2BroadPhase.h<66:26> [b2BroadPhase.h <66:26 66:32>]
LOCAL_SYMBOL: b2BroadPhase.h<69:25> [b2BroadPhase.h <69:25 69:32>]
LOCAL_SYMBOL: b2BroadPhase.h<69:41> [b2BroadPhase.h <69:41 69:48>]
LOCAL_SYMBOL: b2BroadPhase.h<75:21> [b2BroadPhase.h <75:21 75:21>]
LOCAL_SYMBOL: b2BroadPhase.h<75:21> [b2BroadPhase.h <76:19 76:19>]
LOCAL_SYMBOL: b2BroadPhase.h<76:22> [b2BroadPhase.h <76:22 76:29>]
LOCAL_SYMBOL: b2BroadPhase.h<80:21> [b2BroadPhase.h <80:21 80:21>]
LOCAL_SYMBOL: b2BroadPhase.h<80:21> [b2BroadPhase.h <81:13 81:13>]
LOCAL_SYMBOL: b2BroadPhase.h<81:16> [b2BroadPhase.h <81:16 81:23>]
LOCAL_SYMBOL: b2BroadPhase.h<81:40> [b2BroadPhase.h <81:40 81:43>]
LOCAL_SYMBOL: b2BroadPhase.h<90:21> [b2BroadPhase.h <90:21 90:21>]
LOCAL_SYMBOL: b2BroadPhase.h<90:21> [b2BroadPhase.h <91:15 91:15>]
LOCAL_SYMBOL: b2BroadPhase.h<91:18> [b2BroadPhase.h <91:18 91:25>]
LOCAL_SYMBOL: b2BroadPhase.h<91:50> [b2BroadPhase.h <91:50 91:54>]
LOCAL_SYMBOL: b2Collision.h<111:1> [b2Collision.h <111:1 111:1>]
LOCAL_SYMBOL: b2Collision.h<111:1> [b2Collision.h <123:1 123:1>]
LOCAL_SYMBOL: b2Collision.h<116:36> [b2Collision.h <116:36 116:43>]
LOCAL_SYMBOL: b2Collision.h<117:25> [b2Collision.h <117:25 117:27>]
LOCAL_SYMBOL: b2Collision.h<117:38> [b2Collision.h <117:38 117:44>]
LOCAL_SYMBOL: b2Collision.h<118:25> [b2Collision.h <118:25 118:27>]
LOCAL_SYMBOL: b2Collision.h<118:38> [b2Collision.h <118:38 118:44>]
LOCAL_SYMBOL: b2Collision.h<127:1> [b2Collision.h <127:1 127:1>]
LOCAL_SYMBOL: b2Collision.h<127:1> [b2Collision.h <132:1 132:1>]
LOCAL_SYMBOL: b2Collision.h<136:36> [b2Collision.h <136:36 136:41>]
LOCAL_SYMBOL: b2Collision.h<136:79> [b2Collision.h <136:79 136:84>]
LOCAL_SYMBOL: b2Collision.h<137:26> [b2Collision.h <137:26 137:34>]
LOCAL_SYMBOL: b2Collision.h<137:55> [b2Collision.h <137:55 137:63>]
LOCAL_SYMBOL: b2Collision.h<141:1> [b2Collision.h <141:1 141:1>]
LOCAL_SYMBOL: b2Collision.h<141:1> [b2Collision.h <144:1 144:1>]
LOCAL_SYMBOL: b2Collision.h<148:1> [b2Collision.h <148:1 148:1>]
LOCAL_SYMBOL: b2Collision.h<148:1> [b2Collision.h <151:1 151:1>]
LOCAL_SYMBOL: b2Collision.h<156:1> [b2Collision.h <156:1 156:1>]
LOCAL_SYMBOL: b2Collision.h<156:1> [b2Collision.h <159:1 159:1>]
LOCAL_SYMBOL: b2Collision.h<163:1> [b2Collision.h <163:1 163:1>]
LOCAL_SYMBOL: b2Collision.h<163:1> [b2Collision.h <216:1 216:1>]
LOCAL_SYMBOL: b2Collision.h<169:2> [b2Collision.h <169:2 169:2>]
LOCAL_SYMBOL: b2Collision.h<169:2> [b2Collision.h <171:2 171:2>]
LOCAL_SYMBOL: b2Collision.h<175:2> [b2Collision.h <175:2 175:2>]
LOCAL_SYMBOL: b2Collision.h<175:2> [b2Collision.h <177:2 177:2>]
LOCAL_SYMBOL: b2Collision.h<181:2> [b2Collision.h <181:2 181:2>]
LOCAL_SYMBOL: b2Collision.h<181:2> [b2Collision.h <185:2 185:2>]
LOCAL_SYMBOL: b2Collision.h<182:11> [b2Collision.h <182:11 182:12>]
LOCAL_SYMBOL: b2Collision.h<182:11> [b2Collision.h <184:18 184:19>]
LOCAL_SYMBOL: b2Collision.h<183:11> [b2Collision.h <183:11 183:12>]
LOCAL_SYMBOL: b2Collision.h<183:11> [b2Collision.h <184:23 184:24>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <188:29 188:32>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <190:34 190:37>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <191:34 191:37>]
LOCAL_SYMBOL: b2Collision.h<189:2> [b2Collision.h <189:2 189:2>]
LOCAL_SYMBOL: b2Collision.h<189:2> [b2Collision.h <192:2 192:2>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <195:29 195:33>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <197:22 197:26>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <198:22 198:26>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <195:50 195:54>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <197:40 197:44>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <198:40 198:44>]
LOCAL_SYMBOL: b2Collision.h<196:2> [b2Collision.h <196:2 196:2>]
LOCAL_SYMBOL: b2Collision.h<196:2> [b2Collision.h <199:2 199:2>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <202:30 202:33>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <205:38 205:41>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <206:38 206:41>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <207:22 207:25>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <208:22 208:25>]
LOCAL_SYMBOL: b2Collision.h<203:2> [b2Collision.h <203:2 203:2>]
LOCAL_SYMBOL: b2Collision.h<203:2> [b2Collision.h <210:2 210:2>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <204:8 204:13>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <205:3 205:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <205:12 205:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <206:3 206:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <206:12 206:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <207:3 207:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <207:12 207:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <208:3 208:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <208:12 208:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <209:10 209:15>]
LOCAL_SYMBOL: b2Collision.h<212:32> [b2Collision.h <212:32 212:37>]
LOCAL_SYMBOL: b2Collision.h<212:62> [b2Collision.h <212:62 212:66>]
LOCAL_SYMBOL: b2Collision.h<219:35> [b2Collision.h <219:35 219:42>]
LOCAL_SYMBOL: b2Collision.h<220:29> [b2Collision.h <220:29 220:35>]
LOCAL_SYMBOL: b2Collision.h<220:57> [b2Collision.h <220:57 220:59>]
LOCAL_SYMBOL: b2Collision.h<221:29> [b2Collision.h <221:29 221:35>]
LOCAL_SYMBOL: b2Collision.h<221:57> [b2Collision.h <221:57 221:59>]
LOCAL_SYMBOL: b2Collision.h<224:44> [b2Collision.h <224:44 224:51>]
LOCAL_SYMBOL: b2Collision.h<225:33> [b2Collision.h <225:33 225:40>]
LOCAL_SYMBOL: b2Collision.h<225:62> [b2Collision.h <225:62 225:64>]
LOCAL_SYMBOL: b2Collision.h<226:32> [b2Collision.h <226:32 226:38>]
LOCAL_SYMBOL: b2Collision.h<226:60> [b2Collision.h <226:60 226:62>]
LOCAL_SYMBOL: b2Collision.h<229:36> [b2Collision.h <229:36 229:43>]
LOCAL_SYMBOL: b2Collision.h<230:31> [b2Collision.h <230:31 230:38>]
LOCAL_SYMBOL: b2Collision.h<230:60> [b2Collision.h <230:60 230:62>]
LOCAL_SYMBOL: b2Collision.h<231:31> [b2Collision.h <231:31 231:38>]
LOCAL_SYMBOL: b2Collision.h<231:60> [b2Collision.h <231:60 231:62>]
LOCAL_SYMBOL: b2Collision.h<234:41> [b2Collision.h <234:41 234:48>]
LOCAL_SYMBOL: b2Collision.h<235:30> [b2Collision.h <235:30 235:37>]
LOCAL_SYMBOL: b2Collision.h<235:59> [b2Collision.h <235:59 235:61>]
LOCAL_SYMBOL: b2Collision.h<236:32> [b2Collision.h <236:32 236:38>]
LOCAL_SYMBOL: b2Collision.h<236:60> [b2Collision.h <236:60 236:62>]
LOCAL_SYMBOL: b2Collision.h<239:42> [b2Collision.h <239:42 239:49>]
LOCAL_SYMBOL: b2Collision.h<240:30> [b2Collision.h <240:30 240:34>]
LOCAL_SYMBOL: b2Collision.h<240:56> [b2Collision.h <240:56 240:58>]
LOCAL_SYMBOL: b2Collision.h<241:33> [b2Collision.h <241:33 241:39>]
LOCAL_SYMBOL: b2Collision.h<241:61> [b2Collision.h <241:61 241:63>]
LOCAL_SYMBOL: b2Collision.h<244:40> [b2Collision.h <244:40 244:43>]
LOCAL_SYMBOL: b2Collision.h<244:68> [b2Collision.h <244:68 244:70>]
LOCAL_SYMBOL: b2Collision.h<245:22> [b2Collision.h <245:22 245:27>]
LOCAL_SYMBOL: b2Collision.h<245:38> [b2Collision.h <245:38 245:43>]
LOCAL_SYMBOL: b2Collision.h<245:52> [b2Collision.h <245:52 245:63>]
LOCAL_SYMBOL: b2Collision.h<248:36> [b2Collision.h <248:36 248:41>]
LOCAL_SYMBOL: b2Collision.h<248:50> [b2Collision.h <248:50 248:55>]
LOCAL_SYMBOL: b2Collision.h<249:21> [b2Collision.h <249:21 249:26>]
LOCAL_SYMBOL: b2Collision.h<249:35> [b2Collision.h <249:35 249:40>]
LOCAL_SYMBOL: b2Collision.h<250:25> [b2Collision.h <250:25 250:27>]
LOCAL_SYMBOL: b2Collision.h<250:49> [b2Collision.h <250:49 250:51>]
LOCAL_SYMBOL: b2Collision.h<255:1> [b2Collision.h <255:1 255:1>]
LOCAL_SYMBOL: b2Collision.h<255:1> [b2Collision.h <260:1 260:1>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <256:9 256:9>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <257:15 257:15>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <257:30 257:30>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <257:7 257:11>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <258:2 258:6>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <258:10 258:14>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <259:9 259:13>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <262:41 262:41>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <265:22 265:22>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <266:7 266:7>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <262:58 262:58>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <265:7 265:7>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <266:22 266:22>]
LOCAL_SYMBOL: b2Collision.h<263:1> [b2Collision.h <263:1 263:1>]
LOCAL_SYMBOL: b2Collision.h<263:1> [b2Collision.h <275:1 275:1>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <264:13 264:14>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <266:2 266:3>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <271:6 271:7>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <271:21 271:22>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <264:9 264:10>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <265:2 265:3>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <268:6 268:7>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <268:21 268:22>]
LOCAL_SYMBOL: b2Collision.h<39:1> [b2Collision.h <39:1 39:1>]
LOCAL_SYMBOL: b2Collision.h<39:1> [b2Collision.h <50:1 50:1>]
LOCAL_SYMBOL: b2Collision.h<41:2> [b2Collision.h <41:2 41:2>]
LOCAL_SYMBOL: b2Collision.h<41:2> [b2Collision.h <44:2 44:2>]
LOCAL_SYMBOL: b2Collision.h<54:1> [b2Collision.h <54:1 54:1>]
LOCAL_SYMBOL: b2Collision.h<54:1> [b2Collision.h <57:1 57:1>]
LOCAL_SYMBOL: b2Collision.h<70:1> [b2Collision.h <70:1 70:1>]
LOCAL_SYMBOL: b2Collision.h<70:1> [b2Collision.h <75:1 75:1>]
LOCAL_SYMBOL: b2Collision.h<94:1> [b2Collision.h <94:1 94:1>]
LOCAL_SYMBOL: b2Collision.h<94:1> [b2Collision.h <107:1 107:1>]
LOCAL_SYMBOL: b2Collision.h<96:2> [b2Collision.h <96:2 96:2>]
LOCAL_SYMBOL: b2Collision.h<96:2> [b2Collision.h <100:2 100:2>]
LOCAL_SYMBOL: b2Contact.h<120:27> [b2Contact.h <120:27 120:34>]
LOCAL_SYMBOL: b2Contact.h<130:30> [b2Contact.h <130:30 130:40>]
LOCAL_SYMBOL: b2Contact.h<139:31> [b2Contact.h <139:31 139:35>]
LOCAL_SYMBOL: b2Contact.h<145:36> [b2Contact.h <145:36 145:43>]
LOCAL_SYMBOL: b2Contact.h<145:65> [b2Contact.h <145:65 145:67>]
LOCAL_SYMBOL: b2Contact.h<145:89> [b2Contact.h <145:89 145:91>]
LOCAL_SYMBOL: b2Contact.h<156:2> [b2Contact.h <156:2 156:2>]
LOCAL_SYMBOL: b2Contact.h<156:2> [b2Contact.h <174:2 174:2>]
LOCAL_SYMBOL: b2Contact.h<179:42> [b2Contact.h <179:42 179:50>]
LOCAL_SYMBOL: b2Contact.h<179:74> [b2Contact.h <179:74 179:83>]
LOCAL_SYMBOL: b2Contact.h<180:21> [b2Contact.h <180:21 180:25>]
LOCAL_SYMBOL: b2Contact.h<180:42> [b2Contact.h <180:42 180:46>]
LOCAL_SYMBOL: b2Contact.h<182:115> [b2Contact.h <182:115 182:123>]
LOCAL_SYMBOL: b2Contact.h<182:38> [b2Contact.h <182:38 182:45>]
LOCAL_SYMBOL: b2Contact.h<182:54> [b2Contact.h <182:54 182:59>]
LOCAL_SYMBOL: b2Contact.h<182:73> [b2Contact.h <182:73 182:80>]
LOCAL_SYMBOL: b2Contact.h<182:89> [b2Contact.h <182:89 182:94>]
LOCAL_SYMBOL: b2Contact.h<183:102> [b2Contact.h <183:102 183:110>]
LOCAL_SYMBOL: b2Contact.h<183:33> [b2Contact.h <183:33 183:39>]
LOCAL_SYMBOL: b2Contact.h<183:56> [b2Contact.h <183:56 183:60>]
LOCAL_SYMBOL: b2Contact.h<183:77> [b2Contact.h <183:77 183:81>]
LOCAL_SYMBOL: b2Contact.h<184:33> [b2Contact.h <184:33 184:39>]
LOCAL_SYMBOL: b2Contact.h<184:60> [b2Contact.h <184:60 184:68>]
LOCAL_SYMBOL: b2Contact.h<186:57> [b2Contact.h <186:57 186:57>]
LOCAL_SYMBOL: b2Contact.h<186:57> [b2Contact.h <186:58 186:58>]
LOCAL_SYMBOL: b2Contact.h<187:23> [b2Contact.h <187:23 187:30>]
LOCAL_SYMBOL: b2Contact.h<187:39> [b2Contact.h <187:39 187:44>]
LOCAL_SYMBOL: b2Contact.h<187:58> [b2Contact.h <187:58 187:65>]
LOCAL_SYMBOL: b2Contact.h<187:74> [b2Contact.h <187:74 187:79>]
LOCAL_SYMBOL: b2Contact.h<188:23> [b2Contact.h <188:23 188:23>]
LOCAL_SYMBOL: b2Contact.h<188:23> [b2Contact.h <188:24 188:24>]
LOCAL_SYMBOL: b2Contact.h<190:33> [b2Contact.h <190:33 190:40>]
LOCAL_SYMBOL: b2Contact.h<223:1> [b2Contact.h <223:1 223:1>]
LOCAL_SYMBOL: b2Contact.h<223:1> [b2Contact.h <225:1 225:1>]
LOCAL_SYMBOL: b2Contact.h<228:1> [b2Contact.h <228:1 228:1>]
LOCAL_SYMBOL: b2Contact.h<228:1> [b2Contact.h <230:1 230:1>]
LOCAL_SYMBOL: b2Contact.h<232:58> [b2Contact.h <232:58 232:70>]
LOCAL_SYMBOL: b2Contact.h<232:58> [b2Contact.h <239:2 239:14>]
LOCAL_SYMBOL: b2Contact.h<233:1> [b2Contact.h <233:1 233:1>]
LOCAL_SYMBOL: b2Contact.h<233:1> [b2Contact.h <240:1 240:1>]
LOCAL_SYMBOL: b2Contact.h<234:16> [b2Contact.h <234:16 234:20>]
LOCAL_SYMBOL: b2Contact.h<234:16> [b2Contact.h <239:41 239:45>]
LOCAL_SYMBOL: b2Contact.h<235:16> [b2Contact.h <235:16 235:20>]
LOCAL_SYMBOL: b2Contact.h<235:16> [b2Contact.h <239:82 239:86>]
LOCAL_SYMBOL: b2Contact.h<236:17> [b2Contact.h <236:17 236:22>]
LOCAL_SYMBOL: b2Contact.h<236:17> [b2Contact.h <239:64 239:69>]
LOCAL_SYMBOL: b2Contact.h<237:17> [b2Contact.h <237:17 237:22>]
LOCAL_SYMBOL: b2Contact.h<237:17> [b2Contact.h <239:105 239:110>]
LOCAL_SYMBOL: b2Contact.h<242:40> [b2Contact.h <242:40 242:43>]
LOCAL_SYMBOL: b2Contact.h<242:40> [b2Contact.h <244:6 244:9>]
LOCAL_SYMBOL: b2Contact.h<243:1> [b2Contact.h <243:1 243:1>]
LOCAL_SYMBOL: b2Contact.h<243:1> [b2Contact.h <252:1 252:1>]
LOCAL_SYMBOL: b2Contact.h<245:2> [b2Contact.h <245:2 245:2>]
LOCAL_SYMBOL: b2Contact.h<245:2> [b2Contact.h <247:2 247:2>]
LOCAL_SYMBOL: b2Contact.h<249:2> [b2Contact.h <249:2 249:2>]
LOCAL_SYMBOL: b2Contact.h<249:2> [b2Contact.h <251:2 251:2>]
LOCAL_SYMBOL: b2Contact.h<255:1> [b2Contact.h <255:1 255:1>]
LOCAL_SYMBOL: b2Contact.h<255:1> [b2Contact.h <257:1 257:1>]
LOCAL_SYMBOL: b2Contact.h<260:1> [b2Contact.h <260:1 260:1>]
LOCAL_SYMBOL: b2Contact.h<260:1> [b2Contact.h <262:1 262:1>]
LOCAL_SYMBOL: b2Contact.h<265:1> [b2Contact.h <265:1 265:1>]
LOCAL_SYMBOL: b2Contact.h<265:1> [b2Contact.h <267:1 267:1>]
LOCAL_SYMBOL: b2Contact.h<270:1> [b2Contact.h <270:1 270:1>]
LOCAL_SYMBOL: b2Contact.h<270:1> [b2Contact.h <272:1 272:1>]
LOCAL_SYMBOL: b2Contact.h<275:1> [b2Contact.h <275:1 275:1>]
LOCAL_SYMBOL: b2Contact.h<275:1> [b2Contact.h <277:1 277:1>]
LOCAL_SYMBOL: b2Contact.h<280:1> [b2Contact.h <280:1 280:1>]
LOCAL_SYMBOL: b2Contact.h<280:1> [b2Contact.h <282:1 282:1>]
LOCAL_SYMBOL: b2Contact.h<285:1> [b2Contact.h <285:1 285:1>]
LOCAL_SYMBOL: b2Contact.h<285:1> [b2Contact.h <287:1 287:1>]
LOCAL_SYMBOL: b2Contact.h<290:1> [b2Contact.h <290:1 290:1>]
LOCAL_SYMBOL: b2Contact.h<290:1> [b2Contact.h <292:1 292:1>]
LOCAL_SYMBOL: b2Contact.h<295:1> [b2Contact.h <295:1 295:1>]
LOCAL_SYMBOL: b2Contact.h<295:1> [b2Contact.h <297:1 297:1>]
LOCAL_SYMBOL: b2Contact.h<300:1> [b2Contact.h <300:1 300:1>]
LOCAL_SYMBOL: b2Contact.h<300:1> [b2Contact.h <302:1 302:1>]
LOCAL_SYMBOL: b2Contact.h<305:1> [b2Contact.h <305:1 305:1>]
LOCAL_SYMBOL: b2Contact.h<305:1> [b2Contact.h <307:1 307:1>]
LOCAL_SYMBOL: b2Contact.h<309:44> [b2Contact.h <309:44 309:51>]
LOCAL_SYMBOL: b2Contact.h<309:44> [b2Contact.h <311:15 311:22>]
LOCAL_SYMBOL: b2Contact.h<310:1> [b2Contact.h <310:1 310:1>]
LOCAL_SYMBOL: b2Contact.h<310:1> [b2Contact.h <312:1 312:1>]
LOCAL_SYMBOL: b2Contact.h<315:1> [b2Contact.h <315:1 315:1>]
LOCAL_SYMBOL: b2Contact.h<315:1> [b2Contact.h <317:1 317:1>]
LOCAL_SYMBOL: b2Contact.h<320:1> [b2Contact.h <320:1 320:1>]
LOCAL_SYMBOL: b2Contact.h<320:1> [b2Contact.h <322:1 322:1>]
LOCAL_SYMBOL: b2Contact.h<324:47> [b2Contact.h <324:47 324:57>]
LOCAL_SYMBOL: b2Contact.h<324:47> [b2Contact.h <326:18 326:28>]
LOCAL_SYMBOL: b2Contact.h<325:1> [b2Contact.h <325:1 325:1>]
LOCAL_SYMBOL: b2Contact.h<325:1> [b2Contact.h <327:1 327:1>]
LOCAL_SYMBOL: b2Contact.h<330:1> [b2Contact.h <330:1 330:1>]
LOCAL_SYMBOL: b2Contact.h<330:1> [b2Contact.h <332:1 332:1>]
LOCAL_SYMBOL: b2Contact.h<335:1> [b2Contact.h <335:1 335:1>]
LOCAL_SYMBOL: b2Contact.h<335:1> [b2Contact.h <337:1 337:1>]
LOCAL_SYMBOL: b2Contact.h<339:48> [b2Contact.h <339:48 339:52>]
LOCAL_SYMBOL: b2Contact.h<339:48> [b2Contact.h <341:19 341:23>]
LOCAL_SYMBOL: b2Contact.h<340:1> [b2Contact.h <340:1 340:1>]
LOCAL_SYMBOL: b2Contact.h<340:1> [b2Contact.h <342:1 342:1>]
LOCAL_SYMBOL: b2Contact.h<345:1> [b2Contact.h <345:1 345:1>]
LOCAL_SYMBOL: b2Contact.h<345:1> [b2Contact.h <347:1 347:1>]
LOCAL_SYMBOL: b2Contact.h<37:38> [b2Contact.h <37:38 37:46>]
LOCAL_SYMBOL: b2Contact.h<37:38> [b2Contact.h <39:16 39:24>]
LOCAL_SYMBOL: b2Contact.h<37:57> [b2Contact.h <37:57 37:65>]
LOCAL_SYMBOL: b2Contact.h<37:57> [b2Contact.h <39:28 39:36>]
LOCAL_SYMBOL: b2Contact.h<38:1> [b2Contact.h <38:1 38:1>]
LOCAL_SYMBOL: b2Contact.h<38:1> [b2Contact.h <40:1 40:1>]
LOCAL_SYMBOL: b2Contact.h<44:41> [b2Contact.h <44:41 44:52>]
LOCAL_SYMBOL: b2Contact.h<44:41> [b2Contact.h <46:9 46:20>]
LOCAL_SYMBOL: b2Contact.h<44:41> [b2Contact.h <46:39 46:50>]
LOCAL_SYMBOL: b2Contact.h<44:63> [b2Contact.h <44:63 44:74>]
LOCAL_SYMBOL: b2Contact.h<44:63> [b2Contact.h <46:24 46:35>]
LOCAL_SYMBOL: b2Contact.h<44:63> [b2Contact.h <46:54 46:65>]
LOCAL_SYMBOL: b2Contact.h<45:1> [b2Contact.h <45:1 45:1>]
LOCAL_SYMBOL: b2Contact.h<45:1> [b2Contact.h <47:1 47:1>]
LOCAL_SYMBOL: b2Contact.h<49:51> [b2Contact.h <49:51 49:58>]
LOCAL_SYMBOL: b2Contact.h<49:67> [b2Contact.h <49:67 49:72>]
LOCAL_SYMBOL: b2Contact.h<50:22> [b2Contact.h <50:22 50:29>]
LOCAL_SYMBOL: b2Contact.h<50:38> [b2Contact.h <50:38 50:43>]
LOCAL_SYMBOL: b2Contact.h<51:29> [b2Contact.h <51:29 51:37>]
LOCAL_SYMBOL: b2Contact.h<52:45> [b2Contact.h <52:45 52:51>]
LOCAL_SYMBOL: b2Contact.h<52:72> [b2Contact.h <52:72 52:80>]
LOCAL_SYMBOL: b2Contact.h<55:1> [b2Contact.h <55:1 55:1>]
LOCAL_SYMBOL: b2Contact.h<55:1> [b2Contact.h <59:1 59:1>]
LOCAL_SYMBOL: b2Contact.h<67:1> [b2Contact.h <67:1 67:1>]
LOCAL_SYMBOL: b2Contact.h<67:1> [b2Contact.h <72:1 72:1>]
LOCAL_SYMBOL: b2Contact.h<78:1> [b2Contact.h <78:1 78:1>]
LOCAL_SYMBOL: b2Contact.h<78:1> [b2Contact.h <220:1 220:1>]
LOCAL_SYMBOL: b2Contact.h<87:41> [b2Contact.h <87:41 87:53>]
LOCAL_SYMBOL: b2Contact.h<95:23> [b2Contact.h <95:23 95:26>]
LOCAL_SYMBOL: b2ContactManager.h<31:1> [b2ContactManager.h <31:1 31:1>]
LOCAL_SYMBOL: b2ContactManager.h<31:1> [b2ContactManager.h <50:1 50:1>]
LOCAL_SYMBOL: b2ContactManager.h<36:21> [b2ContactManager.h <36:21 36:34>]
LOCAL_SYMBOL: b2ContactManager.h<36:43> [b2ContactManager.h <36:43 36:56>]
LOCAL_SYMBOL: b2ContactManager.h<40:26> [b2ContactManager.h <40:26 40:26>]
LOCAL_SYMBOL: b2DynamicTree.h<101:21> [b2DynamicTree.h <101:21 101:21>]
LOCAL_SYMBOL: b2DynamicTree.h<101:21> [b2DynamicTree.h <102:15 102:15>]
LOCAL_SYMBOL: b2DynamicTree.h<102:18> [b2DynamicTree.h <102:18 102:25>]
LOCAL_SYMBOL: b2DynamicTree.h<102:50> [b2DynamicTree.h <102:50 102:54>]
LOCAL_SYMBOL: b2DynamicTree.h<124:33> [b2DynamicTree.h <124:33 124:41>]
LOCAL_SYMBOL: b2DynamicTree.h<129:22> [b2DynamicTree.h <129:22 129:25>]
LOCAL_SYMBOL: b2DynamicTree.h<131:24> [b2DynamicTree.h <131:24 131:27>]
LOCAL_SYMBOL: b2DynamicTree.h<132:24> [b2DynamicTree.h <132:24 132:27>]
LOCAL_SYMBOL: b2DynamicTree.h<134:22> [b2DynamicTree.h <134:22 134:26>]
LOCAL_SYMBOL: b2DynamicTree.h<137:28> [b2DynamicTree.h <137:28 137:33>]
LOCAL_SYMBOL: b2DynamicTree.h<139:31> [b2DynamicTree.h <139:31 139:35>]
LOCAL_SYMBOL: b2DynamicTree.h<140:29> [b2DynamicTree.h <140:29 140:33>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <156:47 156:53>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <158:16 158:22>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <158:27 158:33>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <159:17 159:23>]
LOCAL_SYMBOL: b2DynamicTree.h<157:1> [b2DynamicTree.h <157:1 157:1>]
LOCAL_SYMBOL: b2DynamicTree.h<157:1> [b2DynamicTree.h <160:1 160:1>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <162:54 162:60>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <164:16 164:22>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <164:27 164:33>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <165:17 165:23>]
LOCAL_SYMBOL: b2DynamicTree.h<163:1> [b2DynamicTree.h <163:1 163:1>]
LOCAL_SYMBOL: b2DynamicTree.h<163:1> [b2DynamicTree.h <166:1 166:1>]
LOCAL_SYMBOL: b2DynamicTree.h<168:20> [b2DynamicTree.h <168:20 168:20>]
LOCAL_SYMBOL: b2DynamicTree.h<168:20> [b2DynamicTree.h <169:34 169:34>]
LOCAL_SYMBOL: b2DynamicTree.h<169:37> [b2DynamicTree.h <169:37 169:44>]
LOCAL_SYMBOL: b2DynamicTree.h<169:37> [b2DynamicTree.h <188:20 188:27>]
LOCAL_SYMBOL: b2DynamicTree.h<169:61> [b2DynamicTree.h <169:61 169:64>]
LOCAL_SYMBOL: b2DynamicTree.h<169:61> [b2DynamicTree.h <184:33 184:36>]
LOCAL_SYMBOL: b2DynamicTree.h<170:1> [b2DynamicTree.h <170:1 170:1>]
LOCAL_SYMBOL: b2DynamicTree.h<170:1> [b2DynamicTree.h <201:1 201:1>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <171:30 171:34>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <172:2 172:6>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <174:9 174:13>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <176:18 176:22>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <196:5 196:9>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <197:5 197:9>]
LOCAL_SYMBOL: b2DynamicTree.h<175:2> [b2DynamicTree.h <175:2 175:2>]
LOCAL_SYMBOL: b2DynamicTree.h<175:2> [b2DynamicTree.h <200:2 200:2>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <176:9 176:14>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <177:7 177:12>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <182:38 182:43>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <188:44 188:49>]
LOCAL_SYMBOL: b2DynamicTree.h<178:3> [b2DynamicTree.h <178:3 178:3>]
LOCAL_SYMBOL: b2DynamicTree.h<178:3> [b2DynamicTree.h <180:3 180:3>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <182:21 182:24>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <184:21 184:24>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <186:8 186:11>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <196:16 196:19>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <197:16 197:19>]
LOCAL_SYMBOL: b2DynamicTree.h<185:3> [b2DynamicTree.h <185:3 185:3>]
LOCAL_SYMBOL: b2DynamicTree.h<185:3> [b2DynamicTree.h <199:3 199:3>]
LOCAL_SYMBOL: b2DynamicTree.h<187:4> [b2DynamicTree.h <187:4 187:4>]
LOCAL_SYMBOL: b2DynamicTree.h<187:4> [b2DynamicTree.h <193:4 193:4>]
LOCAL_SYMBOL: b2DynamicTree.h<188:10> [b2DynamicTree.h <188:10 188:16>]
LOCAL_SYMBOL: b2DynamicTree.h<188:10> [b2DynamicTree.h <189:9 189:15>]
LOCAL_SYMBOL: b2DynamicTree.h<190:5> [b2DynamicTree.h <190:5 190:5>]
LOCAL_SYMBOL: b2DynamicTree.h<190:5> [b2DynamicTree.h <192:5 192:5>]
LOCAL_SYMBOL: b2DynamicTree.h<195:4> [b2DynamicTree.h <195:4 195:4>]
LOCAL_SYMBOL: b2DynamicTree.h<195:4> [b2DynamicTree.h <198:4 198:4>]
LOCAL_SYMBOL: b2DynamicTree.h<203:20> [b2DynamicTree.h <203:20 203:20>]
LOCAL_SYMBOL: b2DynamicTree.h<203:20> [b2DynamicTree.h <204:36 204:36>]
LOCAL_SYMBOL: b2DynamicTree.h<204:39> [b2DynamicTree.h <204:39 204:46>]
LOCAL_SYMBOL: b2DynamicTree.h<204:39> [b2DynamicTree.h <264:20 264:27>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <204:71 204:75>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <206:14 206:18>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <207:14 207:18>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <219:24 219:28>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <260:18 260:22>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <261:18 261:22>]
LOCAL_SYMBOL: b2DynamicTree.h<205:1> [b2DynamicTree.h <205:1 205:1>]
LOCAL_SYMBOL: b2DynamicTree.h<205:1> [b2DynamicTree.h <287:1 287:1>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <206:9 206:10>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <208:18 208:19>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <224:14 224:15>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <224:39 224:40>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <225:34 225:35>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <226:34 226:35>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <251:39 251:40>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <276:16 276:17>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <276:41 276:42>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <277:36 277:37>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <278:36 278:37>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <207:9 207:10>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <208:13 208:14>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <224:34 224:35>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <276:36 276:37>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <208:9 208:9>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <209:11 209:11>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <210:2 210:2>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <213:27 213:27>]
LOCAL_SYMBOL: b2DynamicTree.h<213:9> [b2DynamicTree.h <213:9 213:9>]
LOCAL_SYMBOL: b2DynamicTree.h<213:9> [b2DynamicTree.h <214:23 214:23>]
LOCAL_SYMBOL: b2DynamicTree.h<213:9> [b2DynamicTree.h <251:36 251:36>]
LOCAL_SYMBOL: b2DynamicTree.h<214:9> [b2DynamicTree.h <214:9 214:13>]
LOCAL_SYMBOL: b2DynamicTree.h<214:9> [b2DynamicTree.h <251:56 251:60>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <219:10 219:20>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <224:19 224:29>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <262:27 262:37>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <275:5 275:15>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <276:21 276:31>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <222:9 222:19>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <225:3 225:13>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <226:3 226:13>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <242:33 242:43>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <277:5 277:15>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <278:5 278:15>]
LOCAL_SYMBOL: b2DynamicTree.h<223:2> [b2DynamicTree.h <223:2 223:2>]
LOCAL_SYMBOL: b2DynamicTree.h<223:2> [b2DynamicTree.h <227:2 227:2>]
LOCAL_SYMBOL: b2DynamicTree.h<224:10> [b2DynamicTree.h <224:10 224:10>]
LOCAL_SYMBOL: b2DynamicTree.h<224:10> [b2DynamicTree.h <225:38 225:38>]
LOCAL_SYMBOL: b2DynamicTree.h<224:10> [b2DynamicTree.h <226:38 226:38>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <229:30 229:34>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <230:2 230:6>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <232:9 232:13>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <234:18 234:22>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <283:4 283:8>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <284:4 284:8>]
LOCAL_SYMBOL: b2DynamicTree.h<233:2> [b2DynamicTree.h <233:2 233:2>]
LOCAL_SYMBOL: b2DynamicTree.h<233:2> [b2DynamicTree.h <286:2 286:2>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <234:9 234:14>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <235:7 235:12>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <240:38 240:43>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <264:56 264:61>]
LOCAL_SYMBOL: b2DynamicTree.h<236:3> [b2DynamicTree.h <236:3 236:3>]
LOCAL_SYMBOL: b2DynamicTree.h<236:3> [b2DynamicTree.h <238:3 238:3>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <240:21 240:24>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <242:21 242:24>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <249:14 249:17>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <250:14 250:17>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <257:7 257:10>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <283:15 283:18>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <284:15 284:18>]
LOCAL_SYMBOL: b2DynamicTree.h<243:3> [b2DynamicTree.h <243:3 243:3>]
LOCAL_SYMBOL: b2DynamicTree.h<243:3> [b2DynamicTree.h <245:3 245:3>]
LOCAL_SYMBOL: b2DynamicTree.h<249:10> [b2DynamicTree.h <249:10 249:10>]
LOCAL_SYMBOL: b2DynamicTree.h<249:10> [b2DynamicTree.h <251:44 251:44>]
LOCAL_SYMBOL: b2DynamicTree.h<250:10> [b2DynamicTree.h <250:10 250:10>]
LOCAL_SYMBOL: b2DynamicTree.h<250:10> [b2DynamicTree.h <251:63 251:63>]
LOCAL_SYMBOL: b2DynamicTree.h<251:11> [b2DynamicTree.h <251:11 251:20>]
LOCAL_SYMBOL: b2DynamicTree.h<251:11> [b2DynamicTree.h <252:7 252:16>]
LOCAL_SYMBOL: b2DynamicTree.h<253:3> [b2DynamicTree.h <253:3 253:3>]
LOCAL_SYMBOL: b2DynamicTree.h<253:3> [b2DynamicTree.h <255:3 255:3>]
LOCAL_SYMBOL: b2DynamicTree.h<258:3> [b2DynamicTree.h <258:3 258:3>]
LOCAL_SYMBOL: b2DynamicTree.h<258:3> [b2DynamicTree.h <280:3 280:3>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <259:19 259:26>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <260:4 260:11>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <261:4 261:11>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <262:4 262:11>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <264:46 264:53>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <264:12 264:16>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <266:8 266:12>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <272:8 272:12>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <275:19 275:23>]
LOCAL_SYMBOL: b2DynamicTree.h<267:4> [b2DynamicTree.h <267:4 267:4>]
LOCAL_SYMBOL: b2DynamicTree.h<267:4> [b2DynamicTree.h <270:4 270:4>]
LOCAL_SYMBOL: b2DynamicTree.h<273:4> [b2DynamicTree.h <273:4 273:4>]
LOCAL_SYMBOL: b2DynamicTree.h<273:4> [b2DynamicTree.h <279:4 279:4>]
LOCAL_SYMBOL: b2DynamicTree.h<276:12> [b2DynamicTree.h <276:12 276:12>]
LOCAL_SYMBOL: b2DynamicTree.h<276:12> [b2DynamicTree.h <277:40 277:40>]
LOCAL_SYMBOL: b2DynamicTree.h<276:12> [b2DynamicTree.h <278:40 278:40>]
LOCAL_SYMBOL: b2DynamicTree.h<282:3> [b2DynamicTree.h <282:3 282:3>]
LOCAL_SYMBOL: b2DynamicTree.h<282:3> [b2DynamicTree.h <285:3 285:3>]
LOCAL_SYMBOL: b2DynamicTree.h<29:1> [b2DynamicTree.h <29:1 29:1>]
LOCAL_SYMBOL: b2DynamicTree.h<29:1> [b2DynamicTree.h <51:1 51:1>]
LOCAL_SYMBOL: b2DynamicTree.h<31:2> [b2DynamicTree.h <31:2 31:2>]
LOCAL_SYMBOL: b2DynamicTree.h<31:2> [b2DynamicTree.h <33:2 33:2>]
LOCAL_SYMBOL: b2DynamicTree.h<41:2> [b2DynamicTree.h <41:2 41:2>]
LOCAL_SYMBOL: b2DynamicTree.h<41:2> [b2DynamicTree.h <44:2 44:2>]
LOCAL_SYMBOL: b2DynamicTree.h<62:1> [b2DynamicTree.h <62:1 62:1>]
LOCAL_SYMBOL: b2DynamicTree.h<62:1> [b2DynamicTree.h <154:1 154:1>]
LOCAL_SYMBOL: b2DynamicTree.h<71:34> [b2DynamicTree.h <71:34 71:37>]
LOCAL_SYMBOL: b2DynamicTree.h<71:46> [b2DynamicTree.h <71:46 71:53>]
LOCAL_SYMBOL: b2DynamicTree.h<74:26> [b2DynamicTree.h <74:26 74:32>]
LOCAL_SYMBOL: b2DynamicTree.h<80:23> [b2DynamicTree.h <80:23 80:29>]
LOCAL_SYMBOL: b2DynamicTree.h<80:46> [b2DynamicTree.h <80:46 80:50>]
LOCAL_SYMBOL: b2DynamicTree.h<80:67> [b2DynamicTree.h <80:67 80:78>]
LOCAL_SYMBOL: b2DynamicTree.h<84:26> [b2DynamicTree.h <84:26 84:32>]
LOCAL_SYMBOL: b2DynamicTree.h<87:33> [b2DynamicTree.h <87:33 87:39>]
LOCAL_SYMBOL: b2DynamicTree.h<91:21> [b2DynamicTree.h <91:21 91:21>]
LOCAL_SYMBOL: b2DynamicTree.h<91:21> [b2DynamicTree.h <92:13 92:13>]
LOCAL_SYMBOL: b2DynamicTree.h<92:16> [b2DynamicTree.h <92:16 92:23>]
LOCAL_SYMBOL: b2DynamicTree.h<92:40> [b2DynamicTree.h <92:40 92:43>]
LOCAL_SYMBOL: b2Fixture.h<108:1> [b2Fixture.h <108:1 108:1>]
LOCAL_SYMBOL: b2Fixture.h<108:1> [b2Fixture.h <236:1 236:1>]
LOCAL_SYMBOL: b2Fixture.h<121:22> [b2Fixture.h <121:22 121:27>]
LOCAL_SYMBOL: b2Fixture.h<130:37> [b2Fixture.h <130:37 130:42>]
LOCAL_SYMBOL: b2Fixture.h<153:25> [b2Fixture.h <153:25 153:28>]
LOCAL_SYMBOL: b2Fixture.h<157:31> [b2Fixture.h <157:31 157:31>]
LOCAL_SYMBOL: b2Fixture.h<162:32> [b2Fixture.h <162:32 162:37>]
LOCAL_SYMBOL: b2Fixture.h<162:62> [b2Fixture.h <162:62 162:66>]
LOCAL_SYMBOL: b2Fixture.h<162:75> [b2Fixture.h <162:75 162:84>]
LOCAL_SYMBOL: b2Fixture.h<167:31> [b2Fixture.h <167:31 167:38>]
LOCAL_SYMBOL: b2Fixture.h<171:26> [b2Fixture.h <171:26 171:32>]
LOCAL_SYMBOL: b2Fixture.h<181:27> [b2Fixture.h <181:27 181:34>]
LOCAL_SYMBOL: b2Fixture.h<188:30> [b2Fixture.h <188:30 188:40>]
LOCAL_SYMBOL: b2Fixture.h<193:30> [b2Fixture.h <193:30 193:39>]
LOCAL_SYMBOL: b2Fixture.h<196:18> [b2Fixture.h <196:18 196:26>]
LOCAL_SYMBOL: b2Fixture.h<209:32> [b2Fixture.h <209:32 209:40>]
LOCAL_SYMBOL: b2Fixture.h<209:51> [b2Fixture.h <209:51 209:54>]
LOCAL_SYMBOL: b2Fixture.h<209:77> [b2Fixture.h <209:77 209:79>]
LOCAL_SYMBOL: b2Fixture.h<210:33> [b2Fixture.h <210:33 210:41>]
LOCAL_SYMBOL: b2Fixture.h<213:35> [b2Fixture.h <213:35 213:44>]
LOCAL_SYMBOL: b2Fixture.h<213:66> [b2Fixture.h <213:66 213:67>]
LOCAL_SYMBOL: b2Fixture.h<214:36> [b2Fixture.h <214:36 214:45>]
LOCAL_SYMBOL: b2Fixture.h<216:33> [b2Fixture.h <216:33 216:42>]
LOCAL_SYMBOL: b2Fixture.h<216:64> [b2Fixture.h <216:64 216:66>]
LOCAL_SYMBOL: b2Fixture.h<216:88> [b2Fixture.h <216:88 216:90>]
LOCAL_SYMBOL: b2Fixture.h<239:1> [b2Fixture.h <239:1 239:1>]
LOCAL_SYMBOL: b2Fixture.h<239:1> [b2Fixture.h <241:1 241:1>]
LOCAL_SYMBOL: b2Fixture.h<244:1> [b2Fixture.h <244:1 244:1>]
LOCAL_SYMBOL: b2Fixture.h<244:1> [b2Fixture.h <246:1 246:1>]
LOCAL_SYMBOL: b2Fixture.h<249:1> [b2Fixture.h <249:1 249:1>]
LOCAL_SYMBOL: b2Fixture.h<249:1> [b2Fixture.h <251:1 251:1>]
LOCAL_SYMBOL: b2Fixture.h<254:1> [b2Fixture.h <254:1 254:1>]
LOCAL_SYMBOL: b2Fixture.h<254:1> [b2Fixture.h <256:1 256:1>]
LOCAL_SYMBOL: b2Fixture.h<259:1> [b2Fixture.h <259:1 259:1>]
LOCAL_SYMBOL: b2Fixture.h<259:1> [b2Fixture.h <261:1 261:1>]
LOCAL_SYMBOL: b2Fixture.h<264:1> [b2Fixture.h <264:1 264:1>]
LOCAL_SYMBOL: b2Fixture.h<264:1> [b2Fixture.h <266:1 266:1>]
LOCAL_SYMBOL: b2Fixture.h<268:42> [b2Fixture.h <268:42 268:45>]
LOCAL_SYMBOL: b2Fixture.h<268:42> [b2Fixture.h <270:15 270:18>]
LOCAL_SYMBOL: b2Fixture.h<269:1> [b2Fixture.h <269:1 269:1>]
LOCAL_SYMBOL: b2Fixture.h<269:1> [b2Fixture.h <271:1 271:1>]
LOCAL_SYMBOL: b2Fixture.h<274:1> [b2Fixture.h <274:1 274:1>]
LOCAL_SYMBOL: b2Fixture.h<274:1> [b2Fixture.h <276:1 276:1>]
LOCAL_SYMBOL: b2Fixture.h<279:1> [b2Fixture.h <279:1 279:1>]
LOCAL_SYMBOL: b2Fixture.h<279:1> [b2Fixture.h <281:1 281:1>]
LOCAL_SYMBOL: b2Fixture.h<284:1> [b2Fixture.h <284:1 284:1>]
LOCAL_SYMBOL: b2Fixture.h<284:1> [b2Fixture.h <286:1 286:1>]
LOCAL_SYMBOL: b2Fixture.h<289:1> [b2Fixture.h <289:1 289:1>]
LOCAL_SYMBOL: b2Fixture.h<289:1> [b2Fixture.h <291:1 291:1>]
LOCAL_SYMBOL: b2Fixture.h<293:43> [b2Fixture.h <293:43 293:49>]
LOCAL_SYMBOL: b2Fixture.h<293:43> [b2Fixture.h <295:21 295:27>]
LOCAL_SYMBOL: b2Fixture.h<293:43> [b2Fixture.h <295:33 295:39>]
LOCAL_SYMBOL: b2Fixture.h<293:43> [b2Fixture.h <296:14 296:20>]
LOCAL_SYMBOL: b2Fixture.h<294:1> [b2Fixture.h <294:1 294:1>]
LOCAL_SYMBOL: b2Fixture.h<294:1> [b2Fixture.h <297:1 297:1>]
LOCAL_SYMBOL: b2Fixture.h<300:1> [b2Fixture.h <300:1 300:1>]
LOCAL_SYMBOL: b2Fixture.h<300:1> [b2Fixture.h <302:1 302:1>]
LOCAL_SYMBOL: b2Fixture.h<305:1> [b2Fixture.h <305:1 305:1>]
LOCAL_SYMBOL: b2Fixture.h<305:1> [b2Fixture.h <307:1 307:1>]
LOCAL_SYMBOL: b2Fixture.h<309:44> [b2Fixture.h <309:44 309:51>]
LOCAL_SYMBOL: b2Fixture.h<309:44> [b2Fixture.h <311:15 311:22>]
LOCAL_SYMBOL: b2Fixture.h<310:1> [b2Fixture.h <310:1 310:1>]
LOCAL_SYMBOL: b2Fixture.h<310:1> [b2Fixture.h <312:1 312:1>]
LOCAL_SYMBOL: b2Fixture.h<315:1> [b2Fixture.h <315:1 315:1>]
LOCAL_SYMBOL: b2Fixture.h<315:1> [b2Fixture.h <317:1 317:1>]
LOCAL_SYMBOL: b2Fixture.h<319:47> [b2Fixture.h <319:47 319:57>]
LOCAL_SYMBOL: b2Fixture.h<319:47> [b2Fixture.h <321:18 321:28>]
LOCAL_SYMBOL: b2Fixture.h<320:1> [b2Fixture.h <320:1 320:1>]
LOCAL_SYMBOL: b2Fixture.h<320:1> [b2Fixture.h <322:1 322:1>]
LOCAL_SYMBOL: b2Fixture.h<324:48> [b2Fixture.h <324:48 324:48>]
LOCAL_SYMBOL: b2Fixture.h<324:48> [b2Fixture.h <326:52 326:52>]
LOCAL_SYMBOL: b2Fixture.h<325:1> [b2Fixture.h <325:1 325:1>]
LOCAL_SYMBOL: b2Fixture.h<325:1> [b2Fixture.h <327:1 327:1>]
LOCAL_SYMBOL: b2Fixture.h<329:49> [b2Fixture.h <329:49 329:54>]
LOCAL_SYMBOL: b2Fixture.h<329:49> [b2Fixture.h <331:26 331:31>]
LOCAL_SYMBOL: b2Fixture.h<329:79> [b2Fixture.h <329:79 329:83>]
LOCAL_SYMBOL: b2Fixture.h<329:79> [b2Fixture.h <331:34 331:38>]
LOCAL_SYMBOL: b2Fixture.h<329:92> [b2Fixture.h <329:92 329:101>]
LOCAL_SYMBOL: b2Fixture.h<329:92> [b2Fixture.h <331:65 331:74>]
LOCAL_SYMBOL: b2Fixture.h<330:1> [b2Fixture.h <330:1 330:1>]
LOCAL_SYMBOL: b2Fixture.h<330:1> [b2Fixture.h <332:1 332:1>]
LOCAL_SYMBOL: b2Fixture.h<334:48> [b2Fixture.h <334:48 334:55>]
LOCAL_SYMBOL: b2Fixture.h<334:48> [b2Fixture.h <336:23 336:30>]
LOCAL_SYMBOL: b2Fixture.h<335:1> [b2Fixture.h <335:1 335:1>]
LOCAL_SYMBOL: b2Fixture.h<335:1> [b2Fixture.h <337:1 337:1>]
LOCAL_SYMBOL: b2Fixture.h<339:47> [b2Fixture.h <339:47 339:56>]
LOCAL_SYMBOL: b2Fixture.h<339:47> [b2Fixture.h <341:16 341:25>]
LOCAL_SYMBOL: b2Fixture.h<339:47> [b2Fixture.h <341:30 341:39>]
LOCAL_SYMBOL: b2Fixture.h<339:47> [b2Fixture.h <342:19 342:28>]
LOCAL_SYMBOL: b2Fixture.h<33:1> [b2Fixture.h <33:1 33:1>]
LOCAL_SYMBOL: b2Fixture.h<33:1> [b2Fixture.h <52:1 52:1>]
LOCAL_SYMBOL: b2Fixture.h<340:1> [b2Fixture.h <340:1 340:1>]
LOCAL_SYMBOL: b2Fixture.h<340:1> [b2Fixture.h <343:1 343:1>]
LOCAL_SYMBOL: b2Fixture.h<35:2> [b2Fixture.h <35:2 35:2>]
LOCAL_SYMBOL: b2Fixture.h<35:2> [b2Fixture.h <39:2 39:2>]
LOCAL_SYMBOL: b2Fixture.h<57:1> [b2Fixture.h <57:1 57:1>]
LOCAL_SYMBOL: b2Fixture.h<57:1> [b2Fixture.h <91:1 91:1>]
LOCAL_SYMBOL: b2Fixture.h<60:2> [b2Fixture.h <60:2 60:2>]
LOCAL_SYMBOL: b2Fixture.h<60:2> [b2Fixture.h <67:2 67:2>]
LOCAL_SYMBOL: b2Fixture.h<95:1> [b2Fixture.h <95:1 95:1>]
LOCAL_SYMBOL: b2Fixture.h<95:1> [b2Fixture.h <100:1 100:1>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <27:20 27:20>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <47:18 47:18>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <51:4 51:4>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <53:15 53:15>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <53:46 53:46>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <54:42 54:42>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <65:2 65:2>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <78:2 78:2>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <79:2 79:2>]
LOCAL_SYMBOL: b2GrowableStack.h<27:29> [b2GrowableStack.h <27:29 27:29>]
LOCAL_SYMBOL: b2GrowableStack.h<27:29> [b2GrowableStack.h <35:16 35:16>]
LOCAL_SYMBOL: b2GrowableStack.h<27:29> [b2GrowableStack.h <79:12 79:12>]
LOCAL_SYMBOL: b2GrowableStack.h<29:1> [b2GrowableStack.h <29:1 29:1>]
LOCAL_SYMBOL: b2GrowableStack.h<29:1> [b2GrowableStack.h <82:1 82:1>]
LOCAL_SYMBOL: b2GrowableStack.h<32:2> [b2GrowableStack.h <32:2 32:2>]
LOCAL_SYMBOL: b2GrowableStack.h<32:2> [b2GrowableStack.h <36:2 36:2>]
LOCAL_SYMBOL: b2GrowableStack.h<39:2> [b2GrowableStack.h <39:2 39:2>]
LOCAL_SYMBOL: b2GrowableStack.h<39:2> [b2GrowableStack.h <45:2 45:2>]
LOCAL_SYMBOL: b2GrowableStack.h<41:3> [b2GrowableStack.h <41:3 41:3>]
LOCAL_SYMBOL: b2GrowableStack.h<41:3> [b2GrowableStack.h <44:3 44:3>]
LOCAL_SYMBOL: b2GrowableStack.h<47:21> [b2GrowableStack.h <47:21 47:27>]
LOCAL_SYMBOL: b2GrowableStack.h<47:21> [b2GrowableStack.h <61:22 61:28>]
LOCAL_SYMBOL: b2GrowableStack.h<48:2> [b2GrowableStack.h <48:2 48:2>]
LOCAL_SYMBOL: b2GrowableStack.h<48:2> [b2GrowableStack.h <63:2 63:2>]
LOCAL_SYMBOL: b2GrowableStack.h<50:3> [b2GrowableStack.h <50:3 50:3>]
LOCAL_SYMBOL: b2GrowableStack.h<50:3> [b2GrowableStack.h <59:3 59:3>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <51:7 51:9>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <54:20 54:22>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <55:8 55:10>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <57:12 57:14>]
LOCAL_SYMBOL: b2GrowableStack.h<56:4> [b2GrowableStack.h <56:4 56:4>]
LOCAL_SYMBOL: b2GrowableStack.h<56:4> [b2GrowableStack.h <58:4 58:4>]
LOCAL_SYMBOL: b2GrowableStack.h<66:2> [b2GrowableStack.h <66:2 66:2>]
LOCAL_SYMBOL: b2GrowableStack.h<66:2> [b2GrowableStack.h <70:2 70:2>]
LOCAL_SYMBOL: b2GrowableStack.h<73:2> [b2GrowableStack.h <73:2 73:2>]
LOCAL_SYMBOL: b2GrowableStack.h<73:2> [b2GrowableStack.h <75:2 75:2>]
LOCAL_SYMBOL: b2Joint.h<104:1> [b2Joint.h <104:1 104:1>]
LOCAL_SYMBOL: b2Joint.h<104:1> [b2Joint.h <184:1 184:1>]
LOCAL_SYMBOL: b2Joint.h<123:42> [b2Joint.h <123:42 123:47>]
LOCAL_SYMBOL: b2Joint.h<126:44> [b2Joint.h <126:44 126:49>]
LOCAL_SYMBOL: b2Joint.h<136:25> [b2Joint.h <136:25 136:28>]
LOCAL_SYMBOL: b2Joint.h<147:22> [b2Joint.h <147:22 147:22>]
LOCAL_SYMBOL: b2Joint.h<147:22> [b2Joint.h <147:82 147:82>]
LOCAL_SYMBOL: b2Joint.h<150:41> [b2Joint.h <150:41 150:49>]
LOCAL_SYMBOL: b2Joint.h<150:41> [b2Joint.h <150:66 150:74>]
LOCAL_SYMBOL: b2Joint.h<150:52> [b2Joint.h <150:52 150:52>]
LOCAL_SYMBOL: b2Joint.h<150:52> [b2Joint.h <150:79 150:79>]
LOCAL_SYMBOL: b2Joint.h<158:43> [b2Joint.h <158:43 158:45>]
LOCAL_SYMBOL: b2Joint.h<158:66> [b2Joint.h <158:66 158:74>]
LOCAL_SYMBOL: b2Joint.h<159:31> [b2Joint.h <159:31 159:35>]
LOCAL_SYMBOL: b2Joint.h<159:56> [b2Joint.h <159:56 159:64>]
LOCAL_SYMBOL: b2Joint.h<161:28> [b2Joint.h <161:28 161:30>]
LOCAL_SYMBOL: b2Joint.h<162:21> [b2Joint.h <162:21 162:21>]
LOCAL_SYMBOL: b2Joint.h<162:21> [b2Joint.h <162:22 162:22>]
LOCAL_SYMBOL: b2Joint.h<164:59> [b2Joint.h <164:59 164:62>]
LOCAL_SYMBOL: b2Joint.h<165:60> [b2Joint.h <165:60 165:63>]
LOCAL_SYMBOL: b2Joint.h<168:60> [b2Joint.h <168:60 168:63>]
LOCAL_SYMBOL: b2Joint.h<187:1> [b2Joint.h <187:1 187:1>]
LOCAL_SYMBOL: b2Joint.h<187:1> [b2Joint.h <189:1 189:1>]
LOCAL_SYMBOL: b2Joint.h<192:1> [b2Joint.h <192:1 192:1>]
LOCAL_SYMBOL: b2Joint.h<192:1> [b2Joint.h <194:1 194:1>]
LOCAL_SYMBOL: b2Joint.h<197:1> [b2Joint.h <197:1 197:1>]
LOCAL_SYMBOL: b2Joint.h<197:1> [b2Joint.h <199:1 199:1>]
LOCAL_SYMBOL: b2Joint.h<202:1> [b2Joint.h <202:1 202:1>]
LOCAL_SYMBOL: b2Joint.h<202:1> [b2Joint.h <204:1 204:1>]
LOCAL_SYMBOL: b2Joint.h<207:1> [b2Joint.h <207:1 207:1>]
LOCAL_SYMBOL: b2Joint.h<207:1> [b2Joint.h <209:1 209:1>]
LOCAL_SYMBOL: b2Joint.h<212:1> [b2Joint.h <212:1 212:1>]
LOCAL_SYMBOL: b2Joint.h<212:1> [b2Joint.h <214:1 214:1>]
LOCAL_SYMBOL: b2Joint.h<216:40> [b2Joint.h <216:40 216:43>]
LOCAL_SYMBOL: b2Joint.h<216:40> [b2Joint.h <218:15 218:18>]
LOCAL_SYMBOL: b2Joint.h<217:1> [b2Joint.h <217:1 217:1>]
LOCAL_SYMBOL: b2Joint.h<217:1> [b2Joint.h <219:1 219:1>]
LOCAL_SYMBOL: b2Joint.h<222:1> [b2Joint.h <222:1 222:1>]
LOCAL_SYMBOL: b2Joint.h<222:1> [b2Joint.h <224:1 224:1>]
LOCAL_SYMBOL: b2Joint.h<30:1> [b2Joint.h <30:1 30:1>]
LOCAL_SYMBOL: b2Joint.h<30:1> [b2Joint.h <43:1 43:1>]
LOCAL_SYMBOL: b2Joint.h<46:1> [b2Joint.h <46:1 46:1>]
LOCAL_SYMBOL: b2Joint.h<46:1> [b2Joint.h <51:1 51:1>]
LOCAL_SYMBOL: b2Joint.h<54:1> [b2Joint.h <54:1 54:1>]
LOCAL_SYMBOL: b2Joint.h<54:1> [b2Joint.h <58:1 58:1>]
LOCAL_SYMBOL: b2Joint.h<66:1> [b2Joint.h <66:1 66:1>]
LOCAL_SYMBOL: b2Joint.h<66:1> [b2Joint.h <71:1 71:1>]
LOCAL_SYMBOL: b2Joint.h<75:1> [b2Joint.h <75:1 75:1>]
LOCAL_SYMBOL: b2Joint.h<75:1> [b2Joint.h <99:1 99:1>]
LOCAL_SYMBOL: b2Joint.h<77:2> [b2Joint.h <77:2 77:2>]
LOCAL_SYMBOL: b2Joint.h<77:2> [b2Joint.h <83:2 83:2>]
LOCAL_SYMBOL: b2Math.h<102:2> [b2Math.h <102:2 102:2>]
LOCAL_SYMBOL: b2Math.h<102:2> [b2Math.h <104:2 104:2>]
LOCAL_SYMBOL: b2Math.h<109:2> [b2Math.h <109:2 109:2>]
LOCAL_SYMBOL: b2Math.h<109:2> [b2Math.h <111:2 111:2>]
LOCAL_SYMBOL: b2Math.h<115:2> [b2Math.h <115:2 115:2>]
LOCAL_SYMBOL: b2Math.h<115:2> [b2Math.h <126:2 126:2>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <116:11 116:16>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <117:7 117:12>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <121:30 121:35>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <125:10 125:15>]
LOCAL_SYMBOL: b2Math.h<118:3> [b2Math.h <118:3 118:3>]
LOCAL_SYMBOL: b2Math.h<118:3> [b2Math.h <120:3 120:3>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <121:11 121:19>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <122:8 122:16>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <123:8 123:16>]
LOCAL_SYMBOL: b2Math.h<130:2> [b2Math.h <130:2 130:2>]
LOCAL_SYMBOL: b2Math.h<130:2> [b2Math.h <132:2 132:2>]
LOCAL_SYMBOL: b2Math.h<136:2> [b2Math.h <136:2 136:2>]
LOCAL_SYMBOL: b2Math.h<136:2> [b2Math.h <138:2 138:2>]
LOCAL_SYMBOL: b2Math.h<145:1> [b2Math.h <145:1 145:1>]
LOCAL_SYMBOL: b2Math.h<145:1> [b2Math.h <180:1 180:1>]
LOCAL_SYMBOL: b2Math.h<147:11> [b2Math.h <147:11 147:11>]
LOCAL_SYMBOL: b2Math.h<147:11> [b2Math.h <147:12 147:12>]
LOCAL_SYMBOL: b2Math.h<150:17> [b2Math.h <150:17 150:19>]
LOCAL_SYMBOL: b2Math.h<150:17> [b2Math.h <150:52 150:54>]
LOCAL_SYMBOL: b2Math.h<150:30> [b2Math.h <150:30 150:32>]
LOCAL_SYMBOL: b2Math.h<150:30> [b2Math.h <150:60 150:62>]
LOCAL_SYMBOL: b2Math.h<150:43> [b2Math.h <150:43 150:45>]
LOCAL_SYMBOL: b2Math.h<150:43> [b2Math.h <150:68 150:70>]
LOCAL_SYMBOL: b2Math.h<150:73> [b2Math.h <150:73 150:73>]
LOCAL_SYMBOL: b2Math.h<150:73> [b2Math.h <150:74 150:74>]
LOCAL_SYMBOL: b2Math.h<153:17> [b2Math.h <153:17 153:17>]
LOCAL_SYMBOL: b2Math.h<153:17> [b2Math.h <153:49 153:49>]
LOCAL_SYMBOL: b2Math.h<156:19> [b2Math.h <156:19 156:20>]
LOCAL_SYMBOL: b2Math.h<156:19> [b2Math.h <156:53 156:54>]
LOCAL_SYMBOL: b2Math.h<156:31> [b2Math.h <156:31 156:32>]
LOCAL_SYMBOL: b2Math.h<156:31> [b2Math.h <156:61 156:62>]
LOCAL_SYMBOL: b2Math.h<156:43> [b2Math.h <156:43 156:44>]
LOCAL_SYMBOL: b2Math.h<156:43> [b2Math.h <156:69 156:70>]
LOCAL_SYMBOL: b2Math.h<156:47> [b2Math.h <156:47 156:47>]
LOCAL_SYMBOL: b2Math.h<156:47> [b2Math.h <156:73 156:73>]
LOCAL_SYMBOL: b2Math.h<159:28> [b2Math.h <159:28 159:28>]
LOCAL_SYMBOL: b2Math.h<159:28> [b2Math.h <159:69 159:69>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:37 159:37>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:40 159:40>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:66 159:66>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <162:34 162:34>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:8 164:8>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:18 164:18>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:28 164:28>]
LOCAL_SYMBOL: b2Math.h<163:2> [b2Math.h <163:2 163:2>]
LOCAL_SYMBOL: b2Math.h<163:2> [b2Math.h <165:2 165:2>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <168:34 168:34>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:8 170:8>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:18 170:18>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:28 170:28>]
LOCAL_SYMBOL: b2Math.h<169:2> [b2Math.h <169:2 169:2>]
LOCAL_SYMBOL: b2Math.h<169:2> [b2Math.h <171:2 171:2>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <174:28 174:28>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:8 176:8>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:16 176:16>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:24 176:24>]
LOCAL_SYMBOL: b2Math.h<175:2> [b2Math.h <175:2 175:2>]
LOCAL_SYMBOL: b2Math.h<175:2> [b2Math.h <177:2 177:2>]
LOCAL_SYMBOL: b2Math.h<184:1> [b2Math.h <184:1 184:1>]
LOCAL_SYMBOL: b2Math.h<184:1> [b2Math.h <254:1 254:1>]
LOCAL_SYMBOL: b2Math.h<186:12> [b2Math.h <186:12 186:12>]
LOCAL_SYMBOL: b2Math.h<186:12> [b2Math.h <186:13 186:13>]
LOCAL_SYMBOL: b2Math.h<189:24> [b2Math.h <189:24 189:25>]
LOCAL_SYMBOL: b2Math.h<189:24> [b2Math.h <191:8 191:9>]
LOCAL_SYMBOL: b2Math.h<189:42> [b2Math.h <189:42 189:43>]
LOCAL_SYMBOL: b2Math.h<189:42> [b2Math.h <192:8 192:9>]
LOCAL_SYMBOL: b2Math.h<190:2> [b2Math.h <190:2 190:2>]
LOCAL_SYMBOL: b2Math.h<190:2> [b2Math.h <193:2 193:2>]
LOCAL_SYMBOL: b2Math.h<196:18> [b2Math.h <196:18 196:20>]
LOCAL_SYMBOL: b2Math.h<196:18> [b2Math.h <198:10 198:12>]
LOCAL_SYMBOL: b2Math.h<196:31> [b2Math.h <196:31 196:33>]
LOCAL_SYMBOL: b2Math.h<196:31> [b2Math.h <199:10 199:12>]
LOCAL_SYMBOL: b2Math.h<196:44> [b2Math.h <196:44 196:46>]
LOCAL_SYMBOL: b2Math.h<196:44> [b2Math.h <198:22 198:24>]
LOCAL_SYMBOL: b2Math.h<196:57> [b2Math.h <196:57 196:59>]
LOCAL_SYMBOL: b2Math.h<196:57> [b2Math.h <199:22 199:24>]
LOCAL_SYMBOL: b2Math.h<197:2> [b2Math.h <197:2 197:2>]
LOCAL_SYMBOL: b2Math.h<197:2> [b2Math.h <200:2 200:2>]
LOCAL_SYMBOL: b2Math.h<203:25> [b2Math.h <203:25 203:26>]
LOCAL_SYMBOL: b2Math.h<203:25> [b2Math.h <205:8 205:9>]
LOCAL_SYMBOL: b2Math.h<203:43> [b2Math.h <203:43 203:44>]
LOCAL_SYMBOL: b2Math.h<203:43> [b2Math.h <206:8 206:9>]
LOCAL_SYMBOL: b2Math.h<204:2> [b2Math.h <204:2 204:2>]
LOCAL_SYMBOL: b2Math.h<204:2> [b2Math.h <207:2 207:2>]
LOCAL_SYMBOL: b2Math.h<211:2> [b2Math.h <211:2 211:2>]
LOCAL_SYMBOL: b2Math.h<211:2> [b2Math.h <214:2 214:2>]
LOCAL_SYMBOL: b2Math.h<218:2> [b2Math.h <218:2 218:2>]
LOCAL_SYMBOL: b2Math.h<218:2> [b2Math.h <221:2 221:2>]
LOCAL_SYMBOL: b2Math.h<224:2> [b2Math.h <224:2 224:2>]
LOCAL_SYMBOL: b2Math.h<224:2> [b2Math.h <235:2 235:2>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <225:11 225:11>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <227:17 227:17>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <233:38 233:38>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <225:21 225:21>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <227:25 227:25>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <232:38 232:38>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <225:31 225:31>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <227:29 227:29>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <233:19 233:19>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <225:41 225:41>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <227:21 227:21>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <232:19 232:19>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <226:11 226:11>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <232:3 232:3>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <232:22 232:22>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <233:3 233:3>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <233:22 233:22>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <234:10 234:10>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <227:11 227:13>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <228:7 228:9>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <230:4 230:6>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <230:17 230:19>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <232:13 232:15>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <232:32 232:34>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <233:13 233:15>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <233:32 233:34>]
LOCAL_SYMBOL: b2Math.h<229:3> [b2Math.h <229:3 229:3>]
LOCAL_SYMBOL: b2Math.h<229:3> [b2Math.h <231:3 231:3>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <239:29 239:29>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <248:22 248:22>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <248:34 248:34>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <249:22 249:22>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <249:34 249:34>]
LOCAL_SYMBOL: b2Math.h<240:2> [b2Math.h <240:2 240:2>]
LOCAL_SYMBOL: b2Math.h<240:2> [b2Math.h <251:2 251:2>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <241:11 241:13>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <242:17 242:19>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <249:16 249:18>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <241:23 241:25>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <242:29 242:31>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <248:28 248:30>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <241:35 241:37>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <242:35 242:37>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <249:28 249:30>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <241:47 241:49>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <242:23 242:25>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <248:16 248:18>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <242:11 242:13>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <243:7 243:9>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <245:4 245:6>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <245:17 245:19>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <248:9 248:11>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <249:9 249:11>]
LOCAL_SYMBOL: b2Math.h<244:3> [b2Math.h <244:3 244:3>]
LOCAL_SYMBOL: b2Math.h<244:3> [b2Math.h <246:3 246:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <247:10 247:10>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <248:3 248:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <249:3 249:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <250:10 250:10>]
LOCAL_SYMBOL: b2Math.h<258:1> [b2Math.h <258:1 258:1>]
LOCAL_SYMBOL: b2Math.h<258:1> [b2Math.h <296:1 296:1>]
LOCAL_SYMBOL: b2Math.h<260:12> [b2Math.h <260:12 260:12>]
LOCAL_SYMBOL: b2Math.h<260:12> [b2Math.h <260:13 260:13>]
LOCAL_SYMBOL: b2Math.h<263:24> [b2Math.h <263:24 263:25>]
LOCAL_SYMBOL: b2Math.h<263:24> [b2Math.h <265:8 265:9>]
LOCAL_SYMBOL: b2Math.h<263:42> [b2Math.h <263:42 263:43>]
LOCAL_SYMBOL: b2Math.h<263:42> [b2Math.h <266:8 266:9>]
LOCAL_SYMBOL: b2Math.h<263:60> [b2Math.h <263:60 263:61>]
LOCAL_SYMBOL: b2Math.h<263:60> [b2Math.h <267:8 267:9>]
LOCAL_SYMBOL: b2Math.h<264:2> [b2Math.h <264:2 264:2>]
LOCAL_SYMBOL: b2Math.h<264:2> [b2Math.h <268:2 268:2>]
LOCAL_SYMBOL: b2Math.h<26:31> [b2Math.h <26:31 26:31>]
LOCAL_SYMBOL: b2Math.h<26:31> [b2Math.h <28:40 28:40>]
LOCAL_SYMBOL: b2Math.h<272:2> [b2Math.h <272:2 272:2>]
LOCAL_SYMBOL: b2Math.h<272:2> [b2Math.h <276:2 276:2>]
LOCAL_SYMBOL: b2Math.h<27:1> [b2Math.h <27:1 27:1>]
LOCAL_SYMBOL: b2Math.h<27:1> [b2Math.h <30:1 30:1>]
LOCAL_SYMBOL: b2Math.h<280:31> [b2Math.h <280:31 280:31>]
LOCAL_SYMBOL: b2Math.h<285:31> [b2Math.h <285:31 285:31>]
LOCAL_SYMBOL: b2Math.h<289:29> [b2Math.h <289:29 289:29>]
LOCAL_SYMBOL: b2Math.h<28:8> [b2Math.h <28:8 28:9>]
LOCAL_SYMBOL: b2Math.h<28:8> [b2Math.h <29:10 29:11>]
LOCAL_SYMBOL: b2Math.h<293:32> [b2Math.h <293:32 293:32>]
LOCAL_SYMBOL: b2Math.h<300:1> [b2Math.h <300:1 300:1>]
LOCAL_SYMBOL: b2Math.h<300:1> [b2Math.h <346:1 346:1>]
LOCAL_SYMBOL: b2Math.h<301:10> [b2Math.h <301:10 301:10>]
LOCAL_SYMBOL: b2Math.h<301:10> [b2Math.h <301:11 301:11>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <304:25 304:29>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <307:12 307:16>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <308:12 308:16>]
LOCAL_SYMBOL: b2Math.h<305:2> [b2Math.h <305:2 305:2>]
LOCAL_SYMBOL: b2Math.h<305:2> [b2Math.h <309:2 309:2>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <312:19 312:23>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <315:12 315:16>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <316:12 316:16>]
LOCAL_SYMBOL: b2Math.h<313:2> [b2Math.h <313:2 313:2>]
LOCAL_SYMBOL: b2Math.h<313:2> [b2Math.h <317:2 317:2>]
LOCAL_SYMBOL: b2Math.h<321:2> [b2Math.h <321:2 321:2>]
LOCAL_SYMBOL: b2Math.h<321:2> [b2Math.h <324:2 324:2>]
LOCAL_SYMBOL: b2Math.h<328:2> [b2Math.h <328:2 328:2>]
LOCAL_SYMBOL: b2Math.h<328:2> [b2Math.h <330:2 330:2>]
LOCAL_SYMBOL: b2Math.h<334:2> [b2Math.h <334:2 334:2>]
LOCAL_SYMBOL: b2Math.h<334:2> [b2Math.h <336:2 336:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <33:34 33:34>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <41:14 41:14>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <42:25 42:25>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <44:2 44:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:2 45:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:6 45:6>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:26 45:26>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:30 45:30>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <46:9 46:9>]
LOCAL_SYMBOL: b2Math.h<340:2> [b2Math.h <340:2 340:2>]
LOCAL_SYMBOL: b2Math.h<340:2> [b2Math.h <342:2 342:2>]
LOCAL_SYMBOL: b2Math.h<34:1> [b2Math.h <34:1 34:1>]
LOCAL_SYMBOL: b2Math.h<34:1> [b2Math.h <47:1 47:1>]
LOCAL_SYMBOL: b2Math.h<351:1> [b2Math.h <351:1 351:1>]
LOCAL_SYMBOL: b2Math.h<351:1> [b2Math.h <374:1 374:1>]
LOCAL_SYMBOL: b2Math.h<353:16> [b2Math.h <353:16 353:16>]
LOCAL_SYMBOL: b2Math.h<353:16> [b2Math.h <353:17 353:17>]
LOCAL_SYMBOL: b2Math.h<356:28> [b2Math.h <356:28 356:35>]
LOCAL_SYMBOL: b2Math.h<356:28> [b2Math.h <356:65 356:72>]
LOCAL_SYMBOL: b2Math.h<356:51> [b2Math.h <356:51 356:58>]
LOCAL_SYMBOL: b2Math.h<356:51> [b2Math.h <356:78 356:85>]
LOCAL_SYMBOL: b2Math.h<356:88> [b2Math.h <356:88 356:88>]
LOCAL_SYMBOL: b2Math.h<356:88> [b2Math.h <356:89 356:89>]
LOCAL_SYMBOL: b2Math.h<360:2> [b2Math.h <360:2 360:2>]
LOCAL_SYMBOL: b2Math.h<360:2> [b2Math.h <363:2 363:2>]
LOCAL_SYMBOL: b2Math.h<366:25> [b2Math.h <366:25 366:32>]
LOCAL_SYMBOL: b2Math.h<366:25> [b2Math.h <368:7 368:14>]
LOCAL_SYMBOL: b2Math.h<366:43> [b2Math.h <366:43 366:47>]
LOCAL_SYMBOL: b2Math.h<366:43> [b2Math.h <369:9 369:13>]
LOCAL_SYMBOL: b2Math.h<367:2> [b2Math.h <367:2 367:2>]
LOCAL_SYMBOL: b2Math.h<367:2> [b2Math.h <370:2 370:2>]
LOCAL_SYMBOL: b2Math.h<36:2> [b2Math.h <36:2 36:2>]
LOCAL_SYMBOL: b2Math.h<36:2> [b2Math.h <39:2 39:2>]
LOCAL_SYMBOL: b2Math.h<381:1> [b2Math.h <381:1 381:1>]
LOCAL_SYMBOL: b2Math.h<381:1> [b2Math.h <400:1 400:1>]
LOCAL_SYMBOL: b2Math.h<384:33> [b2Math.h <384:33 384:35>]
LOCAL_SYMBOL: b2Math.h<384:46> [b2Math.h <384:46 384:49>]
LOCAL_SYMBOL: b2Math.h<388:23> [b2Math.h <388:23 388:27>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <39:4 39:10>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <41:2 41:8>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <43:2 43:8>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <43:28 43:34>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <44:6 44:12>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <406:36 406:36>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <408:9 408:9>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <408:21 408:21>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <406:53 406:53>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <408:15 408:15>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <408:27 408:27>]
LOCAL_SYMBOL: b2Math.h<407:1> [b2Math.h <407:1 407:1>]
LOCAL_SYMBOL: b2Math.h<407:1> [b2Math.h <409:1 409:1>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <412:38 412:38>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <414:9 414:9>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <414:21 414:21>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <412:55 412:55>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <414:15 414:15>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <414:27 414:27>]
LOCAL_SYMBOL: b2Math.h<413:1> [b2Math.h <413:1 413:1>]
LOCAL_SYMBOL: b2Math.h<413:1> [b2Math.h <415:1 415:1>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <419:37 419:37>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <421:20 421:20>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <421:30 421:30>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <419:48 419:48>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <421:16 421:16>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <421:26 421:26>]
LOCAL_SYMBOL: b2Math.h<420:1> [b2Math.h <420:1 420:1>]
LOCAL_SYMBOL: b2Math.h<420:1> [b2Math.h <422:1 422:1>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <426:31 426:31>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <428:17 428:17>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <428:26 428:26>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <426:48 426:48>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <428:21 428:21>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <428:30 428:30>]
LOCAL_SYMBOL: b2Math.h<427:1> [b2Math.h <427:1 427:1>]
LOCAL_SYMBOL: b2Math.h<427:1> [b2Math.h <429:1 429:1>]
LOCAL_SYMBOL: b2Math.h<42:10> [b2Math.h <42:10 42:14>]
LOCAL_SYMBOL: b2Math.h<42:10> [b2Math.h <45:18 45:22>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <433:36 433:36>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:16 435:16>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:31 435:31>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:45 435:45>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:60 435:60>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <433:53 433:53>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:25 435:25>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:40 435:40>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:54 435:54>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:69 435:69>]
LOCAL_SYMBOL: b2Math.h<434:1> [b2Math.h <434:1 434:1>]
LOCAL_SYMBOL: b2Math.h<434:1> [b2Math.h <436:1 436:1>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <440:37 440:37>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <442:25 442:25>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <442:41 442:41>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <440:54 440:54>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <442:22 442:22>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <442:38 442:38>]
LOCAL_SYMBOL: b2Math.h<441:1> [b2Math.h <441:1 441:1>]
LOCAL_SYMBOL: b2Math.h<441:1> [b2Math.h <443:1 443:1>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <446:41 446:41>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <448:16 448:16>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <448:27 448:27>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <446:58 446:58>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <448:22 448:22>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <448:33 448:33>]
LOCAL_SYMBOL: b2Math.h<447:1> [b2Math.h <447:1 447:1>]
LOCAL_SYMBOL: b2Math.h<447:1> [b2Math.h <449:1 449:1>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <452:41 452:41>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <454:16 454:16>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <454:27 454:27>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <452:58 452:58>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <454:22 454:22>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <454:33 454:33>]
LOCAL_SYMBOL: b2Math.h<453:1> [b2Math.h <453:1 453:1>]
LOCAL_SYMBOL: b2Math.h<453:1> [b2Math.h <455:1 455:1>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <457:35 457:35>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <459:16 459:16>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <459:25 459:25>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <457:52 457:52>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <459:20 459:20>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <459:29 459:29>]
LOCAL_SYMBOL: b2Math.h<458:1> [b2Math.h <458:1 458:1>]
LOCAL_SYMBOL: b2Math.h<458:1> [b2Math.h <460:1 460:1>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <462:40 462:40>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <464:9 464:9>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <464:23 464:23>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <462:57 462:57>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <464:16 464:16>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <464:30 464:30>]
LOCAL_SYMBOL: b2Math.h<463:1> [b2Math.h <463:1 463:1>]
LOCAL_SYMBOL: b2Math.h<463:1> [b2Math.h <465:1 465:1>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <467:40 467:40>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <469:9 469:9>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <469:23 469:23>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <467:57 467:57>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <469:16 469:16>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <469:30 469:30>]
LOCAL_SYMBOL: b2Math.h<468:1> [b2Math.h <468:1 468:1>]
LOCAL_SYMBOL: b2Math.h<468:1> [b2Math.h <470:1 470:1>]
LOCAL_SYMBOL: b2Math.h<472:41> [b2Math.h <472:41 472:41>]
LOCAL_SYMBOL: b2Math.h<472:41> [b2Math.h <474:13 474:13>]
LOCAL_SYMBOL: b2Math.h<472:58> [b2Math.h <472:58 472:58>]
LOCAL_SYMBOL: b2Math.h<472:58> [b2Math.h <474:17 474:17>]
LOCAL_SYMBOL: b2Math.h<473:1> [b2Math.h <473:1 473:1>]
LOCAL_SYMBOL: b2Math.h<473:1> [b2Math.h <476:1 476:1>]
LOCAL_SYMBOL: b2Math.h<474:9> [b2Math.h <474:9 474:9>]
LOCAL_SYMBOL: b2Math.h<474:9> [b2Math.h <475:9 475:9>]
LOCAL_SYMBOL: b2Math.h<478:48> [b2Math.h <478:48 478:48>]
LOCAL_SYMBOL: b2Math.h<478:48> [b2Math.h <480:13 480:13>]
LOCAL_SYMBOL: b2Math.h<478:65> [b2Math.h <478:65 478:65>]
LOCAL_SYMBOL: b2Math.h<478:65> [b2Math.h <480:17 480:17>]
LOCAL_SYMBOL: b2Math.h<479:1> [b2Math.h <479:1 479:1>]
LOCAL_SYMBOL: b2Math.h<479:1> [b2Math.h <482:1 482:1>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <480:9 480:9>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <481:15 481:15>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <481:18 481:18>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <484:35 484:35>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:16 486:16>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:25 486:25>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:34 486:34>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <484:52 484:52>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:20 486:20>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:29 486:29>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:38 486:38>]
LOCAL_SYMBOL: b2Math.h<485:1> [b2Math.h <485:1 485:1>]
LOCAL_SYMBOL: b2Math.h<485:1> [b2Math.h <487:1 487:1>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <490:41 490:41>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:16 492:16>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:27 492:27>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:38 492:38>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <490:58 490:58>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:22 492:22>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:33 492:33>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:44 492:44>]
LOCAL_SYMBOL: b2Math.h<491:1> [b2Math.h <491:1 491:1>]
LOCAL_SYMBOL: b2Math.h<491:1> [b2Math.h <493:1 493:1>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <496:41 496:41>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:16 498:16>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:27 498:27>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:38 498:38>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <496:58 496:58>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:22 498:22>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:33 498:33>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:44 498:44>]
LOCAL_SYMBOL: b2Math.h<497:1> [b2Math.h <497:1 497:1>]
LOCAL_SYMBOL: b2Math.h<497:1> [b2Math.h <499:1 499:1>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <502:36 502:36>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:9 504:9>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:21 504:21>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:33 504:33>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <502:53 502:53>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:15 504:15>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:27 504:27>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:39 504:39>]
LOCAL_SYMBOL: b2Math.h<503:1> [b2Math.h <503:1 503:1>]
LOCAL_SYMBOL: b2Math.h<503:1> [b2Math.h <505:1 505:1>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <508:37 508:37>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:16 510:16>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:28 510:28>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:39 510:39>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:51 510:51>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:62 510:62>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:74 510:74>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <508:54 508:54>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:22 510:22>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:34 510:34>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:45 510:45>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:57 510:57>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:68 510:68>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:80 510:80>]
LOCAL_SYMBOL: b2Math.h<509:1> [b2Math.h <509:1 509:1>]
LOCAL_SYMBOL: b2Math.h<509:1> [b2Math.h <511:1 511:1>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <513:43 513:43>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <515:17 515:17>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <515:30 515:30>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <513:61 513:61>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <515:24 515:24>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <515:37 515:37>]
LOCAL_SYMBOL: b2Math.h<514:1> [b2Math.h <514:1 514:1>]
LOCAL_SYMBOL: b2Math.h<514:1> [b2Math.h <516:1 516:1>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <519:37 519:37>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <521:23 521:23>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <521:39 521:39>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <519:55 519:55>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <521:26 521:26>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <521:42 521:42>]
LOCAL_SYMBOL: b2Math.h<520:1> [b2Math.h <520:1 520:1>]
LOCAL_SYMBOL: b2Math.h<520:1> [b2Math.h <522:1 522:1>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <525:38 525:38>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <527:18 527:18>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <527:37 527:37>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <528:18 528:18>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <528:37 528:37>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <525:56 525:56>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <527:24 527:24>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <527:43 527:43>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <528:24 528:24>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <528:43 528:43>]
LOCAL_SYMBOL: b2Math.h<526:1> [b2Math.h <526:1 526:1>]
LOCAL_SYMBOL: b2Math.h<526:1> [b2Math.h <530:1 530:1>]
LOCAL_SYMBOL: b2Math.h<527:9> [b2Math.h <527:9 527:10>]
LOCAL_SYMBOL: b2Math.h<527:9> [b2Math.h <529:17 529:18>]
LOCAL_SYMBOL: b2Math.h<528:9> [b2Math.h <528:9 528:10>]
LOCAL_SYMBOL: b2Math.h<528:9> [b2Math.h <529:21 529:22>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <533:36 533:36>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:15 535:15>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:28 535:28>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:41 535:41>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <533:53 533:53>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:9 535:9>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:22 535:22>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:35 535:35>]
LOCAL_SYMBOL: b2Math.h<534:1> [b2Math.h <534:1 534:1>]
LOCAL_SYMBOL: b2Math.h<534:1> [b2Math.h <536:1 536:1>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <539:38 539:38>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:16 541:16>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:31 541:31>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:45 541:45>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:60 541:60>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <539:55 539:55>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:25 541:25>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:40 541:40>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:54 541:54>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:69 541:69>]
LOCAL_SYMBOL: b2Math.h<540:1> [b2Math.h <540:1 540:1>]
LOCAL_SYMBOL: b2Math.h<540:1> [b2Math.h <542:1 542:1>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <545:33 545:33>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <552:9 552:9>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <552:21 552:21>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <553:9 553:9>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <553:21 553:21>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <545:49 545:49>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <552:15 552:15>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <552:27 552:27>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <553:15 553:15>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <553:27 553:27>]
LOCAL_SYMBOL: b2Math.h<546:1> [b2Math.h <546:1 546:1>]
LOCAL_SYMBOL: b2Math.h<546:1> [b2Math.h <555:1 555:1>]
LOCAL_SYMBOL: b2Math.h<54:1> [b2Math.h <54:1 54:1>]
LOCAL_SYMBOL: b2Math.h<54:1> [b2Math.h <141:1 141:1>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <551:8 551:9>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <552:2 552:3>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <553:2 553:3>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <554:9 554:10>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <558:34 558:34>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <565:9 565:9>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <565:21 565:21>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <566:9 566:9>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <566:21 566:21>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <558:50 558:50>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <565:15 565:15>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <565:27 565:27>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <566:15 566:15>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <566:27 566:27>]
LOCAL_SYMBOL: b2Math.h<559:1> [b2Math.h <559:1 559:1>]
LOCAL_SYMBOL: b2Math.h<559:1> [b2Math.h <568:1 568:1>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <564:8 564:9>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <565:2 565:3>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <566:2 566:3>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <567:9 567:10>]
LOCAL_SYMBOL: b2Math.h<56:11> [b2Math.h <56:11 56:11>]
LOCAL_SYMBOL: b2Math.h<56:11> [b2Math.h <56:12 56:12>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <571:34 571:34>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:16 573:16>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:28 573:28>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:39 573:39>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:51 573:51>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <571:51 571:51>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:22 573:22>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:34 573:34>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:45 573:45>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:57 573:57>]
LOCAL_SYMBOL: b2Math.h<572:1> [b2Math.h <572:1 572:1>]
LOCAL_SYMBOL: b2Math.h<572:1> [b2Math.h <574:1 574:1>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <577:35 577:35>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:16 579:16>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:28 579:28>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:40 579:40>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:52 579:52>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <577:52 577:52>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:22 579:22>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:34 579:34>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:46 579:46>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:58 579:58>]
LOCAL_SYMBOL: b2Math.h<578:1> [b2Math.h <578:1 578:1>]
LOCAL_SYMBOL: b2Math.h<578:1> [b2Math.h <580:1 580:1>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <582:40 582:40>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:15 584:15>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:29 584:29>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:44 584:44>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:15 585:15>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:29 585:29>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:44 585:44>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <582:57 582:57>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <584:23 584:23>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <584:37 584:37>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <585:23 585:23>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <585:37 585:37>]
LOCAL_SYMBOL: b2Math.h<583:1> [b2Math.h <583:1 583:1>]
LOCAL_SYMBOL: b2Math.h<583:1> [b2Math.h <588:1 588:1>]
LOCAL_SYMBOL: b2Math.h<584:10> [b2Math.h <584:10 584:10>]
LOCAL_SYMBOL: b2Math.h<584:10> [b2Math.h <587:16 587:16>]
LOCAL_SYMBOL: b2Math.h<585:10> [b2Math.h <585:10 585:10>]
LOCAL_SYMBOL: b2Math.h<585:10> [b2Math.h <587:19 587:19>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <590:41 590:41>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <592:21 592:21>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <593:21 593:21>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <594:15 594:15>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <594:28 594:28>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <595:16 595:16>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <595:29 595:29>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <590:58 590:58>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <592:15 592:15>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <593:15 593:15>]
LOCAL_SYMBOL: b2Math.h<591:1> [b2Math.h <591:1 591:1>]
LOCAL_SYMBOL: b2Math.h<591:1> [b2Math.h <598:1 598:1>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <592:10 592:11>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <594:23 594:24>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <595:24 595:25>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <593:10 593:11>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <594:36 594:37>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <595:37 595:38>]
LOCAL_SYMBOL: b2Math.h<594:10> [b2Math.h <594:10 594:10>]
LOCAL_SYMBOL: b2Math.h<594:10> [b2Math.h <597:16 597:16>]
LOCAL_SYMBOL: b2Math.h<595:10> [b2Math.h <595:10 595:10>]
LOCAL_SYMBOL: b2Math.h<595:10> [b2Math.h <597:19 597:19>]
LOCAL_SYMBOL: b2Math.h<59:17> [b2Math.h <59:17 59:19>]
LOCAL_SYMBOL: b2Math.h<59:17> [b2Math.h <59:39 59:41>]
LOCAL_SYMBOL: b2Math.h<59:30> [b2Math.h <59:30 59:32>]
LOCAL_SYMBOL: b2Math.h<59:30> [b2Math.h <59:47 59:49>]
LOCAL_SYMBOL: b2Math.h<59:52> [b2Math.h <59:52 59:52>]
LOCAL_SYMBOL: b2Math.h<59:52> [b2Math.h <59:53 59:53>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <602:45 602:45>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <605:14 605:14>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <606:14 606:14>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <606:26 606:26>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <602:67 602:67>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <605:19 605:19>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <606:19 606:19>]
LOCAL_SYMBOL: b2Math.h<603:1> [b2Math.h <603:1 603:1>]
LOCAL_SYMBOL: b2Math.h<603:1> [b2Math.h <608:1 608:1>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <604:14 604:14>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <605:2 605:2>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <606:2 606:2>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <607:9 607:9>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <612:46 612:46>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <615:15 615:15>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <616:15 616:15>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <616:26 616:26>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <612:68 612:68>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <615:20 615:20>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <616:20 616:20>]
LOCAL_SYMBOL: b2Math.h<613:1> [b2Math.h <613:1 613:1>]
LOCAL_SYMBOL: b2Math.h<613:1> [b2Math.h <618:1 618:1>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <614:14 614:14>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <615:2 615:2>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <616:2 616:2>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <617:9 617:9>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <620:20 620:20>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <621:8 621:8>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <621:16 621:16>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <623:13 623:13>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <621:18 621:18>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:9 623:9>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:20 623:20>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:25 623:25>]
LOCAL_SYMBOL: b2Math.h<622:1> [b2Math.h <622:1 622:1>]
LOCAL_SYMBOL: b2Math.h<622:1> [b2Math.h <624:1 624:1>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <626:35 626:35>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <628:22 628:22>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <628:34 628:34>]
LOCAL_SYMBOL: b2Math.h<627:1> [b2Math.h <627:1 627:1>]
LOCAL_SYMBOL: b2Math.h<627:1> [b2Math.h <629:1 629:1>]
LOCAL_SYMBOL: b2Math.h<62:17> [b2Math.h <62:17 62:17>]
LOCAL_SYMBOL: b2Math.h<62:17> [b2Math.h <62:39 62:39>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <631:37 631:37>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <633:23 633:23>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <633:36 633:36>]
LOCAL_SYMBOL: b2Math.h<632:1> [b2Math.h <632:1 632:1>]
LOCAL_SYMBOL: b2Math.h<632:1> [b2Math.h <634:1 634:1>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <636:20 636:20>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <637:8 637:8>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <637:16 637:16>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <637:21 637:21>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <637:18 637:18>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <639:9 639:9>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <639:17 639:17>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <637:23 637:23>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <639:13 639:13>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <639:21 639:21>]
LOCAL_SYMBOL: b2Math.h<638:1> [b2Math.h <638:1 638:1>]
LOCAL_SYMBOL: b2Math.h<638:1> [b2Math.h <640:1 640:1>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <642:35 642:35>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <644:22 644:22>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <644:39 644:39>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <642:52 642:52>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <644:27 644:27>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <644:44 644:44>]
LOCAL_SYMBOL: b2Math.h<643:1> [b2Math.h <643:1 643:1>]
LOCAL_SYMBOL: b2Math.h<643:1> [b2Math.h <645:1 645:1>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <647:20 647:20>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <648:8 648:8>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <648:16 648:16>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <648:21 648:21>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <648:18 648:18>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <650:9 650:9>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <650:17 650:17>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <648:23 648:23>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <650:13 650:13>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <650:21 650:21>]
LOCAL_SYMBOL: b2Math.h<649:1> [b2Math.h <649:1 649:1>]
LOCAL_SYMBOL: b2Math.h<649:1> [b2Math.h <651:1 651:1>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <653:35 653:35>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <655:22 655:22>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <655:39 655:39>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <653:52 653:52>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <655:27 655:27>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <655:44 655:44>]
LOCAL_SYMBOL: b2Math.h<654:1> [b2Math.h <654:1 654:1>]
LOCAL_SYMBOL: b2Math.h<654:1> [b2Math.h <656:1 656:1>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <658:20 658:20>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:8 659:8>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:18 659:18>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:23 659:23>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:30 659:30>]
LOCAL_SYMBOL: b2Math.h<659:20> [b2Math.h <659:20 659:20>]
LOCAL_SYMBOL: b2Math.h<659:20> [b2Math.h <661:26 661:26>]
LOCAL_SYMBOL: b2Math.h<659:25> [b2Math.h <659:25 659:27>]
LOCAL_SYMBOL: b2Math.h<659:25> [b2Math.h <661:15 661:17>]
LOCAL_SYMBOL: b2Math.h<659:32> [b2Math.h <659:32 659:35>]
LOCAL_SYMBOL: b2Math.h<659:32> [b2Math.h <661:29 661:32>]
LOCAL_SYMBOL: b2Math.h<65:19> [b2Math.h <65:19 65:20>]
LOCAL_SYMBOL: b2Math.h<65:19> [b2Math.h <65:41 65:42>]
LOCAL_SYMBOL: b2Math.h<65:31> [b2Math.h <65:31 65:32>]
LOCAL_SYMBOL: b2Math.h<65:31> [b2Math.h <65:49 65:50>]
LOCAL_SYMBOL: b2Math.h<65:35> [b2Math.h <65:35 65:35>]
LOCAL_SYMBOL: b2Math.h<65:35> [b2Math.h <65:53 65:53>]
LOCAL_SYMBOL: b2Math.h<660:1> [b2Math.h <660:1 660:1>]
LOCAL_SYMBOL: b2Math.h<660:1> [b2Math.h <662:1 662:1>]
LOCAL_SYMBOL: b2Math.h<664:37> [b2Math.h <664:37 664:37>]
LOCAL_SYMBOL: b2Math.h<664:37> [b2Math.h <666:26 666:26>]
LOCAL_SYMBOL: b2Math.h<664:54> [b2Math.h <664:54 664:56>]
LOCAL_SYMBOL: b2Math.h<664:54> [b2Math.h <666:15 666:17>]
LOCAL_SYMBOL: b2Math.h<664:73> [b2Math.h <664:73 664:76>]
LOCAL_SYMBOL: b2Math.h<664:73> [b2Math.h <666:29 666:32>]
LOCAL_SYMBOL: b2Math.h<665:1> [b2Math.h <665:1 665:1>]
LOCAL_SYMBOL: b2Math.h<665:1> [b2Math.h <667:1 667:1>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <669:19 669:19>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <669:41 669:41>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <669:47 669:47>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <671:2 671:2>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <669:44 669:44>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <671:10 671:10>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <672:2 672:2>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <669:50 669:50>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <672:6 672:6>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <673:2 673:2>]
LOCAL_SYMBOL: b2Math.h<670:1> [b2Math.h <670:1 670:1>]
LOCAL_SYMBOL: b2Math.h<670:1> [b2Math.h <674:1 674:1>]
LOCAL_SYMBOL: b2Math.h<671:4> [b2Math.h <671:4 671:6>]
LOCAL_SYMBOL: b2Math.h<671:4> [b2Math.h <673:6 673:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <681:39 681:39>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <683:2 683:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <683:8 683:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <684:2 684:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <684:8 684:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <685:2 685:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <685:8 685:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <686:2 686:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <686:8 686:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <687:2 687:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <687:8 687:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <688:9 688:9>]
LOCAL_SYMBOL: b2Math.h<682:1> [b2Math.h <682:1 682:1>]
LOCAL_SYMBOL: b2Math.h<682:1> [b2Math.h <689:1 689:1>]
LOCAL_SYMBOL: b2Math.h<68:28> [b2Math.h <68:28 68:28>]
LOCAL_SYMBOL: b2Math.h<68:28> [b2Math.h <68:65 68:65>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:37 68:37>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:40 68:40>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:62 68:62>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <691:35 691:35>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:16 693:16>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:26 693:26>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:31 693:31>]
LOCAL_SYMBOL: b2Math.h<692:1> [b2Math.h <692:1 692:1>]
LOCAL_SYMBOL: b2Math.h<692:1> [b2Math.h <695:1 695:1>]
LOCAL_SYMBOL: b2Math.h<693:7> [b2Math.h <693:7 693:12>]
LOCAL_SYMBOL: b2Math.h<693:7> [b2Math.h <694:9 694:14>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <697:48 697:49>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <699:2 699:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <701:2 701:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <704:2 704:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <704:17 704:18>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <697:60 697:63>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <699:18 699:21>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <699:31 699:34>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <700:26 700:29>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <700:39 700:42>]
LOCAL_SYMBOL: b2Math.h<698:1> [b2Math.h <698:1 698:1>]
LOCAL_SYMBOL: b2Math.h<698:1> [b2Math.h <705:1 705:1>]
LOCAL_SYMBOL: b2Math.h<700:10> [b2Math.h <700:10 700:14>]
LOCAL_SYMBOL: b2Math.h<700:10> [b2Math.h <701:12 701:16>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <707:38 707:42>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <710:18 710:22>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <713:11 713:15>]
LOCAL_SYMBOL: b2Math.h<708:1> [b2Math.h <708:1 708:1>]
LOCAL_SYMBOL: b2Math.h<708:1> [b2Math.h <714:1 714:1>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <710:10 710:13>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <711:8 711:11>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <712:8 712:11>]
LOCAL_SYMBOL: b2Math.h<718:1> [b2Math.h <718:1 718:1>]
LOCAL_SYMBOL: b2Math.h<718:1> [b2Math.h <723:1 723:1>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <719:10 719:14>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <720:15 720:19>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <720:35 720:39>]
LOCAL_SYMBOL: b2Math.h<71:29> [b2Math.h <71:29 71:29>]
LOCAL_SYMBOL: b2Math.h<71:29> [b2Math.h <73:15 73:15>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <720:10 720:10>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <721:8 721:8>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <722:7 722:7>]
LOCAL_SYMBOL: b2Math.h<72:2> [b2Math.h <72:2 72:2>]
LOCAL_SYMBOL: b2Math.h<72:2> [b2Math.h <74:2 74:2>]
LOCAL_SYMBOL: b2Math.h<77:30> [b2Math.h <77:30 77:30>]
LOCAL_SYMBOL: b2Math.h<77:30> [b2Math.h <79:15 79:15>]
LOCAL_SYMBOL: b2Math.h<78:2> [b2Math.h <78:2 78:2>]
LOCAL_SYMBOL: b2Math.h<78:2> [b2Math.h <80:2 80:2>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <83:34 83:34>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <85:8 85:8>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <85:18 85:18>]
LOCAL_SYMBOL: b2Math.h<84:2> [b2Math.h <84:2 84:2>]
LOCAL_SYMBOL: b2Math.h<84:2> [b2Math.h <86:2 86:2>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <89:34 89:34>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <91:8 91:8>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <91:18 91:18>]
LOCAL_SYMBOL: b2Math.h<90:2> [b2Math.h <90:2 90:2>]
LOCAL_SYMBOL: b2Math.h<90:2> [b2Math.h <92:2 92:2>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <95:28 95:28>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <97:8 97:8>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <97:16 97:16>]
LOCAL_SYMBOL: b2Math.h<96:2> [b2Math.h <96:2 96:2>]
LOCAL_SYMBOL: b2Math.h<96:2> [b2Math.h <98:2 98:2>]
LOCAL_SYMBOL: b2Settings.h<135:21> [b2Settings.h <135:21 135:24>]
LOCAL_SYMBOL: b2Settings.h<138:19> [b2Settings.h <138:19 138:21>]
LOCAL_SYMBOL: b2Settings.h<141:24> [b2Settings.h <141:24 141:29>]
LOCAL_SYMBOL: b2Settings.h<146:1> [b2Settings.h <146:1 146:1>]
LOCAL_SYMBOL: b2Settings.h<146:1> [b2Settings.h <150:1 150:1>]
LOCAL_SYMBOL: b2Shape.h<100:1> [b2Shape.h <100:1 100:1>]
LOCAL_SYMBOL: b2Shape.h<100:1> [b2Shape.h <102:1 102:1>]
LOCAL_SYMBOL: b2Shape.h<28:1> [b2Shape.h <28:1 28:1>]
LOCAL_SYMBOL: b2Shape.h<28:1> [b2Shape.h <37:1 37:1>]
LOCAL_SYMBOL: b2Shape.h<43:1> [b2Shape.h <43:1 43:1>]
LOCAL_SYMBOL: b2Shape.h<43:1> [b2Shape.h <97:1 97:1>]
LOCAL_SYMBOL: b2Shape.h<47:2> [b2Shape.h <47:2 47:2>]
LOCAL_SYMBOL: b2Shape.h<47:2> [b2Shape.h <53:2 53:2>]
LOCAL_SYMBOL: b2Shape.h<55:21> [b2Shape.h <55:21 55:21>]
LOCAL_SYMBOL: b2Shape.h<55:21> [b2Shape.h <55:22 55:22>]
LOCAL_SYMBOL: b2Shape.h<58:43> [b2Shape.h <58:43 58:51>]
LOCAL_SYMBOL: b2Shape.h<70:44> [b2Shape.h <70:44 70:45>]
LOCAL_SYMBOL: b2Shape.h<70:62> [b2Shape.h <70:62 70:62>]
LOCAL_SYMBOL: b2Shape.h<77:40> [b2Shape.h <77:40 77:45>]
LOCAL_SYMBOL: b2Shape.h<77:70> [b2Shape.h <77:70 77:74>]
LOCAL_SYMBOL: b2Shape.h<78:26> [b2Shape.h <78:26 78:34>]
LOCAL_SYMBOL: b2Shape.h<78:43> [b2Shape.h <78:43 78:52>]
LOCAL_SYMBOL: b2Shape.h<84:35> [b2Shape.h <84:35 84:38>]
LOCAL_SYMBOL: b2Shape.h<84:60> [b2Shape.h <84:60 84:61>]
LOCAL_SYMBOL: b2Shape.h<84:70> [b2Shape.h <84:70 84:79>]
LOCAL_SYMBOL: b2Shape.h<90:39> [b2Shape.h <90:39 90:46>]
LOCAL_SYMBOL: b2Shape.h<90:57> [b2Shape.h <90:57 90:63>]
LOCAL_SYMBOL: b2StackAllocator.h<28:1> [b2StackAllocator.h <28:1 28:1>]
LOCAL_SYMBOL: b2StackAllocator.h<28:1> [b2StackAllocator.h <32:1 32:1>]
LOCAL_SYMBOL: b2StackAllocator.h<38:1> [b2StackAllocator.h <38:1 38:1>]
LOCAL_SYMBOL: b2StackAllocator.h<38:1> [b2StackAllocator.h <58:1 58:1>]
LOCAL_SYMBOL: b2StackAllocator.h<43:23> [b2StackAllocator.h <43:23 43:26>]
LOCAL_SYMBOL: b2StackAllocator.h<44:18> [b2StackAllocator.h <44:18 44:18>]
LOCAL_SYMBOL: b2TimeStep.h<26:1> [b2TimeStep.h <26:1 26:1>]
LOCAL_SYMBOL: b2TimeStep.h<26:1> [b2TimeStep.h <35:1 35:1>]
LOCAL_SYMBOL: b2TimeStep.h<39:1> [b2TimeStep.h <39:1 39:1>]
LOCAL_SYMBOL: b2TimeStep.h<39:1> [b2TimeStep.h <46:1 46:1>]
LOCAL_SYMBOL: b2TimeStep.h<50:1> [b2TimeStep.h <50:1 50:1>]
LOCAL_SYMBOL: b2TimeStep.h<50:1> [b2TimeStep.h <53:1 53:1>]
LOCAL_SYMBOL: b2TimeStep.h<57:1> [b2TimeStep.h <57:1 57:1>]
LOCAL_SYMBOL: b2TimeStep.h<57:1> [b2TimeStep.h <60:1 60:1>]
LOCAL_SYMBOL: b2TimeStep.h<64:1> [b2TimeStep.h <64:1 64:1>]
LOCAL_SYMBOL: b2TimeStep.h<64:1> [b2TimeStep.h <68:1 68:1>]
LOCAL_SYMBOL: b2World.h<114:34> [b2World.h <114:34 114:41>]
LOCAL_SYMBOL: b2World.h<114:58> [b2World.h <114:58 114:61>]
LOCAL_SYMBOL: b2World.h<122:34> [b2World.h <122:34 122:41>]
LOCAL_SYMBOL: b2World.h<122:58> [b2World.h <122:58 122:63>]
LOCAL_SYMBOL: b2World.h<122:80> [b2World.h <122:80 122:85>]
LOCAL_SYMBOL: b2World.h<145:29> [b2World.h <145:29 145:32>]
LOCAL_SYMBOL: b2World.h<146:32> [b2World.h <146:32 146:32>]
LOCAL_SYMBOL: b2World.h<146:32> [b2World.h <146:55 146:55>]
LOCAL_SYMBOL: b2World.h<149:28> [b2World.h <149:28 149:31>]
LOCAL_SYMBOL: b2World.h<149:28> [b2World.h <149:53 149:56>]
LOCAL_SYMBOL: b2World.h<149:34> [b2World.h <149:34 149:34>]
LOCAL_SYMBOL: b2World.h<149:34> [b2World.h <149:59 149:59>]
LOCAL_SYMBOL: b2World.h<150:31> [b2World.h <150:31 150:31>]
LOCAL_SYMBOL: b2World.h<150:31> [b2World.h <150:56 150:56>]
LOCAL_SYMBOL: b2World.h<153:33> [b2World.h <153:33 153:36>]
LOCAL_SYMBOL: b2World.h<153:33> [b2World.h <153:63 153:66>]
LOCAL_SYMBOL: b2World.h<153:39> [b2World.h <153:39 153:39>]
LOCAL_SYMBOL: b2World.h<153:39> [b2World.h <153:69 153:69>]
LOCAL_SYMBOL: b2World.h<154:36> [b2World.h <154:36 154:36>]
LOCAL_SYMBOL: b2World.h<154:36> [b2World.h <154:66 154:66>]
LOCAL_SYMBOL: b2World.h<157:27> [b2World.h <157:27 157:30>]
LOCAL_SYMBOL: b2World.h<157:27> [b2World.h <157:51 157:54>]
LOCAL_SYMBOL: b2World.h<157:33> [b2World.h <157:33 157:33>]
LOCAL_SYMBOL: b2World.h<157:33> [b2World.h <157:57 157:57>]
LOCAL_SYMBOL: b2World.h<158:30> [b2World.h <158:30 158:30>]
LOCAL_SYMBOL: b2World.h<158:30> [b2World.h <158:54 158:54>]
LOCAL_SYMBOL: b2World.h<183:32> [b2World.h <183:32 183:38>]
LOCAL_SYMBOL: b2World.h<192:31> [b2World.h <192:31 192:34>]
LOCAL_SYMBOL: b2World.h<200:33> [b2World.h <200:33 200:41>]
LOCAL_SYMBOL: b2World.h<216:2> [b2World.h <216:2 216:2>]
LOCAL_SYMBOL: b2World.h<216:2> [b2World.h <220:2 220:2>]
LOCAL_SYMBOL: b2World.h<227:31> [b2World.h <227:31 227:34>]
LOCAL_SYMBOL: b2World.h<228:34> [b2World.h <228:34 228:37>]
LOCAL_SYMBOL: b2World.h<230:26> [b2World.h <230:26 230:30>]
LOCAL_SYMBOL: b2World.h<231:28> [b2World.h <231:28 231:32>]
LOCAL_SYMBOL: b2World.h<231:54> [b2World.h <231:54 231:55>]
LOCAL_SYMBOL: b2World.h<231:73> [b2World.h <231:73 231:77>]
LOCAL_SYMBOL: b2World.h<267:1> [b2World.h <267:1 267:1>]
LOCAL_SYMBOL: b2World.h<267:1> [b2World.h <269:1 269:1>]
LOCAL_SYMBOL: b2World.h<272:1> [b2World.h <272:1 272:1>]
LOCAL_SYMBOL: b2World.h<272:1> [b2World.h <274:1 274:1>]
LOCAL_SYMBOL: b2World.h<277:1> [b2World.h <277:1 277:1>]
LOCAL_SYMBOL: b2World.h<277:1> [b2World.h <279:1 279:1>]
LOCAL_SYMBOL: b2World.h<282:1> [b2World.h <282:1 282:1>]
LOCAL_SYMBOL: b2World.h<282:1> [b2World.h <284:1 284:1>]
LOCAL_SYMBOL: b2World.h<287:1> [b2World.h <287:1 287:1>]
LOCAL_SYMBOL: b2World.h<287:1> [b2World.h <289:1 289:1>]
LOCAL_SYMBOL: b2World.h<292:1> [b2World.h <292:1 292:1>]
LOCAL_SYMBOL: b2World.h<292:1> [b2World.h <294:1 294:1>]
LOCAL_SYMBOL: b2World.h<297:1> [b2World.h <297:1 297:1>]
LOCAL_SYMBOL: b2World.h<297:1> [b2World.h <299:1 299:1>]
LOCAL_SYMBOL: b2World.h<302:1> [b2World.h <302:1 302:1>]
LOCAL_SYMBOL: b2World.h<302:1> [b2World.h <304:1 304:1>]
LOCAL_SYMBOL: b2World.h<307:1> [b2World.h <307:1 307:1>]
LOCAL_SYMBOL: b2World.h<307:1> [b2World.h <309:1 309:1>]
LOCAL_SYMBOL: b2World.h<311:47> [b2World.h <311:47 311:53>]
LOCAL_SYMBOL: b2World.h<311:47> [b2World.h <313:14 313:20>]
LOCAL_SYMBOL: b2World.h<312:1> [b2World.h <312:1 312:1>]
LOCAL_SYMBOL: b2World.h<312:1> [b2World.h <314:1 314:1>]
LOCAL_SYMBOL: b2World.h<317:1> [b2World.h <317:1 317:1>]
LOCAL_SYMBOL: b2World.h<317:1> [b2World.h <319:1 319:1>]
LOCAL_SYMBOL: b2World.h<322:1> [b2World.h <322:1 322:1>]
LOCAL_SYMBOL: b2World.h<322:1> [b2World.h <324:1 324:1>]
LOCAL_SYMBOL: b2World.h<326:46> [b2World.h <326:46 326:49>]
LOCAL_SYMBOL: b2World.h<326:46> [b2World.h <328:6 328:9>]
LOCAL_SYMBOL: b2World.h<327:1> [b2World.h <327:1 327:1>]
LOCAL_SYMBOL: b2World.h<327:1> [b2World.h <336:1 336:1>]
LOCAL_SYMBOL: b2World.h<329:2> [b2World.h <329:2 329:2>]
LOCAL_SYMBOL: b2World.h<329:2> [b2World.h <331:2 331:2>]
LOCAL_SYMBOL: b2World.h<333:2> [b2World.h <333:2 333:2>]
LOCAL_SYMBOL: b2World.h<333:2> [b2World.h <335:2 335:2>]
LOCAL_SYMBOL: b2World.h<340:1> [b2World.h <340:1 340:1>]
LOCAL_SYMBOL: b2World.h<340:1> [b2World.h <342:1 342:1>]
LOCAL_SYMBOL: b2World.h<345:1> [b2World.h <345:1 345:1>]
LOCAL_SYMBOL: b2World.h<345:1> [b2World.h <347:1 347:1>]
LOCAL_SYMBOL: b2World.h<350:1> [b2World.h <350:1 350:1>]
LOCAL_SYMBOL: b2World.h<350:1> [b2World.h <352:1 352:1>]
LOCAL_SYMBOL: b2World.h<42:1> [b2World.h <42:1 42:1>]
LOCAL_SYMBOL: b2World.h<42:1> [b2World.h <264:1 264:1>]
LOCAL_SYMBOL: b2World.h<46:24> [b2World.h <46:24 46:30>]
LOCAL_SYMBOL: b2World.h<53:53> [b2World.h <53:53 53:60>]
LOCAL_SYMBOL: b2World.h<58:41> [b2World.h <58:41 58:46>]
LOCAL_SYMBOL: b2World.h<62:45> [b2World.h <62:45 62:52>]
LOCAL_SYMBOL: b2World.h<67:28> [b2World.h <67:28 67:36>]
LOCAL_SYMBOL: b2World.h<72:38> [b2World.h <72:38 72:40>]
LOCAL_SYMBOL: b2World.h<78:27> [b2World.h <78:27 78:30>]
LOCAL_SYMBOL: b2World.h<83:41> [b2World.h <83:41 83:43>]
LOCAL_SYMBOL: b2World.h<87:29> [b2World.h <87:29 87:33>]
LOCAL_SYMBOL: b2World.h<94:21> [b2World.h <94:21 94:28>]
LOCAL_SYMBOL: b2World.h<95:11> [b2World.h <95:11 95:28>]
LOCAL_SYMBOL: b2World.h<96:11> [b2World.h <96:11 96:28>]
LOCAL_SYMBOL: b2WorldCallbacks.h<102:35> [b2WorldCallbacks.h <102:35 102:41>]
LOCAL_SYMBOL: b2WorldCallbacks.h<102:35> [b2WorldCallbacks.h <104:15 104:21>]
LOCAL_SYMBOL: b2WorldCallbacks.h<102:62> [b2WorldCallbacks.h <102:62 102:72>]
LOCAL_SYMBOL: b2WorldCallbacks.h<102:62> [b2WorldCallbacks.h <105:15 105:25>]
LOCAL_SYMBOL: b2WorldCallbacks.h<103:2> [b2WorldCallbacks.h <103:2 103:2>]
LOCAL_SYMBOL: b2WorldCallbacks.h<103:2> [b2WorldCallbacks.h <106:2 106:2>]
LOCAL_SYMBOL: b2WorldCallbacks.h<114:36> [b2WorldCallbacks.h <114:36 114:42>]
LOCAL_SYMBOL: b2WorldCallbacks.h<114:36> [b2WorldCallbacks.h <116:15 116:21>]
LOCAL_SYMBOL: b2WorldCallbacks.h<114:69> [b2WorldCallbacks.h <114:69 114:75>]
LOCAL_SYMBOL: b2WorldCallbacks.h<114:69> [b2WorldCallbacks.h <117:15 117:21>]
LOCAL_SYMBOL: b2WorldCallbacks.h<115:2> [b2WorldCallbacks.h <115:2 115:2>]
LOCAL_SYMBOL: b2WorldCallbacks.h<115:2> [b2WorldCallbacks.h <118:2 118:2>]
LOCAL_SYMBOL: b2WorldCallbacks.h<124:1> [b2WorldCallbacks.h <124:1 124:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<124:1> [b2WorldCallbacks.h <131:1 131:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<126:29> [b2WorldCallbacks.h <126:29 126:29>]
LOCAL_SYMBOL: b2WorldCallbacks.h<126:29> [b2WorldCallbacks.h <126:30 126:30>]
LOCAL_SYMBOL: b2WorldCallbacks.h<130:40> [b2WorldCallbacks.h <130:40 130:46>]
LOCAL_SYMBOL: b2WorldCallbacks.h<136:1> [b2WorldCallbacks.h <136:1 136:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<136:1> [b2WorldCallbacks.h <153:1 153:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<138:31> [b2WorldCallbacks.h <138:31 138:31>]
LOCAL_SYMBOL: b2WorldCallbacks.h<138:31> [b2WorldCallbacks.h <138:32 138:32>]
LOCAL_SYMBOL: b2WorldCallbacks.h<151:44> [b2WorldCallbacks.h <151:44 151:50>]
LOCAL_SYMBOL: b2WorldCallbacks.h<151:67> [b2WorldCallbacks.h <151:67 151:71>]
LOCAL_SYMBOL: b2WorldCallbacks.h<152:24> [b2WorldCallbacks.h <152:24 152:29>]
LOCAL_SYMBOL: b2WorldCallbacks.h<152:40> [b2WorldCallbacks.h <152:40 152:47>]
LOCAL_SYMBOL: b2WorldCallbacks.h<37:1> [b2WorldCallbacks.h <37:1 37:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<37:1> [b2WorldCallbacks.h <48:1 48:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<39:35> [b2WorldCallbacks.h <39:35 39:35>]
LOCAL_SYMBOL: b2WorldCallbacks.h<39:35> [b2WorldCallbacks.h <39:36 39:36>]
LOCAL_SYMBOL: b2WorldCallbacks.h<43:35> [b2WorldCallbacks.h <43:35 43:39>]
LOCAL_SYMBOL: b2WorldCallbacks.h<47:37> [b2WorldCallbacks.h <47:37 47:43>]
LOCAL_SYMBOL: b2WorldCallbacks.h<53:1> [b2WorldCallbacks.h <53:1 53:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<53:1> [b2WorldCallbacks.h <60:1 60:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<55:29> [b2WorldCallbacks.h <55:29 55:29>]
LOCAL_SYMBOL: b2WorldCallbacks.h<55:29> [b2WorldCallbacks.h <55:30 55:30>]
LOCAL_SYMBOL: b2WorldCallbacks.h<59:40> [b2WorldCallbacks.h <59:40 59:47>]
LOCAL_SYMBOL: b2WorldCallbacks.h<59:61> [b2WorldCallbacks.h <59:61 59:68>]
LOCAL_SYMBOL: b2WorldCallbacks.h<66:1> [b2WorldCallbacks.h <66:1 66:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<66:1> [b2WorldCallbacks.h <70:1 70:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<82:1> [b2WorldCallbacks.h <82:1 82:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<82:1> [b2WorldCallbacks.h <119:1 119:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<84:31> [b2WorldCallbacks.h <84:31 84:31>]
LOCAL_SYMBOL: b2WorldCallbacks.h<84:31> [b2WorldCallbacks.h <84:32 84:32>]
LOCAL_SYMBOL: b2WorldCallbacks.h<87:39> [b2WorldCallbacks.h <87:39 87:45>]
LOCAL_SYMBOL: b2WorldCallbacks.h<87:39> [b2WorldCallbacks.h <87:62 87:68>]
LOCAL_SYMBOL: b2WorldCallbacks.h<87:48> [b2WorldCallbacks.h <87:48 87:48>]
LOCAL_SYMBOL: b2WorldCallbacks.h<87:48> [b2WorldCallbacks.h <87:72 87:72>]
LOCAL_SYMBOL: b2WorldCallbacks.h<90:37> [b2WorldCallbacks.h <90:37 90:43>]
LOCAL_SYMBOL: b2WorldCallbacks.h<90:37> [b2WorldCallbacks.h <90:60 90:66>]
LOCAL_SYMBOL: b2WorldCallbacks.h<90:46> [b2WorldCallbacks.h <90:46 90:46>]
LOCAL_SYMBOL: b2WorldCallbacks.h<90:46> [b2WorldCallbacks.h <90:70 90:70>]
COMMENT: comment [b2Body.cpp <1:1 17:3>]
COMMENT: comment [b2Body.cpp <110:2 110:56>]
COMMENT: comment [b2Body.cpp <144:2 144:34>]
COMMENT: comment [b2Body.cpp <154:2 154:78>]
COMMENT: comment [b2Body.cpp <192:2 192:38>]
COMMENT: comment [b2Body.cpp <198:2 198:75>]
COMMENT: comment [b2Body.cpp <199:2 199:58>]
COMMENT: comment [b2Body.cpp <229:2 229:60>]
COMMENT: comment [b2Body.cpp <245:2 245:67>]
COMMENT: comment [b2Body.cpp <248:2 248:54>]
COMMENT: comment [b2Body.cpp <260:4 260:52>]
COMMENT: comment [b2Body.cpp <261:4 261:32>]
COMMENT: comment [b2Body.cpp <282:2 282:25>]
COMMENT: comment [b2Body.cpp <288:2 288:67>]
COMMENT: comment [b2Body.cpp <295:2 295:48>]
COMMENT: comment [b2Body.cpp <306:2 306:39>]
COMMENT: comment [b2Body.cpp <322:2 322:28>]
COMMENT: comment [b2Body.cpp <330:3 330:55>]
COMMENT: comment [b2Body.cpp <337:3 337:50>]
COMMENT: comment [b2Body.cpp <349:2 349:25>]
COMMENT: comment [b2Body.cpp <354:2 354:36>]
COMMENT: comment [b2Body.cpp <390:2 390:25>]
COMMENT: comment [b2Body.cpp <395:2 395:36>]
COMMENT: comment [b2Body.cpp <401:2 401:41>]
COMMENT: comment [b2Body.cpp <407:2 407:36>]
COMMENT: comment [b2Body.cpp <472:3 472:25>]
COMMENT: comment [b2Body.cpp <479:3 479:46>]
COMMENT: comment [b2Body.cpp <485:3 485:26>]
COMMENT: comment [b2Body.cpp <492:3 492:36>]
COMMENT: comment [b2Body.h <1:1 17:3>]
COMMENT: comment [b2Body.h <35:1 35:19>]
COMMENT: comment [b2Body.h <36:1 36:60>]
COMMENT: comment [b2Body.h <37:1 37:73>]
COMMENT: comment [b2Body.h <38:1 38:84>]
COMMENT: comment [b2Body.h <45:2 45:14>]
COMMENT: comment [b2Body.h <46:2 46:18>]
COMMENT: comment [b2Body.h <49:1 49:75>]
COMMENT: comment [b2Body.h <50:1 50:91>]
COMMENT: comment [b2Body.h <53:2 53:63>]
COMMENT: comment [b2Body.h <72:2 72:51>]
COMMENT: comment [b2Body.h <73:2 73:75>]
COMMENT: comment [b2Body.h <76:2 76:73>]
COMMENT: comment [b2Body.h <77:2 77:53>]
COMMENT: comment [b2Body.h <80:2 80:45>]
COMMENT: comment [b2Body.h <83:2 83:69>]
COMMENT: comment [b2Body.h <86:2 86:39>]
COMMENT: comment [b2Body.h <89:2 89:80>]
COMMENT: comment [b2Body.h <90:2 90:77>]
COMMENT: comment [b2Body.h <91:2 91:52>]
COMMENT: comment [b2Body.h <92:2 92:22>]
COMMENT: comment [b2Body.h <95:2 95:82>]
COMMENT: comment [b2Body.h <96:2 96:77>]
COMMENT: comment [b2Body.h <97:2 97:52>]
COMMENT: comment [b2Body.h <98:2 98:22>]
COMMENT: comment [b2Body.h <101:2 101:77>]
COMMENT: comment [b2Body.h <102:2 102:31>]
COMMENT: comment [b2Body.h <105:2 105:47>]
COMMENT: comment [b2Body.h <108:2 108:73>]
COMMENT: comment [b2Body.h <111:2 111:80>]
COMMENT: comment [b2Body.h <112:2 112:84>]
COMMENT: comment [b2Body.h <113:2 113:85>]
COMMENT: comment [b2Body.h <114:2 114:85>]
COMMENT: comment [b2Body.h <117:2 117:38>]
COMMENT: comment [b2Body.h <120:2 120:55>]
COMMENT: comment [b2Body.h <123:2 123:45>]
COMMENT: comment [b2Body.h <127:1 127:61>]
COMMENT: comment [b2Body.h <131:2 131:81>]
COMMENT: comment [b2Body.h <132:2 132:81>]
COMMENT: comment [b2Body.h <133:2 133:36>]
COMMENT: comment [b2Body.h <134:2 134:91>]
COMMENT: comment [b2Body.h <135:2 135:56>]
COMMENT: comment [b2Body.h <136:2 136:40>]
COMMENT: comment [b2Body.h <137:2 137:56>]
COMMENT: comment [b2Body.h <140:2 140:64>]
COMMENT: comment [b2Body.h <141:2 141:84>]
COMMENT: comment [b2Body.h <142:2 142:58>]
COMMENT: comment [b2Body.h <143:2 143:91>]
COMMENT: comment [b2Body.h <144:2 144:42>]
COMMENT: comment [b2Body.h <145:2 145:71>]
COMMENT: comment [b2Body.h <146:2 146:56>]
COMMENT: comment [b2Body.h <149:2 149:74>]
COMMENT: comment [b2Body.h <150:2 150:67>]
COMMENT: comment [b2Body.h <151:2 151:78>]
COMMENT: comment [b2Body.h <152:2 152:35>]
COMMENT: comment [b2Body.h <153:2 153:90>]
COMMENT: comment [b2Body.h <154:2 154:47>]
COMMENT: comment [b2Body.h <155:2 155:56>]
COMMENT: comment [b2Body.h <158:2 158:57>]
COMMENT: comment [b2Body.h <159:2 159:70>]
COMMENT: comment [b2Body.h <160:2 160:67>]
COMMENT: comment [b2Body.h <161:2 161:68>]
COMMENT: comment [b2Body.h <162:2 162:49>]
COMMENT: comment [b2Body.h <165:2 165:51>]
COMMENT: comment [b2Body.h <166:2 166:55>]
COMMENT: comment [b2Body.h <169:2 169:41>]
COMMENT: comment [b2Body.h <170:2 170:54>]
COMMENT: comment [b2Body.h <173:2 173:31>]
COMMENT: comment [b2Body.h <174:2 174:58>]
COMMENT: comment [b2Body.h <177:2 177:51>]
COMMENT: comment [b2Body.h <180:2 180:51>]
COMMENT: comment [b2Body.h <183:2 183:52>]
COMMENT: comment [b2Body.h <184:2 184:61>]
COMMENT: comment [b2Body.h <187:2 187:52>]
COMMENT: comment [b2Body.h <188:2 188:56>]
COMMENT: comment [b2Body.h <191:2 191:31>]
COMMENT: comment [b2Body.h <192:2 192:62>]
COMMENT: comment [b2Body.h <195:2 195:31>]
COMMENT: comment [b2Body.h <196:2 196:53>]
COMMENT: comment [b2Body.h <199:2 199:57>]
COMMENT: comment [b2Body.h <200:2 200:66>]
COMMENT: comment [b2Body.h <201:2 201:58>]
COMMENT: comment [b2Body.h <202:2 202:66>]
COMMENT: comment [b2Body.h <203:2 203:66>]
COMMENT: comment [b2Body.h <204:2 204:39>]
COMMENT: comment [b2Body.h <207:2 207:66>]
COMMENT: comment [b2Body.h <208:2 208:66>]
COMMENT: comment [b2Body.h <209:2 209:39>]
COMMENT: comment [b2Body.h <212:2 212:55>]
COMMENT: comment [b2Body.h <213:2 213:66>]
COMMENT: comment [b2Body.h <214:2 214:73>]
COMMENT: comment [b2Body.h <215:2 215:39>]
COMMENT: comment [b2Body.h <218:2 218:74>]
COMMENT: comment [b2Body.h <219:2 219:71>]
COMMENT: comment [b2Body.h <220:2 220:59>]
COMMENT: comment [b2Body.h <221:2 221:78>]
COMMENT: comment [b2Body.h <222:2 222:66>]
COMMENT: comment [b2Body.h <223:2 223:39>]
COMMENT: comment [b2Body.h <226:2 226:85>]
COMMENT: comment [b2Body.h <227:2 227:78>]
COMMENT: comment [b2Body.h <228:2 228:39>]
COMMENT: comment [b2Body.h <231:2 231:31>]
COMMENT: comment [b2Body.h <232:2 232:61>]
COMMENT: comment [b2Body.h <233:2 233:39>]
COMMENT: comment [b2Body.h <236:2 236:37>]
COMMENT: comment [b2Body.h <237:2 237:50>]
COMMENT: comment [b2Body.h <240:2 240:68>]
COMMENT: comment [b2Body.h <241:2 241:56>]
COMMENT: comment [b2Body.h <244:2 244:36>]
COMMENT: comment [b2Body.h <245:2 245:75>]
COMMENT: comment [b2Body.h <248:2 248:78>]
COMMENT: comment [b2Body.h <249:2 249:57>]
COMMENT: comment [b2Body.h <250:2 250:72>]
COMMENT: comment [b2Body.h <251:2 251:60>]
COMMENT: comment [b2Body.h <252:2 252:42>]
COMMENT: comment [b2Body.h <255:2 255:88>]
COMMENT: comment [b2Body.h <256:2 256:88>]
COMMENT: comment [b2Body.h <257:2 257:52>]
COMMENT: comment [b2Body.h <260:2 260:71>]
COMMENT: comment [b2Body.h <261:2 261:84>]
COMMENT: comment [b2Body.h <262:2 262:60>]
COMMENT: comment [b2Body.h <265:2 265:72>]
COMMENT: comment [b2Body.h <266:2 266:52>]
COMMENT: comment [b2Body.h <267:2 267:61>]
COMMENT: comment [b2Body.h <270:2 270:75>]
COMMENT: comment [b2Body.h <271:2 271:42>]
COMMENT: comment [b2Body.h <272:2 272:74>]
COMMENT: comment [b2Body.h <275:2 275:47>]
COMMENT: comment [b2Body.h <276:2 276:43>]
COMMENT: comment [b2Body.h <277:2 277:45>]
COMMENT: comment [b2Body.h <280:2 280:75>]
COMMENT: comment [b2Body.h <281:2 281:42>]
COMMENT: comment [b2Body.h <282:2 282:44>]
COMMENT: comment [b2Body.h <285:2 285:46>]
COMMENT: comment [b2Body.h <286:2 286:42>]
COMMENT: comment [b2Body.h <287:2 287:44>]
COMMENT: comment [b2Body.h <290:2 290:41>]
COMMENT: comment [b2Body.h <293:2 293:41>]
COMMENT: comment [b2Body.h <296:2 296:42>]
COMMENT: comment [b2Body.h <299:2 299:42>]
COMMENT: comment [b2Body.h <302:2 302:40>]
COMMENT: comment [b2Body.h <305:2 305:40>]
COMMENT: comment [b2Body.h <308:2 308:70>]
COMMENT: comment [b2Body.h <311:2 311:32>]
COMMENT: comment [b2Body.h <314:2 314:83>]
COMMENT: comment [b2Body.h <317:2 317:76>]
COMMENT: comment [b2Body.h <320:2 320:73>]
COMMENT: comment [b2Body.h <321:2 321:25>]
COMMENT: comment [b2Body.h <324:2 324:35>]
COMMENT: comment [b2Body.h <327:2 327:63>]
COMMENT: comment [b2Body.h <328:2 328:19>]
COMMENT: comment [b2Body.h <329:2 329:73>]
COMMENT: comment [b2Body.h <332:2 332:42>]
COMMENT: comment [b2Body.h <333:2 333:40>]
COMMENT: comment [b2Body.h <336:2 336:63>]
COMMENT: comment [b2Body.h <337:2 337:56>]
COMMENT: comment [b2Body.h <338:2 338:67>]
COMMENT: comment [b2Body.h <339:2 339:18>]
COMMENT: comment [b2Body.h <340:2 340:68>]
COMMENT: comment [b2Body.h <341:2 341:57>]
COMMENT: comment [b2Body.h <342:2 342:68>]
COMMENT: comment [b2Body.h <343:2 343:63>]
COMMENT: comment [b2Body.h <344:2 344:67>]
COMMENT: comment [b2Body.h <345:2 345:59>]
COMMENT: comment [b2Body.h <346:2 346:67>]
COMMENT: comment [b2Body.h <347:2 347:69>]
COMMENT: comment [b2Body.h <348:2 348:23>]
COMMENT: comment [b2Body.h <351:2 351:39>]
COMMENT: comment [b2Body.h <354:2 354:64>]
COMMENT: comment [b2Body.h <355:2 355:18>]
COMMENT: comment [b2Body.h <358:2 358:41>]
COMMENT: comment [b2Body.h <361:2 361:57>]
COMMENT: comment [b2Body.h <365:2 365:55>]
COMMENT: comment [b2Body.h <369:2 369:57>]
COMMENT: comment [b2Body.h <370:2 370:65>]
COMMENT: comment [b2Body.h <371:2 371:62>]
COMMENT: comment [b2Body.h <375:2 375:49>]
COMMENT: comment [b2Body.h <379:2 379:73>]
COMMENT: comment [b2Body.h <382:2 382:74>]
COMMENT: comment [b2Body.h <385:2 385:40>]
COMMENT: comment [b2Body.h <389:2 389:34>]
COMMENT: comment [b2Body.h <412:2 412:12>]
COMMENT: comment [b2Body.h <430:2 430:61>]
COMMENT: comment [b2Body.h <431:2 431:56>]
COMMENT: comment [b2Body.h <442:21 442:49>]
COMMENT: comment [b2Body.h <443:20 443:47>]
COMMENT: comment [b2Body.h <463:2 463:49>]
COMMENT: comment [b2Body.h <752:2 752:54>]
COMMENT: comment [b2Body.h <772:2 772:53>]
COMMENT: comment [b2Body.h <791:2 791:53>]
COMMENT: comment [b2Body.h <810:2 810:54>]
COMMENT: comment [b2Body.h <830:2 830:54>]
COMMENT: comment [b2Body.h <849:2 849:54>]
COMMENT: comment [b2Body.h <864:2 864:69>]
COMMENT: comment [b2Math.h <1:1 17:3>]
COMMENT: comment [b2Math.h <25:1 25:91>]
COMMENT: comment [b2Math.h <32:1 32:56>]
COMMENT: comment [b2Math.h <52:1 52:24>]
COMMENT: comment [b2Math.h <55:2 55:57>]
COMMENT: comment [b2Math.h <58:2 58:34>]
COMMENT: comment [b2Math.h <61:2 61:35>]
COMMENT: comment [b2Math.h <64:2 64:52>]
COMMENT: comment [b2Math.h <67:2 67:25>]
COMMENT: comment [b2Math.h <70:2 70:36>]
COMMENT: comment [b2Math.h <76:2 76:34>]
COMMENT: comment [b2Math.h <82:2 82:34>]
COMMENT: comment [b2Math.h <88:2 88:41>]
COMMENT: comment [b2Math.h <94:2 94:39>]
COMMENT: comment [b2Math.h <100:2 100:47>]
COMMENT: comment [b2Math.h <106:2 106:66>]
COMMENT: comment [b2Math.h <107:2 107:35>]
COMMENT: comment [b2Math.h <113:2 113:65>]
COMMENT: comment [b2Math.h <128:2 128:50>]
COMMENT: comment [b2Math.h <134:2 134:77>]
COMMENT: comment [b2Math.h <143:1 143:40>]
COMMENT: comment [b2Math.h <146:2 146:57>]
COMMENT: comment [b2Math.h <149:2 149:34>]
COMMENT: comment [b2Math.h <152:2 152:35>]
COMMENT: comment [b2Math.h <155:2 155:52>]
COMMENT: comment [b2Math.h <158:2 158:25>]
COMMENT: comment [b2Math.h <161:2 161:34>]
COMMENT: comment [b2Math.h <167:2 167:41>]
COMMENT: comment [b2Math.h <173:2 173:39>]
COMMENT: comment [b2Math.h <182:1 182:51>]
COMMENT: comment [b2Math.h <185:2 185:61>]
COMMENT: comment [b2Math.h <188:2 188:42>]
COMMENT: comment [b2Math.h <195:2 195:42>]
COMMENT: comment [b2Math.h <202:2 202:43>]
COMMENT: comment [b2Math.h <209:2 209:38>]
COMMENT: comment [b2Math.h <216:2 216:35>]
COMMENT: comment [b2Math.h <237:2 237:73>]
COMMENT: comment [b2Math.h <238:2 238:51>]
COMMENT: comment [b2Math.h <256:1 256:51>]
COMMENT: comment [b2Math.h <259:2 259:61>]
COMMENT: comment [b2Math.h <262:2 262:42>]
COMMENT: comment [b2Math.h <270:2 270:35>]
COMMENT: comment [b2Math.h <278:2 278:73>]
COMMENT: comment [b2Math.h <279:2 279:51>]
COMMENT: comment [b2Math.h <282:2 282:73>]
COMMENT: comment [b2Math.h <283:2 283:72>]
COMMENT: comment [b2Math.h <284:2 284:29>]
COMMENT: comment [b2Math.h <287:2 287:49>]
COMMENT: comment [b2Math.h <288:2 288:42>]
COMMENT: comment [b2Math.h <291:2 291:59>]
COMMENT: comment [b2Math.h <292:2 292:42>]
COMMENT: comment [b2Math.h <298:1 298:13>]
COMMENT: comment [b2Math.h <303:2 303:41>]
COMMENT: comment [b2Math.h <306:3 306:25>]
COMMENT: comment [b2Math.h <311:2 311:36>]
COMMENT: comment [b2Math.h <314:3 314:25>]
COMMENT: comment [b2Math.h <319:2 319:34>]
COMMENT: comment [b2Math.h <326:2 326:30>]
COMMENT: comment [b2Math.h <332:2 332:20>]
COMMENT: comment [b2Math.h <338:2 338:20>]
COMMENT: comment [b2Math.h <344:2 344:21>]
COMMENT: comment [b2Math.h <348:1 348:75>]
COMMENT: comment [b2Math.h <349:1 349:50>]
COMMENT: comment [b2Math.h <352:2 352:43>]
COMMENT: comment [b2Math.h <355:2 355:56>]
COMMENT: comment [b2Math.h <358:2 358:41>]
COMMENT: comment [b2Math.h <365:2 365:47>]
COMMENT: comment [b2Math.h <376:1 376:67>]
COMMENT: comment [b2Math.h <377:1 377:66>]
COMMENT: comment [b2Math.h <378:1 378:70>]
COMMENT: comment [b2Math.h <379:1 379:53>]
COMMENT: comment [b2Math.h <382:2 382:56>]
COMMENT: comment [b2Math.h <383:2 383:65>]
COMMENT: comment [b2Math.h <386:2 386:62>]
COMMENT: comment [b2Math.h <387:2 387:40>]
COMMENT: comment [b2Math.h <390:2 390:27>]
COMMENT: comment [b2Math.h <393:22 393:56>]
COMMENT: comment [b2Math.h <394:17 394:44>]
COMMENT: comment [b2Math.h <395:18 395:35>]
COMMENT: comment [b2Math.h <397:2 397:58>]
COMMENT: comment [b2Math.h <398:2 398:44>]
COMMENT: comment [b2Math.h <402:1 402:20>]
COMMENT: comment [b2Math.h <405:1 405:44>]
COMMENT: comment [b2Math.h <411:1 411:76>]
COMMENT: comment [b2Math.h <417:1 417:76>]
COMMENT: comment [b2Math.h <418:1 418:14>]
COMMENT: comment [b2Math.h <424:1 424:76>]
COMMENT: comment [b2Math.h <425:1 425:14>]
COMMENT: comment [b2Math.h <431:1 431:72>]
COMMENT: comment [b2Math.h <432:1 432:63>]
COMMENT: comment [b2Math.h <438:1 438:82>]
COMMENT: comment [b2Math.h <439:1 439:83>]
COMMENT: comment [b2Math.h <445:1 445:36>]
COMMENT: comment [b2Math.h <451:1 451:41>]
COMMENT: comment [b2Math.h <489:1 489:36>]
COMMENT: comment [b2Math.h <495:1 495:41>]
COMMENT: comment [b2Math.h <501:1 501:44>]
COMMENT: comment [b2Math.h <507:1 507:46>]
COMMENT: comment [b2Math.h <518:1 518:9>]
COMMENT: comment [b2Math.h <524:1 524:11>]
COMMENT: comment [b2Math.h <532:1 532:38>]
COMMENT: comment [b2Math.h <538:1 538:38>]
COMMENT: comment [b2Math.h <544:1 544:34>]
COMMENT: comment [b2Math.h <547:2 547:53>]
COMMENT: comment [b2Math.h <548:2 548:53>]
COMMENT: comment [b2Math.h <549:2 549:26>]
COMMENT: comment [b2Math.h <550:2 550:26>]
COMMENT: comment [b2Math.h <557:1 557:45>]
COMMENT: comment [b2Math.h <560:2 560:53>]
COMMENT: comment [b2Math.h <561:2 561:53>]
COMMENT: comment [b2Math.h <562:2 562:26>]
COMMENT: comment [b2Math.h <563:2 563:26>]
COMMENT: comment [b2Math.h <570:1 570:20>]
COMMENT: comment [b2Math.h <576:1 576:28>]
COMMENT: comment [b2Math.h <600:1 600:41>]
COMMENT: comment [b2Math.h <601:1 601:49>]
COMMENT: comment [b2Math.h <610:1 610:38>]
COMMENT: comment [b2Math.h <611:1 611:45>]
COMMENT: comment [b2Math.h <676:1 676:29>]
COMMENT: comment [b2Math.h <677:1 677:100>]
COMMENT: comment [b2Math.h <678:1 678:103>]
COMMENT: comment [b2Math.h <679:1 679:99>]
COMMENT: comment [b2Math.h <680:1 680:45>]
COMMENT: comment [b2Math.h <703:2 703:20>]
COMMENT: comment [b2Math.h <716:1 716:59>]
COMMENT: comment [b2Settings.h <1:1 17:3>]
COMMENT: comment [b2Settings.h <46:1 46:10>]
COMMENT: comment [b2Settings.h <47:1 47:75>]
COMMENT: comment [b2Settings.h <48:1 48:4>]
COMMENT: comment [b2Settings.h <50:1 50:13>]
COMMENT: comment [b2Settings.h <52:1 52:71>]
COMMENT: comment [b2Settings.h <53:1 53:27>]
COMMENT: comment [b2Settings.h <56:1 56:76>]
COMMENT: comment [b2Settings.h <57:1 57:70>]
COMMENT: comment [b2Settings.h <60:1 60:74>]
COMMENT: comment [b2Settings.h <61:1 61:68>]
COMMENT: comment [b2Settings.h <62:1 62:23>]
COMMENT: comment [b2Settings.h <65:1 65:78>]
COMMENT: comment [b2Settings.h <66:1 66:59>]
COMMENT: comment [b2Settings.h <67:1 67:40>]
COMMENT: comment [b2Settings.h <70:1 70:79>]
COMMENT: comment [b2Settings.h <71:1 71:70>]
COMMENT: comment [b2Settings.h <74:1 74:78>]
COMMENT: comment [b2Settings.h <75:1 75:70>]
COMMENT: comment [b2Settings.h <78:1 78:83>]
COMMENT: comment [b2Settings.h <79:1 79:91>]
COMMENT: comment [b2Settings.h <80:1 80:64>]
COMMENT: comment [b2Settings.h <83:1 83:78>]
COMMENT: comment [b2Settings.h <87:1 87:12>]
COMMENT: comment [b2Settings.h <89:1 89:68>]
COMMENT: comment [b2Settings.h <92:1 92:86>]
COMMENT: comment [b2Settings.h <93:1 93:64>]
COMMENT: comment [b2Settings.h <96:1 96:88>]
COMMENT: comment [b2Settings.h <97:1 97:23>]
COMMENT: comment [b2Settings.h <100:1 100:89>]
COMMENT: comment [b2Settings.h <101:1 101:23>]
COMMENT: comment [b2Settings.h <104:1 104:80>]
COMMENT: comment [b2Settings.h <105:1 105:70>]
COMMENT: comment [b2Settings.h <109:1 109:81>]
COMMENT: comment [b2Settings.h <110:1 110:70>]
COMMENT: comment [b2Settings.h <114:1 114:88>]
COMMENT: comment [b2Settings.h <115:1 115:89>]
COMMENT: comment [b2Settings.h <116:1 116:18>]
COMMENT: comment [b2Settings.h <121:1 121:9>]
COMMENT: comment [b2Settings.h <123:1 123:67>]
COMMENT: comment [b2Settings.h <126:1 126:72>]
COMMENT: comment [b2Settings.h <129:1 129:73>]
COMMENT: comment [b2Settings.h <132:1 132:21>]
COMMENT: comment [b2Settings.h <134:1 134:62>]
COMMENT: comment [b2Settings.h <137:1 137:71>]
COMMENT: comment [b2Settings.h <140:1 140:22>]
COMMENT: comment [b2Settings.h <143:1 143:30>]
COMMENT: comment [b2Settings.h <144:1 144:57>]
COMMENT: comment [b2Settings.h <147:16 147:40>]
COMMENT: comment [b2Settings.h <148:16 148:40>]
COMMENT: comment [b2Settings.h <149:19 149:33>]
COMMENT: comment [b2Settings.h <152:1 152:21>]
COMMENT: comment [b2Shape.h <1:1 17:3>]
COMMENT: comment [b2Shape.h <26:1 26:51>]
COMMENT: comment [b2Shape.h <29:2 29:50>]
COMMENT: comment [b2Shape.h <32:2 32:74>]
COMMENT: comment [b2Shape.h <35:2 35:65>]
COMMENT: comment [b2Shape.h <39:1 39:86>]
COMMENT: comment [b2Shape.h <40:1 40:85>]
COMMENT: comment [b2Shape.h <41:1 41:67>]
COMMENT: comment [b2Shape.h <57:2 57:60>]
COMMENT: comment [b2Shape.h <60:2 60:86>]
COMMENT: comment [b2Shape.h <61:2 61:29>]
COMMENT: comment [b2Shape.h <64:2 64:41>]
COMMENT: comment [b2Shape.h <67:2 67:84>]
COMMENT: comment [b2Shape.h <68:2 68:42>]
COMMENT: comment [b2Shape.h <69:2 69:44>]
COMMENT: comment [b2Shape.h <72:2 72:39>]
COMMENT: comment [b2Shape.h <73:2 73:41>]
COMMENT: comment [b2Shape.h <74:2 74:49>]
COMMENT: comment [b2Shape.h <75:2 75:64>]
COMMENT: comment [b2Shape.h <76:2 76:45>]
COMMENT: comment [b2Shape.h <80:2 80:92>]
COMMENT: comment [b2Shape.h <81:2 81:47>]
COMMENT: comment [b2Shape.h <82:2 82:49>]
COMMENT: comment [b2Shape.h <83:2 83:39>]
COMMENT: comment [b2Shape.h <86:2 86:81>]
COMMENT: comment [b2Shape.h <87:2 87:60>]
COMMENT: comment [b2Shape.h <88:2 88:59>]
COMMENT: comment [b2Shape.h <89:2 89:64>]
COMMENT: comment [b2Shape.h <94:2 94:100>]
COMMENT: comment [b2Shape.h <95:2 95:30>]
COMMENT: comment [b2BlockAllocator.h <1:1 17:3>]
COMMENT: comment [b2BlockAllocator.h <32:1 32:63>]
COMMENT: comment [b2BlockAllocator.h <33:1 33:54>]
COMMENT: comment [b2BlockAllocator.h <34:1 34:72>]
COMMENT: comment [b2BlockAllocator.h <41:2 41:88>]
COMMENT: comment [b2BlockAllocator.h <44:2 44:83>]
COMMENT: comment [b2Collision.h <1:1 17:3>]
COMMENT: comment [b2Collision.h <25:1 25:10>]
COMMENT: comment [b2Collision.h <26:1 26:73>]
COMMENT: comment [b2Collision.h <27:1 27:30>]
COMMENT: comment [b2Collision.h <36:1 36:58>]
COMMENT: comment [b2Collision.h <37:1 37:34>]
COMMENT: comment [b2Collision.h <46:17 46:45>]
COMMENT: comment [b2Collision.h <47:17 47:45>]
COMMENT: comment [b2Collision.h <48:16 48:47>]
COMMENT: comment [b2Collision.h <49:16 49:47>]
COMMENT: comment [b2Collision.h <52:1 52:45>]
COMMENT: comment [b2Collision.h <56:18 56:59>]
COMMENT: comment [b2Collision.h <59:1 59:63>]
COMMENT: comment [b2Collision.h <60:1 60:68>]
COMMENT: comment [b2Collision.h <61:1 61:27>]
COMMENT: comment [b2Collision.h <62:1 62:56>]
COMMENT: comment [b2Collision.h <63:1 63:44>]
COMMENT: comment [b2Collision.h <64:1 64:72>]
COMMENT: comment [b2Collision.h <65:1 65:41>]
COMMENT: comment [b2Collision.h <66:1 66:69>]
COMMENT: comment [b2Collision.h <67:1 67:65>]
COMMENT: comment [b2Collision.h <68:1 68:75>]
COMMENT: comment [b2Collision.h <71:22 71:57>]
COMMENT: comment [b2Collision.h <72:25 72:57>]
COMMENT: comment [b2Collision.h <73:26 73:51>]
COMMENT: comment [b2Collision.h <74:20 74:79>]
COMMENT: comment [b2Collision.h <77:1 77:47>]
COMMENT: comment [b2Collision.h <78:1 78:46>]
COMMENT: comment [b2Collision.h <79:1 79:42>]
COMMENT: comment [b2Collision.h <80:1 80:47>]
COMMENT: comment [b2Collision.h <81:1 81:56>]
COMMENT: comment [b2Collision.h <82:1 82:44>]
COMMENT: comment [b2Collision.h <83:1 83:34>]
COMMENT: comment [b2Collision.h <84:1 84:34>]
COMMENT: comment [b2Collision.h <85:1 85:38>]
COMMENT: comment [b2Collision.h <86:1 86:25>]
COMMENT: comment [b2Collision.h <87:1 87:37>]
COMMENT: comment [b2Collision.h <88:1 88:37>]
COMMENT: comment [b2Collision.h <89:1 89:66>]
COMMENT: comment [b2Collision.h <90:1 90:68>]
COMMENT: comment [b2Collision.h <91:1 91:67>]
COMMENT: comment [b2Collision.h <92:1 92:69>]
COMMENT: comment [b2Collision.h <102:48 102:74>]
COMMENT: comment [b2Collision.h <103:29 103:60>]
COMMENT: comment [b2Collision.h <104:28 104:63>]
COMMENT: comment [b2Collision.h <106:27 106:61>]
COMMENT: comment [b2Collision.h <109:1 109:69>]
COMMENT: comment [b2Collision.h <112:2 112:66>]
COMMENT: comment [b2Collision.h <113:2 113:69>]
COMMENT: comment [b2Collision.h <114:2 114:69>]
COMMENT: comment [b2Collision.h <115:2 115:34>]
COMMENT: comment [b2Collision.h <120:24 120:62>]
COMMENT: comment [b2Collision.h <121:40 121:88>]
COMMENT: comment [b2Collision.h <122:45 122:95>]
COMMENT: comment [b2Collision.h <125:1 125:62>]
COMMENT: comment [b2Collision.h <128:17 128:42>]
COMMENT: comment [b2Collision.h <129:16 129:50>]
COMMENT: comment [b2Collision.h <130:19 130:57>]
COMMENT: comment [b2Collision.h <131:18 131:54>]
COMMENT: comment [b2Collision.h <134:1 134:102>]
COMMENT: comment [b2Collision.h <135:1 135:95>]
COMMENT: comment [b2Collision.h <139:1 139:42>]
COMMENT: comment [b2Collision.h <146:1 146:82>]
COMMENT: comment [b2Collision.h <153:1 153:85>]
COMMENT: comment [b2Collision.h <154:1 154:30>]
COMMENT: comment [b2Collision.h <161:1 161:34>]
COMMENT: comment [b2Collision.h <164:2 164:40>]
COMMENT: comment [b2Collision.h <167:2 167:33>]
COMMENT: comment [b2Collision.h <173:2 173:48>]
COMMENT: comment [b2Collision.h <179:2 179:30>]
COMMENT: comment [b2Collision.h <187:2 187:36>]
COMMENT: comment [b2Collision.h <194:2 194:38>]
COMMENT: comment [b2Collision.h <201:2 201:47>]
COMMENT: comment [b2Collision.h <214:21 214:42>]
COMMENT: comment [b2Collision.h <215:21 215:42>]
COMMENT: comment [b2Collision.h <218:1 218:56>]
COMMENT: comment [b2Collision.h <223:1 223:67>]
COMMENT: comment [b2Collision.h <228:1 228:57>]
COMMENT: comment [b2Collision.h <233:1 233:65>]
COMMENT: comment [b2Collision.h <238:1 238:65>]
COMMENT: comment [b2Collision.h <243:1 243:36>]
COMMENT: comment [b2Collision.h <247:1 247:45>]
COMMENT: comment [b2Collision.h <252:1 252:80>]
COMMENT: comment [b2Fixture.h <1:1 17:3>]
COMMENT: comment [b2Fixture.h <31:1 31:39>]
COMMENT: comment [b2Fixture.h <41:2 41:71>]
COMMENT: comment [b2Fixture.h <44:2 44:67>]
COMMENT: comment [b2Fixture.h <45:2 45:39>]
COMMENT: comment [b2Fixture.h <48:2 48:83>]
COMMENT: comment [b2Fixture.h <49:2 49:81>]
COMMENT: comment [b2Fixture.h <50:2 50:50>]
COMMENT: comment [b2Fixture.h <54:1 54:76>]
COMMENT: comment [b2Fixture.h <55:1 55:75>]
COMMENT: comment [b2Fixture.h <58:2 58:65>]
COMMENT: comment [b2Fixture.h <69:2 69:67>]
COMMENT: comment [b2Fixture.h <70:2 70:40>]
COMMENT: comment [b2Fixture.h <73:2 73:58>]
COMMENT: comment [b2Fixture.h <76:2 76:59>]
COMMENT: comment [b2Fixture.h <79:2 79:62>]
COMMENT: comment [b2Fixture.h <82:2 82:37>]
COMMENT: comment [b2Fixture.h <85:2 85:81>]
COMMENT: comment [b2Fixture.h <86:2 86:15>]
COMMENT: comment [b2Fixture.h <89:2 89:29>]
COMMENT: comment [b2Fixture.h <93:1 93:74>]
COMMENT: comment [b2Fixture.h <102:1 102:85>]
COMMENT: comment [b2Fixture.h <103:1 103:88>]
COMMENT: comment [b2Fixture.h <104:1 104:46>]
COMMENT: comment [b2Fixture.h <105:1 105:52>]
COMMENT: comment [b2Fixture.h <106:1 106:40>]
COMMENT: comment [b2Fixture.h <110:2 110:91>]
COMMENT: comment [b2Fixture.h <111:2 111:29>]
COMMENT: comment [b2Fixture.h <114:2 114:92>]
COMMENT: comment [b2Fixture.h <115:2 115:83>]
COMMENT: comment [b2Fixture.h <116:2 116:63>]
COMMENT: comment [b2Fixture.h <120:2 120:38>]
COMMENT: comment [b2Fixture.h <123:2 123:43>]
COMMENT: comment [b2Fixture.h <124:2 124:48>]
COMMENT: comment [b2Fixture.h <127:2 127:87>]
COMMENT: comment [b2Fixture.h <128:2 128:55>]
COMMENT: comment [b2Fixture.h <129:2 129:40>]
COMMENT: comment [b2Fixture.h <132:2 132:37>]
COMMENT: comment [b2Fixture.h <135:2 135:114>]
COMMENT: comment [b2Fixture.h <138:2 138:90>]
COMMENT: comment [b2Fixture.h <139:2 139:30>]
COMMENT: comment [b2Fixture.h <143:2 143:61>]
COMMENT: comment [b2Fixture.h <144:2 144:29>]
COMMENT: comment [b2Fixture.h <148:2 148:80>]
COMMENT: comment [b2Fixture.h <149:2 149:43>]
COMMENT: comment [b2Fixture.h <152:2 152:74>]
COMMENT: comment [b2Fixture.h <155:2 155:51>]
COMMENT: comment [b2Fixture.h <156:2 156:44>]
COMMENT: comment [b2Fixture.h <159:2 159:36>]
COMMENT: comment [b2Fixture.h <160:2 160:41>]
COMMENT: comment [b2Fixture.h <161:2 161:49>]
COMMENT: comment [b2Fixture.h <164:2 164:83>]
COMMENT: comment [b2Fixture.h <165:2 165:83>]
COMMENT: comment [b2Fixture.h <166:2 166:23>]
COMMENT: comment [b2Fixture.h <169:2 169:84>]
COMMENT: comment [b2Fixture.h <170:2 170:81>]
COMMENT: comment [b2Fixture.h <173:2 173:38>]
COMMENT: comment [b2Fixture.h <176:2 176:38>]
COMMENT: comment [b2Fixture.h <179:2 179:77>]
COMMENT: comment [b2Fixture.h <180:2 180:24>]
COMMENT: comment [b2Fixture.h <183:2 183:41>]
COMMENT: comment [b2Fixture.h <186:2 186:83>]
COMMENT: comment [b2Fixture.h <187:2 187:24>]
COMMENT: comment [b2Fixture.h <190:2 190:68>]
COMMENT: comment [b2Fixture.h <191:2 191:70>]
COMMENT: comment [b2Fixture.h <192:2 192:25>]
COMMENT: comment [b2Fixture.h <195:2 195:40>]
COMMENT: comment [b2Fixture.h <207:2 207:88>]
COMMENT: comment [b2Fixture.h <208:2 208:89>]
COMMENT: comment [b2Fixture.h <212:2 212:48>]
COMMENT: comment [b2World.h <1:1 17:3>]
COMMENT: comment [b2World.h <38:1 38:70>]
COMMENT: comment [b2World.h <39:1 39:71>]
COMMENT: comment [b2World.h <40:1 40:27>]
COMMENT: comment [b2World.h <44:2 44:31>]
COMMENT: comment [b2World.h <45:2 45:46>]
COMMENT: comment [b2World.h <48:2 48:93>]
COMMENT: comment [b2World.h <51:2 51:76>]
COMMENT: comment [b2World.h <52:2 52:22>]
COMMENT: comment [b2World.h <55:2 55:75>]
COMMENT: comment [b2World.h <56:2 56:78>]
COMMENT: comment [b2World.h <57:2 57:45>]
COMMENT: comment [b2World.h <60:2 60:78>]
COMMENT: comment [b2World.h <61:2 61:22>]
COMMENT: comment [b2World.h <64:2 64:79>]
COMMENT: comment [b2World.h <65:2 65:79>]
COMMENT: comment [b2World.h <66:2 66:38>]
COMMENT: comment [b2World.h <69:2 69:76>]
COMMENT: comment [b2World.h <70:2 70:18>]
COMMENT: comment [b2World.h <71:2 71:56>]
COMMENT: comment [b2World.h <74:2 74:77>]
COMMENT: comment [b2World.h <75:2 75:60>]
COMMENT: comment [b2World.h <76:2 76:75>]
COMMENT: comment [b2World.h <77:2 77:56>]
COMMENT: comment [b2World.h <80:2 80:81>]
COMMENT: comment [b2World.h <81:2 81:74>]
COMMENT: comment [b2World.h <82:2 82:56>]
COMMENT: comment [b2World.h <85:2 85:78>]
COMMENT: comment [b2World.h <86:2 86:56>]
COMMENT: comment [b2World.h <89:2 89:71>]
COMMENT: comment [b2World.h <90:2 90:30>]
COMMENT: comment [b2World.h <91:2 91:75>]
COMMENT: comment [b2World.h <92:2 92:67>]
COMMENT: comment [b2World.h <93:2 93:67>]
COMMENT: comment [b2World.h <98:2 98:97>]
COMMENT: comment [b2World.h <99:2 99:94>]
COMMENT: comment [b2World.h <100:2 100:101>]
COMMENT: comment [b2World.h <101:2 101:58>]
COMMENT: comment [b2World.h <102:2 102:93>]
COMMENT: comment [b2World.h <103:2 103:81>]
COMMENT: comment [b2World.h <104:2 104:29>]
COMMENT: comment [b2World.h <107:2 107:90>]
COMMENT: comment [b2World.h <110:2 110:67>]
COMMENT: comment [b2World.h <111:2 111:20>]
COMMENT: comment [b2World.h <112:2 112:56>]
COMMENT: comment [b2World.h <113:2 113:32>]
COMMENT: comment [b2World.h <116:2 116:79>]
COMMENT: comment [b2World.h <117:2 117:73>]
COMMENT: comment [b2World.h <118:2 118:66>]
COMMENT: comment [b2World.h <119:2 119:56>]
COMMENT: comment [b2World.h <120:2 120:42>]
COMMENT: comment [b2World.h <121:2 121:40>]
COMMENT: comment [b2World.h <124:2 124:81>]
COMMENT: comment [b2World.h <125:2 125:84>]
COMMENT: comment [b2World.h <126:2 126:46>]
COMMENT: comment [b2World.h <130:2 130:84>]
COMMENT: comment [b2World.h <131:2 131:86>]
COMMENT: comment [b2World.h <132:2 132:47>]
COMMENT: comment [b2World.h <136:2 136:90>]
COMMENT: comment [b2World.h <137:2 137:90>]
COMMENT: comment [b2World.h <138:2 138:49>]
COMMENT: comment [b2World.h <139:2 139:79>]
COMMENT: comment [b2World.h <140:2 140:54>]
COMMENT: comment [b2World.h <144:2 144:27>]
COMMENT: comment [b2World.h <148:2 148:48>]
COMMENT: comment [b2World.h <152:2 152:53>]
COMMENT: comment [b2World.h <156:2 156:68>]
COMMENT: comment [b2World.h <160:2 160:44>]
COMMENT: comment [b2World.h <163:2 163:31>]
COMMENT: comment [b2World.h <166:2 166:31>]
COMMENT: comment [b2World.h <169:2 169:74>]
COMMENT: comment [b2World.h <172:2 172:41>]
COMMENT: comment [b2World.h <175:2 175:42>]
COMMENT: comment [b2World.h <178:2 178:73>]
COMMENT: comment [b2World.h <179:2 179:23>]
COMMENT: comment [b2World.h <182:2 182:39>]
COMMENT: comment [b2World.h <185:2 185:36>]
COMMENT: comment [b2World.h <188:2 188:57>]
COMMENT: comment [b2World.h <191:2 191:76>]
COMMENT: comment [b2World.h <194:2 194:83>]
COMMENT: comment [b2World.h <197:2 197:54>]
COMMENT: comment [b2World.h <198:2 198:54>]
COMMENT: comment [b2World.h <199:2 199:68>]
COMMENT: comment [b2World.h <202:2 202:42>]
COMMENT: comment [b2World.h <205:2 205:30>]
COMMENT: comment [b2World.h <208:2 208:39>]
COMMENT: comment [b2World.h <209:2 209:60>]
COMMENT: comment [b2World.h <214:2 214:12>]
COMMENT: comment [b2World.h <252:2 252:51>]
COMMENT: comment [b2World.h <253:2 253:34>]
COMMENT: comment [b2World.h <256:2 256:40>]
COMMENT: comment [b2World.h <338:1 338:82>]
COMMENT: comment [b2StackAllocator.h <1:1 17:3>]
COMMENT: comment [b2StackAllocator.h <24:40 24:47>]
COMMENT: comment [b2StackAllocator.h <34:1 34:65>]
COMMENT: comment [b2StackAllocator.h <35:1 35:59>]
COMMENT: comment [b2StackAllocator.h <36:1 36:58>]
COMMENT: comment [b2ContactManager.h <1:1 17:3>]
COMMENT: comment [b2ContactManager.h <29:1 29:24>]
COMMENT: comment [b2ContactManager.h <35:2 35:26>]
COMMENT: comment [b2BroadPhase.h <1:1 17:3>]
COMMENT: comment [b2BroadPhase.h <33:1 33:93>]
COMMENT: comment [b2BroadPhase.h <34:1 34:90>]
COMMENT: comment [b2BroadPhase.h <35:1 35:85>]
COMMENT: comment [b2BroadPhase.h <48:2 48:71>]
COMMENT: comment [b2BroadPhase.h <49:2 49:28>]
COMMENT: comment [b2BroadPhase.h <52:2 52:66>]
COMMENT: comment [b2BroadPhase.h <55:2 55:70>]
COMMENT: comment [b2BroadPhase.h <56:2 56:73>]
COMMENT: comment [b2BroadPhase.h <59:2 59:84>]
COMMENT: comment [b2BroadPhase.h <62:2 62:35>]
COMMENT: comment [b2BroadPhase.h <65:2 65:71>]
COMMENT: comment [b2BroadPhase.h <68:2 68:32>]
COMMENT: comment [b2BroadPhase.h <71:2 71:32>]
COMMENT: comment [b2BroadPhase.h <74:2 74:80>]
COMMENT: comment [b2BroadPhase.h <78:2 78:63>]
COMMENT: comment [b2BroadPhase.h <79:2 79:63>]
COMMENT: comment [b2BroadPhase.h <83:2 83:75>]
COMMENT: comment [b2BroadPhase.h <84:2 84:78>]
COMMENT: comment [b2BroadPhase.h <85:2 85:82>]
COMMENT: comment [b2BroadPhase.h <86:2 86:83>]
COMMENT: comment [b2BroadPhase.h <87:2 87:36>]
COMMENT: comment [b2BroadPhase.h <88:2 88:100>]
COMMENT: comment [b2BroadPhase.h <89:2 89:92>]
COMMENT: comment [b2BroadPhase.h <93:2 93:42>]
COMMENT: comment [b2BroadPhase.h <96:2 96:43>]
COMMENT: comment [b2BroadPhase.h <99:2 99:50>]
COMMENT: comment [b2BroadPhase.h <102:2 102:54>]
COMMENT: comment [b2BroadPhase.h <103:2 103:49>]
COMMENT: comment [b2BroadPhase.h <104:2 104:68>]
COMMENT: comment [b2BroadPhase.h <131:1 131:32>]
COMMENT: comment [b2BroadPhase.h <187:2 187:22>]
COMMENT: comment [b2BroadPhase.h <190:2 190:49>]
COMMENT: comment [b2BroadPhase.h <199:3 199:57>]
COMMENT: comment [b2BroadPhase.h <200:3 200:58>]
COMMENT: comment [b2BroadPhase.h <203:3 203:56>]
COMMENT: comment [b2BroadPhase.h <207:2 207:22>]
COMMENT: comment [b2BroadPhase.h <210:2 210:47>]
COMMENT: comment [b2BroadPhase.h <213:2 213:39>]
COMMENT: comment [b2BroadPhase.h <224:3 224:31>]
COMMENT: comment [b2BroadPhase.h <236:2 236:35>]
COMMENT: comment [b2BroadPhase.h <237:2 237:24>]
COMMENT: comment [b2DynamicTree.h <1:1 17:3>]
COMMENT: comment [b2DynamicTree.h <27:1 27:81>]
COMMENT: comment [b2DynamicTree.h <35:2 35:19>]
COMMENT: comment [b2DynamicTree.h <49:2 49:29>]
COMMENT: comment [b2DynamicTree.h <53:1 53:77>]
COMMENT: comment [b2DynamicTree.h <54:1 54:64>]
COMMENT: comment [b2DynamicTree.h <55:1 55:68>]
COMMENT: comment [b2DynamicTree.h <56:1 56:75>]
COMMENT: comment [b2DynamicTree.h <57:1 57:84>]
COMMENT: comment [b2DynamicTree.h <58:1 58:70>]
COMMENT: comment [b2DynamicTree.h <59:1 59:4>]
COMMENT: comment [b2DynamicTree.h <60:1 60:83>]
COMMENT: comment [b2DynamicTree.h <64:2 64:54>]
COMMENT: comment [b2DynamicTree.h <67:2 67:46>]
COMMENT: comment [b2DynamicTree.h <70:2 70:74>]
COMMENT: comment [b2DynamicTree.h <73:2 73:57>]
COMMENT: comment [b2DynamicTree.h <76:2 76:92>]
COMMENT: comment [b2DynamicTree.h <77:2 77:72>]
COMMENT: comment [b2DynamicTree.h <78:2 78:39>]
COMMENT: comment [b2DynamicTree.h <79:2 79:48>]
COMMENT: comment [b2DynamicTree.h <82:2 82:26>]
COMMENT: comment [b2DynamicTree.h <83:2 83:60>]
COMMENT: comment [b2DynamicTree.h <86:2 86:35>]
COMMENT: comment [b2DynamicTree.h <89:2 89:63>]
COMMENT: comment [b2DynamicTree.h <90:2 90:63>]
COMMENT: comment [b2DynamicTree.h <94:2 94:75>]
COMMENT: comment [b2DynamicTree.h <95:2 95:78>]
COMMENT: comment [b2DynamicTree.h <96:2 96:82>]
COMMENT: comment [b2DynamicTree.h <97:2 97:83>]
COMMENT: comment [b2DynamicTree.h <98:2 98:36>]
COMMENT: comment [b2DynamicTree.h <99:2 99:100>]
COMMENT: comment [b2DynamicTree.h <100:2 100:92>]
COMMENT: comment [b2DynamicTree.h <104:2 104:38>]
COMMENT: comment [b2DynamicTree.h <107:2 107:71>]
COMMENT: comment [b2DynamicTree.h <108:2 108:19>]
COMMENT: comment [b2DynamicTree.h <111:2 111:83>]
COMMENT: comment [b2DynamicTree.h <112:2 112:46>]
COMMENT: comment [b2DynamicTree.h <115:2 115:66>]
COMMENT: comment [b2DynamicTree.h <118:2 118:57>]
COMMENT: comment [b2DynamicTree.h <121:2 121:54>]
COMMENT: comment [b2DynamicTree.h <122:2 122:49>]
COMMENT: comment [b2DynamicTree.h <123:2 123:68>]
COMMENT: comment [b2DynamicTree.h <150:2 150:71>]
COMMENT: comment [b2DynamicTree.h <212:2 212:39>]
COMMENT: comment [b2DynamicTree.h <216:2 216:45>]
COMMENT: comment [b2DynamicTree.h <217:2 217:35>]
COMMENT: comment [b2DynamicTree.h <221:2 221:42>]
COMMENT: comment [b2DynamicTree.h <247:3 247:46>]
COMMENT: comment [b2DynamicTree.h <248:3 248:36>]
COMMENT: comment [b2DynamicTree.h <268:5 268:47>]
COMMENT: comment [b2DynamicTree.h <274:5 274:36>]
COMMENT: comment [b2GrowableStack.h <1:1 17:3>]
COMMENT: comment [b2GrowableStack.h <24:1 24:65>]
COMMENT: comment [b2GrowableStack.h <25:1 25:69>]
COMMENT: comment [b2GrowableStack.h <26:1 26:39>]
COMMENT: comment [b2WorldCallbacks.h <1:1 17:3>]
COMMENT: comment [b2WorldCallbacks.h <33:1 33:60>]
COMMENT: comment [b2WorldCallbacks.h <34:1 34:59>]
COMMENT: comment [b2WorldCallbacks.h <35:1 35:55>]
COMMENT: comment [b2WorldCallbacks.h <41:2 41:56>]
COMMENT: comment [b2WorldCallbacks.h <42:2 42:55>]
COMMENT: comment [b2WorldCallbacks.h <45:2 45:58>]
COMMENT: comment [b2WorldCallbacks.h <46:2 46:44>]
COMMENT: comment [b2WorldCallbacks.h <50:1 50:91>]
COMMENT: comment [b2WorldCallbacks.h <51:1 51:64>]
COMMENT: comment [b2WorldCallbacks.h <57:2 57:87>]
COMMENT: comment [b2WorldCallbacks.h <58:2 58:91>]
COMMENT: comment [b2WorldCallbacks.h <62:1 62:80>]
COMMENT: comment [b2WorldCallbacks.h <63:1 63:75>]
COMMENT: comment [b2WorldCallbacks.h <64:1 64:63>]
COMMENT: comment [b2WorldCallbacks.h <72:1 72:83>]
COMMENT: comment [b2WorldCallbacks.h <73:1 73:75>]
COMMENT: comment [b2WorldCallbacks.h <74:1 74:78>]
COMMENT: comment [b2WorldCallbacks.h <75:1 75:68>]
COMMENT: comment [b2WorldCallbacks.h <76:1 76:78>]
COMMENT: comment [b2WorldCallbacks.h <77:1 77:22>]
COMMENT: comment [b2WorldCallbacks.h <78:1 78:76>]
COMMENT: comment [b2WorldCallbacks.h <79:1 79:34>]
COMMENT: comment [b2WorldCallbacks.h <80:1 80:78>]
COMMENT: comment [b2WorldCallbacks.h <86:2 86:46>]
COMMENT: comment [b2WorldCallbacks.h <89:2 89:46>]
COMMENT: comment [b2WorldCallbacks.h <92:2 92:77>]
COMMENT: comment [b2WorldCallbacks.h <93:2 93:82>]
COMMENT: comment [b2WorldCallbacks.h <94:2 94:46>]
COMMENT: comment [b2WorldCallbacks.h <95:2 95:76>]
COMMENT: comment [b2WorldCallbacks.h <96:2 96:49>]
COMMENT: comment [b2WorldCallbacks.h <97:2 97:74>]
COMMENT: comment [b2WorldCallbacks.h <98:2 98:43>]
COMMENT: comment [b2WorldCallbacks.h <99:2 99:73>]
COMMENT: comment [b2WorldCallbacks.h <100:2 100:78>]
COMMENT: comment [b2WorldCallbacks.h <101:2 101:20>]
COMMENT: comment [b2WorldCallbacks.h <108:2 108:82>]
COMMENT: comment [b2WorldCallbacks.h <109:2 109:30>]
COMMENT: comment [b2WorldCallbacks.h <110:2 110:87>]
COMMENT: comment [b2WorldCallbacks.h <111:2 111:90>]
COMMENT: comment [b2WorldCallbacks.h <112:2 112:35>]
COMMENT: comment [b2WorldCallbacks.h <113:2 113:81>]
COMMENT: comment [b2WorldCallbacks.h <121:1 121:37>]
COMMENT: comment [b2WorldCallbacks.h <122:1 122:23>]
COMMENT: comment [b2WorldCallbacks.h <128:2 128:54>]
COMMENT: comment [b2WorldCallbacks.h <129:2 129:43>]
COMMENT: comment [b2WorldCallbacks.h <133:1 133:34>]
COMMENT: comment [b2WorldCallbacks.h <134:1 134:25>]
COMMENT: comment [b2WorldCallbacks.h <140:2 140:78>]
COMMENT: comment [b2WorldCallbacks.h <141:2 141:36>]
COMMENT: comment [b2WorldCallbacks.h <142:2 142:49>]
COMMENT: comment [b2WorldCallbacks.h <143:2 143:38>]
COMMENT: comment [b2WorldCallbacks.h <144:2 144:49>]
COMMENT: comment [b2WorldCallbacks.h <145:2 145:47>]
COMMENT: comment [b2WorldCallbacks.h <146:2 146:47>]
COMMENT: comment [b2WorldCallbacks.h <147:2 147:52>]
COMMENT: comment [b2WorldCallbacks.h <148:2 148:66>]
COMMENT: comment [b2WorldCallbacks.h <149:2 149:72>]
COMMENT: comment [b2WorldCallbacks.h <150:2 150:32>]
COMMENT: comment [b2TimeStep.h <1:1 17:3>]
COMMENT: comment [b2TimeStep.h <24:1 24:47>]
COMMENT: comment [b2TimeStep.h <37:1 37:35>]
COMMENT: comment [b2TimeStep.h <40:16 40:28>]
COMMENT: comment [b2TimeStep.h <41:19 41:55>]
COMMENT: comment [b2TimeStep.h <42:19 42:34>]
COMMENT: comment [b2TimeStep.h <48:1 48:35>]
COMMENT: comment [b2TimeStep.h <55:1 55:35>]
COMMENT: comment [b2TimeStep.h <62:1 62:16>]
COMMENT: comment [b2Contact.h <1:1 17:3>]
COMMENT: comment [b2Contact.h <35:1 35:92>]
COMMENT: comment [b2Contact.h <36:1 36:41>]
COMMENT: comment [b2Contact.h <42:1 42:95>]
COMMENT: comment [b2Contact.h <43:1 43:50>]
COMMENT: comment [b2Contact.h <61:1 61:67>]
COMMENT: comment [b2Contact.h <62:1 62:66>]
COMMENT: comment [b2Contact.h <63:1 63:63>]
COMMENT: comment [b2Contact.h <64:1 64:67>]
COMMENT: comment [b2Contact.h <65:1 65:39>]
COMMENT: comment [b2Contact.h <68:19 68:73>]
COMMENT: comment [b2Contact.h <69:23 69:39>]
COMMENT: comment [b2Contact.h <70:23 70:80>]
COMMENT: comment [b2Contact.h <71:23 71:76>]
COMMENT: comment [b2Contact.h <74:1 74:88>]
COMMENT: comment [b2Contact.h <75:1 75:87>]
COMMENT: comment [b2Contact.h <76:1 76:32>]
COMMENT: comment [b2Contact.h <81:2 81:84>]
COMMENT: comment [b2Contact.h <82:2 82:25>]
COMMENT: comment [b2Contact.h <86:2 86:29>]
COMMENT: comment [b2Contact.h <89:2 89:31>]
COMMENT: comment [b2Contact.h <92:2 92:72>]
COMMENT: comment [b2Contact.h <93:2 93:68>]
COMMENT: comment [b2Contact.h <94:2 94:55>]
COMMENT: comment [b2Contact.h <97:2 97:37>]
COMMENT: comment [b2Contact.h <100:2 100:55>]
COMMENT: comment [b2Contact.h <104:2 104:36>]
COMMENT: comment [b2Contact.h <108:2 108:50>]
COMMENT: comment [b2Contact.h <111:2 111:36>]
COMMENT: comment [b2Contact.h <115:2 115:50>]
COMMENT: comment [b2Contact.h <118:2 118:94>]
COMMENT: comment [b2Contact.h <119:2 119:45>]
COMMENT: comment [b2Contact.h <122:2 122:23>]
COMMENT: comment [b2Contact.h <125:2 125:54>]
COMMENT: comment [b2Contact.h <128:2 128:97>]
COMMENT: comment [b2Contact.h <129:2 129:48>]
COMMENT: comment [b2Contact.h <132:2 132:26>]
COMMENT: comment [b2Contact.h <135:2 135:49>]
COMMENT: comment [b2Contact.h <138:2 138:87>]
COMMENT: comment [b2Contact.h <141:2 141:58>]
COMMENT: comment [b2Contact.h <144:2 144:66>]
COMMENT: comment [b2Contact.h <154:2 154:28>]
COMMENT: comment [b2Contact.h <157:3 157:60>]
COMMENT: comment [b2Contact.h <160:3 160:39>]
COMMENT: comment [b2Contact.h <163:3 163:44>]
COMMENT: comment [b2Contact.h <166:3 166:72>]
COMMENT: comment [b2Contact.h <169:3 169:41>]
COMMENT: comment [b2Contact.h <172:3 172:43>]
COMMENT: comment [b2Contact.h <176:2 176:79>]
COMMENT: comment [b2Contact.h <197:2 197:34>]
COMMENT: comment [b2Contact.h <201:2 201:33>]
COMMENT: comment [b2Joint.h <1:1 17:3>]
COMMENT: comment [b2Joint.h <60:1 60:63>]
COMMENT: comment [b2Joint.h <61:1 61:62>]
COMMENT: comment [b2Joint.h <62:1 62:61>]
COMMENT: comment [b2Joint.h <63:1 63:63>]
COMMENT: comment [b2Joint.h <64:1 64:39>]
COMMENT: comment [b2Joint.h <67:19 67:73>]
COMMENT: comment [b2Joint.h <68:20 68:34>]
COMMENT: comment [b2Joint.h <69:22 69:75>]
COMMENT: comment [b2Joint.h <70:22 70:71>]
COMMENT: comment [b2Joint.h <73:1 73:52>]
COMMENT: comment [b2Joint.h <85:2 85:67>]
COMMENT: comment [b2Joint.h <88:2 88:66>]
COMMENT: comment [b2Joint.h <91:2 91:30>]
COMMENT: comment [b2Joint.h <94:2 94:31>]
COMMENT: comment [b2Joint.h <97:2 97:66>]
COMMENT: comment [b2Joint.h <101:1 101:79>]
COMMENT: comment [b2Joint.h <102:1 102:66>]
COMMENT: comment [b2Joint.h <107:2 107:41>]
COMMENT: comment [b2Joint.h <110:2 110:48>]
COMMENT: comment [b2Joint.h <113:2 113:49>]
COMMENT: comment [b2Joint.h <116:2 116:57>]
COMMENT: comment [b2Joint.h <119:2 119:57>]
COMMENT: comment [b2Joint.h <122:2 122:69>]
COMMENT: comment [b2Joint.h <125:2 125:46>]
COMMENT: comment [b2Joint.h <128:2 128:46>]
COMMENT: comment [b2Joint.h <132:2 132:32>]
COMMENT: comment [b2Joint.h <135:2 135:32>]
COMMENT: comment [b2Joint.h <138:2 138:65>]
COMMENT: comment [b2Joint.h <141:2 141:28>]
COMMENT: comment [b2Joint.h <142:2 142:75>]
COMMENT: comment [b2Joint.h <143:2 143:67>]
COMMENT: comment [b2Joint.h <146:2 146:38>]
COMMENT: comment [b2Joint.h <149:2 149:66>]
COMMENT: comment [b2Joint.h <167:2 167:67>]
