FILE: b2CollideEdge.cpp
FILE: b2Collision.h
FILE: b2Math.h
FILE: b2Settings.h
FILE: stddef.h non-indexed
FILE: corecrt.h non-indexed
FILE: vcruntime.h non-indexed
FILE: sal.h non-indexed
FILE: concurrencysal.h non-indexed
FILE: vadefs.h non-indexed
FILE: assert.h non-indexed
FILE: float.h non-indexed
FILE: math.h non-indexed
FILE: limits.h non-indexed
FILE: b2CircleShape.h
FILE: b2Shape.h
FILE: b2BlockAllocator.h
FILE: b2EdgeShape.h
FILE: b2PolygonShape.h
SYMBOL_MACRO: B2_COLLISION_H [b2Collision.h <20:9 20:22>]
SYMBOL_MACRO: B2_MATH_H [b2Math.h <20:9 20:17>]
SYMBOL_MACRO: B2_SETTINGS_H [b2Settings.h <20:9 20:21>]
SYMBOL_MACRO: b2DEBUG [b2Settings.h <27:10 27:16>]
SYMBOL_MACRO: B2_NOT_USED [b2Settings.h <30:9 <30:9 30:19> 30:33>]
SYMBOL_MACRO: b2Assert [b2Settings.h <31:9 <31:9 31:16> 31:28>]
SYMBOL_MACRO: b2_maxFloat [b2Settings.h <42:9 <42:9 42:19> 42:21>]
SYMBOL_MACRO: b2_epsilon [b2Settings.h <43:9 <43:9 43:18> 43:20>]
SYMBOL_MACRO: b2_pi [b2Settings.h <44:9 <44:9 44:13> 44:16>]
SYMBOL_MACRO: b2_maxManifoldPoints [b2Settings.h <54:9 <54:9 54:28> 54:29>]
SYMBOL_MACRO: b2_maxPolygonVertices [b2Settings.h <58:9 <58:9 58:29> 58:30>]
SYMBOL_MACRO: b2_aabbExtension [b2Settings.h <63:9 <63:9 63:24> 63:26>]
SYMBOL_MACRO: b2_aabbMultiplier [b2Settings.h <68:9 <68:9 68:25> 68:27>]
SYMBOL_MACRO: b2_linearSlop [b2Settings.h <72:9 <72:9 72:21> 72:24>]
SYMBOL_MACRO: b2_angularSlop [b2Settings.h <76:9 <76:9 76:22> 76:47>]
SYMBOL_MACRO: b2_polygonRadius [b2Settings.h <81:9 <81:9 81:24> 81:47>]
SYMBOL_MACRO: b2_maxSubSteps [b2Settings.h <84:9 <84:9 84:22> 84:25>]
SYMBOL_MACRO: b2_maxTOIContacts [b2Settings.h <90:9 <90:9 90:25> 90:28>]
SYMBOL_MACRO: b2_velocityThreshold [b2Settings.h <94:9 <94:9 94:28> 94:30>]
SYMBOL_MACRO: b2_maxLinearCorrection [b2Settings.h <98:9 <98:9 98:30> 98:32>]
SYMBOL_MACRO: b2_maxAngularCorrection [b2Settings.h <102:9 <102:9 102:31> 102:55>]
SYMBOL_MACRO: b2_maxTranslation [b2Settings.h <106:9 <106:9 106:25> 106:28>]
SYMBOL_MACRO: b2_maxTranslationSquared [b2Settings.h <107:9 <107:9 107:32> 107:71>]
SYMBOL_MACRO: b2_maxRotation [b2Settings.h <111:9 <111:9 111:22> 111:39>]
SYMBOL_MACRO: b2_maxRotationSquared [b2Settings.h <112:9 <112:9 112:29> 112:63>]
SYMBOL_MACRO: b2_baumgarte [b2Settings.h <117:9 <117:9 117:20> 117:24>]
SYMBOL_MACRO: b2_toiBaugarte [b2Settings.h <118:9 <118:9 118:22> 118:26>]
SYMBOL_MACRO: b2_timeToSleep [b2Settings.h <124:9 <124:9 124:22> 124:26>]
SYMBOL_MACRO: b2_linearSleepTolerance [b2Settings.h <127:9 <127:9 127:31> 127:33>]
SYMBOL_MACRO: b2_angularSleepTolerance [b2Settings.h <130:9 <130:9 130:32> 130:55>]
SYMBOL_MACRO: b2Sqrt [b2Math.h <49:9 <49:9 49:14> 49:25>]
SYMBOL_MACRO: b2Atan2 [b2Math.h <50:9 <50:9 50:15> 50:33>]
SYMBOL_MACRO: B2_CIRCLE_SHAPE_H [b2CircleShape.h <20:9 20:25>]
SYMBOL_MACRO: B2_SHAPE_H [b2Shape.h <20:9 20:18>]
SYMBOL_MACRO: B2_BLOCK_ALLOCATOR_H [b2BlockAllocator.h <20:9 20:28>]
SYMBOL_MACRO: B2_EDGE_SHAPE_H [b2EdgeShape.h <20:9 20:23>]
SYMBOL_MACRO: B2_POLYGON_SHAPE_H [b2PolygonShape.h <20:9 20:26>]
SYMBOL_TYPEDEF: int8 [b2Settings.h <33:21 33:24>]
SYMBOL_BUILTIN_TYPE: signed char
SYMBOL_TYPEDEF: int16 [b2Settings.h <34:22 34:26>]
SYMBOL_BUILTIN_TYPE: short
SYMBOL_TYPEDEF: int32 [b2Settings.h <35:20 35:24>]
SYMBOL_BUILTIN_TYPE: int
SYMBOL_TYPEDEF: uint8 [b2Settings.h <36:23 36:27>]
SYMBOL_BUILTIN_TYPE: unsigned char
SYMBOL_TYPEDEF: uint16 [b2Settings.h <37:24 37:29>]
SYMBOL_BUILTIN_TYPE: unsigned short
SYMBOL_TYPEDEF: uint32 [b2Settings.h <38:22 38:27>]
SYMBOL_BUILTIN_TYPE: unsigned int
SYMBOL_TYPEDEF: float32 [b2Settings.h <39:15 39:21>]
SYMBOL_BUILTIN_TYPE: float
SYMBOL_TYPEDEF: float64 [b2Settings.h <40:16 40:22>]
SYMBOL_BUILTIN_TYPE: double
SYMBOL_FUNCTION: void * b2Alloc(int32) [b2Settings.h <135:1 <135:7 135:13> 135:25>]
SYMBOL_BUILTIN_TYPE: void
SYMBOL_FUNCTION: void b2Free(void *) [b2Settings.h <138:1 <138:6 138:11> 138:22>]
SYMBOL_FUNCTION: void b2Log(const char *) [b2Settings.h <141:1 <141:6 141:10> 141:35>]
SYMBOL_BUILTIN_TYPE: char
SYMBOL_STRUCT: b2Version [b2Settings.h <145:1 <145:8 145:16> 150:1>]
SYMBOL_FIELD: public int32 b2Version::major [b2Settings.h <147:8 147:12>]
SYMBOL_FIELD: public int32 b2Version::minor [b2Settings.h <148:8 148:12>]
SYMBOL_FIELD: public int32 b2Version::revision [b2Settings.h <149:8 149:15>]
SYMBOL_GLOBAL_VARIABLE: b2Version b2_version [b2Settings.h <153:18 153:27>]
SYMBOL_FUNCTION: bool b2IsValid(float32) [b2Math.h <26:1 <26:1 <26:13 26:21> 26:32> 30:1>]
SYMBOL_BUILTIN_TYPE: bool
SYMBOL_FUNCTION: float32 b2InvSqrt(float32) [b2Math.h <33:1 <33:1 <33:16 33:24> 33:35> 47:1>]
SYMBOL_UNION: b2InvSqrt::anonymous union (b2Math.h<35:2>) [b2Math.h <35:2 <35:2 35:6> 39:2>]
SYMBOL_FIELD: public float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <37:11 37:11>]
SYMBOL_FIELD: public int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <38:9 38:9>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::() [b2Math.h <35:2 <35:2 35:6> 35:6>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::(const b2InvSqrt::anonymous union (b2Math.h<35:2>) &) [b2Math.h <35:2 <35:2 35:6> 35:6>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::(b2InvSqrt::anonymous union (b2Math.h<35:2>) &&) [b2Math.h <35:2 <35:2 35:6> 35:6>]
QUALIFIER: b2Vec2 [b2Math.h <350:8 350:18>]
SYMBOL_STRUCT: b2Vec2 [b2Math.h <53:1 <53:8 53:13> 141:1>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2() [b2Math.h <56:2 <56:2 <56:2 56:7> 56:9> 56:12>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(float32, float32) [b2Math.h <59:2 <59:2 <59:2 59:7> 59:33> 59:53>]
SYMBOL_FIELD: public float32 b2Vec2::x [b2Math.h <140:10 140:10>]
SYMBOL_FIELD: public float32 b2Vec2::y [b2Math.h <140:13 140:13>]
SYMBOL_METHOD: public void b2Vec2::SetZero() [b2Math.h <62:2 <62:2 <62:7 62:13> 62:15> 62:39>]
SYMBOL_METHOD: public void b2Vec2::Set(float32, float32) [b2Math.h <65:2 <65:2 <65:7 65:9> 65:33> 65:53>]
SYMBOL_METHOD: public b2Vec2 b2Vec2::operator-() const [b2Math.h <68:2 <68:2 <68:9 68:18> 68:26> 68:65>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public float32 b2Vec2::operator()(int32) const [b2Math.h <71:2 <71:2 <71:10 71:20> 71:36> 74:2>]
SYMBOL_METHOD: public float32 & b2Vec2::operator()(int32) [b2Math.h <77:2 <77:2 <77:11 77:21> 77:31> 80:2>]
SYMBOL_METHOD: public void b2Vec2::operator+=(const b2Vec2 &) [b2Math.h <83:2 <83:2 <83:7 83:17> 83:35> 86:2>]
SYMBOL_METHOD: public void b2Vec2::operator-=(const b2Vec2 &) [b2Math.h <89:2 <89:2 <89:7 89:17> 89:35> 92:2>]
SYMBOL_METHOD: public void b2Vec2::operator*=(float32) [b2Math.h <95:2 <95:2 <95:7 95:17> 95:29> 98:2>]
SYMBOL_METHOD: public float32 b2Vec2::Length() const [b2Math.h <101:2 <101:2 <101:10 101:15> 101:23> 104:2>]
SYMBOL_FUNCTION: float sqrtf(float)
SYMBOL_METHOD: public float32 b2Vec2::LengthSquared() const [b2Math.h <108:2 <108:2 <108:10 108:22> 108:30> 111:2>]
SYMBOL_METHOD: public float32 b2Vec2::Normalize() [b2Math.h <114:2 <114:2 <114:10 114:18> 114:20> 126:2>]
SYMBOL_METHOD: public bool b2Vec2::IsValid() const [b2Math.h <129:2 <129:2 <129:7 129:13> 129:21> 132:2>]
SYMBOL_METHOD: public b2Vec2 b2Vec2::Skew() const [b2Math.h <135:2 <135:2 <135:9 135:12> 135:20> 138:2>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(const b2Vec2 &) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public void b2Vec2::~b2Vec2() [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_STRUCT: b2Vec3 [b2Math.h <144:1 <144:8 144:13> 180:1>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3() [b2Math.h <147:2 <147:2 <147:2 147:7> 147:9> 147:12>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <150:2 <150:2 <150:2 150:7> 150:46> 150:74>]
SYMBOL_FIELD: public float32 b2Vec3::x [b2Math.h <179:10 179:10>]
SYMBOL_FIELD: public float32 b2Vec3::y [b2Math.h <179:13 179:13>]
SYMBOL_FIELD: public float32 b2Vec3::z [b2Math.h <179:16 179:16>]
SYMBOL_METHOD: public void b2Vec3::SetZero() [b2Math.h <153:2 <153:2 <153:7 153:13> 153:15> 153:49>]
SYMBOL_METHOD: public void b2Vec3::Set(float32, float32, float32) [b2Math.h <156:2 <156:2 <156:7 156:9> 156:45> 156:73>]
SYMBOL_METHOD: public b2Vec3 b2Vec3::operator-() const [b2Math.h <159:2 <159:2 <159:9 159:18> 159:26> 159:69>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(b2Vec3 &&) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public void b2Vec3::operator+=(const b2Vec3 &) [b2Math.h <162:2 <162:2 <162:7 162:17> 162:35> 165:2>]
SYMBOL_METHOD: public void b2Vec3::operator-=(const b2Vec3 &) [b2Math.h <168:2 <168:2 <168:7 168:17> 168:35> 171:2>]
SYMBOL_METHOD: public void b2Vec3::operator*=(float32) [b2Math.h <174:2 <174:2 <174:7 174:17> 174:29> 177:2>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(const b2Vec3 &) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public b2Vec3 & b2Vec3::operator=(b2Vec3 &&) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public void b2Vec3::~b2Vec3() [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_STRUCT: b2Mat22 [b2Math.h <183:1 <183:8 183:14> 254:1>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22() [b2Math.h <186:2 <186:2 <186:2 186:8> 186:10> 186:13>]
SYMBOL_FIELD: public b2Vec2 b2Mat22::ex [b2Math.h <253:9 253:10>]
SYMBOL_FIELD: public b2Vec2 b2Mat22::ey [b2Math.h <253:13 253:14>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <189:2 <189:2 <189:2 189:8> 189:44> 193:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(float32, float32, float32, float32) [b2Math.h <196:2 <196:2 <196:2 196:8> 196:60> 200:2>]
SYMBOL_METHOD: public void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) [b2Math.h <203:2 <203:2 <203:7 203:9> 203:45> 207:2>]
SYMBOL_METHOD: public void b2Mat22::SetIdentity() [b2Math.h <210:2 <210:2 <210:7 210:17> 210:19> 214:2>]
SYMBOL_METHOD: public void b2Mat22::SetZero() [b2Math.h <217:2 <217:2 <217:7 217:13> 217:15> 221:2>]
SYMBOL_METHOD: public b2Mat22 b2Mat22::GetInverse() const [b2Math.h <223:2 <223:2 <223:10 223:19> 223:27> 235:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(b2Mat22 &&) [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_METHOD: public b2Vec2 b2Mat22::Solve(const b2Vec2 &) const [b2Math.h <239:2 <239:2 <239:9 239:13> 239:36> 251:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(const b2Mat22 &) [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_METHOD: public void b2Mat22::~b2Mat22() [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_STRUCT: b2Mat33 [b2Math.h <257:1 <257:8 257:14> 296:1>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33() [b2Math.h <260:2 <260:2 <260:2 260:8> 260:10> 260:13>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ex [b2Math.h <295:9 295:10>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ey [b2Math.h <295:13 295:14>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ez [b2Math.h <295:17 295:18>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) [b2Math.h <263:2 <263:2 <263:2 263:8> 263:62> 268:2>]
SYMBOL_METHOD: public void b2Mat33::SetZero() [b2Math.h <271:2 <271:2 <271:7 271:13> 271:15> 276:2>]
SYMBOL_METHOD: public b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const [b2Math.h <280:2 <280:9 280:15> 280:38>]
SYMBOL_METHOD: public b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const [b2Math.h <285:2 <285:9 285:15> 285:38>]
SYMBOL_METHOD: public void b2Mat33::GetInverse22(b2Mat33 *) const [b2Math.h <289:2 <289:7 289:18> 289:36>]
SYMBOL_METHOD: public void b2Mat33::GetSymInverse33(b2Mat33 *) const [b2Math.h <293:2 <293:7 293:21> 293:39>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(const b2Mat33 &) [b2Math.h <257:8 <257:8 257:14> 257:14>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(b2Mat33 &&) [b2Math.h <257:8 <257:8 257:14> 257:14>]
QUALIFIER: b2Rot [b2Math.h <350:8 350:18>]
SYMBOL_STRUCT: b2Rot [b2Math.h <299:1 <299:8 299:12> 346:1>]
SYMBOL_METHOD: public void b2Rot::b2Rot() [b2Math.h <301:2 <301:2 <301:2 301:6> 301:8> 301:11>]
SYMBOL_METHOD: public void b2Rot::b2Rot(float32) [b2Math.h <304:2 <304:2 <304:11 304:15> 304:30> 309:2>]
SYMBOL_FIELD: public float32 b2Rot::s [b2Math.h <345:10 345:10>]
SYMBOL_FUNCTION: float sinf(float)
SYMBOL_FIELD: public float32 b2Rot::c [b2Math.h <345:13 345:13>]
SYMBOL_FUNCTION: float cosf(float)
SYMBOL_METHOD: public void b2Rot::Set(float32) [b2Math.h <312:2 <312:2 <312:7 312:9> 312:24> 317:2>]
SYMBOL_METHOD: public void b2Rot::SetIdentity() [b2Math.h <320:2 <320:2 <320:7 320:17> 320:19> 324:2>]
SYMBOL_METHOD: public float32 b2Rot::GetAngle() const [b2Math.h <327:2 <327:2 <327:10 327:17> 327:25> 330:2>]
SYMBOL_FUNCTION: float atan2f(float, float)
SYMBOL_METHOD: public b2Vec2 b2Rot::GetXAxis() const [b2Math.h <333:2 <333:2 <333:9 333:16> 333:24> 336:2>]
SYMBOL_METHOD: public b2Vec2 b2Rot::GetYAxis() const [b2Math.h <339:2 <339:2 <339:9 339:16> 339:24> 342:2>]
SYMBOL_METHOD: public void b2Rot::b2Rot(const b2Rot &) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public void b2Rot::b2Rot(b2Rot &&) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public void b2Rot::~b2Rot() [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public b2Rot & b2Rot::operator=(const b2Rot &) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_STRUCT: b2Transform [b2Math.h <350:1 <350:8 350:18> 374:1>]
SYMBOL_METHOD: public void b2Transform::b2Transform() [b2Math.h <353:2 <353:2 <353:2 353:12> 353:14> 353:17>]
SYMBOL_FIELD: public b2Vec2 b2Transform::p [b2Math.h <372:9 372:9>]
SYMBOL_FIELD: public b2Rot b2Transform::q [b2Math.h <373:8 373:8>]
SYMBOL_METHOD: public void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) [b2Math.h <356:2 <356:2 <356:2 356:12> 356:59> 356:89>]
SYMBOL_METHOD: public void b2Transform::SetIdentity() [b2Math.h <359:2 <359:2 <359:7 359:17> 359:19> 363:2>]
SYMBOL_METHOD: public void b2Transform::Set(const b2Vec2 &, float32) [b2Math.h <366:2 <366:2 <366:7 366:9> 366:48> 370:2>]
SYMBOL_METHOD: public void b2Transform::b2Transform(const b2Transform &) [b2Math.h <350:8 <350:8 350:18> 350:18>]
SYMBOL_METHOD: public void b2Transform::b2Transform(b2Transform &&) [b2Math.h <350:8 <350:8 350:18> 350:18>]
SYMBOL_METHOD: public void b2Transform::~b2Transform() [b2Math.h <350:8 <350:8 350:18> 350:18>]
SYMBOL_METHOD: public b2Transform & b2Transform::operator=(const b2Transform &) [b2Math.h <350:8 <350:8 350:18> 350:18>]
SYMBOL_METHOD: public b2Transform & b2Transform::operator=(b2Transform &&) [b2Math.h <350:8 <350:8 350:18> 350:18>]
QUALIFIER: b2Sweep [b2Math.h <697:13 697:19>]
QUALIFIER: b2Sweep [b2Math.h <707:13 707:19>]
QUALIFIER: b2Sweep [b2Math.h <717:13 717:19>]
SYMBOL_STRUCT: b2Sweep [b2Math.h <380:1 <380:8 380:14> 400:1>]
SYMBOL_METHOD: public void b2Sweep::GetTransform(b2Transform *, float32) const [b2Math.h <384:2 <384:7 384:18> 384:56>]
SYMBOL_METHOD: public void b2Sweep::GetTransform(b2Transform *, float32) const [b2Math.h <697:1 <697:22 697:33> 705:1>]
SYMBOL_METHOD: public void b2Sweep::Advance(float32) [b2Math.h <388:2 <388:7 388:13> 388:28>]
SYMBOL_METHOD: public void b2Sweep::Advance(float32) [b2Math.h <707:1 <707:22 707:28> 714:1>]
SYMBOL_METHOD: public void b2Sweep::Normalize() [b2Math.h <391:2 <391:7 391:15> 391:17>]
SYMBOL_METHOD: public void b2Sweep::Normalize() [b2Math.h <717:1 <717:22 717:30> 723:1>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::localCenter [b2Math.h <393:9 393:19>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::c0 [b2Math.h <394:9 394:10>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::c [b2Math.h <394:13 394:13>]
SYMBOL_FIELD: public float32 b2Sweep::a0 [b2Math.h <395:10 395:11>]
SYMBOL_FIELD: public float32 b2Sweep::a [b2Math.h <395:14 395:14>]
SYMBOL_FIELD: public float32 b2Sweep::alpha0 [b2Math.h <399:10 399:15>]
SYMBOL_GLOBAL_VARIABLE: const b2Vec2 b2Vec2_zero [b2Math.h <403:21 403:31>]
SYMBOL_FUNCTION: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <406:1 <406:1 <406:16 406:20> 406:54> 409:1>]
SYMBOL_FUNCTION: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2Math.h <412:1 <412:1 <412:16 412:22> 412:56> 415:1>]
SYMBOL_FUNCTION: b2Vec2 b2Cross(const b2Vec2 &, float32) [b2Math.h <419:1 <419:1 <419:15 419:21> 419:49> 422:1>]
SYMBOL_FUNCTION: b2Vec2 b2Cross(float32, const b2Vec2 &) [b2Math.h <426:1 <426:1 <426:15 426:21> 426:49> 429:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <433:1 <433:1 <433:15 433:19> 433:54> 436:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) [b2Math.h <440:1 <440:1 <440:15 440:20> 440:55> 443:1>]
SYMBOL_FUNCTION: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <446:1 <446:1 <446:15 446:24> 446:59> 449:1>]
SYMBOL_FUNCTION: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <452:1 <452:1 <452:15 452:24> 452:59> 455:1>]
SYMBOL_FUNCTION: b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <457:1 <457:1 <457:15 457:24> 457:53> 460:1>]
SYMBOL_FUNCTION: bool operator==(const b2Vec2 &, const b2Vec2 &) [b2Math.h <462:1 <462:1 <462:13 462:23> 462:58> 465:1>]
SYMBOL_FUNCTION: bool operator!=(const b2Vec2 &, const b2Vec2 &) [b2Math.h <467:1 <467:1 <467:13 467:23> 467:58> 470:1>]
SYMBOL_FUNCTION: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) [b2Math.h <472:1 <472:1 <472:16 472:25> 472:59> 476:1>]
SYMBOL_FUNCTION: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) [b2Math.h <478:1 <478:1 <478:16 478:32> 478:66> 482:1>]
SYMBOL_FUNCTION: b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <484:1 <484:1 <484:15 484:24> 484:53> 487:1>]
SYMBOL_FUNCTION: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <490:1 <490:1 <490:15 490:24> 490:59> 493:1>]
SYMBOL_FUNCTION: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) [b2Math.h <496:1 <496:1 <496:15 496:24> 496:59> 499:1>]
SYMBOL_FUNCTION: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) [b2Math.h <502:1 <502:1 <502:16 502:20> 502:54> 505:1>]
SYMBOL_FUNCTION: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) [b2Math.h <508:1 <508:1 <508:15 508:21> 508:55> 511:1>]
SYMBOL_FUNCTION: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) [b2Math.h <513:1 <513:1 <513:16 513:25> 513:62> 516:1>]
SYMBOL_FUNCTION: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) [b2Math.h <519:1 <519:1 <519:16 519:20> 519:56> 522:1>]
SYMBOL_FUNCTION: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) [b2Math.h <525:1 <525:1 <525:16 525:21> 525:57> 530:1>]
SYMBOL_FUNCTION: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) [b2Math.h <533:1 <533:1 <533:15 533:19> 533:54> 536:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) [b2Math.h <539:1 <539:1 <539:15 539:21> 539:56> 542:1>]
SYMBOL_FUNCTION: b2Rot b2Mul(const b2Rot &, const b2Rot &) [b2Math.h <545:1 <545:1 <545:14 545:18> 545:50> 555:1>]
SYMBOL_FUNCTION: b2Rot b2MulT(const b2Rot &, const b2Rot &) [b2Math.h <558:1 <558:1 <558:14 558:19> 558:51> 568:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <571:1 <571:1 <571:15 571:19> 571:52> 574:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2Math.h <577:1 <577:1 <577:15 577:20> 577:53> 580:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Math.h <582:1 <582:1 <582:15 582:19> 582:58> 588:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) [b2Math.h <590:1 <590:1 <590:15 590:20> 590:59> 598:1>]
SYMBOL_FUNCTION: b2Transform b2Mul(const b2Transform &, const b2Transform &) [b2Math.h <602:1 <602:1 <602:20 602:24> 602:68> 608:1>]
SYMBOL_FUNCTION: b2Transform b2MulT(const b2Transform &, const b2Transform &) [b2Math.h <612:1 <612:1 <612:20 612:25> 612:69> 618:1>]
SYMBOL_FUNCTION: T b2Abs<typename T>(T) [b2Math.h <620:1 <621:1 <621:10 621:14> 621:19> 624:1>]
SYMBOL_FUNCTION: float b2Abs<float>(float) [b2Math.h <621:1 <621:1 <621:10 621:14> 621:19> 624:1>]
SYMBOL_FUNCTION: b2Vec2 b2Abs<b2Vec2>(b2Vec2) [b2Math.h <621:1 <621:10 621:14> 624:1>]
SYMBOL_FUNCTION: b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <626:1 <626:1 <626:15 626:19> 626:36> 629:1>]
SYMBOL_FUNCTION: b2Mat22 b2Abs(const b2Mat22 &) [b2Math.h <631:1 <631:1 <631:16 631:20> 631:38> 634:1>]
SYMBOL_FUNCTION: T b2Min<typename T>(T, T) [b2Math.h <636:1 <637:1 <637:10 637:14> 637:24> 640:1>]
SYMBOL_FUNCTION: float b2Min<float>(float, float) [b2Math.h <637:1 <637:1 <637:10 637:14> 637:24> 640:1>]
SYMBOL_FUNCTION: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) [b2Math.h <637:1 <637:10 637:14> 640:1>]
SYMBOL_FUNCTION: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Math.h <642:1 <642:1 <642:15 642:19> 642:53> 645:1>]
SYMBOL_FUNCTION: T b2Max<typename T>(T, T) [b2Math.h <647:1 <648:1 <648:10 648:14> 648:24> 651:1>]
SYMBOL_FUNCTION: float b2Max<float>(float, float) [b2Math.h <648:1 <648:1 <648:10 648:14> 648:24> 651:1>]
SYMBOL_FUNCTION: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) [b2Math.h <648:1 <648:10 648:14> 651:1>]
SYMBOL_FUNCTION: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Math.h <653:1 <653:1 <653:15 653:19> 653:53> 656:1>]
SYMBOL_FUNCTION: T b2Clamp<typename T>(T, T, T) [b2Math.h <658:1 <659:1 <659:10 659:16> 659:36> 662:1>]
SYMBOL_FUNCTION: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) [b2Math.h <664:1 <664:1 <664:15 664:21> 664:77> 667:1>]
SYMBOL_FUNCTION: void b2Swap<typename T>(T &, T &) [b2Math.h <669:1 <669:22 <669:34 669:39> 669:51> 674:1>]
SYMBOL_FUNCTION: uint32 b2NextPowerOfTwo(uint32) [b2Math.h <681:1 <681:1 <681:15 681:30> 681:40> 689:1>]
SYMBOL_FUNCTION: bool b2IsPowerOfTwo(uint32) [b2Math.h <691:1 <691:1 <691:13 691:26> 691:36> 695:1>]
SYMBOL_FUNCTION: void _wassert(const wchar_t *, const wchar_t *, unsigned int)
SYMBOL_FUNCTION: float floorf(float)
QUALIFIER: b2Shape [b2Shape.h <99:8 99:14>]
QUALIFIER: b2Shape [b2Shape.h <99:22 99:28>]
SYMBOL_CLASS: b2Shape [b2Collision.h <29:7 29:13>]
SYMBOL_CLASS: b2Shape [b2Shape.h <42:1 <42:7 42:13> 97:1>]
QUALIFIER: b2CircleShape [b2CircleShape.h <53:8 53:20>]
SYMBOL_CLASS: b2CircleShape [b2Collision.h <25:1 <30:7 30:19> 51:1>]
SYMBOL_CLASS: b2CircleShape [b2CircleShape.h <25:1 <25:7 25:19> 51:1>]
QUALIFIER: b2EdgeShape [b2EdgeShape.h <62:8 62:18>]
SYMBOL_CLASS: b2EdgeShape [b2Collision.h <27:1 <31:7 31:17> 60:1>]
SYMBOL_CLASS: b2EdgeShape [b2EdgeShape.h <27:1 <27:7 27:17> 60:1>]
QUALIFIER: b2PolygonShape [b2PolygonShape.h <81:8 81:21>]
SYMBOL_CLASS: b2PolygonShape [b2Collision.h <28:1 <32:7 32:20> 79:1>]
SYMBOL_CLASS: b2PolygonShape [b2PolygonShape.h <28:1 <28:7 28:20> 79:1>]
SYMBOL_GLOBAL_VARIABLE: const uint8 b2_nullFeature [b2Collision.h <34:13 34:26>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <47:13 47:28>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <76:14 76:29>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <114:14 114:29>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <144:13 144:28>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <501:23 501:38>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <502:23 502:38>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <507:23 507:38>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <508:23 508:38>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <534:23 534:38>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <535:23 535:38>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <540:23 540:38>]
QUALIFIER: b2ContactFeature [b2CollideEdge.cpp <541:23 541:38>]
SYMBOL_STRUCT: b2ContactFeature [b2Collision.h <38:1 <38:8 38:23> 50:1>]
SYMBOL_ENUM: public b2ContactFeature::Type [b2Collision.h <40:2 <40:7 40:10> 44:2>]
SYMBOL_ENUM_CONSTANT: b2ContactFeature::Type::e_vertex [b2Collision.h <42:3 42:10>]
SYMBOL_ENUM_CONSTANT: b2ContactFeature::Type::e_face [b2Collision.h <43:3 43:8>]
SYMBOL_FIELD: public uint8 b2ContactFeature::indexA [b2Collision.h <46:8 46:13>]
SYMBOL_FIELD: public uint8 b2ContactFeature::indexB [b2Collision.h <47:8 47:13>]
SYMBOL_FIELD: public uint8 b2ContactFeature::typeA [b2Collision.h <48:8 48:12>]
SYMBOL_FIELD: public uint8 b2ContactFeature::typeB [b2Collision.h <49:8 49:12>]
SYMBOL_METHOD: public void b2ContactFeature::b2ContactFeature() [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public void b2ContactFeature::b2ContactFeature(const b2ContactFeature &) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public void b2ContactFeature::b2ContactFeature(b2ContactFeature &&) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public b2ContactFeature & b2ContactFeature::operator=(const b2ContactFeature &) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public b2ContactFeature & b2ContactFeature::operator=(b2ContactFeature &&) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public void b2ContactFeature::~b2ContactFeature() [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_UNION: b2ContactID [b2Collision.h <53:1 <53:7 53:17> 57:1>]
SYMBOL_FIELD: public b2ContactFeature b2ContactID::cf [b2Collision.h <55:19 55:20>]
SYMBOL_FIELD: public uint32 b2ContactID::key [b2Collision.h <56:9 56:11>]
SYMBOL_METHOD: public void b2ContactID::b2ContactID() [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public void b2ContactID::~b2ContactID() [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public void b2ContactID::b2ContactID(const b2ContactID &) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public void b2ContactID::b2ContactID(b2ContactID &&) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public b2ContactID & b2ContactID::operator=(const b2ContactID &) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public b2ContactID & b2ContactID::operator=(b2ContactID &&) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_STRUCT: b2ManifoldPoint [b2Collision.h <69:1 <69:8 69:22> 75:1>]
SYMBOL_FIELD: public b2Vec2 b2ManifoldPoint::localPoint [b2Collision.h <71:9 71:18>]
SYMBOL_FIELD: public float32 b2ManifoldPoint::normalImpulse [b2Collision.h <72:10 72:22>]
SYMBOL_FIELD: public float32 b2ManifoldPoint::tangentImpulse [b2Collision.h <73:10 73:23>]
SYMBOL_FIELD: public b2ContactID b2ManifoldPoint::id [b2Collision.h <74:14 74:15>]
QUALIFIER: b2Manifold [b2CollideEdge.cpp <78:20 78:29>]
QUALIFIER: b2Manifold [b2CollideEdge.cpp <116:20 116:29>]
QUALIFIER: b2Manifold [b2CollideEdge.cpp <146:19 146:28>]
QUALIFIER: b2Manifold [b2CollideEdge.cpp <480:20 480:29>]
QUALIFIER: b2Manifold [b2CollideEdge.cpp <529:20 529:29>]
SYMBOL_STRUCT: b2Manifold [b2Collision.h <93:1 <93:8 93:17> 107:1>]
SYMBOL_ENUM: public b2Manifold::Type [b2Collision.h <95:2 <95:7 95:10> 100:2>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_circles [b2Collision.h <97:3 97:11>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_faceA [b2Collision.h <98:3 98:9>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_faceB [b2Collision.h <99:3 99:9>]
SYMBOL_FIELD: public b2ManifoldPoint [] b2Manifold::points [b2Collision.h <102:18 102:23>]
SYMBOL_FIELD: public b2Vec2 b2Manifold::localNormal [b2Collision.h <103:9 103:19>]
SYMBOL_FIELD: public b2Vec2 b2Manifold::localPoint [b2Collision.h <104:9 104:18>]
SYMBOL_FIELD: public b2Manifold::Type b2Manifold::type [b2Collision.h <105:7 105:10>]
SYMBOL_FIELD: public int32 b2Manifold::pointCount [b2Collision.h <106:8 106:17>]
SYMBOL_STRUCT: b2WorldManifold [b2Collision.h <110:1 <110:8 110:22> 123:1>]
SYMBOL_METHOD: public void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) [b2Collision.h <116:2 <116:7 116:16> 118:45>]
SYMBOL_FIELD: public b2Vec2 b2WorldManifold::normal [b2Collision.h <120:9 120:14>]
SYMBOL_FIELD: public b2Vec2 [] b2WorldManifold::points [b2Collision.h <121:9 121:14>]
SYMBOL_FIELD: public float32 [] b2WorldManifold::separations [b2Collision.h <122:10 122:20>]
SYMBOL_ENUM: b2PointState [b2Collision.h <126:1 <126:6 126:17> 132:1>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_nullState [b2Collision.h <128:2 128:13>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_addState [b2Collision.h <129:2 129:12>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_persistState [b2Collision.h <130:2 130:16>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_removeState [b2Collision.h <131:2 131:15>]
SYMBOL_FUNCTION: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) [b2Collision.h <136:1 <136:6 136:21> 137:64>]
SYMBOL_STRUCT: b2ClipVertex [b2Collision.h <140:1 <140:8 140:19> 144:1>]
SYMBOL_FIELD: public b2Vec2 b2ClipVertex::v [b2Collision.h <142:9 142:9>]
SYMBOL_FIELD: public b2ContactID b2ClipVertex::id [b2Collision.h <143:14 143:15>]
SYMBOL_METHOD: public void b2ClipVertex::b2ClipVertex() [b2Collision.h <140:8 <140:8 140:19> 140:19>]
SYMBOL_METHOD: public void b2ClipVertex::b2ClipVertex(const b2ClipVertex &) [b2Collision.h <140:8 <140:8 140:19> 140:19>]
SYMBOL_METHOD: public void b2ClipVertex::b2ClipVertex(b2ClipVertex &&) [b2Collision.h <140:8 <140:8 140:19> 140:19>]
SYMBOL_STRUCT: b2RayCastInput [b2Collision.h <147:1 <147:8 147:21> 151:1>]
SYMBOL_FIELD: public b2Vec2 b2RayCastInput::p1 [b2Collision.h <149:9 149:10>]
SYMBOL_FIELD: public b2Vec2 b2RayCastInput::p2 [b2Collision.h <149:13 149:14>]
SYMBOL_FIELD: public float32 b2RayCastInput::maxFraction [b2Collision.h <150:10 150:20>]
SYMBOL_STRUCT: b2RayCastOutput [b2Collision.h <155:1 <155:8 155:22> 159:1>]
SYMBOL_FIELD: public b2Vec2 b2RayCastOutput::normal [b2Collision.h <157:9 157:14>]
SYMBOL_FIELD: public float32 b2RayCastOutput::fraction [b2Collision.h <158:10 158:17>]
QUALIFIER: b2AABB [b2Collision.h <254:13 254:18>]
SYMBOL_STRUCT: b2AABB [b2Collision.h <162:1 <162:8 162:13> 216:1>]
SYMBOL_METHOD: public bool b2AABB::IsValid() const [b2Collision.h <165:2 <165:7 165:13> 165:21>]
SYMBOL_METHOD: public bool b2AABB::IsValid() const [b2Collision.h <254:1 <254:21 254:27> 260:1>]
SYMBOL_METHOD: public b2Vec2 b2AABB::GetCenter() const [b2Collision.h <168:2 <168:2 <168:9 168:17> 168:25> 171:2>]
SYMBOL_FIELD: public b2Vec2 b2AABB::lowerBound [b2Collision.h <214:9 214:18>]
SYMBOL_FIELD: public b2Vec2 b2AABB::upperBound [b2Collision.h <215:9 215:18>]
SYMBOL_METHOD: public b2Vec2 b2AABB::GetExtents() const [b2Collision.h <174:2 <174:2 <174:9 174:18> 174:26> 177:2>]
SYMBOL_METHOD: public float32 b2AABB::GetPerimeter() const [b2Collision.h <180:2 <180:2 <180:10 180:21> 180:29> 185:2>]
SYMBOL_METHOD: public void b2AABB::Combine(const b2AABB &) [b2Collision.h <188:2 <188:2 <188:7 188:13> 188:33> 192:2>]
SYMBOL_METHOD: public void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2Collision.h <195:2 <195:2 <195:7 195:13> 195:55> 199:2>]
SYMBOL_METHOD: public bool b2AABB::Contains(const b2AABB &) const [b2Collision.h <202:2 <202:2 <202:7 202:14> 202:40> 210:2>]
SYMBOL_METHOD: public bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const [b2Collision.h <212:2 <212:7 212:13> 212:73>]
SYMBOL_FUNCTION: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <219:1 <219:6 219:21> 221:60>]
SYMBOL_FUNCTION: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <224:1 <224:6 224:30> 226:63>]
SYMBOL_FUNCTION: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2Collision.h <229:1 <229:6 229:22> 231:63>]
SYMBOL_FUNCTION: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2CollideEdge.cpp <27:1 <27:6 27:27> 152:1>]
SYMBOL_FUNCTION: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <234:1 <234:6 234:27> 236:63>]
SYMBOL_FUNCTION: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2CollideEdge.cpp <692:1 <692:6 692:28> 698:1>]
SYMBOL_FUNCTION: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2Collision.h <239:1 <239:6 239:28> 241:64>]
SYMBOL_FUNCTION: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) [b2Collision.h <244:1 <244:7 244:25> 245:64>]
SYMBOL_FUNCTION: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) [b2Collision.h <248:1 <248:6 248:18> 250:52>]
SYMBOL_FUNCTION: bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2Collision.h <262:1 <262:1 <262:13 262:25> 262:59> 275:1>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_chunkSize [b2BlockAllocator.h <24:13 24:24>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_maxBlockSize [b2BlockAllocator.h <25:13 25:27>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_blockSizes [b2BlockAllocator.h <26:13 26:25>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_chunkArrayIncrement [b2BlockAllocator.h <27:13 27:34>]
SYMBOL_STRUCT: b2Block [b2BlockAllocator.h <29:8 29:14>]
SYMBOL_STRUCT: b2Chunk [b2BlockAllocator.h <30:8 30:14>]
SYMBOL_CLASS: b2BlockAllocator [b2BlockAllocator.h <35:1 <35:7 35:22> 60:1>]
SYMBOL_METHOD: public void b2BlockAllocator::b2BlockAllocator() [b2BlockAllocator.h <38:2 <38:2 38:17> 38:19>]
SYMBOL_METHOD: public void b2BlockAllocator::~b2BlockAllocator() [b2BlockAllocator.h <39:2 <39:2 39:18> 39:20>]
SYMBOL_METHOD: public void * b2BlockAllocator::Allocate(int32) [b2BlockAllocator.h <42:2 <42:8 42:15> 42:27>]
SYMBOL_METHOD: public void b2BlockAllocator::Free(void *, int32) [b2BlockAllocator.h <45:2 <45:7 45:10> 45:31>]
SYMBOL_METHOD: public void b2BlockAllocator::Clear() [b2BlockAllocator.h <47:2 <47:7 47:11> 47:13>]
SYMBOL_FIELD: private b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.h <51:11 51:18>]
SYMBOL_FIELD: private int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.h <52:8 52:19>]
SYMBOL_FIELD: private int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.h <53:8 53:19>]
SYMBOL_FIELD: private b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.h <55:11 55:21>]
SYMBOL_FIELD: private static int32 [] b2BlockAllocator::s_blockSizes [b2BlockAllocator.h <57:15 57:26>]
SYMBOL_FIELD: private static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.h <58:15 58:31>]
SYMBOL_FIELD: private static bool b2BlockAllocator::s_blockSizeLookupInitialized [b2BlockAllocator.h <59:14 59:41>]
SYMBOL_STRUCT: b2MassData [b2Shape.h <27:1 <27:8 27:17> 37:1>]
SYMBOL_FIELD: public float32 b2MassData::mass [b2Shape.h <30:10 30:13>]
SYMBOL_FIELD: public b2Vec2 b2MassData::center [b2Shape.h <33:9 33:14>]
SYMBOL_FIELD: public float32 b2MassData::I [b2Shape.h <36:10 36:10>]
SYMBOL_ENUM: public b2Shape::Type [b2Shape.h <46:2 <46:7 46:10> 53:2>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_circle [b2Shape.h <48:3 48:10>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_edge [b2Shape.h <49:3 49:8>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_polygon [b2Shape.h <50:3 50:11>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_chain [b2Shape.h <51:3 51:9>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_typeCount [b2Shape.h <52:3 52:13>]
SYMBOL_METHOD: public void b2Shape::~b2Shape() [b2Shape.h <55:2 <55:2 <55:10 55:17> 55:19> 55:22>]
SYMBOL_METHOD: public b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2Shape.h <58:2 <58:19 58:23> 58:62>]
SYMBOL_METHOD: public b2Shape::Type b2Shape::GetType() const [b2Shape.h <62:2 <62:7 62:13> 62:21>]
SYMBOL_METHOD: public b2Shape::Type b2Shape::GetType() const [b2Shape.h <99:1 <99:31 99:37> 102:1>]
SYMBOL_METHOD: public int32 b2Shape::GetChildCount() const [b2Shape.h <65:2 <65:16 65:28> 65:40>]
SYMBOL_METHOD: public bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2Shape.h <70:2 <70:15 70:23> 70:73>]
SYMBOL_METHOD: public bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2Shape.h <77:2 <77:15 77:21> 78:63>]
SYMBOL_METHOD: public void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2Shape.h <84:2 <84:15 84:25> 84:90>]
SYMBOL_METHOD: public void b2Shape::ComputeMass(b2MassData *, float32) const [b2Shape.h <90:2 <90:15 90:25> 90:74>]
SYMBOL_FIELD: public b2Shape::Type b2Shape::m_type [b2Shape.h <92:7 92:12>]
SYMBOL_FIELD: public float32 b2Shape::m_radius [b2Shape.h <96:10 96:17>]
SYMBOL_METHOD: public b2Shape & b2Shape::operator=(const b2Shape &) [b2Shape.h <42:7 <42:7 42:13> 42:13>]
SYMBOL_METHOD: public void b2Shape::b2Shape(const b2Shape &) [b2Shape.h <42:7 <42:7 42:13> 42:13>]
SYMBOL_METHOD: public void b2Shape::b2Shape() [b2Shape.h <42:7 <42:7 42:13> 42:13>]
SYMBOL_METHOD: public void b2CircleShape::b2CircleShape() [b2CircleShape.h <28:2 <28:2 28:14> 28:16>]
SYMBOL_METHOD: public void b2CircleShape::b2CircleShape() [b2CircleShape.h <53:1 <53:23 53:35> 58:1>]
SYMBOL_METHOD: public b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const [b2CircleShape.h <31:2 <31:11 31:15> 31:59>]
SYMBOL_METHOD: public int32 b2CircleShape::GetChildCount() const [b2CircleShape.h <34:2 <34:8 34:20> 34:37>]
SYMBOL_METHOD: public bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2CircleShape.h <37:2 <37:7 37:15> 37:77>]
SYMBOL_METHOD: public bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2CircleShape.h <40:2 <40:7 40:13> 41:66>]
SYMBOL_METHOD: public void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2CircleShape.h <44:2 <44:7 44:17> 44:94>]
SYMBOL_METHOD: public void b2CircleShape::ComputeMass(b2MassData *, float32) const [b2CircleShape.h <47:2 <47:7 47:17> 47:71>]
SYMBOL_FIELD: public b2Vec2 b2CircleShape::m_p [b2CircleShape.h <50:9 50:11>]
SYMBOL_METHOD: public void b2CircleShape::b2CircleShape(const b2CircleShape &) [b2CircleShape.h <25:7 <25:7 25:19> 25:19>]
SYMBOL_METHOD: public void b2CircleShape::b2CircleShape(b2CircleShape &&) [b2CircleShape.h <25:7 <25:7 25:19> 25:19>]
SYMBOL_METHOD: public b2CircleShape & b2CircleShape::operator=(const b2CircleShape &) [b2CircleShape.h <25:7 <25:7 25:19> 25:19>]
SYMBOL_METHOD: public b2CircleShape & b2CircleShape::operator=(b2CircleShape &&) [b2CircleShape.h <25:7 <25:7 25:19> 25:19>]
SYMBOL_METHOD: public void b2CircleShape::~b2CircleShape() [b2CircleShape.h <25:7 <25:7 25:19> 25:19>]
SYMBOL_METHOD: public void b2EdgeShape::b2EdgeShape() [b2EdgeShape.h <30:2 <30:2 30:12> 30:14>]
SYMBOL_METHOD: public void b2EdgeShape::b2EdgeShape() [b2EdgeShape.h <62:1 <62:21 62:31> 72:1>]
SYMBOL_METHOD: public void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.h <33:2 <33:7 33:9> 33:45>]
SYMBOL_METHOD: public b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const [b2EdgeShape.h <36:2 <36:11 36:15> 36:59>]
SYMBOL_METHOD: public int32 b2EdgeShape::GetChildCount() const [b2EdgeShape.h <39:2 <39:8 39:20> 39:37>]
SYMBOL_METHOD: public bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2EdgeShape.h <42:2 <42:7 42:15> 42:77>]
SYMBOL_METHOD: public bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2EdgeShape.h <45:2 <45:7 45:13> 46:66>]
SYMBOL_METHOD: public void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2EdgeShape.h <49:2 <49:7 49:17> 49:94>]
SYMBOL_METHOD: public void b2EdgeShape::ComputeMass(b2MassData *, float32) const [b2EdgeShape.h <52:2 <52:7 52:17> 52:71>]
SYMBOL_FIELD: public b2Vec2 b2EdgeShape::m_vertex1 [b2EdgeShape.h <55:9 55:17>]
SYMBOL_FIELD: public b2Vec2 b2EdgeShape::m_vertex2 [b2EdgeShape.h <55:20 55:28>]
SYMBOL_FIELD: public b2Vec2 b2EdgeShape::m_vertex0 [b2EdgeShape.h <58:9 58:17>]
SYMBOL_FIELD: public b2Vec2 b2EdgeShape::m_vertex3 [b2EdgeShape.h <58:20 58:28>]
SYMBOL_FIELD: public bool b2EdgeShape::m_hasVertex0 [b2EdgeShape.h <59:7 59:18>]
SYMBOL_FIELD: public bool b2EdgeShape::m_hasVertex3 [b2EdgeShape.h <59:21 59:32>]
SYMBOL_METHOD: public void b2EdgeShape::b2EdgeShape(const b2EdgeShape &) [b2EdgeShape.h <27:7 <27:7 27:17> 27:17>]
SYMBOL_METHOD: public void b2EdgeShape::b2EdgeShape(b2EdgeShape &&) [b2EdgeShape.h <27:7 <27:7 27:17> 27:17>]
SYMBOL_METHOD: public b2EdgeShape & b2EdgeShape::operator=(const b2EdgeShape &) [b2EdgeShape.h <27:7 <27:7 27:17> 27:17>]
SYMBOL_METHOD: public b2EdgeShape & b2EdgeShape::operator=(b2EdgeShape &&) [b2EdgeShape.h <27:7 <27:7 27:17> 27:17>]
SYMBOL_METHOD: public void b2EdgeShape::~b2EdgeShape() [b2EdgeShape.h <27:7 <27:7 27:17> 27:17>]
SYMBOL_METHOD: public void b2PolygonShape::b2PolygonShape() [b2PolygonShape.h <31:2 <31:2 31:15> 31:17>]
SYMBOL_METHOD: public void b2PolygonShape::b2PolygonShape() [b2PolygonShape.h <81:1 <81:24 81:37> 87:1>]
SYMBOL_METHOD: public b2Shape * b2PolygonShape::Clone(b2BlockAllocator *) const [b2PolygonShape.h <34:2 <34:11 34:15> 34:59>]
SYMBOL_METHOD: public int32 b2PolygonShape::GetChildCount() const [b2PolygonShape.h <37:2 <37:8 37:20> 37:37>]
SYMBOL_METHOD: public void b2PolygonShape::Set(const b2Vec2 *, int32) [b2PolygonShape.h <44:2 <44:7 44:9> 44:44>]
SYMBOL_METHOD: public void b2PolygonShape::SetAsBox(float32, float32) [b2PolygonShape.h <49:2 <49:7 49:14> 49:38>]
SYMBOL_METHOD: public void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) [b2PolygonShape.h <56:2 <56:7 56:14> 56:75>]
SYMBOL_METHOD: public bool b2PolygonShape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2PolygonShape.h <59:2 <59:7 59:15> 59:77>]
SYMBOL_METHOD: public bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2PolygonShape.h <62:2 <62:7 62:13> 63:67>]
SYMBOL_METHOD: public void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2PolygonShape.h <66:2 <66:7 66:17> 66:94>]
SYMBOL_METHOD: public void b2PolygonShape::ComputeMass(b2MassData *, float32) const [b2PolygonShape.h <69:2 <69:7 69:17> 69:71>]
SYMBOL_METHOD: public bool b2PolygonShape::Validate() const [b2PolygonShape.h <73:2 <73:7 73:14> 73:22>]
SYMBOL_FIELD: public b2Vec2 b2PolygonShape::m_centroid [b2PolygonShape.h <75:9 75:18>]
SYMBOL_FIELD: public b2Vec2 [] b2PolygonShape::m_vertices [b2PolygonShape.h <76:9 76:18>]
SYMBOL_FIELD: public b2Vec2 [] b2PolygonShape::m_normals [b2PolygonShape.h <77:9 77:17>]
SYMBOL_FIELD: public int32 b2PolygonShape::m_count [b2PolygonShape.h <78:8 78:14>]
SYMBOL_METHOD: public void b2PolygonShape::b2PolygonShape(const b2PolygonShape &) [b2PolygonShape.h <28:7 <28:7 28:20> 28:20>]
SYMBOL_METHOD: public void b2PolygonShape::b2PolygonShape(b2PolygonShape &&) [b2PolygonShape.h <28:7 <28:7 28:20> 28:20>]
SYMBOL_METHOD: public b2PolygonShape & b2PolygonShape::operator=(const b2PolygonShape &) [b2PolygonShape.h <28:7 <28:7 28:20> 28:20>]
SYMBOL_METHOD: public b2PolygonShape & b2PolygonShape::operator=(b2PolygonShape &&) [b2PolygonShape.h <28:7 <28:7 28:20> 28:20>]
SYMBOL_METHOD: public void b2PolygonShape::~b2PolygonShape() [b2PolygonShape.h <28:7 <28:7 28:20> 28:20>]
QUALIFIER: b2EPAxis [b2CollideEdge.cpp <442:23 442:30>]
QUALIFIER: b2EPAxis [b2CollideEdge.cpp <453:26 453:33>]
QUALIFIER: b2EPAxis [b2CollideEdge.cpp <463:26 463:33>]
QUALIFIER: b2EPAxis [b2CollideEdge.cpp <478:26 478:33>]
QUALIFIER: b2EPAxis [b2CollideEdge.cpp <577:26 577:33>]
QUALIFIER: b2EPAxis [b2CollideEdge.cpp <599:28 599:35>]
QUALIFIER: b2EPAxis [b2CollideEdge.cpp <623:14 623:21>]
QUALIFIER: b2EPAxis [b2CollideEdge.cpp <642:14 642:21>]
QUALIFIER: b2EPAxis [b2CollideEdge.cpp <659:16 659:23>]
QUALIFIER: b2EPAxis [b2CollideEdge.cpp <683:16 683:23>]
SYMBOL_STRUCT: b2EPAxis [b2CollideEdge.cpp <155:1 <155:8 155:15> 167:1>]
SYMBOL_ENUM: public b2EPAxis::Type [b2CollideEdge.cpp <157:2 <157:7 157:10> 162:2>]
SYMBOL_ENUM_CONSTANT: b2EPAxis::Type::e_unknown [b2CollideEdge.cpp <159:3 159:11>]
SYMBOL_ENUM_CONSTANT: b2EPAxis::Type::e_edgeA [b2CollideEdge.cpp <160:3 160:9>]
SYMBOL_ENUM_CONSTANT: b2EPAxis::Type::e_edgeB [b2CollideEdge.cpp <161:3 161:9>]
SYMBOL_FIELD: public b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <164:7 164:10>]
SYMBOL_FIELD: public int32 b2EPAxis::index [b2CollideEdge.cpp <165:8 165:12>]
SYMBOL_FIELD: public float32 b2EPAxis::separation [b2CollideEdge.cpp <166:10 166:19>]
SYMBOL_METHOD: public void b2EPAxis::~b2EPAxis() [b2CollideEdge.cpp <155:8 <155:8 155:15> 155:15>]
SYMBOL_METHOD: public void b2EPAxis::b2EPAxis() [b2CollideEdge.cpp <155:8 <155:8 155:15> 155:15>]
SYMBOL_METHOD: public void b2EPAxis::b2EPAxis(const b2EPAxis &) [b2CollideEdge.cpp <155:8 <155:8 155:15> 155:15>]
SYMBOL_METHOD: public void b2EPAxis::b2EPAxis(b2EPAxis &&) [b2CollideEdge.cpp <155:8 <155:8 155:15> 155:15>]
SYMBOL_METHOD: public b2EPAxis & b2EPAxis::operator=(const b2EPAxis &) [b2CollideEdge.cpp <155:8 <155:8 155:15> 155:15>]
SYMBOL_METHOD: public b2EPAxis & b2EPAxis::operator=(b2EPAxis &&) [b2CollideEdge.cpp <155:8 <155:8 155:15> 155:15>]
SYMBOL_STRUCT: b2TempPolygon [b2CollideEdge.cpp <170:1 <170:8 170:20> 175:1>]
SYMBOL_FIELD: public b2Vec2 [] b2TempPolygon::vertices [b2CollideEdge.cpp <172:9 172:16>]
SYMBOL_FIELD: public b2Vec2 [] b2TempPolygon::normals [b2CollideEdge.cpp <173:9 173:15>]
SYMBOL_FIELD: public int32 b2TempPolygon::count [b2CollideEdge.cpp <174:8 174:12>]
SYMBOL_METHOD: public void b2TempPolygon::b2TempPolygon() [b2CollideEdge.cpp <170:8 <170:8 170:20> 170:20>]
SYMBOL_METHOD: public void b2TempPolygon::~b2TempPolygon() [b2CollideEdge.cpp <170:8 <170:8 170:20> 170:20>]
SYMBOL_METHOD: public void b2TempPolygon::b2TempPolygon(const b2TempPolygon &) [b2CollideEdge.cpp <170:8 <170:8 170:20> 170:20>]
SYMBOL_METHOD: public void b2TempPolygon::b2TempPolygon(b2TempPolygon &&) [b2CollideEdge.cpp <170:8 <170:8 170:20> 170:20>]
SYMBOL_STRUCT: b2ReferenceFace [b2CollideEdge.cpp <178:1 <178:8 178:22> 191:1>]
SYMBOL_FIELD: public int32 b2ReferenceFace::i1 [b2CollideEdge.cpp <180:8 180:9>]
SYMBOL_FIELD: public int32 b2ReferenceFace::i2 [b2CollideEdge.cpp <180:12 180:13>]
SYMBOL_FIELD: public b2Vec2 b2ReferenceFace::v1 [b2CollideEdge.cpp <182:9 182:10>]
SYMBOL_FIELD: public b2Vec2 b2ReferenceFace::v2 [b2CollideEdge.cpp <182:13 182:14>]
SYMBOL_FIELD: public b2Vec2 b2ReferenceFace::normal [b2CollideEdge.cpp <184:9 184:14>]
SYMBOL_FIELD: public b2Vec2 b2ReferenceFace::sideNormal1 [b2CollideEdge.cpp <186:9 186:19>]
SYMBOL_FIELD: public float32 b2ReferenceFace::sideOffset1 [b2CollideEdge.cpp <187:10 187:20>]
SYMBOL_FIELD: public b2Vec2 b2ReferenceFace::sideNormal2 [b2CollideEdge.cpp <189:9 189:19>]
SYMBOL_FIELD: public float32 b2ReferenceFace::sideOffset2 [b2CollideEdge.cpp <190:10 190:20>]
SYMBOL_METHOD: public void b2ReferenceFace::b2ReferenceFace() [b2CollideEdge.cpp <178:8 <178:8 178:22> 178:22>]
SYMBOL_METHOD: public void b2ReferenceFace::b2ReferenceFace(const b2ReferenceFace &) [b2CollideEdge.cpp <178:8 <178:8 178:22> 178:22>]
SYMBOL_METHOD: public void b2ReferenceFace::b2ReferenceFace(b2ReferenceFace &&) [b2CollideEdge.cpp <178:8 <178:8 178:22> 178:22>]
QUALIFIER: b2EPCollider [b2CollideEdge.cpp <230:6 230:17>]
QUALIFIER: b2EPCollider [b2CollideEdge.cpp <620:10 620:21>]
QUALIFIER: b2EPCollider [b2CollideEdge.cpp <639:10 639:21>]
SYMBOL_STRUCT: b2EPCollider [b2CollideEdge.cpp <194:1 <194:8 194:19> 219:1>]
SYMBOL_METHOD: public void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2CollideEdge.cpp <196:2 <196:7 196:13> 197:60>]
SYMBOL_METHOD: public void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2CollideEdge.cpp <230:1 <230:20 230:26> 618:1>]
SYMBOL_METHOD: public b2EPAxis b2EPCollider::ComputeEdgeSeparation() [b2CollideEdge.cpp <198:2 <198:11 198:31> 198:33>]
SYMBOL_METHOD: public b2EPAxis b2EPCollider::ComputeEdgeSeparation() [b2CollideEdge.cpp <620:1 <620:24 620:44> 637:1>]
SYMBOL_METHOD: public b2EPAxis b2EPCollider::ComputePolygonSeparation() [b2CollideEdge.cpp <199:2 <199:11 199:34> 199:36>]
SYMBOL_METHOD: public b2EPAxis b2EPCollider::ComputePolygonSeparation() [b2CollideEdge.cpp <639:1 <639:24 639:47> 690:1>]
SYMBOL_ENUM: public b2EPCollider::VertexType [b2CollideEdge.cpp <201:2 <201:7 201:16> 206:2>]
SYMBOL_ENUM_CONSTANT: b2EPCollider::VertexType::e_isolated [b2CollideEdge.cpp <203:3 203:12>]
SYMBOL_ENUM_CONSTANT: b2EPCollider::VertexType::e_concave [b2CollideEdge.cpp <204:3 204:11>]
SYMBOL_ENUM_CONSTANT: b2EPCollider::VertexType::e_convex [b2CollideEdge.cpp <205:3 205:10>]
SYMBOL_FIELD: public b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <208:16 208:25>]
SYMBOL_FIELD: public b2Transform b2EPCollider::m_xf [b2CollideEdge.cpp <210:14 210:17>]
SYMBOL_FIELD: public b2Vec2 b2EPCollider::m_centroidB [b2CollideEdge.cpp <211:9 211:19>]
SYMBOL_FIELD: public b2Vec2 b2EPCollider::m_v0 [b2CollideEdge.cpp <212:9 212:12>]
SYMBOL_FIELD: public b2Vec2 b2EPCollider::m_v1 [b2CollideEdge.cpp <212:15 212:18>]
SYMBOL_FIELD: public b2Vec2 b2EPCollider::m_v2 [b2CollideEdge.cpp <212:21 212:24>]
SYMBOL_FIELD: public b2Vec2 b2EPCollider::m_v3 [b2CollideEdge.cpp <212:27 212:30>]
SYMBOL_FIELD: public b2Vec2 b2EPCollider::m_normal0 [b2CollideEdge.cpp <213:9 213:17>]
SYMBOL_FIELD: public b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <213:20 213:28>]
SYMBOL_FIELD: public b2Vec2 b2EPCollider::m_normal2 [b2CollideEdge.cpp <213:31 213:39>]
SYMBOL_FIELD: public b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <214:9 214:16>]
SYMBOL_FIELD: public b2EPCollider::VertexType b2EPCollider::m_type1 [b2CollideEdge.cpp <215:13 215:19>]
SYMBOL_FIELD: public b2EPCollider::VertexType b2EPCollider::m_type2 [b2CollideEdge.cpp <215:22 215:28>]
SYMBOL_FIELD: public b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <216:9 216:20>]
SYMBOL_FIELD: public b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <216:23 216:34>]
SYMBOL_FIELD: public float32 b2EPCollider::m_radius [b2CollideEdge.cpp <217:10 217:17>]
SYMBOL_FIELD: public bool b2EPCollider::m_front [b2CollideEdge.cpp <218:7 218:13>]
SYMBOL_METHOD: public void b2EPCollider::b2EPCollider() [b2CollideEdge.cpp <194:8 <194:8 194:19> 194:19>]
SYMBOL_METHOD: public void b2EPCollider::b2EPCollider(const b2EPCollider &) [b2CollideEdge.cpp <194:8 <194:8 194:19> 194:19>]
SYMBOL_METHOD: public void b2EPCollider::b2EPCollider(b2EPCollider &&) [b2CollideEdge.cpp <194:8 <194:8 194:19> 194:19>]
REFERENCE_INCLUDE: b2CollideEdge.cpp -> b2Collision.h [b2CollideEdge.cpp <19:10 19:40>]
REFERENCE_MACRO_USAGE: b2Collision.h -> B2_COLLISION_H [b2Collision.h <19:9 19:22>]
REFERENCE_INCLUDE: b2Collision.h -> b2Math.h [b2Collision.h <22:10 22:32>]
REFERENCE_MACRO_USAGE: b2Math.h -> B2_MATH_H [b2Math.h <19:9 19:17>]
REFERENCE_INCLUDE: b2Math.h -> b2Settings.h [b2Math.h <22:10 22:36>]
REFERENCE_MACRO_USAGE: b2Settings.h -> B2_SETTINGS_H [b2Settings.h <19:9 19:21>]
REFERENCE_INCLUDE: b2Settings.h -> stddef.h [b2Settings.h <22:10 22:19>]
REFERENCE_INCLUDE: stddef.h -> corecrt.h [stddef.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt.h -> vcruntime.h [corecrt.h <10:10 10:22>]
REFERENCE_INCLUDE: vcruntime.h -> sal.h [vcruntime.h <47:10 47:16>]
REFERENCE_INCLUDE: sal.h -> concurrencysal.h [sal.h <2990:10 2990:27>]
REFERENCE_INCLUDE: vcruntime.h -> vadefs.h [vcruntime.h <48:10 48:19>]
REFERENCE_INCLUDE: b2Settings.h -> assert.h [b2Settings.h <23:10 23:19>]
REFERENCE_INCLUDE: assert.h -> corecrt.h [assert.h <12:10 12:20>]
REFERENCE_INCLUDE: b2Settings.h -> float.h [b2Settings.h <24:10 24:18>]
REFERENCE_INCLUDE: float.h -> corecrt.h [float.h <12:10 12:20>]
REFERENCE_MACRO_USAGE: b2Settings.h -> NDEBUG [b2Settings.h <26:14 26:19>]
REFERENCE_INCLUDE: b2Math.h -> math.h [b2Math.h <23:10 23:17>]
REFERENCE_INCLUDE: math.h -> corecrt.h [math.h <11:10 11:20>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Sqrt [b2Math.h <103:10 103:15>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2_epsilon [b2Math.h <117:16 117:25>]
REFERENCE_MACRO_USAGE: b2Settings.h -> FLT_EPSILON [b2Settings.h <43:21 43:31>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Atan2 [b2Math.h <329:10 329:16>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Assert [b2Math.h <709:2 709:9>]
REFERENCE_MACRO_USAGE: b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2_pi [b2Math.h <719:25 719:29>]
REFERENCE_INCLUDE: b2Collision.h -> limits.h [b2Collision.h <23:10 23:19>]
REFERENCE_INCLUDE: limits.h -> vcruntime.h [limits.h <11:10 11:22>]
REFERENCE_MACRO_USAGE: b2Collision.h -> UCHAR_MAX [b2Collision.h <34:30 34:38>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <102:25 102:44>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <121:16 121:35>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <122:22 122:41>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <136:43 136:62>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <136:86 136:105>]
REFERENCE_INCLUDE: b2CollideEdge.cpp -> b2CircleShape.h [b2CollideEdge.cpp <20:10 20:49>]
REFERENCE_MACRO_USAGE: b2CircleShape.h -> B2_CIRCLE_SHAPE_H [b2CircleShape.h <19:9 19:25>]
REFERENCE_INCLUDE: b2CircleShape.h -> b2Shape.h [b2CircleShape.h <22:10 22:43>]
REFERENCE_MACRO_USAGE: b2Shape.h -> B2_SHAPE_H [b2Shape.h <19:9 19:18>]
REFERENCE_INCLUDE: b2Shape.h -> b2BlockAllocator.h [b2Shape.h <22:10 22:42>]
REFERENCE_MACRO_USAGE: b2BlockAllocator.h -> B2_BLOCK_ALLOCATOR_H [b2BlockAllocator.h <19:9 19:28>]
REFERENCE_INCLUDE: b2BlockAllocator.h -> b2Settings.h [b2BlockAllocator.h <22:10 22:36>]
REFERENCE_INCLUDE: b2Shape.h -> b2Math.h [b2Shape.h <23:10 23:32>]
REFERENCE_INCLUDE: b2Shape.h -> b2Collision.h [b2Shape.h <24:10 24:40>]
REFERENCE_INCLUDE: b2CollideEdge.cpp -> b2EdgeShape.h [b2CollideEdge.cpp <21:10 21:47>]
REFERENCE_MACRO_USAGE: b2EdgeShape.h -> B2_EDGE_SHAPE_H [b2EdgeShape.h <19:9 19:23>]
REFERENCE_INCLUDE: b2EdgeShape.h -> b2Shape.h [b2EdgeShape.h <22:10 22:43>]
REFERENCE_MACRO_USAGE: b2EdgeShape.h -> b2_polygonRadius [b2EdgeShape.h <65:13 65:28>]
REFERENCE_MACRO_USAGE: b2Settings.h -> b2_linearSlop [b2Settings.h <81:35 81:47>]
REFERENCE_INCLUDE: b2CollideEdge.cpp -> b2PolygonShape.h [b2CollideEdge.cpp <22:10 22:50>]
REFERENCE_MACRO_USAGE: b2PolygonShape.h -> B2_POLYGON_SHAPE_H [b2PolygonShape.h <19:9 19:26>]
REFERENCE_INCLUDE: b2PolygonShape.h -> b2Shape.h [b2PolygonShape.h <22:10 22:43>]
REFERENCE_MACRO_USAGE: b2PolygonShape.h -> b2_maxPolygonVertices [b2PolygonShape.h <76:20 76:40>]
REFERENCE_MACRO_USAGE: b2PolygonShape.h -> b2_maxPolygonVertices [b2PolygonShape.h <77:19 77:39>]
REFERENCE_MACRO_USAGE: b2PolygonShape.h -> b2_polygonRadius [b2PolygonShape.h <84:13 84:28>]
REFERENCE_MACRO_USAGE: b2CollideEdge.cpp -> b2Assert [b2CollideEdge.cpp <127:2 127:9>]
REFERENCE_MACRO_USAGE: b2CollideEdge.cpp -> b2_maxPolygonVertices [b2CollideEdge.cpp <172:18 172:38>]
REFERENCE_MACRO_USAGE: b2CollideEdge.cpp -> b2_maxPolygonVertices [b2CollideEdge.cpp <173:17 173:37>]
REFERENCE_MACRO_USAGE: b2CollideEdge.cpp -> b2_maxManifoldPoints [b2CollideEdge.cpp <563:11 563:30>]
REFERENCE_MACRO_USAGE: b2CollideEdge.cpp -> b2_maxManifoldPoints [b2CollideEdge.cpp <571:11 571:30>]
REFERENCE_MACRO_USAGE: b2CollideEdge.cpp -> b2_maxManifoldPoints [b2CollideEdge.cpp <589:24 589:43>]
REFERENCE_MACRO_USAGE: b2CollideEdge.cpp -> FLT_MAX [b2CollideEdge.cpp <625:20 625:26>]
REFERENCE_MACRO_USAGE: b2CollideEdge.cpp -> FLT_MAX [b2CollideEdge.cpp <644:21 644:27>]
REFERENCE_MACRO_USAGE: b2CollideEdge.cpp -> b2_angularSlop [b2CollideEdge.cpp <668:45 668:58>]
REFERENCE_MACRO_USAGE: b2CollideEdge.cpp -> b2_angularSlop [b2CollideEdge.cpp <675:45 675:58>]
REFERENCE_MACRO_USAGE: b2Settings.h -> b2_pi [b2Settings.h <76:43 76:47>]
REFERENCE_TYPE_USAGE: int8 -> signed char [b2Settings.h <33:9 33:14>]
REFERENCE_TYPE_USAGE: int16 -> short [b2Settings.h <34:9 34:14>]
REFERENCE_TYPE_USAGE: int32 -> int [b2Settings.h <35:9 35:14>]
REFERENCE_TYPE_USAGE: uint8 -> unsigned char [b2Settings.h <36:9 36:16>]
REFERENCE_TYPE_USAGE: uint16 -> unsigned short [b2Settings.h <37:9 37:16>]
REFERENCE_TYPE_USAGE: uint32 -> unsigned int [b2Settings.h <38:9 38:16>]
REFERENCE_TYPE_USAGE: float32 -> float [b2Settings.h <39:9 39:13>]
REFERENCE_TYPE_USAGE: float64 -> double [b2Settings.h <40:9 40:14>]
REFERENCE_TYPE_USAGE: void * b2Alloc(int32) -> void [b2Settings.h <135:1 135:4>]
REFERENCE_TYPE_USAGE: void * b2Alloc(int32) -> int32 [b2Settings.h <135:15 135:19>]
REFERENCE_TYPE_USAGE: void b2Free(void *) -> void [b2Settings.h <138:1 138:4>]
REFERENCE_TYPE_USAGE: void b2Free(void *) -> void [b2Settings.h <138:13 138:16>]
REFERENCE_TYPE_USAGE: void b2Log(const char *) -> void [b2Settings.h <141:1 141:4>]
REFERENCE_TYPE_USAGE: void b2Log(const char *) -> char [b2Settings.h <141:18 141:21>]
REFERENCE_TYPE_USAGE: int32 b2Version::major -> int32 [b2Settings.h <147:2 147:6>]
REFERENCE_TYPE_USAGE: int32 b2Version::minor -> int32 [b2Settings.h <148:2 148:6>]
REFERENCE_TYPE_USAGE: int32 b2Version::revision -> int32 [b2Settings.h <149:2 149:6>]
REFERENCE_TYPE_USAGE: b2Version b2_version -> b2Version [b2Settings.h <153:8 153:16>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> bool [b2Math.h <26:8 26:11>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> float32 [b2Math.h <26:23 26:29>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> int32 [b2Math.h <28:2 28:6>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> int32 [b2Math.h <28:31 28:35>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <33:8 33:14>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <33:26 33:32>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <42:2 42:8>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x -> float32 [b2Math.h <37:3 37:9>]
REFERENCE_TYPE_USAGE: int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i -> int32 [b2Math.h <38:3 38:7>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> b2InvSqrt::anonymous union (b2Math.h<35:2>) [b2Math.h <35:2 35:6>]
REFERENCE_CALL: float32 b2InvSqrt(float32) -> void b2InvSqrt::anonymous union (b2Math.h<35:2>)::() [b2Math.h <39:4 39:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <41:10 41:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <44:14 44:14>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <43:10 43:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <43:36 43:36>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 [b2Math.h <59:9 59:15>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 [b2Math.h <59:22 59:28>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 b2Vec2::x [b2Math.h <59:37 59:37>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 b2Vec2::y [b2Math.h <59:45 59:45>]
REFERENCE_TYPE_USAGE: void b2Vec2::SetZero() -> void [b2Math.h <62:2 62:5>]
REFERENCE_USAGE: void b2Vec2::SetZero() -> float32 b2Vec2::x [b2Math.h <62:19 62:19>]
REFERENCE_USAGE: void b2Vec2::SetZero() -> float32 b2Vec2::y [b2Math.h <62:29 62:29>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> void [b2Math.h <65:2 65:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> float32 [b2Math.h <65:11 65:17>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> float32 [b2Math.h <65:23 65:29>]
REFERENCE_USAGE: void b2Vec2::Set(float32, float32) -> float32 b2Vec2::x [b2Math.h <65:37 65:37>]
REFERENCE_USAGE: void b2Vec2::Set(float32, float32) -> float32 b2Vec2::y [b2Math.h <65:45 65:45>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::operator-() const -> b2Vec2 [b2Math.h <68:2 68:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::operator-() const -> b2Vec2 [b2Math.h <68:30 68:35>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::b2Vec2() [b2Math.h <68:37 68:37>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::Set(float32, float32) [b2Math.h <68:42 68:44>]
REFERENCE_USAGE: b2Vec2 b2Vec2::operator-() const -> float32 b2Vec2::x [b2Math.h <68:47 68:47>]
REFERENCE_USAGE: b2Vec2 b2Vec2::operator-() const -> float32 b2Vec2::y [b2Math.h <68:51 68:51>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <68:62 68:62>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::operator()(int32) const -> float32 [b2Math.h <71:2 71:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::operator()(int32) const -> int32 [b2Math.h <71:23 71:27>]
REFERENCE_USAGE: float32 b2Vec2::operator()(int32) const -> float32 b2Vec2::x [b2Math.h <73:12 73:12>]
REFERENCE_TYPE_USAGE: float32 & b2Vec2::operator()(int32) -> float32 [b2Math.h <77:2 77:8>]
REFERENCE_TYPE_USAGE: float32 & b2Vec2::operator()(int32) -> int32 [b2Math.h <77:24 77:28>]
REFERENCE_USAGE: float32 & b2Vec2::operator()(int32) -> float32 b2Vec2::x [b2Math.h <79:12 79:12>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> void [b2Math.h <83:2 83:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> b2Vec2 [b2Math.h <83:26 83:31>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <85:3 85:3>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <85:10 85:10>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <85:13 85:13>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <85:20 85:20>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> void [b2Math.h <89:2 89:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> b2Vec2 [b2Math.h <89:26 89:31>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <91:3 91:3>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <91:10 91:10>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <91:13 91:13>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <91:20 91:20>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator*=(float32) -> void [b2Math.h <95:2 95:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator*=(float32) -> float32 [b2Math.h <95:20 95:26>]
REFERENCE_USAGE: void b2Vec2::operator*=(float32) -> float32 b2Vec2::x [b2Math.h <97:3 97:3>]
REFERENCE_USAGE: void b2Vec2::operator*=(float32) -> float32 b2Vec2::y [b2Math.h <97:11 97:11>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Length() const -> float32 [b2Math.h <101:2 101:8>]
REFERENCE_CALL: float32 b2Vec2::Length() const -> float sqrtf(float) [b2Math.h <103:10 103:15>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::x [b2Math.h <103:17 103:17>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::x [b2Math.h <103:21 103:21>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::y [b2Math.h <103:25 103:25>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::y [b2Math.h <103:29 103:29>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 [b2Math.h <108:2 108:8>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::x [b2Math.h <110:10 110:10>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::x [b2Math.h <110:14 110:14>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::y [b2Math.h <110:18 110:18>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::y [b2Math.h <110:22 110:22>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <114:2 114:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <116:3 116:9>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <121:3 121:9>]
REFERENCE_CALL: float32 b2Vec2::Normalize() -> float32 b2Vec2::Length() const [b2Math.h <116:20 116:25>]
REFERENCE_USAGE: float32 b2Vec2::Normalize() -> float32 b2Vec2::x [b2Math.h <122:3 122:3>]
REFERENCE_USAGE: float32 b2Vec2::Normalize() -> float32 b2Vec2::y [b2Math.h <123:3 123:3>]
REFERENCE_TYPE_USAGE: bool b2Vec2::IsValid() const -> bool [b2Math.h <129:2 129:5>]
REFERENCE_CALL: bool b2Vec2::IsValid() const -> bool b2IsValid(float32) [b2Math.h <131:10 131:18>]
REFERENCE_CALL: bool b2Vec2::IsValid() const -> bool b2IsValid(float32) [b2Math.h <131:26 131:34>]
REFERENCE_USAGE: bool b2Vec2::IsValid() const -> float32 b2Vec2::x [b2Math.h <131:20 131:20>]
REFERENCE_USAGE: bool b2Vec2::IsValid() const -> float32 b2Vec2::y [b2Math.h <131:36 131:36>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::Skew() const -> b2Vec2 [b2Math.h <135:2 135:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::Skew() const -> b2Vec2 [b2Math.h <137:10 137:15>]
REFERENCE_CALL: b2Vec2 b2Vec2::Skew() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <137:10 137:15>]
REFERENCE_USAGE: b2Vec2 b2Vec2::Skew() const -> float32 b2Vec2::y [b2Math.h <137:18 137:18>]
REFERENCE_USAGE: b2Vec2 b2Vec2::Skew() const -> float32 b2Vec2::x [b2Math.h <137:21 137:21>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::x -> float32 [b2Math.h <140:2 140:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::y -> float32 [b2Math.h <140:2 140:8>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> b2Vec2 [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> b2Vec2 [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:9 150:15>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:22 150:28>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:35 150:41>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::x [b2Math.h <150:50 150:50>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::y [b2Math.h <150:58 150:58>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::z [b2Math.h <150:66 150:66>]
REFERENCE_TYPE_USAGE: void b2Vec3::SetZero() -> void [b2Math.h <153:2 153:5>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::x [b2Math.h <153:19 153:19>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::y [b2Math.h <153:29 153:29>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::z [b2Math.h <153:39 153:39>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> void [b2Math.h <156:2 156:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:11 156:17>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:23 156:29>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:35 156:41>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::x [b2Math.h <156:49 156:49>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::y [b2Math.h <156:57 156:57>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::z [b2Math.h <156:65 156:65>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Vec3::operator-() const -> b2Vec3 [b2Math.h <159:2 159:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Vec3::operator-() const -> b2Vec3 [b2Math.h <159:30 159:35>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::b2Vec3() [b2Math.h <159:37 159:37>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::Set(float32, float32, float32) [b2Math.h <159:42 159:44>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::x [b2Math.h <159:47 159:47>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::y [b2Math.h <159:51 159:51>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::z [b2Math.h <159:55 159:55>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::b2Vec3(b2Vec3 &&) [b2Math.h <159:66 159:66>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> void [b2Math.h <162:2 162:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> b2Vec3 [b2Math.h <162:26 162:31>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <164:3 164:3>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <164:10 164:10>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <164:13 164:13>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <164:20 164:20>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <164:23 164:23>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <164:30 164:30>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> void [b2Math.h <168:2 168:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> b2Vec3 [b2Math.h <168:26 168:31>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <170:3 170:3>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <170:10 170:10>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <170:13 170:13>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <170:20 170:20>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <170:23 170:23>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <170:30 170:30>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator*=(float32) -> void [b2Math.h <174:2 174:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator*=(float32) -> float32 [b2Math.h <174:20 174:26>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::x [b2Math.h <176:3 176:3>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::y [b2Math.h <176:11 176:11>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::z [b2Math.h <176:19 176:19>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::x -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::y -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::z -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::x [b2Math.h <144:8 144:13>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> b2Vec3 [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::y [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::z [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Mat22::b2Mat22() -> b2Vec2 b2Mat22::ex [b2Math.h <186:2 186:8>]
REFERENCE_CALL: void b2Mat22::b2Mat22() -> void b2Vec2::b2Vec2() [b2Math.h <186:2 186:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22() -> b2Vec2 b2Mat22::ey [b2Math.h <186:2 186:8>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <189:16 189:21>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <189:34 189:39>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <191:3 191:4>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2() [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <192:3 192:4>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <191:6 191:6>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <192:6 192:6>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:10 196:16>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:23 196:29>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:36 196:42>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:49 196:55>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <198:3 198:4>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <198:15 198:16>]
REFERENCE_CALL: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> void b2Vec2::b2Vec2() [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <199:3 199:4>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <199:15 199:16>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::x [b2Math.h <198:6 198:6>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::x [b2Math.h <199:6 199:6>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::y [b2Math.h <198:18 198:18>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::y [b2Math.h <199:18 199:18>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> void [b2Math.h <203:2 203:5>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <203:17 203:22>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <203:35 203:40>]
REFERENCE_CALL: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <205:6 205:6>]
REFERENCE_CALL: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <206:6 206:6>]
REFERENCE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <205:3 205:4>]
REFERENCE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <206:3 206:4>]
REFERENCE_TYPE_USAGE: void b2Mat22::SetIdentity() -> void [b2Math.h <210:2 210:5>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::x [b2Math.h <212:6 212:6>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::x [b2Math.h <212:19 212:19>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ex [b2Math.h <212:3 212:4>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ex [b2Math.h <213:3 213:4>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ey [b2Math.h <212:16 212:17>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ey [b2Math.h <213:16 213:17>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::y [b2Math.h <213:6 213:6>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::y [b2Math.h <213:19 213:19>]
REFERENCE_TYPE_USAGE: void b2Mat22::SetZero() -> void [b2Math.h <217:2 217:5>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::x [b2Math.h <219:6 219:6>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::x [b2Math.h <219:19 219:19>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ex [b2Math.h <219:3 219:4>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ex [b2Math.h <220:3 220:4>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ey [b2Math.h <219:16 219:17>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ey [b2Math.h <220:16 220:17>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::y [b2Math.h <220:6 220:6>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::y [b2Math.h <220:19 220:19>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Mat22 [b2Math.h <223:2 223:8>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Mat22 [b2Math.h <226:3 226:9>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 [b2Math.h <225:3 225:9>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 [b2Math.h <227:3 227:9>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <225:18 225:18>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <225:28 225:28>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <232:8 232:8>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <232:27 232:27>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <225:15 225:16>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <225:35 225:36>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <232:5 232:6>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <233:5 233:6>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <225:25 225:26>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <225:45 225:46>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <232:24 232:25>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <233:24 233:25>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <225:38 225:38>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <225:48 225:48>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <233:8 233:8>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <233:27 233:27>]
REFERENCE_CALL: b2Mat22 b2Mat22::GetInverse() const -> void b2Mat22::b2Mat22() [b2Math.h <226:11 226:11>]
REFERENCE_CALL: b2Mat22 b2Mat22::GetInverse() const -> void b2Mat22::b2Mat22(b2Mat22 &&) [b2Math.h <234:10 234:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <239:2 239:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <239:21 239:26>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <247:3 247:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 [b2Math.h <241:3 241:9>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 [b2Math.h <242:3 242:9>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <241:20 241:20>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <241:32 241:32>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <248:5 248:5>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <248:24 248:24>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <249:36 249:36>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ex [b2Math.h <241:17 241:18>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ex [b2Math.h <241:41 241:42>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ey [b2Math.h <241:29 241:30>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ey [b2Math.h <241:53 241:54>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <241:44 241:44>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <241:56 241:56>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <248:36 248:36>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <249:5 249:5>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <249:24 249:24>]
REFERENCE_CALL: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> void b2Vec2::b2Vec2() [b2Math.h <247:10 247:10>]
REFERENCE_CALL: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <250:10 250:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::ex -> b2Vec2 [b2Math.h <253:2 253:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::ey -> b2Vec2 [b2Math.h <253:2 253:7>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Vec2 b2Mat22::ex [b2Math.h <183:8 183:14>]
REFERENCE_CALL: void b2Mat22::b2Mat22(b2Mat22 &&) -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <183:8 183:14>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Mat22 [b2Math.h <183:8 183:14>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Vec2 b2Mat22::ey [b2Math.h <183:8 183:14>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ex [b2Math.h <260:2 260:8>]
REFERENCE_CALL: void b2Mat33::b2Mat33() -> void b2Vec3::b2Vec3() [b2Math.h <260:2 260:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ey [b2Math.h <260:2 260:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ez [b2Math.h <260:2 260:8>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:16 263:21>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:34 263:39>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:52 263:57>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <265:3 265:4>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3() [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <266:3 266:4>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <267:3 267:4>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <265:6 265:6>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <266:6 266:6>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <267:6 267:6>]
REFERENCE_TYPE_USAGE: void b2Mat33::SetZero() -> void [b2Math.h <271:2 271:5>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <273:6 273:12>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <274:6 274:12>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <275:6 275:12>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ex [b2Math.h <273:3 273:4>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ey [b2Math.h <274:3 274:4>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ez [b2Math.h <275:3 275:4>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const -> b2Vec3 [b2Math.h <280:2 280:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const -> b2Vec3 [b2Math.h <280:23 280:28>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const -> b2Vec2 [b2Math.h <285:2 285:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const -> b2Vec2 [b2Math.h <285:23 285:28>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetInverse22(b2Mat33 *) const -> void [b2Math.h <289:2 289:5>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetInverse22(b2Mat33 *) const -> b2Mat33 [b2Math.h <289:20 289:26>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetSymInverse33(b2Mat33 *) const -> void [b2Math.h <293:2 293:5>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetSymInverse33(b2Mat33 *) const -> b2Mat33 [b2Math.h <293:23 293:29>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ex -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ey -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ez -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: void b2Rot::b2Rot(float32) -> float32 [b2Math.h <304:17 304:23>]
REFERENCE_USAGE: void b2Rot::b2Rot(float32) -> float32 b2Rot::s [b2Math.h <307:3 307:3>]
REFERENCE_CALL: void b2Rot::b2Rot(float32) -> float sinf(float) [b2Math.h <307:7 307:10>]
REFERENCE_USAGE: void b2Rot::b2Rot(float32) -> float32 b2Rot::c [b2Math.h <308:3 308:3>]
REFERENCE_CALL: void b2Rot::b2Rot(float32) -> float cosf(float) [b2Math.h <308:7 308:10>]
REFERENCE_TYPE_USAGE: void b2Rot::Set(float32) -> void [b2Math.h <312:2 312:5>]
REFERENCE_TYPE_USAGE: void b2Rot::Set(float32) -> float32 [b2Math.h <312:11 312:17>]
REFERENCE_USAGE: void b2Rot::Set(float32) -> float32 b2Rot::s [b2Math.h <315:3 315:3>]
REFERENCE_CALL: void b2Rot::Set(float32) -> float sinf(float) [b2Math.h <315:7 315:10>]
REFERENCE_USAGE: void b2Rot::Set(float32) -> float32 b2Rot::c [b2Math.h <316:3 316:3>]
REFERENCE_CALL: void b2Rot::Set(float32) -> float cosf(float) [b2Math.h <316:7 316:10>]
REFERENCE_TYPE_USAGE: void b2Rot::SetIdentity() -> void [b2Math.h <320:2 320:5>]
REFERENCE_USAGE: void b2Rot::SetIdentity() -> float32 b2Rot::s [b2Math.h <322:3 322:3>]
REFERENCE_USAGE: void b2Rot::SetIdentity() -> float32 b2Rot::c [b2Math.h <323:3 323:3>]
REFERENCE_TYPE_USAGE: float32 b2Rot::GetAngle() const -> float32 [b2Math.h <327:2 327:8>]
REFERENCE_CALL: float32 b2Rot::GetAngle() const -> float atan2f(float, float) [b2Math.h <329:10 329:16>]
REFERENCE_USAGE: float32 b2Rot::GetAngle() const -> float32 b2Rot::s [b2Math.h <329:18 329:18>]
REFERENCE_USAGE: float32 b2Rot::GetAngle() const -> float32 b2Rot::c [b2Math.h <329:21 329:21>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> b2Vec2 [b2Math.h <333:2 333:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> b2Vec2 [b2Math.h <335:10 335:15>]
REFERENCE_CALL: b2Vec2 b2Rot::GetXAxis() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <335:10 335:15>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> float32 b2Rot::c [b2Math.h <335:17 335:17>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> float32 b2Rot::s [b2Math.h <335:20 335:20>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> b2Vec2 [b2Math.h <339:2 339:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> b2Vec2 [b2Math.h <341:10 341:15>]
REFERENCE_CALL: b2Vec2 b2Rot::GetYAxis() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <341:10 341:15>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> float32 b2Rot::s [b2Math.h <341:18 341:18>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> float32 b2Rot::c [b2Math.h <341:21 341:21>]
REFERENCE_TYPE_USAGE: float32 b2Rot::s -> float32 [b2Math.h <345:2 345:8>]
REFERENCE_TYPE_USAGE: float32 b2Rot::c -> float32 [b2Math.h <345:2 345:8>]
REFERENCE_USAGE: void b2Rot::b2Rot(const b2Rot &) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(const b2Rot &) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_TYPE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> b2Rot [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_TYPE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> b2Rot [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Transform::b2Transform() -> b2Vec2 b2Transform::p [b2Math.h <353:2 353:12>]
REFERENCE_CALL: void b2Transform::b2Transform() -> void b2Vec2::b2Vec2() [b2Math.h <353:2 353:12>]
REFERENCE_USAGE: void b2Transform::b2Transform() -> b2Rot b2Transform::q [b2Math.h <353:2 353:12>]
REFERENCE_CALL: void b2Transform::b2Transform() -> void b2Rot::b2Rot() [b2Math.h <353:2 353:12>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Vec2 [b2Math.h <356:20 356:25>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Rot [b2Math.h <356:44 356:48>]
REFERENCE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Vec2 b2Transform::p [b2Math.h <356:63 356:63>]
REFERENCE_CALL: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Math.h <356:63 356:63>]
REFERENCE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Rot b2Transform::q [b2Math.h <356:76 356:76>]
REFERENCE_CALL: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> void b2Rot::b2Rot(const b2Rot &) [b2Math.h <356:76 356:76>]
REFERENCE_TYPE_USAGE: void b2Transform::SetIdentity() -> void [b2Math.h <359:2 359:5>]
REFERENCE_CALL: void b2Transform::SetIdentity() -> void b2Vec2::SetZero() [b2Math.h <361:5 361:11>]
REFERENCE_USAGE: void b2Transform::SetIdentity() -> b2Vec2 b2Transform::p [b2Math.h <361:3 361:3>]
REFERENCE_CALL: void b2Transform::SetIdentity() -> void b2Rot::SetIdentity() [b2Math.h <362:5 362:15>]
REFERENCE_USAGE: void b2Transform::SetIdentity() -> b2Rot b2Transform::q [b2Math.h <362:3 362:3>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> void [b2Math.h <366:2 366:5>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <366:17 366:22>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> float32 [b2Math.h <366:35 366:41>]
REFERENCE_CALL: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <368:5 368:5>]
REFERENCE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 b2Transform::p [b2Math.h <368:3 368:3>]
REFERENCE_CALL: void b2Transform::Set(const b2Vec2 &, float32) -> void b2Rot::Set(float32) [b2Math.h <369:5 369:7>]
REFERENCE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Rot b2Transform::q [b2Math.h <369:3 369:3>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Transform::p -> b2Vec2 [b2Math.h <372:2 372:7>]
REFERENCE_TYPE_USAGE: b2Rot b2Transform::q -> b2Rot [b2Math.h <373:2 373:6>]
REFERENCE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Vec2 b2Transform::p [b2Math.h <350:8 350:18>]
REFERENCE_CALL: void b2Transform::b2Transform(b2Transform &&) -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <350:8 350:18>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Transform [b2Math.h <350:8 350:18>]
REFERENCE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Rot b2Transform::q [b2Math.h <350:8 350:18>]
REFERENCE_CALL: void b2Transform::b2Transform(b2Transform &&) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <350:8 350:18>]
REFERENCE_CALL: b2Transform & b2Transform::operator=(b2Transform &&) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <350:8 350:18>]
REFERENCE_USAGE: b2Transform & b2Transform::operator=(b2Transform &&) -> b2Vec2 b2Transform::p [b2Math.h <350:8 350:18>]
REFERENCE_TYPE_USAGE: b2Transform & b2Transform::operator=(b2Transform &&) -> b2Transform [b2Math.h <350:8 350:18>]
REFERENCE_CALL: b2Transform & b2Transform::operator=(b2Transform &&) -> b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <350:8 350:18>]
REFERENCE_USAGE: b2Transform & b2Transform::operator=(b2Transform &&) -> b2Rot b2Transform::q [b2Math.h <350:8 350:18>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> void [b2Math.h <384:2 384:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> void [b2Math.h <697:8 697:11>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Transform [b2Math.h <384:20 384:30>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Transform [b2Math.h <697:35 697:45>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <384:38 384:44>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <697:52 697:58>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <700:2 700:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <388:2 388:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <707:8 707:11>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <709:2 709:9>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <388:15 388:21>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <707:30 707:36>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <710:2 710:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> void [b2Math.h <391:2 391:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> void [b2Math.h <717:8 717:11>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::localCenter -> b2Vec2 [b2Math.h <393:2 393:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::c0 -> b2Vec2 [b2Math.h <394:2 394:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::c -> b2Vec2 [b2Math.h <394:2 394:7>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::a0 -> float32 [b2Math.h <395:2 395:8>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::a -> float32 [b2Math.h <395:2 395:8>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::alpha0 -> float32 [b2Math.h <399:2 399:8>]
REFERENCE_TYPE_USAGE: const b2Vec2 b2Vec2_zero -> b2Vec2 [b2Math.h <403:14 403:19>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <406:8 406:14>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <406:28 406:33>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <406:45 406:50>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <408:11 408:11>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <408:17 408:17>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <408:23 408:23>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <408:29 408:29>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <412:8 412:14>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <412:30 412:35>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <412:47 412:52>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <414:11 414:11>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <414:29 414:29>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <414:17 414:17>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <414:23 414:23>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <419:8 419:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <419:29 419:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <421:9 421:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 [b2Math.h <419:40 419:46>]
REFERENCE_CALL: b2Vec2 b2Cross(const b2Vec2 &, float32) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <421:9 421:14>]
REFERENCE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 b2Vec2::y [b2Math.h <421:22 421:22>]
REFERENCE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 b2Vec2::x [b2Math.h <421:32 421:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <426:8 426:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <426:40 426:45>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <428:9 428:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 [b2Math.h <426:23 426:29>]
REFERENCE_CALL: b2Vec2 b2Cross(float32, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <428:9 428:14>]
REFERENCE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <428:23 428:23>]
REFERENCE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <428:32 428:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <433:8 433:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <433:45 433:50>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <435:9 435:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Mat22 [b2Math.h <433:27 433:33>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <435:9 435:14>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:21 435:21>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:27 435:27>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:36 435:36>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:56 435:56>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <435:18 435:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <435:47 435:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <435:33 435:34>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <435:62 435:63>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:42 435:42>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:50 435:50>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:65 435:65>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:71 435:71>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <440:8 440:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <440:46 440:51>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <442:9 442:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Mat22 [b2Math.h <440:28 440:34>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <442:9 442:14>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <442:16 442:20>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <442:32 442:36>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <442:27 442:28>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <442:43 442:44>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:8 446:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:33 446:38>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:50 446:55>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <448:9 448:14>]
REFERENCE_CALL: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <448:9 448:14>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <448:18 448:18>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <448:24 448:24>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <448:29 448:29>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <448:35 448:35>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:8 452:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:33 452:38>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:50 452:55>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <454:9 454:14>]
REFERENCE_CALL: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <454:9 454:14>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <454:18 454:18>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <454:24 454:24>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <454:29 454:29>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <454:35 454:35>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <457:8 457:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <457:44 457:49>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <459:9 459:14>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 [b2Math.h <457:27 457:33>]
REFERENCE_CALL: b2Vec2 operator*(float32, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <459:9 459:14>]
REFERENCE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <459:22 459:22>]
REFERENCE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <459:31 459:31>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> bool [b2Math.h <462:8 462:11>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <462:32 462:37>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <462:49 462:54>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <464:11 464:11>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <464:18 464:18>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <464:25 464:25>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <464:32 464:32>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> bool [b2Math.h <467:8 467:11>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <467:32 467:37>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <467:49 467:54>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <469:11 469:11>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <469:18 469:18>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <469:25 469:25>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <469:32 469:32>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <472:8 472:14>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <472:33 472:38>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <472:50 472:55>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <474:2 474:7>]
REFERENCE_CALL: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <474:15 474:15>]
REFERENCE_CALL: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::Length() const [b2Math.h <475:11 475:16>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <478:8 478:14>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <478:40 478:45>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <478:57 478:62>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <480:2 480:7>]
REFERENCE_CALL: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <480:15 480:15>]
REFERENCE_CALL: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <481:9 481:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <484:8 484:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <484:44 484:49>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <486:9 486:14>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 [b2Math.h <484:27 484:33>]
REFERENCE_CALL: b2Vec3 operator*(float32, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <486:9 486:14>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <486:22 486:22>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <486:31 486:31>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <486:40 486:40>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:8 490:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:33 490:38>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:50 490:55>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <492:9 492:14>]
REFERENCE_CALL: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <492:9 492:14>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <492:18 492:18>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <492:24 492:24>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <492:29 492:29>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <492:35 492:35>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <492:40 492:40>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <492:46 492:46>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:8 496:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:33 496:38>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:50 496:55>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <498:9 498:14>]
REFERENCE_CALL: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <498:9 498:14>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <498:18 498:18>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <498:24 498:24>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <498:29 498:29>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <498:35 498:35>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <498:40 498:40>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <498:46 498:46>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 [b2Math.h <502:8 502:14>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <502:28 502:33>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <502:45 502:50>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <504:11 504:11>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <504:17 504:17>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <504:23 504:23>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <504:29 504:29>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <504:35 504:35>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <504:41 504:41>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:8 508:13>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:29 508:34>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:46 508:51>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <510:9 510:14>]
REFERENCE_CALL: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <510:9 510:14>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:18 510:18>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:36 510:36>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:70 510:70>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:76 510:76>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:24 510:24>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:30 510:30>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:41 510:41>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:59 510:59>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:47 510:47>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:53 510:53>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:64 510:64>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:82 510:82>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:8 513:14>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:34 513:40>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:52 513:58>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <515:9 515:15>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:9 515:15>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:22 515:22>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:35 515:35>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <515:19 515:20>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <515:26 515:27>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <515:32 515:33>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <515:39 515:40>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:8 519:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:28 519:34>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:46 519:52>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <521:9 521:15>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <521:9 521:15>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <521:17 521:21>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <521:33 521:37>]
REFERENCE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <521:28 521:29>]
REFERENCE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <521:44 521:45>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:8 525:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:29 525:35>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:47 525:53>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <529:9 529:15>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 [b2Math.h <527:2 527:7>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 [b2Math.h <528:2 528:7>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <527:9 527:10>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <528:9 528:10>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <527:12 527:16>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <527:31 527:35>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <528:12 528:16>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <528:31 528:35>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:20 527:21>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:26 527:27>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:45 527:46>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <528:20 528:21>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <527:39 527:40>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:26 528:27>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:39 528:40>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:45 528:46>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <529:9 529:15>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <533:8 533:13>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <533:45 533:50>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Mat33 [b2Math.h <533:27 533:33>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <535:20 535:20>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <535:33 535:33>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:13 535:13>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:26 535:26>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:39 535:39>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <535:11 535:11>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <535:17 535:18>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <535:24 535:24>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <535:30 535:31>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <535:37 535:37>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <535:43 535:44>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <539:8 539:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <539:47 539:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <541:9 541:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Mat33 [b2Math.h <539:29 539:35>]
REFERENCE_CALL: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <541:9 541:14>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::x [b2Math.h <541:21 541:21>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::x [b2Math.h <541:36 541:36>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ex [b2Math.h <541:18 541:19>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ex [b2Math.h <541:47 541:48>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <541:27 541:27>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <541:56 541:56>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ey [b2Math.h <541:33 541:34>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ey [b2Math.h <541:62 541:63>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <541:42 541:42>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <541:71 541:71>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::y [b2Math.h <541:50 541:50>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::y [b2Math.h <541:65 541:65>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:8 545:12>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:26 545:30>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:42 545:46>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <551:2 551:6>]
REFERENCE_CALL: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot() [b2Math.h <551:8 551:9>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:5 552:5>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:11 552:11>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:29 552:29>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <553:23 553:23>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <553:29 553:29>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <552:17 552:17>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <552:23 552:23>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:5 553:5>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:11 553:11>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:17 553:17>]
REFERENCE_CALL: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <554:9 554:10>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:8 558:12>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:27 558:31>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:43 558:47>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <564:2 564:6>]
REFERENCE_CALL: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot() [b2Math.h <564:8 564:9>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:5 565:5>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:17 565:17>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:23 565:23>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <566:23 566:23>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <566:29 566:29>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <565:11 565:11>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <565:29 565:29>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:5 566:5>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:11 566:11>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:17 566:17>]
REFERENCE_CALL: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <567:9 567:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <571:8 571:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <571:43 571:48>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <573:9 573:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Rot [b2Math.h <571:27 571:31>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <573:9 573:14>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <573:18 573:18>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <573:53 573:53>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <573:24 573:24>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <573:47 573:47>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <573:30 573:30>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <573:41 573:41>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <573:36 573:36>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <573:59 573:59>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <577:8 577:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <577:44 577:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <579:9 579:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Rot [b2Math.h <577:28 577:32>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <579:9 579:14>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <579:18 579:18>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <579:54 579:54>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <579:24 579:24>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <579:48 579:48>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <579:30 579:30>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <579:42 579:42>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <579:36 579:36>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <579:60 579:60>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <582:8 582:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <582:49 582:54>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <587:9 587:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Transform [b2Math.h <582:27 582:37>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <584:2 584:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <585:2 585:8>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <584:19 584:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <585:33 585:33>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <584:17 584:17>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <584:31 584:31>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <585:17 585:17>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <585:31 585:31>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <584:25 584:25>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <584:48 584:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <585:25 585:25>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <584:33 584:33>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <585:19 585:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <584:39 584:39>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <585:39 585:39>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <585:48 585:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <584:46 584:46>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <585:46 585:46>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <587:9 587:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <590:8 590:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <590:50 590:55>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <597:9 597:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Transform [b2Math.h <590:28 590:38>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <592:2 592:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <593:2 593:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <594:2 594:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <595:2 595:8>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <592:17 592:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <592:25 592:25>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <592:23 592:23>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <593:23 593:23>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <593:17 593:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <593:25 593:25>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <594:19 594:19>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <595:33 595:33>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <594:17 594:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <594:30 594:30>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <595:18 595:18>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <595:31 595:31>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <594:32 594:32>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <595:20 595:20>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <597:9 597:14>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:8 602:18>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:32 602:42>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:54 602:64>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <604:2 604:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform() [b2Math.h <604:14 604:14>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <605:6 605:6>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:4 605:4>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:16 605:16>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:21 605:21>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <606:16 606:16>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Mul(const b2Rot &, const b2Rot &) [b2Math.h <605:8 605:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <606:6 606:6>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:4 606:4>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:21 606:21>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:28 606:28>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <606:24 606:24>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <606:8 606:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform(b2Transform &&) [b2Math.h <607:9 607:9>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:8 612:18>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:33 612:43>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:55 612:65>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <614:2 614:12>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform() [b2Math.h <614:14 614:14>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <615:6 615:6>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:4 615:4>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:17 615:17>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:22 615:22>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <616:17 616:17>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2MulT(const b2Rot &, const b2Rot &) [b2Math.h <615:8 615:13>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <616:6 616:6>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:4 616:4>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:22 616:22>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:28 616:28>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2Math.h <616:8 616:13>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <616:24 616:24>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform(b2Transform &&) [b2Math.h <617:9 617:9>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Abs<float>(float) -> T b2Abs<typename T>(T) [b2Math.h <621:10 621:14>]
REFERENCE_TYPE_USAGE: float b2Abs<float>(float) -> float [b2Math.h <621:8 621:8>]
REFERENCE_TYPE_USAGE: float b2Abs<float>(float) -> float [b2Math.h <621:16 621:16>]
REFERENCE_TYPE_USAGE: float b2Abs<float>(float) -> float [b2Math.h <623:13 623:13>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Abs<b2Vec2>(b2Vec2) -> T b2Abs<typename T>(T) [b2Math.h <621:10 621:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs<b2Vec2>(b2Vec2) -> b2Vec2 [b2Math.h <621:8 621:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs<b2Vec2>(b2Vec2) -> b2Vec2 [b2Math.h <621:16 621:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <626:8 626:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <626:27 626:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <628:9 628:14>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <628:9 628:14>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> float b2Abs<float>(float) [b2Math.h <628:16 628:20>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> float b2Abs<float>(float) [b2Math.h <628:28 628:32>]
REFERENCE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <628:24 628:24>]
REFERENCE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <628:36 628:36>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <631:8 631:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <631:28 631:34>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <633:9 633:15>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <633:9 633:15>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <633:17 633:21>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <633:30 633:34>]
REFERENCE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <633:25 633:26>]
REFERENCE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <633:38 633:39>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Min<float>(float, float) -> T b2Min<typename T>(T, T) [b2Math.h <637:10 637:14>]
REFERENCE_TYPE_USAGE: float b2Min<float>(float, float) -> float [b2Math.h <637:8 637:8>]
REFERENCE_TYPE_USAGE: float b2Min<float>(float, float) -> float [b2Math.h <637:16 637:16>]
REFERENCE_TYPE_USAGE: float b2Min<float>(float, float) -> float [b2Math.h <637:21 637:21>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> T b2Min<typename T>(T, T) [b2Math.h <637:10 637:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <637:8 637:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <637:16 637:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <637:21 637:21>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:8 642:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:27 642:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:44 642:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <644:9 644:14>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <644:9 644:14>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float b2Min<float>(float, float) [b2Math.h <644:16 644:20>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float b2Min<float>(float, float) [b2Math.h <644:33 644:37>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <644:24 644:24>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <644:29 644:29>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <644:41 644:41>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <644:46 644:46>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Max<float>(float, float) -> T b2Max<typename T>(T, T) [b2Math.h <648:10 648:14>]
REFERENCE_TYPE_USAGE: float b2Max<float>(float, float) -> float [b2Math.h <648:8 648:8>]
REFERENCE_TYPE_USAGE: float b2Max<float>(float, float) -> float [b2Math.h <648:16 648:16>]
REFERENCE_TYPE_USAGE: float b2Max<float>(float, float) -> float [b2Math.h <648:21 648:21>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> T b2Max<typename T>(T, T) [b2Math.h <648:10 648:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <648:8 648:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <648:16 648:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <648:21 648:21>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:8 653:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:27 653:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:44 653:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <655:9 655:14>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <655:9 655:14>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float b2Max<float>(float, float) [b2Math.h <655:16 655:20>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float b2Max<float>(float, float) [b2Math.h <655:33 655:37>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <655:24 655:24>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <655:29 655:29>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <655:41 655:41>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <655:46 655:46>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:8 664:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:29 664:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:46 664:51>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:65 664:70>]
REFERENCE_CALL: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Math.h <666:9 666:13>]
REFERENCE_CALL: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Math.h <666:20 666:24>]
REFERENCE_TYPE_USAGE: void b2Swap<typename T>(T &, T &) -> void [b2Math.h <669:29 669:32>]
REFERENCE_TYPE_USAGE: uint32 b2NextPowerOfTwo(uint32) -> uint32 [b2Math.h <681:8 681:13>]
REFERENCE_TYPE_USAGE: uint32 b2NextPowerOfTwo(uint32) -> uint32 [b2Math.h <681:32 681:37>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> bool [b2Math.h <691:8 691:11>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> bool [b2Math.h <693:2 693:5>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> uint32 [b2Math.h <691:28 691:33>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <699:8 699:8>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Transform::p [b2Math.h <699:6 699:6>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Transform::p [b2Math.h <704:6 704:6>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <699:29 699:29>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <699:24 699:24>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <699:36 699:36>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::c0 [b2Math.h <699:26 699:27>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::c [b2Math.h <699:38 699:38>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 b2Sweep::a0 [b2Math.h <700:34 700:35>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 b2Sweep::a [b2Math.h <700:46 700:46>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> void b2Rot::Set(float32) [b2Math.h <701:8 701:10>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Rot b2Transform::q [b2Math.h <701:6 701:6>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Rot b2Transform::q [b2Math.h <704:21 704:21>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> void b2Vec2::operator-=(const b2Vec2 &) [b2Math.h <704:8 704:9>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <704:11 704:15>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::localCenter [b2Math.h <704:24 704:34>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <709:11 709:16>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <710:26 710:31>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <710:44 710:49>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <713:2 713:7>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Math.h <709:2 709:9>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> unsigned int [b2Math.h <709:2 709:9>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Math.h <711:5 711:6>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c0 [b2Math.h <711:2 711:3>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c0 [b2Math.h <711:20 711:21>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <711:13 711:13>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <711:18 711:18>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c [b2Math.h <711:16 711:16>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a0 [b2Math.h <712:2 712:3>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a0 [b2Math.h <712:20 712:21>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a [b2Math.h <712:16 712:16>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> float32 [b2Math.h <719:2 719:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> float32 [b2Math.h <720:2 720:8>]
REFERENCE_CALL: void b2Sweep::Normalize() -> float floorf(float) [b2Math.h <720:23 720:28>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a0 [b2Math.h <720:30 720:31>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a0 [b2Math.h <721:2 721:3>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a [b2Math.h <722:2 722:2>]
REFERENCE_TYPE_USAGE: const uint8 b2_nullFeature -> uint8 [b2Collision.h <34:7 34:11>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::indexA -> uint8 [b2Collision.h <46:2 46:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::indexB -> uint8 [b2Collision.h <47:2 47:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::typeA -> uint8 [b2Collision.h <48:2 48:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::typeB -> uint8 [b2Collision.h <49:2 49:6>]
REFERENCE_USAGE: b2ContactFeature & b2ContactFeature::operator=(const b2ContactFeature &) -> uint8 b2ContactFeature::indexA [b2Collision.h <38:8 38:23>]
REFERENCE_USAGE: b2ContactFeature & b2ContactFeature::operator=(const b2ContactFeature &) -> uint8 b2ContactFeature::indexB [b2Collision.h <38:8 38:23>]
REFERENCE_USAGE: b2ContactFeature & b2ContactFeature::operator=(const b2ContactFeature &) -> uint8 b2ContactFeature::typeA [b2Collision.h <38:8 38:23>]
REFERENCE_USAGE: b2ContactFeature & b2ContactFeature::operator=(const b2ContactFeature &) -> uint8 b2ContactFeature::typeB [b2Collision.h <38:8 38:23>]
REFERENCE_TYPE_USAGE: b2ContactFeature b2ContactID::cf -> b2ContactFeature [b2Collision.h <55:2 55:17>]
REFERENCE_TYPE_USAGE: uint32 b2ContactID::key -> uint32 [b2Collision.h <56:2 56:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ManifoldPoint::localPoint -> b2Vec2 [b2Collision.h <71:2 71:7>]
REFERENCE_TYPE_USAGE: float32 b2ManifoldPoint::normalImpulse -> float32 [b2Collision.h <72:2 72:8>]
REFERENCE_TYPE_USAGE: float32 b2ManifoldPoint::tangentImpulse -> float32 [b2Collision.h <73:2 73:8>]
REFERENCE_TYPE_USAGE: b2ContactID b2ManifoldPoint::id -> b2ContactID [b2Collision.h <74:2 74:12>]
REFERENCE_TYPE_USAGE: b2ManifoldPoint [] b2Manifold::points -> b2ManifoldPoint [b2Collision.h <102:2 102:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Manifold::localNormal -> b2Vec2 [b2Collision.h <103:2 103:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Manifold::localPoint -> b2Vec2 [b2Collision.h <104:2 104:7>]
REFERENCE_TYPE_USAGE: b2Manifold::Type b2Manifold::type -> b2Manifold::Type [b2Collision.h <105:2 105:5>]
REFERENCE_TYPE_USAGE: int32 b2Manifold::pointCount -> int32 [b2Collision.h <106:2 106:6>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> void [b2Collision.h <116:2 116:5>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Manifold [b2Collision.h <116:24 116:33>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Transform [b2Collision.h <117:12 117:22>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Transform [b2Collision.h <118:12 118:22>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [b2Collision.h <117:30 117:36>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [b2Collision.h <118:30 118:36>]
REFERENCE_TYPE_USAGE: b2Vec2 b2WorldManifold::normal -> b2Vec2 [b2Collision.h <120:2 120:7>]
REFERENCE_TYPE_USAGE: b2Vec2 [] b2WorldManifold::points -> b2Vec2 [b2Collision.h <121:2 121:7>]
REFERENCE_TYPE_USAGE: float32 [] b2WorldManifold::separations -> float32 [b2Collision.h <122:2 122:8>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> void [b2Collision.h <136:1 136:4>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState [b2Collision.h <136:23 136:34>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState [b2Collision.h <136:66 136:77>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2Manifold [b2Collision.h <137:14 137:23>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2Manifold [b2Collision.h <137:43 137:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ClipVertex::v -> b2Vec2 [b2Collision.h <142:2 142:7>]
REFERENCE_TYPE_USAGE: b2ContactID b2ClipVertex::id -> b2ContactID [b2Collision.h <143:2 143:12>]
REFERENCE_USAGE: void b2ClipVertex::b2ClipVertex() -> b2Vec2 b2ClipVertex::v [b2Collision.h <140:8 140:19>]
REFERENCE_CALL: void b2ClipVertex::b2ClipVertex() -> void b2Vec2::b2Vec2() [b2Collision.h <140:8 140:19>]
REFERENCE_USAGE: void b2ClipVertex::b2ClipVertex() -> b2ContactID b2ClipVertex::id [b2Collision.h <140:8 140:19>]
REFERENCE_CALL: void b2ClipVertex::b2ClipVertex() -> void b2ContactID::b2ContactID() [b2Collision.h <140:8 140:19>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastInput::p1 -> b2Vec2 [b2Collision.h <149:2 149:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastInput::p2 -> b2Vec2 [b2Collision.h <149:2 149:7>]
REFERENCE_TYPE_USAGE: float32 b2RayCastInput::maxFraction -> float32 [b2Collision.h <150:2 150:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastOutput::normal -> b2Vec2 [b2Collision.h <157:2 157:7>]
REFERENCE_TYPE_USAGE: float32 b2RayCastOutput::fraction -> float32 [b2Collision.h <158:2 158:8>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <165:2 165:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <254:8 254:11>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <257:2 257:5>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 [b2Collision.h <168:2 168:7>]
REFERENCE_CALL: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.h <170:15 170:15>]
REFERENCE_CALL: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <170:29 170:29>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <170:18 170:27>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <170:31 170:40>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 [b2Collision.h <174:2 174:7>]
REFERENCE_CALL: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.h <176:15 176:15>]
REFERENCE_CALL: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <176:29 176:29>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <176:18 176:27>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <176:31 176:40>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <180:2 180:8>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <182:3 182:9>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <183:3 183:9>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::x [b2Collision.h <182:27 182:27>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::x [b2Collision.h <182:42 182:42>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <182:16 182:25>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <183:16 183:25>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <182:31 182:40>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <183:31 183:40>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::y [b2Collision.h <183:27 183:27>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::y [b2Collision.h <183:42 183:42>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &) -> void [b2Collision.h <188:2 188:5>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2AABB [b2Collision.h <188:21 188:26>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <190:14 190:14>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <191:14 191:14>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:3 190:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:22 190:31>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:39 190:48>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <190:16 190:20>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:3 191:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:22 191:31>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:39 191:48>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <191:16 191:20>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> void [b2Collision.h <195:2 195:5>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <195:21 195:26>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <195:42 195:47>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <197:14 197:14>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <198:14 198:14>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:3 197:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:28 197:37>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:46 197:55>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <197:16 197:20>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:3 198:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:28 198:37>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:46 198:55>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <198:16 198:20>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> bool [b2Collision.h <202:2 202:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> bool [b2Collision.h <204:3 204:6>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2AABB [b2Collision.h <202:22 202:27>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <205:33 205:33>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <205:54 205:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <207:38 207:38>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <207:54 207:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <205:22 205:31>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <205:43 205:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <206:22 206:31>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <206:43 206:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <206:33 206:33>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <206:54 206:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <208:38 208:38>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <208:54 208:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <207:27 207:36>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <207:43 207:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <208:27 208:36>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <208:43 208:52>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> bool [b2Collision.h <212:2 212:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2RayCastOutput [b2Collision.h <212:15 212:29>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2RayCastInput [b2Collision.h <212:46 212:59>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::lowerBound -> b2Vec2 [b2Collision.h <214:2 214:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::upperBound -> b2Vec2 [b2Collision.h <215:2 215:7>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <219:1 219:4>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <219:23 219:32>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <220:14 220:26>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <221:14 221:26>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <220:44 220:54>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <221:44 221:54>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <224:1 224:4>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <224:32 224:41>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <225:17 225:30>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <225:49 225:59>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <226:47 226:57>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <226:17 226:29>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void [b2Collision.h <229:1 229:4>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold [b2Collision.h <229:24 229:33>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <230:15 230:28>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <231:15 231:28>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <230:47 230:57>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <231:47 231:57>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2CollideEdge.cpp <27:1 27:4>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2CollideEdge.cpp <127:2 127:9>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <234:1 234:4>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2CollideEdge.cpp <27:29 27:38>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <234:29 234:38>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2EdgeShape [b2CollideEdge.cpp <28:14 28:24>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2EdgeShape [b2Collision.h <235:17 235:27>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2CollideEdge.cpp <28:40 28:50>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2CollideEdge.cpp <29:44 29:54>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <235:46 235:56>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <236:47 236:57>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2CollideEdge.cpp <29:14 29:26>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <236:17 236:29>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void [b2CollideEdge.cpp <692:1 692:4>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void [b2Collision.h <239:1 239:4>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold [b2CollideEdge.cpp <692:31 692:40>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold [b2Collision.h <239:30 239:39>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EdgeShape [b2CollideEdge.cpp <693:15 693:25>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EdgeShape [b2Collision.h <240:17 240:27>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2CollideEdge.cpp <693:41 693:51>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2CollideEdge.cpp <694:47 694:57>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <240:43 240:53>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <241:48 241:58>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2CollideEdge.cpp <694:15 694:28>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <241:17 241:30>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> int32 [b2Collision.h <244:1 244:5>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> int32 [b2Collision.h <245:46 245:50>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex [b2Collision.h <244:27 244:38>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex [b2Collision.h <244:55 244:66>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 [b2Collision.h <245:14 245:19>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> float32 [b2Collision.h <245:30 245:36>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> bool [b2Collision.h <248:1 248:4>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Shape [b2Collision.h <248:27 248:33>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Shape [b2Collision.h <249:12 249:18>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> int32 [b2Collision.h <248:44 248:48>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> int32 [b2Collision.h <249:29 249:33>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform [b2Collision.h <250:12 250:22>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform [b2Collision.h <250:36 250:46>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 [b2Collision.h <256:2 256:7>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <256:24 256:24>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <256:13 256:22>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <258:43 258:52>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <256:26 256:35>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <258:19 258:28>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> float32 b2Vec2::x [b2Collision.h <257:17 257:17>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> float32 b2Vec2::y [b2Collision.h <257:32 257:32>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> bool b2Vec2::IsValid() const [b2Collision.h <258:30 258:36>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> bool b2Vec2::IsValid() const [b2Collision.h <258:54 258:60>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> bool [b2Collision.h <262:8 262:11>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <262:33 262:38>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <262:50 262:55>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 [b2Collision.h <264:2 264:7>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> void b2Vec2::b2Vec2() [b2Collision.h <264:9 264:10>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> void b2Vec2::b2Vec2() [b2Collision.h <264:13 264:14>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <265:5 265:5>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <266:5 266:5>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <265:20 265:20>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <266:20 266:20>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <265:9 265:18>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <266:9 266:18>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <265:24 265:33>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <266:24 266:33>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::x [b2Collision.h <268:9 268:9>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::x [b2Collision.h <271:9 271:9>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::y [b2Collision.h <268:24 268:24>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::y [b2Collision.h <271:24 271:24>]
REFERENCE_TYPE_USAGE: const int32 b2_chunkSize -> int32 [b2BlockAllocator.h <24:7 24:11>]
REFERENCE_TYPE_USAGE: const int32 b2_maxBlockSize -> int32 [b2BlockAllocator.h <25:7 25:11>]
REFERENCE_TYPE_USAGE: const int32 b2_blockSizes -> int32 [b2BlockAllocator.h <26:7 26:11>]
REFERENCE_TYPE_USAGE: const int32 b2_chunkArrayIncrement -> int32 [b2BlockAllocator.h <27:7 27:11>]
REFERENCE_TYPE_USAGE: void * b2BlockAllocator::Allocate(int32) -> void [b2BlockAllocator.h <42:2 42:5>]
REFERENCE_TYPE_USAGE: void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.h <42:17 42:21>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.h <45:2 45:5>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.h <45:12 45:15>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Free(void *, int32) -> int32 [b2BlockAllocator.h <45:21 45:25>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Clear() -> void [b2BlockAllocator.h <47:2 47:5>]
REFERENCE_TYPE_USAGE: b2Chunk * b2BlockAllocator::m_chunks -> b2Chunk [b2BlockAllocator.h <51:2 51:8>]
REFERENCE_TYPE_USAGE: int32 b2BlockAllocator::m_chunkCount -> int32 [b2BlockAllocator.h <52:2 52:6>]
REFERENCE_TYPE_USAGE: int32 b2BlockAllocator::m_chunkSpace -> int32 [b2BlockAllocator.h <53:2 53:6>]
REFERENCE_TYPE_USAGE: b2Block * [] b2BlockAllocator::m_freeLists -> b2Block [b2BlockAllocator.h <55:2 55:8>]
REFERENCE_USAGE: b2Block * [] b2BlockAllocator::m_freeLists -> const int32 b2_blockSizes [b2BlockAllocator.h <55:23 55:35>]
REFERENCE_TYPE_USAGE: static int32 [] b2BlockAllocator::s_blockSizes -> int32 [b2BlockAllocator.h <57:9 57:13>]
REFERENCE_USAGE: static int32 [] b2BlockAllocator::s_blockSizes -> const int32 b2_blockSizes [b2BlockAllocator.h <57:28 57:40>]
REFERENCE_TYPE_USAGE: static uint8 [] b2BlockAllocator::s_blockSizeLookup -> uint8 [b2BlockAllocator.h <58:9 58:13>]
REFERENCE_USAGE: static uint8 [] b2BlockAllocator::s_blockSizeLookup -> const int32 b2_maxBlockSize [b2BlockAllocator.h <58:33 58:47>]
REFERENCE_TYPE_USAGE: static bool b2BlockAllocator::s_blockSizeLookupInitialized -> bool [b2BlockAllocator.h <59:9 59:12>]
REFERENCE_TYPE_USAGE: float32 b2MassData::mass -> float32 [b2Shape.h <30:2 30:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MassData::center -> b2Vec2 [b2Shape.h <33:2 33:7>]
REFERENCE_TYPE_USAGE: float32 b2MassData::I -> float32 [b2Shape.h <36:2 36:8>]
REFERENCE_TYPE_USAGE: b2Shape * b2Shape::Clone(b2BlockAllocator *) const -> b2Shape [b2Shape.h <58:10 58:16>]
REFERENCE_TYPE_USAGE: b2Shape * b2Shape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2Shape.h <58:25 58:40>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Shape::GetType() const -> b2Shape::Type [b2Shape.h <62:2 62:5>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Shape::GetType() const -> b2Shape::Type [b2Shape.h <99:17 99:20>]
REFERENCE_TYPE_USAGE: int32 b2Shape::GetChildCount() const -> int32 [b2Shape.h <65:10 65:14>]
REFERENCE_TYPE_USAGE: bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2Shape.h <70:10 70:13>]
REFERENCE_TYPE_USAGE: bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2Shape.h <70:31 70:41>]
REFERENCE_TYPE_USAGE: bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2Shape.h <70:54 70:59>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2Shape.h <77:10 77:13>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2Shape.h <77:23 77:37>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2Shape.h <77:54 77:67>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2Shape.h <78:13 78:23>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2Shape.h <78:37 78:41>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2Shape.h <84:10 84:13>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2Shape.h <84:27 84:32>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2Shape.h <84:47 84:57>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2Shape.h <84:64 84:68>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeMass(b2MassData *, float32) const -> void [b2Shape.h <90:10 90:13>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2Shape.h <90:27 90:36>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeMass(b2MassData *, float32) const -> float32 [b2Shape.h <90:49 90:55>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Shape::m_type -> b2Shape::Type [b2Shape.h <92:2 92:5>]
REFERENCE_TYPE_USAGE: float32 b2Shape::m_radius -> float32 [b2Shape.h <96:2 96:8>]
REFERENCE_USAGE: b2Shape::Type b2Shape::GetType() const -> b2Shape::Type b2Shape::m_type [b2Shape.h <101:9 101:14>]
REFERENCE_INHERITANCE: b2CircleShape -> b2Shape [b2CircleShape.h <25:30 25:36>]
REFERENCE_OVERRIDE: b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2CircleShape.h <31:11 31:15>]
REFERENCE_TYPE_USAGE: b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2Shape [b2CircleShape.h <31:2 31:8>]
REFERENCE_TYPE_USAGE: b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2CircleShape.h <31:17 31:32>]
REFERENCE_OVERRIDE: int32 b2CircleShape::GetChildCount() const -> int32 b2Shape::GetChildCount() const [b2CircleShape.h <34:8 34:20>]
REFERENCE_TYPE_USAGE: int32 b2CircleShape::GetChildCount() const -> int32 [b2CircleShape.h <34:2 34:6>]
REFERENCE_OVERRIDE: bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2CircleShape.h <37:7 37:15>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2CircleShape.h <37:2 37:5>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2CircleShape.h <37:23 37:33>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2CircleShape.h <37:53 37:58>]
REFERENCE_OVERRIDE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2CircleShape.h <40:7 40:13>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2CircleShape.h <40:2 40:5>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2CircleShape.h <40:15 40:29>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2CircleShape.h <40:46 40:59>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2CircleShape.h <41:11 41:21>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2CircleShape.h <41:35 41:39>]
REFERENCE_OVERRIDE: void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2CircleShape.h <44:7 44:17>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2CircleShape.h <44:2 44:5>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2CircleShape.h <44:19 44:24>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2CircleShape.h <44:39 44:49>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2CircleShape.h <44:63 44:67>]
REFERENCE_OVERRIDE: void b2CircleShape::ComputeMass(b2MassData *, float32) const -> void b2Shape::ComputeMass(b2MassData *, float32) const [b2CircleShape.h <47:7 47:17>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeMass(b2MassData *, float32) const -> void [b2CircleShape.h <47:2 47:5>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2CircleShape.h <47:19 47:28>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeMass(b2MassData *, float32) const -> float32 [b2CircleShape.h <47:41 47:47>]
REFERENCE_TYPE_USAGE: b2Vec2 b2CircleShape::m_p -> b2Vec2 [b2CircleShape.h <50:2 50:7>]
REFERENCE_OVERRIDE: void b2CircleShape::~b2CircleShape() -> void b2Shape::~b2Shape() [b2CircleShape.h <25:7 25:19>]
REFERENCE_CALL: void b2CircleShape::b2CircleShape() -> void b2Shape::b2Shape() [b2CircleShape.h <53:23 53:35>]
REFERENCE_USAGE: void b2CircleShape::b2CircleShape() -> b2Vec2 b2CircleShape::m_p [b2CircleShape.h <53:23 53:35>]
REFERENCE_USAGE: void b2CircleShape::b2CircleShape() -> b2Vec2 b2CircleShape::m_p [b2CircleShape.h <57:2 57:4>]
REFERENCE_CALL: void b2CircleShape::b2CircleShape() -> void b2Vec2::b2Vec2() [b2CircleShape.h <53:23 53:35>]
REFERENCE_USAGE: void b2CircleShape::b2CircleShape() -> b2Shape::Type b2Shape::m_type [b2CircleShape.h <55:2 55:7>]
REFERENCE_USAGE: void b2CircleShape::b2CircleShape() -> b2Shape::Type::e_circle [b2CircleShape.h <55:11 55:18>]
REFERENCE_USAGE: void b2CircleShape::b2CircleShape() -> float32 b2Shape::m_radius [b2CircleShape.h <56:2 56:9>]
REFERENCE_CALL: void b2CircleShape::b2CircleShape() -> void b2Vec2::SetZero() [b2CircleShape.h <57:6 57:12>]
REFERENCE_INHERITANCE: b2EdgeShape -> b2Shape [b2EdgeShape.h <27:28 27:34>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> void [b2EdgeShape.h <33:2 33:5>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2EdgeShape.h <33:17 33:22>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2EdgeShape.h <33:35 33:40>]
REFERENCE_OVERRIDE: b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2EdgeShape.h <36:11 36:15>]
REFERENCE_TYPE_USAGE: b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2Shape [b2EdgeShape.h <36:2 36:8>]
REFERENCE_TYPE_USAGE: b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2EdgeShape.h <36:17 36:32>]
REFERENCE_OVERRIDE: int32 b2EdgeShape::GetChildCount() const -> int32 b2Shape::GetChildCount() const [b2EdgeShape.h <39:8 39:20>]
REFERENCE_TYPE_USAGE: int32 b2EdgeShape::GetChildCount() const -> int32 [b2EdgeShape.h <39:2 39:6>]
REFERENCE_OVERRIDE: bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2EdgeShape.h <42:7 42:15>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2EdgeShape.h <42:2 42:5>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2EdgeShape.h <42:23 42:33>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2EdgeShape.h <42:53 42:58>]
REFERENCE_OVERRIDE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2EdgeShape.h <45:7 45:13>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2EdgeShape.h <45:2 45:5>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2EdgeShape.h <45:15 45:29>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2EdgeShape.h <45:46 45:59>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2EdgeShape.h <46:11 46:21>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2EdgeShape.h <46:35 46:39>]
REFERENCE_OVERRIDE: void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2EdgeShape.h <49:7 49:17>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2EdgeShape.h <49:2 49:5>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2EdgeShape.h <49:19 49:24>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2EdgeShape.h <49:39 49:49>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2EdgeShape.h <49:63 49:67>]
REFERENCE_OVERRIDE: void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> void b2Shape::ComputeMass(b2MassData *, float32) const [b2EdgeShape.h <52:7 52:17>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> void [b2EdgeShape.h <52:2 52:5>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2EdgeShape.h <52:19 52:28>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> float32 [b2EdgeShape.h <52:41 52:47>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EdgeShape::m_vertex1 -> b2Vec2 [b2EdgeShape.h <55:2 55:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EdgeShape::m_vertex2 -> b2Vec2 [b2EdgeShape.h <55:2 55:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EdgeShape::m_vertex0 -> b2Vec2 [b2EdgeShape.h <58:2 58:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EdgeShape::m_vertex3 -> b2Vec2 [b2EdgeShape.h <58:2 58:7>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::m_hasVertex0 -> bool [b2EdgeShape.h <59:2 59:5>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::m_hasVertex3 -> bool [b2EdgeShape.h <59:2 59:5>]
REFERENCE_OVERRIDE: void b2EdgeShape::~b2EdgeShape() -> void b2Shape::~b2Shape() [b2EdgeShape.h <27:7 27:17>]
REFERENCE_CALL: void b2EdgeShape::b2EdgeShape() -> void b2Shape::b2Shape() [b2EdgeShape.h <62:21 62:31>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex1 [b2EdgeShape.h <62:21 62:31>]
REFERENCE_CALL: void b2EdgeShape::b2EdgeShape() -> void b2Vec2::b2Vec2() [b2EdgeShape.h <62:21 62:31>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex2 [b2EdgeShape.h <62:21 62:31>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex0 [b2EdgeShape.h <62:21 62:31>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex0 [b2EdgeShape.h <66:2 66:10>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex0 [b2EdgeShape.h <67:2 67:10>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex3 [b2EdgeShape.h <62:21 62:31>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex3 [b2EdgeShape.h <68:2 68:10>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex3 [b2EdgeShape.h <69:2 69:10>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Shape::Type b2Shape::m_type [b2EdgeShape.h <64:2 64:7>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Shape::Type::e_edge [b2EdgeShape.h <64:11 64:16>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> float32 b2Shape::m_radius [b2EdgeShape.h <65:2 65:9>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> float32 b2Vec2::x [b2EdgeShape.h <66:12 66:12>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> float32 b2Vec2::x [b2EdgeShape.h <68:12 68:12>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> float32 b2Vec2::y [b2EdgeShape.h <67:12 67:12>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> float32 b2Vec2::y [b2EdgeShape.h <69:12 69:12>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> bool b2EdgeShape::m_hasVertex0 [b2EdgeShape.h <70:2 70:13>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> bool b2EdgeShape::m_hasVertex3 [b2EdgeShape.h <71:2 71:13>]
REFERENCE_INHERITANCE: b2PolygonShape -> b2Shape [b2PolygonShape.h <28:31 28:37>]
REFERENCE_OVERRIDE: b2Shape * b2PolygonShape::Clone(b2BlockAllocator *) const -> b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2PolygonShape.h <34:11 34:15>]
REFERENCE_TYPE_USAGE: b2Shape * b2PolygonShape::Clone(b2BlockAllocator *) const -> b2Shape [b2PolygonShape.h <34:2 34:8>]
REFERENCE_TYPE_USAGE: b2Shape * b2PolygonShape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2PolygonShape.h <34:17 34:32>]
REFERENCE_OVERRIDE: int32 b2PolygonShape::GetChildCount() const -> int32 b2Shape::GetChildCount() const [b2PolygonShape.h <37:8 37:20>]
REFERENCE_TYPE_USAGE: int32 b2PolygonShape::GetChildCount() const -> int32 [b2PolygonShape.h <37:2 37:6>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::Set(const b2Vec2 *, int32) -> void [b2PolygonShape.h <44:2 44:5>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::Set(const b2Vec2 *, int32) -> b2Vec2 [b2PolygonShape.h <44:17 44:22>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::Set(const b2Vec2 *, int32) -> int32 [b2PolygonShape.h <44:33 44:37>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32) -> void [b2PolygonShape.h <49:2 49:5>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32) -> float32 [b2PolygonShape.h <49:16 49:22>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32) -> float32 [b2PolygonShape.h <49:28 49:34>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) -> void [b2PolygonShape.h <56:2 56:5>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) -> float32 [b2PolygonShape.h <56:16 56:22>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) -> float32 [b2PolygonShape.h <56:28 56:34>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) -> float32 [b2PolygonShape.h <56:62 56:68>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) -> b2Vec2 [b2PolygonShape.h <56:46 56:51>]
REFERENCE_OVERRIDE: bool b2PolygonShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2PolygonShape.h <59:7 59:15>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2PolygonShape.h <59:2 59:5>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2PolygonShape.h <59:23 59:33>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2PolygonShape.h <59:53 59:58>]
REFERENCE_OVERRIDE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2PolygonShape.h <62:7 62:13>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2PolygonShape.h <62:2 62:5>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2PolygonShape.h <62:15 62:29>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2PolygonShape.h <62:46 62:59>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2PolygonShape.h <63:12 63:22>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2PolygonShape.h <63:36 63:40>]
REFERENCE_OVERRIDE: void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2PolygonShape.h <66:7 66:17>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2PolygonShape.h <66:2 66:5>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2PolygonShape.h <66:19 66:24>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2PolygonShape.h <66:39 66:49>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2PolygonShape.h <66:63 66:67>]
REFERENCE_OVERRIDE: void b2PolygonShape::ComputeMass(b2MassData *, float32) const -> void b2Shape::ComputeMass(b2MassData *, float32) const [b2PolygonShape.h <69:7 69:17>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeMass(b2MassData *, float32) const -> void [b2PolygonShape.h <69:2 69:5>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2PolygonShape.h <69:19 69:28>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeMass(b2MassData *, float32) const -> float32 [b2PolygonShape.h <69:41 69:47>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::Validate() const -> bool [b2PolygonShape.h <73:2 73:5>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PolygonShape::m_centroid -> b2Vec2 [b2PolygonShape.h <75:2 75:7>]
REFERENCE_TYPE_USAGE: b2Vec2 [] b2PolygonShape::m_vertices -> b2Vec2 [b2PolygonShape.h <76:2 76:7>]
REFERENCE_TYPE_USAGE: b2Vec2 [] b2PolygonShape::m_normals -> b2Vec2 [b2PolygonShape.h <77:2 77:7>]
REFERENCE_TYPE_USAGE: int32 b2PolygonShape::m_count -> int32 [b2PolygonShape.h <78:2 78:6>]
REFERENCE_OVERRIDE: void b2PolygonShape::~b2PolygonShape() -> void b2Shape::~b2Shape() [b2PolygonShape.h <28:7 28:20>]
REFERENCE_CALL: void b2PolygonShape::b2PolygonShape() -> void b2Shape::b2Shape() [b2PolygonShape.h <81:24 81:37>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Vec2 b2PolygonShape::m_centroid [b2PolygonShape.h <81:24 81:37>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Vec2 b2PolygonShape::m_centroid [b2PolygonShape.h <86:2 86:11>]
REFERENCE_CALL: void b2PolygonShape::b2PolygonShape() -> void b2Vec2::b2Vec2() [b2PolygonShape.h <81:24 81:37>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Vec2 [] b2PolygonShape::m_vertices [b2PolygonShape.h <81:24 81:37>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Vec2 [] b2PolygonShape::m_normals [b2PolygonShape.h <81:24 81:37>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Shape::Type b2Shape::m_type [b2PolygonShape.h <83:2 83:7>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Shape::Type::e_polygon [b2PolygonShape.h <83:11 83:19>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> float32 b2Shape::m_radius [b2PolygonShape.h <84:2 84:9>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> int32 b2PolygonShape::m_count [b2PolygonShape.h <85:2 85:8>]
REFERENCE_CALL: void b2PolygonShape::b2PolygonShape() -> void b2Vec2::SetZero() [b2PolygonShape.h <86:13 86:19>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> int32 b2Manifold::pointCount [b2CollideEdge.cpp <31:12 31:21>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> int32 b2Manifold::pointCount [b2CollideEdge.cpp <77:13 77:22>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> int32 b2Manifold::pointCount [b2CollideEdge.cpp <115:13 115:22>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> int32 b2Manifold::pointCount [b2CollideEdge.cpp <145:12 145:21>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <34:2 34:7>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <36:2 36:7>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <37:2 37:7>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <52:3 52:8>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <53:3 53:8>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <63:4 63:9>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <64:4 64:9>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <65:4 65:9>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <90:3 90:8>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <91:3 91:8>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <101:4 101:9>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <102:4 102:9>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <103:4 103:9>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <128:2 128:7>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <129:2 129:7>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <136:2 136:7>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) [b2CollideEdge.cpp <34:13 34:18>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2CollideEdge.cpp <34:25 34:29>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2CircleShape::m_p [b2CollideEdge.cpp <34:45 34:47>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2CircleShape::m_p [b2CollideEdge.cpp <83:45 83:47>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2CircleShape::m_p [b2CollideEdge.cpp <121:45 121:47>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2CircleShape::m_p [b2CollideEdge.cpp <151:44 151:46>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2CollideEdge.cpp <36:20 36:28>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2CollideEdge.cpp <36:42 36:50>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2CollideEdge.cpp <52:14 52:14>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2CollideEdge.cpp <63:23 63:31>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2CollideEdge.cpp <64:16 64:16>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2CollideEdge.cpp <90:14 90:14>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2CollideEdge.cpp <101:23 101:31>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2CollideEdge.cpp <102:16 102:16>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2EdgeShape::m_vertex1 [b2CollideEdge.cpp <36:20 36:28>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2EdgeShape::m_vertex2 [b2CollideEdge.cpp <36:42 36:50>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <37:15 37:15>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <40:25 40:25>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <41:25 41:25>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <53:16 53:16>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <65:19 65:19>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <66:30 66:30>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <91:16 91:16>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <103:19 103:19>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <104:29 104:29>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <129:15 129:15>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <137:17 137:17>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <40:2 40:8>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <41:2 41:8>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <43:2 43:8>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <54:3 54:9>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <66:4 66:10>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <92:3 92:9>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <104:4 104:10>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <126:2 126:8>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <130:2 130:8>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <40:14 40:18>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <41:14 41:18>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <54:16 54:20>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <66:17 66:21>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <92:16 92:20>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <104:17 104:21>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <126:16 126:20>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <130:15 130:19>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <137:6 137:10>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Shape::m_radius [b2CollideEdge.cpp <43:26 43:33>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Shape::m_radius [b2CollideEdge.cpp <43:46 43:53>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactFeature [b2CollideEdge.cpp <45:2 45:17>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2ContactFeature::b2ContactFeature() [b2CollideEdge.cpp <45:19 45:20>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> uint8 b2ContactFeature::indexB [b2CollideEdge.cpp <46:5 46:10>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> uint8 b2ContactFeature::typeB [b2CollideEdge.cpp <47:5 47:9>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactFeature::Type::e_vertex [b2CollideEdge.cpp <47:31 47:38>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactFeature::Type::e_vertex [b2CollideEdge.cpp <76:32 76:39>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactFeature::Type::e_vertex [b2CollideEdge.cpp <114:32 114:39>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> bool b2EdgeShape::m_hasVertex0 [b2CollideEdge.cpp <61:14 61:25>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2EdgeShape::m_vertex0 [b2CollideEdge.cpp <63:23 63:31>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> uint8 b2ContactFeature::indexA [b2CollideEdge.cpp <75:6 75:11>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> uint8 b2ContactFeature::indexA [b2CollideEdge.cpp <113:6 113:11>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> uint8 b2ContactFeature::indexA [b2CollideEdge.cpp <143:5 143:10>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> uint8 b2ContactFeature::typeA [b2CollideEdge.cpp <76:6 76:10>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> uint8 b2ContactFeature::typeA [b2CollideEdge.cpp <114:6 114:10>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> uint8 b2ContactFeature::typeA [b2CollideEdge.cpp <144:5 144:9>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold::Type b2Manifold::type [b2CollideEdge.cpp <78:13 78:16>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold::Type b2Manifold::type [b2CollideEdge.cpp <116:13 116:16>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold::Type b2Manifold::type [b2CollideEdge.cpp <146:12 146:15>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold::Type::e_circles [b2CollideEdge.cpp <78:32 78:40>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold::Type::e_circles [b2CollideEdge.cpp <116:32 116:40>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::SetZero() [b2CollideEdge.cpp <79:25 79:31>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::SetZero() [b2CollideEdge.cpp <117:25 117:31>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2Manifold::localNormal [b2CollideEdge.cpp <79:13 79:23>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2Manifold::localNormal [b2CollideEdge.cpp <117:13 117:23>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2Manifold::localNormal [b2CollideEdge.cpp <147:12 147:22>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <80:24 80:24>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <83:34 83:34>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <118:24 118:24>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <121:34 121:34>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <147:24 147:24>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <148:23 148:23>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <151:33 151:33>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2Manifold::localPoint [b2CollideEdge.cpp <80:13 80:22>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2Manifold::localPoint [b2CollideEdge.cpp <118:13 118:22>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2Manifold::localPoint [b2CollideEdge.cpp <148:12 148:21>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> uint32 b2ContactID::key [b2CollideEdge.cpp <81:26 81:28>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> uint32 b2ContactID::key [b2CollideEdge.cpp <119:26 119:28>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> uint32 b2ContactID::key [b2CollideEdge.cpp <149:25 149:27>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactID b2ManifoldPoint::id [b2CollideEdge.cpp <81:23 81:24>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactID b2ManifoldPoint::id [b2CollideEdge.cpp <82:23 82:24>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactID b2ManifoldPoint::id [b2CollideEdge.cpp <119:23 119:24>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactID b2ManifoldPoint::id [b2CollideEdge.cpp <120:23 120:24>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactID b2ManifoldPoint::id [b2CollideEdge.cpp <149:22 149:23>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactID b2ManifoldPoint::id [b2CollideEdge.cpp <150:22 150:23>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ManifoldPoint [] b2Manifold::points [b2CollideEdge.cpp <81:13 81:18>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ManifoldPoint [] b2Manifold::points [b2CollideEdge.cpp <82:13 82:18>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ManifoldPoint [] b2Manifold::points [b2CollideEdge.cpp <83:13 83:18>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ManifoldPoint [] b2Manifold::points [b2CollideEdge.cpp <119:13 119:18>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ManifoldPoint [] b2Manifold::points [b2CollideEdge.cpp <120:13 120:18>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ManifoldPoint [] b2Manifold::points [b2CollideEdge.cpp <121:13 121:18>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ManifoldPoint [] b2Manifold::points [b2CollideEdge.cpp <149:12 149:17>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ManifoldPoint [] b2Manifold::points [b2CollideEdge.cpp <150:12 150:17>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ManifoldPoint [] b2Manifold::points [b2CollideEdge.cpp <151:12 151:17>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactFeature & b2ContactFeature::operator=(const b2ContactFeature &) [b2CollideEdge.cpp <82:29 82:29>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactFeature & b2ContactFeature::operator=(const b2ContactFeature &) [b2CollideEdge.cpp <120:29 120:29>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactFeature & b2ContactFeature::operator=(const b2ContactFeature &) [b2CollideEdge.cpp <150:28 150:28>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <82:26 82:27>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <120:26 120:27>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <150:25 150:26>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2ManifoldPoint::localPoint [b2CollideEdge.cpp <83:23 83:32>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2ManifoldPoint::localPoint [b2CollideEdge.cpp <121:23 121:32>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2ManifoldPoint::localPoint [b2CollideEdge.cpp <151:22 151:31>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> bool b2EdgeShape::m_hasVertex3 [b2CollideEdge.cpp <99:14 99:25>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 b2EdgeShape::m_vertex3 [b2CollideEdge.cpp <101:23 101:31>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2CollideEdge.cpp <127:2 127:9>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> unsigned int [b2CollideEdge.cpp <127:2 127:9>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2CollideEdge.cpp <128:26 128:26>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2CollideEdge.cpp <128:31 128:31>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2CollideEdge.cpp <128:39 128:39>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <128:35 128:35>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::b2Vec2(float32, float32) [b2CollideEdge.cpp <136:9 136:9>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Vec2::y [b2CollideEdge.cpp <136:14 136:14>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Vec2::y [b2CollideEdge.cpp <139:18 139:18>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Vec2::x [b2CollideEdge.cpp <136:19 136:19>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Vec2::x [b2CollideEdge.cpp <139:12 139:12>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void b2Vec2::Set(float32, float32) [b2CollideEdge.cpp <139:5 139:7>]
REFERENCE_CALL: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> float32 b2Vec2::Normalize() [b2CollideEdge.cpp <141:4 141:12>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2ContactFeature::Type::e_face [b2CollideEdge.cpp <144:31 144:36>]
REFERENCE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold::Type::e_faceA [b2CollideEdge.cpp <146:31 146:37>]
REFERENCE_TYPE_USAGE: b2EPAxis::Type b2EPAxis::type -> b2EPAxis::Type [b2CollideEdge.cpp <164:2 164:5>]
REFERENCE_TYPE_USAGE: int32 b2EPAxis::index -> int32 [b2CollideEdge.cpp <165:2 165:6>]
REFERENCE_TYPE_USAGE: float32 b2EPAxis::separation -> float32 [b2CollideEdge.cpp <166:2 166:8>]
REFERENCE_USAGE: void b2EPAxis::b2EPAxis(b2EPAxis &&) -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <155:8 155:15>]
REFERENCE_TYPE_USAGE: void b2EPAxis::b2EPAxis(b2EPAxis &&) -> b2EPAxis [b2CollideEdge.cpp <155:8 155:15>]
REFERENCE_USAGE: void b2EPAxis::b2EPAxis(b2EPAxis &&) -> int32 b2EPAxis::index [b2CollideEdge.cpp <155:8 155:15>]
REFERENCE_USAGE: void b2EPAxis::b2EPAxis(b2EPAxis &&) -> float32 b2EPAxis::separation [b2CollideEdge.cpp <155:8 155:15>]
REFERENCE_USAGE: b2EPAxis & b2EPAxis::operator=(const b2EPAxis &) -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <155:8 155:15>]
REFERENCE_USAGE: b2EPAxis & b2EPAxis::operator=(const b2EPAxis &) -> int32 b2EPAxis::index [b2CollideEdge.cpp <155:8 155:15>]
REFERENCE_USAGE: b2EPAxis & b2EPAxis::operator=(const b2EPAxis &) -> float32 b2EPAxis::separation [b2CollideEdge.cpp <155:8 155:15>]
REFERENCE_TYPE_USAGE: b2Vec2 [] b2TempPolygon::vertices -> b2Vec2 [b2CollideEdge.cpp <172:2 172:7>]
REFERENCE_TYPE_USAGE: b2Vec2 [] b2TempPolygon::normals -> b2Vec2 [b2CollideEdge.cpp <173:2 173:7>]
REFERENCE_TYPE_USAGE: int32 b2TempPolygon::count -> int32 [b2CollideEdge.cpp <174:2 174:6>]
REFERENCE_USAGE: void b2TempPolygon::b2TempPolygon() -> b2Vec2 [] b2TempPolygon::vertices [b2CollideEdge.cpp <170:8 170:20>]
REFERENCE_CALL: void b2TempPolygon::b2TempPolygon() -> void b2Vec2::b2Vec2() [b2CollideEdge.cpp <170:8 170:20>]
REFERENCE_USAGE: void b2TempPolygon::b2TempPolygon() -> b2Vec2 [] b2TempPolygon::normals [b2CollideEdge.cpp <170:8 170:20>]
REFERENCE_TYPE_USAGE: int32 b2ReferenceFace::i1 -> int32 [b2CollideEdge.cpp <180:2 180:6>]
REFERENCE_TYPE_USAGE: int32 b2ReferenceFace::i2 -> int32 [b2CollideEdge.cpp <180:2 180:6>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ReferenceFace::v1 -> b2Vec2 [b2CollideEdge.cpp <182:2 182:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ReferenceFace::v2 -> b2Vec2 [b2CollideEdge.cpp <182:2 182:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ReferenceFace::normal -> b2Vec2 [b2CollideEdge.cpp <184:2 184:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ReferenceFace::sideNormal1 -> b2Vec2 [b2CollideEdge.cpp <186:2 186:7>]
REFERENCE_TYPE_USAGE: float32 b2ReferenceFace::sideOffset1 -> float32 [b2CollideEdge.cpp <187:2 187:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ReferenceFace::sideNormal2 -> b2Vec2 [b2CollideEdge.cpp <189:2 189:7>]
REFERENCE_TYPE_USAGE: float32 b2ReferenceFace::sideOffset2 -> float32 [b2CollideEdge.cpp <190:2 190:8>]
REFERENCE_USAGE: void b2ReferenceFace::b2ReferenceFace() -> b2Vec2 b2ReferenceFace::v1 [b2CollideEdge.cpp <178:8 178:22>]
REFERENCE_CALL: void b2ReferenceFace::b2ReferenceFace() -> void b2Vec2::b2Vec2() [b2CollideEdge.cpp <178:8 178:22>]
REFERENCE_USAGE: void b2ReferenceFace::b2ReferenceFace() -> b2Vec2 b2ReferenceFace::v2 [b2CollideEdge.cpp <178:8 178:22>]
REFERENCE_USAGE: void b2ReferenceFace::b2ReferenceFace() -> b2Vec2 b2ReferenceFace::normal [b2CollideEdge.cpp <178:8 178:22>]
REFERENCE_USAGE: void b2ReferenceFace::b2ReferenceFace() -> b2Vec2 b2ReferenceFace::sideNormal1 [b2CollideEdge.cpp <178:8 178:22>]
REFERENCE_USAGE: void b2ReferenceFace::b2ReferenceFace() -> b2Vec2 b2ReferenceFace::sideNormal2 [b2CollideEdge.cpp <178:8 178:22>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void [b2CollideEdge.cpp <196:2 196:5>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void [b2CollideEdge.cpp <230:1 230:4>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold [b2CollideEdge.cpp <196:15 196:24>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold [b2CollideEdge.cpp <230:28 230:37>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EdgeShape [b2CollideEdge.cpp <196:43 196:53>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EdgeShape [b2CollideEdge.cpp <230:56 230:66>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2CollideEdge.cpp <196:69 196:79>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2CollideEdge.cpp <197:44 197:54>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2CollideEdge.cpp <230:82 230:92>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2CollideEdge.cpp <231:48 231:58>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2CollideEdge.cpp <197:12 197:25>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2CollideEdge.cpp <231:16 231:29>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> b2EPAxis [b2CollideEdge.cpp <198:2 198:9>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> b2EPAxis [b2CollideEdge.cpp <620:1 620:8>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> b2EPAxis [b2CollideEdge.cpp <622:2 622:9>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2EPAxis [b2CollideEdge.cpp <199:2 199:9>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2EPAxis [b2CollideEdge.cpp <639:1 639:8>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2EPAxis [b2CollideEdge.cpp <641:2 641:9>]
REFERENCE_TYPE_USAGE: b2TempPolygon b2EPCollider::m_polygonB -> b2TempPolygon [b2CollideEdge.cpp <208:2 208:14>]
REFERENCE_TYPE_USAGE: b2Transform b2EPCollider::m_xf -> b2Transform [b2CollideEdge.cpp <210:2 210:12>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EPCollider::m_centroidB -> b2Vec2 [b2CollideEdge.cpp <211:2 211:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EPCollider::m_v0 -> b2Vec2 [b2CollideEdge.cpp <212:2 212:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EPCollider::m_v1 -> b2Vec2 [b2CollideEdge.cpp <212:2 212:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EPCollider::m_v2 -> b2Vec2 [b2CollideEdge.cpp <212:2 212:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EPCollider::m_v3 -> b2Vec2 [b2CollideEdge.cpp <212:2 212:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EPCollider::m_normal0 -> b2Vec2 [b2CollideEdge.cpp <213:2 213:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EPCollider::m_normal1 -> b2Vec2 [b2CollideEdge.cpp <213:2 213:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EPCollider::m_normal2 -> b2Vec2 [b2CollideEdge.cpp <213:2 213:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EPCollider::m_normal -> b2Vec2 [b2CollideEdge.cpp <214:2 214:7>]
REFERENCE_TYPE_USAGE: b2EPCollider::VertexType b2EPCollider::m_type1 -> b2EPCollider::VertexType [b2CollideEdge.cpp <215:2 215:11>]
REFERENCE_TYPE_USAGE: b2EPCollider::VertexType b2EPCollider::m_type2 -> b2EPCollider::VertexType [b2CollideEdge.cpp <215:2 215:11>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EPCollider::m_lowerLimit -> b2Vec2 [b2CollideEdge.cpp <216:2 216:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EPCollider::m_upperLimit -> b2Vec2 [b2CollideEdge.cpp <216:2 216:7>]
REFERENCE_TYPE_USAGE: float32 b2EPCollider::m_radius -> float32 [b2CollideEdge.cpp <217:2 217:8>]
REFERENCE_TYPE_USAGE: bool b2EPCollider::m_front -> bool [b2CollideEdge.cpp <218:2 218:5>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_CALL: void b2EPCollider::b2EPCollider() -> void b2TempPolygon::b2TempPolygon() [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Transform b2EPCollider::m_xf [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_CALL: void b2EPCollider::b2EPCollider() -> void b2Transform::b2Transform() [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Vec2 b2EPCollider::m_centroidB [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_CALL: void b2EPCollider::b2EPCollider() -> void b2Vec2::b2Vec2() [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Vec2 b2EPCollider::m_v0 [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Vec2 b2EPCollider::m_v1 [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Vec2 b2EPCollider::m_v2 [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Vec2 b2EPCollider::m_v3 [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Vec2 b2EPCollider::m_normal0 [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Vec2 b2EPCollider::m_normal2 [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_USAGE: void b2EPCollider::b2EPCollider() -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <194:8 194:19>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform & b2Transform::operator=(b2Transform &&) [b2CollideEdge.cpp <233:7 233:7>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform b2EPCollider::m_xf [b2CollideEdge.cpp <233:2 233:5>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform b2EPCollider::m_xf [b2CollideEdge.cpp <235:22 235:25>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform b2EPCollider::m_xf [b2CollideEdge.cpp <431:34 431:37>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform b2EPCollider::m_xf [b2CollideEdge.cpp <432:33 432:36>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform b2EPCollider::m_xf [b2CollideEdge.cpp <601:29 601:32>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform b2MulT(const b2Transform &, const b2Transform &) [b2CollideEdge.cpp <233:9 233:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <235:14 235:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <286:14 286:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <287:18 287:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <288:18 288:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <302:14 302:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <303:18 303:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <304:18 304:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <318:14 318:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <319:18 319:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <320:18 320:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <334:14 334:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <335:18 335:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <336:18 336:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <349:18 349:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <353:14 353:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <355:18 355:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <365:18 365:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <369:14 369:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <371:18 371:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <383:18 383:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <388:14 388:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <389:18 389:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <399:18 399:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <404:14 404:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <405:18 405:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <416:17 416:17>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <417:17 417:17>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <421:13 421:13>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <431:26 431:26>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <432:25 432:25>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <524:14 524:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <551:17 551:17>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2CollideEdge.cpp <601:20 601:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_centroidB [b2CollideEdge.cpp <235:2 235:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_centroidB [b2CollideEdge.cpp <248:37 248:47>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_centroidB [b2CollideEdge.cpp <259:30 259:40>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_centroidB [b2CollideEdge.cpp <269:30 269:40>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2CollideEdge.cpp <235:16 235:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2CollideEdge.cpp <431:28 431:32>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2PolygonShape::m_centroid [b2CollideEdge.cpp <235:38 235:47>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <237:7 237:7>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <238:7 238:7>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <239:7 239:7>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <240:7 240:7>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <280:14 280:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <281:18 281:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <282:18 282:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <296:14 296:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <297:18 297:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <298:18 298:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <312:14 312:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <313:18 313:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <314:18 314:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <328:14 328:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <329:18 329:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <330:18 330:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <347:14 347:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <348:18 348:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <354:18 354:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <363:14 363:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <364:18 364:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <370:18 370:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <382:14 382:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <384:18 384:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <390:18 390:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <398:14 398:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <400:18 400:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <406:18 406:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <415:13 415:13>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <422:17 422:17>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <423:17 423:17>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <498:11 498:11>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <504:11 504:11>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <514:10 514:10>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <515:10 515:10>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <516:14 516:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <522:10 522:10>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <523:10 523:10>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <531:11 531:11>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <537:11 537:11>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <545:9 545:9>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <546:9 546:9>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <547:13 547:13>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <579:25 579:25>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <580:24 580:24>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <584:25 584:25>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <585:24 585:24>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CollideEdge.cpp <606:20 606:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v0 [b2CollideEdge.cpp <237:2 237:5>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v0 [b2CollideEdge.cpp <255:25 255:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v0 [b2CollideEdge.cpp <259:44 259:47>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EdgeShape::m_vertex0 [b2CollideEdge.cpp <237:16 237:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v1 [b2CollideEdge.cpp <238:2 238:5>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v1 [b2CollideEdge.cpp <245:24 245:27>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v1 [b2CollideEdge.cpp <248:51 248:54>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v1 [b2CollideEdge.cpp <255:18 255:21>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v1 [b2CollideEdge.cpp <514:12 514:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v1 [b2CollideEdge.cpp <523:12 523:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v1 [b2CollideEdge.cpp <531:13 531:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EdgeShape::m_vertex1 [b2CollideEdge.cpp <238:16 238:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v2 [b2CollideEdge.cpp <239:2 239:5>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v2 [b2CollideEdge.cpp <245:17 245:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v2 [b2CollideEdge.cpp <265:25 265:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v2 [b2CollideEdge.cpp <269:44 269:47>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v2 [b2CollideEdge.cpp <515:12 515:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v2 [b2CollideEdge.cpp <522:12 522:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v2 [b2CollideEdge.cpp <537:13 537:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EdgeShape::m_vertex2 [b2CollideEdge.cpp <239:16 239:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v3 [b2CollideEdge.cpp <240:2 240:5>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_v3 [b2CollideEdge.cpp <265:18 265:21>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EdgeShape::m_vertex3 [b2CollideEdge.cpp <240:16 240:24>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool [b2CollideEdge.cpp <242:2 242:5>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool [b2CollideEdge.cpp <243:2 243:5>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool [b2CollideEdge.cpp <250:2 250:5>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EdgeShape::m_hasVertex0 [b2CollideEdge.cpp <242:27 242:38>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EdgeShape::m_hasVertex3 [b2CollideEdge.cpp <243:27 243:38>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <245:2 245:7>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <255:3 255:8>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [b2CollideEdge.cpp <265:3 265:8>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <245:22 245:22>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <248:49 248:49>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <255:23 255:23>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <259:42 259:42>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <265:23 265:23>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <269:42 269:42>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <593:50 593:50>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Vec2::Normalize() [b2CollideEdge.cpp <246:8 246:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Vec2::Normalize() [b2CollideEdge.cpp <256:9 256:17>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Vec2::Normalize() [b2CollideEdge.cpp <266:9 266:17>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void b2Vec2::Set(float32, float32) [b2CollideEdge.cpp <247:12 247:14>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void b2Vec2::Set(float32, float32) [b2CollideEdge.cpp <257:13 257:15>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void b2Vec2::Set(float32, float32) [b2CollideEdge.cpp <267:13 267:15>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void b2Vec2::Set(float32, float32) [b2CollideEdge.cpp <550:17 550:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <247:2 247:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <248:26 248:34>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <280:16 280:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <286:17 286:25>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <287:21 287:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <288:21 288:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <296:16 296:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <298:20 298:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <302:17 302:25>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <304:21 304:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <312:16 312:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <313:20 313:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <318:17 318:25>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <319:21 319:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <328:16 328:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <329:20 329:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <330:20 330:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <334:17 334:25>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <347:16 347:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <349:21 349:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <353:17 353:25>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <354:20 354:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <355:21 355:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <363:16 363:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <364:20 364:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <365:21 365:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <369:17 369:25>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <370:20 370:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <382:16 382:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <383:21 383:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <388:17 388:25>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <389:21 389:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <390:20 390:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <398:16 398:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <399:21 399:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <400:20 400:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <404:17 404:25>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <406:20 406:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <415:15 415:23>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <416:20 416:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <417:20 417:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <421:16 421:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <422:19 422:27>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <423:19 423:27>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <516:16 516:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal1 [b2CollideEdge.cpp <524:17 524:25>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Vec2::y [b2CollideEdge.cpp <247:22 247:22>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Vec2::y [b2CollideEdge.cpp <257:23 257:23>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Vec2::y [b2CollideEdge.cpp <267:23 267:23>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Vec2::y [b2CollideEdge.cpp <550:31 550:31>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Vec2::x [b2CollideEdge.cpp <247:32 247:32>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Vec2::x [b2CollideEdge.cpp <257:33 257:33>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Vec2::x [b2CollideEdge.cpp <267:33 267:33>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Vec2::x [b2CollideEdge.cpp <550:45 550:45>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <248:2 248:8>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <249:2 249:8>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <459:8 459:14>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <460:8 460:14>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <484:3 484:9>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <487:4 487:10>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 [b2CollideEdge.cpp <591:3 591:9>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <248:20 248:24>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <259:13 259:17>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <269:13 269:17>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <484:23 484:27>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <487:20 487:24>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <552:19 552:23>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <553:19 553:23>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <593:16 593:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal0 [b2CollideEdge.cpp <257:3 257:11>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal0 [b2CollideEdge.cpp <259:19 259:27>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal0 [b2CollideEdge.cpp <281:20 281:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal0 [b2CollideEdge.cpp <297:20 297:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal0 [b2CollideEdge.cpp <320:21 320:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal0 [b2CollideEdge.cpp <336:21 336:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal0 [b2CollideEdge.cpp <348:20 348:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal0 [b2CollideEdge.cpp <371:21 371:29>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <258:13 258:19>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <268:13 268:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal2 [b2CollideEdge.cpp <267:3 267:11>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal2 [b2CollideEdge.cpp <269:19 269:27>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal2 [b2CollideEdge.cpp <282:20 282:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal2 [b2CollideEdge.cpp <303:21 303:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal2 [b2CollideEdge.cpp <314:20 314:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal2 [b2CollideEdge.cpp <335:21 335:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal2 [b2CollideEdge.cpp <384:20 384:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal2 [b2CollideEdge.cpp <405:21 405:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <277:4 277:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <278:8 278:14>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <293:4 293:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <294:8 294:14>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <309:4 309:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <310:8 310:14>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <325:4 325:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <326:8 326:14>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <344:4 344:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <345:8 345:14>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <360:4 360:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <361:8 361:14>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <379:4 379:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <380:8 380:14>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <395:4 395:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <396:8 396:14>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <412:3 412:9>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <413:7 413:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> bool b2EPCollider::m_front [b2CollideEdge.cpp <510:7 510:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <280:5 280:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <286:5 286:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <296:5 296:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <302:5 302:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <312:5 312:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <318:5 318:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <328:5 328:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <334:5 334:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <347:5 347:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <353:5 353:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <363:5 363:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <369:5 369:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <382:5 382:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <388:5 388:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <398:5 398:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <404:5 404:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <415:4 415:11>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <421:4 421:11>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <484:29 484:36>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <487:26 487:33>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <281:5 281:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <287:5 287:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <297:5 297:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <303:5 303:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <313:5 313:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <319:5 319:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <329:5 329:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <335:5 335:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <348:5 348:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <354:5 354:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <364:5 364:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <370:5 370:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <383:5 383:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <389:5 389:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <399:5 399:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <405:5 405:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <416:4 416:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <422:4 422:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <282:5 282:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <288:5 288:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <298:5 298:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <304:5 304:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <314:5 314:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <320:5 320:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <330:5 330:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <336:5 336:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <349:5 349:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <355:5 355:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <365:5 365:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <371:5 371:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <384:5 384:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <390:5 390:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <400:5 400:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <406:5 406:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <417:4 417:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <423:4 423:15>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <286:16 286:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <287:20 287:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <288:20 288:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <302:16 302:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <303:20 303:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <304:20 304:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <318:16 318:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <319:20 319:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <320:20 320:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <334:16 334:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <335:20 335:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <336:20 336:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <349:20 349:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <353:16 353:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <355:20 355:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <365:20 365:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <369:16 369:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <371:20 371:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <383:20 383:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <388:16 388:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <389:20 389:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <399:20 399:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <404:16 404:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <405:20 405:20>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <416:19 416:19>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <417:19 417:19>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <421:15 421:15>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <524:16 524:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <551:19 551:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2TempPolygon::count [b2CollideEdge.cpp <428:13 428:17>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2TempPolygon::count [b2CollideEdge.cpp <485:36 485:40>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2TempPolygon::count [b2CollideEdge.cpp <496:34 496:38>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2TempPolygon::count [b2CollideEdge.cpp <544:34 544:38>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <428:2 428:11>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <431:3 431:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <432:3 432:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <484:39 484:48>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <485:25 485:34>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <487:36 487:45>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <496:23 496:32>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <498:13 498:22>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <504:13 504:22>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <544:23 544:32>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <545:11 545:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <546:11 546:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <547:15 547:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2PolygonShape::m_count [b2CollideEdge.cpp <428:31 428:37>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2PolygonShape::m_count [b2CollideEdge.cpp <429:34 429:40>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 [b2CollideEdge.cpp <429:7 429:11>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 [b2CollideEdge.cpp <483:3 483:7>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 [b2CollideEdge.cpp <485:8 485:12>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 [b2CollideEdge.cpp <495:3 495:7>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 [b2CollideEdge.cpp <496:3 496:7>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 [b2CollideEdge.cpp <558:2 558:6>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 [b2CollideEdge.cpp <588:2 588:6>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 [b2CollideEdge.cpp <589:7 589:11>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2TempPolygon::vertices [b2CollideEdge.cpp <431:14 431:21>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2TempPolygon::vertices [b2CollideEdge.cpp <498:24 498:31>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2TempPolygon::vertices [b2CollideEdge.cpp <504:24 504:31>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2TempPolygon::vertices [b2CollideEdge.cpp <545:22 545:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2TempPolygon::vertices [b2CollideEdge.cpp <546:22 546:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2PolygonShape::m_vertices [b2CollideEdge.cpp <431:50 431:59>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2PolygonShape::m_vertices [b2CollideEdge.cpp <585:36 585:45>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2TempPolygon::normals [b2CollideEdge.cpp <432:14 432:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2TempPolygon::normals [b2CollideEdge.cpp <484:50 484:56>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2TempPolygon::normals [b2CollideEdge.cpp <487:47 487:53>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2TempPolygon::normals [b2CollideEdge.cpp <547:26 547:32>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2CollideEdge.cpp <432:27 432:31>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Rot b2Transform::q [b2CollideEdge.cpp <432:38 432:38>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2PolygonShape::m_normals [b2CollideEdge.cpp <432:51 432:59>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 [] b2PolygonShape::m_normals [b2CollideEdge.cpp <584:37 584:45>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2EPCollider::m_radius [b2CollideEdge.cpp <435:2 435:9>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2EPCollider::m_radius [b2CollideEdge.cpp <447:28 447:35>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2EPCollider::m_radius [b2CollideEdge.cpp <453:74 453:81>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2EPCollider::m_radius [b2CollideEdge.cpp <595:21 595:28>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Shape::m_radius [b2CollideEdge.cpp <435:23 435:30>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2Shape::m_radius [b2CollideEdge.cpp <435:41 435:48>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2Manifold::pointCount [b2CollideEdge.cpp <437:12 437:21>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2Manifold::pointCount [b2CollideEdge.cpp <617:12 617:21>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis [b2CollideEdge.cpp <439:2 439:9>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis [b2CollideEdge.cpp <452:2 452:9>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis [b2CollideEdge.cpp <462:2 462:9>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis b2EPCollider::ComputeEdgeSeparation() [b2CollideEdge.cpp <439:22 439:42>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <442:15 442:18>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <453:18 453:21>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <463:18 463:21>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <478:18 478:21>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <577:18 577:21>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <599:20 599:23>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type::e_unknown [b2CollideEdge.cpp <442:33 442:41>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type::e_unknown [b2CollideEdge.cpp <453:36 453:44>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type::e_unknown [b2CollideEdge.cpp <463:36 463:44>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2EPAxis::separation [b2CollideEdge.cpp <447:15 447:24>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2EPAxis::separation [b2CollideEdge.cpp <453:61 453:70>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2EPAxis::separation [b2CollideEdge.cpp <467:23 467:32>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2EPAxis::separation [b2CollideEdge.cpp <467:61 467:70>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis b2EPCollider::ComputePolygonSeparation() [b2CollideEdge.cpp <452:25 452:48>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void b2EPAxis::b2EPAxis() [b2CollideEdge.cpp <462:11 462:21>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis & b2EPAxis::operator=(const b2EPAxis &) [b2CollideEdge.cpp <465:15 465:15>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis & b2EPAxis::operator=(const b2EPAxis &) [b2CollideEdge.cpp <469:15 469:15>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis & b2EPAxis::operator=(const b2EPAxis &) [b2CollideEdge.cpp <473:15 473:15>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ClipVertex [b2CollideEdge.cpp <476:2 476:13>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ClipVertex [b2CollideEdge.cpp <556:2 556:13>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ClipVertex [b2CollideEdge.cpp <557:2 557:13>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void b2ClipVertex::b2ClipVertex() [b2CollideEdge.cpp <476:15 476:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void b2ClipVertex::b2ClipVertex() [b2CollideEdge.cpp <556:15 556:25>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void b2ClipVertex::b2ClipVertex() [b2CollideEdge.cpp <557:15 557:25>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ReferenceFace [b2CollideEdge.cpp <477:2 477:16>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void b2ReferenceFace::b2ReferenceFace() [b2CollideEdge.cpp <477:18 477:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type::e_edgeA [b2CollideEdge.cpp <478:36 478:42>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type::e_edgeA [b2CollideEdge.cpp <577:36 577:42>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPAxis::Type::e_edgeA [b2CollideEdge.cpp <599:38 599:44>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold::Type b2Manifold::type [b2CollideEdge.cpp <480:13 480:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold::Type b2Manifold::type [b2CollideEdge.cpp <529:13 529:16>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold::Type::e_faceA [b2CollideEdge.cpp <480:32 480:38>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ClipVertex::v [b2CollideEdge.cpp <498:9 498:9>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ClipVertex::v [b2CollideEdge.cpp <504:9 504:9>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ClipVertex::v [b2CollideEdge.cpp <531:9 531:9>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ClipVertex::v [b2CollideEdge.cpp <537:9 537:9>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ClipVertex::v [b2CollideEdge.cpp <593:48 593:48>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ClipVertex::v [b2CollideEdge.cpp <601:50 601:50>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ClipVertex::v [b2CollideEdge.cpp <606:37 606:37>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexA [b2CollideEdge.cpp <499:15 499:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexA [b2CollideEdge.cpp <505:15 505:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexA [b2CollideEdge.cpp <532:15 532:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexA [b2CollideEdge.cpp <538:15 538:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexA [b2CollideEdge.cpp <609:15 609:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexA [b2CollideEdge.cpp <610:45 610:50>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <499:12 499:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <500:12 500:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <501:12 501:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <502:12 502:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <505:12 505:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <506:12 506:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <507:12 507:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <508:12 508:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <532:12 532:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <533:12 533:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <534:12 534:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <535:12 535:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <538:12 538:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <539:12 539:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <540:12 540:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <541:12 541:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <607:12 607:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <607:41 607:42>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <608:12 608:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <608:41 608:42>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <609:12 609:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <609:42 609:43>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <610:12 610:13>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature b2ContactID::cf [b2CollideEdge.cpp <610:42 610:43>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <499:9 499:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <500:9 500:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <501:9 501:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <502:9 502:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <505:9 505:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <506:9 506:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <507:9 507:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <508:9 508:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <532:9 532:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <533:9 533:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <534:9 534:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <535:9 535:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <538:9 538:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <539:9 539:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <540:9 540:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <541:9 541:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <602:29 602:30>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <607:38 607:39>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <608:38 608:39>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <609:39 609:40>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ClipVertex::id [b2CollideEdge.cpp <610:39 610:40>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexB [b2CollideEdge.cpp <500:15 500:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexB [b2CollideEdge.cpp <506:15 506:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexB [b2CollideEdge.cpp <533:15 533:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexB [b2CollideEdge.cpp <539:15 539:20>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexB [b2CollideEdge.cpp <609:45 609:50>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::indexB [b2CollideEdge.cpp <610:15 610:20>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 [b2CollideEdge.cpp <500:36 500:40>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 [b2CollideEdge.cpp <506:36 506:40>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 [b2CollideEdge.cpp <533:36 533:40>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 [b2CollideEdge.cpp <539:36 539:40>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeA [b2CollideEdge.cpp <501:15 501:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeA [b2CollideEdge.cpp <507:15 507:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeA [b2CollideEdge.cpp <534:15 534:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeA [b2CollideEdge.cpp <540:15 540:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeA [b2CollideEdge.cpp <607:15 607:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeA [b2CollideEdge.cpp <608:44 608:48>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature::Type::e_face [b2CollideEdge.cpp <501:41 501:46>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature::Type::e_face [b2CollideEdge.cpp <507:41 507:46>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature::Type::e_face [b2CollideEdge.cpp <535:41 535:46>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature::Type::e_face [b2CollideEdge.cpp <541:41 541:46>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeB [b2CollideEdge.cpp <502:15 502:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeB [b2CollideEdge.cpp <508:15 508:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeB [b2CollideEdge.cpp <535:15 535:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeB [b2CollideEdge.cpp <541:15 541:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeB [b2CollideEdge.cpp <607:44 607:48>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> uint8 b2ContactFeature::typeB [b2CollideEdge.cpp <608:15 608:19>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature::Type::e_vertex [b2CollideEdge.cpp <502:41 502:48>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature::Type::e_vertex [b2CollideEdge.cpp <508:41 508:48>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature::Type::e_vertex [b2CollideEdge.cpp <534:41 534:48>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactFeature::Type::e_vertex [b2CollideEdge.cpp <540:41 540:48>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i1 [b2CollideEdge.cpp <512:7 512:8>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i1 [b2CollideEdge.cpp <520:7 520:8>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i1 [b2CollideEdge.cpp <543:6 543:7>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i1 [b2CollideEdge.cpp <544:14 544:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i1 [b2CollideEdge.cpp <544:45 544:46>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i1 [b2CollideEdge.cpp <545:34 545:35>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i1 [b2CollideEdge.cpp <547:37 547:38>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i1 [b2CollideEdge.cpp <561:79 561:80>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i1 [b2CollideEdge.cpp <584:50 584:51>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i1 [b2CollideEdge.cpp <585:50 585:51>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i2 [b2CollideEdge.cpp <513:7 513:8>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i2 [b2CollideEdge.cpp <521:7 521:8>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i2 [b2CollideEdge.cpp <544:6 544:7>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i2 [b2CollideEdge.cpp <546:34 546:35>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ReferenceFace::i2 [b2CollideEdge.cpp <569:88 569:89>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::v1 [b2CollideEdge.cpp <514:7 514:8>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::v1 [b2CollideEdge.cpp <522:7 522:8>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::v1 [b2CollideEdge.cpp <545:6 545:7>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::v1 [b2CollideEdge.cpp <552:44 552:45>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::v1 [b2CollideEdge.cpp <580:29 580:30>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::v1 [b2CollideEdge.cpp <593:55 593:56>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::v2 [b2CollideEdge.cpp <515:7 515:8>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::v2 [b2CollideEdge.cpp <523:7 523:8>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::v2 [b2CollideEdge.cpp <546:6 546:7>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::v2 [b2CollideEdge.cpp <553:44 553:45>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::normal [b2CollideEdge.cpp <516:7 516:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::normal [b2CollideEdge.cpp <524:7 524:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::normal [b2CollideEdge.cpp <547:6 547:11>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::normal [b2CollideEdge.cpp <550:24 550:29>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::normal [b2CollideEdge.cpp <550:38 550:43>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::normal [b2CollideEdge.cpp <579:30 579:35>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::normal [b2CollideEdge.cpp <593:25 593:30>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold::Type::e_faceB [b2CollideEdge.cpp <529:32 529:38>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2EPAxis::index [b2CollideEdge.cpp <533:55 533:59>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2EPAxis::index [b2CollideEdge.cpp <539:55 539:59>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2EPAxis::index [b2CollideEdge.cpp <543:23 543:27>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::sideNormal1 [b2CollideEdge.cpp <550:5 550:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::sideNormal1 [b2CollideEdge.cpp <551:23 551:33>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::sideNormal1 [b2CollideEdge.cpp <552:28 552:38>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::sideNormal1 [b2CollideEdge.cpp <561:47 561:57>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::sideNormal2 [b2CollideEdge.cpp <551:5 551:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::sideNormal2 [b2CollideEdge.cpp <553:28 553:38>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ReferenceFace::sideNormal2 [b2CollideEdge.cpp <569:56 569:66>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2ReferenceFace::sideOffset1 [b2CollideEdge.cpp <552:5 552:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2ReferenceFace::sideOffset1 [b2CollideEdge.cpp <561:63 561:73>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2ReferenceFace::sideOffset2 [b2CollideEdge.cpp <553:5 553:15>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> float32 b2ReferenceFace::sideOffset2 [b2CollideEdge.cpp <569:72 569:82>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) [b2CollideEdge.cpp <561:7 561:25>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) [b2CollideEdge.cpp <569:7 569:25>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Manifold::localNormal [b2CollideEdge.cpp <579:13 579:23>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Manifold::localNormal [b2CollideEdge.cpp <584:13 584:23>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Manifold::localPoint [b2CollideEdge.cpp <580:13 580:22>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2Manifold::localPoint [b2CollideEdge.cpp <585:13 585:22>]
REFERENCE_TYPE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ManifoldPoint [b2CollideEdge.cpp <597:4 597:18>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ManifoldPoint [] b2Manifold::points [b2CollideEdge.cpp <597:36 597:41>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ManifoldPoint::localPoint [b2CollideEdge.cpp <601:9 601:18>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2ManifoldPoint::localPoint [b2CollideEdge.cpp <606:9 606:18>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) [b2CollideEdge.cpp <601:22 601:27>]
REFERENCE_CALL: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID & b2ContactID::operator=(const b2ContactID &) [b2CollideEdge.cpp <602:12 602:12>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ManifoldPoint::id [b2CollideEdge.cpp <602:9 602:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ManifoldPoint::id [b2CollideEdge.cpp <607:9 607:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ManifoldPoint::id [b2CollideEdge.cpp <608:9 608:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ManifoldPoint::id [b2CollideEdge.cpp <609:9 609:10>]
REFERENCE_USAGE: void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2ContactID b2ManifoldPoint::id [b2CollideEdge.cpp <610:9 610:10>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> void b2EPAxis::b2EPAxis() [b2CollideEdge.cpp <622:11 622:14>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <623:7 623:10>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> b2EPAxis::Type::e_edgeA [b2CollideEdge.cpp <623:24 623:30>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> int32 b2EPAxis::index [b2CollideEdge.cpp <624:7 624:11>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> bool b2EPCollider::m_front [b2CollideEdge.cpp <624:15 624:21>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> float32 b2EPAxis::separation [b2CollideEdge.cpp <625:7 625:16>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> float32 b2EPAxis::separation [b2CollideEdge.cpp <630:16 630:25>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> float32 b2EPAxis::separation [b2CollideEdge.cpp <632:9 632:18>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> int32 [b2CollideEdge.cpp <627:7 627:11>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> int32 b2TempPolygon::count [b2CollideEdge.cpp <627:35 627:39>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <627:24 627:33>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <629:31 629:40>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> float32 [b2CollideEdge.cpp <629:3 629:9>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <629:15 629:19>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <629:21 629:28>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <629:54 629:54>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> b2Vec2 [] b2TempPolygon::vertices [b2CollideEdge.cpp <629:42 629:49>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> b2Vec2 b2EPCollider::m_v1 [b2CollideEdge.cpp <629:56 629:59>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputeEdgeSeparation() -> void b2EPAxis::b2EPAxis(b2EPAxis &&) [b2CollideEdge.cpp <636:9 636:12>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> void b2EPAxis::b2EPAxis() [b2CollideEdge.cpp <641:11 641:14>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <642:7 642:10>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <659:9 659:12>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2EPAxis::Type b2EPAxis::type [b2CollideEdge.cpp <683:9 683:12>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2EPAxis::Type::e_unknown [b2CollideEdge.cpp <642:24 642:32>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> int32 b2EPAxis::index [b2CollideEdge.cpp <643:7 643:11>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> int32 b2EPAxis::index [b2CollideEdge.cpp <660:9 660:13>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> int32 b2EPAxis::index [b2CollideEdge.cpp <684:9 684:13>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2EPAxis::separation [b2CollideEdge.cpp <644:7 644:16>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2EPAxis::separation [b2CollideEdge.cpp <661:9 661:18>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2EPAxis::separation [b2CollideEdge.cpp <681:16 681:25>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2EPAxis::separation [b2CollideEdge.cpp <685:9 685:18>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 [b2CollideEdge.cpp <646:2 646:7>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 [b2CollideEdge.cpp <650:3 650:8>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> void b2Vec2::b2Vec2(float32, float32) [b2CollideEdge.cpp <646:9 646:12>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2Vec2::y [b2CollideEdge.cpp <646:24 646:24>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <646:15 646:22>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <646:27 646:34>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <668:32 668:39>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 b2EPCollider::m_normal [b2CollideEdge.cpp <675:32 675:39>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2Vec2::x [b2CollideEdge.cpp <646:36 646:36>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> int32 [b2CollideEdge.cpp <648:7 648:11>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> int32 b2TempPolygon::count [b2CollideEdge.cpp <648:35 648:39>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <648:24 648:33>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <650:15 650:24>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <652:25 652:34>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2TempPolygon b2EPCollider::m_polygonB [b2CollideEdge.cpp <653:25 653:34>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 b2Vec2::operator-() const [b2CollideEdge.cpp <650:14 650:14>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 [] b2TempPolygon::normals [b2CollideEdge.cpp <650:26 650:32>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 [b2CollideEdge.cpp <652:3 652:9>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 [b2CollideEdge.cpp <653:3 653:9>]
REFERENCE_TYPE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 [b2CollideEdge.cpp <654:3 654:9>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <652:16 652:20>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <653:16 653:20>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <666:7 666:11>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <668:8 668:12>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <675:8 675:12>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <652:48 652:48>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <653:48 653:48>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <668:16 668:16>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CollideEdge.cpp <675:16 675:16>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 [] b2TempPolygon::vertices [b2CollideEdge.cpp <652:36 652:43>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 [] b2TempPolygon::vertices [b2CollideEdge.cpp <653:36 653:43>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 b2EPCollider::m_v1 [b2CollideEdge.cpp <652:50 652:53>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 b2EPCollider::m_v2 [b2CollideEdge.cpp <653:50 653:53>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float b2Min<float>(float, float) [b2CollideEdge.cpp <654:15 654:19>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> float32 b2EPCollider::m_radius [b2CollideEdge.cpp <656:11 656:18>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2EPAxis::Type::e_edgeB [b2CollideEdge.cpp <659:26 659:32>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2EPAxis::Type::e_edgeB [b2CollideEdge.cpp <683:26 683:32>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> void b2EPAxis::b2EPAxis(b2EPAxis &&) [b2CollideEdge.cpp <662:11 662:14>]
REFERENCE_CALL: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> void b2EPAxis::b2EPAxis(b2EPAxis &&) [b2CollideEdge.cpp <689:9 689:12>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 b2EPCollider::m_upperLimit [b2CollideEdge.cpp <668:18 668:29>]
REFERENCE_USAGE: b2EPAxis b2EPCollider::ComputePolygonSeparation() -> b2Vec2 b2EPCollider::m_lowerLimit [b2CollideEdge.cpp <675:18 675:29>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EPCollider [b2CollideEdge.cpp <696:2 696:13>]
REFERENCE_CALL: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void b2EPCollider::b2EPCollider() [b2CollideEdge.cpp <696:15 696:22>]
REFERENCE_CALL: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void b2EPCollider::Collide(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2CollideEdge.cpp <697:11 697:17>]
LOCAL_SYMBOL: b2BlockAllocator.h<36:1> [b2BlockAllocator.h <36:1 36:1>]
LOCAL_SYMBOL: b2BlockAllocator.h<36:1> [b2BlockAllocator.h <60:1 60:1>]
LOCAL_SYMBOL: b2BlockAllocator.h<42:23> [b2BlockAllocator.h <42:23 42:26>]
LOCAL_SYMBOL: b2BlockAllocator.h<45:18> [b2BlockAllocator.h <45:18 45:18>]
LOCAL_SYMBOL: b2BlockAllocator.h<45:27> [b2BlockAllocator.h <45:27 45:30>]
LOCAL_SYMBOL: b2CircleShape.h<26:1> [b2CircleShape.h <26:1 26:1>]
LOCAL_SYMBOL: b2CircleShape.h<26:1> [b2CircleShape.h <51:1 51:1>]
LOCAL_SYMBOL: b2CircleShape.h<31:35> [b2CircleShape.h <31:35 31:43>]
LOCAL_SYMBOL: b2CircleShape.h<37:36> [b2CircleShape.h <37:36 37:44>]
LOCAL_SYMBOL: b2CircleShape.h<37:61> [b2CircleShape.h <37:61 37:61>]
LOCAL_SYMBOL: b2CircleShape.h<40:32> [b2CircleShape.h <40:32 40:37>]
LOCAL_SYMBOL: b2CircleShape.h<40:62> [b2CircleShape.h <40:62 40:66>]
LOCAL_SYMBOL: b2CircleShape.h<41:24> [b2CircleShape.h <41:24 41:32>]
LOCAL_SYMBOL: b2CircleShape.h<41:41> [b2CircleShape.h <41:41 41:50>]
LOCAL_SYMBOL: b2CircleShape.h<44:27> [b2CircleShape.h <44:27 44:30>]
LOCAL_SYMBOL: b2CircleShape.h<44:52> [b2CircleShape.h <44:52 44:60>]
LOCAL_SYMBOL: b2CircleShape.h<44:69> [b2CircleShape.h <44:69 44:78>]
LOCAL_SYMBOL: b2CircleShape.h<47:31> [b2CircleShape.h <47:31 47:38>]
LOCAL_SYMBOL: b2CircleShape.h<47:49> [b2CircleShape.h <47:49 47:55>]
LOCAL_SYMBOL: b2CircleShape.h<54:1> [b2CircleShape.h <54:1 54:1>]
LOCAL_SYMBOL: b2CircleShape.h<54:1> [b2CircleShape.h <58:1 58:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<100:3> [b2CollideEdge.cpp <100:3 100:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<100:3> [b2CollideEdge.cpp <111:3 111:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<101:11> [b2CollideEdge.cpp <101:11 101:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<101:11> [b2CollideEdge.cpp <103:16 103:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<102:11> [b2CollideEdge.cpp <102:11 102:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<102:11> [b2CollideEdge.cpp <103:21 103:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<102:11> [b2CollideEdge.cpp <104:31 104:32>]
LOCAL_SYMBOL: b2CollideEdge.cpp<103:11> [b2CollideEdge.cpp <103:11 103:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<103:11> [b2CollideEdge.cpp <104:23 104:24>]
LOCAL_SYMBOL: b2CollideEdge.cpp<104:12> [b2CollideEdge.cpp <104:12 104:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<104:12> [b2CollideEdge.cpp <107:8 107:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<108:4> [b2CollideEdge.cpp <108:4 108:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<108:4> [b2CollideEdge.cpp <110:4 110:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<126:10> [b2CollideEdge.cpp <126:10 126:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<126:10> [b2CollideEdge.cpp <127:11 127:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<126:10> [b2CollideEdge.cpp <128:21 128:23>]
LOCAL_SYMBOL: b2CollideEdge.cpp<128:9> [b2CollideEdge.cpp <128:9 128:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<128:9> [b2CollideEdge.cpp <129:17 129:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<129:9> [b2CollideEdge.cpp <129:9 129:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<129:9> [b2CollideEdge.cpp <130:21 130:21>]
LOCAL_SYMBOL: b2CollideEdge.cpp<129:9> [b2CollideEdge.cpp <130:24 130:24>]
LOCAL_SYMBOL: b2CollideEdge.cpp<130:10> [b2CollideEdge.cpp <130:10 130:11>]
LOCAL_SYMBOL: b2CollideEdge.cpp<130:10> [b2CollideEdge.cpp <131:6 131:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<132:2> [b2CollideEdge.cpp <132:2 132:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<132:2> [b2CollideEdge.cpp <134:2 134:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<136:9> [b2CollideEdge.cpp <136:9 136:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<136:9> [b2CollideEdge.cpp <137:12 137:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<136:9> [b2CollideEdge.cpp <139:3 139:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<136:9> [b2CollideEdge.cpp <139:10 139:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<136:9> [b2CollideEdge.cpp <139:16 139:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<136:9> [b2CollideEdge.cpp <141:2 141:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<136:9> [b2CollideEdge.cpp <147:26 147:26>]
LOCAL_SYMBOL: b2CollideEdge.cpp<138:2> [b2CollideEdge.cpp <138:2 138:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<138:2> [b2CollideEdge.cpp <140:2 140:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<156:1> [b2CollideEdge.cpp <156:1 156:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<156:1> [b2CollideEdge.cpp <167:1 167:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<158:2> [b2CollideEdge.cpp <158:2 158:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<158:2> [b2CollideEdge.cpp <162:2 162:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<171:1> [b2CollideEdge.cpp <171:1 171:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<171:1> [b2CollideEdge.cpp <175:1 175:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<179:1> [b2CollideEdge.cpp <179:1 179:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<179:1> [b2CollideEdge.cpp <191:1 191:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<195:1> [b2CollideEdge.cpp <195:1 195:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<195:1> [b2CollideEdge.cpp <219:1 219:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<196:27> [b2CollideEdge.cpp <196:27 196:34>]
LOCAL_SYMBOL: b2CollideEdge.cpp<196:56> [b2CollideEdge.cpp <196:56 196:60>]
LOCAL_SYMBOL: b2CollideEdge.cpp<196:82> [b2CollideEdge.cpp <196:82 196:84>]
LOCAL_SYMBOL: b2CollideEdge.cpp<197:28> [b2CollideEdge.cpp <197:28 197:35>]
LOCAL_SYMBOL: b2CollideEdge.cpp<197:57> [b2CollideEdge.cpp <197:57 197:59>]
LOCAL_SYMBOL: b2CollideEdge.cpp<202:2> [b2CollideEdge.cpp <202:2 202:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<202:2> [b2CollideEdge.cpp <206:2 206:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:40> [b2CollideEdge.cpp <230:40 230:47>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:40> [b2CollideEdge.cpp <437:2 437:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:40> [b2CollideEdge.cpp <480:3 480:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:40> [b2CollideEdge.cpp <529:3 529:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:40> [b2CollideEdge.cpp <579:3 579:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:40> [b2CollideEdge.cpp <580:3 580:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:40> [b2CollideEdge.cpp <584:3 584:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:40> [b2CollideEdge.cpp <585:3 585:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:40> [b2CollideEdge.cpp <597:26 597:33>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:40> [b2CollideEdge.cpp <617:2 617:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:69> [b2CollideEdge.cpp <230:69 230:73>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:69> [b2CollideEdge.cpp <237:9 237:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:69> [b2CollideEdge.cpp <238:9 238:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:69> [b2CollideEdge.cpp <239:9 239:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:69> [b2CollideEdge.cpp <240:9 240:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:69> [b2CollideEdge.cpp <242:20 242:24>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:69> [b2CollideEdge.cpp <243:20 243:24>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:69> [b2CollideEdge.cpp <435:34 435:38>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:95> [b2CollideEdge.cpp <230:95 230:97>]
LOCAL_SYMBOL: b2CollideEdge.cpp<230:95> [b2CollideEdge.cpp <233:16 233:18>]
LOCAL_SYMBOL: b2CollideEdge.cpp<231:32> [b2CollideEdge.cpp <231:32 231:39>]
LOCAL_SYMBOL: b2CollideEdge.cpp<231:32> [b2CollideEdge.cpp <235:28 235:35>]
LOCAL_SYMBOL: b2CollideEdge.cpp<231:32> [b2CollideEdge.cpp <428:21 428:28>]
LOCAL_SYMBOL: b2CollideEdge.cpp<231:32> [b2CollideEdge.cpp <429:24 429:31>]
LOCAL_SYMBOL: b2CollideEdge.cpp<231:32> [b2CollideEdge.cpp <431:40 431:47>]
LOCAL_SYMBOL: b2CollideEdge.cpp<231:32> [b2CollideEdge.cpp <432:41 432:48>]
LOCAL_SYMBOL: b2CollideEdge.cpp<231:32> [b2CollideEdge.cpp <435:13 435:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<231:32> [b2CollideEdge.cpp <584:27 584:34>]
LOCAL_SYMBOL: b2CollideEdge.cpp<231:32> [b2CollideEdge.cpp <585:26 585:33>]
LOCAL_SYMBOL: b2CollideEdge.cpp<231:61> [b2CollideEdge.cpp <231:61 231:63>]
LOCAL_SYMBOL: b2CollideEdge.cpp<231:61> [b2CollideEdge.cpp <233:21 233:23>]
LOCAL_SYMBOL: b2CollideEdge.cpp<232:1> [b2CollideEdge.cpp <232:1 232:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<232:1> [b2CollideEdge.cpp <618:1 618:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<242:7> [b2CollideEdge.cpp <242:7 242:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<242:7> [b2CollideEdge.cpp <253:6 253:15>]
LOCAL_SYMBOL: b2CollideEdge.cpp<242:7> [b2CollideEdge.cpp <273:6 273:15>]
LOCAL_SYMBOL: b2CollideEdge.cpp<242:7> [b2CollideEdge.cpp <340:11 340:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<243:7> [b2CollideEdge.cpp <243:7 243:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<243:7> [b2CollideEdge.cpp <263:6 263:15>]
LOCAL_SYMBOL: b2CollideEdge.cpp<243:7> [b2CollideEdge.cpp <273:20 273:29>]
LOCAL_SYMBOL: b2CollideEdge.cpp<243:7> [b2CollideEdge.cpp <375:11 375:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<245:9> [b2CollideEdge.cpp <245:9 245:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<245:9> [b2CollideEdge.cpp <246:2 246:6>]
LOCAL_SYMBOL: b2CollideEdge.cpp<245:9> [b2CollideEdge.cpp <247:16 247:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<245:9> [b2CollideEdge.cpp <247:26 247:30>]
LOCAL_SYMBOL: b2CollideEdge.cpp<245:9> [b2CollideEdge.cpp <258:28 258:32>]
LOCAL_SYMBOL: b2CollideEdge.cpp<245:9> [b2CollideEdge.cpp <268:21 268:25>]
LOCAL_SYMBOL: b2CollideEdge.cpp<248:10> [b2CollideEdge.cpp <248:10 248:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<248:10> [b2CollideEdge.cpp <277:33 277:39>]
LOCAL_SYMBOL: b2CollideEdge.cpp<248:10> [b2CollideEdge.cpp <293:34 293:40>]
LOCAL_SYMBOL: b2CollideEdge.cpp<248:10> [b2CollideEdge.cpp <309:53 309:59>]
LOCAL_SYMBOL: b2CollideEdge.cpp<248:10> [b2CollideEdge.cpp <325:33 325:39>]
LOCAL_SYMBOL: b2CollideEdge.cpp<248:10> [b2CollideEdge.cpp <344:33 344:39>]
LOCAL_SYMBOL: b2CollideEdge.cpp<248:10> [b2CollideEdge.cpp <360:33 360:39>]
LOCAL_SYMBOL: b2CollideEdge.cpp<248:10> [b2CollideEdge.cpp <379:14 379:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<248:10> [b2CollideEdge.cpp <395:14 395:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<248:10> [b2CollideEdge.cpp <412:13 412:19>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:10> [b2CollideEdge.cpp <249:10 249:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:10> [b2CollideEdge.cpp <259:3 259:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:10> [b2CollideEdge.cpp <277:14 277:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:10> [b2CollideEdge.cpp <293:14 293:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:10> [b2CollideEdge.cpp <309:34 309:40>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:10> [b2CollideEdge.cpp <325:14 325:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:10> [b2CollideEdge.cpp <344:14 344:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:10> [b2CollideEdge.cpp <360:14 360:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:26> [b2CollideEdge.cpp <249:26 249:32>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:26> [b2CollideEdge.cpp <269:3 269:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:26> [b2CollideEdge.cpp <277:52 277:58>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:26> [b2CollideEdge.cpp <293:53 293:59>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:26> [b2CollideEdge.cpp <309:14 309:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:26> [b2CollideEdge.cpp <325:52 325:58>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:26> [b2CollideEdge.cpp <379:33 379:39>]
LOCAL_SYMBOL: b2CollideEdge.cpp<249:26> [b2CollideEdge.cpp <395:33 395:39>]
LOCAL_SYMBOL: b2CollideEdge.cpp<250:24> [b2CollideEdge.cpp <250:24 250:30>]
LOCAL_SYMBOL: b2CollideEdge.cpp<250:24> [b2CollideEdge.cpp <268:3 268:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<250:24> [b2CollideEdge.cpp <275:18 275:24>]
LOCAL_SYMBOL: b2CollideEdge.cpp<250:24> [b2CollideEdge.cpp <307:12 307:18>]
LOCAL_SYMBOL: b2CollideEdge.cpp<250:24> [b2CollideEdge.cpp <377:7 377:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<250:7> [b2CollideEdge.cpp <250:7 250:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<250:7> [b2CollideEdge.cpp <258:3 258:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<250:7> [b2CollideEdge.cpp <275:7 275:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<250:7> [b2CollideEdge.cpp <291:12 291:18>]
LOCAL_SYMBOL: b2CollideEdge.cpp<250:7> [b2CollideEdge.cpp <342:7 342:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<254:2> [b2CollideEdge.cpp <254:2 254:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<254:2> [b2CollideEdge.cpp <260:2 260:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<255:10> [b2CollideEdge.cpp <255:10 255:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<255:10> [b2CollideEdge.cpp <256:3 256:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<255:10> [b2CollideEdge.cpp <257:17 257:21>]
LOCAL_SYMBOL: b2CollideEdge.cpp<255:10> [b2CollideEdge.cpp <257:27 257:31>]
LOCAL_SYMBOL: b2CollideEdge.cpp<255:10> [b2CollideEdge.cpp <258:21 258:25>]
LOCAL_SYMBOL: b2CollideEdge.cpp<264:2> [b2CollideEdge.cpp <264:2 264:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<264:2> [b2CollideEdge.cpp <270:2 270:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<265:10> [b2CollideEdge.cpp <265:10 265:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<265:10> [b2CollideEdge.cpp <266:3 266:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<265:10> [b2CollideEdge.cpp <267:17 267:21>]
LOCAL_SYMBOL: b2CollideEdge.cpp<265:10> [b2CollideEdge.cpp <267:27 267:31>]
LOCAL_SYMBOL: b2CollideEdge.cpp<265:10> [b2CollideEdge.cpp <268:28 268:32>]
LOCAL_SYMBOL: b2CollideEdge.cpp<274:2> [b2CollideEdge.cpp <274:2 274:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<274:2> [b2CollideEdge.cpp <339:2 339:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<276:3> [b2CollideEdge.cpp <276:3 276:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<276:3> [b2CollideEdge.cpp <290:3 290:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<279:4> [b2CollideEdge.cpp <279:4 279:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<279:4> [b2CollideEdge.cpp <283:4 283:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <27:41 27:48>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <31:2 31:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <77:3 77:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <78:3 78:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <79:3 79:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <80:3 80:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <81:3 81:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <82:3 82:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <83:3 83:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <115:3 115:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <116:3 116:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <117:3 117:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <118:3 118:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <119:3 119:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <120:3 120:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <121:3 121:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <145:2 145:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <146:2 146:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <147:2 147:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <148:2 148:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <149:2 149:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <150:2 150:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<27:41> [b2CollideEdge.cpp <151:2 151:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<285:4> [b2CollideEdge.cpp <285:4 285:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<285:4> [b2CollideEdge.cpp <289:4 289:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<28:27> [b2CollideEdge.cpp <28:27 28:31>]
LOCAL_SYMBOL: b2CollideEdge.cpp<28:27> [b2CollideEdge.cpp <36:13 36:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<28:27> [b2CollideEdge.cpp <36:35 36:39>]
LOCAL_SYMBOL: b2CollideEdge.cpp<28:27> [b2CollideEdge.cpp <43:19 43:23>]
LOCAL_SYMBOL: b2CollideEdge.cpp<28:27> [b2CollideEdge.cpp <61:7 61:11>]
LOCAL_SYMBOL: b2CollideEdge.cpp<28:27> [b2CollideEdge.cpp <63:16 63:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<28:27> [b2CollideEdge.cpp <99:7 99:11>]
LOCAL_SYMBOL: b2CollideEdge.cpp<28:27> [b2CollideEdge.cpp <101:16 101:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<28:53> [b2CollideEdge.cpp <28:53 28:55>]
LOCAL_SYMBOL: b2CollideEdge.cpp<28:53> [b2CollideEdge.cpp <34:20 34:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<292:3> [b2CollideEdge.cpp <292:3 292:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<292:3> [b2CollideEdge.cpp <306:3 306:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<295:4> [b2CollideEdge.cpp <295:4 295:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<295:4> [b2CollideEdge.cpp <299:4 299:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<29:29> [b2CollideEdge.cpp <29:29 29:35>]
LOCAL_SYMBOL: b2CollideEdge.cpp<29:29> [b2CollideEdge.cpp <34:36 34:42>]
LOCAL_SYMBOL: b2CollideEdge.cpp<29:29> [b2CollideEdge.cpp <43:37 43:43>]
LOCAL_SYMBOL: b2CollideEdge.cpp<29:29> [b2CollideEdge.cpp <83:36 83:42>]
LOCAL_SYMBOL: b2CollideEdge.cpp<29:29> [b2CollideEdge.cpp <121:36 121:42>]
LOCAL_SYMBOL: b2CollideEdge.cpp<29:29> [b2CollideEdge.cpp <151:35 151:41>]
LOCAL_SYMBOL: b2CollideEdge.cpp<29:57> [b2CollideEdge.cpp <29:57 29:59>]
LOCAL_SYMBOL: b2CollideEdge.cpp<29:57> [b2CollideEdge.cpp <34:31 34:33>]
LOCAL_SYMBOL: b2CollideEdge.cpp<301:4> [b2CollideEdge.cpp <301:4 301:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<301:4> [b2CollideEdge.cpp <305:4 305:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<308:3> [b2CollideEdge.cpp <308:3 308:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<308:3> [b2CollideEdge.cpp <322:3 322:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<30:1> [b2CollideEdge.cpp <30:1 30:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<30:1> [b2CollideEdge.cpp <152:1 152:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<311:4> [b2CollideEdge.cpp <311:4 311:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<311:4> [b2CollideEdge.cpp <315:4 315:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<317:4> [b2CollideEdge.cpp <317:4 317:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<317:4> [b2CollideEdge.cpp <321:4 321:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<324:3> [b2CollideEdge.cpp <324:3 324:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<324:3> [b2CollideEdge.cpp <338:3 338:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<327:4> [b2CollideEdge.cpp <327:4 327:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<327:4> [b2CollideEdge.cpp <331:4 331:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<333:4> [b2CollideEdge.cpp <333:4 333:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<333:4> [b2CollideEdge.cpp <337:4 337:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<341:2> [b2CollideEdge.cpp <341:2 341:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<341:2> [b2CollideEdge.cpp <374:2 374:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<343:3> [b2CollideEdge.cpp <343:3 343:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<343:3> [b2CollideEdge.cpp <357:3 357:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<346:4> [b2CollideEdge.cpp <346:4 346:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<346:4> [b2CollideEdge.cpp <350:4 350:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<34:9> [b2CollideEdge.cpp <34:9 34:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<34:9> [b2CollideEdge.cpp <40:27 40:27>]
LOCAL_SYMBOL: b2CollideEdge.cpp<34:9> [b2CollideEdge.cpp <41:23 41:23>]
LOCAL_SYMBOL: b2CollideEdge.cpp<34:9> [b2CollideEdge.cpp <53:14 53:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<34:9> [b2CollideEdge.cpp <66:32 66:32>]
LOCAL_SYMBOL: b2CollideEdge.cpp<34:9> [b2CollideEdge.cpp <91:14 91:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<34:9> [b2CollideEdge.cpp <104:27 104:27>]
LOCAL_SYMBOL: b2CollideEdge.cpp<34:9> [b2CollideEdge.cpp <129:13 129:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<34:9> [b2CollideEdge.cpp <137:15 137:15>]
LOCAL_SYMBOL: b2CollideEdge.cpp<352:4> [b2CollideEdge.cpp <352:4 352:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<352:4> [b2CollideEdge.cpp <356:4 356:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<359:3> [b2CollideEdge.cpp <359:3 359:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<359:3> [b2CollideEdge.cpp <373:3 373:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<362:4> [b2CollideEdge.cpp <362:4 362:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<362:4> [b2CollideEdge.cpp <366:4 366:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<368:4> [b2CollideEdge.cpp <368:4 368:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<368:4> [b2CollideEdge.cpp <372:4 372:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:31> [b2CollideEdge.cpp <36:31 36:31>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:31> [b2CollideEdge.cpp <37:13 37:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:31> [b2CollideEdge.cpp <40:23 40:23>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:31> [b2CollideEdge.cpp <90:14 90:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:31> [b2CollideEdge.cpp <102:16 102:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:31> [b2CollideEdge.cpp <128:41 128:41>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:9> [b2CollideEdge.cpp <36:9 36:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:9> [b2CollideEdge.cpp <37:17 37:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:9> [b2CollideEdge.cpp <41:27 41:27>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:9> [b2CollideEdge.cpp <52:14 52:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:9> [b2CollideEdge.cpp <64:16 64:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:9> [b2CollideEdge.cpp <128:33 128:33>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:9> [b2CollideEdge.cpp <137:19 137:19>]
LOCAL_SYMBOL: b2CollideEdge.cpp<36:9> [b2CollideEdge.cpp <148:25 148:25>]
LOCAL_SYMBOL: b2CollideEdge.cpp<376:2> [b2CollideEdge.cpp <376:2 376:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<376:2> [b2CollideEdge.cpp <409:2 409:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<378:3> [b2CollideEdge.cpp <378:3 378:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<378:3> [b2CollideEdge.cpp <392:3 392:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<37:9> [b2CollideEdge.cpp <37:9 37:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<37:9> [b2CollideEdge.cpp <40:20 40:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<37:9> [b2CollideEdge.cpp <41:20 41:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<37:9> [b2CollideEdge.cpp <126:22 126:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<37:9> [b2CollideEdge.cpp <126:25 126:25>]
LOCAL_SYMBOL: b2CollideEdge.cpp<37:9> [b2CollideEdge.cpp <136:12 136:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<37:9> [b2CollideEdge.cpp <136:17 136:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<381:4> [b2CollideEdge.cpp <381:4 381:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<381:4> [b2CollideEdge.cpp <385:4 385:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<387:4> [b2CollideEdge.cpp <387:4 387:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<387:4> [b2CollideEdge.cpp <391:4 391:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<394:3> [b2CollideEdge.cpp <394:3 394:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<394:3> [b2CollideEdge.cpp <408:3 408:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<397:4> [b2CollideEdge.cpp <397:4 397:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<397:4> [b2CollideEdge.cpp <401:4 401:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<403:4> [b2CollideEdge.cpp <403:4 403:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<403:4> [b2CollideEdge.cpp <407:4 407:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<40:10> [b2CollideEdge.cpp <40:10 40:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<40:10> [b2CollideEdge.cpp <88:6 88:6>]
LOCAL_SYMBOL: b2CollideEdge.cpp<40:10> [b2CollideEdge.cpp <128:29 128:29>]
LOCAL_SYMBOL: b2CollideEdge.cpp<411:2> [b2CollideEdge.cpp <411:2 411:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<411:2> [b2CollideEdge.cpp <425:2 425:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<414:3> [b2CollideEdge.cpp <414:3 414:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<414:3> [b2CollideEdge.cpp <418:3 418:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<41:10> [b2CollideEdge.cpp <41:10 41:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<41:10> [b2CollideEdge.cpp <50:6 50:6>]
LOCAL_SYMBOL: b2CollideEdge.cpp<41:10> [b2CollideEdge.cpp <128:37 128:37>]
LOCAL_SYMBOL: b2CollideEdge.cpp<420:3> [b2CollideEdge.cpp <420:3 420:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<420:3> [b2CollideEdge.cpp <424:3 424:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<429:13> [b2CollideEdge.cpp <429:13 429:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<429:13> [b2CollideEdge.cpp <429:20 429:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<429:13> [b2CollideEdge.cpp <429:45 429:45>]
LOCAL_SYMBOL: b2CollideEdge.cpp<429:13> [b2CollideEdge.cpp <431:23 431:23>]
LOCAL_SYMBOL: b2CollideEdge.cpp<429:13> [b2CollideEdge.cpp <431:61 431:61>]
LOCAL_SYMBOL: b2CollideEdge.cpp<429:13> [b2CollideEdge.cpp <432:22 432:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<429:13> [b2CollideEdge.cpp <432:61 432:61>]
LOCAL_SYMBOL: b2CollideEdge.cpp<430:2> [b2CollideEdge.cpp <430:2 430:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<430:2> [b2CollideEdge.cpp <433:2 433:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<439:11> [b2CollideEdge.cpp <439:11 439:18>]
LOCAL_SYMBOL: b2CollideEdge.cpp<439:11> [b2CollideEdge.cpp <442:6 442:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<439:11> [b2CollideEdge.cpp <447:6 447:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<439:11> [b2CollideEdge.cpp <465:17 465:24>]
LOCAL_SYMBOL: b2CollideEdge.cpp<439:11> [b2CollideEdge.cpp <467:52 467:59>]
LOCAL_SYMBOL: b2CollideEdge.cpp<439:11> [b2CollideEdge.cpp <473:17 473:24>]
LOCAL_SYMBOL: b2CollideEdge.cpp<43:10> [b2CollideEdge.cpp <43:10 43:15>]
LOCAL_SYMBOL: b2CollideEdge.cpp<43:10> [b2CollideEdge.cpp <55:12 55:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<43:10> [b2CollideEdge.cpp <55:21 55:26>]
LOCAL_SYMBOL: b2CollideEdge.cpp<43:10> [b2CollideEdge.cpp <93:12 93:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<43:10> [b2CollideEdge.cpp <93:21 93:26>]
LOCAL_SYMBOL: b2CollideEdge.cpp<43:10> [b2CollideEdge.cpp <131:11 131:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<43:10> [b2CollideEdge.cpp <131:20 131:25>]
LOCAL_SYMBOL: b2CollideEdge.cpp<443:2> [b2CollideEdge.cpp <443:2 443:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<443:2> [b2CollideEdge.cpp <445:2 445:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<448:2> [b2CollideEdge.cpp <448:2 448:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<448:2> [b2CollideEdge.cpp <450:2 450:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<452:11> [b2CollideEdge.cpp <452:11 452:21>]
LOCAL_SYMBOL: b2CollideEdge.cpp<452:11> [b2CollideEdge.cpp <453:6 453:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<452:11> [b2CollideEdge.cpp <453:49 453:59>]
LOCAL_SYMBOL: b2CollideEdge.cpp<452:11> [b2CollideEdge.cpp <463:6 463:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<452:11> [b2CollideEdge.cpp <467:11 467:21>]
LOCAL_SYMBOL: b2CollideEdge.cpp<452:11> [b2CollideEdge.cpp <469:17 469:27>]
LOCAL_SYMBOL: b2CollideEdge.cpp<454:2> [b2CollideEdge.cpp <454:2 454:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<454:2> [b2CollideEdge.cpp <456:2 456:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<459:16> [b2CollideEdge.cpp <459:16 459:28>]
LOCAL_SYMBOL: b2CollideEdge.cpp<459:16> [b2CollideEdge.cpp <467:36 467:48>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <45:19 45:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <46:2 46:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <47:2 47:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <75:3 75:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <76:3 76:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <82:31 82:32>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <113:3 113:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <114:3 114:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <120:31 120:32>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <143:2 143:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <144:2 144:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<45:19> [b2CollideEdge.cpp <150:30 150:31>]
LOCAL_SYMBOL: b2CollideEdge.cpp<460:16> [b2CollideEdge.cpp <460:16 460:28>]
LOCAL_SYMBOL: b2CollideEdge.cpp<460:16> [b2CollideEdge.cpp <467:74 467:86>]
LOCAL_SYMBOL: b2CollideEdge.cpp<462:11> [b2CollideEdge.cpp <462:11 462:21>]
LOCAL_SYMBOL: b2CollideEdge.cpp<462:11> [b2CollideEdge.cpp <465:3 465:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<462:11> [b2CollideEdge.cpp <469:3 469:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<462:11> [b2CollideEdge.cpp <473:3 473:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<462:11> [b2CollideEdge.cpp <478:6 478:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<462:11> [b2CollideEdge.cpp <533:43 533:53>]
LOCAL_SYMBOL: b2CollideEdge.cpp<462:11> [b2CollideEdge.cpp <539:43 539:53>]
LOCAL_SYMBOL: b2CollideEdge.cpp<462:11> [b2CollideEdge.cpp <543:11 543:21>]
LOCAL_SYMBOL: b2CollideEdge.cpp<462:11> [b2CollideEdge.cpp <577:6 577:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<462:11> [b2CollideEdge.cpp <599:8 599:18>]
LOCAL_SYMBOL: b2CollideEdge.cpp<464:2> [b2CollideEdge.cpp <464:2 464:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<464:2> [b2CollideEdge.cpp <466:2 466:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<468:2> [b2CollideEdge.cpp <468:2 468:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<468:2> [b2CollideEdge.cpp <470:2 470:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<472:2> [b2CollideEdge.cpp <472:2 472:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<472:2> [b2CollideEdge.cpp <474:2 474:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <476:15 476:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <498:3 498:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <499:3 499:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <500:3 500:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <501:3 501:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <502:3 502:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <504:3 504:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <505:3 505:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <506:3 506:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <507:3 507:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <508:3 508:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <531:3 531:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <532:3 532:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <533:3 533:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <534:3 534:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <535:3 535:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <537:3 537:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <538:3 538:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <539:3 539:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <540:3 540:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <541:3 541:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<476:15> [b2CollideEdge.cpp <561:40 561:41>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <477:18 477:19>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <512:4 512:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <513:4 513:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <514:4 514:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <515:4 515:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <516:4 516:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <520:4 520:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <521:4 521:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <522:4 522:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <523:4 523:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <524:4 524:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <543:3 543:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <544:3 544:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <544:11 544:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <544:42 544:43>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <545:3 545:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <545:31 545:32>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <546:3 546:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <546:31 546:32>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <547:3 547:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <547:34 547:35>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <550:2 550:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <550:21 550:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <550:35 550:36>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <551:2 551:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <551:20 551:21>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <552:2 552:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <552:25 552:26>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <552:41 552:42>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <553:2 553:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <553:25 553:26>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <553:41 553:42>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <561:44 561:45>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <561:60 561:61>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <561:76 561:77>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <569:53 569:54>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <569:69 569:70>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <569:85 569:86>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <579:27 579:28>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <580:26 580:27>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <584:47 584:48>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <585:47 585:48>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <593:22 593:23>]
LOCAL_SYMBOL: b2CollideEdge.cpp<477:18> [b2CollideEdge.cpp <593:52 593:53>]
LOCAL_SYMBOL: b2CollideEdge.cpp<479:2> [b2CollideEdge.cpp <479:2 479:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<479:2> [b2CollideEdge.cpp <526:2 526:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<483:9> [b2CollideEdge.cpp <483:9 483:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<483:9> [b2CollideEdge.cpp <491:5 491:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<483:9> [b2CollideEdge.cpp <495:14 495:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<484:11> [b2CollideEdge.cpp <484:11 484:19>]
LOCAL_SYMBOL: b2CollideEdge.cpp<484:11> [b2CollideEdge.cpp <488:16 488:24>]
LOCAL_SYMBOL: b2CollideEdge.cpp<484:11> [b2CollideEdge.cpp <490:5 490:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<485:14> [b2CollideEdge.cpp <485:14 485:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<485:14> [b2CollideEdge.cpp <485:21 485:21>]
LOCAL_SYMBOL: b2CollideEdge.cpp<485:14> [b2CollideEdge.cpp <485:45 485:45>]
LOCAL_SYMBOL: b2CollideEdge.cpp<485:14> [b2CollideEdge.cpp <487:55 487:55>]
LOCAL_SYMBOL: b2CollideEdge.cpp<485:14> [b2CollideEdge.cpp <491:17 491:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<486:3> [b2CollideEdge.cpp <486:3 486:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<486:3> [b2CollideEdge.cpp <493:3 493:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<487:12> [b2CollideEdge.cpp <487:12 487:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<487:12> [b2CollideEdge.cpp <488:8 488:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<487:12> [b2CollideEdge.cpp <490:17 490:21>]
LOCAL_SYMBOL: b2CollideEdge.cpp<489:4> [b2CollideEdge.cpp <489:4 489:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<489:4> [b2CollideEdge.cpp <492:4 492:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<495:9> [b2CollideEdge.cpp <495:9 495:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<495:9> [b2CollideEdge.cpp <496:14 496:15>]
LOCAL_SYMBOL: b2CollideEdge.cpp<495:9> [b2CollideEdge.cpp <496:42 496:43>]
LOCAL_SYMBOL: b2CollideEdge.cpp<495:9> [b2CollideEdge.cpp <498:33 498:34>]
LOCAL_SYMBOL: b2CollideEdge.cpp<495:9> [b2CollideEdge.cpp <500:43 500:44>]
LOCAL_SYMBOL: b2CollideEdge.cpp<496:9> [b2CollideEdge.cpp <496:9 496:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<496:9> [b2CollideEdge.cpp <504:33 504:34>]
LOCAL_SYMBOL: b2CollideEdge.cpp<496:9> [b2CollideEdge.cpp <506:43 506:44>]
LOCAL_SYMBOL: b2CollideEdge.cpp<511:3> [b2CollideEdge.cpp <511:3 511:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<511:3> [b2CollideEdge.cpp <517:3 517:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<519:3> [b2CollideEdge.cpp <519:3 519:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<519:3> [b2CollideEdge.cpp <525:3 525:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<51:2> [b2CollideEdge.cpp <51:2 51:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<51:2> [b2CollideEdge.cpp <85:2 85:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<528:2> [b2CollideEdge.cpp <528:2 528:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<528:2> [b2CollideEdge.cpp <548:2 548:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<52:10> [b2CollideEdge.cpp <52:10 52:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<52:10> [b2CollideEdge.cpp <53:18 53:18>]
LOCAL_SYMBOL: b2CollideEdge.cpp<52:10> [b2CollideEdge.cpp <80:26 80:26>]
LOCAL_SYMBOL: b2CollideEdge.cpp<53:10> [b2CollideEdge.cpp <53:10 53:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<53:10> [b2CollideEdge.cpp <54:22 54:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<53:10> [b2CollideEdge.cpp <54:25 54:25>]
LOCAL_SYMBOL: b2CollideEdge.cpp<54:11> [b2CollideEdge.cpp <54:11 54:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<54:11> [b2CollideEdge.cpp <55:7 55:8>]
LOCAL_SYMBOL: b2CollideEdge.cpp<556:15> [b2CollideEdge.cpp <556:15 556:25>]
LOCAL_SYMBOL: b2CollideEdge.cpp<556:15> [b2CollideEdge.cpp <561:27 561:37>]
LOCAL_SYMBOL: b2CollideEdge.cpp<556:15> [b2CollideEdge.cpp <569:40 569:50>]
LOCAL_SYMBOL: b2CollideEdge.cpp<557:15> [b2CollideEdge.cpp <557:15 557:25>]
LOCAL_SYMBOL: b2CollideEdge.cpp<557:15> [b2CollideEdge.cpp <569:27 569:37>]
LOCAL_SYMBOL: b2CollideEdge.cpp<557:15> [b2CollideEdge.cpp <593:33 593:43>]
LOCAL_SYMBOL: b2CollideEdge.cpp<557:15> [b2CollideEdge.cpp <601:35 601:45>]
LOCAL_SYMBOL: b2CollideEdge.cpp<557:15> [b2CollideEdge.cpp <602:14 602:24>]
LOCAL_SYMBOL: b2CollideEdge.cpp<557:15> [b2CollideEdge.cpp <606:22 606:32>]
LOCAL_SYMBOL: b2CollideEdge.cpp<557:15> [b2CollideEdge.cpp <607:23 607:33>]
LOCAL_SYMBOL: b2CollideEdge.cpp<557:15> [b2CollideEdge.cpp <608:23 608:33>]
LOCAL_SYMBOL: b2CollideEdge.cpp<557:15> [b2CollideEdge.cpp <609:24 609:34>]
LOCAL_SYMBOL: b2CollideEdge.cpp<557:15> [b2CollideEdge.cpp <610:24 610:34>]
LOCAL_SYMBOL: b2CollideEdge.cpp<558:8> [b2CollideEdge.cpp <558:8 558:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<558:8> [b2CollideEdge.cpp <561:2 561:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<558:8> [b2CollideEdge.cpp <563:6 563:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<558:8> [b2CollideEdge.cpp <569:2 569:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<558:8> [b2CollideEdge.cpp <571:6 571:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<564:2> [b2CollideEdge.cpp <564:2 564:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<564:2> [b2CollideEdge.cpp <566:2 566:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<56:3> [b2CollideEdge.cpp <56:3 56:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<56:3> [b2CollideEdge.cpp <58:3 58:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<572:2> [b2CollideEdge.cpp <572:2 572:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<572:2> [b2CollideEdge.cpp <574:2 574:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<578:2> [b2CollideEdge.cpp <578:2 578:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<578:2> [b2CollideEdge.cpp <581:2 581:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<583:2> [b2CollideEdge.cpp <583:2 583:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<583:2> [b2CollideEdge.cpp <586:2 586:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<588:8> [b2CollideEdge.cpp <588:8 588:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<588:8> [b2CollideEdge.cpp <597:45 597:54>]
LOCAL_SYMBOL: b2CollideEdge.cpp<588:8> [b2CollideEdge.cpp <613:6 613:15>]
LOCAL_SYMBOL: b2CollideEdge.cpp<588:8> [b2CollideEdge.cpp <617:25 617:34>]
LOCAL_SYMBOL: b2CollideEdge.cpp<589:13> [b2CollideEdge.cpp <589:13 589:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<589:13> [b2CollideEdge.cpp <589:20 589:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<589:13> [b2CollideEdge.cpp <589:48 589:48>]
LOCAL_SYMBOL: b2CollideEdge.cpp<589:13> [b2CollideEdge.cpp <593:45 593:45>]
LOCAL_SYMBOL: b2CollideEdge.cpp<589:13> [b2CollideEdge.cpp <601:47 601:47>]
LOCAL_SYMBOL: b2CollideEdge.cpp<589:13> [b2CollideEdge.cpp <602:26 602:26>]
LOCAL_SYMBOL: b2CollideEdge.cpp<589:13> [b2CollideEdge.cpp <606:34 606:34>]
LOCAL_SYMBOL: b2CollideEdge.cpp<589:13> [b2CollideEdge.cpp <607:35 607:35>]
LOCAL_SYMBOL: b2CollideEdge.cpp<589:13> [b2CollideEdge.cpp <608:35 608:35>]
LOCAL_SYMBOL: b2CollideEdge.cpp<589:13> [b2CollideEdge.cpp <609:36 609:36>]
LOCAL_SYMBOL: b2CollideEdge.cpp<589:13> [b2CollideEdge.cpp <610:36 610:36>]
LOCAL_SYMBOL: b2CollideEdge.cpp<590:2> [b2CollideEdge.cpp <590:2 590:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<590:2> [b2CollideEdge.cpp <615:2 615:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<591:11> [b2CollideEdge.cpp <591:11 591:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<591:11> [b2CollideEdge.cpp <593:3 593:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<591:11> [b2CollideEdge.cpp <595:7 595:16>]
LOCAL_SYMBOL: b2CollideEdge.cpp<596:3> [b2CollideEdge.cpp <596:3 596:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<596:3> [b2CollideEdge.cpp <614:3 614:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<597:21> [b2CollideEdge.cpp <597:21 597:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<597:21> [b2CollideEdge.cpp <601:5 601:6>]
LOCAL_SYMBOL: b2CollideEdge.cpp<597:21> [b2CollideEdge.cpp <602:5 602:6>]
LOCAL_SYMBOL: b2CollideEdge.cpp<597:21> [b2CollideEdge.cpp <606:5 606:6>]
LOCAL_SYMBOL: b2CollideEdge.cpp<597:21> [b2CollideEdge.cpp <607:5 607:6>]
LOCAL_SYMBOL: b2CollideEdge.cpp<597:21> [b2CollideEdge.cpp <608:5 608:6>]
LOCAL_SYMBOL: b2CollideEdge.cpp<597:21> [b2CollideEdge.cpp <609:5 609:6>]
LOCAL_SYMBOL: b2CollideEdge.cpp<597:21> [b2CollideEdge.cpp <610:5 610:6>]
LOCAL_SYMBOL: b2CollideEdge.cpp<600:4> [b2CollideEdge.cpp <600:4 600:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<600:4> [b2CollideEdge.cpp <603:4 603:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<605:4> [b2CollideEdge.cpp <605:4 605:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<605:4> [b2CollideEdge.cpp <611:4 611:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<621:1> [b2CollideEdge.cpp <621:1 621:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<621:1> [b2CollideEdge.cpp <637:1 637:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<622:11> [b2CollideEdge.cpp <622:11 622:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<622:11> [b2CollideEdge.cpp <623:2 623:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<622:11> [b2CollideEdge.cpp <624:2 624:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<622:11> [b2CollideEdge.cpp <625:2 625:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<622:11> [b2CollideEdge.cpp <630:11 630:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<622:11> [b2CollideEdge.cpp <632:4 632:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<622:11> [b2CollideEdge.cpp <636:9 636:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<627:13> [b2CollideEdge.cpp <627:13 627:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<627:13> [b2CollideEdge.cpp <627:20 627:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<627:13> [b2CollideEdge.cpp <627:44 627:44>]
LOCAL_SYMBOL: b2CollideEdge.cpp<627:13> [b2CollideEdge.cpp <629:51 629:51>]
LOCAL_SYMBOL: b2CollideEdge.cpp<628:2> [b2CollideEdge.cpp <628:2 628:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<628:2> [b2CollideEdge.cpp <634:2 634:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<629:11> [b2CollideEdge.cpp <629:11 629:11>]
LOCAL_SYMBOL: b2CollideEdge.cpp<629:11> [b2CollideEdge.cpp <630:7 630:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<629:11> [b2CollideEdge.cpp <632:22 632:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<62:3> [b2CollideEdge.cpp <62:3 62:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<62:3> [b2CollideEdge.cpp <73:3 73:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<631:3> [b2CollideEdge.cpp <631:3 631:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<631:3> [b2CollideEdge.cpp <633:3 633:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<63:11> [b2CollideEdge.cpp <63:11 63:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<63:11> [b2CollideEdge.cpp <65:21 65:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<640:1> [b2CollideEdge.cpp <640:1 640:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<640:1> [b2CollideEdge.cpp <690:1 690:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <641:11 641:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <642:2 642:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <643:2 643:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <644:2 644:5>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <659:4 659:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <660:4 660:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <661:4 661:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <662:11 662:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <681:11 681:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <683:4 683:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <684:4 684:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <685:4 685:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<641:11> [b2CollideEdge.cpp <689:9 689:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<646:9> [b2CollideEdge.cpp <646:9 646:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<646:9> [b2CollideEdge.cpp <666:16 666:19>]
LOCAL_SYMBOL: b2CollideEdge.cpp<648:13> [b2CollideEdge.cpp <648:13 648:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<648:13> [b2CollideEdge.cpp <648:20 648:20>]
LOCAL_SYMBOL: b2CollideEdge.cpp<648:13> [b2CollideEdge.cpp <648:44 648:44>]
LOCAL_SYMBOL: b2CollideEdge.cpp<648:13> [b2CollideEdge.cpp <650:34 650:34>]
LOCAL_SYMBOL: b2CollideEdge.cpp<648:13> [b2CollideEdge.cpp <652:45 652:45>]
LOCAL_SYMBOL: b2CollideEdge.cpp<648:13> [b2CollideEdge.cpp <653:45 653:45>]
LOCAL_SYMBOL: b2CollideEdge.cpp<648:13> [b2CollideEdge.cpp <660:17 660:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<648:13> [b2CollideEdge.cpp <684:17 684:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<649:2> [b2CollideEdge.cpp <649:2 649:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<649:2> [b2CollideEdge.cpp <687:2 687:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<64:11> [b2CollideEdge.cpp <64:11 64:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<64:11> [b2CollideEdge.cpp <65:16 65:17>]
LOCAL_SYMBOL: b2CollideEdge.cpp<64:11> [b2CollideEdge.cpp <66:27 66:28>]
LOCAL_SYMBOL: b2CollideEdge.cpp<650:10> [b2CollideEdge.cpp <650:10 650:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<650:10> [b2CollideEdge.cpp <652:22 652:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<650:10> [b2CollideEdge.cpp <653:22 653:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<650:10> [b2CollideEdge.cpp <666:13 666:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<650:10> [b2CollideEdge.cpp <668:14 668:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<650:10> [b2CollideEdge.cpp <675:14 675:14>]
LOCAL_SYMBOL: b2CollideEdge.cpp<652:11> [b2CollideEdge.cpp <652:11 652:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<652:11> [b2CollideEdge.cpp <654:21 654:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<653:11> [b2CollideEdge.cpp <653:11 653:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<653:11> [b2CollideEdge.cpp <654:25 654:26>]
LOCAL_SYMBOL: b2CollideEdge.cpp<654:11> [b2CollideEdge.cpp <654:11 654:11>]
LOCAL_SYMBOL: b2CollideEdge.cpp<654:11> [b2CollideEdge.cpp <656:7 656:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<654:11> [b2CollideEdge.cpp <661:22 661:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<654:11> [b2CollideEdge.cpp <681:7 681:7>]
LOCAL_SYMBOL: b2CollideEdge.cpp<654:11> [b2CollideEdge.cpp <685:22 685:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<657:3> [b2CollideEdge.cpp <657:3 657:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<657:3> [b2CollideEdge.cpp <663:3 663:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<65:11> [b2CollideEdge.cpp <65:11 65:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<65:11> [b2CollideEdge.cpp <66:23 66:24>]
LOCAL_SYMBOL: b2CollideEdge.cpp<667:3> [b2CollideEdge.cpp <667:3 667:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<667:3> [b2CollideEdge.cpp <672:3 672:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<669:4> [b2CollideEdge.cpp <669:4 669:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<669:4> [b2CollideEdge.cpp <671:4 671:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<66:12> [b2CollideEdge.cpp <66:12 66:13>]
LOCAL_SYMBOL: b2CollideEdge.cpp<66:12> [b2CollideEdge.cpp <69:8 69:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<674:3> [b2CollideEdge.cpp <674:3 674:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<674:3> [b2CollideEdge.cpp <679:3 679:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<676:4> [b2CollideEdge.cpp <676:4 676:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<676:4> [b2CollideEdge.cpp <678:4 678:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<682:3> [b2CollideEdge.cpp <682:3 682:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<682:3> [b2CollideEdge.cpp <686:3 686:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<692:43> [b2CollideEdge.cpp <692:43 692:50>]
LOCAL_SYMBOL: b2CollideEdge.cpp<692:43> [b2CollideEdge.cpp <697:19 697:26>]
LOCAL_SYMBOL: b2CollideEdge.cpp<693:28> [b2CollideEdge.cpp <693:28 693:32>]
LOCAL_SYMBOL: b2CollideEdge.cpp<693:28> [b2CollideEdge.cpp <697:29 697:33>]
LOCAL_SYMBOL: b2CollideEdge.cpp<693:54> [b2CollideEdge.cpp <693:54 693:56>]
LOCAL_SYMBOL: b2CollideEdge.cpp<693:54> [b2CollideEdge.cpp <697:36 697:38>]
LOCAL_SYMBOL: b2CollideEdge.cpp<694:31> [b2CollideEdge.cpp <694:31 694:38>]
LOCAL_SYMBOL: b2CollideEdge.cpp<694:31> [b2CollideEdge.cpp <697:41 697:48>]
LOCAL_SYMBOL: b2CollideEdge.cpp<694:60> [b2CollideEdge.cpp <694:60 694:62>]
LOCAL_SYMBOL: b2CollideEdge.cpp<694:60> [b2CollideEdge.cpp <697:51 697:53>]
LOCAL_SYMBOL: b2CollideEdge.cpp<695:1> [b2CollideEdge.cpp <695:1 695:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<695:1> [b2CollideEdge.cpp <698:1 698:1>]
LOCAL_SYMBOL: b2CollideEdge.cpp<696:15> [b2CollideEdge.cpp <696:15 696:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<696:15> [b2CollideEdge.cpp <697:2 697:9>]
LOCAL_SYMBOL: b2CollideEdge.cpp<70:4> [b2CollideEdge.cpp <70:4 70:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<70:4> [b2CollideEdge.cpp <72:4 72:4>]
LOCAL_SYMBOL: b2CollideEdge.cpp<89:2> [b2CollideEdge.cpp <89:2 89:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<89:2> [b2CollideEdge.cpp <123:2 123:2>]
LOCAL_SYMBOL: b2CollideEdge.cpp<90:10> [b2CollideEdge.cpp <90:10 90:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<90:10> [b2CollideEdge.cpp <91:18 91:18>]
LOCAL_SYMBOL: b2CollideEdge.cpp<90:10> [b2CollideEdge.cpp <118:26 118:26>]
LOCAL_SYMBOL: b2CollideEdge.cpp<91:10> [b2CollideEdge.cpp <91:10 91:10>]
LOCAL_SYMBOL: b2CollideEdge.cpp<91:10> [b2CollideEdge.cpp <92:22 92:22>]
LOCAL_SYMBOL: b2CollideEdge.cpp<91:10> [b2CollideEdge.cpp <92:25 92:25>]
LOCAL_SYMBOL: b2CollideEdge.cpp<92:11> [b2CollideEdge.cpp <92:11 92:12>]
LOCAL_SYMBOL: b2CollideEdge.cpp<92:11> [b2CollideEdge.cpp <93:7 93:8>]
LOCAL_SYMBOL: b2CollideEdge.cpp<94:3> [b2CollideEdge.cpp <94:3 94:3>]
LOCAL_SYMBOL: b2CollideEdge.cpp<94:3> [b2CollideEdge.cpp <96:3 96:3>]
LOCAL_SYMBOL: b2Collision.h<111:1> [b2Collision.h <111:1 111:1>]
LOCAL_SYMBOL: b2Collision.h<111:1> [b2Collision.h <123:1 123:1>]
LOCAL_SYMBOL: b2Collision.h<116:36> [b2Collision.h <116:36 116:43>]
LOCAL_SYMBOL: b2Collision.h<117:25> [b2Collision.h <117:25 117:27>]
LOCAL_SYMBOL: b2Collision.h<117:38> [b2Collision.h <117:38 117:44>]
LOCAL_SYMBOL: b2Collision.h<118:25> [b2Collision.h <118:25 118:27>]
LOCAL_SYMBOL: b2Collision.h<118:38> [b2Collision.h <118:38 118:44>]
LOCAL_SYMBOL: b2Collision.h<127:1> [b2Collision.h <127:1 127:1>]
LOCAL_SYMBOL: b2Collision.h<127:1> [b2Collision.h <132:1 132:1>]
LOCAL_SYMBOL: b2Collision.h<136:36> [b2Collision.h <136:36 136:41>]
LOCAL_SYMBOL: b2Collision.h<136:79> [b2Collision.h <136:79 136:84>]
LOCAL_SYMBOL: b2Collision.h<137:26> [b2Collision.h <137:26 137:34>]
LOCAL_SYMBOL: b2Collision.h<137:55> [b2Collision.h <137:55 137:63>]
LOCAL_SYMBOL: b2Collision.h<141:1> [b2Collision.h <141:1 141:1>]
LOCAL_SYMBOL: b2Collision.h<141:1> [b2Collision.h <144:1 144:1>]
LOCAL_SYMBOL: b2Collision.h<148:1> [b2Collision.h <148:1 148:1>]
LOCAL_SYMBOL: b2Collision.h<148:1> [b2Collision.h <151:1 151:1>]
LOCAL_SYMBOL: b2Collision.h<156:1> [b2Collision.h <156:1 156:1>]
LOCAL_SYMBOL: b2Collision.h<156:1> [b2Collision.h <159:1 159:1>]
LOCAL_SYMBOL: b2Collision.h<163:1> [b2Collision.h <163:1 163:1>]
LOCAL_SYMBOL: b2Collision.h<163:1> [b2Collision.h <216:1 216:1>]
LOCAL_SYMBOL: b2Collision.h<169:2> [b2Collision.h <169:2 169:2>]
LOCAL_SYMBOL: b2Collision.h<169:2> [b2Collision.h <171:2 171:2>]
LOCAL_SYMBOL: b2Collision.h<175:2> [b2Collision.h <175:2 175:2>]
LOCAL_SYMBOL: b2Collision.h<175:2> [b2Collision.h <177:2 177:2>]
LOCAL_SYMBOL: b2Collision.h<181:2> [b2Collision.h <181:2 181:2>]
LOCAL_SYMBOL: b2Collision.h<181:2> [b2Collision.h <185:2 185:2>]
LOCAL_SYMBOL: b2Collision.h<182:11> [b2Collision.h <182:11 182:12>]
LOCAL_SYMBOL: b2Collision.h<182:11> [b2Collision.h <184:18 184:19>]
LOCAL_SYMBOL: b2Collision.h<183:11> [b2Collision.h <183:11 183:12>]
LOCAL_SYMBOL: b2Collision.h<183:11> [b2Collision.h <184:23 184:24>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <188:29 188:32>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <190:34 190:37>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <191:34 191:37>]
LOCAL_SYMBOL: b2Collision.h<189:2> [b2Collision.h <189:2 189:2>]
LOCAL_SYMBOL: b2Collision.h<189:2> [b2Collision.h <192:2 192:2>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <195:29 195:33>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <197:22 197:26>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <198:22 198:26>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <195:50 195:54>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <197:40 197:44>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <198:40 198:44>]
LOCAL_SYMBOL: b2Collision.h<196:2> [b2Collision.h <196:2 196:2>]
LOCAL_SYMBOL: b2Collision.h<196:2> [b2Collision.h <199:2 199:2>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <202:30 202:33>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <205:38 205:41>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <206:38 206:41>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <207:22 207:25>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <208:22 208:25>]
LOCAL_SYMBOL: b2Collision.h<203:2> [b2Collision.h <203:2 203:2>]
LOCAL_SYMBOL: b2Collision.h<203:2> [b2Collision.h <210:2 210:2>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <204:8 204:13>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <205:3 205:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <205:12 205:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <206:3 206:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <206:12 206:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <207:3 207:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <207:12 207:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <208:3 208:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <208:12 208:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <209:10 209:15>]
LOCAL_SYMBOL: b2Collision.h<212:32> [b2Collision.h <212:32 212:37>]
LOCAL_SYMBOL: b2Collision.h<212:62> [b2Collision.h <212:62 212:66>]
LOCAL_SYMBOL: b2Collision.h<219:35> [b2Collision.h <219:35 219:42>]
LOCAL_SYMBOL: b2Collision.h<220:29> [b2Collision.h <220:29 220:35>]
LOCAL_SYMBOL: b2Collision.h<220:57> [b2Collision.h <220:57 220:59>]
LOCAL_SYMBOL: b2Collision.h<221:29> [b2Collision.h <221:29 221:35>]
LOCAL_SYMBOL: b2Collision.h<221:57> [b2Collision.h <221:57 221:59>]
LOCAL_SYMBOL: b2Collision.h<224:44> [b2Collision.h <224:44 224:51>]
LOCAL_SYMBOL: b2Collision.h<225:33> [b2Collision.h <225:33 225:40>]
LOCAL_SYMBOL: b2Collision.h<225:62> [b2Collision.h <225:62 225:64>]
LOCAL_SYMBOL: b2Collision.h<226:32> [b2Collision.h <226:32 226:38>]
LOCAL_SYMBOL: b2Collision.h<226:60> [b2Collision.h <226:60 226:62>]
LOCAL_SYMBOL: b2Collision.h<229:36> [b2Collision.h <229:36 229:43>]
LOCAL_SYMBOL: b2Collision.h<230:31> [b2Collision.h <230:31 230:38>]
LOCAL_SYMBOL: b2Collision.h<230:60> [b2Collision.h <230:60 230:62>]
LOCAL_SYMBOL: b2Collision.h<231:31> [b2Collision.h <231:31 231:38>]
LOCAL_SYMBOL: b2Collision.h<231:60> [b2Collision.h <231:60 231:62>]
LOCAL_SYMBOL: b2Collision.h<234:41> [b2Collision.h <234:41 234:48>]
LOCAL_SYMBOL: b2Collision.h<235:30> [b2Collision.h <235:30 235:37>]
LOCAL_SYMBOL: b2Collision.h<235:59> [b2Collision.h <235:59 235:61>]
LOCAL_SYMBOL: b2Collision.h<236:32> [b2Collision.h <236:32 236:38>]
LOCAL_SYMBOL: b2Collision.h<236:60> [b2Collision.h <236:60 236:62>]
LOCAL_SYMBOL: b2Collision.h<239:42> [b2Collision.h <239:42 239:49>]
LOCAL_SYMBOL: b2Collision.h<240:30> [b2Collision.h <240:30 240:34>]
LOCAL_SYMBOL: b2Collision.h<240:56> [b2Collision.h <240:56 240:58>]
LOCAL_SYMBOL: b2Collision.h<241:33> [b2Collision.h <241:33 241:39>]
LOCAL_SYMBOL: b2Collision.h<241:61> [b2Collision.h <241:61 241:63>]
LOCAL_SYMBOL: b2Collision.h<244:40> [b2Collision.h <244:40 244:43>]
LOCAL_SYMBOL: b2Collision.h<244:68> [b2Collision.h <244:68 244:70>]
LOCAL_SYMBOL: b2Collision.h<245:22> [b2Collision.h <245:22 245:27>]
LOCAL_SYMBOL: b2Collision.h<245:38> [b2Collision.h <245:38 245:43>]
LOCAL_SYMBOL: b2Collision.h<245:52> [b2Collision.h <245:52 245:63>]
LOCAL_SYMBOL: b2Collision.h<248:36> [b2Collision.h <248:36 248:41>]
LOCAL_SYMBOL: b2Collision.h<248:50> [b2Collision.h <248:50 248:55>]
LOCAL_SYMBOL: b2Collision.h<249:21> [b2Collision.h <249:21 249:26>]
LOCAL_SYMBOL: b2Collision.h<249:35> [b2Collision.h <249:35 249:40>]
LOCAL_SYMBOL: b2Collision.h<250:25> [b2Collision.h <250:25 250:27>]
LOCAL_SYMBOL: b2Collision.h<250:49> [b2Collision.h <250:49 250:51>]
LOCAL_SYMBOL: b2Collision.h<255:1> [b2Collision.h <255:1 255:1>]
LOCAL_SYMBOL: b2Collision.h<255:1> [b2Collision.h <260:1 260:1>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <256:9 256:9>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <257:15 257:15>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <257:30 257:30>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <257:7 257:11>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <258:2 258:6>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <258:10 258:14>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <259:9 259:13>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <262:41 262:41>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <265:22 265:22>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <266:7 266:7>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <262:58 262:58>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <265:7 265:7>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <266:22 266:22>]
LOCAL_SYMBOL: b2Collision.h<263:1> [b2Collision.h <263:1 263:1>]
LOCAL_SYMBOL: b2Collision.h<263:1> [b2Collision.h <275:1 275:1>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <264:13 264:14>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <266:2 266:3>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <271:6 271:7>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <271:21 271:22>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <264:9 264:10>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <265:2 265:3>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <268:6 268:7>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <268:21 268:22>]
LOCAL_SYMBOL: b2Collision.h<39:1> [b2Collision.h <39:1 39:1>]
LOCAL_SYMBOL: b2Collision.h<39:1> [b2Collision.h <50:1 50:1>]
LOCAL_SYMBOL: b2Collision.h<41:2> [b2Collision.h <41:2 41:2>]
LOCAL_SYMBOL: b2Collision.h<41:2> [b2Collision.h <44:2 44:2>]
LOCAL_SYMBOL: b2Collision.h<54:1> [b2Collision.h <54:1 54:1>]
LOCAL_SYMBOL: b2Collision.h<54:1> [b2Collision.h <57:1 57:1>]
LOCAL_SYMBOL: b2Collision.h<70:1> [b2Collision.h <70:1 70:1>]
LOCAL_SYMBOL: b2Collision.h<70:1> [b2Collision.h <75:1 75:1>]
LOCAL_SYMBOL: b2Collision.h<94:1> [b2Collision.h <94:1 94:1>]
LOCAL_SYMBOL: b2Collision.h<94:1> [b2Collision.h <107:1 107:1>]
LOCAL_SYMBOL: b2Collision.h<96:2> [b2Collision.h <96:2 96:2>]
LOCAL_SYMBOL: b2Collision.h<96:2> [b2Collision.h <100:2 100:2>]
LOCAL_SYMBOL: b2EdgeShape.h<28:1> [b2EdgeShape.h <28:1 28:1>]
LOCAL_SYMBOL: b2EdgeShape.h<28:1> [b2EdgeShape.h <60:1 60:1>]
LOCAL_SYMBOL: b2EdgeShape.h<33:25> [b2EdgeShape.h <33:25 33:26>]
LOCAL_SYMBOL: b2EdgeShape.h<33:43> [b2EdgeShape.h <33:43 33:44>]
LOCAL_SYMBOL: b2EdgeShape.h<36:35> [b2EdgeShape.h <36:35 36:43>]
LOCAL_SYMBOL: b2EdgeShape.h<42:36> [b2EdgeShape.h <42:36 42:44>]
LOCAL_SYMBOL: b2EdgeShape.h<42:61> [b2EdgeShape.h <42:61 42:61>]
LOCAL_SYMBOL: b2EdgeShape.h<45:32> [b2EdgeShape.h <45:32 45:37>]
LOCAL_SYMBOL: b2EdgeShape.h<45:62> [b2EdgeShape.h <45:62 45:66>]
LOCAL_SYMBOL: b2EdgeShape.h<46:24> [b2EdgeShape.h <46:24 46:32>]
LOCAL_SYMBOL: b2EdgeShape.h<46:41> [b2EdgeShape.h <46:41 46:50>]
LOCAL_SYMBOL: b2EdgeShape.h<49:27> [b2EdgeShape.h <49:27 49:30>]
LOCAL_SYMBOL: b2EdgeShape.h<49:52> [b2EdgeShape.h <49:52 49:60>]
LOCAL_SYMBOL: b2EdgeShape.h<49:69> [b2EdgeShape.h <49:69 49:78>]
LOCAL_SYMBOL: b2EdgeShape.h<52:31> [b2EdgeShape.h <52:31 52:38>]
LOCAL_SYMBOL: b2EdgeShape.h<52:49> [b2EdgeShape.h <52:49 52:55>]
LOCAL_SYMBOL: b2EdgeShape.h<63:1> [b2EdgeShape.h <63:1 63:1>]
LOCAL_SYMBOL: b2EdgeShape.h<63:1> [b2EdgeShape.h <72:1 72:1>]
LOCAL_SYMBOL: b2Math.h<102:2> [b2Math.h <102:2 102:2>]
LOCAL_SYMBOL: b2Math.h<102:2> [b2Math.h <104:2 104:2>]
LOCAL_SYMBOL: b2Math.h<109:2> [b2Math.h <109:2 109:2>]
LOCAL_SYMBOL: b2Math.h<109:2> [b2Math.h <111:2 111:2>]
LOCAL_SYMBOL: b2Math.h<115:2> [b2Math.h <115:2 115:2>]
LOCAL_SYMBOL: b2Math.h<115:2> [b2Math.h <126:2 126:2>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <116:11 116:16>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <117:7 117:12>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <121:30 121:35>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <125:10 125:15>]
LOCAL_SYMBOL: b2Math.h<118:3> [b2Math.h <118:3 118:3>]
LOCAL_SYMBOL: b2Math.h<118:3> [b2Math.h <120:3 120:3>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <121:11 121:19>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <122:8 122:16>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <123:8 123:16>]
LOCAL_SYMBOL: b2Math.h<130:2> [b2Math.h <130:2 130:2>]
LOCAL_SYMBOL: b2Math.h<130:2> [b2Math.h <132:2 132:2>]
LOCAL_SYMBOL: b2Math.h<136:2> [b2Math.h <136:2 136:2>]
LOCAL_SYMBOL: b2Math.h<136:2> [b2Math.h <138:2 138:2>]
LOCAL_SYMBOL: b2Math.h<145:1> [b2Math.h <145:1 145:1>]
LOCAL_SYMBOL: b2Math.h<145:1> [b2Math.h <180:1 180:1>]
LOCAL_SYMBOL: b2Math.h<147:11> [b2Math.h <147:11 147:11>]
LOCAL_SYMBOL: b2Math.h<147:11> [b2Math.h <147:12 147:12>]
LOCAL_SYMBOL: b2Math.h<150:17> [b2Math.h <150:17 150:19>]
LOCAL_SYMBOL: b2Math.h<150:17> [b2Math.h <150:52 150:54>]
LOCAL_SYMBOL: b2Math.h<150:30> [b2Math.h <150:30 150:32>]
LOCAL_SYMBOL: b2Math.h<150:30> [b2Math.h <150:60 150:62>]
LOCAL_SYMBOL: b2Math.h<150:43> [b2Math.h <150:43 150:45>]
LOCAL_SYMBOL: b2Math.h<150:43> [b2Math.h <150:68 150:70>]
LOCAL_SYMBOL: b2Math.h<150:73> [b2Math.h <150:73 150:73>]
LOCAL_SYMBOL: b2Math.h<150:73> [b2Math.h <150:74 150:74>]
LOCAL_SYMBOL: b2Math.h<153:17> [b2Math.h <153:17 153:17>]
LOCAL_SYMBOL: b2Math.h<153:17> [b2Math.h <153:49 153:49>]
LOCAL_SYMBOL: b2Math.h<156:19> [b2Math.h <156:19 156:20>]
LOCAL_SYMBOL: b2Math.h<156:19> [b2Math.h <156:53 156:54>]
LOCAL_SYMBOL: b2Math.h<156:31> [b2Math.h <156:31 156:32>]
LOCAL_SYMBOL: b2Math.h<156:31> [b2Math.h <156:61 156:62>]
LOCAL_SYMBOL: b2Math.h<156:43> [b2Math.h <156:43 156:44>]
LOCAL_SYMBOL: b2Math.h<156:43> [b2Math.h <156:69 156:70>]
LOCAL_SYMBOL: b2Math.h<156:47> [b2Math.h <156:47 156:47>]
LOCAL_SYMBOL: b2Math.h<156:47> [b2Math.h <156:73 156:73>]
LOCAL_SYMBOL: b2Math.h<159:28> [b2Math.h <159:28 159:28>]
LOCAL_SYMBOL: b2Math.h<159:28> [b2Math.h <159:69 159:69>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:37 159:37>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:40 159:40>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:66 159:66>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <162:34 162:34>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:8 164:8>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:18 164:18>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:28 164:28>]
LOCAL_SYMBOL: b2Math.h<163:2> [b2Math.h <163:2 163:2>]
LOCAL_SYMBOL: b2Math.h<163:2> [b2Math.h <165:2 165:2>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <168:34 168:34>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:8 170:8>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:18 170:18>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:28 170:28>]
LOCAL_SYMBOL: b2Math.h<169:2> [b2Math.h <169:2 169:2>]
LOCAL_SYMBOL: b2Math.h<169:2> [b2Math.h <171:2 171:2>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <174:28 174:28>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:8 176:8>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:16 176:16>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:24 176:24>]
LOCAL_SYMBOL: b2Math.h<175:2> [b2Math.h <175:2 175:2>]
LOCAL_SYMBOL: b2Math.h<175:2> [b2Math.h <177:2 177:2>]
LOCAL_SYMBOL: b2Math.h<184:1> [b2Math.h <184:1 184:1>]
LOCAL_SYMBOL: b2Math.h<184:1> [b2Math.h <254:1 254:1>]
LOCAL_SYMBOL: b2Math.h<186:12> [b2Math.h <186:12 186:12>]
LOCAL_SYMBOL: b2Math.h<186:12> [b2Math.h <186:13 186:13>]
LOCAL_SYMBOL: b2Math.h<189:24> [b2Math.h <189:24 189:25>]
LOCAL_SYMBOL: b2Math.h<189:24> [b2Math.h <191:8 191:9>]
LOCAL_SYMBOL: b2Math.h<189:42> [b2Math.h <189:42 189:43>]
LOCAL_SYMBOL: b2Math.h<189:42> [b2Math.h <192:8 192:9>]
LOCAL_SYMBOL: b2Math.h<190:2> [b2Math.h <190:2 190:2>]
LOCAL_SYMBOL: b2Math.h<190:2> [b2Math.h <193:2 193:2>]
LOCAL_SYMBOL: b2Math.h<196:18> [b2Math.h <196:18 196:20>]
LOCAL_SYMBOL: b2Math.h<196:18> [b2Math.h <198:10 198:12>]
LOCAL_SYMBOL: b2Math.h<196:31> [b2Math.h <196:31 196:33>]
LOCAL_SYMBOL: b2Math.h<196:31> [b2Math.h <199:10 199:12>]
LOCAL_SYMBOL: b2Math.h<196:44> [b2Math.h <196:44 196:46>]
LOCAL_SYMBOL: b2Math.h<196:44> [b2Math.h <198:22 198:24>]
LOCAL_SYMBOL: b2Math.h<196:57> [b2Math.h <196:57 196:59>]
LOCAL_SYMBOL: b2Math.h<196:57> [b2Math.h <199:22 199:24>]
LOCAL_SYMBOL: b2Math.h<197:2> [b2Math.h <197:2 197:2>]
LOCAL_SYMBOL: b2Math.h<197:2> [b2Math.h <200:2 200:2>]
LOCAL_SYMBOL: b2Math.h<203:25> [b2Math.h <203:25 203:26>]
LOCAL_SYMBOL: b2Math.h<203:25> [b2Math.h <205:8 205:9>]
LOCAL_SYMBOL: b2Math.h<203:43> [b2Math.h <203:43 203:44>]
LOCAL_SYMBOL: b2Math.h<203:43> [b2Math.h <206:8 206:9>]
LOCAL_SYMBOL: b2Math.h<204:2> [b2Math.h <204:2 204:2>]
LOCAL_SYMBOL: b2Math.h<204:2> [b2Math.h <207:2 207:2>]
LOCAL_SYMBOL: b2Math.h<211:2> [b2Math.h <211:2 211:2>]
LOCAL_SYMBOL: b2Math.h<211:2> [b2Math.h <214:2 214:2>]
LOCAL_SYMBOL: b2Math.h<218:2> [b2Math.h <218:2 218:2>]
LOCAL_SYMBOL: b2Math.h<218:2> [b2Math.h <221:2 221:2>]
LOCAL_SYMBOL: b2Math.h<224:2> [b2Math.h <224:2 224:2>]
LOCAL_SYMBOL: b2Math.h<224:2> [b2Math.h <235:2 235:2>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <225:11 225:11>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <227:17 227:17>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <233:38 233:38>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <225:21 225:21>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <227:25 227:25>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <232:38 232:38>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <225:31 225:31>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <227:29 227:29>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <233:19 233:19>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <225:41 225:41>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <227:21 227:21>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <232:19 232:19>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <226:11 226:11>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <232:3 232:3>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <232:22 232:22>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <233:3 233:3>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <233:22 233:22>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <234:10 234:10>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <227:11 227:13>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <228:7 228:9>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <230:4 230:6>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <230:17 230:19>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <232:13 232:15>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <232:32 232:34>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <233:13 233:15>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <233:32 233:34>]
LOCAL_SYMBOL: b2Math.h<229:3> [b2Math.h <229:3 229:3>]
LOCAL_SYMBOL: b2Math.h<229:3> [b2Math.h <231:3 231:3>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <239:29 239:29>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <248:22 248:22>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <248:34 248:34>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <249:22 249:22>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <249:34 249:34>]
LOCAL_SYMBOL: b2Math.h<240:2> [b2Math.h <240:2 240:2>]
LOCAL_SYMBOL: b2Math.h<240:2> [b2Math.h <251:2 251:2>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <241:11 241:13>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <242:17 242:19>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <249:16 249:18>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <241:23 241:25>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <242:29 242:31>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <248:28 248:30>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <241:35 241:37>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <242:35 242:37>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <249:28 249:30>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <241:47 241:49>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <242:23 242:25>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <248:16 248:18>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <242:11 242:13>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <243:7 243:9>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <245:4 245:6>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <245:17 245:19>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <248:9 248:11>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <249:9 249:11>]
LOCAL_SYMBOL: b2Math.h<244:3> [b2Math.h <244:3 244:3>]
LOCAL_SYMBOL: b2Math.h<244:3> [b2Math.h <246:3 246:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <247:10 247:10>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <248:3 248:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <249:3 249:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <250:10 250:10>]
LOCAL_SYMBOL: b2Math.h<258:1> [b2Math.h <258:1 258:1>]
LOCAL_SYMBOL: b2Math.h<258:1> [b2Math.h <296:1 296:1>]
LOCAL_SYMBOL: b2Math.h<260:12> [b2Math.h <260:12 260:12>]
LOCAL_SYMBOL: b2Math.h<260:12> [b2Math.h <260:13 260:13>]
LOCAL_SYMBOL: b2Math.h<263:24> [b2Math.h <263:24 263:25>]
LOCAL_SYMBOL: b2Math.h<263:24> [b2Math.h <265:8 265:9>]
LOCAL_SYMBOL: b2Math.h<263:42> [b2Math.h <263:42 263:43>]
LOCAL_SYMBOL: b2Math.h<263:42> [b2Math.h <266:8 266:9>]
LOCAL_SYMBOL: b2Math.h<263:60> [b2Math.h <263:60 263:61>]
LOCAL_SYMBOL: b2Math.h<263:60> [b2Math.h <267:8 267:9>]
LOCAL_SYMBOL: b2Math.h<264:2> [b2Math.h <264:2 264:2>]
LOCAL_SYMBOL: b2Math.h<264:2> [b2Math.h <268:2 268:2>]
LOCAL_SYMBOL: b2Math.h<26:31> [b2Math.h <26:31 26:31>]
LOCAL_SYMBOL: b2Math.h<26:31> [b2Math.h <28:40 28:40>]
LOCAL_SYMBOL: b2Math.h<272:2> [b2Math.h <272:2 272:2>]
LOCAL_SYMBOL: b2Math.h<272:2> [b2Math.h <276:2 276:2>]
LOCAL_SYMBOL: b2Math.h<27:1> [b2Math.h <27:1 27:1>]
LOCAL_SYMBOL: b2Math.h<27:1> [b2Math.h <30:1 30:1>]
LOCAL_SYMBOL: b2Math.h<280:31> [b2Math.h <280:31 280:31>]
LOCAL_SYMBOL: b2Math.h<285:31> [b2Math.h <285:31 285:31>]
LOCAL_SYMBOL: b2Math.h<289:29> [b2Math.h <289:29 289:29>]
LOCAL_SYMBOL: b2Math.h<28:8> [b2Math.h <28:8 28:9>]
LOCAL_SYMBOL: b2Math.h<28:8> [b2Math.h <29:10 29:11>]
LOCAL_SYMBOL: b2Math.h<293:32> [b2Math.h <293:32 293:32>]
LOCAL_SYMBOL: b2Math.h<300:1> [b2Math.h <300:1 300:1>]
LOCAL_SYMBOL: b2Math.h<300:1> [b2Math.h <346:1 346:1>]
LOCAL_SYMBOL: b2Math.h<301:10> [b2Math.h <301:10 301:10>]
LOCAL_SYMBOL: b2Math.h<301:10> [b2Math.h <301:11 301:11>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <304:25 304:29>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <307:12 307:16>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <308:12 308:16>]
LOCAL_SYMBOL: b2Math.h<305:2> [b2Math.h <305:2 305:2>]
LOCAL_SYMBOL: b2Math.h<305:2> [b2Math.h <309:2 309:2>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <312:19 312:23>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <315:12 315:16>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <316:12 316:16>]
LOCAL_SYMBOL: b2Math.h<313:2> [b2Math.h <313:2 313:2>]
LOCAL_SYMBOL: b2Math.h<313:2> [b2Math.h <317:2 317:2>]
LOCAL_SYMBOL: b2Math.h<321:2> [b2Math.h <321:2 321:2>]
LOCAL_SYMBOL: b2Math.h<321:2> [b2Math.h <324:2 324:2>]
LOCAL_SYMBOL: b2Math.h<328:2> [b2Math.h <328:2 328:2>]
LOCAL_SYMBOL: b2Math.h<328:2> [b2Math.h <330:2 330:2>]
LOCAL_SYMBOL: b2Math.h<334:2> [b2Math.h <334:2 334:2>]
LOCAL_SYMBOL: b2Math.h<334:2> [b2Math.h <336:2 336:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <33:34 33:34>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <41:14 41:14>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <42:25 42:25>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <44:2 44:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:2 45:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:6 45:6>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:26 45:26>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:30 45:30>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <46:9 46:9>]
LOCAL_SYMBOL: b2Math.h<340:2> [b2Math.h <340:2 340:2>]
LOCAL_SYMBOL: b2Math.h<340:2> [b2Math.h <342:2 342:2>]
LOCAL_SYMBOL: b2Math.h<34:1> [b2Math.h <34:1 34:1>]
LOCAL_SYMBOL: b2Math.h<34:1> [b2Math.h <47:1 47:1>]
LOCAL_SYMBOL: b2Math.h<351:1> [b2Math.h <351:1 351:1>]
LOCAL_SYMBOL: b2Math.h<351:1> [b2Math.h <374:1 374:1>]
LOCAL_SYMBOL: b2Math.h<353:16> [b2Math.h <353:16 353:16>]
LOCAL_SYMBOL: b2Math.h<353:16> [b2Math.h <353:17 353:17>]
LOCAL_SYMBOL: b2Math.h<356:28> [b2Math.h <356:28 356:35>]
LOCAL_SYMBOL: b2Math.h<356:28> [b2Math.h <356:65 356:72>]
LOCAL_SYMBOL: b2Math.h<356:51> [b2Math.h <356:51 356:58>]
LOCAL_SYMBOL: b2Math.h<356:51> [b2Math.h <356:78 356:85>]
LOCAL_SYMBOL: b2Math.h<356:88> [b2Math.h <356:88 356:88>]
LOCAL_SYMBOL: b2Math.h<356:88> [b2Math.h <356:89 356:89>]
LOCAL_SYMBOL: b2Math.h<360:2> [b2Math.h <360:2 360:2>]
LOCAL_SYMBOL: b2Math.h<360:2> [b2Math.h <363:2 363:2>]
LOCAL_SYMBOL: b2Math.h<366:25> [b2Math.h <366:25 366:32>]
LOCAL_SYMBOL: b2Math.h<366:25> [b2Math.h <368:7 368:14>]
LOCAL_SYMBOL: b2Math.h<366:43> [b2Math.h <366:43 366:47>]
LOCAL_SYMBOL: b2Math.h<366:43> [b2Math.h <369:9 369:13>]
LOCAL_SYMBOL: b2Math.h<367:2> [b2Math.h <367:2 367:2>]
LOCAL_SYMBOL: b2Math.h<367:2> [b2Math.h <370:2 370:2>]
LOCAL_SYMBOL: b2Math.h<36:2> [b2Math.h <36:2 36:2>]
LOCAL_SYMBOL: b2Math.h<36:2> [b2Math.h <39:2 39:2>]
LOCAL_SYMBOL: b2Math.h<381:1> [b2Math.h <381:1 381:1>]
LOCAL_SYMBOL: b2Math.h<381:1> [b2Math.h <400:1 400:1>]
LOCAL_SYMBOL: b2Math.h<384:33> [b2Math.h <384:33 384:35>]
LOCAL_SYMBOL: b2Math.h<384:46> [b2Math.h <384:46 384:49>]
LOCAL_SYMBOL: b2Math.h<388:23> [b2Math.h <388:23 388:27>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <39:4 39:10>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <41:2 41:8>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <43:2 43:8>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <43:28 43:34>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <44:6 44:12>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <406:36 406:36>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <408:9 408:9>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <408:21 408:21>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <406:53 406:53>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <408:15 408:15>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <408:27 408:27>]
LOCAL_SYMBOL: b2Math.h<407:1> [b2Math.h <407:1 407:1>]
LOCAL_SYMBOL: b2Math.h<407:1> [b2Math.h <409:1 409:1>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <412:38 412:38>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <414:9 414:9>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <414:21 414:21>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <412:55 412:55>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <414:15 414:15>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <414:27 414:27>]
LOCAL_SYMBOL: b2Math.h<413:1> [b2Math.h <413:1 413:1>]
LOCAL_SYMBOL: b2Math.h<413:1> [b2Math.h <415:1 415:1>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <419:37 419:37>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <421:20 421:20>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <421:30 421:30>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <419:48 419:48>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <421:16 421:16>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <421:26 421:26>]
LOCAL_SYMBOL: b2Math.h<420:1> [b2Math.h <420:1 420:1>]
LOCAL_SYMBOL: b2Math.h<420:1> [b2Math.h <422:1 422:1>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <426:31 426:31>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <428:17 428:17>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <428:26 428:26>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <426:48 426:48>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <428:21 428:21>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <428:30 428:30>]
LOCAL_SYMBOL: b2Math.h<427:1> [b2Math.h <427:1 427:1>]
LOCAL_SYMBOL: b2Math.h<427:1> [b2Math.h <429:1 429:1>]
LOCAL_SYMBOL: b2Math.h<42:10> [b2Math.h <42:10 42:14>]
LOCAL_SYMBOL: b2Math.h<42:10> [b2Math.h <45:18 45:22>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <433:36 433:36>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:16 435:16>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:31 435:31>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:45 435:45>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:60 435:60>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <433:53 433:53>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:25 435:25>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:40 435:40>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:54 435:54>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:69 435:69>]
LOCAL_SYMBOL: b2Math.h<434:1> [b2Math.h <434:1 434:1>]
LOCAL_SYMBOL: b2Math.h<434:1> [b2Math.h <436:1 436:1>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <440:37 440:37>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <442:25 442:25>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <442:41 442:41>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <440:54 440:54>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <442:22 442:22>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <442:38 442:38>]
LOCAL_SYMBOL: b2Math.h<441:1> [b2Math.h <441:1 441:1>]
LOCAL_SYMBOL: b2Math.h<441:1> [b2Math.h <443:1 443:1>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <446:41 446:41>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <448:16 448:16>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <448:27 448:27>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <446:58 446:58>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <448:22 448:22>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <448:33 448:33>]
LOCAL_SYMBOL: b2Math.h<447:1> [b2Math.h <447:1 447:1>]
LOCAL_SYMBOL: b2Math.h<447:1> [b2Math.h <449:1 449:1>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <452:41 452:41>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <454:16 454:16>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <454:27 454:27>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <452:58 452:58>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <454:22 454:22>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <454:33 454:33>]
LOCAL_SYMBOL: b2Math.h<453:1> [b2Math.h <453:1 453:1>]
LOCAL_SYMBOL: b2Math.h<453:1> [b2Math.h <455:1 455:1>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <457:35 457:35>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <459:16 459:16>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <459:25 459:25>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <457:52 457:52>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <459:20 459:20>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <459:29 459:29>]
LOCAL_SYMBOL: b2Math.h<458:1> [b2Math.h <458:1 458:1>]
LOCAL_SYMBOL: b2Math.h<458:1> [b2Math.h <460:1 460:1>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <462:40 462:40>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <464:9 464:9>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <464:23 464:23>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <462:57 462:57>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <464:16 464:16>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <464:30 464:30>]
LOCAL_SYMBOL: b2Math.h<463:1> [b2Math.h <463:1 463:1>]
LOCAL_SYMBOL: b2Math.h<463:1> [b2Math.h <465:1 465:1>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <467:40 467:40>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <469:9 469:9>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <469:23 469:23>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <467:57 467:57>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <469:16 469:16>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <469:30 469:30>]
LOCAL_SYMBOL: b2Math.h<468:1> [b2Math.h <468:1 468:1>]
LOCAL_SYMBOL: b2Math.h<468:1> [b2Math.h <470:1 470:1>]
LOCAL_SYMBOL: b2Math.h<472:41> [b2Math.h <472:41 472:41>]
LOCAL_SYMBOL: b2Math.h<472:41> [b2Math.h <474:13 474:13>]
LOCAL_SYMBOL: b2Math.h<472:58> [b2Math.h <472:58 472:58>]
LOCAL_SYMBOL: b2Math.h<472:58> [b2Math.h <474:17 474:17>]
LOCAL_SYMBOL: b2Math.h<473:1> [b2Math.h <473:1 473:1>]
LOCAL_SYMBOL: b2Math.h<473:1> [b2Math.h <476:1 476:1>]
LOCAL_SYMBOL: b2Math.h<474:9> [b2Math.h <474:9 474:9>]
LOCAL_SYMBOL: b2Math.h<474:9> [b2Math.h <475:9 475:9>]
LOCAL_SYMBOL: b2Math.h<478:48> [b2Math.h <478:48 478:48>]
LOCAL_SYMBOL: b2Math.h<478:48> [b2Math.h <480:13 480:13>]
LOCAL_SYMBOL: b2Math.h<478:65> [b2Math.h <478:65 478:65>]
LOCAL_SYMBOL: b2Math.h<478:65> [b2Math.h <480:17 480:17>]
LOCAL_SYMBOL: b2Math.h<479:1> [b2Math.h <479:1 479:1>]
LOCAL_SYMBOL: b2Math.h<479:1> [b2Math.h <482:1 482:1>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <480:9 480:9>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <481:15 481:15>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <481:18 481:18>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <484:35 484:35>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:16 486:16>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:25 486:25>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:34 486:34>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <484:52 484:52>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:20 486:20>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:29 486:29>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:38 486:38>]
LOCAL_SYMBOL: b2Math.h<485:1> [b2Math.h <485:1 485:1>]
LOCAL_SYMBOL: b2Math.h<485:1> [b2Math.h <487:1 487:1>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <490:41 490:41>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:16 492:16>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:27 492:27>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:38 492:38>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <490:58 490:58>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:22 492:22>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:33 492:33>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:44 492:44>]
LOCAL_SYMBOL: b2Math.h<491:1> [b2Math.h <491:1 491:1>]
LOCAL_SYMBOL: b2Math.h<491:1> [b2Math.h <493:1 493:1>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <496:41 496:41>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:16 498:16>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:27 498:27>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:38 498:38>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <496:58 496:58>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:22 498:22>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:33 498:33>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:44 498:44>]
LOCAL_SYMBOL: b2Math.h<497:1> [b2Math.h <497:1 497:1>]
LOCAL_SYMBOL: b2Math.h<497:1> [b2Math.h <499:1 499:1>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <502:36 502:36>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:9 504:9>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:21 504:21>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:33 504:33>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <502:53 502:53>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:15 504:15>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:27 504:27>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:39 504:39>]
LOCAL_SYMBOL: b2Math.h<503:1> [b2Math.h <503:1 503:1>]
LOCAL_SYMBOL: b2Math.h<503:1> [b2Math.h <505:1 505:1>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <508:37 508:37>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:16 510:16>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:28 510:28>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:39 510:39>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:51 510:51>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:62 510:62>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:74 510:74>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <508:54 508:54>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:22 510:22>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:34 510:34>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:45 510:45>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:57 510:57>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:68 510:68>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:80 510:80>]
LOCAL_SYMBOL: b2Math.h<509:1> [b2Math.h <509:1 509:1>]
LOCAL_SYMBOL: b2Math.h<509:1> [b2Math.h <511:1 511:1>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <513:43 513:43>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <515:17 515:17>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <515:30 515:30>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <513:61 513:61>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <515:24 515:24>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <515:37 515:37>]
LOCAL_SYMBOL: b2Math.h<514:1> [b2Math.h <514:1 514:1>]
LOCAL_SYMBOL: b2Math.h<514:1> [b2Math.h <516:1 516:1>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <519:37 519:37>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <521:23 521:23>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <521:39 521:39>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <519:55 519:55>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <521:26 521:26>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <521:42 521:42>]
LOCAL_SYMBOL: b2Math.h<520:1> [b2Math.h <520:1 520:1>]
LOCAL_SYMBOL: b2Math.h<520:1> [b2Math.h <522:1 522:1>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <525:38 525:38>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <527:18 527:18>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <527:37 527:37>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <528:18 528:18>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <528:37 528:37>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <525:56 525:56>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <527:24 527:24>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <527:43 527:43>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <528:24 528:24>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <528:43 528:43>]
LOCAL_SYMBOL: b2Math.h<526:1> [b2Math.h <526:1 526:1>]
LOCAL_SYMBOL: b2Math.h<526:1> [b2Math.h <530:1 530:1>]
LOCAL_SYMBOL: b2Math.h<527:9> [b2Math.h <527:9 527:10>]
LOCAL_SYMBOL: b2Math.h<527:9> [b2Math.h <529:17 529:18>]
LOCAL_SYMBOL: b2Math.h<528:9> [b2Math.h <528:9 528:10>]
LOCAL_SYMBOL: b2Math.h<528:9> [b2Math.h <529:21 529:22>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <533:36 533:36>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:15 535:15>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:28 535:28>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:41 535:41>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <533:53 533:53>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:9 535:9>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:22 535:22>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:35 535:35>]
LOCAL_SYMBOL: b2Math.h<534:1> [b2Math.h <534:1 534:1>]
LOCAL_SYMBOL: b2Math.h<534:1> [b2Math.h <536:1 536:1>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <539:38 539:38>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:16 541:16>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:31 541:31>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:45 541:45>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:60 541:60>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <539:55 539:55>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:25 541:25>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:40 541:40>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:54 541:54>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:69 541:69>]
LOCAL_SYMBOL: b2Math.h<540:1> [b2Math.h <540:1 540:1>]
LOCAL_SYMBOL: b2Math.h<540:1> [b2Math.h <542:1 542:1>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <545:33 545:33>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <552:9 552:9>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <552:21 552:21>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <553:9 553:9>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <553:21 553:21>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <545:49 545:49>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <552:15 552:15>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <552:27 552:27>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <553:15 553:15>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <553:27 553:27>]
LOCAL_SYMBOL: b2Math.h<546:1> [b2Math.h <546:1 546:1>]
LOCAL_SYMBOL: b2Math.h<546:1> [b2Math.h <555:1 555:1>]
LOCAL_SYMBOL: b2Math.h<54:1> [b2Math.h <54:1 54:1>]
LOCAL_SYMBOL: b2Math.h<54:1> [b2Math.h <141:1 141:1>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <551:8 551:9>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <552:2 552:3>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <553:2 553:3>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <554:9 554:10>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <558:34 558:34>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <565:9 565:9>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <565:21 565:21>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <566:9 566:9>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <566:21 566:21>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <558:50 558:50>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <565:15 565:15>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <565:27 565:27>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <566:15 566:15>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <566:27 566:27>]
LOCAL_SYMBOL: b2Math.h<559:1> [b2Math.h <559:1 559:1>]
LOCAL_SYMBOL: b2Math.h<559:1> [b2Math.h <568:1 568:1>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <564:8 564:9>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <565:2 565:3>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <566:2 566:3>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <567:9 567:10>]
LOCAL_SYMBOL: b2Math.h<56:11> [b2Math.h <56:11 56:11>]
LOCAL_SYMBOL: b2Math.h<56:11> [b2Math.h <56:12 56:12>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <571:34 571:34>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:16 573:16>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:28 573:28>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:39 573:39>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:51 573:51>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <571:51 571:51>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:22 573:22>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:34 573:34>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:45 573:45>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:57 573:57>]
LOCAL_SYMBOL: b2Math.h<572:1> [b2Math.h <572:1 572:1>]
LOCAL_SYMBOL: b2Math.h<572:1> [b2Math.h <574:1 574:1>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <577:35 577:35>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:16 579:16>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:28 579:28>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:40 579:40>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:52 579:52>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <577:52 577:52>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:22 579:22>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:34 579:34>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:46 579:46>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:58 579:58>]
LOCAL_SYMBOL: b2Math.h<578:1> [b2Math.h <578:1 578:1>]
LOCAL_SYMBOL: b2Math.h<578:1> [b2Math.h <580:1 580:1>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <582:40 582:40>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:15 584:15>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:29 584:29>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:44 584:44>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:15 585:15>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:29 585:29>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:44 585:44>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <582:57 582:57>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <584:23 584:23>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <584:37 584:37>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <585:23 585:23>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <585:37 585:37>]
LOCAL_SYMBOL: b2Math.h<583:1> [b2Math.h <583:1 583:1>]
LOCAL_SYMBOL: b2Math.h<583:1> [b2Math.h <588:1 588:1>]
LOCAL_SYMBOL: b2Math.h<584:10> [b2Math.h <584:10 584:10>]
LOCAL_SYMBOL: b2Math.h<584:10> [b2Math.h <587:16 587:16>]
LOCAL_SYMBOL: b2Math.h<585:10> [b2Math.h <585:10 585:10>]
LOCAL_SYMBOL: b2Math.h<585:10> [b2Math.h <587:19 587:19>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <590:41 590:41>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <592:21 592:21>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <593:21 593:21>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <594:15 594:15>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <594:28 594:28>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <595:16 595:16>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <595:29 595:29>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <590:58 590:58>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <592:15 592:15>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <593:15 593:15>]
LOCAL_SYMBOL: b2Math.h<591:1> [b2Math.h <591:1 591:1>]
LOCAL_SYMBOL: b2Math.h<591:1> [b2Math.h <598:1 598:1>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <592:10 592:11>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <594:23 594:24>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <595:24 595:25>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <593:10 593:11>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <594:36 594:37>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <595:37 595:38>]
LOCAL_SYMBOL: b2Math.h<594:10> [b2Math.h <594:10 594:10>]
LOCAL_SYMBOL: b2Math.h<594:10> [b2Math.h <597:16 597:16>]
LOCAL_SYMBOL: b2Math.h<595:10> [b2Math.h <595:10 595:10>]
LOCAL_SYMBOL: b2Math.h<595:10> [b2Math.h <597:19 597:19>]
LOCAL_SYMBOL: b2Math.h<59:17> [b2Math.h <59:17 59:19>]
LOCAL_SYMBOL: b2Math.h<59:17> [b2Math.h <59:39 59:41>]
LOCAL_SYMBOL: b2Math.h<59:30> [b2Math.h <59:30 59:32>]
LOCAL_SYMBOL: b2Math.h<59:30> [b2Math.h <59:47 59:49>]
LOCAL_SYMBOL: b2Math.h<59:52> [b2Math.h <59:52 59:52>]
LOCAL_SYMBOL: b2Math.h<59:52> [b2Math.h <59:53 59:53>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <602:45 602:45>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <605:14 605:14>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <606:14 606:14>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <606:26 606:26>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <602:67 602:67>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <605:19 605:19>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <606:19 606:19>]
LOCAL_SYMBOL: b2Math.h<603:1> [b2Math.h <603:1 603:1>]
LOCAL_SYMBOL: b2Math.h<603:1> [b2Math.h <608:1 608:1>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <604:14 604:14>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <605:2 605:2>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <606:2 606:2>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <607:9 607:9>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <612:46 612:46>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <615:15 615:15>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <616:15 616:15>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <616:26 616:26>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <612:68 612:68>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <615:20 615:20>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <616:20 616:20>]
LOCAL_SYMBOL: b2Math.h<613:1> [b2Math.h <613:1 613:1>]
LOCAL_SYMBOL: b2Math.h<613:1> [b2Math.h <618:1 618:1>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <614:14 614:14>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <615:2 615:2>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <616:2 616:2>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <617:9 617:9>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <620:20 620:20>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <621:8 621:8>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <621:16 621:16>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <623:13 623:13>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <621:18 621:18>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:9 623:9>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:20 623:20>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:25 623:25>]
LOCAL_SYMBOL: b2Math.h<622:1> [b2Math.h <622:1 622:1>]
LOCAL_SYMBOL: b2Math.h<622:1> [b2Math.h <624:1 624:1>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <626:35 626:35>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <628:22 628:22>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <628:34 628:34>]
LOCAL_SYMBOL: b2Math.h<627:1> [b2Math.h <627:1 627:1>]
LOCAL_SYMBOL: b2Math.h<627:1> [b2Math.h <629:1 629:1>]
LOCAL_SYMBOL: b2Math.h<62:17> [b2Math.h <62:17 62:17>]
LOCAL_SYMBOL: b2Math.h<62:17> [b2Math.h <62:39 62:39>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <631:37 631:37>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <633:23 633:23>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <633:36 633:36>]
LOCAL_SYMBOL: b2Math.h<632:1> [b2Math.h <632:1 632:1>]
LOCAL_SYMBOL: b2Math.h<632:1> [b2Math.h <634:1 634:1>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <636:20 636:20>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <637:8 637:8>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <637:16 637:16>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <637:21 637:21>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <637:18 637:18>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <639:9 639:9>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <639:17 639:17>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <637:23 637:23>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <639:13 639:13>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <639:21 639:21>]
LOCAL_SYMBOL: b2Math.h<638:1> [b2Math.h <638:1 638:1>]
LOCAL_SYMBOL: b2Math.h<638:1> [b2Math.h <640:1 640:1>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <642:35 642:35>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <644:22 644:22>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <644:39 644:39>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <642:52 642:52>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <644:27 644:27>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <644:44 644:44>]
LOCAL_SYMBOL: b2Math.h<643:1> [b2Math.h <643:1 643:1>]
LOCAL_SYMBOL: b2Math.h<643:1> [b2Math.h <645:1 645:1>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <647:20 647:20>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <648:8 648:8>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <648:16 648:16>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <648:21 648:21>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <648:18 648:18>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <650:9 650:9>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <650:17 650:17>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <648:23 648:23>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <650:13 650:13>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <650:21 650:21>]
LOCAL_SYMBOL: b2Math.h<649:1> [b2Math.h <649:1 649:1>]
LOCAL_SYMBOL: b2Math.h<649:1> [b2Math.h <651:1 651:1>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <653:35 653:35>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <655:22 655:22>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <655:39 655:39>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <653:52 653:52>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <655:27 655:27>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <655:44 655:44>]
LOCAL_SYMBOL: b2Math.h<654:1> [b2Math.h <654:1 654:1>]
LOCAL_SYMBOL: b2Math.h<654:1> [b2Math.h <656:1 656:1>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <658:20 658:20>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:8 659:8>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:18 659:18>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:23 659:23>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:30 659:30>]
LOCAL_SYMBOL: b2Math.h<659:20> [b2Math.h <659:20 659:20>]
LOCAL_SYMBOL: b2Math.h<659:20> [b2Math.h <661:26 661:26>]
LOCAL_SYMBOL: b2Math.h<659:25> [b2Math.h <659:25 659:27>]
LOCAL_SYMBOL: b2Math.h<659:25> [b2Math.h <661:15 661:17>]
LOCAL_SYMBOL: b2Math.h<659:32> [b2Math.h <659:32 659:35>]
LOCAL_SYMBOL: b2Math.h<659:32> [b2Math.h <661:29 661:32>]
LOCAL_SYMBOL: b2Math.h<65:19> [b2Math.h <65:19 65:20>]
LOCAL_SYMBOL: b2Math.h<65:19> [b2Math.h <65:41 65:42>]
LOCAL_SYMBOL: b2Math.h<65:31> [b2Math.h <65:31 65:32>]
LOCAL_SYMBOL: b2Math.h<65:31> [b2Math.h <65:49 65:50>]
LOCAL_SYMBOL: b2Math.h<65:35> [b2Math.h <65:35 65:35>]
LOCAL_SYMBOL: b2Math.h<65:35> [b2Math.h <65:53 65:53>]
LOCAL_SYMBOL: b2Math.h<660:1> [b2Math.h <660:1 660:1>]
LOCAL_SYMBOL: b2Math.h<660:1> [b2Math.h <662:1 662:1>]
LOCAL_SYMBOL: b2Math.h<664:37> [b2Math.h <664:37 664:37>]
LOCAL_SYMBOL: b2Math.h<664:37> [b2Math.h <666:26 666:26>]
LOCAL_SYMBOL: b2Math.h<664:54> [b2Math.h <664:54 664:56>]
LOCAL_SYMBOL: b2Math.h<664:54> [b2Math.h <666:15 666:17>]
LOCAL_SYMBOL: b2Math.h<664:73> [b2Math.h <664:73 664:76>]
LOCAL_SYMBOL: b2Math.h<664:73> [b2Math.h <666:29 666:32>]
LOCAL_SYMBOL: b2Math.h<665:1> [b2Math.h <665:1 665:1>]
LOCAL_SYMBOL: b2Math.h<665:1> [b2Math.h <667:1 667:1>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <669:19 669:19>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <669:41 669:41>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <669:47 669:47>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <671:2 671:2>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <669:44 669:44>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <671:10 671:10>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <672:2 672:2>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <669:50 669:50>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <672:6 672:6>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <673:2 673:2>]
LOCAL_SYMBOL: b2Math.h<670:1> [b2Math.h <670:1 670:1>]
LOCAL_SYMBOL: b2Math.h<670:1> [b2Math.h <674:1 674:1>]
LOCAL_SYMBOL: b2Math.h<671:4> [b2Math.h <671:4 671:6>]
LOCAL_SYMBOL: b2Math.h<671:4> [b2Math.h <673:6 673:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <681:39 681:39>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <683:2 683:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <683:8 683:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <684:2 684:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <684:8 684:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <685:2 685:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <685:8 685:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <686:2 686:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <686:8 686:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <687:2 687:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <687:8 687:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <688:9 688:9>]
LOCAL_SYMBOL: b2Math.h<682:1> [b2Math.h <682:1 682:1>]
LOCAL_SYMBOL: b2Math.h<682:1> [b2Math.h <689:1 689:1>]
LOCAL_SYMBOL: b2Math.h<68:28> [b2Math.h <68:28 68:28>]
LOCAL_SYMBOL: b2Math.h<68:28> [b2Math.h <68:65 68:65>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:37 68:37>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:40 68:40>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:62 68:62>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <691:35 691:35>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:16 693:16>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:26 693:26>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:31 693:31>]
LOCAL_SYMBOL: b2Math.h<692:1> [b2Math.h <692:1 692:1>]
LOCAL_SYMBOL: b2Math.h<692:1> [b2Math.h <695:1 695:1>]
LOCAL_SYMBOL: b2Math.h<693:7> [b2Math.h <693:7 693:12>]
LOCAL_SYMBOL: b2Math.h<693:7> [b2Math.h <694:9 694:14>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <697:48 697:49>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <699:2 699:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <701:2 701:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <704:2 704:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <704:17 704:18>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <697:60 697:63>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <699:18 699:21>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <699:31 699:34>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <700:26 700:29>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <700:39 700:42>]
LOCAL_SYMBOL: b2Math.h<698:1> [b2Math.h <698:1 698:1>]
LOCAL_SYMBOL: b2Math.h<698:1> [b2Math.h <705:1 705:1>]
LOCAL_SYMBOL: b2Math.h<700:10> [b2Math.h <700:10 700:14>]
LOCAL_SYMBOL: b2Math.h<700:10> [b2Math.h <701:12 701:16>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <707:38 707:42>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <710:18 710:22>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <713:11 713:15>]
LOCAL_SYMBOL: b2Math.h<708:1> [b2Math.h <708:1 708:1>]
LOCAL_SYMBOL: b2Math.h<708:1> [b2Math.h <714:1 714:1>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <710:10 710:13>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <711:8 711:11>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <712:8 712:11>]
LOCAL_SYMBOL: b2Math.h<718:1> [b2Math.h <718:1 718:1>]
LOCAL_SYMBOL: b2Math.h<718:1> [b2Math.h <723:1 723:1>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <719:10 719:14>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <720:15 720:19>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <720:35 720:39>]
LOCAL_SYMBOL: b2Math.h<71:29> [b2Math.h <71:29 71:29>]
LOCAL_SYMBOL: b2Math.h<71:29> [b2Math.h <73:15 73:15>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <720:10 720:10>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <721:8 721:8>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <722:7 722:7>]
LOCAL_SYMBOL: b2Math.h<72:2> [b2Math.h <72:2 72:2>]
LOCAL_SYMBOL: b2Math.h<72:2> [b2Math.h <74:2 74:2>]
LOCAL_SYMBOL: b2Math.h<77:30> [b2Math.h <77:30 77:30>]
LOCAL_SYMBOL: b2Math.h<77:30> [b2Math.h <79:15 79:15>]
LOCAL_SYMBOL: b2Math.h<78:2> [b2Math.h <78:2 78:2>]
LOCAL_SYMBOL: b2Math.h<78:2> [b2Math.h <80:2 80:2>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <83:34 83:34>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <85:8 85:8>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <85:18 85:18>]
LOCAL_SYMBOL: b2Math.h<84:2> [b2Math.h <84:2 84:2>]
LOCAL_SYMBOL: b2Math.h<84:2> [b2Math.h <86:2 86:2>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <89:34 89:34>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <91:8 91:8>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <91:18 91:18>]
LOCAL_SYMBOL: b2Math.h<90:2> [b2Math.h <90:2 90:2>]
LOCAL_SYMBOL: b2Math.h<90:2> [b2Math.h <92:2 92:2>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <95:28 95:28>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <97:8 97:8>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <97:16 97:16>]
LOCAL_SYMBOL: b2Math.h<96:2> [b2Math.h <96:2 96:2>]
LOCAL_SYMBOL: b2Math.h<96:2> [b2Math.h <98:2 98:2>]
LOCAL_SYMBOL: b2PolygonShape.h<29:1> [b2PolygonShape.h <29:1 29:1>]
LOCAL_SYMBOL: b2PolygonShape.h<29:1> [b2PolygonShape.h <79:1 79:1>]
LOCAL_SYMBOL: b2PolygonShape.h<34:35> [b2PolygonShape.h <34:35 34:43>]
LOCAL_SYMBOL: b2PolygonShape.h<44:25> [b2PolygonShape.h <44:25 44:30>]
LOCAL_SYMBOL: b2PolygonShape.h<44:39> [b2PolygonShape.h <44:39 44:43>]
LOCAL_SYMBOL: b2PolygonShape.h<49:24> [b2PolygonShape.h <49:24 49:25>]
LOCAL_SYMBOL: b2PolygonShape.h<49:36> [b2PolygonShape.h <49:36 49:37>]
LOCAL_SYMBOL: b2PolygonShape.h<56:24> [b2PolygonShape.h <56:24 56:25>]
LOCAL_SYMBOL: b2PolygonShape.h<56:36> [b2PolygonShape.h <56:36 56:37>]
LOCAL_SYMBOL: b2PolygonShape.h<56:54> [b2PolygonShape.h <56:54 56:59>]
LOCAL_SYMBOL: b2PolygonShape.h<56:70> [b2PolygonShape.h <56:70 56:74>]
LOCAL_SYMBOL: b2PolygonShape.h<59:36> [b2PolygonShape.h <59:36 59:44>]
LOCAL_SYMBOL: b2PolygonShape.h<59:61> [b2PolygonShape.h <59:61 59:61>]
LOCAL_SYMBOL: b2PolygonShape.h<62:32> [b2PolygonShape.h <62:32 62:37>]
LOCAL_SYMBOL: b2PolygonShape.h<62:62> [b2PolygonShape.h <62:62 62:66>]
LOCAL_SYMBOL: b2PolygonShape.h<63:25> [b2PolygonShape.h <63:25 63:33>]
LOCAL_SYMBOL: b2PolygonShape.h<63:42> [b2PolygonShape.h <63:42 63:51>]
LOCAL_SYMBOL: b2PolygonShape.h<66:27> [b2PolygonShape.h <66:27 66:30>]
LOCAL_SYMBOL: b2PolygonShape.h<66:52> [b2PolygonShape.h <66:52 66:60>]
LOCAL_SYMBOL: b2PolygonShape.h<66:69> [b2PolygonShape.h <66:69 66:78>]
LOCAL_SYMBOL: b2PolygonShape.h<69:31> [b2PolygonShape.h <69:31 69:38>]
LOCAL_SYMBOL: b2PolygonShape.h<69:49> [b2PolygonShape.h <69:49 69:55>]
LOCAL_SYMBOL: b2PolygonShape.h<82:1> [b2PolygonShape.h <82:1 82:1>]
LOCAL_SYMBOL: b2PolygonShape.h<82:1> [b2PolygonShape.h <87:1 87:1>]
LOCAL_SYMBOL: b2Settings.h<135:21> [b2Settings.h <135:21 135:24>]
LOCAL_SYMBOL: b2Settings.h<138:19> [b2Settings.h <138:19 138:21>]
LOCAL_SYMBOL: b2Settings.h<141:24> [b2Settings.h <141:24 141:29>]
LOCAL_SYMBOL: b2Settings.h<146:1> [b2Settings.h <146:1 146:1>]
LOCAL_SYMBOL: b2Settings.h<146:1> [b2Settings.h <150:1 150:1>]
LOCAL_SYMBOL: b2Shape.h<100:1> [b2Shape.h <100:1 100:1>]
LOCAL_SYMBOL: b2Shape.h<100:1> [b2Shape.h <102:1 102:1>]
LOCAL_SYMBOL: b2Shape.h<28:1> [b2Shape.h <28:1 28:1>]
LOCAL_SYMBOL: b2Shape.h<28:1> [b2Shape.h <37:1 37:1>]
LOCAL_SYMBOL: b2Shape.h<43:1> [b2Shape.h <43:1 43:1>]
LOCAL_SYMBOL: b2Shape.h<43:1> [b2Shape.h <97:1 97:1>]
LOCAL_SYMBOL: b2Shape.h<47:2> [b2Shape.h <47:2 47:2>]
LOCAL_SYMBOL: b2Shape.h<47:2> [b2Shape.h <53:2 53:2>]
LOCAL_SYMBOL: b2Shape.h<55:21> [b2Shape.h <55:21 55:21>]
LOCAL_SYMBOL: b2Shape.h<55:21> [b2Shape.h <55:22 55:22>]
LOCAL_SYMBOL: b2Shape.h<58:43> [b2Shape.h <58:43 58:51>]
LOCAL_SYMBOL: b2Shape.h<70:44> [b2Shape.h <70:44 70:45>]
LOCAL_SYMBOL: b2Shape.h<70:62> [b2Shape.h <70:62 70:62>]
LOCAL_SYMBOL: b2Shape.h<77:40> [b2Shape.h <77:40 77:45>]
LOCAL_SYMBOL: b2Shape.h<77:70> [b2Shape.h <77:70 77:74>]
LOCAL_SYMBOL: b2Shape.h<78:26> [b2Shape.h <78:26 78:34>]
LOCAL_SYMBOL: b2Shape.h<78:43> [b2Shape.h <78:43 78:52>]
LOCAL_SYMBOL: b2Shape.h<84:35> [b2Shape.h <84:35 84:38>]
LOCAL_SYMBOL: b2Shape.h<84:60> [b2Shape.h <84:60 84:61>]
LOCAL_SYMBOL: b2Shape.h<84:70> [b2Shape.h <84:70 84:79>]
LOCAL_SYMBOL: b2Shape.h<90:39> [b2Shape.h <90:39 90:46>]
LOCAL_SYMBOL: b2Shape.h<90:57> [b2Shape.h <90:57 90:63>]
COMMENT: comment [b2CollideEdge.cpp <1:1 17:4>]
COMMENT: comment [b2CollideEdge.cpp <25:1 25:50>]
COMMENT: comment [b2CollideEdge.cpp <26:1 26:40>]
COMMENT: comment [b2CollideEdge.cpp <33:2 33:36>]
COMMENT: comment [b2CollideEdge.cpp <39:2 39:28>]
COMMENT: comment [b2CollideEdge.cpp <49:2 49:13>]
COMMENT: comment [b2CollideEdge.cpp <60:3 60:38>]
COMMENT: comment [b2CollideEdge.cpp <68:4 68:55>]
COMMENT: comment [b2CollideEdge.cpp <87:2 87:13>]
COMMENT: comment [b2CollideEdge.cpp <98:3 98:38>]
COMMENT: comment [b2CollideEdge.cpp <106:4 106:51>]
COMMENT: comment [b2CollideEdge.cpp <125:2 125:14>]
COMMENT: comment [b2CollideEdge.cpp <154:1 154:69>]
COMMENT: comment [b2CollideEdge.cpp <169:1 169:46>]
COMMENT: comment [b2CollideEdge.cpp <177:1 177:36>]
COMMENT: comment [b2CollideEdge.cpp <193:1 193:83>]
COMMENT: comment [b2CollideEdge.cpp <221:1 221:14>]
COMMENT: comment [b2CollideEdge.cpp <222:1 222:25>]
COMMENT: comment [b2CollideEdge.cpp <223:1 223:49>]
COMMENT: comment [b2CollideEdge.cpp <224:1 224:31>]
COMMENT: comment [b2CollideEdge.cpp <225:1 225:61>]
COMMENT: comment [b2CollideEdge.cpp <226:1 226:54>]
COMMENT: comment [b2CollideEdge.cpp <227:1 227:68>]
COMMENT: comment [b2CollideEdge.cpp <228:1 228:48>]
COMMENT: comment [b2CollideEdge.cpp <229:1 229:11>]
COMMENT: comment [b2CollideEdge.cpp <252:2 252:31>]
COMMENT: comment [b2CollideEdge.cpp <262:2 262:31>]
COMMENT: comment [b2CollideEdge.cpp <272:2 272:74>]
COMMENT: comment [b2CollideEdge.cpp <427:2 427:27>]
COMMENT: comment [b2CollideEdge.cpp <441:2 441:71>]
COMMENT: comment [b2CollideEdge.cpp <458:2 458:41>]
COMMENT: comment [b2CollideEdge.cpp <482:3 482:82>]
COMMENT: comment [b2CollideEdge.cpp <555:2 555:58>]
COMMENT: comment [b2CollideEdge.cpp <560:2 560:23>]
COMMENT: comment [b2CollideEdge.cpp <568:2 568:32>]
COMMENT: comment [b2CollideEdge.cpp <576:2 576:49>]
COMMENT: comment [b2CollideEdge.cpp <658:4 658:19>]
COMMENT: comment [b2CollideEdge.cpp <665:3 665:15>]
COMMENT: comment [b2Collision.h <1:1 17:3>]
COMMENT: comment [b2Collision.h <25:1 25:10>]
COMMENT: comment [b2Collision.h <26:1 26:73>]
COMMENT: comment [b2Collision.h <27:1 27:30>]
COMMENT: comment [b2Collision.h <36:1 36:58>]
COMMENT: comment [b2Collision.h <37:1 37:34>]
COMMENT: comment [b2Collision.h <46:17 46:45>]
COMMENT: comment [b2Collision.h <47:17 47:45>]
COMMENT: comment [b2Collision.h <48:16 48:47>]
COMMENT: comment [b2Collision.h <49:16 49:47>]
COMMENT: comment [b2Collision.h <52:1 52:45>]
COMMENT: comment [b2Collision.h <56:18 56:59>]
COMMENT: comment [b2Collision.h <59:1 59:63>]
COMMENT: comment [b2Collision.h <60:1 60:68>]
COMMENT: comment [b2Collision.h <61:1 61:27>]
COMMENT: comment [b2Collision.h <62:1 62:56>]
COMMENT: comment [b2Collision.h <63:1 63:44>]
COMMENT: comment [b2Collision.h <64:1 64:72>]
COMMENT: comment [b2Collision.h <65:1 65:41>]
COMMENT: comment [b2Collision.h <66:1 66:69>]
COMMENT: comment [b2Collision.h <67:1 67:65>]
COMMENT: comment [b2Collision.h <68:1 68:75>]
COMMENT: comment [b2Collision.h <71:22 71:57>]
COMMENT: comment [b2Collision.h <72:25 72:57>]
COMMENT: comment [b2Collision.h <73:26 73:51>]
COMMENT: comment [b2Collision.h <74:20 74:79>]
COMMENT: comment [b2Collision.h <77:1 77:47>]
COMMENT: comment [b2Collision.h <78:1 78:46>]
COMMENT: comment [b2Collision.h <79:1 79:42>]
COMMENT: comment [b2Collision.h <80:1 80:47>]
COMMENT: comment [b2Collision.h <81:1 81:56>]
COMMENT: comment [b2Collision.h <82:1 82:44>]
COMMENT: comment [b2Collision.h <83:1 83:34>]
COMMENT: comment [b2Collision.h <84:1 84:34>]
COMMENT: comment [b2Collision.h <85:1 85:38>]
COMMENT: comment [b2Collision.h <86:1 86:25>]
COMMENT: comment [b2Collision.h <87:1 87:37>]
COMMENT: comment [b2Collision.h <88:1 88:37>]
COMMENT: comment [b2Collision.h <89:1 89:66>]
COMMENT: comment [b2Collision.h <90:1 90:68>]
COMMENT: comment [b2Collision.h <91:1 91:67>]
COMMENT: comment [b2Collision.h <92:1 92:69>]
COMMENT: comment [b2Collision.h <102:48 102:74>]
COMMENT: comment [b2Collision.h <103:29 103:60>]
COMMENT: comment [b2Collision.h <104:28 104:63>]
COMMENT: comment [b2Collision.h <106:27 106:61>]
COMMENT: comment [b2Collision.h <109:1 109:69>]
COMMENT: comment [b2Collision.h <112:2 112:66>]
COMMENT: comment [b2Collision.h <113:2 113:69>]
COMMENT: comment [b2Collision.h <114:2 114:69>]
COMMENT: comment [b2Collision.h <115:2 115:34>]
COMMENT: comment [b2Collision.h <120:24 120:62>]
COMMENT: comment [b2Collision.h <121:40 121:88>]
COMMENT: comment [b2Collision.h <122:45 122:95>]
COMMENT: comment [b2Collision.h <125:1 125:62>]
COMMENT: comment [b2Collision.h <128:17 128:42>]
COMMENT: comment [b2Collision.h <129:16 129:50>]
COMMENT: comment [b2Collision.h <130:19 130:57>]
COMMENT: comment [b2Collision.h <131:18 131:54>]
COMMENT: comment [b2Collision.h <134:1 134:102>]
COMMENT: comment [b2Collision.h <135:1 135:95>]
COMMENT: comment [b2Collision.h <139:1 139:42>]
COMMENT: comment [b2Collision.h <146:1 146:82>]
COMMENT: comment [b2Collision.h <153:1 153:85>]
COMMENT: comment [b2Collision.h <154:1 154:30>]
COMMENT: comment [b2Collision.h <161:1 161:34>]
COMMENT: comment [b2Collision.h <164:2 164:40>]
COMMENT: comment [b2Collision.h <167:2 167:33>]
COMMENT: comment [b2Collision.h <173:2 173:48>]
COMMENT: comment [b2Collision.h <179:2 179:30>]
COMMENT: comment [b2Collision.h <187:2 187:36>]
COMMENT: comment [b2Collision.h <194:2 194:38>]
COMMENT: comment [b2Collision.h <201:2 201:47>]
COMMENT: comment [b2Collision.h <214:21 214:42>]
COMMENT: comment [b2Collision.h <215:21 215:42>]
COMMENT: comment [b2Collision.h <218:1 218:56>]
COMMENT: comment [b2Collision.h <223:1 223:67>]
COMMENT: comment [b2Collision.h <228:1 228:57>]
COMMENT: comment [b2Collision.h <233:1 233:65>]
COMMENT: comment [b2Collision.h <238:1 238:65>]
COMMENT: comment [b2Collision.h <243:1 243:36>]
COMMENT: comment [b2Collision.h <247:1 247:45>]
COMMENT: comment [b2Collision.h <252:1 252:80>]
COMMENT: comment [b2Math.h <1:1 17:3>]
COMMENT: comment [b2Math.h <25:1 25:91>]
COMMENT: comment [b2Math.h <32:1 32:56>]
COMMENT: comment [b2Math.h <52:1 52:24>]
COMMENT: comment [b2Math.h <55:2 55:57>]
COMMENT: comment [b2Math.h <58:2 58:34>]
COMMENT: comment [b2Math.h <61:2 61:35>]
COMMENT: comment [b2Math.h <64:2 64:52>]
COMMENT: comment [b2Math.h <67:2 67:25>]
COMMENT: comment [b2Math.h <70:2 70:36>]
COMMENT: comment [b2Math.h <76:2 76:34>]
COMMENT: comment [b2Math.h <82:2 82:34>]
COMMENT: comment [b2Math.h <88:2 88:41>]
COMMENT: comment [b2Math.h <94:2 94:39>]
COMMENT: comment [b2Math.h <100:2 100:47>]
COMMENT: comment [b2Math.h <106:2 106:66>]
COMMENT: comment [b2Math.h <107:2 107:35>]
COMMENT: comment [b2Math.h <113:2 113:65>]
COMMENT: comment [b2Math.h <128:2 128:50>]
COMMENT: comment [b2Math.h <134:2 134:77>]
COMMENT: comment [b2Math.h <143:1 143:40>]
COMMENT: comment [b2Math.h <146:2 146:57>]
COMMENT: comment [b2Math.h <149:2 149:34>]
COMMENT: comment [b2Math.h <152:2 152:35>]
COMMENT: comment [b2Math.h <155:2 155:52>]
COMMENT: comment [b2Math.h <158:2 158:25>]
COMMENT: comment [b2Math.h <161:2 161:34>]
COMMENT: comment [b2Math.h <167:2 167:41>]
COMMENT: comment [b2Math.h <173:2 173:39>]
COMMENT: comment [b2Math.h <182:1 182:51>]
COMMENT: comment [b2Math.h <185:2 185:61>]
COMMENT: comment [b2Math.h <188:2 188:42>]
COMMENT: comment [b2Math.h <195:2 195:42>]
COMMENT: comment [b2Math.h <202:2 202:43>]
COMMENT: comment [b2Math.h <209:2 209:38>]
COMMENT: comment [b2Math.h <216:2 216:35>]
COMMENT: comment [b2Math.h <237:2 237:73>]
COMMENT: comment [b2Math.h <238:2 238:51>]
COMMENT: comment [b2Math.h <256:1 256:51>]
COMMENT: comment [b2Math.h <259:2 259:61>]
COMMENT: comment [b2Math.h <262:2 262:42>]
COMMENT: comment [b2Math.h <270:2 270:35>]
COMMENT: comment [b2Math.h <278:2 278:73>]
COMMENT: comment [b2Math.h <279:2 279:51>]
COMMENT: comment [b2Math.h <282:2 282:73>]
COMMENT: comment [b2Math.h <283:2 283:72>]
COMMENT: comment [b2Math.h <284:2 284:29>]
COMMENT: comment [b2Math.h <287:2 287:49>]
COMMENT: comment [b2Math.h <288:2 288:42>]
COMMENT: comment [b2Math.h <291:2 291:59>]
COMMENT: comment [b2Math.h <292:2 292:42>]
COMMENT: comment [b2Math.h <298:1 298:13>]
COMMENT: comment [b2Math.h <303:2 303:41>]
COMMENT: comment [b2Math.h <306:3 306:25>]
COMMENT: comment [b2Math.h <311:2 311:36>]
COMMENT: comment [b2Math.h <314:3 314:25>]
COMMENT: comment [b2Math.h <319:2 319:34>]
COMMENT: comment [b2Math.h <326:2 326:30>]
COMMENT: comment [b2Math.h <332:2 332:20>]
COMMENT: comment [b2Math.h <338:2 338:20>]
COMMENT: comment [b2Math.h <344:2 344:21>]
COMMENT: comment [b2Math.h <348:1 348:75>]
COMMENT: comment [b2Math.h <349:1 349:50>]
COMMENT: comment [b2Math.h <352:2 352:43>]
COMMENT: comment [b2Math.h <355:2 355:56>]
COMMENT: comment [b2Math.h <358:2 358:41>]
COMMENT: comment [b2Math.h <365:2 365:47>]
COMMENT: comment [b2Math.h <376:1 376:67>]
COMMENT: comment [b2Math.h <377:1 377:66>]
COMMENT: comment [b2Math.h <378:1 378:70>]
COMMENT: comment [b2Math.h <379:1 379:53>]
COMMENT: comment [b2Math.h <382:2 382:56>]
COMMENT: comment [b2Math.h <383:2 383:65>]
COMMENT: comment [b2Math.h <386:2 386:62>]
COMMENT: comment [b2Math.h <387:2 387:40>]
COMMENT: comment [b2Math.h <390:2 390:27>]
COMMENT: comment [b2Math.h <393:22 393:56>]
COMMENT: comment [b2Math.h <394:17 394:44>]
COMMENT: comment [b2Math.h <395:18 395:35>]
COMMENT: comment [b2Math.h <397:2 397:58>]
COMMENT: comment [b2Math.h <398:2 398:44>]
COMMENT: comment [b2Math.h <402:1 402:20>]
COMMENT: comment [b2Math.h <405:1 405:44>]
COMMENT: comment [b2Math.h <411:1 411:76>]
COMMENT: comment [b2Math.h <417:1 417:76>]
COMMENT: comment [b2Math.h <418:1 418:14>]
COMMENT: comment [b2Math.h <424:1 424:76>]
COMMENT: comment [b2Math.h <425:1 425:14>]
COMMENT: comment [b2Math.h <431:1 431:72>]
COMMENT: comment [b2Math.h <432:1 432:63>]
COMMENT: comment [b2Math.h <438:1 438:82>]
COMMENT: comment [b2Math.h <439:1 439:83>]
COMMENT: comment [b2Math.h <445:1 445:36>]
COMMENT: comment [b2Math.h <451:1 451:41>]
COMMENT: comment [b2Math.h <489:1 489:36>]
COMMENT: comment [b2Math.h <495:1 495:41>]
COMMENT: comment [b2Math.h <501:1 501:44>]
COMMENT: comment [b2Math.h <507:1 507:46>]
COMMENT: comment [b2Math.h <518:1 518:9>]
COMMENT: comment [b2Math.h <524:1 524:11>]
COMMENT: comment [b2Math.h <532:1 532:38>]
COMMENT: comment [b2Math.h <538:1 538:38>]
COMMENT: comment [b2Math.h <544:1 544:34>]
COMMENT: comment [b2Math.h <547:2 547:53>]
COMMENT: comment [b2Math.h <548:2 548:53>]
COMMENT: comment [b2Math.h <549:2 549:26>]
COMMENT: comment [b2Math.h <550:2 550:26>]
COMMENT: comment [b2Math.h <557:1 557:45>]
COMMENT: comment [b2Math.h <560:2 560:53>]
COMMENT: comment [b2Math.h <561:2 561:53>]
COMMENT: comment [b2Math.h <562:2 562:26>]
COMMENT: comment [b2Math.h <563:2 563:26>]
COMMENT: comment [b2Math.h <570:1 570:20>]
COMMENT: comment [b2Math.h <576:1 576:28>]
COMMENT: comment [b2Math.h <600:1 600:41>]
COMMENT: comment [b2Math.h <601:1 601:49>]
COMMENT: comment [b2Math.h <610:1 610:38>]
COMMENT: comment [b2Math.h <611:1 611:45>]
COMMENT: comment [b2Math.h <676:1 676:29>]
COMMENT: comment [b2Math.h <677:1 677:100>]
COMMENT: comment [b2Math.h <678:1 678:103>]
COMMENT: comment [b2Math.h <679:1 679:99>]
COMMENT: comment [b2Math.h <680:1 680:45>]
COMMENT: comment [b2Math.h <703:2 703:20>]
COMMENT: comment [b2Math.h <716:1 716:59>]
COMMENT: comment [b2Settings.h <1:1 17:3>]
COMMENT: comment [b2Settings.h <46:1 46:10>]
COMMENT: comment [b2Settings.h <47:1 47:75>]
COMMENT: comment [b2Settings.h <48:1 48:4>]
COMMENT: comment [b2Settings.h <50:1 50:13>]
COMMENT: comment [b2Settings.h <52:1 52:71>]
COMMENT: comment [b2Settings.h <53:1 53:27>]
COMMENT: comment [b2Settings.h <56:1 56:76>]
COMMENT: comment [b2Settings.h <57:1 57:70>]
COMMENT: comment [b2Settings.h <60:1 60:74>]
COMMENT: comment [b2Settings.h <61:1 61:68>]
COMMENT: comment [b2Settings.h <62:1 62:23>]
COMMENT: comment [b2Settings.h <65:1 65:78>]
COMMENT: comment [b2Settings.h <66:1 66:59>]
COMMENT: comment [b2Settings.h <67:1 67:40>]
COMMENT: comment [b2Settings.h <70:1 70:79>]
COMMENT: comment [b2Settings.h <71:1 71:70>]
COMMENT: comment [b2Settings.h <74:1 74:78>]
COMMENT: comment [b2Settings.h <75:1 75:70>]
COMMENT: comment [b2Settings.h <78:1 78:83>]
COMMENT: comment [b2Settings.h <79:1 79:91>]
COMMENT: comment [b2Settings.h <80:1 80:64>]
COMMENT: comment [b2Settings.h <83:1 83:78>]
COMMENT: comment [b2Settings.h <87:1 87:12>]
COMMENT: comment [b2Settings.h <89:1 89:68>]
COMMENT: comment [b2Settings.h <92:1 92:86>]
COMMENT: comment [b2Settings.h <93:1 93:64>]
COMMENT: comment [b2Settings.h <96:1 96:88>]
COMMENT: comment [b2Settings.h <97:1 97:23>]
COMMENT: comment [b2Settings.h <100:1 100:89>]
COMMENT: comment [b2Settings.h <101:1 101:23>]
COMMENT: comment [b2Settings.h <104:1 104:80>]
COMMENT: comment [b2Settings.h <105:1 105:70>]
COMMENT: comment [b2Settings.h <109:1 109:81>]
COMMENT: comment [b2Settings.h <110:1 110:70>]
COMMENT: comment [b2Settings.h <114:1 114:88>]
COMMENT: comment [b2Settings.h <115:1 115:89>]
COMMENT: comment [b2Settings.h <116:1 116:18>]
COMMENT: comment [b2Settings.h <121:1 121:9>]
COMMENT: comment [b2Settings.h <123:1 123:67>]
COMMENT: comment [b2Settings.h <126:1 126:72>]
COMMENT: comment [b2Settings.h <129:1 129:73>]
COMMENT: comment [b2Settings.h <132:1 132:21>]
COMMENT: comment [b2Settings.h <134:1 134:62>]
COMMENT: comment [b2Settings.h <137:1 137:71>]
COMMENT: comment [b2Settings.h <140:1 140:22>]
COMMENT: comment [b2Settings.h <143:1 143:30>]
COMMENT: comment [b2Settings.h <144:1 144:57>]
COMMENT: comment [b2Settings.h <147:16 147:40>]
COMMENT: comment [b2Settings.h <148:16 148:40>]
COMMENT: comment [b2Settings.h <149:19 149:33>]
COMMENT: comment [b2Settings.h <152:1 152:21>]
COMMENT: comment [b2CircleShape.h <1:1 17:3>]
COMMENT: comment [b2CircleShape.h <24:1 24:20>]
COMMENT: comment [b2CircleShape.h <30:2 30:24>]
COMMENT: comment [b2CircleShape.h <33:2 33:33>]
COMMENT: comment [b2CircleShape.h <36:2 36:24>]
COMMENT: comment [b2CircleShape.h <39:2 39:24>]
COMMENT: comment [b2CircleShape.h <43:2 43:31>]
COMMENT: comment [b2CircleShape.h <46:2 46:31>]
COMMENT: comment [b2CircleShape.h <49:2 49:14>]
COMMENT: comment [b2Shape.h <1:1 17:3>]
COMMENT: comment [b2Shape.h <26:1 26:51>]
COMMENT: comment [b2Shape.h <29:2 29:50>]
COMMENT: comment [b2Shape.h <32:2 32:74>]
COMMENT: comment [b2Shape.h <35:2 35:65>]
COMMENT: comment [b2Shape.h <39:1 39:86>]
COMMENT: comment [b2Shape.h <40:1 40:85>]
COMMENT: comment [b2Shape.h <41:1 41:67>]
COMMENT: comment [b2Shape.h <57:2 57:60>]
COMMENT: comment [b2Shape.h <60:2 60:86>]
COMMENT: comment [b2Shape.h <61:2 61:29>]
COMMENT: comment [b2Shape.h <64:2 64:41>]
COMMENT: comment [b2Shape.h <67:2 67:84>]
COMMENT: comment [b2Shape.h <68:2 68:42>]
COMMENT: comment [b2Shape.h <69:2 69:44>]
COMMENT: comment [b2Shape.h <72:2 72:39>]
COMMENT: comment [b2Shape.h <73:2 73:41>]
COMMENT: comment [b2Shape.h <74:2 74:49>]
COMMENT: comment [b2Shape.h <75:2 75:64>]
COMMENT: comment [b2Shape.h <76:2 76:45>]
COMMENT: comment [b2Shape.h <80:2 80:92>]
COMMENT: comment [b2Shape.h <81:2 81:47>]
COMMENT: comment [b2Shape.h <82:2 82:49>]
COMMENT: comment [b2Shape.h <83:2 83:39>]
COMMENT: comment [b2Shape.h <86:2 86:81>]
COMMENT: comment [b2Shape.h <87:2 87:60>]
COMMENT: comment [b2Shape.h <88:2 88:59>]
COMMENT: comment [b2Shape.h <89:2 89:64>]
COMMENT: comment [b2Shape.h <94:2 94:100>]
COMMENT: comment [b2Shape.h <95:2 95:30>]
COMMENT: comment [b2BlockAllocator.h <1:1 17:3>]
COMMENT: comment [b2BlockAllocator.h <32:1 32:63>]
COMMENT: comment [b2BlockAllocator.h <33:1 33:54>]
COMMENT: comment [b2BlockAllocator.h <34:1 34:72>]
COMMENT: comment [b2BlockAllocator.h <41:2 41:88>]
COMMENT: comment [b2BlockAllocator.h <44:2 44:83>]
COMMENT: comment [b2EdgeShape.h <1:1 17:3>]
COMMENT: comment [b2EdgeShape.h <24:1 24:75>]
COMMENT: comment [b2EdgeShape.h <25:1 25:73>]
COMMENT: comment [b2EdgeShape.h <26:1 26:29>]
COMMENT: comment [b2EdgeShape.h <32:2 32:35>]
COMMENT: comment [b2EdgeShape.h <35:2 35:24>]
COMMENT: comment [b2EdgeShape.h <38:2 38:33>]
COMMENT: comment [b2EdgeShape.h <41:2 41:29>]
COMMENT: comment [b2EdgeShape.h <44:2 44:24>]
COMMENT: comment [b2EdgeShape.h <48:2 48:31>]
COMMENT: comment [b2EdgeShape.h <51:2 51:31>]
COMMENT: comment [b2EdgeShape.h <54:2 54:33>]
COMMENT: comment [b2EdgeShape.h <57:2 57:70>]
COMMENT: comment [b2PolygonShape.h <1:1 17:3>]
COMMENT: comment [b2PolygonShape.h <24:1 24:75>]
COMMENT: comment [b2PolygonShape.h <25:1 25:27>]
COMMENT: comment [b2PolygonShape.h <26:1 26:79>]
COMMENT: comment [b2PolygonShape.h <27:1 27:74>]
COMMENT: comment [b2PolygonShape.h <33:2 33:24>]
COMMENT: comment [b2PolygonShape.h <36:2 36:33>]
COMMENT: comment [b2PolygonShape.h <39:2 39:64>]
COMMENT: comment [b2PolygonShape.h <40:2 40:64>]
COMMENT: comment [b2PolygonShape.h <41:2 41:79>]
COMMENT: comment [b2PolygonShape.h <42:2 42:77>]
COMMENT: comment [b2PolygonShape.h <43:2 43:41>]
COMMENT: comment [b2PolygonShape.h <46:2 46:83>]
COMMENT: comment [b2PolygonShape.h <47:2 47:31>]
COMMENT: comment [b2PolygonShape.h <48:2 48:32>]
COMMENT: comment [b2PolygonShape.h <51:2 51:50>]
COMMENT: comment [b2PolygonShape.h <52:2 52:31>]
COMMENT: comment [b2PolygonShape.h <53:2 53:32>]
COMMENT: comment [b2PolygonShape.h <54:2 54:63>]
COMMENT: comment [b2PolygonShape.h <55:2 55:64>]
COMMENT: comment [b2PolygonShape.h <58:2 58:29>]
COMMENT: comment [b2PolygonShape.h <61:2 61:24>]
COMMENT: comment [b2PolygonShape.h <65:2 65:31>]
COMMENT: comment [b2PolygonShape.h <68:2 68:31>]
COMMENT: comment [b2PolygonShape.h <71:2 71:66>]
COMMENT: comment [b2PolygonShape.h <72:2 72:28>]
