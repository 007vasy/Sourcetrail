FILE: b2DynamicTree.cpp
FILE: b2DynamicTree.h
FILE: b2Collision.h
FILE: b2Math.h
FILE: b2Settings.h
FILE: stddef.h non-indexed
FILE: corecrt.h non-indexed
FILE: vcruntime.h non-indexed
FILE: sal.h non-indexed
FILE: concurrencysal.h non-indexed
FILE: vadefs.h non-indexed
FILE: assert.h non-indexed
FILE: float.h non-indexed
FILE: math.h non-indexed
FILE: limits.h non-indexed
FILE: b2GrowableStack.h
FILE: string.h non-indexed
FILE: corecrt_memory.h non-indexed
FILE: corecrt_memcpy_s.h non-indexed
FILE: errno.h non-indexed
FILE: vcruntime_string.h non-indexed
FILE: corecrt_wstring.h non-indexed
SYMBOL_MACRO: B2_DYNAMIC_TREE_H [b2DynamicTree.h <20:9 20:25>]
SYMBOL_MACRO: B2_COLLISION_H [b2Collision.h <20:9 20:22>]
SYMBOL_MACRO: B2_MATH_H [b2Math.h <20:9 20:17>]
SYMBOL_MACRO: B2_SETTINGS_H [b2Settings.h <20:9 20:21>]
SYMBOL_MACRO: b2DEBUG [b2Settings.h <27:10 27:16>]
SYMBOL_MACRO: B2_NOT_USED [b2Settings.h <30:9 <30:9 30:19> 30:33>]
SYMBOL_MACRO: b2Assert [b2Settings.h <31:9 <31:9 31:16> 31:28>]
SYMBOL_MACRO: b2_maxFloat [b2Settings.h <42:9 <42:9 42:19> 42:21>]
SYMBOL_MACRO: b2_epsilon [b2Settings.h <43:9 <43:9 43:18> 43:20>]
SYMBOL_MACRO: b2_pi [b2Settings.h <44:9 <44:9 44:13> 44:16>]
SYMBOL_MACRO: b2_maxManifoldPoints [b2Settings.h <54:9 <54:9 54:28> 54:29>]
SYMBOL_MACRO: b2_maxPolygonVertices [b2Settings.h <58:9 <58:9 58:29> 58:30>]
SYMBOL_MACRO: b2_aabbExtension [b2Settings.h <63:9 <63:9 63:24> 63:26>]
SYMBOL_MACRO: b2_aabbMultiplier [b2Settings.h <68:9 <68:9 68:25> 68:27>]
SYMBOL_MACRO: b2_linearSlop [b2Settings.h <72:9 <72:9 72:21> 72:24>]
SYMBOL_MACRO: b2_angularSlop [b2Settings.h <76:9 <76:9 76:22> 76:47>]
SYMBOL_MACRO: b2_polygonRadius [b2Settings.h <81:9 <81:9 81:24> 81:47>]
SYMBOL_MACRO: b2_maxSubSteps [b2Settings.h <84:9 <84:9 84:22> 84:25>]
SYMBOL_MACRO: b2_maxTOIContacts [b2Settings.h <90:9 <90:9 90:25> 90:28>]
SYMBOL_MACRO: b2_velocityThreshold [b2Settings.h <94:9 <94:9 94:28> 94:30>]
SYMBOL_MACRO: b2_maxLinearCorrection [b2Settings.h <98:9 <98:9 98:30> 98:32>]
SYMBOL_MACRO: b2_maxAngularCorrection [b2Settings.h <102:9 <102:9 102:31> 102:55>]
SYMBOL_MACRO: b2_maxTranslation [b2Settings.h <106:9 <106:9 106:25> 106:28>]
SYMBOL_MACRO: b2_maxTranslationSquared [b2Settings.h <107:9 <107:9 107:32> 107:71>]
SYMBOL_MACRO: b2_maxRotation [b2Settings.h <111:9 <111:9 111:22> 111:39>]
SYMBOL_MACRO: b2_maxRotationSquared [b2Settings.h <112:9 <112:9 112:29> 112:63>]
SYMBOL_MACRO: b2_baumgarte [b2Settings.h <117:9 <117:9 117:20> 117:24>]
SYMBOL_MACRO: b2_toiBaugarte [b2Settings.h <118:9 <118:9 118:22> 118:26>]
SYMBOL_MACRO: b2_timeToSleep [b2Settings.h <124:9 <124:9 124:22> 124:26>]
SYMBOL_MACRO: b2_linearSleepTolerance [b2Settings.h <127:9 <127:9 127:31> 127:33>]
SYMBOL_MACRO: b2_angularSleepTolerance [b2Settings.h <130:9 <130:9 130:32> 130:55>]
SYMBOL_MACRO: b2Sqrt [b2Math.h <49:9 <49:9 49:14> 49:25>]
SYMBOL_MACRO: b2Atan2 [b2Math.h <50:9 <50:9 50:15> 50:33>]
SYMBOL_MACRO: B2_GROWABLE_STACK_H [b2GrowableStack.h <20:9 20:27>]
SYMBOL_MACRO: b2_nullNode [b2DynamicTree.h <25:9 <25:9 25:19> 25:23>]
SYMBOL_TYPEDEF: int8 [b2Settings.h <33:21 33:24>]
SYMBOL_BUILTIN_TYPE: signed char
SYMBOL_TYPEDEF: int16 [b2Settings.h <34:22 34:26>]
SYMBOL_BUILTIN_TYPE: short
SYMBOL_TYPEDEF: int32 [b2Settings.h <35:20 35:24>]
SYMBOL_BUILTIN_TYPE: int
SYMBOL_TYPEDEF: uint8 [b2Settings.h <36:23 36:27>]
SYMBOL_BUILTIN_TYPE: unsigned char
SYMBOL_TYPEDEF: uint16 [b2Settings.h <37:24 37:29>]
SYMBOL_BUILTIN_TYPE: unsigned short
SYMBOL_TYPEDEF: uint32 [b2Settings.h <38:22 38:27>]
SYMBOL_BUILTIN_TYPE: unsigned int
SYMBOL_TYPEDEF: float32 [b2Settings.h <39:15 39:21>]
SYMBOL_BUILTIN_TYPE: float
SYMBOL_TYPEDEF: float64 [b2Settings.h <40:16 40:22>]
SYMBOL_BUILTIN_TYPE: double
SYMBOL_FUNCTION: void * b2Alloc(int32) [b2Settings.h <135:1 <135:7 135:13> 135:25>]
SYMBOL_BUILTIN_TYPE: void
SYMBOL_FUNCTION: void b2Free(void *) [b2Settings.h <138:1 <138:6 138:11> 138:22>]
SYMBOL_FUNCTION: void b2Log(const char *) [b2Settings.h <141:1 <141:6 141:10> 141:35>]
SYMBOL_BUILTIN_TYPE: char
SYMBOL_STRUCT: b2Version [b2Settings.h <145:1 <145:8 145:16> 150:1>]
SYMBOL_FIELD: public int32 b2Version::major [b2Settings.h <147:8 147:12>]
SYMBOL_FIELD: public int32 b2Version::minor [b2Settings.h <148:8 148:12>]
SYMBOL_FIELD: public int32 b2Version::revision [b2Settings.h <149:8 149:15>]
SYMBOL_GLOBAL_VARIABLE: b2Version b2_version [b2Settings.h <153:18 153:27>]
SYMBOL_FUNCTION: bool b2IsValid(float32) [b2Math.h <26:1 <26:1 <26:13 26:21> 26:32> 30:1>]
SYMBOL_BUILTIN_TYPE: bool
SYMBOL_FUNCTION: float32 b2InvSqrt(float32) [b2Math.h <33:1 <33:1 <33:16 33:24> 33:35> 47:1>]
SYMBOL_UNION: b2InvSqrt::anonymous union (b2Math.h<35:2>) [b2Math.h <35:2 <35:2 35:6> 39:2>]
SYMBOL_FIELD: public float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <37:11 37:11>]
SYMBOL_FIELD: public int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <38:9 38:9>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::() [b2Math.h <35:2 <35:2 35:6> 35:6>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::(const b2InvSqrt::anonymous union (b2Math.h<35:2>) &) [b2Math.h <35:2 <35:2 35:6> 35:6>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::(b2InvSqrt::anonymous union (b2Math.h<35:2>) &&) [b2Math.h <35:2 <35:2 35:6> 35:6>]
QUALIFIER: b2Vec2 [b2Collision.h <162:8 162:13>]
SYMBOL_STRUCT: b2Vec2 [b2Math.h <53:1 <53:8 53:13> 141:1>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2() [b2Math.h <56:2 <56:2 <56:2 56:7> 56:9> 56:12>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(float32, float32) [b2Math.h <59:2 <59:2 <59:2 59:7> 59:33> 59:53>]
SYMBOL_FIELD: public float32 b2Vec2::x [b2Math.h <140:10 140:10>]
SYMBOL_FIELD: public float32 b2Vec2::y [b2Math.h <140:13 140:13>]
SYMBOL_METHOD: public void b2Vec2::SetZero() [b2Math.h <62:2 <62:2 <62:7 62:13> 62:15> 62:39>]
SYMBOL_METHOD: public void b2Vec2::Set(float32, float32) [b2Math.h <65:2 <65:2 <65:7 65:9> 65:33> 65:53>]
SYMBOL_METHOD: public b2Vec2 b2Vec2::operator-() const [b2Math.h <68:2 <68:2 <68:9 68:18> 68:26> 68:65>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public float32 b2Vec2::operator()(int32) const [b2Math.h <71:2 <71:2 <71:10 71:20> 71:36> 74:2>]
SYMBOL_METHOD: public float32 & b2Vec2::operator()(int32) [b2Math.h <77:2 <77:2 <77:11 77:21> 77:31> 80:2>]
SYMBOL_METHOD: public void b2Vec2::operator+=(const b2Vec2 &) [b2Math.h <83:2 <83:2 <83:7 83:17> 83:35> 86:2>]
SYMBOL_METHOD: public void b2Vec2::operator-=(const b2Vec2 &) [b2Math.h <89:2 <89:2 <89:7 89:17> 89:35> 92:2>]
SYMBOL_METHOD: public void b2Vec2::operator*=(float32) [b2Math.h <95:2 <95:2 <95:7 95:17> 95:29> 98:2>]
SYMBOL_METHOD: public float32 b2Vec2::Length() const [b2Math.h <101:2 <101:2 <101:10 101:15> 101:23> 104:2>]
SYMBOL_FUNCTION: float sqrtf(float)
SYMBOL_METHOD: public float32 b2Vec2::LengthSquared() const [b2Math.h <108:2 <108:2 <108:10 108:22> 108:30> 111:2>]
SYMBOL_METHOD: public float32 b2Vec2::Normalize() [b2Math.h <114:2 <114:2 <114:10 114:18> 114:20> 126:2>]
SYMBOL_METHOD: public bool b2Vec2::IsValid() const [b2Math.h <129:2 <129:2 <129:7 129:13> 129:21> 132:2>]
SYMBOL_METHOD: public b2Vec2 b2Vec2::Skew() const [b2Math.h <135:2 <135:2 <135:9 135:12> 135:20> 138:2>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(const b2Vec2 &) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public void b2Vec2::~b2Vec2() [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_STRUCT: b2Vec3 [b2Math.h <144:1 <144:8 144:13> 180:1>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3() [b2Math.h <147:2 <147:2 <147:2 147:7> 147:9> 147:12>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <150:2 <150:2 <150:2 150:7> 150:46> 150:74>]
SYMBOL_FIELD: public float32 b2Vec3::x [b2Math.h <179:10 179:10>]
SYMBOL_FIELD: public float32 b2Vec3::y [b2Math.h <179:13 179:13>]
SYMBOL_FIELD: public float32 b2Vec3::z [b2Math.h <179:16 179:16>]
SYMBOL_METHOD: public void b2Vec3::SetZero() [b2Math.h <153:2 <153:2 <153:7 153:13> 153:15> 153:49>]
SYMBOL_METHOD: public void b2Vec3::Set(float32, float32, float32) [b2Math.h <156:2 <156:2 <156:7 156:9> 156:45> 156:73>]
SYMBOL_METHOD: public b2Vec3 b2Vec3::operator-() const [b2Math.h <159:2 <159:2 <159:9 159:18> 159:26> 159:69>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(b2Vec3 &&) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public void b2Vec3::operator+=(const b2Vec3 &) [b2Math.h <162:2 <162:2 <162:7 162:17> 162:35> 165:2>]
SYMBOL_METHOD: public void b2Vec3::operator-=(const b2Vec3 &) [b2Math.h <168:2 <168:2 <168:7 168:17> 168:35> 171:2>]
SYMBOL_METHOD: public void b2Vec3::operator*=(float32) [b2Math.h <174:2 <174:2 <174:7 174:17> 174:29> 177:2>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(const b2Vec3 &) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public b2Vec3 & b2Vec3::operator=(b2Vec3 &&) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public void b2Vec3::~b2Vec3() [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_STRUCT: b2Mat22 [b2Math.h <183:1 <183:8 183:14> 254:1>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22() [b2Math.h <186:2 <186:2 <186:2 186:8> 186:10> 186:13>]
SYMBOL_FIELD: public b2Vec2 b2Mat22::ex [b2Math.h <253:9 253:10>]
SYMBOL_FIELD: public b2Vec2 b2Mat22::ey [b2Math.h <253:13 253:14>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <189:2 <189:2 <189:2 189:8> 189:44> 193:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(float32, float32, float32, float32) [b2Math.h <196:2 <196:2 <196:2 196:8> 196:60> 200:2>]
SYMBOL_METHOD: public void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) [b2Math.h <203:2 <203:2 <203:7 203:9> 203:45> 207:2>]
SYMBOL_METHOD: public void b2Mat22::SetIdentity() [b2Math.h <210:2 <210:2 <210:7 210:17> 210:19> 214:2>]
SYMBOL_METHOD: public void b2Mat22::SetZero() [b2Math.h <217:2 <217:2 <217:7 217:13> 217:15> 221:2>]
SYMBOL_METHOD: public b2Mat22 b2Mat22::GetInverse() const [b2Math.h <223:2 <223:2 <223:10 223:19> 223:27> 235:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(b2Mat22 &&) [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_METHOD: public b2Vec2 b2Mat22::Solve(const b2Vec2 &) const [b2Math.h <239:2 <239:2 <239:9 239:13> 239:36> 251:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(const b2Mat22 &) [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_METHOD: public void b2Mat22::~b2Mat22() [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_STRUCT: b2Mat33 [b2Math.h <257:1 <257:8 257:14> 296:1>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33() [b2Math.h <260:2 <260:2 <260:2 260:8> 260:10> 260:13>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ex [b2Math.h <295:9 295:10>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ey [b2Math.h <295:13 295:14>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ez [b2Math.h <295:17 295:18>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) [b2Math.h <263:2 <263:2 <263:2 263:8> 263:62> 268:2>]
SYMBOL_METHOD: public void b2Mat33::SetZero() [b2Math.h <271:2 <271:2 <271:7 271:13> 271:15> 276:2>]
SYMBOL_METHOD: public b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const [b2Math.h <280:2 <280:9 280:15> 280:38>]
SYMBOL_METHOD: public b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const [b2Math.h <285:2 <285:9 285:15> 285:38>]
SYMBOL_METHOD: public void b2Mat33::GetInverse22(b2Mat33 *) const [b2Math.h <289:2 <289:7 289:18> 289:36>]
SYMBOL_METHOD: public void b2Mat33::GetSymInverse33(b2Mat33 *) const [b2Math.h <293:2 <293:7 293:21> 293:39>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(const b2Mat33 &) [b2Math.h <257:8 <257:8 257:14> 257:14>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(b2Mat33 &&) [b2Math.h <257:8 <257:8 257:14> 257:14>]
SYMBOL_STRUCT: b2Rot [b2Math.h <299:1 <299:8 299:12> 346:1>]
SYMBOL_METHOD: public void b2Rot::b2Rot() [b2Math.h <301:2 <301:2 <301:2 301:6> 301:8> 301:11>]
SYMBOL_METHOD: public void b2Rot::b2Rot(float32) [b2Math.h <304:2 <304:2 <304:11 304:15> 304:30> 309:2>]
SYMBOL_FIELD: public float32 b2Rot::s [b2Math.h <345:10 345:10>]
SYMBOL_FUNCTION: float sinf(float)
SYMBOL_FIELD: public float32 b2Rot::c [b2Math.h <345:13 345:13>]
SYMBOL_FUNCTION: float cosf(float)
SYMBOL_METHOD: public void b2Rot::Set(float32) [b2Math.h <312:2 <312:2 <312:7 312:9> 312:24> 317:2>]
SYMBOL_METHOD: public void b2Rot::SetIdentity() [b2Math.h <320:2 <320:2 <320:7 320:17> 320:19> 324:2>]
SYMBOL_METHOD: public float32 b2Rot::GetAngle() const [b2Math.h <327:2 <327:2 <327:10 327:17> 327:25> 330:2>]
SYMBOL_FUNCTION: float atan2f(float, float)
SYMBOL_METHOD: public b2Vec2 b2Rot::GetXAxis() const [b2Math.h <333:2 <333:2 <333:9 333:16> 333:24> 336:2>]
SYMBOL_METHOD: public b2Vec2 b2Rot::GetYAxis() const [b2Math.h <339:2 <339:2 <339:9 339:16> 339:24> 342:2>]
SYMBOL_METHOD: public void b2Rot::b2Rot(const b2Rot &) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public void b2Rot::b2Rot(b2Rot &&) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public void b2Rot::~b2Rot() [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public b2Rot & b2Rot::operator=(const b2Rot &) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_STRUCT: b2Transform [b2Math.h <350:1 <350:8 350:18> 374:1>]
SYMBOL_METHOD: public void b2Transform::b2Transform() [b2Math.h <353:2 <353:2 <353:2 353:12> 353:14> 353:17>]
SYMBOL_FIELD: public b2Vec2 b2Transform::p [b2Math.h <372:9 372:9>]
SYMBOL_FIELD: public b2Rot b2Transform::q [b2Math.h <373:8 373:8>]
SYMBOL_METHOD: public void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) [b2Math.h <356:2 <356:2 <356:2 356:12> 356:59> 356:89>]
SYMBOL_METHOD: public void b2Transform::SetIdentity() [b2Math.h <359:2 <359:2 <359:7 359:17> 359:19> 363:2>]
SYMBOL_METHOD: public void b2Transform::Set(const b2Vec2 &, float32) [b2Math.h <366:2 <366:2 <366:7 366:9> 366:48> 370:2>]
SYMBOL_METHOD: public void b2Transform::b2Transform(const b2Transform &) [b2Math.h <350:8 <350:8 350:18> 350:18>]
SYMBOL_METHOD: public void b2Transform::b2Transform(b2Transform &&) [b2Math.h <350:8 <350:8 350:18> 350:18>]
QUALIFIER: b2Sweep [b2Math.h <697:13 697:19>]
QUALIFIER: b2Sweep [b2Math.h <707:13 707:19>]
QUALIFIER: b2Sweep [b2Math.h <717:13 717:19>]
SYMBOL_STRUCT: b2Sweep [b2Math.h <380:1 <380:8 380:14> 400:1>]
SYMBOL_METHOD: public void b2Sweep::GetTransform(b2Transform *, float32) const [b2Math.h <384:2 <384:7 384:18> 384:56>]
SYMBOL_METHOD: public void b2Sweep::GetTransform(b2Transform *, float32) const [b2Math.h <697:1 <697:22 697:33> 705:1>]
SYMBOL_METHOD: public void b2Sweep::Advance(float32) [b2Math.h <388:2 <388:7 388:13> 388:28>]
SYMBOL_METHOD: public void b2Sweep::Advance(float32) [b2Math.h <707:1 <707:22 707:28> 714:1>]
SYMBOL_METHOD: public void b2Sweep::Normalize() [b2Math.h <391:2 <391:7 391:15> 391:17>]
SYMBOL_METHOD: public void b2Sweep::Normalize() [b2Math.h <717:1 <717:22 717:30> 723:1>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::localCenter [b2Math.h <393:9 393:19>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::c0 [b2Math.h <394:9 394:10>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::c [b2Math.h <394:13 394:13>]
SYMBOL_FIELD: public float32 b2Sweep::a0 [b2Math.h <395:10 395:11>]
SYMBOL_FIELD: public float32 b2Sweep::a [b2Math.h <395:14 395:14>]
SYMBOL_FIELD: public float32 b2Sweep::alpha0 [b2Math.h <399:10 399:15>]
SYMBOL_GLOBAL_VARIABLE: const b2Vec2 b2Vec2_zero [b2Math.h <403:21 403:31>]
SYMBOL_FUNCTION: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <406:1 <406:1 <406:16 406:20> 406:54> 409:1>]
SYMBOL_FUNCTION: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2Math.h <412:1 <412:1 <412:16 412:22> 412:56> 415:1>]
SYMBOL_FUNCTION: b2Vec2 b2Cross(const b2Vec2 &, float32) [b2Math.h <419:1 <419:1 <419:15 419:21> 419:49> 422:1>]
SYMBOL_FUNCTION: b2Vec2 b2Cross(float32, const b2Vec2 &) [b2Math.h <426:1 <426:1 <426:15 426:21> 426:49> 429:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <433:1 <433:1 <433:15 433:19> 433:54> 436:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) [b2Math.h <440:1 <440:1 <440:15 440:20> 440:55> 443:1>]
SYMBOL_FUNCTION: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <446:1 <446:1 <446:15 446:24> 446:59> 449:1>]
SYMBOL_FUNCTION: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <452:1 <452:1 <452:15 452:24> 452:59> 455:1>]
SYMBOL_FUNCTION: b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <457:1 <457:1 <457:15 457:24> 457:53> 460:1>]
SYMBOL_FUNCTION: bool operator==(const b2Vec2 &, const b2Vec2 &) [b2Math.h <462:1 <462:1 <462:13 462:23> 462:58> 465:1>]
SYMBOL_FUNCTION: bool operator!=(const b2Vec2 &, const b2Vec2 &) [b2Math.h <467:1 <467:1 <467:13 467:23> 467:58> 470:1>]
SYMBOL_FUNCTION: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) [b2Math.h <472:1 <472:1 <472:16 472:25> 472:59> 476:1>]
SYMBOL_FUNCTION: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) [b2Math.h <478:1 <478:1 <478:16 478:32> 478:66> 482:1>]
SYMBOL_FUNCTION: b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <484:1 <484:1 <484:15 484:24> 484:53> 487:1>]
SYMBOL_FUNCTION: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <490:1 <490:1 <490:15 490:24> 490:59> 493:1>]
SYMBOL_FUNCTION: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) [b2Math.h <496:1 <496:1 <496:15 496:24> 496:59> 499:1>]
SYMBOL_FUNCTION: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) [b2Math.h <502:1 <502:1 <502:16 502:20> 502:54> 505:1>]
SYMBOL_FUNCTION: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) [b2Math.h <508:1 <508:1 <508:15 508:21> 508:55> 511:1>]
SYMBOL_FUNCTION: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) [b2Math.h <513:1 <513:1 <513:16 513:25> 513:62> 516:1>]
SYMBOL_FUNCTION: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) [b2Math.h <519:1 <519:1 <519:16 519:20> 519:56> 522:1>]
SYMBOL_FUNCTION: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) [b2Math.h <525:1 <525:1 <525:16 525:21> 525:57> 530:1>]
SYMBOL_FUNCTION: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) [b2Math.h <533:1 <533:1 <533:15 533:19> 533:54> 536:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) [b2Math.h <539:1 <539:1 <539:15 539:21> 539:56> 542:1>]
SYMBOL_FUNCTION: b2Rot b2Mul(const b2Rot &, const b2Rot &) [b2Math.h <545:1 <545:1 <545:14 545:18> 545:50> 555:1>]
SYMBOL_FUNCTION: b2Rot b2MulT(const b2Rot &, const b2Rot &) [b2Math.h <558:1 <558:1 <558:14 558:19> 558:51> 568:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <571:1 <571:1 <571:15 571:19> 571:52> 574:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2Math.h <577:1 <577:1 <577:15 577:20> 577:53> 580:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Math.h <582:1 <582:1 <582:15 582:19> 582:58> 588:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) [b2Math.h <590:1 <590:1 <590:15 590:20> 590:59> 598:1>]
SYMBOL_FUNCTION: b2Transform b2Mul(const b2Transform &, const b2Transform &) [b2Math.h <602:1 <602:1 <602:20 602:24> 602:68> 608:1>]
SYMBOL_FUNCTION: b2Transform b2MulT(const b2Transform &, const b2Transform &) [b2Math.h <612:1 <612:1 <612:20 612:25> 612:69> 618:1>]
SYMBOL_TEMPLATE_PARAMETER: b2Abs<typename T>::T [b2Math.h <620:20 620:20>]
SYMBOL_FUNCTION: T b2Abs<typename T>(T) [b2Math.h <620:1 <621:1 <621:10 621:14> 621:19> 624:1>]
SYMBOL_FUNCTION: float b2Abs<float>(float) [b2Math.h <621:1 <621:1 <621:10 621:14> 621:19> 624:1>]
SYMBOL_FUNCTION: b2Vec2 b2Abs<b2Vec2>(b2Vec2) [b2Math.h <621:1 <621:10 621:14> 624:1>]
SYMBOL_FUNCTION: int b2Abs<int>(int) [b2Math.h <621:1 <621:1 <621:10 621:14> 621:19> 624:1>]
SYMBOL_FUNCTION: b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <626:1 <626:1 <626:15 626:19> 626:36> 629:1>]
SYMBOL_FUNCTION: b2Mat22 b2Abs(const b2Mat22 &) [b2Math.h <631:1 <631:1 <631:16 631:20> 631:38> 634:1>]
SYMBOL_TEMPLATE_PARAMETER: b2Min<typename T>::T [b2Math.h <636:20 636:20>]
SYMBOL_FUNCTION: T b2Min<typename T>(T, T) [b2Math.h <636:1 <637:1 <637:10 637:14> 637:24> 640:1>]
SYMBOL_FUNCTION: float b2Min<float>(float, float) [b2Math.h <637:1 <637:1 <637:10 637:14> 637:24> 640:1>]
SYMBOL_FUNCTION: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) [b2Math.h <637:1 <637:10 637:14> 640:1>]
SYMBOL_FUNCTION: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Math.h <642:1 <642:1 <642:15 642:19> 642:53> 645:1>]
SYMBOL_TEMPLATE_PARAMETER: b2Max<typename T>::T [b2Math.h <647:20 647:20>]
SYMBOL_FUNCTION: T b2Max<typename T>(T, T) [b2Math.h <647:1 <648:1 <648:10 648:14> 648:24> 651:1>]
SYMBOL_FUNCTION: float b2Max<float>(float, float) [b2Math.h <648:1 <648:1 <648:10 648:14> 648:24> 651:1>]
SYMBOL_FUNCTION: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) [b2Math.h <648:1 <648:10 648:14> 651:1>]
SYMBOL_FUNCTION: int b2Max<int>(int, int) [b2Math.h <648:1 <648:1 <648:10 648:14> 648:24> 651:1>]
SYMBOL_FUNCTION: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Math.h <653:1 <653:1 <653:15 653:19> 653:53> 656:1>]
SYMBOL_TEMPLATE_PARAMETER: b2Clamp<typename T>::T [b2Math.h <658:20 658:20>]
SYMBOL_FUNCTION: T b2Clamp<typename T>(T, T, T) [b2Math.h <658:1 <659:1 <659:10 659:16> 659:36> 662:1>]
SYMBOL_FUNCTION: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) [b2Math.h <664:1 <664:1 <664:15 664:21> 664:77> 667:1>]
SYMBOL_TEMPLATE_PARAMETER: b2Swap<typename T>::T [b2Math.h <669:19 669:19>]
SYMBOL_FUNCTION: void b2Swap<typename T>(T &, T &) [b2Math.h <669:1 <669:22 <669:34 669:39> 669:51> 674:1>]
SYMBOL_FUNCTION: uint32 b2NextPowerOfTwo(uint32) [b2Math.h <681:1 <681:1 <681:15 681:30> 681:40> 689:1>]
SYMBOL_FUNCTION: bool b2IsPowerOfTwo(uint32) [b2Math.h <691:1 <691:1 <691:13 691:26> 691:36> 695:1>]
SYMBOL_FUNCTION: void _wassert(const wchar_t *, const wchar_t *, unsigned int)
SYMBOL_FUNCTION: float floorf(float)
SYMBOL_CLASS: b2Shape [b2Collision.h <29:7 29:13>]
SYMBOL_CLASS: b2CircleShape [b2Collision.h <30:7 30:19>]
SYMBOL_CLASS: b2EdgeShape [b2Collision.h <31:7 31:17>]
SYMBOL_CLASS: b2PolygonShape [b2Collision.h <32:7 32:20>]
SYMBOL_GLOBAL_VARIABLE: const uint8 b2_nullFeature [b2Collision.h <34:13 34:26>]
SYMBOL_STRUCT: b2ContactFeature [b2Collision.h <38:1 <38:8 38:23> 50:1>]
SYMBOL_ENUM: public b2ContactFeature::Type [b2Collision.h <40:2 <40:7 40:10> 44:2>]
SYMBOL_ENUM_CONSTANT: b2ContactFeature::Type::e_vertex [b2Collision.h <42:3 42:10>]
SYMBOL_ENUM_CONSTANT: b2ContactFeature::Type::e_face [b2Collision.h <43:3 43:8>]
SYMBOL_FIELD: public uint8 b2ContactFeature::indexA [b2Collision.h <46:8 46:13>]
SYMBOL_FIELD: public uint8 b2ContactFeature::indexB [b2Collision.h <47:8 47:13>]
SYMBOL_FIELD: public uint8 b2ContactFeature::typeA [b2Collision.h <48:8 48:12>]
SYMBOL_FIELD: public uint8 b2ContactFeature::typeB [b2Collision.h <49:8 49:12>]
SYMBOL_UNION: b2ContactID [b2Collision.h <53:1 <53:7 53:17> 57:1>]
SYMBOL_FIELD: public b2ContactFeature b2ContactID::cf [b2Collision.h <55:19 55:20>]
SYMBOL_FIELD: public uint32 b2ContactID::key [b2Collision.h <56:9 56:11>]
SYMBOL_STRUCT: b2ManifoldPoint [b2Collision.h <69:1 <69:8 69:22> 75:1>]
SYMBOL_FIELD: public b2Vec2 b2ManifoldPoint::localPoint [b2Collision.h <71:9 71:18>]
SYMBOL_FIELD: public float32 b2ManifoldPoint::normalImpulse [b2Collision.h <72:10 72:22>]
SYMBOL_FIELD: public float32 b2ManifoldPoint::tangentImpulse [b2Collision.h <73:10 73:23>]
SYMBOL_FIELD: public b2ContactID b2ManifoldPoint::id [b2Collision.h <74:14 74:15>]
SYMBOL_STRUCT: b2Manifold [b2Collision.h <93:1 <93:8 93:17> 107:1>]
SYMBOL_ENUM: public b2Manifold::Type [b2Collision.h <95:2 <95:7 95:10> 100:2>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_circles [b2Collision.h <97:3 97:11>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_faceA [b2Collision.h <98:3 98:9>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_faceB [b2Collision.h <99:3 99:9>]
SYMBOL_FIELD: public b2ManifoldPoint [] b2Manifold::points [b2Collision.h <102:18 102:23>]
SYMBOL_FIELD: public b2Vec2 b2Manifold::localNormal [b2Collision.h <103:9 103:19>]
SYMBOL_FIELD: public b2Vec2 b2Manifold::localPoint [b2Collision.h <104:9 104:18>]
SYMBOL_FIELD: public b2Manifold::Type b2Manifold::type [b2Collision.h <105:7 105:10>]
SYMBOL_FIELD: public int32 b2Manifold::pointCount [b2Collision.h <106:8 106:17>]
SYMBOL_STRUCT: b2WorldManifold [b2Collision.h <110:1 <110:8 110:22> 123:1>]
SYMBOL_METHOD: public void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) [b2Collision.h <116:2 <116:7 116:16> 118:45>]
SYMBOL_FIELD: public b2Vec2 b2WorldManifold::normal [b2Collision.h <120:9 120:14>]
SYMBOL_FIELD: public b2Vec2 [] b2WorldManifold::points [b2Collision.h <121:9 121:14>]
SYMBOL_FIELD: public float32 [] b2WorldManifold::separations [b2Collision.h <122:10 122:20>]
SYMBOL_ENUM: b2PointState [b2Collision.h <126:1 <126:6 126:17> 132:1>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_nullState [b2Collision.h <128:2 128:13>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_addState [b2Collision.h <129:2 129:12>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_persistState [b2Collision.h <130:2 130:16>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_removeState [b2Collision.h <131:2 131:15>]
SYMBOL_FUNCTION: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) [b2Collision.h <136:1 <136:6 136:21> 137:64>]
SYMBOL_STRUCT: b2ClipVertex [b2Collision.h <140:1 <140:8 140:19> 144:1>]
SYMBOL_FIELD: public b2Vec2 b2ClipVertex::v [b2Collision.h <142:9 142:9>]
SYMBOL_FIELD: public b2ContactID b2ClipVertex::id [b2Collision.h <143:14 143:15>]
SYMBOL_STRUCT: b2RayCastInput [b2Collision.h <147:1 <147:8 147:21> 151:1>]
SYMBOL_FIELD: public b2Vec2 b2RayCastInput::p1 [b2Collision.h <149:9 149:10>]
SYMBOL_FIELD: public b2Vec2 b2RayCastInput::p2 [b2Collision.h <149:13 149:14>]
SYMBOL_FIELD: public float32 b2RayCastInput::maxFraction [b2Collision.h <150:10 150:20>]
SYMBOL_METHOD: public void b2RayCastInput::b2RayCastInput() [b2Collision.h <147:8 <147:8 147:21> 147:21>]
SYMBOL_METHOD: public void b2RayCastInput::b2RayCastInput(const b2RayCastInput &) [b2Collision.h <147:8 <147:8 147:21> 147:21>]
SYMBOL_METHOD: public void b2RayCastInput::b2RayCastInput(b2RayCastInput &&) [b2Collision.h <147:8 <147:8 147:21> 147:21>]
SYMBOL_STRUCT: b2RayCastOutput [b2Collision.h <155:1 <155:8 155:22> 159:1>]
SYMBOL_FIELD: public b2Vec2 b2RayCastOutput::normal [b2Collision.h <157:9 157:14>]
SYMBOL_FIELD: public float32 b2RayCastOutput::fraction [b2Collision.h <158:10 158:17>]
QUALIFIER: b2AABB [b2Collision.h <254:13 254:18>]
SYMBOL_STRUCT: b2AABB [b2Collision.h <162:1 <162:8 162:13> 216:1>]
SYMBOL_METHOD: public bool b2AABB::IsValid() const [b2Collision.h <165:2 <165:7 165:13> 165:21>]
SYMBOL_METHOD: public bool b2AABB::IsValid() const [b2Collision.h <254:1 <254:21 254:27> 260:1>]
SYMBOL_METHOD: public b2Vec2 b2AABB::GetCenter() const [b2Collision.h <168:2 <168:2 <168:9 168:17> 168:25> 171:2>]
SYMBOL_FIELD: public b2Vec2 b2AABB::lowerBound [b2Collision.h <214:9 214:18>]
SYMBOL_FIELD: public b2Vec2 b2AABB::upperBound [b2Collision.h <215:9 215:18>]
SYMBOL_METHOD: public b2Vec2 b2AABB::GetExtents() const [b2Collision.h <174:2 <174:2 <174:9 174:18> 174:26> 177:2>]
SYMBOL_METHOD: public float32 b2AABB::GetPerimeter() const [b2Collision.h <180:2 <180:2 <180:10 180:21> 180:29> 185:2>]
SYMBOL_METHOD: public void b2AABB::Combine(const b2AABB &) [b2Collision.h <188:2 <188:2 <188:7 188:13> 188:33> 192:2>]
SYMBOL_METHOD: public void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2Collision.h <195:2 <195:2 <195:7 195:13> 195:55> 199:2>]
SYMBOL_METHOD: public bool b2AABB::Contains(const b2AABB &) const [b2Collision.h <202:2 <202:2 <202:7 202:14> 202:40> 210:2>]
SYMBOL_METHOD: public bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const [b2Collision.h <212:2 <212:7 212:13> 212:73>]
SYMBOL_METHOD: public void b2AABB::b2AABB() [b2Collision.h <162:8 <162:8 162:13> 162:13>]
SYMBOL_METHOD: public void b2AABB::b2AABB(const b2AABB &) [b2Collision.h <162:8 <162:8 162:13> 162:13>]
SYMBOL_METHOD: public void b2AABB::b2AABB(b2AABB &&) [b2Collision.h <162:8 <162:8 162:13> 162:13>]
SYMBOL_METHOD: public b2AABB & b2AABB::operator=(const b2AABB &) [b2Collision.h <162:8 <162:8 162:13> 162:13>]
SYMBOL_METHOD: public b2AABB & b2AABB::operator=(b2AABB &&) [b2Collision.h <162:8 <162:8 162:13> 162:13>]
SYMBOL_FUNCTION: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <219:1 <219:6 219:21> 221:60>]
SYMBOL_FUNCTION: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <224:1 <224:6 224:30> 226:63>]
SYMBOL_FUNCTION: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2Collision.h <229:1 <229:6 229:22> 231:63>]
SYMBOL_FUNCTION: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <234:1 <234:6 234:27> 236:63>]
SYMBOL_FUNCTION: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2Collision.h <239:1 <239:6 239:28> 241:64>]
SYMBOL_FUNCTION: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) [b2Collision.h <244:1 <244:7 244:25> 245:64>]
SYMBOL_FUNCTION: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) [b2Collision.h <248:1 <248:6 248:18> 250:52>]
SYMBOL_FUNCTION: bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2Collision.h <262:1 <262:1 <262:13 262:25> 262:59> 275:1>]
SYMBOL_TEMPLATE_PARAMETER: b2GrowableStack<typename T, int32 N>::T [b2GrowableStack.h <27:20 27:20>]
SYMBOL_CLASS: b2GrowableStack<typename T, int32 N> [b2GrowableStack.h <27:1 <28:7 28:21> 82:1>]
SYMBOL_TEMPLATE_PARAMETER: b2GrowableStack<typename T, int32 N>::N [b2GrowableStack.h <27:29 27:29>]
SYMBOL_METHOD: public void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() [b2GrowableStack.h <31:2 <31:2 <31:2 31:16> 31:18> 36:2>]
SYMBOL_FIELD: private b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <78:5 78:11>]
SYMBOL_FIELD: private b2GrowableStack<typename T, int32 N>::T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <79:4 79:10>]
SYMBOL_FIELD: private int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <80:8 80:14>]
SYMBOL_FIELD: private int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <81:8 81:17>]
SYMBOL_METHOD: public void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() [b2GrowableStack.h <38:2 <38:2 <38:2 38:17> 38:19> 45:2>]
SYMBOL_METHOD: public void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) [b2GrowableStack.h <47:2 <47:2 <47:7 47:10> 47:28> 63:2>]
SYMBOL_METHOD: public b2GrowableStack<typename T, int32 N>::T b2GrowableStack<typename T, int32 N>::Pop() [b2GrowableStack.h <65:2 <65:2 <65:4 65:6> 65:8> 70:2>]
SYMBOL_METHOD: public int32 b2GrowableStack<typename T, int32 N>::GetCount() [b2GrowableStack.h <72:2 <72:2 <72:8 72:15> 72:17> 75:2>]
SYMBOL_CLASS: b2GrowableStack<int, 256> [b2GrowableStack.h <27:1 <28:7 28:21> 82:1>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::b2GrowableStack() [b2GrowableStack.h <31:2 <31:2 31:16> 36:2>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::~b2GrowableStack() [b2GrowableStack.h <38:2 <38:2 38:17> 45:2>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::Push(const int &) [b2GrowableStack.h <47:2 <47:7 47:10> 63:2>]
SYMBOL_METHOD: public int b2GrowableStack<int, 256>::Pop() [b2GrowableStack.h <65:2 <65:4 65:6> 70:2>]
SYMBOL_METHOD: public int32 b2GrowableStack<int, 256>::GetCount() [b2GrowableStack.h <72:2 <72:8 72:15> 75:2>]
SYMBOL_FIELD: private int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <78:5 78:11>]
SYMBOL_FIELD: private int [] b2GrowableStack<int, 256>::m_array [b2GrowableStack.h <79:4 79:10>]
SYMBOL_FIELD: private int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <80:8 80:14>]
SYMBOL_FIELD: private int32 b2GrowableStack<int, 256>::m_capacity [b2GrowableStack.h <81:8 81:17>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::b2GrowableStack(const b2GrowableStack<int, 256> &) [b2GrowableStack.h <28:7 <28:7 28:21> 28:21>]
SYMBOL_STRUCT: b2TreeNode [b2DynamicTree.h <28:1 <28:8 28:17> 51:1>]
SYMBOL_METHOD: public bool b2TreeNode::IsLeaf() const [b2DynamicTree.h <30:2 <30:2 <30:7 30:12> 30:20> 33:2>]
SYMBOL_FIELD: public int32 b2TreeNode::child1 [b2DynamicTree.h <46:8 46:13>]
SYMBOL_FIELD: public b2AABB b2TreeNode::aabb [b2DynamicTree.h <36:9 36:12>]
SYMBOL_FIELD: public void * b2TreeNode::userData [b2DynamicTree.h <38:8 38:15>]
SYMBOL_UNION: public b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) [b2DynamicTree.h <40:2 <40:2 40:6> 44:2>]
SYMBOL_FIELD: public int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.h <42:9 42:14>]
SYMBOL_FIELD: public int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next [b2DynamicTree.h <43:9 43:12>]
SYMBOL_FIELD: public b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.h <40:2 40:6>]
SYMBOL_FIELD: public int32 b2TreeNode::child2 [b2DynamicTree.h <47:8 47:13>]
SYMBOL_FIELD: public int32 b2TreeNode::height [b2DynamicTree.h <50:8 50:13>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <22:1 22:13>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <46:1 46:13>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <53:7 53:19>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <92:6 92:18>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <105:7 105:19>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <121:6 121:18>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <130:6 130:18>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <176:6 176:18>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <316:6 316:18>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <377:7 377:19>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <520:7 520:19>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <531:9 531:21>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <558:7 558:19>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <573:7 573:19>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <579:6 579:18>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <614:6 614:18>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <653:6 653:18>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <674:7 674:19>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <696:6 696:18>]
QUALIFIER: b2DynamicTree [b2DynamicTree.cpp <772:6 772:18>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <156:14 156:26>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <162:22 162:34>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <169:13 169:25>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <204:13 204:25>]
SYMBOL_CLASS: b2DynamicTree [b2DynamicTree.h <61:1 <61:7 61:19> 154:1>]
SYMBOL_METHOD: public void b2DynamicTree::b2DynamicTree() [b2DynamicTree.cpp <22:1 <22:16 22:28> 44:1>]
SYMBOL_METHOD: public void b2DynamicTree::b2DynamicTree() [b2DynamicTree.h <65:2 <65:2 65:14> 65:16>]
SYMBOL_METHOD: public void b2DynamicTree::~b2DynamicTree() [b2DynamicTree.cpp <46:1 <46:16 46:29> 50:1>]
SYMBOL_METHOD: public void b2DynamicTree::~b2DynamicTree() [b2DynamicTree.h <68:2 <68:2 68:15> 68:17>]
SYMBOL_METHOD: public int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) [b2DynamicTree.cpp <105:1 <105:22 105:32> 119:1>]
SYMBOL_METHOD: public int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) [b2DynamicTree.h <71:2 <71:8 71:18> 71:54>]
SYMBOL_METHOD: public void b2DynamicTree::DestroyProxy(int32) [b2DynamicTree.cpp <121:1 <121:21 121:32> 128:1>]
SYMBOL_METHOD: public void b2DynamicTree::DestroyProxy(int32) [b2DynamicTree.h <74:2 <74:7 74:18> 74:33>]
SYMBOL_METHOD: public bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) [b2DynamicTree.cpp <130:1 <130:21 130:29> 174:1>]
SYMBOL_METHOD: public bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) [b2DynamicTree.h <80:2 <80:7 80:15> 80:79>]
SYMBOL_METHOD: public void * b2DynamicTree::GetUserData(int32) const [b2DynamicTree.h <84:2 <84:8 84:18> 84:39>]
SYMBOL_METHOD: public void * b2DynamicTree::GetUserData(int32) const [b2DynamicTree.h <156:1 <156:29 156:39> 160:1>]
SYMBOL_METHOD: public const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2DynamicTree.h <87:2 <87:16 87:25> 87:46>]
SYMBOL_METHOD: public const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2DynamicTree.h <162:1 <162:37 162:46> 166:1>]
SYMBOL_TEMPLATE_PARAMETER: b2DynamicTree::Query<typename T>::T [b2DynamicTree.h <91:21 91:21>]
SYMBOL_TEMPLATE_PARAMETER: b2DynamicTree::Query<typename T>::T [b2DynamicTree.h <168:20 168:20>]
SYMBOL_METHOD: public void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const [b2DynamicTree.h <92:2 <92:7 92:11> 92:50>]
SYMBOL_METHOD: public void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const [b2DynamicTree.h <168:1 <169:28 169:32> 201:1>]
SYMBOL_TEMPLATE_PARAMETER: b2DynamicTree::RayCast<typename T>::T [b2DynamicTree.h <101:21 101:21>]
SYMBOL_TEMPLATE_PARAMETER: b2DynamicTree::RayCast<typename T>::T [b2DynamicTree.h <203:20 203:20>]
SYMBOL_METHOD: public void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const [b2DynamicTree.h <102:2 <102:7 102:13> 102:61>]
SYMBOL_METHOD: public void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const [b2DynamicTree.h <203:1 <204:28 204:34> 287:1>]
SYMBOL_METHOD: public void b2DynamicTree::Validate() const [b2DynamicTree.cpp <653:1 <653:21 653:28> 672:1>]
SYMBOL_METHOD: public void b2DynamicTree::Validate() const [b2DynamicTree.h <105:2 <105:7 105:14> 105:22>]
SYMBOL_METHOD: public int32 b2DynamicTree::GetHeight() const [b2DynamicTree.cpp <520:1 <520:22 520:30> 528:1>]
SYMBOL_METHOD: public int32 b2DynamicTree::GetHeight() const [b2DynamicTree.h <109:2 <109:8 109:16> 109:24>]
SYMBOL_METHOD: public int32 b2DynamicTree::GetMaxBalance() const [b2DynamicTree.cpp <674:1 <674:22 674:34> 694:1>]
SYMBOL_METHOD: public int32 b2DynamicTree::GetMaxBalance() const [b2DynamicTree.h <113:2 <113:8 113:20> 113:28>]
SYMBOL_METHOD: public float32 b2DynamicTree::GetAreaRatio() const [b2DynamicTree.cpp <531:1 <531:24 531:35> 555:1>]
SYMBOL_METHOD: public float32 b2DynamicTree::GetAreaRatio() const [b2DynamicTree.h <116:2 <116:10 116:21> 116:29>]
SYMBOL_METHOD: public void b2DynamicTree::RebuildBottomUp() [b2DynamicTree.cpp <696:1 <696:21 696:35> 770:1>]
SYMBOL_METHOD: public void b2DynamicTree::RebuildBottomUp() [b2DynamicTree.h <119:2 <119:7 119:21> 119:23>]
SYMBOL_METHOD: public void b2DynamicTree::ShiftOrigin(const b2Vec2 &) [b2DynamicTree.cpp <772:1 <772:21 772:31> 780:1>]
SYMBOL_METHOD: public void b2DynamicTree::ShiftOrigin(const b2Vec2 &) [b2DynamicTree.h <124:2 <124:7 124:17> 124:42>]
SYMBOL_METHOD: private int32 b2DynamicTree::AllocateNode() [b2DynamicTree.cpp <53:1 <53:22 53:33> 89:1>]
SYMBOL_METHOD: private int32 b2DynamicTree::AllocateNode() [b2DynamicTree.h <128:2 <128:8 128:19> 128:21>]
SYMBOL_METHOD: private void b2DynamicTree::FreeNode(int32) [b2DynamicTree.cpp <92:1 <92:21 92:28> 100:1>]
SYMBOL_METHOD: private void b2DynamicTree::FreeNode(int32) [b2DynamicTree.h <129:2 <129:7 129:14> 129:26>]
SYMBOL_METHOD: private void b2DynamicTree::InsertLeaf(int32) [b2DynamicTree.cpp <176:1 <176:21 176:30> 314:1>]
SYMBOL_METHOD: private void b2DynamicTree::InsertLeaf(int32) [b2DynamicTree.h <131:2 <131:7 131:16> 131:28>]
SYMBOL_METHOD: private void b2DynamicTree::RemoveLeaf(int32) [b2DynamicTree.cpp <316:1 <316:21 316:30> 373:1>]
SYMBOL_METHOD: private void b2DynamicTree::RemoveLeaf(int32) [b2DynamicTree.h <132:2 <132:7 132:16> 132:28>]
SYMBOL_METHOD: private int32 b2DynamicTree::Balance(int32) [b2DynamicTree.cpp <377:1 <377:22 377:28> 518:1>]
SYMBOL_METHOD: private int32 b2DynamicTree::Balance(int32) [b2DynamicTree.h <134:2 <134:8 134:14> 134:27>]
SYMBOL_METHOD: private int32 b2DynamicTree::ComputeHeight() const [b2DynamicTree.cpp <573:1 <573:22 573:34> 577:1>]
SYMBOL_METHOD: private int32 b2DynamicTree::ComputeHeight() const [b2DynamicTree.h <136:2 <136:8 136:20> 136:28>]
SYMBOL_METHOD: private int32 b2DynamicTree::ComputeHeight(int32) const [b2DynamicTree.cpp <558:1 <558:22 558:34> 571:1>]
SYMBOL_METHOD: private int32 b2DynamicTree::ComputeHeight(int32) const [b2DynamicTree.h <137:2 <137:8 137:20> 137:40>]
SYMBOL_METHOD: private void b2DynamicTree::ValidateStructure(int32) const [b2DynamicTree.cpp <579:1 <579:21 579:37> 612:1>]
SYMBOL_METHOD: private void b2DynamicTree::ValidateStructure(int32) const [b2DynamicTree.h <139:2 <139:7 139:23> 139:42>]
SYMBOL_METHOD: private void b2DynamicTree::ValidateMetrics(int32) const [b2DynamicTree.cpp <614:1 <614:21 614:35> 651:1>]
SYMBOL_METHOD: private void b2DynamicTree::ValidateMetrics(int32) const [b2DynamicTree.h <140:2 <140:7 140:21> 140:40>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_root [b2DynamicTree.h <142:8 142:13>]
SYMBOL_FIELD: private b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <144:14 144:20>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_nodeCount [b2DynamicTree.h <145:8 145:18>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.h <146:8 146:21>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_freeList [b2DynamicTree.h <148:8 148:17>]
SYMBOL_FIELD: private uint32 b2DynamicTree::m_path [b2DynamicTree.h <151:9 151:14>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_insertionCount [b2DynamicTree.h <153:8 153:23>]
SYMBOL_METHOD: public void b2DynamicTree::b2DynamicTree(const b2DynamicTree &) [b2DynamicTree.h <61:7 <61:7 61:19> 61:19>]
SYMBOL_FUNCTION: void * memset(void *, int, size_t)
SYMBOL_FUNCTION: void * memcpy(void *, const void *, size_t)
REFERENCE_INCLUDE: b2DynamicTree.cpp -> b2DynamicTree.h [b2DynamicTree.cpp <19:10 19:42>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> B2_DYNAMIC_TREE_H [b2DynamicTree.h <19:9 19:25>]
REFERENCE_INCLUDE: b2DynamicTree.h -> b2Collision.h [b2DynamicTree.h <22:10 22:40>]
REFERENCE_MACRO_USAGE: b2Collision.h -> B2_COLLISION_H [b2Collision.h <19:9 19:22>]
REFERENCE_INCLUDE: b2Collision.h -> b2Math.h [b2Collision.h <22:10 22:32>]
REFERENCE_MACRO_USAGE: b2Math.h -> B2_MATH_H [b2Math.h <19:9 19:17>]
REFERENCE_INCLUDE: b2Math.h -> b2Settings.h [b2Math.h <22:10 22:36>]
REFERENCE_MACRO_USAGE: b2Settings.h -> B2_SETTINGS_H [b2Settings.h <19:9 19:21>]
REFERENCE_INCLUDE: b2Settings.h -> stddef.h [b2Settings.h <22:10 22:19>]
REFERENCE_INCLUDE: stddef.h -> corecrt.h [stddef.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt.h -> vcruntime.h [corecrt.h <10:10 10:22>]
REFERENCE_INCLUDE: vcruntime.h -> sal.h [vcruntime.h <45:10 45:16>]
REFERENCE_INCLUDE: sal.h -> concurrencysal.h [sal.h <2990:10 2990:27>]
REFERENCE_INCLUDE: vcruntime.h -> vadefs.h [vcruntime.h <46:10 46:19>]
REFERENCE_INCLUDE: b2Settings.h -> assert.h [b2Settings.h <23:10 23:19>]
REFERENCE_INCLUDE: assert.h -> corecrt.h [assert.h <12:10 12:20>]
REFERENCE_INCLUDE: b2Settings.h -> float.h [b2Settings.h <24:10 24:18>]
REFERENCE_INCLUDE: float.h -> corecrt.h [float.h <12:10 12:20>]
REFERENCE_MACRO_USAGE: b2Settings.h -> NDEBUG [b2Settings.h <26:14 26:19>]
REFERENCE_INCLUDE: b2Math.h -> math.h [b2Math.h <23:10 23:17>]
REFERENCE_INCLUDE: math.h -> corecrt.h [math.h <11:10 11:20>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Sqrt [b2Math.h <103:10 103:15>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2_epsilon [b2Math.h <117:16 117:25>]
REFERENCE_MACRO_USAGE: b2Settings.h -> FLT_EPSILON [b2Settings.h <43:21 43:31>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Atan2 [b2Math.h <329:10 329:16>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Assert [b2Math.h <709:2 709:9>]
REFERENCE_MACRO_USAGE: b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2_pi [b2Math.h <719:25 719:29>]
REFERENCE_INCLUDE: b2Collision.h -> limits.h [b2Collision.h <23:10 23:19>]
REFERENCE_INCLUDE: limits.h -> vcruntime.h [limits.h <11:10 11:22>]
REFERENCE_MACRO_USAGE: b2Collision.h -> UCHAR_MAX [b2Collision.h <34:30 34:38>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <102:25 102:44>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <121:16 121:35>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <122:22 122:41>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <136:43 136:62>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <136:86 136:105>]
REFERENCE_INCLUDE: b2DynamicTree.h -> b2GrowableStack.h [b2DynamicTree.h <23:10 23:41>]
REFERENCE_MACRO_USAGE: b2GrowableStack.h -> B2_GROWABLE_STACK_H [b2GrowableStack.h <19:9 19:27>]
REFERENCE_INCLUDE: b2GrowableStack.h -> b2Settings.h [b2GrowableStack.h <21:10 21:36>]
REFERENCE_INCLUDE: b2GrowableStack.h -> string.h [b2GrowableStack.h <22:10 22:19>]
REFERENCE_INCLUDE: string.h -> corecrt.h [string.h <11:10 11:20>]
REFERENCE_INCLUDE: string.h -> corecrt_memory.h [string.h <12:10 12:27>]
REFERENCE_INCLUDE: corecrt_memory.h -> corecrt.h [corecrt_memory.h <13:10 13:20>]
REFERENCE_INCLUDE: corecrt_memory.h -> corecrt_memcpy_s.h [corecrt_memory.h <14:10 14:29>]
REFERENCE_INCLUDE: corecrt_memcpy_s.h -> corecrt.h [corecrt_memcpy_s.h <10:10 10:20>]
REFERENCE_INCLUDE: corecrt_memcpy_s.h -> errno.h [corecrt_memcpy_s.h <11:10 11:18>]
REFERENCE_INCLUDE: errno.h -> corecrt.h [errno.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt_memcpy_s.h -> vcruntime_string.h [corecrt_memcpy_s.h <12:10 12:29>]
REFERENCE_INCLUDE: vcruntime_string.h -> vcruntime.h [vcruntime_string.h <10:10 10:22>]
REFERENCE_INCLUDE: corecrt_memory.h -> vcruntime_string.h [corecrt_memory.h <15:10 15:29>]
REFERENCE_INCLUDE: string.h -> corecrt_wstring.h [string.h <13:10 13:28>]
REFERENCE_INCLUDE: corecrt_wstring.h -> corecrt.h [corecrt_wstring.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt_wstring.h -> vcruntime_string.h [corecrt_wstring.h <12:10 12:29>]
REFERENCE_INCLUDE: string.h -> vcruntime_string.h [string.h <14:10 14:29>]
REFERENCE_MACRO_USAGE: b2GrowableStack.h -> b2Assert [b2GrowableStack.h <67:3 67:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2_nullNode [b2DynamicTree.h <32:20 32:30>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2_nullNode [b2DynamicTree.h <177:17 177:27>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2_nullNode [b2DynamicTree.h <235:17 235:27>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2Assert [b2DynamicTree.h <158:2 158:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2Assert [b2DynamicTree.h <164:2 164:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2Assert [b2DynamicTree.h <209:2 209:9>]
REFERENCE_INCLUDE: b2DynamicTree.cpp -> string.h [b2DynamicTree.cpp <20:10 20:19>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <24:11 24:21>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <37:35 37:45>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <56:20 56:30>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <74:36 74:46>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <82:27 82:37>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <83:27 83:37>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <84:27 84:37>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <180:16 180:26>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <183:28 183:38>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <268:19 268:29>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <297:18 297:28>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <304:22 304:32>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <305:22 305:32>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <320:12 320:22>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <336:21 336:31>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <352:19 352:29>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <368:29 368:39>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <379:17 379:27>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <413:20 413:30>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <473:20 473:30>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <522:16 522:26>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <533:16 533:26>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <581:15 581:25>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <588:37 588:47>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <598:22 598:32>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <599:22 599:32>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <616:15 616:25>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <628:22 628:32>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <629:22 629:32>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <661:22 661:32>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <712:24 712:34>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_nullNode [b2DynamicTree.cpp <756:20 756:30>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <58:3 58:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <94:2 94:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <95:2 95:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <123:2 123:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <124:2 124:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <132:2 132:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <134:2 134:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <304:3 304:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <305:3 305:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <379:2 379:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <389:2 389:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <390:2 390:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <404:3 404:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <405:3 405:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <421:5 421:12>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <464:3 464:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <465:3 465:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <481:5 481:12>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <560:2 560:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <588:3 588:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <598:3 598:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <599:3 599:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <600:3 600:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <604:2 604:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <605:2 605:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <607:2 607:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <608:2 608:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <628:3 628:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <629:3 629:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <630:3 630:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <634:2 634:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <635:2 635:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <641:2 641:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <646:2 646:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <647:2 647:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <663:3 663:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <668:2 668:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <670:2 670:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2Assert [b2DynamicTree.cpp <685:3 685:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_aabbExtension [b2DynamicTree.cpp <110:11 110:26>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_aabbExtension [b2DynamicTree.cpp <110:29 110:44>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_aabbExtension [b2DynamicTree.cpp <145:11 145:26>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_aabbExtension [b2DynamicTree.cpp <145:29 145:44>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_aabbMultiplier [b2DynamicTree.cpp <150:13 150:29>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2DEBUG [b2DynamicTree.cpp <655:13 655:19>]
REFERENCE_MACRO_USAGE: b2DynamicTree.cpp -> b2_maxFloat [b2DynamicTree.cpp <724:21 724:31>]
REFERENCE_MACRO_USAGE: b2Settings.h -> FLT_MAX [b2Settings.h <42:22 42:28>]
REFERENCE_TYPE_USAGE: int8 -> signed char [b2Settings.h <33:9 33:14>]
REFERENCE_TYPE_USAGE: int16 -> short [b2Settings.h <34:9 34:14>]
REFERENCE_TYPE_USAGE: int32 -> int [b2Settings.h <35:9 35:14>]
REFERENCE_TYPE_USAGE: uint8 -> unsigned char [b2Settings.h <36:9 36:16>]
REFERENCE_TYPE_USAGE: uint16 -> unsigned short [b2Settings.h <37:9 37:16>]
REFERENCE_TYPE_USAGE: uint32 -> unsigned int [b2Settings.h <38:9 38:16>]
REFERENCE_TYPE_USAGE: float32 -> float [b2Settings.h <39:9 39:13>]
REFERENCE_TYPE_USAGE: float64 -> double [b2Settings.h <40:9 40:14>]
REFERENCE_TYPE_USAGE: void * b2Alloc(int32) -> void [b2Settings.h <135:1 135:4>]
REFERENCE_TYPE_USAGE: void * b2Alloc(int32) -> int32 [b2Settings.h <135:15 135:19>]
REFERENCE_TYPE_USAGE: void b2Free(void *) -> void [b2Settings.h <138:1 138:4>]
REFERENCE_TYPE_USAGE: void b2Free(void *) -> void [b2Settings.h <138:13 138:16>]
REFERENCE_TYPE_USAGE: void b2Log(const char *) -> void [b2Settings.h <141:1 141:4>]
REFERENCE_TYPE_USAGE: void b2Log(const char *) -> char [b2Settings.h <141:18 141:21>]
REFERENCE_TYPE_USAGE: int32 b2Version::major -> int32 [b2Settings.h <147:2 147:6>]
REFERENCE_TYPE_USAGE: int32 b2Version::minor -> int32 [b2Settings.h <148:2 148:6>]
REFERENCE_TYPE_USAGE: int32 b2Version::revision -> int32 [b2Settings.h <149:2 149:6>]
REFERENCE_TYPE_USAGE: b2Version b2_version -> b2Version [b2Settings.h <153:8 153:16>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> bool [b2Math.h <26:8 26:11>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> float32 [b2Math.h <26:23 26:29>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> int32 [b2Math.h <28:2 28:6>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> int32 [b2Math.h <28:31 28:35>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <33:8 33:14>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <33:26 33:32>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <42:2 42:8>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x -> float32 [b2Math.h <37:3 37:9>]
REFERENCE_TYPE_USAGE: int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i -> int32 [b2Math.h <38:3 38:7>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> b2InvSqrt::anonymous union (b2Math.h<35:2>) [b2Math.h <35:2 35:6>]
REFERENCE_CALL: float32 b2InvSqrt(float32) -> void b2InvSqrt::anonymous union (b2Math.h<35:2>)::() [b2Math.h <39:4 39:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <41:10 41:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <44:14 44:14>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <43:10 43:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <43:36 43:36>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 [b2Math.h <59:9 59:15>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 [b2Math.h <59:22 59:28>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 b2Vec2::x [b2Math.h <59:37 59:37>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 b2Vec2::y [b2Math.h <59:45 59:45>]
REFERENCE_TYPE_USAGE: void b2Vec2::SetZero() -> void [b2Math.h <62:2 62:5>]
REFERENCE_USAGE: void b2Vec2::SetZero() -> float32 b2Vec2::x [b2Math.h <62:19 62:19>]
REFERENCE_USAGE: void b2Vec2::SetZero() -> float32 b2Vec2::y [b2Math.h <62:29 62:29>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> void [b2Math.h <65:2 65:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> float32 [b2Math.h <65:11 65:17>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> float32 [b2Math.h <65:23 65:29>]
REFERENCE_USAGE: void b2Vec2::Set(float32, float32) -> float32 b2Vec2::x [b2Math.h <65:37 65:37>]
REFERENCE_USAGE: void b2Vec2::Set(float32, float32) -> float32 b2Vec2::y [b2Math.h <65:45 65:45>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::operator-() const -> b2Vec2 [b2Math.h <68:2 68:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::operator-() const -> b2Vec2 [b2Math.h <68:30 68:35>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::b2Vec2() [b2Math.h <68:37 68:37>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::Set(float32, float32) [b2Math.h <68:42 68:44>]
REFERENCE_USAGE: b2Vec2 b2Vec2::operator-() const -> float32 b2Vec2::x [b2Math.h <68:47 68:47>]
REFERENCE_USAGE: b2Vec2 b2Vec2::operator-() const -> float32 b2Vec2::y [b2Math.h <68:51 68:51>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <68:62 68:62>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::operator()(int32) const -> float32 [b2Math.h <71:2 71:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::operator()(int32) const -> int32 [b2Math.h <71:23 71:27>]
REFERENCE_USAGE: float32 b2Vec2::operator()(int32) const -> float32 b2Vec2::x [b2Math.h <73:12 73:12>]
REFERENCE_TYPE_USAGE: float32 & b2Vec2::operator()(int32) -> float32 [b2Math.h <77:2 77:8>]
REFERENCE_TYPE_USAGE: float32 & b2Vec2::operator()(int32) -> int32 [b2Math.h <77:24 77:28>]
REFERENCE_USAGE: float32 & b2Vec2::operator()(int32) -> float32 b2Vec2::x [b2Math.h <79:12 79:12>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> void [b2Math.h <83:2 83:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> b2Vec2 [b2Math.h <83:26 83:31>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <85:3 85:3>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <85:10 85:10>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <85:13 85:13>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <85:20 85:20>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> void [b2Math.h <89:2 89:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> b2Vec2 [b2Math.h <89:26 89:31>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <91:3 91:3>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <91:10 91:10>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <91:13 91:13>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <91:20 91:20>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator*=(float32) -> void [b2Math.h <95:2 95:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator*=(float32) -> float32 [b2Math.h <95:20 95:26>]
REFERENCE_USAGE: void b2Vec2::operator*=(float32) -> float32 b2Vec2::x [b2Math.h <97:3 97:3>]
REFERENCE_USAGE: void b2Vec2::operator*=(float32) -> float32 b2Vec2::y [b2Math.h <97:11 97:11>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Length() const -> float32 [b2Math.h <101:2 101:8>]
REFERENCE_CALL: float32 b2Vec2::Length() const -> float sqrtf(float) [b2Math.h <103:10 103:15>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::x [b2Math.h <103:17 103:17>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::x [b2Math.h <103:21 103:21>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::y [b2Math.h <103:25 103:25>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::y [b2Math.h <103:29 103:29>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 [b2Math.h <108:2 108:8>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::x [b2Math.h <110:10 110:10>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::x [b2Math.h <110:14 110:14>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::y [b2Math.h <110:18 110:18>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::y [b2Math.h <110:22 110:22>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <114:2 114:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <116:3 116:9>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <121:3 121:9>]
REFERENCE_CALL: float32 b2Vec2::Normalize() -> float32 b2Vec2::Length() const [b2Math.h <116:20 116:25>]
REFERENCE_USAGE: float32 b2Vec2::Normalize() -> float32 b2Vec2::x [b2Math.h <122:3 122:3>]
REFERENCE_USAGE: float32 b2Vec2::Normalize() -> float32 b2Vec2::y [b2Math.h <123:3 123:3>]
REFERENCE_TYPE_USAGE: bool b2Vec2::IsValid() const -> bool [b2Math.h <129:2 129:5>]
REFERENCE_CALL: bool b2Vec2::IsValid() const -> bool b2IsValid(float32) [b2Math.h <131:10 131:18>]
REFERENCE_CALL: bool b2Vec2::IsValid() const -> bool b2IsValid(float32) [b2Math.h <131:26 131:34>]
REFERENCE_USAGE: bool b2Vec2::IsValid() const -> float32 b2Vec2::x [b2Math.h <131:20 131:20>]
REFERENCE_USAGE: bool b2Vec2::IsValid() const -> float32 b2Vec2::y [b2Math.h <131:36 131:36>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::Skew() const -> b2Vec2 [b2Math.h <135:2 135:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::Skew() const -> b2Vec2 [b2Math.h <137:10 137:15>]
REFERENCE_CALL: b2Vec2 b2Vec2::Skew() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <137:10 137:15>]
REFERENCE_USAGE: b2Vec2 b2Vec2::Skew() const -> float32 b2Vec2::y [b2Math.h <137:18 137:18>]
REFERENCE_USAGE: b2Vec2 b2Vec2::Skew() const -> float32 b2Vec2::x [b2Math.h <137:21 137:21>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::x -> float32 [b2Math.h <140:2 140:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::y -> float32 [b2Math.h <140:2 140:8>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> b2Vec2 [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> b2Vec2 [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:9 150:15>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:22 150:28>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:35 150:41>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::x [b2Math.h <150:50 150:50>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::y [b2Math.h <150:58 150:58>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::z [b2Math.h <150:66 150:66>]
REFERENCE_TYPE_USAGE: void b2Vec3::SetZero() -> void [b2Math.h <153:2 153:5>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::x [b2Math.h <153:19 153:19>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::y [b2Math.h <153:29 153:29>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::z [b2Math.h <153:39 153:39>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> void [b2Math.h <156:2 156:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:11 156:17>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:23 156:29>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:35 156:41>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::x [b2Math.h <156:49 156:49>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::y [b2Math.h <156:57 156:57>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::z [b2Math.h <156:65 156:65>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Vec3::operator-() const -> b2Vec3 [b2Math.h <159:2 159:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Vec3::operator-() const -> b2Vec3 [b2Math.h <159:30 159:35>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::b2Vec3() [b2Math.h <159:37 159:37>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::Set(float32, float32, float32) [b2Math.h <159:42 159:44>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::x [b2Math.h <159:47 159:47>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::y [b2Math.h <159:51 159:51>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::z [b2Math.h <159:55 159:55>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::b2Vec3(b2Vec3 &&) [b2Math.h <159:66 159:66>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> void [b2Math.h <162:2 162:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> b2Vec3 [b2Math.h <162:26 162:31>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <164:3 164:3>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <164:10 164:10>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <164:13 164:13>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <164:20 164:20>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <164:23 164:23>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <164:30 164:30>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> void [b2Math.h <168:2 168:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> b2Vec3 [b2Math.h <168:26 168:31>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <170:3 170:3>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <170:10 170:10>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <170:13 170:13>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <170:20 170:20>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <170:23 170:23>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <170:30 170:30>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator*=(float32) -> void [b2Math.h <174:2 174:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator*=(float32) -> float32 [b2Math.h <174:20 174:26>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::x [b2Math.h <176:3 176:3>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::y [b2Math.h <176:11 176:11>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::z [b2Math.h <176:19 176:19>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::x -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::y -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::z -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::x [b2Math.h <144:8 144:13>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> b2Vec3 [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::y [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::z [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Mat22::b2Mat22() -> b2Vec2 b2Mat22::ex [b2Math.h <186:2 186:8>]
REFERENCE_CALL: void b2Mat22::b2Mat22() -> void b2Vec2::b2Vec2() [b2Math.h <186:2 186:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22() -> b2Vec2 b2Mat22::ey [b2Math.h <186:2 186:8>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <189:16 189:21>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <189:34 189:39>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <191:3 191:4>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2() [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <192:3 192:4>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <191:6 191:6>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <192:6 192:6>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:10 196:16>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:23 196:29>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:36 196:42>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:49 196:55>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <198:3 198:4>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <198:15 198:16>]
REFERENCE_CALL: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> void b2Vec2::b2Vec2() [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <199:3 199:4>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <199:15 199:16>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::x [b2Math.h <198:6 198:6>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::x [b2Math.h <199:6 199:6>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::y [b2Math.h <198:18 198:18>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::y [b2Math.h <199:18 199:18>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> void [b2Math.h <203:2 203:5>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <203:17 203:22>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <203:35 203:40>]
REFERENCE_CALL: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <205:6 205:6>]
REFERENCE_CALL: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <206:6 206:6>]
REFERENCE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <205:3 205:4>]
REFERENCE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <206:3 206:4>]
REFERENCE_TYPE_USAGE: void b2Mat22::SetIdentity() -> void [b2Math.h <210:2 210:5>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::x [b2Math.h <212:6 212:6>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::x [b2Math.h <212:19 212:19>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ex [b2Math.h <212:3 212:4>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ex [b2Math.h <213:3 213:4>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ey [b2Math.h <212:16 212:17>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ey [b2Math.h <213:16 213:17>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::y [b2Math.h <213:6 213:6>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::y [b2Math.h <213:19 213:19>]
REFERENCE_TYPE_USAGE: void b2Mat22::SetZero() -> void [b2Math.h <217:2 217:5>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::x [b2Math.h <219:6 219:6>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::x [b2Math.h <219:19 219:19>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ex [b2Math.h <219:3 219:4>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ex [b2Math.h <220:3 220:4>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ey [b2Math.h <219:16 219:17>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ey [b2Math.h <220:16 220:17>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::y [b2Math.h <220:6 220:6>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::y [b2Math.h <220:19 220:19>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Mat22 [b2Math.h <223:2 223:8>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Mat22 [b2Math.h <226:3 226:9>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 [b2Math.h <225:3 225:9>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 [b2Math.h <227:3 227:9>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <225:18 225:18>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <225:28 225:28>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <232:8 232:8>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <232:27 232:27>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <225:15 225:16>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <225:35 225:36>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <232:5 232:6>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <233:5 233:6>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <225:25 225:26>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <225:45 225:46>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <232:24 232:25>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <233:24 233:25>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <225:38 225:38>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <225:48 225:48>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <233:8 233:8>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <233:27 233:27>]
REFERENCE_CALL: b2Mat22 b2Mat22::GetInverse() const -> void b2Mat22::b2Mat22() [b2Math.h <226:11 226:11>]
REFERENCE_CALL: b2Mat22 b2Mat22::GetInverse() const -> void b2Mat22::b2Mat22(b2Mat22 &&) [b2Math.h <234:10 234:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <239:2 239:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <239:21 239:26>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <247:3 247:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 [b2Math.h <241:3 241:9>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 [b2Math.h <242:3 242:9>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <241:20 241:20>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <241:32 241:32>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <248:5 248:5>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <248:24 248:24>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <249:36 249:36>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ex [b2Math.h <241:17 241:18>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ex [b2Math.h <241:41 241:42>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ey [b2Math.h <241:29 241:30>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ey [b2Math.h <241:53 241:54>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <241:44 241:44>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <241:56 241:56>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <248:36 248:36>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <249:5 249:5>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <249:24 249:24>]
REFERENCE_CALL: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> void b2Vec2::b2Vec2() [b2Math.h <247:10 247:10>]
REFERENCE_CALL: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <250:10 250:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::ex -> b2Vec2 [b2Math.h <253:2 253:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::ey -> b2Vec2 [b2Math.h <253:2 253:7>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Vec2 b2Mat22::ex [b2Math.h <183:8 183:14>]
REFERENCE_CALL: void b2Mat22::b2Mat22(b2Mat22 &&) -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <183:8 183:14>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Mat22 [b2Math.h <183:8 183:14>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Vec2 b2Mat22::ey [b2Math.h <183:8 183:14>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ex [b2Math.h <260:2 260:8>]
REFERENCE_CALL: void b2Mat33::b2Mat33() -> void b2Vec3::b2Vec3() [b2Math.h <260:2 260:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ey [b2Math.h <260:2 260:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ez [b2Math.h <260:2 260:8>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:16 263:21>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:34 263:39>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:52 263:57>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <265:3 265:4>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3() [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <266:3 266:4>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <267:3 267:4>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <265:6 265:6>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <266:6 266:6>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <267:6 267:6>]
REFERENCE_TYPE_USAGE: void b2Mat33::SetZero() -> void [b2Math.h <271:2 271:5>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <273:6 273:12>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <274:6 274:12>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <275:6 275:12>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ex [b2Math.h <273:3 273:4>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ey [b2Math.h <274:3 274:4>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ez [b2Math.h <275:3 275:4>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const -> b2Vec3 [b2Math.h <280:2 280:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const -> b2Vec3 [b2Math.h <280:23 280:28>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const -> b2Vec2 [b2Math.h <285:2 285:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const -> b2Vec2 [b2Math.h <285:23 285:28>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetInverse22(b2Mat33 *) const -> void [b2Math.h <289:2 289:5>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetInverse22(b2Mat33 *) const -> b2Mat33 [b2Math.h <289:20 289:26>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetSymInverse33(b2Mat33 *) const -> void [b2Math.h <293:2 293:5>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetSymInverse33(b2Mat33 *) const -> b2Mat33 [b2Math.h <293:23 293:29>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ex -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ey -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ez -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: void b2Rot::b2Rot(float32) -> float32 [b2Math.h <304:17 304:23>]
REFERENCE_USAGE: void b2Rot::b2Rot(float32) -> float32 b2Rot::s [b2Math.h <307:3 307:3>]
REFERENCE_CALL: void b2Rot::b2Rot(float32) -> float sinf(float) [b2Math.h <307:7 307:10>]
REFERENCE_USAGE: void b2Rot::b2Rot(float32) -> float32 b2Rot::c [b2Math.h <308:3 308:3>]
REFERENCE_CALL: void b2Rot::b2Rot(float32) -> float cosf(float) [b2Math.h <308:7 308:10>]
REFERENCE_TYPE_USAGE: void b2Rot::Set(float32) -> void [b2Math.h <312:2 312:5>]
REFERENCE_TYPE_USAGE: void b2Rot::Set(float32) -> float32 [b2Math.h <312:11 312:17>]
REFERENCE_USAGE: void b2Rot::Set(float32) -> float32 b2Rot::s [b2Math.h <315:3 315:3>]
REFERENCE_CALL: void b2Rot::Set(float32) -> float sinf(float) [b2Math.h <315:7 315:10>]
REFERENCE_USAGE: void b2Rot::Set(float32) -> float32 b2Rot::c [b2Math.h <316:3 316:3>]
REFERENCE_CALL: void b2Rot::Set(float32) -> float cosf(float) [b2Math.h <316:7 316:10>]
REFERENCE_TYPE_USAGE: void b2Rot::SetIdentity() -> void [b2Math.h <320:2 320:5>]
REFERENCE_USAGE: void b2Rot::SetIdentity() -> float32 b2Rot::s [b2Math.h <322:3 322:3>]
REFERENCE_USAGE: void b2Rot::SetIdentity() -> float32 b2Rot::c [b2Math.h <323:3 323:3>]
REFERENCE_TYPE_USAGE: float32 b2Rot::GetAngle() const -> float32 [b2Math.h <327:2 327:8>]
REFERENCE_CALL: float32 b2Rot::GetAngle() const -> float atan2f(float, float) [b2Math.h <329:10 329:16>]
REFERENCE_USAGE: float32 b2Rot::GetAngle() const -> float32 b2Rot::s [b2Math.h <329:18 329:18>]
REFERENCE_USAGE: float32 b2Rot::GetAngle() const -> float32 b2Rot::c [b2Math.h <329:21 329:21>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> b2Vec2 [b2Math.h <333:2 333:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> b2Vec2 [b2Math.h <335:10 335:15>]
REFERENCE_CALL: b2Vec2 b2Rot::GetXAxis() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <335:10 335:15>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> float32 b2Rot::c [b2Math.h <335:17 335:17>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> float32 b2Rot::s [b2Math.h <335:20 335:20>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> b2Vec2 [b2Math.h <339:2 339:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> b2Vec2 [b2Math.h <341:10 341:15>]
REFERENCE_CALL: b2Vec2 b2Rot::GetYAxis() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <341:10 341:15>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> float32 b2Rot::s [b2Math.h <341:18 341:18>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> float32 b2Rot::c [b2Math.h <341:21 341:21>]
REFERENCE_TYPE_USAGE: float32 b2Rot::s -> float32 [b2Math.h <345:2 345:8>]
REFERENCE_TYPE_USAGE: float32 b2Rot::c -> float32 [b2Math.h <345:2 345:8>]
REFERENCE_USAGE: void b2Rot::b2Rot(const b2Rot &) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(const b2Rot &) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_TYPE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> b2Rot [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_TYPE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> b2Rot [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Transform::b2Transform() -> b2Vec2 b2Transform::p [b2Math.h <353:2 353:12>]
REFERENCE_CALL: void b2Transform::b2Transform() -> void b2Vec2::b2Vec2() [b2Math.h <353:2 353:12>]
REFERENCE_USAGE: void b2Transform::b2Transform() -> b2Rot b2Transform::q [b2Math.h <353:2 353:12>]
REFERENCE_CALL: void b2Transform::b2Transform() -> void b2Rot::b2Rot() [b2Math.h <353:2 353:12>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Vec2 [b2Math.h <356:20 356:25>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Rot [b2Math.h <356:44 356:48>]
REFERENCE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Vec2 b2Transform::p [b2Math.h <356:63 356:63>]
REFERENCE_CALL: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Math.h <356:63 356:63>]
REFERENCE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Rot b2Transform::q [b2Math.h <356:76 356:76>]
REFERENCE_CALL: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> void b2Rot::b2Rot(const b2Rot &) [b2Math.h <356:76 356:76>]
REFERENCE_TYPE_USAGE: void b2Transform::SetIdentity() -> void [b2Math.h <359:2 359:5>]
REFERENCE_CALL: void b2Transform::SetIdentity() -> void b2Vec2::SetZero() [b2Math.h <361:5 361:11>]
REFERENCE_USAGE: void b2Transform::SetIdentity() -> b2Vec2 b2Transform::p [b2Math.h <361:3 361:3>]
REFERENCE_CALL: void b2Transform::SetIdentity() -> void b2Rot::SetIdentity() [b2Math.h <362:5 362:15>]
REFERENCE_USAGE: void b2Transform::SetIdentity() -> b2Rot b2Transform::q [b2Math.h <362:3 362:3>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> void [b2Math.h <366:2 366:5>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <366:17 366:22>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> float32 [b2Math.h <366:35 366:41>]
REFERENCE_CALL: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <368:5 368:5>]
REFERENCE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 b2Transform::p [b2Math.h <368:3 368:3>]
REFERENCE_CALL: void b2Transform::Set(const b2Vec2 &, float32) -> void b2Rot::Set(float32) [b2Math.h <369:5 369:7>]
REFERENCE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Rot b2Transform::q [b2Math.h <369:3 369:3>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Transform::p -> b2Vec2 [b2Math.h <372:2 372:7>]
REFERENCE_TYPE_USAGE: b2Rot b2Transform::q -> b2Rot [b2Math.h <373:2 373:6>]
REFERENCE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Vec2 b2Transform::p [b2Math.h <350:8 350:18>]
REFERENCE_CALL: void b2Transform::b2Transform(b2Transform &&) -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <350:8 350:18>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Transform [b2Math.h <350:8 350:18>]
REFERENCE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Rot b2Transform::q [b2Math.h <350:8 350:18>]
REFERENCE_CALL: void b2Transform::b2Transform(b2Transform &&) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <350:8 350:18>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> void [b2Math.h <384:2 384:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> void [b2Math.h <697:8 697:11>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Transform [b2Math.h <384:20 384:30>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Transform [b2Math.h <697:35 697:45>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <384:38 384:44>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <697:52 697:58>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <700:2 700:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <388:2 388:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <707:8 707:11>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <709:2 709:9>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <388:15 388:21>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <707:30 707:36>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <710:2 710:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> void [b2Math.h <391:2 391:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> void [b2Math.h <717:8 717:11>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::localCenter -> b2Vec2 [b2Math.h <393:2 393:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::c0 -> b2Vec2 [b2Math.h <394:2 394:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::c -> b2Vec2 [b2Math.h <394:2 394:7>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::a0 -> float32 [b2Math.h <395:2 395:8>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::a -> float32 [b2Math.h <395:2 395:8>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::alpha0 -> float32 [b2Math.h <399:2 399:8>]
REFERENCE_TYPE_USAGE: const b2Vec2 b2Vec2_zero -> b2Vec2 [b2Math.h <403:14 403:19>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <406:8 406:14>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <406:28 406:33>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <406:45 406:50>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <408:11 408:11>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <408:17 408:17>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <408:23 408:23>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <408:29 408:29>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <412:8 412:14>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <412:30 412:35>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <412:47 412:52>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <414:11 414:11>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <414:29 414:29>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <414:17 414:17>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <414:23 414:23>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <419:8 419:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <419:29 419:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <421:9 421:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 [b2Math.h <419:40 419:46>]
REFERENCE_CALL: b2Vec2 b2Cross(const b2Vec2 &, float32) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <421:9 421:14>]
REFERENCE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 b2Vec2::y [b2Math.h <421:22 421:22>]
REFERENCE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 b2Vec2::x [b2Math.h <421:32 421:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <426:8 426:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <426:40 426:45>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <428:9 428:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 [b2Math.h <426:23 426:29>]
REFERENCE_CALL: b2Vec2 b2Cross(float32, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <428:9 428:14>]
REFERENCE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <428:23 428:23>]
REFERENCE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <428:32 428:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <433:8 433:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <433:45 433:50>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <435:9 435:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Mat22 [b2Math.h <433:27 433:33>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <435:9 435:14>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:21 435:21>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:27 435:27>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:36 435:36>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:56 435:56>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <435:18 435:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <435:47 435:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <435:33 435:34>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <435:62 435:63>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:42 435:42>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:50 435:50>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:65 435:65>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:71 435:71>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <440:8 440:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <440:46 440:51>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <442:9 442:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Mat22 [b2Math.h <440:28 440:34>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <442:9 442:14>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <442:16 442:20>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <442:32 442:36>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <442:27 442:28>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <442:43 442:44>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:8 446:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:33 446:38>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:50 446:55>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <448:9 448:14>]
REFERENCE_CALL: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <448:9 448:14>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <448:18 448:18>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <448:24 448:24>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <448:29 448:29>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <448:35 448:35>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:8 452:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:33 452:38>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:50 452:55>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <454:9 454:14>]
REFERENCE_CALL: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <454:9 454:14>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <454:18 454:18>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <454:24 454:24>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <454:29 454:29>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <454:35 454:35>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <457:8 457:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <457:44 457:49>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <459:9 459:14>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 [b2Math.h <457:27 457:33>]
REFERENCE_CALL: b2Vec2 operator*(float32, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <459:9 459:14>]
REFERENCE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <459:22 459:22>]
REFERENCE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <459:31 459:31>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> bool [b2Math.h <462:8 462:11>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <462:32 462:37>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <462:49 462:54>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <464:11 464:11>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <464:18 464:18>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <464:25 464:25>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <464:32 464:32>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> bool [b2Math.h <467:8 467:11>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <467:32 467:37>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <467:49 467:54>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <469:11 469:11>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <469:18 469:18>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <469:25 469:25>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <469:32 469:32>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <472:8 472:14>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <472:33 472:38>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <472:50 472:55>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <474:2 474:7>]
REFERENCE_CALL: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <474:15 474:15>]
REFERENCE_CALL: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::Length() const [b2Math.h <475:11 475:16>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <478:8 478:14>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <478:40 478:45>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <478:57 478:62>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <480:2 480:7>]
REFERENCE_CALL: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <480:15 480:15>]
REFERENCE_CALL: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <481:9 481:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <484:8 484:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <484:44 484:49>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <486:9 486:14>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 [b2Math.h <484:27 484:33>]
REFERENCE_CALL: b2Vec3 operator*(float32, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <486:9 486:14>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <486:22 486:22>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <486:31 486:31>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <486:40 486:40>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:8 490:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:33 490:38>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:50 490:55>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <492:9 492:14>]
REFERENCE_CALL: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <492:9 492:14>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <492:18 492:18>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <492:24 492:24>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <492:29 492:29>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <492:35 492:35>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <492:40 492:40>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <492:46 492:46>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:8 496:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:33 496:38>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:50 496:55>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <498:9 498:14>]
REFERENCE_CALL: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <498:9 498:14>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <498:18 498:18>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <498:24 498:24>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <498:29 498:29>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <498:35 498:35>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <498:40 498:40>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <498:46 498:46>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 [b2Math.h <502:8 502:14>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <502:28 502:33>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <502:45 502:50>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <504:11 504:11>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <504:17 504:17>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <504:23 504:23>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <504:29 504:29>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <504:35 504:35>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <504:41 504:41>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:8 508:13>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:29 508:34>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:46 508:51>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <510:9 510:14>]
REFERENCE_CALL: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <510:9 510:14>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:18 510:18>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:36 510:36>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:70 510:70>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:76 510:76>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:24 510:24>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:30 510:30>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:41 510:41>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:59 510:59>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:47 510:47>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:53 510:53>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:64 510:64>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:82 510:82>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:8 513:14>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:34 513:40>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:52 513:58>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <515:9 515:15>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:9 515:15>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:22 515:22>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:35 515:35>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <515:19 515:20>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <515:26 515:27>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <515:32 515:33>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <515:39 515:40>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:8 519:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:28 519:34>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:46 519:52>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <521:9 521:15>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <521:9 521:15>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <521:17 521:21>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <521:33 521:37>]
REFERENCE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <521:28 521:29>]
REFERENCE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <521:44 521:45>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:8 525:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:29 525:35>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:47 525:53>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <529:9 529:15>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 [b2Math.h <527:2 527:7>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 [b2Math.h <528:2 528:7>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <527:9 527:10>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <528:9 528:10>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <527:12 527:16>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <527:31 527:35>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <528:12 528:16>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <528:31 528:35>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:20 527:21>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:26 527:27>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:45 527:46>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <528:20 528:21>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <527:39 527:40>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:26 528:27>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:39 528:40>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:45 528:46>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <529:9 529:15>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <533:8 533:13>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <533:45 533:50>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Mat33 [b2Math.h <533:27 533:33>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <535:20 535:20>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <535:33 535:33>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:13 535:13>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:26 535:26>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:39 535:39>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <535:11 535:11>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <535:17 535:18>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <535:24 535:24>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <535:30 535:31>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <535:37 535:37>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <535:43 535:44>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <539:8 539:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <539:47 539:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <541:9 541:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Mat33 [b2Math.h <539:29 539:35>]
REFERENCE_CALL: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <541:9 541:14>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::x [b2Math.h <541:21 541:21>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::x [b2Math.h <541:36 541:36>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ex [b2Math.h <541:18 541:19>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ex [b2Math.h <541:47 541:48>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <541:27 541:27>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <541:56 541:56>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ey [b2Math.h <541:33 541:34>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ey [b2Math.h <541:62 541:63>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <541:42 541:42>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <541:71 541:71>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::y [b2Math.h <541:50 541:50>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::y [b2Math.h <541:65 541:65>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:8 545:12>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:26 545:30>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:42 545:46>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <551:2 551:6>]
REFERENCE_CALL: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot() [b2Math.h <551:8 551:9>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:5 552:5>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:11 552:11>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:29 552:29>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <553:23 553:23>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <553:29 553:29>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <552:17 552:17>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <552:23 552:23>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:5 553:5>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:11 553:11>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:17 553:17>]
REFERENCE_CALL: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <554:9 554:10>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:8 558:12>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:27 558:31>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:43 558:47>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <564:2 564:6>]
REFERENCE_CALL: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot() [b2Math.h <564:8 564:9>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:5 565:5>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:17 565:17>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:23 565:23>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <566:23 566:23>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <566:29 566:29>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <565:11 565:11>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <565:29 565:29>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:5 566:5>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:11 566:11>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:17 566:17>]
REFERENCE_CALL: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <567:9 567:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <571:8 571:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <571:43 571:48>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <573:9 573:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Rot [b2Math.h <571:27 571:31>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <573:9 573:14>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <573:18 573:18>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <573:53 573:53>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <573:24 573:24>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <573:47 573:47>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <573:30 573:30>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <573:41 573:41>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <573:36 573:36>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <573:59 573:59>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <577:8 577:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <577:44 577:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <579:9 579:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Rot [b2Math.h <577:28 577:32>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <579:9 579:14>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <579:18 579:18>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <579:54 579:54>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <579:24 579:24>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <579:48 579:48>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <579:30 579:30>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <579:42 579:42>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <579:36 579:36>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <579:60 579:60>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <582:8 582:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <582:49 582:54>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <587:9 587:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Transform [b2Math.h <582:27 582:37>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <584:2 584:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <585:2 585:8>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <584:19 584:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <585:33 585:33>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <584:17 584:17>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <584:31 584:31>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <585:17 585:17>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <585:31 585:31>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <584:25 584:25>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <584:48 584:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <585:25 585:25>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <584:33 584:33>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <585:19 585:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <584:39 584:39>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <585:39 585:39>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <585:48 585:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <584:46 584:46>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <585:46 585:46>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <587:9 587:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <590:8 590:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <590:50 590:55>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <597:9 597:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Transform [b2Math.h <590:28 590:38>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <592:2 592:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <593:2 593:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <594:2 594:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <595:2 595:8>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <592:17 592:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <592:25 592:25>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <592:23 592:23>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <593:23 593:23>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <593:17 593:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <593:25 593:25>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <594:19 594:19>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <595:33 595:33>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <594:17 594:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <594:30 594:30>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <595:18 595:18>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <595:31 595:31>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <594:32 594:32>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <595:20 595:20>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <597:9 597:14>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:8 602:18>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:32 602:42>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:54 602:64>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <604:2 604:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform() [b2Math.h <604:14 604:14>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <605:6 605:6>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:4 605:4>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:16 605:16>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:21 605:21>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <606:16 606:16>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Mul(const b2Rot &, const b2Rot &) [b2Math.h <605:8 605:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <606:6 606:6>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:4 606:4>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:21 606:21>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:28 606:28>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <606:24 606:24>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <606:8 606:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform(b2Transform &&) [b2Math.h <607:9 607:9>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:8 612:18>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:33 612:43>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:55 612:65>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <614:2 614:12>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform() [b2Math.h <614:14 614:14>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <615:6 615:6>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:4 615:4>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:17 615:17>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:22 615:22>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <616:17 616:17>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2MulT(const b2Rot &, const b2Rot &) [b2Math.h <615:8 615:13>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <616:6 616:6>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:4 616:4>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:22 616:22>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:28 616:28>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2Math.h <616:8 616:13>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <616:24 616:24>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform(b2Transform &&) [b2Math.h <617:9 617:9>]
REFERENCE_TYPE_USAGE: T b2Abs<typename T>(T) -> b2Abs<typename T>::T [b2Math.h <621:8 621:8>]
REFERENCE_TYPE_USAGE: T b2Abs<typename T>(T) -> b2Abs<typename T>::T [b2Math.h <621:16 621:16>]
REFERENCE_TYPE_USAGE: T b2Abs<typename T>(T) -> b2Abs<typename T>::T [b2Math.h <623:13 623:13>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Abs<float>(float) -> T b2Abs<typename T>(T) [b2Math.h <621:10 621:14>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Abs<b2Vec2>(b2Vec2) -> T b2Abs<typename T>(T) [b2Math.h <621:10 621:14>]
REFERENCE_TEMPLATE_SPECIALIZATION: int b2Abs<int>(int) -> T b2Abs<typename T>(T) [b2Math.h <621:10 621:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <626:8 626:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <626:27 626:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <628:9 628:14>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <628:9 628:14>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> float b2Abs<float>(float) [b2Math.h <628:16 628:20>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> float b2Abs<float>(float) [b2Math.h <628:28 628:32>]
REFERENCE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <628:24 628:24>]
REFERENCE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <628:36 628:36>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <631:8 631:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <631:28 631:34>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <633:9 633:15>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <633:9 633:15>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <633:17 633:21>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <633:30 633:34>]
REFERENCE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <633:25 633:26>]
REFERENCE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <633:38 633:39>]
REFERENCE_TYPE_USAGE: T b2Min<typename T>(T, T) -> b2Min<typename T>::T [b2Math.h <637:8 637:8>]
REFERENCE_TYPE_USAGE: T b2Min<typename T>(T, T) -> b2Min<typename T>::T [b2Math.h <637:16 637:16>]
REFERENCE_TYPE_USAGE: T b2Min<typename T>(T, T) -> b2Min<typename T>::T [b2Math.h <637:21 637:21>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Min<float>(float, float) -> T b2Min<typename T>(T, T) [b2Math.h <637:10 637:14>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> T b2Min<typename T>(T, T) [b2Math.h <637:10 637:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:8 642:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:27 642:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:44 642:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <644:9 644:14>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <644:9 644:14>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float b2Min<float>(float, float) [b2Math.h <644:16 644:20>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float b2Min<float>(float, float) [b2Math.h <644:33 644:37>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <644:24 644:24>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <644:29 644:29>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <644:41 644:41>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <644:46 644:46>]
REFERENCE_TYPE_USAGE: T b2Max<typename T>(T, T) -> b2Max<typename T>::T [b2Math.h <648:8 648:8>]
REFERENCE_TYPE_USAGE: T b2Max<typename T>(T, T) -> b2Max<typename T>::T [b2Math.h <648:16 648:16>]
REFERENCE_TYPE_USAGE: T b2Max<typename T>(T, T) -> b2Max<typename T>::T [b2Math.h <648:21 648:21>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Max<float>(float, float) -> T b2Max<typename T>(T, T) [b2Math.h <648:10 648:14>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> T b2Max<typename T>(T, T) [b2Math.h <648:10 648:14>]
REFERENCE_TEMPLATE_SPECIALIZATION: int b2Max<int>(int, int) -> T b2Max<typename T>(T, T) [b2Math.h <648:10 648:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:8 653:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:27 653:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:44 653:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <655:9 655:14>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <655:9 655:14>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float b2Max<float>(float, float) [b2Math.h <655:16 655:20>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float b2Max<float>(float, float) [b2Math.h <655:33 655:37>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <655:24 655:24>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <655:29 655:29>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <655:41 655:41>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <655:46 655:46>]
REFERENCE_TYPE_USAGE: T b2Clamp<typename T>(T, T, T) -> b2Clamp<typename T>::T [b2Math.h <659:8 659:8>]
REFERENCE_TYPE_USAGE: T b2Clamp<typename T>(T, T, T) -> b2Clamp<typename T>::T [b2Math.h <659:18 659:18>]
REFERENCE_TYPE_USAGE: T b2Clamp<typename T>(T, T, T) -> b2Clamp<typename T>::T [b2Math.h <659:23 659:23>]
REFERENCE_TYPE_USAGE: T b2Clamp<typename T>(T, T, T) -> b2Clamp<typename T>::T [b2Math.h <659:30 659:30>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:8 664:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:29 664:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:46 664:51>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:65 664:70>]
REFERENCE_CALL: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Math.h <666:9 666:13>]
REFERENCE_CALL: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Math.h <666:20 666:24>]
REFERENCE_TYPE_USAGE: void b2Swap<typename T>(T &, T &) -> void [b2Math.h <669:29 669:32>]
REFERENCE_TYPE_USAGE: void b2Swap<typename T>(T &, T &) -> b2Swap<typename T>::T [b2Math.h <669:41 669:41>]
REFERENCE_TYPE_USAGE: void b2Swap<typename T>(T &, T &) -> b2Swap<typename T>::T [b2Math.h <669:47 669:47>]
REFERENCE_TYPE_USAGE: void b2Swap<typename T>(T &, T &) -> b2Swap<typename T>::T [b2Math.h <671:2 671:2>]
REFERENCE_TYPE_USAGE: uint32 b2NextPowerOfTwo(uint32) -> uint32 [b2Math.h <681:8 681:13>]
REFERENCE_TYPE_USAGE: uint32 b2NextPowerOfTwo(uint32) -> uint32 [b2Math.h <681:32 681:37>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> bool [b2Math.h <691:8 691:11>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> bool [b2Math.h <693:2 693:5>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> uint32 [b2Math.h <691:28 691:33>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <699:8 699:8>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Transform::p [b2Math.h <699:6 699:6>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Transform::p [b2Math.h <704:6 704:6>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <699:29 699:29>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <699:24 699:24>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <699:36 699:36>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::c0 [b2Math.h <699:26 699:27>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::c [b2Math.h <699:38 699:38>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 b2Sweep::a0 [b2Math.h <700:34 700:35>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 b2Sweep::a [b2Math.h <700:46 700:46>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> void b2Rot::Set(float32) [b2Math.h <701:8 701:10>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Rot b2Transform::q [b2Math.h <701:6 701:6>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Rot b2Transform::q [b2Math.h <704:21 704:21>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> void b2Vec2::operator-=(const b2Vec2 &) [b2Math.h <704:8 704:9>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <704:11 704:15>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::localCenter [b2Math.h <704:24 704:34>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <709:11 709:16>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <710:26 710:31>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <710:44 710:49>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <713:2 713:7>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Math.h <709:2 709:9>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> unsigned int [b2Math.h <709:2 709:9>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Math.h <711:5 711:6>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c0 [b2Math.h <711:2 711:3>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c0 [b2Math.h <711:20 711:21>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <711:13 711:13>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <711:18 711:18>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c [b2Math.h <711:16 711:16>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a0 [b2Math.h <712:2 712:3>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a0 [b2Math.h <712:20 712:21>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a [b2Math.h <712:16 712:16>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> float32 [b2Math.h <719:2 719:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> float32 [b2Math.h <720:2 720:8>]
REFERENCE_CALL: void b2Sweep::Normalize() -> float floorf(float) [b2Math.h <720:23 720:28>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a0 [b2Math.h <720:30 720:31>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a0 [b2Math.h <721:2 721:3>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a [b2Math.h <722:2 722:2>]
REFERENCE_TYPE_USAGE: const uint8 b2_nullFeature -> uint8 [b2Collision.h <34:7 34:11>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::indexA -> uint8 [b2Collision.h <46:2 46:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::indexB -> uint8 [b2Collision.h <47:2 47:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::typeA -> uint8 [b2Collision.h <48:2 48:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::typeB -> uint8 [b2Collision.h <49:2 49:6>]
REFERENCE_TYPE_USAGE: b2ContactFeature b2ContactID::cf -> b2ContactFeature [b2Collision.h <55:2 55:17>]
REFERENCE_TYPE_USAGE: uint32 b2ContactID::key -> uint32 [b2Collision.h <56:2 56:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ManifoldPoint::localPoint -> b2Vec2 [b2Collision.h <71:2 71:7>]
REFERENCE_TYPE_USAGE: float32 b2ManifoldPoint::normalImpulse -> float32 [b2Collision.h <72:2 72:8>]
REFERENCE_TYPE_USAGE: float32 b2ManifoldPoint::tangentImpulse -> float32 [b2Collision.h <73:2 73:8>]
REFERENCE_TYPE_USAGE: b2ContactID b2ManifoldPoint::id -> b2ContactID [b2Collision.h <74:2 74:12>]
REFERENCE_TYPE_USAGE: b2ManifoldPoint [] b2Manifold::points -> b2ManifoldPoint [b2Collision.h <102:2 102:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Manifold::localNormal -> b2Vec2 [b2Collision.h <103:2 103:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Manifold::localPoint -> b2Vec2 [b2Collision.h <104:2 104:7>]
REFERENCE_TYPE_USAGE: b2Manifold::Type b2Manifold::type -> b2Manifold::Type [b2Collision.h <105:2 105:5>]
REFERENCE_TYPE_USAGE: int32 b2Manifold::pointCount -> int32 [b2Collision.h <106:2 106:6>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> void [b2Collision.h <116:2 116:5>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Manifold [b2Collision.h <116:24 116:33>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Transform [b2Collision.h <117:12 117:22>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Transform [b2Collision.h <118:12 118:22>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [b2Collision.h <117:30 117:36>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [b2Collision.h <118:30 118:36>]
REFERENCE_TYPE_USAGE: b2Vec2 b2WorldManifold::normal -> b2Vec2 [b2Collision.h <120:2 120:7>]
REFERENCE_TYPE_USAGE: b2Vec2 [] b2WorldManifold::points -> b2Vec2 [b2Collision.h <121:2 121:7>]
REFERENCE_TYPE_USAGE: float32 [] b2WorldManifold::separations -> float32 [b2Collision.h <122:2 122:8>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> void [b2Collision.h <136:1 136:4>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState [b2Collision.h <136:23 136:34>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState [b2Collision.h <136:66 136:77>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2Manifold [b2Collision.h <137:14 137:23>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2Manifold [b2Collision.h <137:43 137:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ClipVertex::v -> b2Vec2 [b2Collision.h <142:2 142:7>]
REFERENCE_TYPE_USAGE: b2ContactID b2ClipVertex::id -> b2ContactID [b2Collision.h <143:2 143:12>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastInput::p1 -> b2Vec2 [b2Collision.h <149:2 149:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastInput::p2 -> b2Vec2 [b2Collision.h <149:2 149:7>]
REFERENCE_TYPE_USAGE: float32 b2RayCastInput::maxFraction -> float32 [b2Collision.h <150:2 150:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastOutput::normal -> b2Vec2 [b2Collision.h <157:2 157:7>]
REFERENCE_TYPE_USAGE: float32 b2RayCastOutput::fraction -> float32 [b2Collision.h <158:2 158:8>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <165:2 165:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <254:8 254:11>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <257:2 257:5>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 [b2Collision.h <168:2 168:7>]
REFERENCE_CALL: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.h <170:15 170:15>]
REFERENCE_CALL: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <170:29 170:29>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <170:18 170:27>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <170:31 170:40>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 [b2Collision.h <174:2 174:7>]
REFERENCE_CALL: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.h <176:15 176:15>]
REFERENCE_CALL: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <176:29 176:29>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <176:18 176:27>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <176:31 176:40>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <180:2 180:8>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <182:3 182:9>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <183:3 183:9>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::x [b2Collision.h <182:27 182:27>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::x [b2Collision.h <182:42 182:42>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <182:16 182:25>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <183:16 183:25>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <182:31 182:40>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <183:31 183:40>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::y [b2Collision.h <183:27 183:27>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::y [b2Collision.h <183:42 183:42>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &) -> void [b2Collision.h <188:2 188:5>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2AABB [b2Collision.h <188:21 188:26>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <190:14 190:14>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <191:14 191:14>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:3 190:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:22 190:31>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:39 190:48>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <190:16 190:20>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:3 191:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:22 191:31>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:39 191:48>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <191:16 191:20>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> void [b2Collision.h <195:2 195:5>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <195:21 195:26>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <195:42 195:47>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <197:14 197:14>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <198:14 198:14>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:3 197:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:28 197:37>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:46 197:55>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <197:16 197:20>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:3 198:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:28 198:37>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:46 198:55>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <198:16 198:20>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> bool [b2Collision.h <202:2 202:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> bool [b2Collision.h <204:3 204:6>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2AABB [b2Collision.h <202:22 202:27>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <205:33 205:33>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <205:54 205:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <207:38 207:38>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <207:54 207:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <205:22 205:31>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <205:43 205:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <206:22 206:31>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <206:43 206:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <206:33 206:33>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <206:54 206:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <208:38 208:38>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <208:54 208:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <207:27 207:36>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <207:43 207:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <208:27 208:36>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <208:43 208:52>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> bool [b2Collision.h <212:2 212:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2RayCastOutput [b2Collision.h <212:15 212:29>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2RayCastInput [b2Collision.h <212:46 212:59>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::lowerBound -> b2Vec2 [b2Collision.h <214:2 214:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::upperBound -> b2Vec2 [b2Collision.h <215:2 215:7>]
REFERENCE_USAGE: void b2AABB::b2AABB() -> b2Vec2 b2AABB::lowerBound [b2Collision.h <162:8 162:13>]
REFERENCE_CALL: void b2AABB::b2AABB() -> void b2Vec2::b2Vec2() [b2Collision.h <162:8 162:13>]
REFERENCE_USAGE: void b2AABB::b2AABB() -> b2Vec2 b2AABB::upperBound [b2Collision.h <162:8 162:13>]
REFERENCE_USAGE: void b2AABB::b2AABB(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <162:8 162:13>]
REFERENCE_CALL: void b2AABB::b2AABB(const b2AABB &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Collision.h <162:8 162:13>]
REFERENCE_USAGE: void b2AABB::b2AABB(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <162:8 162:13>]
REFERENCE_CALL: b2AABB & b2AABB::operator=(const b2AABB &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Collision.h <162:8 162:13>]
REFERENCE_USAGE: b2AABB & b2AABB::operator=(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <162:8 162:13>]
REFERENCE_USAGE: b2AABB & b2AABB::operator=(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <162:8 162:13>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <219:1 219:4>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <219:23 219:32>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <220:14 220:26>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <221:14 221:26>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <220:44 220:54>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <221:44 221:54>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <224:1 224:4>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <224:32 224:41>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <225:17 225:30>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <225:49 225:59>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <226:47 226:57>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <226:17 226:29>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void [b2Collision.h <229:1 229:4>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold [b2Collision.h <229:24 229:33>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <230:15 230:28>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <231:15 231:28>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <230:47 230:57>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <231:47 231:57>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <234:1 234:4>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <234:29 234:38>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2EdgeShape [b2Collision.h <235:17 235:27>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <235:46 235:56>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <236:47 236:57>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <236:17 236:29>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void [b2Collision.h <239:1 239:4>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold [b2Collision.h <239:30 239:39>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EdgeShape [b2Collision.h <240:17 240:27>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <240:43 240:53>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <241:48 241:58>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <241:17 241:30>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> int32 [b2Collision.h <244:1 244:5>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> int32 [b2Collision.h <245:46 245:50>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex [b2Collision.h <244:27 244:38>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex [b2Collision.h <244:55 244:66>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 [b2Collision.h <245:14 245:19>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> float32 [b2Collision.h <245:30 245:36>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> bool [b2Collision.h <248:1 248:4>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Shape [b2Collision.h <248:27 248:33>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Shape [b2Collision.h <249:12 249:18>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> int32 [b2Collision.h <248:44 248:48>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> int32 [b2Collision.h <249:29 249:33>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform [b2Collision.h <250:12 250:22>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform [b2Collision.h <250:36 250:46>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 [b2Collision.h <256:2 256:7>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <256:24 256:24>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <256:13 256:22>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <258:43 258:52>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <256:26 256:35>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <258:19 258:28>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> float32 b2Vec2::x [b2Collision.h <257:17 257:17>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> float32 b2Vec2::y [b2Collision.h <257:32 257:32>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> bool b2Vec2::IsValid() const [b2Collision.h <258:30 258:36>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> bool b2Vec2::IsValid() const [b2Collision.h <258:54 258:60>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> bool [b2Collision.h <262:8 262:11>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <262:33 262:38>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <262:50 262:55>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 [b2Collision.h <264:2 264:7>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> void b2Vec2::b2Vec2() [b2Collision.h <264:9 264:10>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> void b2Vec2::b2Vec2() [b2Collision.h <264:13 264:14>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <265:5 265:5>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <266:5 266:5>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <265:20 265:20>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <266:20 266:20>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <265:9 265:18>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <266:9 266:18>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <265:24 265:33>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <266:24 266:33>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::x [b2Collision.h <268:9 268:9>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::x [b2Collision.h <271:9 271:9>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::y [b2Collision.h <268:24 268:24>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::y [b2Collision.h <271:24 271:24>]
REFERENCE_TYPE_USAGE: b2GrowableStack<typename T, int32 N>::N -> int32 [b2GrowableStack.h <27:23 27:27>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <33:3 33:9>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> b2GrowableStack<typename T, int32 N>::T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <33:13 33:19>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <34:3 34:9>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <35:3 35:12>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> b2GrowableStack<typename T, int32 N>::N [b2GrowableStack.h <35:16 35:16>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <40:7 40:13>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <42:11 42:17>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <43:4 43:10>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> b2GrowableStack<typename T, int32 N>::T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <40:18 40:24>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> void [b2GrowableStack.h <47:2 47:5>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> b2GrowableStack<typename T, int32 N>::T [b2GrowableStack.h <47:18 47:18>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> b2GrowableStack<typename T, int32 N>::T [b2GrowableStack.h <51:4 51:4>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> b2GrowableStack<typename T, int32 N>::T [b2GrowableStack.h <53:15 53:15>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> b2GrowableStack<typename T, int32 N>::T [b2GrowableStack.h <53:46 53:46>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> b2GrowableStack<typename T, int32 N>::T [b2GrowableStack.h <54:42 54:42>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <49:7 49:13>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <54:25 54:31>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <61:11 61:17>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <62:5 62:11>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <49:18 49:27>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <52:4 52:13>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <53:26 53:35>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <51:13 51:19>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <53:4 53:10>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <54:11 54:17>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <61:3 61:9>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) -> b2GrowableStack<typename T, int32 N>::T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <55:15 55:21>]
REFERENCE_TYPE_USAGE: b2GrowableStack<typename T, int32 N>::T b2GrowableStack<typename T, int32 N>::Pop() -> b2GrowableStack<typename T, int32 N>::T [b2GrowableStack.h <65:2 65:2>]
REFERENCE_TYPE_USAGE: b2GrowableStack<typename T, int32 N>::T b2GrowableStack<typename T, int32 N>::Pop() -> void [b2GrowableStack.h <67:3 67:10>]
REFERENCE_USAGE: b2GrowableStack<typename T, int32 N>::T b2GrowableStack<typename T, int32 N>::Pop() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <67:12 67:18>]
REFERENCE_USAGE: b2GrowableStack<typename T, int32 N>::T b2GrowableStack<typename T, int32 N>::Pop() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <68:5 68:11>]
REFERENCE_USAGE: b2GrowableStack<typename T, int32 N>::T b2GrowableStack<typename T, int32 N>::Pop() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <69:18 69:24>]
REFERENCE_CALL: b2GrowableStack<typename T, int32 N>::T b2GrowableStack<typename T, int32 N>::Pop() -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2GrowableStack.h <67:3 67:10>]
REFERENCE_TYPE_USAGE: b2GrowableStack<typename T, int32 N>::T b2GrowableStack<typename T, int32 N>::Pop() -> unsigned int [b2GrowableStack.h <67:3 67:10>]
REFERENCE_USAGE: b2GrowableStack<typename T, int32 N>::T b2GrowableStack<typename T, int32 N>::Pop() -> b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <69:10 69:16>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<typename T, int32 N>::GetCount() -> int32 [b2GrowableStack.h <72:2 72:6>]
REFERENCE_USAGE: int32 b2GrowableStack<typename T, int32 N>::GetCount() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <74:10 74:16>]
REFERENCE_TYPE_USAGE: b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack -> b2GrowableStack<typename T, int32 N>::T [b2GrowableStack.h <78:2 78:2>]
REFERENCE_TYPE_USAGE: b2GrowableStack<typename T, int32 N>::T [] b2GrowableStack<typename T, int32 N>::m_array -> b2GrowableStack<typename T, int32 N>::T [b2GrowableStack.h <79:2 79:2>]
REFERENCE_USAGE: b2GrowableStack<typename T, int32 N>::T [] b2GrowableStack<typename T, int32 N>::m_array -> b2GrowableStack<typename T, int32 N>::N [b2GrowableStack.h <79:12 79:12>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<typename T, int32 N>::m_count -> int32 [b2GrowableStack.h <80:2 80:6>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<typename T, int32 N>::m_capacity -> int32 [b2GrowableStack.h <81:2 81:6>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2GrowableStack<int, 256> -> b2GrowableStack<typename T, int32 N> [b2GrowableStack.h <28:7 28:21>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION: void b2GrowableStack<int, 256>::b2GrowableStack() -> void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() [b2GrowableStack.h <31:2 31:16>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION: void b2GrowableStack<int, 256>::~b2GrowableStack() -> void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() [b2GrowableStack.h <38:2 38:2>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION: void b2GrowableStack<int, 256>::Push(const int &) -> void b2GrowableStack<typename T, int32 N>::Push(const b2GrowableStack<typename T, int32 N>::T &) [b2GrowableStack.h <47:7 47:10>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> void [b2GrowableStack.h <47:2 47:5>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION: int b2GrowableStack<int, 256>::Pop() -> b2GrowableStack<typename T, int32 N>::T b2GrowableStack<typename T, int32 N>::Pop() [b2GrowableStack.h <65:4 65:6>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION: int32 b2GrowableStack<int, 256>::GetCount() -> int32 b2GrowableStack<typename T, int32 N>::GetCount() [b2GrowableStack.h <72:8 72:15>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<int, 256>::GetCount() -> int32 [b2GrowableStack.h <72:2 72:6>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION: int * b2GrowableStack<int, 256>::m_stack -> b2GrowableStack<typename T, int32 N>::T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <78:5 78:11>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION: int [] b2GrowableStack<int, 256>::m_array -> b2GrowableStack<typename T, int32 N>::T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <79:4 79:10>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION: int32 b2GrowableStack<int, 256>::m_count -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <80:8 80:14>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<int, 256>::m_count -> int32 [b2GrowableStack.h <80:2 80:6>]
REFERENCE_TEMPLATE_MEMBER_SPECIALIZATION: int32 b2GrowableStack<int, 256>::m_capacity -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <81:8 81:17>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<int, 256>::m_capacity -> int32 [b2GrowableStack.h <81:2 81:6>]
REFERENCE_TYPE_USAGE: bool b2TreeNode::IsLeaf() const -> bool [b2DynamicTree.h <30:2 30:5>]
REFERENCE_USAGE: bool b2TreeNode::IsLeaf() const -> int32 b2TreeNode::child1 [b2DynamicTree.h <32:10 32:15>]
REFERENCE_TYPE_USAGE: b2AABB b2TreeNode::aabb -> b2AABB [b2DynamicTree.h <36:2 36:7>]
REFERENCE_TYPE_USAGE: void * b2TreeNode::userData -> void [b2DynamicTree.h <38:2 38:5>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent -> int32 [b2DynamicTree.h <42:3 42:7>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next -> int32 [b2DynamicTree.h <43:3 43:7>]
REFERENCE_TYPE_USAGE: b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) [b2DynamicTree.h <40:2 40:6>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::child1 -> int32 [b2DynamicTree.h <46:2 46:6>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::child2 -> int32 [b2DynamicTree.h <47:2 47:6>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::height -> int32 [b2DynamicTree.h <50:2 50:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> int32 [b2DynamicTree.cpp <105:1 105:5>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> int32 [b2DynamicTree.cpp <107:2 107:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> int32 [b2DynamicTree.h <71:2 71:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2AABB [b2DynamicTree.cpp <105:40 105:45>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2AABB [b2DynamicTree.h <71:26 71:31>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> void [b2DynamicTree.cpp <105:54 105:57>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> void [b2DynamicTree.h <71:40 71:43>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> void [b2DynamicTree.cpp <121:1 121:4>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> void [b2DynamicTree.cpp <123:2 123:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> void [b2DynamicTree.cpp <124:2 124:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> void [b2DynamicTree.h <74:2 74:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> int32 [b2DynamicTree.cpp <121:34 121:38>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> int32 [b2DynamicTree.h <74:20 74:24>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> bool [b2DynamicTree.cpp <130:1 130:4>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> bool [b2DynamicTree.h <80:2 80:5>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> int32 [b2DynamicTree.cpp <130:31 130:35>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> int32 [b2DynamicTree.h <80:17 80:21>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2AABB [b2DynamicTree.cpp <130:52 130:57>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2AABB [b2DynamicTree.cpp <144:2 144:7>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2AABB [b2DynamicTree.h <80:38 80:43>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 [b2DynamicTree.cpp <130:72 130:77>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 [b2DynamicTree.cpp <145:2 145:7>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 [b2DynamicTree.cpp <150:2 150:7>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 [b2DynamicTree.h <80:59 80:64>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void [b2DynamicTree.h <84:2 84:5>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void [b2DynamicTree.h <156:8 156:11>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void [b2DynamicTree.h <158:2 158:9>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> int32 [b2DynamicTree.h <84:20 84:24>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> int32 [b2DynamicTree.h <156:41 156:45>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2AABB [b2DynamicTree.h <87:8 87:13>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2AABB [b2DynamicTree.h <162:14 162:19>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> int32 [b2DynamicTree.h <87:27 87:31>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> int32 [b2DynamicTree.h <162:48 162:52>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void [b2DynamicTree.h <92:2 92:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void [b2DynamicTree.h <169:8 169:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2DynamicTree::Query<typename T>::T [b2DynamicTree.h <92:13 92:13>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2DynamicTree::Query<typename T>::T [b2DynamicTree.h <169:34 169:34>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2AABB [b2DynamicTree.h <92:32 92:37>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2AABB [b2DynamicTree.h <169:53 169:58>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2DynamicTree.h <102:2 102:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2DynamicTree.h <204:8 204:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2DynamicTree.h <209:2 209:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2DynamicTree::RayCast<typename T>::T [b2DynamicTree.h <102:15 102:15>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2DynamicTree::RayCast<typename T>::T [b2DynamicTree.h <204:36 204:36>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2DynamicTree.h <102:34 102:47>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2DynamicTree.h <204:55 204:68>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2DynamicTree.h <259:4 259:17>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> void [b2DynamicTree.cpp <653:1 653:4>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> void [b2DynamicTree.cpp <663:3 663:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> void [b2DynamicTree.cpp <668:2 668:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> void [b2DynamicTree.cpp <670:2 670:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> void [b2DynamicTree.h <105:2 105:5>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetHeight() const -> int32 [b2DynamicTree.cpp <520:1 520:5>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetHeight() const -> int32 [b2DynamicTree.h <109:2 109:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 [b2DynamicTree.cpp <674:1 674:5>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 [b2DynamicTree.cpp <676:2 676:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 [b2DynamicTree.cpp <677:7 677:11>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 [b2DynamicTree.cpp <687:3 687:7>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 [b2DynamicTree.cpp <688:3 688:7>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 [b2DynamicTree.cpp <689:3 689:7>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 [b2DynamicTree.h <113:2 113:6>]
REFERENCE_TYPE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> float32 [b2DynamicTree.cpp <531:1 531:7>]
REFERENCE_TYPE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> float32 [b2DynamicTree.cpp <539:2 539:8>]
REFERENCE_TYPE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> float32 [b2DynamicTree.cpp <541:2 541:8>]
REFERENCE_TYPE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> float32 [b2DynamicTree.h <116:2 116:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> void [b2DynamicTree.cpp <696:1 696:4>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> void [b2DynamicTree.h <119:2 119:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> void [b2DynamicTree.cpp <772:1 772:4>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> void [b2DynamicTree.h <124:2 124:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2DynamicTree.cpp <772:39 772:44>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2DynamicTree.h <124:25 124:30>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 [b2DynamicTree.cpp <53:1 53:5>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 [b2DynamicTree.cpp <69:8 69:12>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 [b2DynamicTree.cpp <80:2 80:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 [b2DynamicTree.h <128:2 128:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> void [b2DynamicTree.cpp <92:1 92:4>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> void [b2DynamicTree.cpp <94:2 94:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> void [b2DynamicTree.cpp <95:2 95:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> void [b2DynamicTree.h <129:2 129:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> int32 [b2DynamicTree.cpp <92:30 92:34>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> int32 [b2DynamicTree.h <129:16 129:20>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> void [b2DynamicTree.cpp <176:1 176:4>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> void [b2DynamicTree.cpp <304:3 304:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> void [b2DynamicTree.cpp <305:3 305:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> void [b2DynamicTree.h <131:2 131:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.cpp <176:32 176:36>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.cpp <189:2 189:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.cpp <192:3 192:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.cpp <193:3 193:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.cpp <258:2 258:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.cpp <261:2 261:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.cpp <262:2 262:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.cpp <301:3 301:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.cpp <302:3 302:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.h <131:18 131:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> void [b2DynamicTree.cpp <316:1 316:4>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> void [b2DynamicTree.h <132:2 132:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 [b2DynamicTree.cpp <316:32 316:36>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 [b2DynamicTree.cpp <324:2 324:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 [b2DynamicTree.cpp <325:2 325:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 [b2DynamicTree.cpp <326:2 326:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 [b2DynamicTree.cpp <351:3 351:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 [b2DynamicTree.cpp <356:4 356:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 [b2DynamicTree.cpp <357:4 357:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 [b2DynamicTree.h <132:18 132:22>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.cpp <377:1 377:5>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.cpp <377:30 377:34>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.cpp <387:2 387:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.cpp <388:2 388:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.cpp <395:2 395:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.cpp <400:3 400:7>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.cpp <401:3 401:7>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.cpp <460:3 460:7>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.cpp <461:3 461:7>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.h <134:2 134:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.h <134:16 134:20>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight() const -> int32 [b2DynamicTree.cpp <573:1 573:5>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight() const -> int32 [b2DynamicTree.cpp <575:2 575:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight() const -> int32 [b2DynamicTree.h <136:2 136:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 [b2DynamicTree.cpp <558:1 558:5>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 [b2DynamicTree.cpp <558:36 558:40>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 [b2DynamicTree.cpp <568:2 568:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 [b2DynamicTree.cpp <569:2 569:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 [b2DynamicTree.h <137:2 137:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 [b2DynamicTree.h <137:22 137:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.cpp <579:1 579:4>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.cpp <588:3 588:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.cpp <598:3 598:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.cpp <599:3 599:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.cpp <600:3 600:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.cpp <604:2 604:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.cpp <605:2 605:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.cpp <607:2 607:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.cpp <608:2 608:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.h <139:2 139:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 [b2DynamicTree.cpp <579:39 579:43>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 [b2DynamicTree.cpp <593:2 593:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 [b2DynamicTree.cpp <594:2 594:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 [b2DynamicTree.h <139:25 139:29>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.cpp <614:1 614:4>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.cpp <628:3 628:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.cpp <629:3 629:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.cpp <630:3 630:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.cpp <634:2 634:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.cpp <635:2 635:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.cpp <641:2 641:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.cpp <646:2 646:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.cpp <647:2 647:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.h <140:2 140:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 [b2DynamicTree.cpp <614:37 614:41>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 [b2DynamicTree.cpp <623:2 623:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 [b2DynamicTree.cpp <624:2 624:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 [b2DynamicTree.cpp <637:2 637:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 [b2DynamicTree.cpp <638:2 638:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 [b2DynamicTree.cpp <639:2 639:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 [b2DynamicTree.h <140:23 140:27>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_root -> int32 [b2DynamicTree.h <142:2 142:6>]
REFERENCE_TYPE_USAGE: b2TreeNode * b2DynamicTree::m_nodes -> b2TreeNode [b2DynamicTree.h <144:2 144:11>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_nodeCount -> int32 [b2DynamicTree.h <145:2 145:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_nodeCapacity -> int32 [b2DynamicTree.h <146:2 146:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_freeList -> int32 [b2DynamicTree.h <148:2 148:6>]
REFERENCE_TYPE_USAGE: uint32 b2DynamicTree::m_path -> uint32 [b2DynamicTree.h <151:2 151:7>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_insertionCount -> int32 [b2DynamicTree.h <153:2 153:6>]
REFERENCE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.h <158:37 158:50>]
REFERENCE_CALL: void * b2DynamicTree::GetUserData(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.h <158:2 158:9>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> unsigned int [b2DynamicTree.h <158:2 158:9>]
REFERENCE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void * b2TreeNode::userData [b2DynamicTree.h <159:26 159:33>]
REFERENCE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <159:9 159:15>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> void [b2DynamicTree.h <164:2 164:9>]
REFERENCE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.h <164:37 164:50>]
REFERENCE_CALL: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.h <164:2 164:9>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> unsigned int [b2DynamicTree.h <164:2 164:9>]
REFERENCE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <165:26 165:29>]
REFERENCE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <165:9 165:15>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2GrowableStack<int, 256> [b2DynamicTree.h <171:2 171:16>]
REFERENCE_TEMPLATE_ARGUMENT: b2GrowableStack<int, 256> -> int32 [b2DynamicTree.h <171:18 171:22>]
REFERENCE_TEMPLATE_ARGUMENT: b2GrowableStack<int, 256> -> int32 [b2DynamicTree.h <229:18 229:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 [b2DynamicTree.h <171:18 171:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 [b2DynamicTree.h <176:3 176:7>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::b2GrowableStack() [b2DynamicTree.h <171:30 171:34>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <172:8 172:11>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <196:11 196:14>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <197:11 197:14>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2DynamicTree::m_root [b2DynamicTree.h <172:13 172:18>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2GrowableStack<int, 256>::GetCount() [b2DynamicTree.h <174:15 174:22>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int b2GrowableStack<int, 256>::Pop() [b2DynamicTree.h <176:24 176:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2TreeNode [b2DynamicTree.h <182:9 182:18>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <182:28 182:34>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2DynamicTree.h <184:7 184:19>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <184:27 184:30>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.h <186:14 186:19>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> bool [b2DynamicTree.h <188:5 188:8>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2TreeNode::child1 [b2DynamicTree.h <196:22 196:27>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2TreeNode::child2 [b2DynamicTree.h <197:22 197:27>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <206:2 206:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <207:2 207:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <208:2 208:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <213:2 213:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <214:2 214:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <224:3 224:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <249:3 249:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <250:3 250:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <276:5 276:10>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2DynamicTree.h <206:20 206:21>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2DynamicTree.h <207:20 207:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <206:20 206:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <260:13 260:14>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <260:24 260:25>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <207:20 207:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <261:13 261:14>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <261:24 261:25>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <208:16 208:16>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <224:37 224:37>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:42 251:42>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <276:39 276:39>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Vec2::LengthSquared() const [b2DynamicTree.h <209:13 209:25>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.h <209:2 209:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> unsigned int [b2DynamicTree.h <209:2 209:9>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Vec2::Normalize() [b2DynamicTree.h <210:4 210:12>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Cross(float32, const b2Vec2 &) [b2DynamicTree.h <213:13 213:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Abs(const b2Vec2 &) [b2DynamicTree.h <214:17 214:21>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <219:2 219:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <251:3 251:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <264:4 264:10>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2RayCastInput::maxFraction [b2DynamicTree.h <219:30 219:40>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2RayCastInput::maxFraction [b2DynamicTree.h <262:13 262:23>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB [b2DynamicTree.h <222:2 222:7>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2AABB::b2AABB() [b2DynamicTree.h <222:9 222:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <224:17 224:17>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <276:19 276:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2DynamicTree.h <224:31 224:31>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2DynamicTree.h <276:33 276:33>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <225:26 225:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <226:26 226:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <277:28 277:28>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <278:28 278:28>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.h <225:15 225:24>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.h <277:17 277:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <225:28 225:32>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <277:30 277:34>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::upperBound [b2DynamicTree.h <226:15 226:24>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::upperBound [b2DynamicTree.h <278:17 278:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <226:28 226:32>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <278:30 278:34>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2GrowableStack<int, 256> [b2DynamicTree.h <229:2 229:16>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 [b2DynamicTree.h <229:18 229:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 [b2DynamicTree.h <234:3 234:7>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::b2GrowableStack() [b2DynamicTree.h <229:30 229:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <230:8 230:11>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <283:10 283:13>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <284:10 284:13>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2DynamicTree::m_root [b2DynamicTree.h <230:13 230:18>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2GrowableStack<int, 256>::GetCount() [b2DynamicTree.h <232:15 232:22>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int b2GrowableStack<int, 256>::Pop() [b2DynamicTree.h <234:24 234:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2TreeNode [b2DynamicTree.h <240:9 240:18>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <240:28 240:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2DynamicTree.h <242:7 242:19>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <242:27 242:30>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <249:20 249:23>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <250:20 250:23>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::GetCenter() const [b2DynamicTree.h <249:25 249:33>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::GetExtents() const [b2DynamicTree.h <250:25 250:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float b2Abs<float>(float) [b2DynamicTree.h <251:24 251:28>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:30 251:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:50 251:54>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.h <257:13 257:18>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2RayCastInput::b2RayCastInput() [b2DynamicTree.h <259:19 259:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2DynamicTree.h <260:16 260:16>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2DynamicTree.h <261:16 261:16>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2TreeNode::child1 [b2DynamicTree.h <283:21 283:26>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2TreeNode::child2 [b2DynamicTree.h <284:21 284:26>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <24:2 24:7>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <26:2 26:15>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <28:33 28:46>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <29:21 29:34>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <32:24 32:37>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <37:10 37:23>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <38:10 38:23>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2DynamicTree::m_nodeCount [b2DynamicTree.cpp <27:2 27:12>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <28:2 28:8>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <29:9 29:15>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <34:3 34:9>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <35:3 35:9>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <37:2 37:8>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <38:2 38:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::b2DynamicTree() -> b2TreeNode [b2DynamicTree.cpp <28:13 28:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::b2DynamicTree() -> b2TreeNode [b2DynamicTree.cpp <28:57 28:66>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::b2DynamicTree() -> b2TreeNode [b2DynamicTree.cpp <29:45 29:54>]
REFERENCE_CALL: void b2DynamicTree::b2DynamicTree() -> void * b2Alloc(int32) [b2DynamicTree.cpp <28:25 28:31>]
REFERENCE_CALL: void b2DynamicTree::b2DynamicTree() -> void * memset(void *, int, size_t) [b2DynamicTree.cpp <29:2 29:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 [b2DynamicTree.cpp <32:7 32:11>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next [b2DynamicTree.cpp <34:14 34:17>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next [b2DynamicTree.cpp <37:28 37:31>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <34:14 34:17>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <37:28 37:31>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2TreeNode::height [b2DynamicTree.cpp <35:14 35:19>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2TreeNode::height [b2DynamicTree.cpp <38:28 38:33>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2DynamicTree::m_freeList [b2DynamicTree.cpp <39:2 39:11>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> uint32 b2DynamicTree::m_path [b2DynamicTree.cpp <41:2 41:7>]
REFERENCE_USAGE: void b2DynamicTree::b2DynamicTree() -> int32 b2DynamicTree::m_insertionCount [b2DynamicTree.cpp <43:2 43:17>]
REFERENCE_CALL: void b2DynamicTree::~b2DynamicTree() -> void b2Free(void *) [b2DynamicTree.cpp <49:2 49:7>]
REFERENCE_USAGE: void b2DynamicTree::~b2DynamicTree() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <49:9 49:15>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_freeList [b2DynamicTree.cpp <56:6 56:15>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_freeList [b2DynamicTree.cpp <76:3 76:12>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_freeList [b2DynamicTree.cpp <80:17 80:26>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_freeList [b2DynamicTree.cpp <81:2 81:11>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> void [b2DynamicTree.cpp <58:3 58:10>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_nodeCount [b2DynamicTree.cpp <58:12 58:22>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_nodeCount [b2DynamicTree.cpp <64:29 64:39>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_nodeCount [b2DynamicTree.cpp <69:18 69:28>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_nodeCount [b2DynamicTree.cpp <76:16 76:26>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_nodeCount [b2DynamicTree.cpp <87:4 87:14>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <58:27 58:40>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <62:3 62:16>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <63:34 63:47>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <69:35 69:48>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <74:11 74:24>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <75:11 75:24>]
REFERENCE_CALL: int32 b2DynamicTree::AllocateNode() -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <58:3 58:10>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> unsigned int [b2DynamicTree.cpp <58:3 58:10>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode [b2DynamicTree.cpp <61:3 61:12>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode [b2DynamicTree.cpp <63:14 63:23>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode [b2DynamicTree.cpp <63:58 63:67>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode [b2DynamicTree.cpp <64:50 64:59>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <61:26 61:32>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <63:3 63:9>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <64:10 64:16>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <71:4 71:10>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <72:4 72:10>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <74:3 74:9>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <75:3 75:9>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <81:15 81:21>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <82:2 82:8>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <83:2 83:8>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <84:2 84:8>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <85:2 85:8>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <86:2 86:8>]
REFERENCE_CALL: int32 b2DynamicTree::AllocateNode() -> void * b2Alloc(int32) [b2DynamicTree.cpp <63:26 63:32>]
REFERENCE_CALL: int32 b2DynamicTree::AllocateNode() -> void * memcpy(void *, const void *, size_t) [b2DynamicTree.cpp <64:3 64:8>]
REFERENCE_CALL: int32 b2DynamicTree::AllocateNode() -> void b2Free(void *) [b2DynamicTree.cpp <65:3 65:8>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next [b2DynamicTree.cpp <71:15 71:18>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next [b2DynamicTree.cpp <74:29 74:32>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next [b2DynamicTree.cpp <81:31 81:34>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <71:15 71:18>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <74:29 74:32>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <81:31 81:34>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <82:18 82:23>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2TreeNode::height [b2DynamicTree.cpp <72:15 72:20>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2TreeNode::height [b2DynamicTree.cpp <75:29 75:34>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2TreeNode::height [b2DynamicTree.cpp <85:18 85:23>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <82:18 82:23>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <83:18 83:23>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <84:18 84:23>]
REFERENCE_USAGE: int32 b2DynamicTree::AllocateNode() -> void * b2TreeNode::userData [b2DynamicTree.cpp <86:18 86:25>]
REFERENCE_USAGE: void b2DynamicTree::FreeNode(int32) -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <94:35 94:48>]
REFERENCE_CALL: void b2DynamicTree::FreeNode(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <94:2 94:9>]
REFERENCE_CALL: void b2DynamicTree::FreeNode(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <95:2 95:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> unsigned int [b2DynamicTree.cpp <94:2 94:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> unsigned int [b2DynamicTree.cpp <95:2 95:9>]
REFERENCE_USAGE: void b2DynamicTree::FreeNode(int32) -> int32 b2DynamicTree::m_nodeCount [b2DynamicTree.cpp <95:15 95:25>]
REFERENCE_USAGE: void b2DynamicTree::FreeNode(int32) -> int32 b2DynamicTree::m_nodeCount [b2DynamicTree.cpp <99:4 99:14>]
REFERENCE_USAGE: void b2DynamicTree::FreeNode(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next [b2DynamicTree.cpp <96:18 96:21>]
REFERENCE_USAGE: void b2DynamicTree::FreeNode(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <96:18 96:21>]
REFERENCE_USAGE: void b2DynamicTree::FreeNode(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <96:2 96:8>]
REFERENCE_USAGE: void b2DynamicTree::FreeNode(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <97:2 97:8>]
REFERENCE_USAGE: void b2DynamicTree::FreeNode(int32) -> int32 b2DynamicTree::m_freeList [b2DynamicTree.cpp <96:25 96:34>]
REFERENCE_USAGE: void b2DynamicTree::FreeNode(int32) -> int32 b2DynamicTree::m_freeList [b2DynamicTree.cpp <98:2 98:11>]
REFERENCE_USAGE: void b2DynamicTree::FreeNode(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <97:18 97:23>]
REFERENCE_CALL: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> int32 b2DynamicTree::AllocateNode() [b2DynamicTree.cpp <107:18 107:29>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2Vec2 [b2DynamicTree.cpp <110:2 110:7>]
REFERENCE_CALL: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> void b2Vec2::b2Vec2(float32, float32) [b2DynamicTree.cpp <110:9 110:9>]
REFERENCE_CALL: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.cpp <111:35 111:35>]
REFERENCE_CALL: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.cpp <112:35 112:35>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.cpp <111:24 111:33>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.cpp <111:42 111:51>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <111:19 111:22>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <112:19 112:22>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <111:2 111:8>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <112:2 112:8>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <113:2 113:8>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <114:2 114:8>]
REFERENCE_CALL: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.cpp <111:53 111:53>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2Vec2 b2AABB::upperBound [b2DynamicTree.cpp <112:24 112:33>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2Vec2 b2AABB::upperBound [b2DynamicTree.cpp <112:42 112:51>]
REFERENCE_CALL: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.cpp <112:53 112:53>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> void * b2TreeNode::userData [b2DynamicTree.cpp <113:19 113:26>]
REFERENCE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> int32 b2TreeNode::height [b2DynamicTree.cpp <114:19 114:24>]
REFERENCE_CALL: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> void b2DynamicTree::InsertLeaf(int32) [b2DynamicTree.cpp <116:2 116:11>]
REFERENCE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <123:37 123:50>]
REFERENCE_CALL: void b2DynamicTree::DestroyProxy(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <123:2 123:9>]
REFERENCE_CALL: void b2DynamicTree::DestroyProxy(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <124:2 124:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> unsigned int [b2DynamicTree.cpp <123:2 123:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> unsigned int [b2DynamicTree.cpp <124:2 124:9>]
REFERENCE_CALL: void b2DynamicTree::DestroyProxy(int32) -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.cpp <124:28 124:33>]
REFERENCE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <124:11 124:17>]
REFERENCE_CALL: void b2DynamicTree::DestroyProxy(int32) -> void b2DynamicTree::RemoveLeaf(int32) [b2DynamicTree.cpp <126:2 126:11>]
REFERENCE_CALL: void b2DynamicTree::DestroyProxy(int32) -> void b2DynamicTree::FreeNode(int32) [b2DynamicTree.cpp <127:2 127:9>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> void [b2DynamicTree.cpp <132:2 132:9>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> void [b2DynamicTree.cpp <134:2 134:9>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <132:37 132:50>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <132:2 132:9>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <134:2 134:9>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> unsigned int [b2DynamicTree.cpp <132:2 132:9>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> unsigned int [b2DynamicTree.cpp <134:2 134:9>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.cpp <134:28 134:33>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <134:11 134:17>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <136:6 136:12>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <170:2 170:8>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> bool b2AABB::Contains(const b2AABB &) const [b2DynamicTree.cpp <136:28 136:35>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <136:23 136:26>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <170:19 170:22>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> void b2DynamicTree::RemoveLeaf(int32) [b2DynamicTree.cpp <141:2 141:11>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> void b2AABB::b2AABB(const b2AABB &) [b2DynamicTree.cpp <144:13 144:16>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2DynamicTree.cpp <145:9 145:9>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.cpp <146:15 146:15>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.cpp <147:15 147:15>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.cpp <146:4 146:13>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.cpp <146:19 146:28>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.cpp <154:5 154:14>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.cpp <163:5 163:14>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.cpp <146:30 146:30>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 b2AABB::upperBound [b2DynamicTree.cpp <147:4 147:13>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 b2AABB::upperBound [b2DynamicTree.cpp <147:19 147:28>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 b2AABB::upperBound [b2DynamicTree.cpp <158:5 158:14>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 b2AABB::upperBound [b2DynamicTree.cpp <167:5 167:14>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.cpp <147:30 147:30>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2DynamicTree.cpp <150:31 150:31>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> float32 b2Vec2::x [b2DynamicTree.cpp <152:8 152:8>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> float32 b2Vec2::x [b2DynamicTree.cpp <154:16 154:16>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> float32 b2Vec2::x [b2DynamicTree.cpp <154:23 154:23>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> float32 b2Vec2::x [b2DynamicTree.cpp <158:16 158:16>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> float32 b2Vec2::x [b2DynamicTree.cpp <158:23 158:23>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> float32 b2Vec2::y [b2DynamicTree.cpp <161:8 161:8>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> float32 b2Vec2::y [b2DynamicTree.cpp <163:16 163:16>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> float32 b2Vec2::y [b2DynamicTree.cpp <163:23 163:23>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> float32 b2Vec2::y [b2DynamicTree.cpp <167:16 167:16>]
REFERENCE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> float32 b2Vec2::y [b2DynamicTree.cpp <167:23 167:23>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2AABB & b2AABB::operator=(const b2AABB &) [b2DynamicTree.cpp <170:24 170:24>]
REFERENCE_CALL: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> void b2DynamicTree::InsertLeaf(int32) [b2DynamicTree.cpp <172:2 172:11>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2DynamicTree::m_insertionCount [b2DynamicTree.cpp <178:4 178:19>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <180:6 180:11>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <182:3 182:8>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <183:11 183:16>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <189:16 189:21>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <292:3 292:8>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <183:19 183:24>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <261:37 261:42>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <263:21 263:26>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <282:20 282:25>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <283:17 283:22>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <290:20 290:25>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <291:17 291:22>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <296:24 296:29>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <310:26 310:31>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <183:19 183:24>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <261:37 261:42>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <263:21 263:26>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <282:20 282:25>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <283:17 283:22>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <290:20 290:25>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <291:17 291:22>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <296:24 296:29>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <310:26 310:31>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <183:3 183:9>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <188:20 188:26>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <190:9 190:15>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <192:18 192:24>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <193:18 193:24>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <195:18 195:24>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <198:24 198:30>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <209:7 209:13>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <212:27 212:33>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <218:27 218:33>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <219:22 219:28>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <226:7 226:13>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <229:27 229:33>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <235:27 235:33>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <236:22 236:28>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <261:20 261:26>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <263:2 263:8>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <264:2 264:8>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <265:2 265:8>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <265:44 265:50>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <266:2 266:8>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <266:30 266:36>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <271:7 271:13>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <273:4 273:10>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <277:4 277:10>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <280:3 280:9>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <281:3 281:9>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <282:3 282:9>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <283:3 283:9>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <288:3 288:9>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <289:3 289:9>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <290:3 290:9>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <291:3 291:9>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <296:10 296:16>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <301:18 301:24>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <302:18 302:24>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <307:3 307:9>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <307:37 307:43>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <307:61 307:67>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <308:3 308:9>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <308:31 308:37>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <308:53 308:59>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <310:11 310:17>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB [b2DynamicTree.cpp <188:2 188:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB [b2DynamicTree.cpp <197:3 197:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB [b2DynamicTree.cpp <211:4 211:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB [b2DynamicTree.cpp <217:4 217:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB [b2DynamicTree.cpp <228:4 228:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB [b2DynamicTree.cpp <234:4 234:9>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::b2AABB(const b2AABB &) [b2DynamicTree.cpp <188:34 188:37>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <188:34 188:37>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <195:33 195:36>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <198:39 198:42>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <212:43 212:46>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <218:43 218:46>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <219:38 219:41>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <229:43 229:46>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <235:43 235:46>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <236:38 236:41>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <265:21 265:24>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <265:61 265:64>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <308:18 308:21>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <308:47 308:50>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <308:69 308:72>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.cpp <190:24 190:29>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.cpp <209:23 209:28>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.cpp <226:23 226:28>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <192:33 192:38>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <271:26 271:31>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <273:23 273:28>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <280:22 280:27>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <288:22 288:27>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <301:33 301:38>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <193:33 193:38>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <277:23 277:28>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <281:22 281:27>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <289:22 289:27>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <302:33 302:38>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> float32 [b2DynamicTree.cpp <195:3 195:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> float32 [b2DynamicTree.cpp <199:3 199:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> float32 [b2DynamicTree.cpp <202:3 202:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> float32 [b2DynamicTree.cpp <205:3 205:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> float32 [b2DynamicTree.cpp <208:3 208:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> float32 [b2DynamicTree.cpp <219:4 219:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> float32 [b2DynamicTree.cpp <220:4 220:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> float32 [b2DynamicTree.cpp <225:3 225:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> float32 [b2DynamicTree.cpp <236:4 236:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> float32 [b2DynamicTree.cpp <237:4 237:10>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> float32 b2AABB::GetPerimeter() const [b2DynamicTree.cpp <195:38 195:49>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> float32 b2AABB::GetPerimeter() const [b2DynamicTree.cpp <199:39 199:50>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> float32 b2AABB::GetPerimeter() const [b2DynamicTree.cpp <213:17 213:28>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> float32 b2AABB::GetPerimeter() const [b2DynamicTree.cpp <219:43 219:54>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> float32 b2AABB::GetPerimeter() const [b2DynamicTree.cpp <220:27 220:38>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> float32 b2AABB::GetPerimeter() const [b2DynamicTree.cpp <230:17 230:28>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> float32 b2AABB::GetPerimeter() const [b2DynamicTree.cpp <236:43 236:54>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> float32 b2AABB::GetPerimeter() const [b2DynamicTree.cpp <237:27 237:38>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::b2AABB() [b2DynamicTree.cpp <197:10 197:21>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::b2AABB() [b2DynamicTree.cpp <211:11 211:14>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::b2AABB() [b2DynamicTree.cpp <217:11 217:14>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::b2AABB() [b2DynamicTree.cpp <228:11 228:14>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::b2AABB() [b2DynamicTree.cpp <234:11 234:14>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <198:16 198:22>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <212:9 212:15>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <218:9 218:15>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <229:9 229:15>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <235:9 235:15>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <265:26 265:32>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <308:23 308:29>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> int32 b2DynamicTree::AllocateNode() [b2DynamicTree.cpp <262:20 262:31>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> void * b2TreeNode::userData [b2DynamicTree.cpp <264:21 264:28>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <266:21 266:26>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <266:47 266:52>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <307:18 307:23>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <307:53 307:58>]
REFERENCE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <307:77 307:82>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> int32 b2DynamicTree::Balance(int32) [b2DynamicTree.cpp <299:11 299:17>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <304:3 304:10>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <305:3 305:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> unsigned int [b2DynamicTree.cpp <304:3 304:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> unsigned int [b2DynamicTree.cpp <305:3 305:10>]
REFERENCE_CALL: void b2DynamicTree::InsertLeaf(int32) -> int b2Max<int>(int, int) [b2DynamicTree.cpp <307:31 307:35>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <318:14 318:19>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <320:3 320:8>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <367:3 367:8>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <324:31 324:36>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <325:38 325:43>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <347:20 347:25>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <362:27 362:32>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <368:20 368:25>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <324:31 324:36>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <325:38 325:43>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <347:20 347:25>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <362:27 362:32>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <368:20 368:25>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <324:17 324:23>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <325:22 325:28>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <327:6 327:12>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <329:13 329:19>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <333:13 333:19>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <339:7 339:13>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <341:4 341:10>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <345:4 345:10>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <347:3 347:9>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <356:19 356:25>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <357:19 357:25>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <359:4 359:10>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <359:32 359:38>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <359:54 359:60>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <360:4 360:10>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <360:38 360:44>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <360:62 360:68>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <362:12 362:18>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <368:3 368:9>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <327:22 327:27>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <333:29 333:34>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <339:28 339:33>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <341:25 341:30>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <356:34 356:39>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <329:29 329:34>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <345:25 345:30>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <357:34 357:39>]
REFERENCE_CALL: void b2DynamicTree::RemoveLeaf(int32) -> void b2DynamicTree::FreeNode(int32) [b2DynamicTree.cpp <348:3 348:10>]
REFERENCE_CALL: void b2DynamicTree::RemoveLeaf(int32) -> void b2DynamicTree::FreeNode(int32) [b2DynamicTree.cpp <369:3 369:10>]
REFERENCE_CALL: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2DynamicTree::Balance(int32) [b2DynamicTree.cpp <354:12 354:18>]
REFERENCE_CALL: void b2DynamicTree::RemoveLeaf(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <359:24 359:30>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <359:19 359:22>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <359:48 359:51>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <359:70 359:73>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <360:19 360:24>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <360:54 360:59>]
REFERENCE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <360:78 360:83>]
REFERENCE_CALL: void b2DynamicTree::RemoveLeaf(int32) -> int b2Max<int>(int, int) [b2DynamicTree.cpp <360:32 360:36>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> void [b2DynamicTree.cpp <379:2 379:9>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> void [b2DynamicTree.cpp <389:2 389:9>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> void [b2DynamicTree.cpp <390:2 390:9>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> void [b2DynamicTree.cpp <404:3 404:10>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> void [b2DynamicTree.cpp <405:3 405:10>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> void [b2DynamicTree.cpp <421:5 421:12>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> void [b2DynamicTree.cpp <464:3 464:10>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> void [b2DynamicTree.cpp <465:3 465:10>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> void [b2DynamicTree.cpp <481:5 481:12>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <379:2 379:9>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <389:2 389:9>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <390:2 390:9>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <404:3 404:10>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <405:3 405:10>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <421:5 421:12>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <464:3 464:10>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <465:3 465:10>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <481:5 481:12>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> unsigned int [b2DynamicTree.cpp <379:2 379:9>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> unsigned int [b2DynamicTree.cpp <389:2 389:9>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> unsigned int [b2DynamicTree.cpp <390:2 390:9>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> unsigned int [b2DynamicTree.cpp <404:3 404:10>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> unsigned int [b2DynamicTree.cpp <405:3 405:10>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> unsigned int [b2DynamicTree.cpp <421:5 421:12>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> unsigned int [b2DynamicTree.cpp <464:3 464:10>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> unsigned int [b2DynamicTree.cpp <465:3 465:10>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> unsigned int [b2DynamicTree.cpp <481:5 481:12>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode [b2DynamicTree.cpp <381:2 381:11>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode [b2DynamicTree.cpp <392:2 392:11>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode [b2DynamicTree.cpp <393:2 393:11>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode [b2DynamicTree.cpp <402:3 402:12>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode [b2DynamicTree.cpp <403:3 403:12>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode [b2DynamicTree.cpp <462:3 462:12>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode [b2DynamicTree.cpp <463:3 463:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <381:18 381:24>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <392:18 392:24>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <393:18 393:24>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <402:19 402:25>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <403:19 403:25>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <415:8 415:14>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <417:5 417:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <421:14 421:20>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <422:5 422:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <462:19 462:25>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <463:19 463:25>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <475:8 475:14>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <477:5 477:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <481:14 481:20>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <482:5 482:11>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.cpp <382:9 382:14>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <382:24 382:29>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <395:21 395:26>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <395:33 395:38>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <431:10 431:15>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <431:22 431:27>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <439:7 439:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <439:29 439:34>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <439:40 439:45>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <440:7 440:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <440:29 440:34>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <440:40 440:45>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <450:7 450:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <450:29 450:34>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <450:40 450:45>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <451:7 451:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <451:29 451:34>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <451:40 451:45>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <491:10 491:15>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <491:22 491:27>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <499:7 499:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <499:29 499:34>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <499:40 499:45>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <500:7 500:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <500:29 500:34>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <500:40 500:45>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <510:7 510:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <510:29 510:34>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <510:40 510:45>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <511:7 511:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <511:29 511:34>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::height [b2DynamicTree.cpp <511:40 511:45>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <387:16 387:21>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <400:17 400:22>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <408:6 408:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <415:27 415:32>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <417:24 417:29>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <460:17 460:22>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <468:6 468:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <475:27 475:32>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <477:24 477:29>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <494:7 494:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <505:7 505:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <388:16 388:21>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <401:17 401:22>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <421:33 421:38>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <422:24 422:29>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <433:7 433:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <434:7 434:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <444:7 444:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <445:7 445:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <461:17 461:22>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <481:33 481:38>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <482:24 482:29>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <493:7 493:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <504:7 504:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <389:27 389:40>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <390:27 390:40>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <404:28 404:41>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <405:28 405:41>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <464:28 464:41>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <465:28 465:41>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <409:6 409:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <409:18 409:23>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <410:6 410:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <413:10 413:15>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <415:19 415:24>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <417:16 417:21>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <421:25 421:30>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <422:16 422:21>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <435:7 435:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <446:7 446:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <469:6 469:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <469:18 469:23>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <470:6 470:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <473:10 473:15>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <475:19 475:24>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <477:16 477:21>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <481:25 481:30>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <482:16 482:21>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <495:7 495:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <506:7 506:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <409:6 409:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <409:18 409:23>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <410:6 410:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <413:10 413:15>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <415:19 415:24>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <417:16 417:21>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <421:25 421:30>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <422:16 422:21>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <435:7 435:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <446:7 446:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <469:6 469:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <469:18 469:23>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <470:6 470:11>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <473:10 473:15>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <475:19 475:24>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <477:16 477:21>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <481:25 481:30>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <482:16 482:21>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <495:7 495:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <506:7 506:12>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <427:4 427:9>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <487:4 487:9>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <436:12 436:18>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <437:12 437:18>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <447:12 447:18>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <448:12 448:18>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <496:12 496:18>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <497:12 497:18>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <507:12 507:18>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <508:12 508:18>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <436:7 436:10>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <436:23 436:26>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <436:32 436:35>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <437:7 437:10>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <437:23 437:26>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <437:32 437:35>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <447:7 447:10>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <447:23 447:26>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <447:32 447:35>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <448:7 448:10>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <448:23 448:26>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <448:32 448:35>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <496:7 496:10>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <496:23 496:26>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <496:32 496:35>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <497:7 497:10>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <497:23 497:26>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <497:32 497:35>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <507:7 507:10>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <507:23 507:26>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <507:32 507:35>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <508:7 508:10>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <508:23 508:26>]
REFERENCE_USAGE: int32 b2DynamicTree::Balance(int32) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <508:32 508:35>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> int b2Max<int>(int, int) [b2DynamicTree.cpp <439:20 439:24>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> int b2Max<int>(int, int) [b2DynamicTree.cpp <440:20 440:24>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> int b2Max<int>(int, int) [b2DynamicTree.cpp <450:20 450:24>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> int b2Max<int>(int, int) [b2DynamicTree.cpp <451:20 451:24>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> int b2Max<int>(int, int) [b2DynamicTree.cpp <499:20 499:24>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> int b2Max<int>(int, int) [b2DynamicTree.cpp <500:20 500:24>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> int b2Max<int>(int, int) [b2DynamicTree.cpp <510:20 510:24>]
REFERENCE_CALL: int32 b2DynamicTree::Balance(int32) -> int b2Max<int>(int, int) [b2DynamicTree.cpp <511:20 511:24>]
REFERENCE_USAGE: int32 b2DynamicTree::GetHeight() const -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <522:6 522:11>]
REFERENCE_USAGE: int32 b2DynamicTree::GetHeight() const -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <527:17 527:22>]
REFERENCE_USAGE: int32 b2DynamicTree::GetHeight() const -> int32 b2TreeNode::height [b2DynamicTree.cpp <527:25 527:30>]
REFERENCE_USAGE: int32 b2DynamicTree::GetHeight() const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <527:9 527:15>]
REFERENCE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <533:6 533:11>]
REFERENCE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <538:37 538:42>]
REFERENCE_TYPE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> b2TreeNode [b2DynamicTree.cpp <538:8 538:17>]
REFERENCE_TYPE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> b2TreeNode [b2DynamicTree.cpp <544:9 544:18>]
REFERENCE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <538:27 538:33>]
REFERENCE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <544:28 544:34>]
REFERENCE_CALL: float32 b2DynamicTree::GetAreaRatio() const -> float32 b2AABB::GetPerimeter() const [b2DynamicTree.cpp <539:32 539:43>]
REFERENCE_CALL: float32 b2DynamicTree::GetAreaRatio() const -> float32 b2AABB::GetPerimeter() const [b2DynamicTree.cpp <551:27 551:38>]
REFERENCE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <539:27 539:30>]
REFERENCE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <551:22 551:25>]
REFERENCE_TYPE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> int32 [b2DynamicTree.cpp <542:7 542:11>]
REFERENCE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <542:24 542:37>]
REFERENCE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> int32 b2TreeNode::height [b2DynamicTree.cpp <545:13 545:18>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> void [b2DynamicTree.cpp <560:2 560:9>]
REFERENCE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <560:35 560:48>]
REFERENCE_CALL: int32 b2DynamicTree::ComputeHeight(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <560:2 560:9>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> unsigned int [b2DynamicTree.cpp <560:2 560:9>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> b2TreeNode [b2DynamicTree.cpp <561:2 561:11>]
REFERENCE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <561:21 561:27>]
REFERENCE_CALL: int32 b2DynamicTree::ComputeHeight(int32) const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.cpp <563:12 563:17>]
REFERENCE_CALL: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 b2DynamicTree::ComputeHeight(int32) const [b2DynamicTree.cpp <568:18 568:30>]
REFERENCE_CALL: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 b2DynamicTree::ComputeHeight(int32) const [b2DynamicTree.cpp <569:18 569:30>]
REFERENCE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <568:38 568:43>]
REFERENCE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <569:38 569:43>]
REFERENCE_CALL: int32 b2DynamicTree::ComputeHeight(int32) const -> int b2Max<int>(int, int) [b2DynamicTree.cpp <570:13 570:17>]
REFERENCE_CALL: int32 b2DynamicTree::ComputeHeight() const -> int32 b2DynamicTree::ComputeHeight(int32) const [b2DynamicTree.cpp <575:17 575:29>]
REFERENCE_USAGE: int32 b2DynamicTree::ComputeHeight() const -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <575:31 575:36>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <586:15 586:20>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <588:27 588:32>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <607:27 607:32>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <608:27 608:32>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <588:27 588:32>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <607:27 607:32>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <608:27 608:32>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <588:12 588:18>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <591:27 591:33>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <607:11 607:17>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <608:11 608:17>]
REFERENCE_CALL: void b2DynamicTree::ValidateStructure(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <588:3 588:10>]
REFERENCE_CALL: void b2DynamicTree::ValidateStructure(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <598:3 598:10>]
REFERENCE_CALL: void b2DynamicTree::ValidateStructure(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <599:3 599:10>]
REFERENCE_CALL: void b2DynamicTree::ValidateStructure(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <600:3 600:10>]
REFERENCE_CALL: void b2DynamicTree::ValidateStructure(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <604:2 604:9>]
REFERENCE_CALL: void b2DynamicTree::ValidateStructure(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <605:2 605:9>]
REFERENCE_CALL: void b2DynamicTree::ValidateStructure(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <607:2 607:9>]
REFERENCE_CALL: void b2DynamicTree::ValidateStructure(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <608:2 608:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> unsigned int [b2DynamicTree.cpp <588:3 588:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> unsigned int [b2DynamicTree.cpp <598:3 598:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> unsigned int [b2DynamicTree.cpp <599:3 599:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> unsigned int [b2DynamicTree.cpp <600:3 600:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> unsigned int [b2DynamicTree.cpp <604:2 604:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> unsigned int [b2DynamicTree.cpp <605:2 605:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> unsigned int [b2DynamicTree.cpp <607:2 607:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> unsigned int [b2DynamicTree.cpp <608:2 608:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> b2TreeNode [b2DynamicTree.cpp <591:8 591:17>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <593:23 593:28>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <594:23 594:28>]
REFERENCE_CALL: void b2DynamicTree::ValidateStructure(int32) const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.cpp <596:12 596:17>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 b2TreeNode::height [b2DynamicTree.cpp <600:18 600:23>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <604:35 604:48>]
REFERENCE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <605:35 605:48>]
REFERENCE_CALL: void b2DynamicTree::ValidateStructure(int32) const -> void b2DynamicTree::ValidateStructure(int32) const [b2DynamicTree.cpp <610:2 610:18>]
REFERENCE_CALL: void b2DynamicTree::ValidateStructure(int32) const -> void b2DynamicTree::ValidateStructure(int32) const [b2DynamicTree.cpp <611:2 611:18>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2TreeNode [b2DynamicTree.cpp <621:8 621:17>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <621:27 621:33>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <637:18 637:24>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <638:18 638:24>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <644:15 644:21>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <644:37 644:43>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <623:23 623:28>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <624:23 624:28>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.cpp <626:12 626:17>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <628:3 628:10>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <629:3 629:10>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <630:3 630:10>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <634:2 634:9>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <635:2 635:9>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <641:2 641:9>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <646:2 646:9>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <647:2 647:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> unsigned int [b2DynamicTree.cpp <628:3 628:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> unsigned int [b2DynamicTree.cpp <629:3 629:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> unsigned int [b2DynamicTree.cpp <630:3 630:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> unsigned int [b2DynamicTree.cpp <634:2 634:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> unsigned int [b2DynamicTree.cpp <635:2 635:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> unsigned int [b2DynamicTree.cpp <641:2 641:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> unsigned int [b2DynamicTree.cpp <646:2 646:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> unsigned int [b2DynamicTree.cpp <647:2 647:9>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 b2TreeNode::height [b2DynamicTree.cpp <630:18 630:23>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 b2TreeNode::height [b2DynamicTree.cpp <637:34 637:39>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 b2TreeNode::height [b2DynamicTree.cpp <638:34 638:39>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 b2TreeNode::height [b2DynamicTree.cpp <641:17 641:22>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <634:35 634:48>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <635:35 635:48>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> int b2Max<int>(int, int) [b2DynamicTree.cpp <640:15 640:19>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2AABB [b2DynamicTree.cpp <643:2 643:7>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void b2AABB::b2AABB() [b2DynamicTree.cpp <643:9 643:12>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <644:7 644:13>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <644:31 644:34>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <644:53 644:56>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <646:36 646:39>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <647:36 647:39>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> bool operator==(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.cpp <646:27 646:28>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> bool operator==(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.cpp <647:27 647:28>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.cpp <646:16 646:25>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.cpp <646:41 646:50>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2Vec2 b2AABB::upperBound [b2DynamicTree.cpp <647:16 647:25>]
REFERENCE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> b2Vec2 b2AABB::upperBound [b2DynamicTree.cpp <647:41 647:50>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void b2DynamicTree::ValidateMetrics(int32) const [b2DynamicTree.cpp <649:2 649:16>]
REFERENCE_CALL: void b2DynamicTree::ValidateMetrics(int32) const -> void b2DynamicTree::ValidateMetrics(int32) const [b2DynamicTree.cpp <650:2 650:16>]
REFERENCE_CALL: void b2DynamicTree::Validate() const -> void b2DynamicTree::ValidateStructure(int32) const [b2DynamicTree.cpp <656:2 656:18>]
REFERENCE_USAGE: void b2DynamicTree::Validate() const -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <656:20 656:25>]
REFERENCE_USAGE: void b2DynamicTree::Validate() const -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <657:18 657:23>]
REFERENCE_CALL: void b2DynamicTree::Validate() const -> void b2DynamicTree::ValidateMetrics(int32) const [b2DynamicTree.cpp <657:2 657:16>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> int32 [b2DynamicTree.cpp <659:2 659:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> int32 [b2DynamicTree.cpp <660:2 660:6>]
REFERENCE_USAGE: void b2DynamicTree::Validate() const -> int32 b2DynamicTree::m_freeList [b2DynamicTree.cpp <660:20 660:29>]
REFERENCE_USAGE: void b2DynamicTree::Validate() const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <663:42 663:55>]
REFERENCE_USAGE: void b2DynamicTree::Validate() const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <670:38 670:51>]
REFERENCE_CALL: void b2DynamicTree::Validate() const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <663:3 663:10>]
REFERENCE_CALL: void b2DynamicTree::Validate() const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <668:2 668:9>]
REFERENCE_CALL: void b2DynamicTree::Validate() const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <670:2 670:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> unsigned int [b2DynamicTree.cpp <663:3 663:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> unsigned int [b2DynamicTree.cpp <668:2 668:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> unsigned int [b2DynamicTree.cpp <670:2 670:9>]
REFERENCE_USAGE: void b2DynamicTree::Validate() const -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next [b2DynamicTree.cpp <664:34 664:37>]
REFERENCE_USAGE: void b2DynamicTree::Validate() const -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <664:34 664:37>]
REFERENCE_USAGE: void b2DynamicTree::Validate() const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <664:15 664:21>]
REFERENCE_CALL: void b2DynamicTree::Validate() const -> int32 b2DynamicTree::GetHeight() const [b2DynamicTree.cpp <668:11 668:19>]
REFERENCE_CALL: void b2DynamicTree::Validate() const -> int32 b2DynamicTree::ComputeHeight() const [b2DynamicTree.cpp <668:26 668:38>]
REFERENCE_USAGE: void b2DynamicTree::Validate() const -> int32 b2DynamicTree::m_nodeCount [b2DynamicTree.cpp <670:11 670:21>]
REFERENCE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <677:24 677:37>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> b2TreeNode [b2DynamicTree.cpp <679:9 679:18>]
REFERENCE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <679:28 679:34>]
REFERENCE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <689:25 689:31>]
REFERENCE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <689:50 689:56>]
REFERENCE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 b2TreeNode::height [b2DynamicTree.cpp <680:13 680:18>]
REFERENCE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 b2TreeNode::height [b2DynamicTree.cpp <689:41 689:46>]
REFERENCE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 b2TreeNode::height [b2DynamicTree.cpp <689:66 689:71>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> void [b2DynamicTree.cpp <685:3 685:10>]
REFERENCE_CALL: int32 b2DynamicTree::GetMaxBalance() const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.cpp <685:18 685:23>]
REFERENCE_CALL: int32 b2DynamicTree::GetMaxBalance() const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.cpp <685:3 685:10>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> unsigned int [b2DynamicTree.cpp <685:3 685:10>]
REFERENCE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <687:24 687:29>]
REFERENCE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <688:24 688:29>]
REFERENCE_CALL: int32 b2DynamicTree::GetMaxBalance() const -> int b2Abs<int>(int) [b2DynamicTree.cpp <689:19 689:23>]
REFERENCE_CALL: int32 b2DynamicTree::GetMaxBalance() const -> int b2Max<int>(int, int) [b2DynamicTree.cpp <690:16 690:20>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 [b2DynamicTree.cpp <698:2 698:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 [b2DynamicTree.cpp <698:18 698:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 [b2DynamicTree.cpp <698:54 698:58>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 [b2DynamicTree.cpp <699:2 699:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 [b2DynamicTree.cpp <702:7 702:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 [b2DynamicTree.cpp <725:3 725:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 [b2DynamicTree.cpp <726:8 726:12>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 [b2DynamicTree.cpp <730:9 730:13>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 [b2DynamicTree.cpp <745:3 745:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 [b2DynamicTree.cpp <746:3 746:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 [b2DynamicTree.cpp <750:3 750:7>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> void * b2Alloc(int32) [b2DynamicTree.cpp <698:25 698:31>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2DynamicTree::m_nodeCount [b2DynamicTree.cpp <698:33 698:43>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <702:24 702:37>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2TreeNode::height [b2DynamicTree.cpp <704:18 704:23>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2TreeNode::height [b2DynamicTree.cpp <754:11 754:16>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2TreeNode::height [b2DynamicTree.cpp <754:38 754:43>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2TreeNode::height [b2DynamicTree.cpp <754:54 754:59>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <704:7 704:13>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <710:7 710:13>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <712:4 712:10>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <728:19 728:25>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <732:20 732:26>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <747:24 747:30>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <748:24 748:30>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <751:24 751:30>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.cpp <710:18 710:23>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <712:15 712:20>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <756:11 756:16>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <758:11 758:16>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.cpp <759:11 759:16>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <712:15 712:20>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <756:11 756:16>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <758:11 758:16>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.cpp <759:11 759:16>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> void b2DynamicTree::FreeNode(int32) [b2DynamicTree.cpp <718:4 718:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> float32 [b2DynamicTree.cpp <724:3 724:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> float32 [b2DynamicTree.cpp <735:5 735:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2AABB [b2DynamicTree.cpp <728:4 728:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2AABB [b2DynamicTree.cpp <732:5 732:10>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2AABB [b2DynamicTree.cpp <733:5 733:10>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> void b2AABB::b2AABB(const b2AABB &) [b2DynamicTree.cpp <728:37 728:40>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> void b2AABB::b2AABB(const b2AABB &) [b2DynamicTree.cpp <732:38 732:41>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <728:37 728:40>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <732:38 732:41>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <755:11 755:14>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <755:32 755:35>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <755:46 755:49>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> void b2AABB::b2AABB() [b2DynamicTree.cpp <733:12 733:12>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <734:7 734:13>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2DynamicTree.cpp <755:16 755:22>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> float32 b2AABB::GetPerimeter() const [b2DynamicTree.cpp <735:22 735:33>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode [b2DynamicTree.cpp <747:3 747:12>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode [b2DynamicTree.cpp <748:3 748:12>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> b2TreeNode [b2DynamicTree.cpp <751:3 751:12>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> int32 b2DynamicTree::AllocateNode() [b2DynamicTree.cpp <750:23 750:34>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2TreeNode::child1 [b2DynamicTree.cpp <752:11 752:16>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2TreeNode::child2 [b2DynamicTree.cpp <753:11 753:16>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> int b2Max<int>(int, int) [b2DynamicTree.cpp <754:24 754:28>]
REFERENCE_USAGE: void b2DynamicTree::RebuildBottomUp() -> int32 b2DynamicTree::m_root [b2DynamicTree.cpp <766:2 766:7>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> void b2Free(void *) [b2DynamicTree.cpp <767:2 767:7>]
REFERENCE_CALL: void b2DynamicTree::RebuildBottomUp() -> void b2DynamicTree::Validate() const [b2DynamicTree.cpp <769:2 769:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> int32 [b2DynamicTree.cpp <775:7 775:11>]
REFERENCE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.cpp <775:24 775:37>]
REFERENCE_CALL: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> void b2Vec2::operator-=(const b2Vec2 &) [b2DynamicTree.cpp <777:30 777:31>]
REFERENCE_CALL: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> void b2Vec2::operator-=(const b2Vec2 &) [b2DynamicTree.cpp <778:30 778:31>]
REFERENCE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.cpp <777:19 777:28>]
REFERENCE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <777:14 777:17>]
REFERENCE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> b2AABB b2TreeNode::aabb [b2DynamicTree.cpp <778:14 778:17>]
REFERENCE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <777:3 777:9>]
REFERENCE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.cpp <778:3 778:9>]
REFERENCE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> b2Vec2 b2AABB::upperBound [b2DynamicTree.cpp <778:19 778:28>]
LOCAL_SYMBOL: b2Collision.h<111:1> [b2Collision.h <111:1 111:1>]
LOCAL_SYMBOL: b2Collision.h<111:1> [b2Collision.h <123:1 123:1>]
LOCAL_SYMBOL: b2Collision.h<116:36> [b2Collision.h <116:36 116:43>]
LOCAL_SYMBOL: b2Collision.h<117:25> [b2Collision.h <117:25 117:27>]
LOCAL_SYMBOL: b2Collision.h<117:38> [b2Collision.h <117:38 117:44>]
LOCAL_SYMBOL: b2Collision.h<118:25> [b2Collision.h <118:25 118:27>]
LOCAL_SYMBOL: b2Collision.h<118:38> [b2Collision.h <118:38 118:44>]
LOCAL_SYMBOL: b2Collision.h<127:1> [b2Collision.h <127:1 127:1>]
LOCAL_SYMBOL: b2Collision.h<127:1> [b2Collision.h <132:1 132:1>]
LOCAL_SYMBOL: b2Collision.h<136:36> [b2Collision.h <136:36 136:41>]
LOCAL_SYMBOL: b2Collision.h<136:79> [b2Collision.h <136:79 136:84>]
LOCAL_SYMBOL: b2Collision.h<137:26> [b2Collision.h <137:26 137:34>]
LOCAL_SYMBOL: b2Collision.h<137:55> [b2Collision.h <137:55 137:63>]
LOCAL_SYMBOL: b2Collision.h<141:1> [b2Collision.h <141:1 141:1>]
LOCAL_SYMBOL: b2Collision.h<141:1> [b2Collision.h <144:1 144:1>]
LOCAL_SYMBOL: b2Collision.h<148:1> [b2Collision.h <148:1 148:1>]
LOCAL_SYMBOL: b2Collision.h<148:1> [b2Collision.h <151:1 151:1>]
LOCAL_SYMBOL: b2Collision.h<156:1> [b2Collision.h <156:1 156:1>]
LOCAL_SYMBOL: b2Collision.h<156:1> [b2Collision.h <159:1 159:1>]
LOCAL_SYMBOL: b2Collision.h<163:1> [b2Collision.h <163:1 163:1>]
LOCAL_SYMBOL: b2Collision.h<163:1> [b2Collision.h <216:1 216:1>]
LOCAL_SYMBOL: b2Collision.h<169:2> [b2Collision.h <169:2 169:2>]
LOCAL_SYMBOL: b2Collision.h<169:2> [b2Collision.h <171:2 171:2>]
LOCAL_SYMBOL: b2Collision.h<175:2> [b2Collision.h <175:2 175:2>]
LOCAL_SYMBOL: b2Collision.h<175:2> [b2Collision.h <177:2 177:2>]
LOCAL_SYMBOL: b2Collision.h<181:2> [b2Collision.h <181:2 181:2>]
LOCAL_SYMBOL: b2Collision.h<181:2> [b2Collision.h <185:2 185:2>]
LOCAL_SYMBOL: b2Collision.h<182:11> [b2Collision.h <182:11 182:12>]
LOCAL_SYMBOL: b2Collision.h<182:11> [b2Collision.h <184:18 184:19>]
LOCAL_SYMBOL: b2Collision.h<183:11> [b2Collision.h <183:11 183:12>]
LOCAL_SYMBOL: b2Collision.h<183:11> [b2Collision.h <184:23 184:24>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <188:29 188:32>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <190:34 190:37>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <191:34 191:37>]
LOCAL_SYMBOL: b2Collision.h<189:2> [b2Collision.h <189:2 189:2>]
LOCAL_SYMBOL: b2Collision.h<189:2> [b2Collision.h <192:2 192:2>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <195:29 195:33>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <197:22 197:26>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <198:22 198:26>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <195:50 195:54>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <197:40 197:44>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <198:40 198:44>]
LOCAL_SYMBOL: b2Collision.h<196:2> [b2Collision.h <196:2 196:2>]
LOCAL_SYMBOL: b2Collision.h<196:2> [b2Collision.h <199:2 199:2>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <202:30 202:33>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <205:38 205:41>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <206:38 206:41>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <207:22 207:25>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <208:22 208:25>]
LOCAL_SYMBOL: b2Collision.h<203:2> [b2Collision.h <203:2 203:2>]
LOCAL_SYMBOL: b2Collision.h<203:2> [b2Collision.h <210:2 210:2>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <204:8 204:13>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <205:3 205:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <205:12 205:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <206:3 206:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <206:12 206:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <207:3 207:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <207:12 207:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <208:3 208:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <208:12 208:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <209:10 209:15>]
LOCAL_SYMBOL: b2Collision.h<212:32> [b2Collision.h <212:32 212:37>]
LOCAL_SYMBOL: b2Collision.h<212:62> [b2Collision.h <212:62 212:66>]
LOCAL_SYMBOL: b2Collision.h<219:35> [b2Collision.h <219:35 219:42>]
LOCAL_SYMBOL: b2Collision.h<220:29> [b2Collision.h <220:29 220:35>]
LOCAL_SYMBOL: b2Collision.h<220:57> [b2Collision.h <220:57 220:59>]
LOCAL_SYMBOL: b2Collision.h<221:29> [b2Collision.h <221:29 221:35>]
LOCAL_SYMBOL: b2Collision.h<221:57> [b2Collision.h <221:57 221:59>]
LOCAL_SYMBOL: b2Collision.h<224:44> [b2Collision.h <224:44 224:51>]
LOCAL_SYMBOL: b2Collision.h<225:33> [b2Collision.h <225:33 225:40>]
LOCAL_SYMBOL: b2Collision.h<225:62> [b2Collision.h <225:62 225:64>]
LOCAL_SYMBOL: b2Collision.h<226:32> [b2Collision.h <226:32 226:38>]
LOCAL_SYMBOL: b2Collision.h<226:60> [b2Collision.h <226:60 226:62>]
LOCAL_SYMBOL: b2Collision.h<229:36> [b2Collision.h <229:36 229:43>]
LOCAL_SYMBOL: b2Collision.h<230:31> [b2Collision.h <230:31 230:38>]
LOCAL_SYMBOL: b2Collision.h<230:60> [b2Collision.h <230:60 230:62>]
LOCAL_SYMBOL: b2Collision.h<231:31> [b2Collision.h <231:31 231:38>]
LOCAL_SYMBOL: b2Collision.h<231:60> [b2Collision.h <231:60 231:62>]
LOCAL_SYMBOL: b2Collision.h<234:41> [b2Collision.h <234:41 234:48>]
LOCAL_SYMBOL: b2Collision.h<235:30> [b2Collision.h <235:30 235:37>]
LOCAL_SYMBOL: b2Collision.h<235:59> [b2Collision.h <235:59 235:61>]
LOCAL_SYMBOL: b2Collision.h<236:32> [b2Collision.h <236:32 236:38>]
LOCAL_SYMBOL: b2Collision.h<236:60> [b2Collision.h <236:60 236:62>]
LOCAL_SYMBOL: b2Collision.h<239:42> [b2Collision.h <239:42 239:49>]
LOCAL_SYMBOL: b2Collision.h<240:30> [b2Collision.h <240:30 240:34>]
LOCAL_SYMBOL: b2Collision.h<240:56> [b2Collision.h <240:56 240:58>]
LOCAL_SYMBOL: b2Collision.h<241:33> [b2Collision.h <241:33 241:39>]
LOCAL_SYMBOL: b2Collision.h<241:61> [b2Collision.h <241:61 241:63>]
LOCAL_SYMBOL: b2Collision.h<244:40> [b2Collision.h <244:40 244:43>]
LOCAL_SYMBOL: b2Collision.h<244:68> [b2Collision.h <244:68 244:70>]
LOCAL_SYMBOL: b2Collision.h<245:22> [b2Collision.h <245:22 245:27>]
LOCAL_SYMBOL: b2Collision.h<245:38> [b2Collision.h <245:38 245:43>]
LOCAL_SYMBOL: b2Collision.h<245:52> [b2Collision.h <245:52 245:63>]
LOCAL_SYMBOL: b2Collision.h<248:36> [b2Collision.h <248:36 248:41>]
LOCAL_SYMBOL: b2Collision.h<248:50> [b2Collision.h <248:50 248:55>]
LOCAL_SYMBOL: b2Collision.h<249:21> [b2Collision.h <249:21 249:26>]
LOCAL_SYMBOL: b2Collision.h<249:35> [b2Collision.h <249:35 249:40>]
LOCAL_SYMBOL: b2Collision.h<250:25> [b2Collision.h <250:25 250:27>]
LOCAL_SYMBOL: b2Collision.h<250:49> [b2Collision.h <250:49 250:51>]
LOCAL_SYMBOL: b2Collision.h<255:1> [b2Collision.h <255:1 255:1>]
LOCAL_SYMBOL: b2Collision.h<255:1> [b2Collision.h <260:1 260:1>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <256:9 256:9>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <257:15 257:15>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <257:30 257:30>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <257:7 257:11>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <258:2 258:6>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <258:10 258:14>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <259:9 259:13>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <262:41 262:41>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <265:22 265:22>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <266:7 266:7>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <262:58 262:58>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <265:7 265:7>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <266:22 266:22>]
LOCAL_SYMBOL: b2Collision.h<263:1> [b2Collision.h <263:1 263:1>]
LOCAL_SYMBOL: b2Collision.h<263:1> [b2Collision.h <275:1 275:1>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <264:13 264:14>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <266:2 266:3>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <271:6 271:7>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <271:21 271:22>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <264:9 264:10>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <265:2 265:3>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <268:6 268:7>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <268:21 268:22>]
LOCAL_SYMBOL: b2Collision.h<39:1> [b2Collision.h <39:1 39:1>]
LOCAL_SYMBOL: b2Collision.h<39:1> [b2Collision.h <50:1 50:1>]
LOCAL_SYMBOL: b2Collision.h<41:2> [b2Collision.h <41:2 41:2>]
LOCAL_SYMBOL: b2Collision.h<41:2> [b2Collision.h <44:2 44:2>]
LOCAL_SYMBOL: b2Collision.h<54:1> [b2Collision.h <54:1 54:1>]
LOCAL_SYMBOL: b2Collision.h<54:1> [b2Collision.h <57:1 57:1>]
LOCAL_SYMBOL: b2Collision.h<70:1> [b2Collision.h <70:1 70:1>]
LOCAL_SYMBOL: b2Collision.h<70:1> [b2Collision.h <75:1 75:1>]
LOCAL_SYMBOL: b2Collision.h<94:1> [b2Collision.h <94:1 94:1>]
LOCAL_SYMBOL: b2Collision.h<94:1> [b2Collision.h <107:1 107:1>]
LOCAL_SYMBOL: b2Collision.h<96:2> [b2Collision.h <96:2 96:2>]
LOCAL_SYMBOL: b2Collision.h<96:2> [b2Collision.h <100:2 100:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<105:48> [b2DynamicTree.cpp <105:48 105:51>]
LOCAL_SYMBOL: b2DynamicTree.cpp<105:48> [b2DynamicTree.cpp <111:37 111:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<105:48> [b2DynamicTree.cpp <112:37 112:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<105:60> [b2DynamicTree.cpp <105:60 105:67>]
LOCAL_SYMBOL: b2DynamicTree.cpp<105:60> [b2DynamicTree.cpp <113:30 113:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<106:1> [b2DynamicTree.cpp <106:1 106:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<106:1> [b2DynamicTree.cpp <119:1 119:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<107:8> [b2DynamicTree.cpp <107:8 107:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<107:8> [b2DynamicTree.cpp <111:10 111:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<107:8> [b2DynamicTree.cpp <112:10 112:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<107:8> [b2DynamicTree.cpp <113:10 113:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<107:8> [b2DynamicTree.cpp <114:10 114:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<107:8> [b2DynamicTree.cpp <116:13 116:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<107:8> [b2DynamicTree.cpp <118:9 118:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<110:9> [b2DynamicTree.cpp <110:9 110:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<110:9> [b2DynamicTree.cpp <111:55 111:55>]
LOCAL_SYMBOL: b2DynamicTree.cpp<110:9> [b2DynamicTree.cpp <112:55 112:55>]
LOCAL_SYMBOL: b2DynamicTree.cpp<121:40> [b2DynamicTree.cpp <121:40 121:46>]
LOCAL_SYMBOL: b2DynamicTree.cpp<121:40> [b2DynamicTree.cpp <123:16 123:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<121:40> [b2DynamicTree.cpp <123:27 123:33>]
LOCAL_SYMBOL: b2DynamicTree.cpp<121:40> [b2DynamicTree.cpp <124:19 124:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<121:40> [b2DynamicTree.cpp <126:13 126:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<121:40> [b2DynamicTree.cpp <127:11 127:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<122:1> [b2DynamicTree.cpp <122:1 122:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<122:1> [b2DynamicTree.cpp <128:1 128:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:37> [b2DynamicTree.cpp <130:37 130:43>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:37> [b2DynamicTree.cpp <132:16 132:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:37> [b2DynamicTree.cpp <132:27 132:33>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:37> [b2DynamicTree.cpp <134:19 134:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:37> [b2DynamicTree.cpp <136:14 136:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:37> [b2DynamicTree.cpp <141:13 141:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:37> [b2DynamicTree.cpp <170:10 170:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:37> [b2DynamicTree.cpp <172:13 172:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:60> [b2DynamicTree.cpp <130:60 130:63>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:60> [b2DynamicTree.cpp <136:37 136:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:60> [b2DynamicTree.cpp <144:13 144:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:80> [b2DynamicTree.cpp <130:80 130:91>]
LOCAL_SYMBOL: b2DynamicTree.cpp<130:80> [b2DynamicTree.cpp <150:33 150:44>]
LOCAL_SYMBOL: b2DynamicTree.cpp<131:1> [b2DynamicTree.cpp <131:1 131:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<131:1> [b2DynamicTree.cpp <174:1 174:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<137:2> [b2DynamicTree.cpp <137:2 137:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<137:2> [b2DynamicTree.cpp <139:2 139:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<144:9> [b2DynamicTree.cpp <144:9 144:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<144:9> [b2DynamicTree.cpp <146:2 146:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<144:9> [b2DynamicTree.cpp <146:17 146:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<144:9> [b2DynamicTree.cpp <147:2 147:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<144:9> [b2DynamicTree.cpp <147:17 147:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<144:9> [b2DynamicTree.cpp <154:3 154:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<144:9> [b2DynamicTree.cpp <158:3 158:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<144:9> [b2DynamicTree.cpp <163:3 163:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<144:9> [b2DynamicTree.cpp <167:3 167:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<144:9> [b2DynamicTree.cpp <170:26 170:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<145:9> [b2DynamicTree.cpp <145:9 145:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<145:9> [b2DynamicTree.cpp <146:32 146:32>]
LOCAL_SYMBOL: b2DynamicTree.cpp<145:9> [b2DynamicTree.cpp <147:32 147:32>]
LOCAL_SYMBOL: b2DynamicTree.cpp<150:9> [b2DynamicTree.cpp <150:9 150:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<150:9> [b2DynamicTree.cpp <152:6 152:6>]
LOCAL_SYMBOL: b2DynamicTree.cpp<150:9> [b2DynamicTree.cpp <154:21 154:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<150:9> [b2DynamicTree.cpp <158:21 158:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<150:9> [b2DynamicTree.cpp <161:6 161:6>]
LOCAL_SYMBOL: b2DynamicTree.cpp<150:9> [b2DynamicTree.cpp <163:21 163:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<150:9> [b2DynamicTree.cpp <167:21 167:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<153:2> [b2DynamicTree.cpp <153:2 153:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<153:2> [b2DynamicTree.cpp <155:2 155:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<157:2> [b2DynamicTree.cpp <157:2 157:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<157:2> [b2DynamicTree.cpp <159:2 159:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<162:2> [b2DynamicTree.cpp <162:2 162:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<162:2> [b2DynamicTree.cpp <164:2 164:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<166:2> [b2DynamicTree.cpp <166:2 166:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<166:2> [b2DynamicTree.cpp <168:2 168:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<176:38> [b2DynamicTree.cpp <176:38 176:41>]
LOCAL_SYMBOL: b2DynamicTree.cpp<176:38> [b2DynamicTree.cpp <182:12 182:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<176:38> [b2DynamicTree.cpp <188:28 188:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<176:38> [b2DynamicTree.cpp <281:31 281:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<176:38> [b2DynamicTree.cpp <283:11 283:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<176:38> [b2DynamicTree.cpp <289:31 289:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<176:38> [b2DynamicTree.cpp <291:11 291:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<176:38> [b2DynamicTree.cpp <296:18 296:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<177:1> [b2DynamicTree.cpp <177:1 177:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<177:1> [b2DynamicTree.cpp <314:1 314:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<181:2> [b2DynamicTree.cpp <181:2 181:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<181:2> [b2DynamicTree.cpp <185:2 185:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<188:9> [b2DynamicTree.cpp <188:9 188:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<188:9> [b2DynamicTree.cpp <198:45 198:52>]
LOCAL_SYMBOL: b2DynamicTree.cpp<188:9> [b2DynamicTree.cpp <212:17 212:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<188:9> [b2DynamicTree.cpp <218:17 218:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<188:9> [b2DynamicTree.cpp <229:17 229:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<188:9> [b2DynamicTree.cpp <235:17 235:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<188:9> [b2DynamicTree.cpp <265:34 265:41>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <189:8 189:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <190:17 190:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <192:26 192:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <193:26 193:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <195:26 195:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <198:32 198:36>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <250:4 250:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <254:4 254:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <258:18 258:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <296:2 296:6>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <297:9 297:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <299:3 299:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <299:19 299:23>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <301:26 301:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <302:26 302:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <307:11 307:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <308:11 308:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <310:3 310:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<189:8> [b2DynamicTree.cpp <310:19 310:23>]
LOCAL_SYMBOL: b2DynamicTree.cpp<191:2> [b2DynamicTree.cpp <191:2 191:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<191:2> [b2DynamicTree.cpp <256:2 256:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<192:9> [b2DynamicTree.cpp <192:9 192:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<192:9> [b2DynamicTree.cpp <209:15 209:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<192:9> [b2DynamicTree.cpp <212:35 212:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<192:9> [b2DynamicTree.cpp <218:35 218:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<192:9> [b2DynamicTree.cpp <219:30 219:35>]
LOCAL_SYMBOL: b2DynamicTree.cpp<192:9> [b2DynamicTree.cpp <250:12 250:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<193:9> [b2DynamicTree.cpp <193:9 193:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<193:9> [b2DynamicTree.cpp <226:15 226:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<193:9> [b2DynamicTree.cpp <229:35 229:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<193:9> [b2DynamicTree.cpp <235:35 235:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<193:9> [b2DynamicTree.cpp <236:30 236:35>]
LOCAL_SYMBOL: b2DynamicTree.cpp<193:9> [b2DynamicTree.cpp <254:12 254:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<195:11> [b2DynamicTree.cpp <195:11 195:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<195:11> [b2DynamicTree.cpp <205:52 205:55>]
LOCAL_SYMBOL: b2DynamicTree.cpp<197:10> [b2DynamicTree.cpp <197:10 197:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<197:10> [b2DynamicTree.cpp <198:3 198:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<197:10> [b2DynamicTree.cpp <199:26 199:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<199:11> [b2DynamicTree.cpp <199:11 199:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<199:11> [b2DynamicTree.cpp <202:25 202:36>]
LOCAL_SYMBOL: b2DynamicTree.cpp<199:11> [b2DynamicTree.cpp <205:37 205:48>]
LOCAL_SYMBOL: b2DynamicTree.cpp<202:11> [b2DynamicTree.cpp <202:11 202:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<202:11> [b2DynamicTree.cpp <242:7 242:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<202:11> [b2DynamicTree.cpp <242:23 242:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<205:11> [b2DynamicTree.cpp <205:11 205:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<205:11> [b2DynamicTree.cpp <213:34 213:48>]
LOCAL_SYMBOL: b2DynamicTree.cpp<205:11> [b2DynamicTree.cpp <221:34 221:48>]
LOCAL_SYMBOL: b2DynamicTree.cpp<205:11> [b2DynamicTree.cpp <230:34 230:48>]
LOCAL_SYMBOL: b2DynamicTree.cpp<205:11> [b2DynamicTree.cpp <238:32 238:46>]
LOCAL_SYMBOL: b2DynamicTree.cpp<208:11> [b2DynamicTree.cpp <208:11 208:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<208:11> [b2DynamicTree.cpp <213:4 213:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<208:11> [b2DynamicTree.cpp <221:4 221:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<208:11> [b2DynamicTree.cpp <242:14 242:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<208:11> [b2DynamicTree.cpp <248:7 248:11>]
LOCAL_SYMBOL: b2DynamicTree.cpp<210:3> [b2DynamicTree.cpp <210:3 210:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<210:3> [b2DynamicTree.cpp <214:3 214:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<211:11> [b2DynamicTree.cpp <211:11 211:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<211:11> [b2DynamicTree.cpp <212:4 212:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<211:11> [b2DynamicTree.cpp <213:12 213:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<216:3> [b2DynamicTree.cpp <216:3 216:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<216:3> [b2DynamicTree.cpp <222:3 222:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<217:11> [b2DynamicTree.cpp <217:11 217:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<217:11> [b2DynamicTree.cpp <218:4 218:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<217:11> [b2DynamicTree.cpp <220:22 220:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<219:12> [b2DynamicTree.cpp <219:12 219:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<219:12> [b2DynamicTree.cpp <221:23 221:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<220:12> [b2DynamicTree.cpp <220:12 220:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<220:12> [b2DynamicTree.cpp <221:13 221:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<225:11> [b2DynamicTree.cpp <225:11 225:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<225:11> [b2DynamicTree.cpp <230:4 230:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<225:11> [b2DynamicTree.cpp <238:4 238:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<225:11> [b2DynamicTree.cpp <242:30 242:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<225:11> [b2DynamicTree.cpp <248:15 248:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<227:3> [b2DynamicTree.cpp <227:3 227:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<227:3> [b2DynamicTree.cpp <231:3 231:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<228:11> [b2DynamicTree.cpp <228:11 228:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<228:11> [b2DynamicTree.cpp <229:4 229:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<228:11> [b2DynamicTree.cpp <230:12 230:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<233:3> [b2DynamicTree.cpp <233:3 233:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<233:3> [b2DynamicTree.cpp <239:3 239:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<234:11> [b2DynamicTree.cpp <234:11 234:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<234:11> [b2DynamicTree.cpp <235:4 235:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<234:11> [b2DynamicTree.cpp <237:22 237:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<236:12> [b2DynamicTree.cpp <236:12 236:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<236:12> [b2DynamicTree.cpp <238:22 238:28>]
LOCAL_SYMBOL: b2DynamicTree.cpp<237:12> [b2DynamicTree.cpp <237:12 237:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<237:12> [b2DynamicTree.cpp <238:12 238:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<23:1> [b2DynamicTree.cpp <23:1 23:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<23:1> [b2DynamicTree.cpp <44:1 44:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<243:3> [b2DynamicTree.cpp <243:3 243:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<243:3> [b2DynamicTree.cpp <245:3 245:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<249:3> [b2DynamicTree.cpp <249:3 249:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<249:3> [b2DynamicTree.cpp <251:3 251:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<253:3> [b2DynamicTree.cpp <253:3 253:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<253:3> [b2DynamicTree.cpp <255:3 255:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<258:8> [b2DynamicTree.cpp <258:8 258:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<258:8> [b2DynamicTree.cpp <261:28 261:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<258:8> [b2DynamicTree.cpp <265:52 265:58>]
LOCAL_SYMBOL: b2DynamicTree.cpp<258:8> [b2DynamicTree.cpp <266:38 266:44>]
LOCAL_SYMBOL: b2DynamicTree.cpp<258:8> [b2DynamicTree.cpp <271:36 271:42>]
LOCAL_SYMBOL: b2DynamicTree.cpp<258:8> [b2DynamicTree.cpp <280:31 280:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<258:8> [b2DynamicTree.cpp <282:11 282:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<258:8> [b2DynamicTree.cpp <288:31 288:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<258:8> [b2DynamicTree.cpp <290:11 290:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<261:8> [b2DynamicTree.cpp <261:8 261:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<261:8> [b2DynamicTree.cpp <263:30 263:38>]
LOCAL_SYMBOL: b2DynamicTree.cpp<261:8> [b2DynamicTree.cpp <268:6 268:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<261:8> [b2DynamicTree.cpp <271:15 271:23>]
LOCAL_SYMBOL: b2DynamicTree.cpp<261:8> [b2DynamicTree.cpp <273:12 273:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<261:8> [b2DynamicTree.cpp <277:12 277:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <262:8 262:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <263:10 263:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <264:10 264:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <265:10 265:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <266:10 266:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <273:32 273:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <277:32 277:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <280:11 280:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <281:11 281:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <282:29 282:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <283:26 283:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <288:11 288:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <289:11 289:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <290:29 290:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <291:26 291:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<262:8> [b2DynamicTree.cpp <292:12 292:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<269:2> [b2DynamicTree.cpp <269:2 269:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<269:2> [b2DynamicTree.cpp <284:2 284:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<272:3> [b2DynamicTree.cpp <272:3 272:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<272:3> [b2DynamicTree.cpp <274:3 274:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<276:3> [b2DynamicTree.cpp <276:3 276:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<276:3> [b2DynamicTree.cpp <278:3 278:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<286:2> [b2DynamicTree.cpp <286:2 286:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<286:2> [b2DynamicTree.cpp <293:2 293:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<298:2> [b2DynamicTree.cpp <298:2 298:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<298:2> [b2DynamicTree.cpp <311:2 311:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<301:9> [b2DynamicTree.cpp <301:9 301:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<301:9> [b2DynamicTree.cpp <304:12 304:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<301:9> [b2DynamicTree.cpp <307:45 307:50>]
LOCAL_SYMBOL: b2DynamicTree.cpp<301:9> [b2DynamicTree.cpp <308:39 308:44>]
LOCAL_SYMBOL: b2DynamicTree.cpp<302:9> [b2DynamicTree.cpp <302:9 302:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<302:9> [b2DynamicTree.cpp <305:12 305:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<302:9> [b2DynamicTree.cpp <307:69 307:74>]
LOCAL_SYMBOL: b2DynamicTree.cpp<302:9> [b2DynamicTree.cpp <308:61 308:66>]
LOCAL_SYMBOL: b2DynamicTree.cpp<316:38> [b2DynamicTree.cpp <316:38 316:41>]
LOCAL_SYMBOL: b2DynamicTree.cpp<316:38> [b2DynamicTree.cpp <318:6 318:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<316:38> [b2DynamicTree.cpp <324:25 324:28>]
LOCAL_SYMBOL: b2DynamicTree.cpp<316:38> [b2DynamicTree.cpp <327:32 327:35>]
LOCAL_SYMBOL: b2DynamicTree.cpp<317:1> [b2DynamicTree.cpp <317:1 317:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<317:1> [b2DynamicTree.cpp <373:1 373:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<319:2> [b2DynamicTree.cpp <319:2 319:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<319:2> [b2DynamicTree.cpp <322:2 322:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<324:8> [b2DynamicTree.cpp <324:8 324:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<324:8> [b2DynamicTree.cpp <325:30 325:35>]
LOCAL_SYMBOL: b2DynamicTree.cpp<324:8> [b2DynamicTree.cpp <327:14 327:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<324:8> [b2DynamicTree.cpp <329:21 329:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<324:8> [b2DynamicTree.cpp <333:21 333:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<324:8> [b2DynamicTree.cpp <339:38 339:43>]
LOCAL_SYMBOL: b2DynamicTree.cpp<324:8> [b2DynamicTree.cpp <348:12 348:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<324:8> [b2DynamicTree.cpp <369:12 369:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<325:8> [b2DynamicTree.cpp <325:8 325:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<325:8> [b2DynamicTree.cpp <336:6 336:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<325:8> [b2DynamicTree.cpp <339:15 339:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<325:8> [b2DynamicTree.cpp <341:12 341:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<325:8> [b2DynamicTree.cpp <345:12 345:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<325:8> [b2DynamicTree.cpp <347:29 347:39>]
LOCAL_SYMBOL: b2DynamicTree.cpp<325:8> [b2DynamicTree.cpp <351:17 351:27>]
LOCAL_SYMBOL: b2DynamicTree.cpp<326:8> [b2DynamicTree.cpp <326:8 326:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<326:8> [b2DynamicTree.cpp <329:3 329:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<326:8> [b2DynamicTree.cpp <333:3 333:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<326:8> [b2DynamicTree.cpp <341:34 341:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<326:8> [b2DynamicTree.cpp <345:34 345:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<326:8> [b2DynamicTree.cpp <347:11 347:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<326:8> [b2DynamicTree.cpp <367:12 367:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<326:8> [b2DynamicTree.cpp <368:11 368:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<328:2> [b2DynamicTree.cpp <328:2 328:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<328:2> [b2DynamicTree.cpp <330:2 330:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<32:13> [b2DynamicTree.cpp <32:13 32:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<32:13> [b2DynamicTree.cpp <32:20 32:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<32:13> [b2DynamicTree.cpp <32:46 32:46>]
LOCAL_SYMBOL: b2DynamicTree.cpp<32:13> [b2DynamicTree.cpp <34:11 34:11>]
LOCAL_SYMBOL: b2DynamicTree.cpp<32:13> [b2DynamicTree.cpp <34:21 34:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<32:13> [b2DynamicTree.cpp <35:11 35:11>]
LOCAL_SYMBOL: b2DynamicTree.cpp<332:2> [b2DynamicTree.cpp <332:2 332:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<332:2> [b2DynamicTree.cpp <334:2 334:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<337:2> [b2DynamicTree.cpp <337:2 337:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<337:2> [b2DynamicTree.cpp <364:2 364:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<33:2> [b2DynamicTree.cpp <33:2 33:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<33:2> [b2DynamicTree.cpp <36:2 36:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<340:3> [b2DynamicTree.cpp <340:3 340:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<340:3> [b2DynamicTree.cpp <342:3 342:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<344:3> [b2DynamicTree.cpp <344:3 344:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<344:3> [b2DynamicTree.cpp <346:3 346:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<351:9> [b2DynamicTree.cpp <351:9 351:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<351:9> [b2DynamicTree.cpp <352:10 352:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<351:9> [b2DynamicTree.cpp <354:4 354:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<351:9> [b2DynamicTree.cpp <354:20 354:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<351:9> [b2DynamicTree.cpp <356:27 356:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<351:9> [b2DynamicTree.cpp <357:27 357:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<351:9> [b2DynamicTree.cpp <359:12 359:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<351:9> [b2DynamicTree.cpp <360:12 360:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<351:9> [b2DynamicTree.cpp <362:4 362:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<351:9> [b2DynamicTree.cpp <362:20 362:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<353:3> [b2DynamicTree.cpp <353:3 353:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<353:3> [b2DynamicTree.cpp <363:3 363:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<356:10> [b2DynamicTree.cpp <356:10 356:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<356:10> [b2DynamicTree.cpp <359:40 359:45>]
LOCAL_SYMBOL: b2DynamicTree.cpp<356:10> [b2DynamicTree.cpp <360:46 360:51>]
LOCAL_SYMBOL: b2DynamicTree.cpp<357:10> [b2DynamicTree.cpp <357:10 357:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<357:10> [b2DynamicTree.cpp <359:62 359:67>]
LOCAL_SYMBOL: b2DynamicTree.cpp<357:10> [b2DynamicTree.cpp <360:70 360:75>]
LOCAL_SYMBOL: b2DynamicTree.cpp<366:2> [b2DynamicTree.cpp <366:2 366:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<366:2> [b2DynamicTree.cpp <370:2 370:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <377:36 377:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <379:11 379:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <381:28 381:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <384:10 384:11>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <408:15 408:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <415:37 415:38>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <421:43 421:44>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <435:16 435:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <446:16 446:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <468:15 468:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <475:37 475:38>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <481:43 481:44>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <495:16 495:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <506:16 506:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<377:36> [b2DynamicTree.cpp <517:9 517:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<378:1> [b2DynamicTree.cpp <378:1 378:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<378:1> [b2DynamicTree.cpp <518:1 518:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <381:14 381:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <382:6 382:6>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <382:21 382:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <387:13 387:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <388:13 388:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <409:15 409:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <410:3 410:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <434:4 434:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <436:4 436:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <437:20 437:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <439:4 439:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <440:26 440:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <445:4 445:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <447:4 447:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <448:20 448:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <450:4 450:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <451:26 451:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <469:15 469:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <470:3 470:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <494:4 494:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <496:4 496:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <497:20 497:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <499:4 499:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <500:26 500:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <505:4 505:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <507:4 507:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <508:20 508:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <510:4 510:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<381:14> [b2DynamicTree.cpp <511:26 511:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<383:2> [b2DynamicTree.cpp <383:2 383:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<383:2> [b2DynamicTree.cpp <385:2 385:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<387:8> [b2DynamicTree.cpp <387:8 387:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<387:8> [b2DynamicTree.cpp <389:16 389:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<387:8> [b2DynamicTree.cpp <389:22 389:23>]
LOCAL_SYMBOL: b2DynamicTree.cpp<387:8> [b2DynamicTree.cpp <392:28 392:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<387:8> [b2DynamicTree.cpp <470:15 470:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<387:8> [b2DynamicTree.cpp <477:33 477:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<387:8> [b2DynamicTree.cpp <482:33 482:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<387:8> [b2DynamicTree.cpp <487:13 487:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<387:8> [b2DynamicTree.cpp <514:10 514:11>]
LOCAL_SYMBOL: b2DynamicTree.cpp<388:8> [b2DynamicTree.cpp <388:8 388:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<388:8> [b2DynamicTree.cpp <390:16 390:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<388:8> [b2DynamicTree.cpp <390:22 390:23>]
LOCAL_SYMBOL: b2DynamicTree.cpp<388:8> [b2DynamicTree.cpp <393:28 393:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<388:8> [b2DynamicTree.cpp <410:15 410:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<388:8> [b2DynamicTree.cpp <417:33 417:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<388:8> [b2DynamicTree.cpp <422:33 422:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<388:8> [b2DynamicTree.cpp <427:13 427:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<388:8> [b2DynamicTree.cpp <454:10 454:11>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <392:14 392:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <395:30 395:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <436:20 436:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <439:26 439:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <447:20 447:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <450:26 450:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <460:14 460:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <461:14 461:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <468:3 468:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <469:3 469:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <473:7 473:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <475:16 475:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <477:13 477:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <481:22 481:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <482:13 482:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <493:4 493:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <497:4 497:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <500:4 500:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <504:4 504:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <508:4 508:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<392:14> [b2DynamicTree.cpp <511:4 511:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <393:14 393:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <395:18 395:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <400:14 400:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <401:14 401:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <408:3 408:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <409:3 409:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <413:7 413:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <415:16 415:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <417:13 417:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <421:22 421:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <422:13 422:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <433:4 433:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <437:4 437:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <440:4 440:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <444:4 444:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <448:4 448:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <451:4 451:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <496:20 496:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <499:26 499:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <507:20 507:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<393:14> [b2DynamicTree.cpp <510:26 510:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<395:8> [b2DynamicTree.cpp <395:8 395:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<395:8> [b2DynamicTree.cpp <398:6 398:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<395:8> [b2DynamicTree.cpp <458:6 458:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<399:2> [b2DynamicTree.cpp <399:2 399:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<399:2> [b2DynamicTree.cpp <455:2 455:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<400:9> [b2DynamicTree.cpp <400:9 400:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<400:9> [b2DynamicTree.cpp <402:29 402:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<400:9> [b2DynamicTree.cpp <404:17 404:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<400:9> [b2DynamicTree.cpp <404:23 404:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<400:9> [b2DynamicTree.cpp <433:16 433:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<400:9> [b2DynamicTree.cpp <445:16 445:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<401:9> [b2DynamicTree.cpp <401:9 401:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<401:9> [b2DynamicTree.cpp <403:29 403:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<401:9> [b2DynamicTree.cpp <405:17 405:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<401:9> [b2DynamicTree.cpp <405:23 405:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<401:9> [b2DynamicTree.cpp <434:16 434:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<401:9> [b2DynamicTree.cpp <444:16 444:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<402:15> [b2DynamicTree.cpp <402:15 402:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<402:15> [b2DynamicTree.cpp <431:7 431:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<402:15> [b2DynamicTree.cpp <437:29 437:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<402:15> [b2DynamicTree.cpp <440:37 440:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<402:15> [b2DynamicTree.cpp <446:4 446:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<402:15> [b2DynamicTree.cpp <447:29 447:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<402:15> [b2DynamicTree.cpp <450:37 450:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<403:15> [b2DynamicTree.cpp <403:15 403:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<403:15> [b2DynamicTree.cpp <431:19 431:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<403:15> [b2DynamicTree.cpp <435:4 435:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<403:15> [b2DynamicTree.cpp <436:29 436:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<403:15> [b2DynamicTree.cpp <439:37 439:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<403:15> [b2DynamicTree.cpp <448:29 448:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<403:15> [b2DynamicTree.cpp <451:37 451:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<414:3> [b2DynamicTree.cpp <414:3 414:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<414:3> [b2DynamicTree.cpp <424:3 424:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<416:4> [b2DynamicTree.cpp <416:4 416:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<416:4> [b2DynamicTree.cpp <418:4 418:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<420:4> [b2DynamicTree.cpp <420:4 420:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<420:4> [b2DynamicTree.cpp <423:4 423:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<426:3> [b2DynamicTree.cpp <426:3 426:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<426:3> [b2DynamicTree.cpp <428:3 428:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<432:3> [b2DynamicTree.cpp <432:3 432:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<432:3> [b2DynamicTree.cpp <441:3 441:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<443:3> [b2DynamicTree.cpp <443:3 443:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<443:3> [b2DynamicTree.cpp <452:3 452:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<459:2> [b2DynamicTree.cpp <459:2 459:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<459:2> [b2DynamicTree.cpp <515:2 515:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<460:9> [b2DynamicTree.cpp <460:9 460:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<460:9> [b2DynamicTree.cpp <462:29 462:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<460:9> [b2DynamicTree.cpp <464:17 464:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<460:9> [b2DynamicTree.cpp <464:23 464:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<460:9> [b2DynamicTree.cpp <493:16 493:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<460:9> [b2DynamicTree.cpp <505:16 505:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<461:9> [b2DynamicTree.cpp <461:9 461:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<461:9> [b2DynamicTree.cpp <463:29 463:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<461:9> [b2DynamicTree.cpp <465:17 465:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<461:9> [b2DynamicTree.cpp <465:23 465:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<461:9> [b2DynamicTree.cpp <494:16 494:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<461:9> [b2DynamicTree.cpp <504:16 504:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<462:15> [b2DynamicTree.cpp <462:15 462:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<462:15> [b2DynamicTree.cpp <491:7 491:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<462:15> [b2DynamicTree.cpp <497:29 497:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<462:15> [b2DynamicTree.cpp <500:37 500:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<462:15> [b2DynamicTree.cpp <506:4 506:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<462:15> [b2DynamicTree.cpp <507:29 507:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<462:15> [b2DynamicTree.cpp <510:37 510:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<463:15> [b2DynamicTree.cpp <463:15 463:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<463:15> [b2DynamicTree.cpp <491:19 491:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<463:15> [b2DynamicTree.cpp <495:4 495:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<463:15> [b2DynamicTree.cpp <496:29 496:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<463:15> [b2DynamicTree.cpp <499:37 499:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<463:15> [b2DynamicTree.cpp <508:29 508:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<463:15> [b2DynamicTree.cpp <511:37 511:37>]
LOCAL_SYMBOL: b2DynamicTree.cpp<474:3> [b2DynamicTree.cpp <474:3 474:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<474:3> [b2DynamicTree.cpp <484:3 484:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<476:4> [b2DynamicTree.cpp <476:4 476:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<476:4> [b2DynamicTree.cpp <478:4 478:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<47:1> [b2DynamicTree.cpp <47:1 47:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<47:1> [b2DynamicTree.cpp <50:1 50:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<480:4> [b2DynamicTree.cpp <480:4 480:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<480:4> [b2DynamicTree.cpp <483:4 483:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<486:3> [b2DynamicTree.cpp <486:3 486:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<486:3> [b2DynamicTree.cpp <488:3 488:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<492:3> [b2DynamicTree.cpp <492:3 492:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<492:3> [b2DynamicTree.cpp <501:3 501:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<503:3> [b2DynamicTree.cpp <503:3 503:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<503:3> [b2DynamicTree.cpp <512:3 512:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<521:1> [b2DynamicTree.cpp <521:1 521:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<521:1> [b2DynamicTree.cpp <528:1 528:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<523:2> [b2DynamicTree.cpp <523:2 523:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<523:2> [b2DynamicTree.cpp <525:2 525:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<532:1> [b2DynamicTree.cpp <532:1 532:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<532:1> [b2DynamicTree.cpp <555:1 555:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<534:2> [b2DynamicTree.cpp <534:2 534:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<534:2> [b2DynamicTree.cpp <536:2 536:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<538:20> [b2DynamicTree.cpp <538:20 538:23>]
LOCAL_SYMBOL: b2DynamicTree.cpp<538:20> [b2DynamicTree.cpp <539:21 539:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<539:10> [b2DynamicTree.cpp <539:10 539:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<539:10> [b2DynamicTree.cpp <554:21 554:28>]
LOCAL_SYMBOL: b2DynamicTree.cpp<541:10> [b2DynamicTree.cpp <541:10 541:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<541:10> [b2DynamicTree.cpp <551:3 551:11>]
LOCAL_SYMBOL: b2DynamicTree.cpp<541:10> [b2DynamicTree.cpp <554:9 554:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<542:13> [b2DynamicTree.cpp <542:13 542:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<542:13> [b2DynamicTree.cpp <542:20 542:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<542:13> [b2DynamicTree.cpp <542:42 542:42>]
LOCAL_SYMBOL: b2DynamicTree.cpp<542:13> [b2DynamicTree.cpp <544:38 544:38>]
LOCAL_SYMBOL: b2DynamicTree.cpp<543:2> [b2DynamicTree.cpp <543:2 543:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<543:2> [b2DynamicTree.cpp <552:2 552:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<544:21> [b2DynamicTree.cpp <544:21 544:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<544:21> [b2DynamicTree.cpp <545:7 545:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<544:21> [b2DynamicTree.cpp <551:16 551:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<546:3> [b2DynamicTree.cpp <546:3 546:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<546:3> [b2DynamicTree.cpp <549:3 549:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<54:1> [b2DynamicTree.cpp <54:1 54:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<54:1> [b2DynamicTree.cpp <89:1 89:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<558:42> [b2DynamicTree.cpp <558:42 558:47>]
LOCAL_SYMBOL: b2DynamicTree.cpp<558:42> [b2DynamicTree.cpp <560:16 560:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<558:42> [b2DynamicTree.cpp <560:26 560:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<558:42> [b2DynamicTree.cpp <561:31 561:36>]
LOCAL_SYMBOL: b2DynamicTree.cpp<559:1> [b2DynamicTree.cpp <559:1 559:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<559:1> [b2DynamicTree.cpp <571:1 571:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<561:14> [b2DynamicTree.cpp <561:14 561:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<561:14> [b2DynamicTree.cpp <563:6 563:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<561:14> [b2DynamicTree.cpp <568:32 568:35>]
LOCAL_SYMBOL: b2DynamicTree.cpp<561:14> [b2DynamicTree.cpp <569:32 569:35>]
LOCAL_SYMBOL: b2DynamicTree.cpp<564:2> [b2DynamicTree.cpp <564:2 564:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<564:2> [b2DynamicTree.cpp <566:2 566:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<568:8> [b2DynamicTree.cpp <568:8 568:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<568:8> [b2DynamicTree.cpp <570:19 570:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<569:8> [b2DynamicTree.cpp <569:8 569:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<569:8> [b2DynamicTree.cpp <570:28 570:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<574:1> [b2DynamicTree.cpp <574:1 574:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<574:1> [b2DynamicTree.cpp <577:1 577:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<575:8> [b2DynamicTree.cpp <575:8 575:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<575:8> [b2DynamicTree.cpp <576:9 576:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<579:45> [b2DynamicTree.cpp <579:45 579:49>]
LOCAL_SYMBOL: b2DynamicTree.cpp<579:45> [b2DynamicTree.cpp <581:6 581:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<579:45> [b2DynamicTree.cpp <586:6 586:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<579:45> [b2DynamicTree.cpp <588:20 588:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<579:45> [b2DynamicTree.cpp <591:37 591:41>]
LOCAL_SYMBOL: b2DynamicTree.cpp<579:45> [b2DynamicTree.cpp <607:37 607:41>]
LOCAL_SYMBOL: b2DynamicTree.cpp<579:45> [b2DynamicTree.cpp <608:37 608:41>]
LOCAL_SYMBOL: b2DynamicTree.cpp<57:2> [b2DynamicTree.cpp <57:2 57:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<57:2> [b2DynamicTree.cpp <77:2 77:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<580:1> [b2DynamicTree.cpp <580:1 580:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<580:1> [b2DynamicTree.cpp <612:1 612:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<582:2> [b2DynamicTree.cpp <582:2 582:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<582:2> [b2DynamicTree.cpp <584:2 584:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<587:2> [b2DynamicTree.cpp <587:2 587:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<587:2> [b2DynamicTree.cpp <589:2 589:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<591:20> [b2DynamicTree.cpp <591:20 591:23>]
LOCAL_SYMBOL: b2DynamicTree.cpp<591:20> [b2DynamicTree.cpp <593:17 593:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<591:20> [b2DynamicTree.cpp <594:17 594:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<591:20> [b2DynamicTree.cpp <596:6 596:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<591:20> [b2DynamicTree.cpp <600:12 600:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<593:8> [b2DynamicTree.cpp <593:8 593:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<593:8> [b2DynamicTree.cpp <598:12 598:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<593:8> [b2DynamicTree.cpp <604:16 604:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<593:8> [b2DynamicTree.cpp <604:26 604:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<593:8> [b2DynamicTree.cpp <607:19 607:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<593:8> [b2DynamicTree.cpp <610:20 610:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<594:8> [b2DynamicTree.cpp <594:8 594:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<594:8> [b2DynamicTree.cpp <599:12 599:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<594:8> [b2DynamicTree.cpp <605:16 605:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<594:8> [b2DynamicTree.cpp <605:26 605:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<594:8> [b2DynamicTree.cpp <608:19 608:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<594:8> [b2DynamicTree.cpp <611:20 611:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<597:2> [b2DynamicTree.cpp <597:2 597:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<597:2> [b2DynamicTree.cpp <602:2 602:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<614:43> [b2DynamicTree.cpp <614:43 614:47>]
LOCAL_SYMBOL: b2DynamicTree.cpp<614:43> [b2DynamicTree.cpp <616:6 616:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<614:43> [b2DynamicTree.cpp <621:37 621:41>]
LOCAL_SYMBOL: b2DynamicTree.cpp<615:1> [b2DynamicTree.cpp <615:1 615:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<615:1> [b2DynamicTree.cpp <651:1 651:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<617:2> [b2DynamicTree.cpp <617:2 617:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<617:2> [b2DynamicTree.cpp <619:2 619:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<61:15> [b2DynamicTree.cpp <61:15 61:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<61:15> [b2DynamicTree.cpp <64:19 64:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<61:15> [b2DynamicTree.cpp <65:10 65:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<621:20> [b2DynamicTree.cpp <621:20 621:23>]
LOCAL_SYMBOL: b2DynamicTree.cpp<621:20> [b2DynamicTree.cpp <623:17 623:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<621:20> [b2DynamicTree.cpp <624:17 624:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<621:20> [b2DynamicTree.cpp <626:6 626:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<621:20> [b2DynamicTree.cpp <630:12 630:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<621:20> [b2DynamicTree.cpp <641:11 641:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<621:20> [b2DynamicTree.cpp <646:30 646:33>]
LOCAL_SYMBOL: b2DynamicTree.cpp<621:20> [b2DynamicTree.cpp <647:30 647:33>]
LOCAL_SYMBOL: b2DynamicTree.cpp<623:8> [b2DynamicTree.cpp <623:8 623:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<623:8> [b2DynamicTree.cpp <628:12 628:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<623:8> [b2DynamicTree.cpp <634:16 634:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<623:8> [b2DynamicTree.cpp <634:26 634:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<623:8> [b2DynamicTree.cpp <637:26 637:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<623:8> [b2DynamicTree.cpp <644:23 644:28>]
LOCAL_SYMBOL: b2DynamicTree.cpp<623:8> [b2DynamicTree.cpp <649:18 649:23>]
LOCAL_SYMBOL: b2DynamicTree.cpp<624:8> [b2DynamicTree.cpp <624:8 624:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<624:8> [b2DynamicTree.cpp <629:12 629:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<624:8> [b2DynamicTree.cpp <635:16 635:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<624:8> [b2DynamicTree.cpp <635:26 635:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<624:8> [b2DynamicTree.cpp <638:26 638:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<624:8> [b2DynamicTree.cpp <644:45 644:50>]
LOCAL_SYMBOL: b2DynamicTree.cpp<624:8> [b2DynamicTree.cpp <650:18 650:23>]
LOCAL_SYMBOL: b2DynamicTree.cpp<627:2> [b2DynamicTree.cpp <627:2 627:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<627:2> [b2DynamicTree.cpp <632:2 632:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<637:8> [b2DynamicTree.cpp <637:8 637:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<637:8> [b2DynamicTree.cpp <640:21 640:27>]
LOCAL_SYMBOL: b2DynamicTree.cpp<638:8> [b2DynamicTree.cpp <638:8 638:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<638:8> [b2DynamicTree.cpp <640:30 640:36>]
LOCAL_SYMBOL: b2DynamicTree.cpp<639:8> [b2DynamicTree.cpp <639:8 639:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<639:8> [b2DynamicTree.cpp <640:2 640:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<639:8> [b2DynamicTree.cpp <641:27 641:32>]
LOCAL_SYMBOL: b2DynamicTree.cpp<643:9> [b2DynamicTree.cpp <643:9 643:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<643:9> [b2DynamicTree.cpp <644:2 644:5>]
LOCAL_SYMBOL: b2DynamicTree.cpp<643:9> [b2DynamicTree.cpp <646:11 646:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<643:9> [b2DynamicTree.cpp <647:11 647:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<654:1> [b2DynamicTree.cpp <654:1 654:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<654:1> [b2DynamicTree.cpp <672:1 672:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<659:8> [b2DynamicTree.cpp <659:8 659:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<659:8> [b2DynamicTree.cpp <665:5 665:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<659:8> [b2DynamicTree.cpp <670:25 670:33>]
LOCAL_SYMBOL: b2DynamicTree.cpp<660:8> [b2DynamicTree.cpp <660:8 660:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<660:8> [b2DynamicTree.cpp <661:9 661:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<660:8> [b2DynamicTree.cpp <663:17 663:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<660:8> [b2DynamicTree.cpp <663:30 663:38>]
LOCAL_SYMBOL: b2DynamicTree.cpp<660:8> [b2DynamicTree.cpp <664:3 664:11>]
LOCAL_SYMBOL: b2DynamicTree.cpp<660:8> [b2DynamicTree.cpp <664:23 664:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<662:2> [b2DynamicTree.cpp <662:2 662:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<662:2> [b2DynamicTree.cpp <666:2 666:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<675:1> [b2DynamicTree.cpp <675:1 675:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<675:1> [b2DynamicTree.cpp <694:1 694:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<676:8> [b2DynamicTree.cpp <676:8 676:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<676:8> [b2DynamicTree.cpp <690:3 690:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<676:8> [b2DynamicTree.cpp <690:22 690:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<676:8> [b2DynamicTree.cpp <693:9 693:18>]
LOCAL_SYMBOL: b2DynamicTree.cpp<677:13> [b2DynamicTree.cpp <677:13 677:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<677:13> [b2DynamicTree.cpp <677:20 677:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<677:13> [b2DynamicTree.cpp <677:42 677:42>]
LOCAL_SYMBOL: b2DynamicTree.cpp<677:13> [b2DynamicTree.cpp <679:38 679:38>]
LOCAL_SYMBOL: b2DynamicTree.cpp<678:2> [b2DynamicTree.cpp <678:2 678:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<678:2> [b2DynamicTree.cpp <691:2 691:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<679:21> [b2DynamicTree.cpp <679:21 679:24>]
LOCAL_SYMBOL: b2DynamicTree.cpp<679:21> [b2DynamicTree.cpp <680:7 680:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<679:21> [b2DynamicTree.cpp <685:12 685:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<679:21> [b2DynamicTree.cpp <687:18 687:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<679:21> [b2DynamicTree.cpp <688:18 688:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<681:3> [b2DynamicTree.cpp <681:3 681:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<681:3> [b2DynamicTree.cpp <683:3 683:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<687:9> [b2DynamicTree.cpp <687:9 687:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<687:9> [b2DynamicTree.cpp <689:58 689:63>]
LOCAL_SYMBOL: b2DynamicTree.cpp<688:9> [b2DynamicTree.cpp <688:9 688:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<688:9> [b2DynamicTree.cpp <689:33 689:38>]
LOCAL_SYMBOL: b2DynamicTree.cpp<689:9> [b2DynamicTree.cpp <689:9 689:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<689:9> [b2DynamicTree.cpp <690:34 690:40>]
LOCAL_SYMBOL: b2DynamicTree.cpp<697:1> [b2DynamicTree.cpp <697:1 697:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<697:1> [b2DynamicTree.cpp <770:1 770:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<698:9> [b2DynamicTree.cpp <698:9 698:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<698:9> [b2DynamicTree.cpp <713:4 713:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<698:9> [b2DynamicTree.cpp <728:27 728:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<698:9> [b2DynamicTree.cpp <732:28 732:32>]
LOCAL_SYMBOL: b2DynamicTree.cpp<698:9> [b2DynamicTree.cpp <745:18 745:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<698:9> [b2DynamicTree.cpp <746:18 746:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<698:9> [b2DynamicTree.cpp <761:3 761:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<698:9> [b2DynamicTree.cpp <761:17 761:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<698:9> [b2DynamicTree.cpp <762:3 762:7>]
LOCAL_SYMBOL: b2DynamicTree.cpp<698:9> [b2DynamicTree.cpp <766:11 766:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<698:9> [b2DynamicTree.cpp <767:9 767:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<699:8> [b2DynamicTree.cpp <699:8 699:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<699:8> [b2DynamicTree.cpp <713:10 713:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<699:8> [b2DynamicTree.cpp <714:6 714:10>]
LOCAL_SYMBOL: b2DynamicTree.cpp<699:8> [b2DynamicTree.cpp <722:9 722:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<699:8> [b2DynamicTree.cpp <726:25 726:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<699:8> [b2DynamicTree.cpp <730:30 730:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<699:8> [b2DynamicTree.cpp <761:23 761:27>]
LOCAL_SYMBOL: b2DynamicTree.cpp<699:8> [b2DynamicTree.cpp <763:5 763:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<69:14> [b2DynamicTree.cpp <69:14 69:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<69:14> [b2DynamicTree.cpp <69:31 69:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<69:14> [b2DynamicTree.cpp <69:57 69:57>]
LOCAL_SYMBOL: b2DynamicTree.cpp<69:14> [b2DynamicTree.cpp <71:12 71:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<69:14> [b2DynamicTree.cpp <71:22 71:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<69:14> [b2DynamicTree.cpp <72:12 72:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<702:13> [b2DynamicTree.cpp <702:13 702:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<702:13> [b2DynamicTree.cpp <702:20 702:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<702:13> [b2DynamicTree.cpp <702:42 702:42>]
LOCAL_SYMBOL: b2DynamicTree.cpp<702:13> [b2DynamicTree.cpp <704:15 704:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<702:13> [b2DynamicTree.cpp <710:15 710:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<702:13> [b2DynamicTree.cpp <712:12 712:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<702:13> [b2DynamicTree.cpp <713:19 713:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<702:13> [b2DynamicTree.cpp <718:13 718:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<703:2> [b2DynamicTree.cpp <703:2 703:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<703:2> [b2DynamicTree.cpp <720:2 720:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<705:3> [b2DynamicTree.cpp <705:3 705:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<705:3> [b2DynamicTree.cpp <708:3 708:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<70:3> [b2DynamicTree.cpp <70:3 70:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<70:3> [b2DynamicTree.cpp <73:3 73:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<711:3> [b2DynamicTree.cpp <711:3 711:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<711:3> [b2DynamicTree.cpp <715:3 715:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<717:3> [b2DynamicTree.cpp <717:3 717:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<717:3> [b2DynamicTree.cpp <719:3 719:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<723:2> [b2DynamicTree.cpp <723:2 723:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<723:2> [b2DynamicTree.cpp <764:2 764:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<724:11> [b2DynamicTree.cpp <724:11 724:17>]
LOCAL_SYMBOL: b2DynamicTree.cpp<724:11> [b2DynamicTree.cpp <736:16 736:22>]
LOCAL_SYMBOL: b2DynamicTree.cpp<724:11> [b2DynamicTree.cpp <740:6 740:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<725:20> [b2DynamicTree.cpp <725:20 725:23>]
LOCAL_SYMBOL: b2DynamicTree.cpp<725:20> [b2DynamicTree.cpp <739:6 739:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<725:20> [b2DynamicTree.cpp <746:24 746:27>]
LOCAL_SYMBOL: b2DynamicTree.cpp<725:20> [b2DynamicTree.cpp <761:9 761:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<725:9> [b2DynamicTree.cpp <725:9 725:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<725:9> [b2DynamicTree.cpp <738:6 738:9>]
LOCAL_SYMBOL: b2DynamicTree.cpp<725:9> [b2DynamicTree.cpp <745:24 745:27>]
LOCAL_SYMBOL: b2DynamicTree.cpp<725:9> [b2DynamicTree.cpp <762:9 762:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<726:14> [b2DynamicTree.cpp <726:14 726:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<726:14> [b2DynamicTree.cpp <726:21 726:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<726:14> [b2DynamicTree.cpp <726:34 726:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<726:14> [b2DynamicTree.cpp <728:33 728:33>]
LOCAL_SYMBOL: b2DynamicTree.cpp<726:14> [b2DynamicTree.cpp <730:19 730:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<726:14> [b2DynamicTree.cpp <738:13 738:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<727:3> [b2DynamicTree.cpp <727:3 727:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<727:3> [b2DynamicTree.cpp <743:3 743:3>]
LOCAL_SYMBOL: b2DynamicTree.cpp<728:11> [b2DynamicTree.cpp <728:11 728:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<728:11> [b2DynamicTree.cpp <734:15 734:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<730:15> [b2DynamicTree.cpp <730:15 730:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<730:15> [b2DynamicTree.cpp <730:26 730:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<730:15> [b2DynamicTree.cpp <730:39 730:39>]
LOCAL_SYMBOL: b2DynamicTree.cpp<730:15> [b2DynamicTree.cpp <732:34 732:34>]
LOCAL_SYMBOL: b2DynamicTree.cpp<730:15> [b2DynamicTree.cpp <739:13 739:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<731:4> [b2DynamicTree.cpp <731:4 731:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<731:4> [b2DynamicTree.cpp <742:4 742:4>]
LOCAL_SYMBOL: b2DynamicTree.cpp<732:12> [b2DynamicTree.cpp <732:12 732:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<732:12> [b2DynamicTree.cpp <734:22 734:26>]
LOCAL_SYMBOL: b2DynamicTree.cpp<733:12> [b2DynamicTree.cpp <733:12 733:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<733:12> [b2DynamicTree.cpp <734:5 734:5>]
LOCAL_SYMBOL: b2DynamicTree.cpp<733:12> [b2DynamicTree.cpp <735:20 735:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<735:13> [b2DynamicTree.cpp <735:13 735:16>]
LOCAL_SYMBOL: b2DynamicTree.cpp<735:13> [b2DynamicTree.cpp <736:9 736:12>]
LOCAL_SYMBOL: b2DynamicTree.cpp<735:13> [b2DynamicTree.cpp <740:16 740:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<737:5> [b2DynamicTree.cpp <737:5 737:5>]
LOCAL_SYMBOL: b2DynamicTree.cpp<737:5> [b2DynamicTree.cpp <741:5 741:5>]
LOCAL_SYMBOL: b2DynamicTree.cpp<745:9> [b2DynamicTree.cpp <745:9 745:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<745:9> [b2DynamicTree.cpp <747:34 747:39>]
LOCAL_SYMBOL: b2DynamicTree.cpp<745:9> [b2DynamicTree.cpp <752:20 752:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<746:9> [b2DynamicTree.cpp <746:9 746:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<746:9> [b2DynamicTree.cpp <748:34 748:39>]
LOCAL_SYMBOL: b2DynamicTree.cpp<746:9> [b2DynamicTree.cpp <753:20 753:25>]
LOCAL_SYMBOL: b2DynamicTree.cpp<747:15> [b2DynamicTree.cpp <747:15 747:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<747:15> [b2DynamicTree.cpp <754:30 754:35>]
LOCAL_SYMBOL: b2DynamicTree.cpp<747:15> [b2DynamicTree.cpp <755:24 755:29>]
LOCAL_SYMBOL: b2DynamicTree.cpp<747:15> [b2DynamicTree.cpp <758:3 758:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<748:15> [b2DynamicTree.cpp <748:15 748:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<748:15> [b2DynamicTree.cpp <754:46 754:51>]
LOCAL_SYMBOL: b2DynamicTree.cpp<748:15> [b2DynamicTree.cpp <755:38 755:43>]
LOCAL_SYMBOL: b2DynamicTree.cpp<748:15> [b2DynamicTree.cpp <759:3 759:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<750:9> [b2DynamicTree.cpp <750:9 750:19>]
LOCAL_SYMBOL: b2DynamicTree.cpp<750:9> [b2DynamicTree.cpp <751:34 751:44>]
LOCAL_SYMBOL: b2DynamicTree.cpp<750:9> [b2DynamicTree.cpp <758:20 758:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<750:9> [b2DynamicTree.cpp <759:20 759:30>]
LOCAL_SYMBOL: b2DynamicTree.cpp<750:9> [b2DynamicTree.cpp <762:17 762:27>]
LOCAL_SYMBOL: b2DynamicTree.cpp<751:15> [b2DynamicTree.cpp <751:15 751:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<751:15> [b2DynamicTree.cpp <752:3 752:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<751:15> [b2DynamicTree.cpp <753:3 753:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<751:15> [b2DynamicTree.cpp <754:3 754:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<751:15> [b2DynamicTree.cpp <755:3 755:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<751:15> [b2DynamicTree.cpp <756:3 756:8>]
LOCAL_SYMBOL: b2DynamicTree.cpp<772:47> [b2DynamicTree.cpp <772:47 772:55>]
LOCAL_SYMBOL: b2DynamicTree.cpp<772:47> [b2DynamicTree.cpp <777:33 777:41>]
LOCAL_SYMBOL: b2DynamicTree.cpp<772:47> [b2DynamicTree.cpp <778:33 778:41>]
LOCAL_SYMBOL: b2DynamicTree.cpp<773:1> [b2DynamicTree.cpp <773:1 773:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<773:1> [b2DynamicTree.cpp <780:1 780:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<775:13> [b2DynamicTree.cpp <775:13 775:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<775:13> [b2DynamicTree.cpp <775:20 775:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<775:13> [b2DynamicTree.cpp <775:42 775:42>]
LOCAL_SYMBOL: b2DynamicTree.cpp<775:13> [b2DynamicTree.cpp <777:11 777:11>]
LOCAL_SYMBOL: b2DynamicTree.cpp<775:13> [b2DynamicTree.cpp <778:11 778:11>]
LOCAL_SYMBOL: b2DynamicTree.cpp<776:2> [b2DynamicTree.cpp <776:2 776:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<776:2> [b2DynamicTree.cpp <779:2 779:2>]
LOCAL_SYMBOL: b2DynamicTree.cpp<80:8> [b2DynamicTree.cpp <80:8 80:13>]
LOCAL_SYMBOL: b2DynamicTree.cpp<80:8> [b2DynamicTree.cpp <81:23 81:28>]
LOCAL_SYMBOL: b2DynamicTree.cpp<80:8> [b2DynamicTree.cpp <82:10 82:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<80:8> [b2DynamicTree.cpp <83:10 83:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<80:8> [b2DynamicTree.cpp <84:10 84:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<80:8> [b2DynamicTree.cpp <85:10 85:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<80:8> [b2DynamicTree.cpp <86:10 86:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<80:8> [b2DynamicTree.cpp <88:9 88:14>]
LOCAL_SYMBOL: b2DynamicTree.cpp<92:36> [b2DynamicTree.cpp <92:36 92:41>]
LOCAL_SYMBOL: b2DynamicTree.cpp<92:36> [b2DynamicTree.cpp <94:16 94:21>]
LOCAL_SYMBOL: b2DynamicTree.cpp<92:36> [b2DynamicTree.cpp <94:26 94:31>]
LOCAL_SYMBOL: b2DynamicTree.cpp<92:36> [b2DynamicTree.cpp <96:10 96:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<92:36> [b2DynamicTree.cpp <97:10 97:15>]
LOCAL_SYMBOL: b2DynamicTree.cpp<92:36> [b2DynamicTree.cpp <98:15 98:20>]
LOCAL_SYMBOL: b2DynamicTree.cpp<93:1> [b2DynamicTree.cpp <93:1 93:1>]
LOCAL_SYMBOL: b2DynamicTree.cpp<93:1> [b2DynamicTree.cpp <100:1 100:1>]
LOCAL_SYMBOL: b2DynamicTree.h<102:18> [b2DynamicTree.h <102:18 102:25>]
LOCAL_SYMBOL: b2DynamicTree.h<102:50> [b2DynamicTree.h <102:50 102:54>]
LOCAL_SYMBOL: b2DynamicTree.h<124:33> [b2DynamicTree.h <124:33 124:41>]
LOCAL_SYMBOL: b2DynamicTree.h<129:22> [b2DynamicTree.h <129:22 129:25>]
LOCAL_SYMBOL: b2DynamicTree.h<131:24> [b2DynamicTree.h <131:24 131:27>]
LOCAL_SYMBOL: b2DynamicTree.h<132:24> [b2DynamicTree.h <132:24 132:27>]
LOCAL_SYMBOL: b2DynamicTree.h<134:22> [b2DynamicTree.h <134:22 134:26>]
LOCAL_SYMBOL: b2DynamicTree.h<137:28> [b2DynamicTree.h <137:28 137:33>]
LOCAL_SYMBOL: b2DynamicTree.h<139:31> [b2DynamicTree.h <139:31 139:35>]
LOCAL_SYMBOL: b2DynamicTree.h<140:29> [b2DynamicTree.h <140:29 140:33>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <156:47 156:53>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <158:16 158:22>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <158:27 158:33>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <159:17 159:23>]
LOCAL_SYMBOL: b2DynamicTree.h<157:1> [b2DynamicTree.h <157:1 157:1>]
LOCAL_SYMBOL: b2DynamicTree.h<157:1> [b2DynamicTree.h <160:1 160:1>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <162:54 162:60>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <164:16 164:22>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <164:27 164:33>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <165:17 165:23>]
LOCAL_SYMBOL: b2DynamicTree.h<163:1> [b2DynamicTree.h <163:1 163:1>]
LOCAL_SYMBOL: b2DynamicTree.h<163:1> [b2DynamicTree.h <166:1 166:1>]
LOCAL_SYMBOL: b2DynamicTree.h<169:37> [b2DynamicTree.h <169:37 169:44>]
LOCAL_SYMBOL: b2DynamicTree.h<169:37> [b2DynamicTree.h <188:20 188:27>]
LOCAL_SYMBOL: b2DynamicTree.h<169:61> [b2DynamicTree.h <169:61 169:64>]
LOCAL_SYMBOL: b2DynamicTree.h<169:61> [b2DynamicTree.h <184:33 184:36>]
LOCAL_SYMBOL: b2DynamicTree.h<170:1> [b2DynamicTree.h <170:1 170:1>]
LOCAL_SYMBOL: b2DynamicTree.h<170:1> [b2DynamicTree.h <201:1 201:1>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <171:30 171:34>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <172:2 172:6>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <174:9 174:13>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <176:18 176:22>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <196:5 196:9>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <197:5 197:9>]
LOCAL_SYMBOL: b2DynamicTree.h<175:2> [b2DynamicTree.h <175:2 175:2>]
LOCAL_SYMBOL: b2DynamicTree.h<175:2> [b2DynamicTree.h <200:2 200:2>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <176:9 176:14>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <177:7 177:12>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <182:38 182:43>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <188:44 188:49>]
LOCAL_SYMBOL: b2DynamicTree.h<178:3> [b2DynamicTree.h <178:3 178:3>]
LOCAL_SYMBOL: b2DynamicTree.h<178:3> [b2DynamicTree.h <180:3 180:3>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <182:21 182:24>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <184:21 184:24>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <186:8 186:11>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <196:16 196:19>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <197:16 197:19>]
LOCAL_SYMBOL: b2DynamicTree.h<185:3> [b2DynamicTree.h <185:3 185:3>]
LOCAL_SYMBOL: b2DynamicTree.h<185:3> [b2DynamicTree.h <199:3 199:3>]
LOCAL_SYMBOL: b2DynamicTree.h<187:4> [b2DynamicTree.h <187:4 187:4>]
LOCAL_SYMBOL: b2DynamicTree.h<187:4> [b2DynamicTree.h <193:4 193:4>]
LOCAL_SYMBOL: b2DynamicTree.h<188:10> [b2DynamicTree.h <188:10 188:16>]
LOCAL_SYMBOL: b2DynamicTree.h<188:10> [b2DynamicTree.h <189:9 189:15>]
LOCAL_SYMBOL: b2DynamicTree.h<190:5> [b2DynamicTree.h <190:5 190:5>]
LOCAL_SYMBOL: b2DynamicTree.h<190:5> [b2DynamicTree.h <192:5 192:5>]
LOCAL_SYMBOL: b2DynamicTree.h<195:4> [b2DynamicTree.h <195:4 195:4>]
LOCAL_SYMBOL: b2DynamicTree.h<195:4> [b2DynamicTree.h <198:4 198:4>]
LOCAL_SYMBOL: b2DynamicTree.h<204:39> [b2DynamicTree.h <204:39 204:46>]
LOCAL_SYMBOL: b2DynamicTree.h<204:39> [b2DynamicTree.h <264:20 264:27>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <204:71 204:75>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <206:14 206:18>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <207:14 207:18>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <219:24 219:28>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <260:18 260:22>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <261:18 261:22>]
LOCAL_SYMBOL: b2DynamicTree.h<205:1> [b2DynamicTree.h <205:1 205:1>]
LOCAL_SYMBOL: b2DynamicTree.h<205:1> [b2DynamicTree.h <287:1 287:1>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <206:9 206:10>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <208:18 208:19>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <224:14 224:15>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <224:39 224:40>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <225:34 225:35>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <226:34 226:35>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <251:39 251:40>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <276:16 276:17>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <276:41 276:42>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <277:36 277:37>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <278:36 278:37>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <207:9 207:10>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <208:13 208:14>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <224:34 224:35>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <276:36 276:37>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <208:9 208:9>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <209:11 209:11>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <210:2 210:2>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <213:27 213:27>]
LOCAL_SYMBOL: b2DynamicTree.h<213:9> [b2DynamicTree.h <213:9 213:9>]
LOCAL_SYMBOL: b2DynamicTree.h<213:9> [b2DynamicTree.h <214:23 214:23>]
LOCAL_SYMBOL: b2DynamicTree.h<213:9> [b2DynamicTree.h <251:36 251:36>]
LOCAL_SYMBOL: b2DynamicTree.h<214:9> [b2DynamicTree.h <214:9 214:13>]
LOCAL_SYMBOL: b2DynamicTree.h<214:9> [b2DynamicTree.h <251:56 251:60>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <219:10 219:20>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <224:19 224:29>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <262:27 262:37>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <275:5 275:15>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <276:21 276:31>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <222:9 222:19>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <225:3 225:13>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <226:3 226:13>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <242:33 242:43>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <277:5 277:15>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <278:5 278:15>]
LOCAL_SYMBOL: b2DynamicTree.h<223:2> [b2DynamicTree.h <223:2 223:2>]
LOCAL_SYMBOL: b2DynamicTree.h<223:2> [b2DynamicTree.h <227:2 227:2>]
LOCAL_SYMBOL: b2DynamicTree.h<224:10> [b2DynamicTree.h <224:10 224:10>]
LOCAL_SYMBOL: b2DynamicTree.h<224:10> [b2DynamicTree.h <225:38 225:38>]
LOCAL_SYMBOL: b2DynamicTree.h<224:10> [b2DynamicTree.h <226:38 226:38>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <229:30 229:34>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <230:2 230:6>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <232:9 232:13>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <234:18 234:22>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <283:4 283:8>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <284:4 284:8>]
LOCAL_SYMBOL: b2DynamicTree.h<233:2> [b2DynamicTree.h <233:2 233:2>]
LOCAL_SYMBOL: b2DynamicTree.h<233:2> [b2DynamicTree.h <286:2 286:2>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <234:9 234:14>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <235:7 235:12>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <240:38 240:43>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <264:56 264:61>]
LOCAL_SYMBOL: b2DynamicTree.h<236:3> [b2DynamicTree.h <236:3 236:3>]
LOCAL_SYMBOL: b2DynamicTree.h<236:3> [b2DynamicTree.h <238:3 238:3>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <240:21 240:24>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <242:21 242:24>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <249:14 249:17>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <250:14 250:17>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <257:7 257:10>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <283:15 283:18>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <284:15 284:18>]
LOCAL_SYMBOL: b2DynamicTree.h<243:3> [b2DynamicTree.h <243:3 243:3>]
LOCAL_SYMBOL: b2DynamicTree.h<243:3> [b2DynamicTree.h <245:3 245:3>]
LOCAL_SYMBOL: b2DynamicTree.h<249:10> [b2DynamicTree.h <249:10 249:10>]
LOCAL_SYMBOL: b2DynamicTree.h<249:10> [b2DynamicTree.h <251:44 251:44>]
LOCAL_SYMBOL: b2DynamicTree.h<250:10> [b2DynamicTree.h <250:10 250:10>]
LOCAL_SYMBOL: b2DynamicTree.h<250:10> [b2DynamicTree.h <251:63 251:63>]
LOCAL_SYMBOL: b2DynamicTree.h<251:11> [b2DynamicTree.h <251:11 251:20>]
LOCAL_SYMBOL: b2DynamicTree.h<251:11> [b2DynamicTree.h <252:7 252:16>]
LOCAL_SYMBOL: b2DynamicTree.h<253:3> [b2DynamicTree.h <253:3 253:3>]
LOCAL_SYMBOL: b2DynamicTree.h<253:3> [b2DynamicTree.h <255:3 255:3>]
LOCAL_SYMBOL: b2DynamicTree.h<258:3> [b2DynamicTree.h <258:3 258:3>]
LOCAL_SYMBOL: b2DynamicTree.h<258:3> [b2DynamicTree.h <280:3 280:3>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <259:19 259:26>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <260:4 260:11>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <261:4 261:11>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <262:4 262:11>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <264:46 264:53>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <264:12 264:16>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <266:8 266:12>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <272:8 272:12>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <275:19 275:23>]
LOCAL_SYMBOL: b2DynamicTree.h<267:4> [b2DynamicTree.h <267:4 267:4>]
LOCAL_SYMBOL: b2DynamicTree.h<267:4> [b2DynamicTree.h <270:4 270:4>]
LOCAL_SYMBOL: b2DynamicTree.h<273:4> [b2DynamicTree.h <273:4 273:4>]
LOCAL_SYMBOL: b2DynamicTree.h<273:4> [b2DynamicTree.h <279:4 279:4>]
LOCAL_SYMBOL: b2DynamicTree.h<276:12> [b2DynamicTree.h <276:12 276:12>]
LOCAL_SYMBOL: b2DynamicTree.h<276:12> [b2DynamicTree.h <277:40 277:40>]
LOCAL_SYMBOL: b2DynamicTree.h<276:12> [b2DynamicTree.h <278:40 278:40>]
LOCAL_SYMBOL: b2DynamicTree.h<282:3> [b2DynamicTree.h <282:3 282:3>]
LOCAL_SYMBOL: b2DynamicTree.h<282:3> [b2DynamicTree.h <285:3 285:3>]
LOCAL_SYMBOL: b2DynamicTree.h<29:1> [b2DynamicTree.h <29:1 29:1>]
LOCAL_SYMBOL: b2DynamicTree.h<29:1> [b2DynamicTree.h <51:1 51:1>]
LOCAL_SYMBOL: b2DynamicTree.h<31:2> [b2DynamicTree.h <31:2 31:2>]
LOCAL_SYMBOL: b2DynamicTree.h<31:2> [b2DynamicTree.h <33:2 33:2>]
LOCAL_SYMBOL: b2DynamicTree.h<41:2> [b2DynamicTree.h <41:2 41:2>]
LOCAL_SYMBOL: b2DynamicTree.h<41:2> [b2DynamicTree.h <44:2 44:2>]
LOCAL_SYMBOL: b2DynamicTree.h<62:1> [b2DynamicTree.h <62:1 62:1>]
LOCAL_SYMBOL: b2DynamicTree.h<62:1> [b2DynamicTree.h <154:1 154:1>]
LOCAL_SYMBOL: b2DynamicTree.h<71:34> [b2DynamicTree.h <71:34 71:37>]
LOCAL_SYMBOL: b2DynamicTree.h<71:46> [b2DynamicTree.h <71:46 71:53>]
LOCAL_SYMBOL: b2DynamicTree.h<74:26> [b2DynamicTree.h <74:26 74:32>]
LOCAL_SYMBOL: b2DynamicTree.h<80:23> [b2DynamicTree.h <80:23 80:29>]
LOCAL_SYMBOL: b2DynamicTree.h<80:46> [b2DynamicTree.h <80:46 80:50>]
LOCAL_SYMBOL: b2DynamicTree.h<80:67> [b2DynamicTree.h <80:67 80:78>]
LOCAL_SYMBOL: b2DynamicTree.h<84:26> [b2DynamicTree.h <84:26 84:32>]
LOCAL_SYMBOL: b2DynamicTree.h<87:33> [b2DynamicTree.h <87:33 87:39>]
LOCAL_SYMBOL: b2DynamicTree.h<92:16> [b2DynamicTree.h <92:16 92:23>]
LOCAL_SYMBOL: b2DynamicTree.h<92:40> [b2DynamicTree.h <92:40 92:43>]
LOCAL_SYMBOL: b2GrowableStack.h<29:1> [b2GrowableStack.h <29:1 29:1>]
LOCAL_SYMBOL: b2GrowableStack.h<29:1> [b2GrowableStack.h <82:1 82:1>]
LOCAL_SYMBOL: b2GrowableStack.h<32:2> [b2GrowableStack.h <32:2 32:2>]
LOCAL_SYMBOL: b2GrowableStack.h<32:2> [b2GrowableStack.h <36:2 36:2>]
LOCAL_SYMBOL: b2GrowableStack.h<39:2> [b2GrowableStack.h <39:2 39:2>]
LOCAL_SYMBOL: b2GrowableStack.h<39:2> [b2GrowableStack.h <45:2 45:2>]
LOCAL_SYMBOL: b2GrowableStack.h<41:3> [b2GrowableStack.h <41:3 41:3>]
LOCAL_SYMBOL: b2GrowableStack.h<41:3> [b2GrowableStack.h <44:3 44:3>]
LOCAL_SYMBOL: b2GrowableStack.h<47:21> [b2GrowableStack.h <47:21 47:27>]
LOCAL_SYMBOL: b2GrowableStack.h<47:21> [b2GrowableStack.h <61:22 61:28>]
LOCAL_SYMBOL: b2GrowableStack.h<48:2> [b2GrowableStack.h <48:2 48:2>]
LOCAL_SYMBOL: b2GrowableStack.h<48:2> [b2GrowableStack.h <63:2 63:2>]
LOCAL_SYMBOL: b2GrowableStack.h<50:3> [b2GrowableStack.h <50:3 50:3>]
LOCAL_SYMBOL: b2GrowableStack.h<50:3> [b2GrowableStack.h <59:3 59:3>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <51:7 51:9>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <54:20 54:22>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <55:8 55:10>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <57:12 57:14>]
LOCAL_SYMBOL: b2GrowableStack.h<56:4> [b2GrowableStack.h <56:4 56:4>]
LOCAL_SYMBOL: b2GrowableStack.h<56:4> [b2GrowableStack.h <58:4 58:4>]
LOCAL_SYMBOL: b2GrowableStack.h<66:2> [b2GrowableStack.h <66:2 66:2>]
LOCAL_SYMBOL: b2GrowableStack.h<66:2> [b2GrowableStack.h <70:2 70:2>]
LOCAL_SYMBOL: b2GrowableStack.h<73:2> [b2GrowableStack.h <73:2 73:2>]
LOCAL_SYMBOL: b2GrowableStack.h<73:2> [b2GrowableStack.h <75:2 75:2>]
LOCAL_SYMBOL: b2Math.h<102:2> [b2Math.h <102:2 102:2>]
LOCAL_SYMBOL: b2Math.h<102:2> [b2Math.h <104:2 104:2>]
LOCAL_SYMBOL: b2Math.h<109:2> [b2Math.h <109:2 109:2>]
LOCAL_SYMBOL: b2Math.h<109:2> [b2Math.h <111:2 111:2>]
LOCAL_SYMBOL: b2Math.h<115:2> [b2Math.h <115:2 115:2>]
LOCAL_SYMBOL: b2Math.h<115:2> [b2Math.h <126:2 126:2>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <116:11 116:16>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <117:7 117:12>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <121:30 121:35>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <125:10 125:15>]
LOCAL_SYMBOL: b2Math.h<118:3> [b2Math.h <118:3 118:3>]
LOCAL_SYMBOL: b2Math.h<118:3> [b2Math.h <120:3 120:3>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <121:11 121:19>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <122:8 122:16>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <123:8 123:16>]
LOCAL_SYMBOL: b2Math.h<130:2> [b2Math.h <130:2 130:2>]
LOCAL_SYMBOL: b2Math.h<130:2> [b2Math.h <132:2 132:2>]
LOCAL_SYMBOL: b2Math.h<136:2> [b2Math.h <136:2 136:2>]
LOCAL_SYMBOL: b2Math.h<136:2> [b2Math.h <138:2 138:2>]
LOCAL_SYMBOL: b2Math.h<145:1> [b2Math.h <145:1 145:1>]
LOCAL_SYMBOL: b2Math.h<145:1> [b2Math.h <180:1 180:1>]
LOCAL_SYMBOL: b2Math.h<147:11> [b2Math.h <147:11 147:11>]
LOCAL_SYMBOL: b2Math.h<147:11> [b2Math.h <147:12 147:12>]
LOCAL_SYMBOL: b2Math.h<150:17> [b2Math.h <150:17 150:19>]
LOCAL_SYMBOL: b2Math.h<150:17> [b2Math.h <150:52 150:54>]
LOCAL_SYMBOL: b2Math.h<150:30> [b2Math.h <150:30 150:32>]
LOCAL_SYMBOL: b2Math.h<150:30> [b2Math.h <150:60 150:62>]
LOCAL_SYMBOL: b2Math.h<150:43> [b2Math.h <150:43 150:45>]
LOCAL_SYMBOL: b2Math.h<150:43> [b2Math.h <150:68 150:70>]
LOCAL_SYMBOL: b2Math.h<150:73> [b2Math.h <150:73 150:73>]
LOCAL_SYMBOL: b2Math.h<150:73> [b2Math.h <150:74 150:74>]
LOCAL_SYMBOL: b2Math.h<153:17> [b2Math.h <153:17 153:17>]
LOCAL_SYMBOL: b2Math.h<153:17> [b2Math.h <153:49 153:49>]
LOCAL_SYMBOL: b2Math.h<156:19> [b2Math.h <156:19 156:20>]
LOCAL_SYMBOL: b2Math.h<156:19> [b2Math.h <156:53 156:54>]
LOCAL_SYMBOL: b2Math.h<156:31> [b2Math.h <156:31 156:32>]
LOCAL_SYMBOL: b2Math.h<156:31> [b2Math.h <156:61 156:62>]
LOCAL_SYMBOL: b2Math.h<156:43> [b2Math.h <156:43 156:44>]
LOCAL_SYMBOL: b2Math.h<156:43> [b2Math.h <156:69 156:70>]
LOCAL_SYMBOL: b2Math.h<156:47> [b2Math.h <156:47 156:47>]
LOCAL_SYMBOL: b2Math.h<156:47> [b2Math.h <156:73 156:73>]
LOCAL_SYMBOL: b2Math.h<159:28> [b2Math.h <159:28 159:28>]
LOCAL_SYMBOL: b2Math.h<159:28> [b2Math.h <159:69 159:69>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:37 159:37>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:40 159:40>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:66 159:66>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <162:34 162:34>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:8 164:8>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:18 164:18>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:28 164:28>]
LOCAL_SYMBOL: b2Math.h<163:2> [b2Math.h <163:2 163:2>]
LOCAL_SYMBOL: b2Math.h<163:2> [b2Math.h <165:2 165:2>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <168:34 168:34>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:8 170:8>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:18 170:18>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:28 170:28>]
LOCAL_SYMBOL: b2Math.h<169:2> [b2Math.h <169:2 169:2>]
LOCAL_SYMBOL: b2Math.h<169:2> [b2Math.h <171:2 171:2>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <174:28 174:28>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:8 176:8>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:16 176:16>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:24 176:24>]
LOCAL_SYMBOL: b2Math.h<175:2> [b2Math.h <175:2 175:2>]
LOCAL_SYMBOL: b2Math.h<175:2> [b2Math.h <177:2 177:2>]
LOCAL_SYMBOL: b2Math.h<184:1> [b2Math.h <184:1 184:1>]
LOCAL_SYMBOL: b2Math.h<184:1> [b2Math.h <254:1 254:1>]
LOCAL_SYMBOL: b2Math.h<186:12> [b2Math.h <186:12 186:12>]
LOCAL_SYMBOL: b2Math.h<186:12> [b2Math.h <186:13 186:13>]
LOCAL_SYMBOL: b2Math.h<189:24> [b2Math.h <189:24 189:25>]
LOCAL_SYMBOL: b2Math.h<189:24> [b2Math.h <191:8 191:9>]
LOCAL_SYMBOL: b2Math.h<189:42> [b2Math.h <189:42 189:43>]
LOCAL_SYMBOL: b2Math.h<189:42> [b2Math.h <192:8 192:9>]
LOCAL_SYMBOL: b2Math.h<190:2> [b2Math.h <190:2 190:2>]
LOCAL_SYMBOL: b2Math.h<190:2> [b2Math.h <193:2 193:2>]
LOCAL_SYMBOL: b2Math.h<196:18> [b2Math.h <196:18 196:20>]
LOCAL_SYMBOL: b2Math.h<196:18> [b2Math.h <198:10 198:12>]
LOCAL_SYMBOL: b2Math.h<196:31> [b2Math.h <196:31 196:33>]
LOCAL_SYMBOL: b2Math.h<196:31> [b2Math.h <199:10 199:12>]
LOCAL_SYMBOL: b2Math.h<196:44> [b2Math.h <196:44 196:46>]
LOCAL_SYMBOL: b2Math.h<196:44> [b2Math.h <198:22 198:24>]
LOCAL_SYMBOL: b2Math.h<196:57> [b2Math.h <196:57 196:59>]
LOCAL_SYMBOL: b2Math.h<196:57> [b2Math.h <199:22 199:24>]
LOCAL_SYMBOL: b2Math.h<197:2> [b2Math.h <197:2 197:2>]
LOCAL_SYMBOL: b2Math.h<197:2> [b2Math.h <200:2 200:2>]
LOCAL_SYMBOL: b2Math.h<203:25> [b2Math.h <203:25 203:26>]
LOCAL_SYMBOL: b2Math.h<203:25> [b2Math.h <205:8 205:9>]
LOCAL_SYMBOL: b2Math.h<203:43> [b2Math.h <203:43 203:44>]
LOCAL_SYMBOL: b2Math.h<203:43> [b2Math.h <206:8 206:9>]
LOCAL_SYMBOL: b2Math.h<204:2> [b2Math.h <204:2 204:2>]
LOCAL_SYMBOL: b2Math.h<204:2> [b2Math.h <207:2 207:2>]
LOCAL_SYMBOL: b2Math.h<211:2> [b2Math.h <211:2 211:2>]
LOCAL_SYMBOL: b2Math.h<211:2> [b2Math.h <214:2 214:2>]
LOCAL_SYMBOL: b2Math.h<218:2> [b2Math.h <218:2 218:2>]
LOCAL_SYMBOL: b2Math.h<218:2> [b2Math.h <221:2 221:2>]
LOCAL_SYMBOL: b2Math.h<224:2> [b2Math.h <224:2 224:2>]
LOCAL_SYMBOL: b2Math.h<224:2> [b2Math.h <235:2 235:2>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <225:11 225:11>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <227:17 227:17>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <233:38 233:38>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <225:21 225:21>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <227:25 227:25>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <232:38 232:38>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <225:31 225:31>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <227:29 227:29>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <233:19 233:19>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <225:41 225:41>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <227:21 227:21>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <232:19 232:19>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <226:11 226:11>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <232:3 232:3>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <232:22 232:22>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <233:3 233:3>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <233:22 233:22>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <234:10 234:10>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <227:11 227:13>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <228:7 228:9>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <230:4 230:6>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <230:17 230:19>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <232:13 232:15>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <232:32 232:34>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <233:13 233:15>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <233:32 233:34>]
LOCAL_SYMBOL: b2Math.h<229:3> [b2Math.h <229:3 229:3>]
LOCAL_SYMBOL: b2Math.h<229:3> [b2Math.h <231:3 231:3>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <239:29 239:29>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <248:22 248:22>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <248:34 248:34>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <249:22 249:22>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <249:34 249:34>]
LOCAL_SYMBOL: b2Math.h<240:2> [b2Math.h <240:2 240:2>]
LOCAL_SYMBOL: b2Math.h<240:2> [b2Math.h <251:2 251:2>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <241:11 241:13>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <242:17 242:19>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <249:16 249:18>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <241:23 241:25>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <242:29 242:31>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <248:28 248:30>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <241:35 241:37>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <242:35 242:37>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <249:28 249:30>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <241:47 241:49>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <242:23 242:25>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <248:16 248:18>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <242:11 242:13>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <243:7 243:9>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <245:4 245:6>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <245:17 245:19>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <248:9 248:11>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <249:9 249:11>]
LOCAL_SYMBOL: b2Math.h<244:3> [b2Math.h <244:3 244:3>]
LOCAL_SYMBOL: b2Math.h<244:3> [b2Math.h <246:3 246:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <247:10 247:10>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <248:3 248:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <249:3 249:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <250:10 250:10>]
LOCAL_SYMBOL: b2Math.h<258:1> [b2Math.h <258:1 258:1>]
LOCAL_SYMBOL: b2Math.h<258:1> [b2Math.h <296:1 296:1>]
LOCAL_SYMBOL: b2Math.h<260:12> [b2Math.h <260:12 260:12>]
LOCAL_SYMBOL: b2Math.h<260:12> [b2Math.h <260:13 260:13>]
LOCAL_SYMBOL: b2Math.h<263:24> [b2Math.h <263:24 263:25>]
LOCAL_SYMBOL: b2Math.h<263:24> [b2Math.h <265:8 265:9>]
LOCAL_SYMBOL: b2Math.h<263:42> [b2Math.h <263:42 263:43>]
LOCAL_SYMBOL: b2Math.h<263:42> [b2Math.h <266:8 266:9>]
LOCAL_SYMBOL: b2Math.h<263:60> [b2Math.h <263:60 263:61>]
LOCAL_SYMBOL: b2Math.h<263:60> [b2Math.h <267:8 267:9>]
LOCAL_SYMBOL: b2Math.h<264:2> [b2Math.h <264:2 264:2>]
LOCAL_SYMBOL: b2Math.h<264:2> [b2Math.h <268:2 268:2>]
LOCAL_SYMBOL: b2Math.h<26:31> [b2Math.h <26:31 26:31>]
LOCAL_SYMBOL: b2Math.h<26:31> [b2Math.h <28:40 28:40>]
LOCAL_SYMBOL: b2Math.h<272:2> [b2Math.h <272:2 272:2>]
LOCAL_SYMBOL: b2Math.h<272:2> [b2Math.h <276:2 276:2>]
LOCAL_SYMBOL: b2Math.h<27:1> [b2Math.h <27:1 27:1>]
LOCAL_SYMBOL: b2Math.h<27:1> [b2Math.h <30:1 30:1>]
LOCAL_SYMBOL: b2Math.h<280:31> [b2Math.h <280:31 280:31>]
LOCAL_SYMBOL: b2Math.h<285:31> [b2Math.h <285:31 285:31>]
LOCAL_SYMBOL: b2Math.h<289:29> [b2Math.h <289:29 289:29>]
LOCAL_SYMBOL: b2Math.h<28:8> [b2Math.h <28:8 28:9>]
LOCAL_SYMBOL: b2Math.h<28:8> [b2Math.h <29:10 29:11>]
LOCAL_SYMBOL: b2Math.h<293:32> [b2Math.h <293:32 293:32>]
LOCAL_SYMBOL: b2Math.h<300:1> [b2Math.h <300:1 300:1>]
LOCAL_SYMBOL: b2Math.h<300:1> [b2Math.h <346:1 346:1>]
LOCAL_SYMBOL: b2Math.h<301:10> [b2Math.h <301:10 301:10>]
LOCAL_SYMBOL: b2Math.h<301:10> [b2Math.h <301:11 301:11>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <304:25 304:29>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <307:12 307:16>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <308:12 308:16>]
LOCAL_SYMBOL: b2Math.h<305:2> [b2Math.h <305:2 305:2>]
LOCAL_SYMBOL: b2Math.h<305:2> [b2Math.h <309:2 309:2>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <312:19 312:23>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <315:12 315:16>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <316:12 316:16>]
LOCAL_SYMBOL: b2Math.h<313:2> [b2Math.h <313:2 313:2>]
LOCAL_SYMBOL: b2Math.h<313:2> [b2Math.h <317:2 317:2>]
LOCAL_SYMBOL: b2Math.h<321:2> [b2Math.h <321:2 321:2>]
LOCAL_SYMBOL: b2Math.h<321:2> [b2Math.h <324:2 324:2>]
LOCAL_SYMBOL: b2Math.h<328:2> [b2Math.h <328:2 328:2>]
LOCAL_SYMBOL: b2Math.h<328:2> [b2Math.h <330:2 330:2>]
LOCAL_SYMBOL: b2Math.h<334:2> [b2Math.h <334:2 334:2>]
LOCAL_SYMBOL: b2Math.h<334:2> [b2Math.h <336:2 336:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <33:34 33:34>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <41:14 41:14>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <42:25 42:25>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <44:2 44:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:2 45:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:6 45:6>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:26 45:26>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:30 45:30>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <46:9 46:9>]
LOCAL_SYMBOL: b2Math.h<340:2> [b2Math.h <340:2 340:2>]
LOCAL_SYMBOL: b2Math.h<340:2> [b2Math.h <342:2 342:2>]
LOCAL_SYMBOL: b2Math.h<34:1> [b2Math.h <34:1 34:1>]
LOCAL_SYMBOL: b2Math.h<34:1> [b2Math.h <47:1 47:1>]
LOCAL_SYMBOL: b2Math.h<351:1> [b2Math.h <351:1 351:1>]
LOCAL_SYMBOL: b2Math.h<351:1> [b2Math.h <374:1 374:1>]
LOCAL_SYMBOL: b2Math.h<353:16> [b2Math.h <353:16 353:16>]
LOCAL_SYMBOL: b2Math.h<353:16> [b2Math.h <353:17 353:17>]
LOCAL_SYMBOL: b2Math.h<356:28> [b2Math.h <356:28 356:35>]
LOCAL_SYMBOL: b2Math.h<356:28> [b2Math.h <356:65 356:72>]
LOCAL_SYMBOL: b2Math.h<356:51> [b2Math.h <356:51 356:58>]
LOCAL_SYMBOL: b2Math.h<356:51> [b2Math.h <356:78 356:85>]
LOCAL_SYMBOL: b2Math.h<356:88> [b2Math.h <356:88 356:88>]
LOCAL_SYMBOL: b2Math.h<356:88> [b2Math.h <356:89 356:89>]
LOCAL_SYMBOL: b2Math.h<360:2> [b2Math.h <360:2 360:2>]
LOCAL_SYMBOL: b2Math.h<360:2> [b2Math.h <363:2 363:2>]
LOCAL_SYMBOL: b2Math.h<366:25> [b2Math.h <366:25 366:32>]
LOCAL_SYMBOL: b2Math.h<366:25> [b2Math.h <368:7 368:14>]
LOCAL_SYMBOL: b2Math.h<366:43> [b2Math.h <366:43 366:47>]
LOCAL_SYMBOL: b2Math.h<366:43> [b2Math.h <369:9 369:13>]
LOCAL_SYMBOL: b2Math.h<367:2> [b2Math.h <367:2 367:2>]
LOCAL_SYMBOL: b2Math.h<367:2> [b2Math.h <370:2 370:2>]
LOCAL_SYMBOL: b2Math.h<36:2> [b2Math.h <36:2 36:2>]
LOCAL_SYMBOL: b2Math.h<36:2> [b2Math.h <39:2 39:2>]
LOCAL_SYMBOL: b2Math.h<381:1> [b2Math.h <381:1 381:1>]
LOCAL_SYMBOL: b2Math.h<381:1> [b2Math.h <400:1 400:1>]
LOCAL_SYMBOL: b2Math.h<384:33> [b2Math.h <384:33 384:35>]
LOCAL_SYMBOL: b2Math.h<384:46> [b2Math.h <384:46 384:49>]
LOCAL_SYMBOL: b2Math.h<388:23> [b2Math.h <388:23 388:27>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <39:4 39:10>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <41:2 41:8>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <43:2 43:8>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <43:28 43:34>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <44:6 44:12>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <406:36 406:36>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <408:9 408:9>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <408:21 408:21>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <406:53 406:53>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <408:15 408:15>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <408:27 408:27>]
LOCAL_SYMBOL: b2Math.h<407:1> [b2Math.h <407:1 407:1>]
LOCAL_SYMBOL: b2Math.h<407:1> [b2Math.h <409:1 409:1>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <412:38 412:38>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <414:9 414:9>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <414:21 414:21>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <412:55 412:55>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <414:15 414:15>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <414:27 414:27>]
LOCAL_SYMBOL: b2Math.h<413:1> [b2Math.h <413:1 413:1>]
LOCAL_SYMBOL: b2Math.h<413:1> [b2Math.h <415:1 415:1>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <419:37 419:37>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <421:20 421:20>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <421:30 421:30>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <419:48 419:48>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <421:16 421:16>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <421:26 421:26>]
LOCAL_SYMBOL: b2Math.h<420:1> [b2Math.h <420:1 420:1>]
LOCAL_SYMBOL: b2Math.h<420:1> [b2Math.h <422:1 422:1>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <426:31 426:31>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <428:17 428:17>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <428:26 428:26>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <426:48 426:48>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <428:21 428:21>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <428:30 428:30>]
LOCAL_SYMBOL: b2Math.h<427:1> [b2Math.h <427:1 427:1>]
LOCAL_SYMBOL: b2Math.h<427:1> [b2Math.h <429:1 429:1>]
LOCAL_SYMBOL: b2Math.h<42:10> [b2Math.h <42:10 42:14>]
LOCAL_SYMBOL: b2Math.h<42:10> [b2Math.h <45:18 45:22>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <433:36 433:36>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:16 435:16>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:31 435:31>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:45 435:45>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:60 435:60>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <433:53 433:53>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:25 435:25>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:40 435:40>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:54 435:54>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:69 435:69>]
LOCAL_SYMBOL: b2Math.h<434:1> [b2Math.h <434:1 434:1>]
LOCAL_SYMBOL: b2Math.h<434:1> [b2Math.h <436:1 436:1>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <440:37 440:37>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <442:25 442:25>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <442:41 442:41>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <440:54 440:54>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <442:22 442:22>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <442:38 442:38>]
LOCAL_SYMBOL: b2Math.h<441:1> [b2Math.h <441:1 441:1>]
LOCAL_SYMBOL: b2Math.h<441:1> [b2Math.h <443:1 443:1>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <446:41 446:41>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <448:16 448:16>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <448:27 448:27>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <446:58 446:58>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <448:22 448:22>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <448:33 448:33>]
LOCAL_SYMBOL: b2Math.h<447:1> [b2Math.h <447:1 447:1>]
LOCAL_SYMBOL: b2Math.h<447:1> [b2Math.h <449:1 449:1>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <452:41 452:41>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <454:16 454:16>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <454:27 454:27>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <452:58 452:58>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <454:22 454:22>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <454:33 454:33>]
LOCAL_SYMBOL: b2Math.h<453:1> [b2Math.h <453:1 453:1>]
LOCAL_SYMBOL: b2Math.h<453:1> [b2Math.h <455:1 455:1>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <457:35 457:35>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <459:16 459:16>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <459:25 459:25>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <457:52 457:52>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <459:20 459:20>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <459:29 459:29>]
LOCAL_SYMBOL: b2Math.h<458:1> [b2Math.h <458:1 458:1>]
LOCAL_SYMBOL: b2Math.h<458:1> [b2Math.h <460:1 460:1>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <462:40 462:40>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <464:9 464:9>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <464:23 464:23>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <462:57 462:57>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <464:16 464:16>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <464:30 464:30>]
LOCAL_SYMBOL: b2Math.h<463:1> [b2Math.h <463:1 463:1>]
LOCAL_SYMBOL: b2Math.h<463:1> [b2Math.h <465:1 465:1>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <467:40 467:40>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <469:9 469:9>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <469:23 469:23>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <467:57 467:57>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <469:16 469:16>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <469:30 469:30>]
LOCAL_SYMBOL: b2Math.h<468:1> [b2Math.h <468:1 468:1>]
LOCAL_SYMBOL: b2Math.h<468:1> [b2Math.h <470:1 470:1>]
LOCAL_SYMBOL: b2Math.h<472:41> [b2Math.h <472:41 472:41>]
LOCAL_SYMBOL: b2Math.h<472:41> [b2Math.h <474:13 474:13>]
LOCAL_SYMBOL: b2Math.h<472:58> [b2Math.h <472:58 472:58>]
LOCAL_SYMBOL: b2Math.h<472:58> [b2Math.h <474:17 474:17>]
LOCAL_SYMBOL: b2Math.h<473:1> [b2Math.h <473:1 473:1>]
LOCAL_SYMBOL: b2Math.h<473:1> [b2Math.h <476:1 476:1>]
LOCAL_SYMBOL: b2Math.h<474:9> [b2Math.h <474:9 474:9>]
LOCAL_SYMBOL: b2Math.h<474:9> [b2Math.h <475:9 475:9>]
LOCAL_SYMBOL: b2Math.h<478:48> [b2Math.h <478:48 478:48>]
LOCAL_SYMBOL: b2Math.h<478:48> [b2Math.h <480:13 480:13>]
LOCAL_SYMBOL: b2Math.h<478:65> [b2Math.h <478:65 478:65>]
LOCAL_SYMBOL: b2Math.h<478:65> [b2Math.h <480:17 480:17>]
LOCAL_SYMBOL: b2Math.h<479:1> [b2Math.h <479:1 479:1>]
LOCAL_SYMBOL: b2Math.h<479:1> [b2Math.h <482:1 482:1>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <480:9 480:9>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <481:15 481:15>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <481:18 481:18>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <484:35 484:35>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:16 486:16>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:25 486:25>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:34 486:34>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <484:52 484:52>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:20 486:20>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:29 486:29>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:38 486:38>]
LOCAL_SYMBOL: b2Math.h<485:1> [b2Math.h <485:1 485:1>]
LOCAL_SYMBOL: b2Math.h<485:1> [b2Math.h <487:1 487:1>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <490:41 490:41>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:16 492:16>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:27 492:27>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:38 492:38>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <490:58 490:58>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:22 492:22>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:33 492:33>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:44 492:44>]
LOCAL_SYMBOL: b2Math.h<491:1> [b2Math.h <491:1 491:1>]
LOCAL_SYMBOL: b2Math.h<491:1> [b2Math.h <493:1 493:1>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <496:41 496:41>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:16 498:16>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:27 498:27>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:38 498:38>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <496:58 496:58>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:22 498:22>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:33 498:33>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:44 498:44>]
LOCAL_SYMBOL: b2Math.h<497:1> [b2Math.h <497:1 497:1>]
LOCAL_SYMBOL: b2Math.h<497:1> [b2Math.h <499:1 499:1>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <502:36 502:36>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:9 504:9>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:21 504:21>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:33 504:33>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <502:53 502:53>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:15 504:15>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:27 504:27>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:39 504:39>]
LOCAL_SYMBOL: b2Math.h<503:1> [b2Math.h <503:1 503:1>]
LOCAL_SYMBOL: b2Math.h<503:1> [b2Math.h <505:1 505:1>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <508:37 508:37>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:16 510:16>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:28 510:28>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:39 510:39>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:51 510:51>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:62 510:62>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:74 510:74>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <508:54 508:54>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:22 510:22>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:34 510:34>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:45 510:45>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:57 510:57>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:68 510:68>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:80 510:80>]
LOCAL_SYMBOL: b2Math.h<509:1> [b2Math.h <509:1 509:1>]
LOCAL_SYMBOL: b2Math.h<509:1> [b2Math.h <511:1 511:1>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <513:43 513:43>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <515:17 515:17>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <515:30 515:30>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <513:61 513:61>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <515:24 515:24>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <515:37 515:37>]
LOCAL_SYMBOL: b2Math.h<514:1> [b2Math.h <514:1 514:1>]
LOCAL_SYMBOL: b2Math.h<514:1> [b2Math.h <516:1 516:1>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <519:37 519:37>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <521:23 521:23>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <521:39 521:39>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <519:55 519:55>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <521:26 521:26>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <521:42 521:42>]
LOCAL_SYMBOL: b2Math.h<520:1> [b2Math.h <520:1 520:1>]
LOCAL_SYMBOL: b2Math.h<520:1> [b2Math.h <522:1 522:1>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <525:38 525:38>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <527:18 527:18>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <527:37 527:37>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <528:18 528:18>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <528:37 528:37>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <525:56 525:56>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <527:24 527:24>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <527:43 527:43>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <528:24 528:24>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <528:43 528:43>]
LOCAL_SYMBOL: b2Math.h<526:1> [b2Math.h <526:1 526:1>]
LOCAL_SYMBOL: b2Math.h<526:1> [b2Math.h <530:1 530:1>]
LOCAL_SYMBOL: b2Math.h<527:9> [b2Math.h <527:9 527:10>]
LOCAL_SYMBOL: b2Math.h<527:9> [b2Math.h <529:17 529:18>]
LOCAL_SYMBOL: b2Math.h<528:9> [b2Math.h <528:9 528:10>]
LOCAL_SYMBOL: b2Math.h<528:9> [b2Math.h <529:21 529:22>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <533:36 533:36>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:15 535:15>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:28 535:28>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:41 535:41>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <533:53 533:53>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:9 535:9>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:22 535:22>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:35 535:35>]
LOCAL_SYMBOL: b2Math.h<534:1> [b2Math.h <534:1 534:1>]
LOCAL_SYMBOL: b2Math.h<534:1> [b2Math.h <536:1 536:1>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <539:38 539:38>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:16 541:16>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:31 541:31>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:45 541:45>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:60 541:60>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <539:55 539:55>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:25 541:25>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:40 541:40>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:54 541:54>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:69 541:69>]
LOCAL_SYMBOL: b2Math.h<540:1> [b2Math.h <540:1 540:1>]
LOCAL_SYMBOL: b2Math.h<540:1> [b2Math.h <542:1 542:1>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <545:33 545:33>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <552:9 552:9>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <552:21 552:21>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <553:9 553:9>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <553:21 553:21>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <545:49 545:49>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <552:15 552:15>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <552:27 552:27>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <553:15 553:15>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <553:27 553:27>]
LOCAL_SYMBOL: b2Math.h<546:1> [b2Math.h <546:1 546:1>]
LOCAL_SYMBOL: b2Math.h<546:1> [b2Math.h <555:1 555:1>]
LOCAL_SYMBOL: b2Math.h<54:1> [b2Math.h <54:1 54:1>]
LOCAL_SYMBOL: b2Math.h<54:1> [b2Math.h <141:1 141:1>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <551:8 551:9>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <552:2 552:3>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <553:2 553:3>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <554:9 554:10>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <558:34 558:34>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <565:9 565:9>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <565:21 565:21>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <566:9 566:9>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <566:21 566:21>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <558:50 558:50>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <565:15 565:15>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <565:27 565:27>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <566:15 566:15>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <566:27 566:27>]
LOCAL_SYMBOL: b2Math.h<559:1> [b2Math.h <559:1 559:1>]
LOCAL_SYMBOL: b2Math.h<559:1> [b2Math.h <568:1 568:1>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <564:8 564:9>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <565:2 565:3>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <566:2 566:3>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <567:9 567:10>]
LOCAL_SYMBOL: b2Math.h<56:11> [b2Math.h <56:11 56:11>]
LOCAL_SYMBOL: b2Math.h<56:11> [b2Math.h <56:12 56:12>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <571:34 571:34>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:16 573:16>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:28 573:28>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:39 573:39>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:51 573:51>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <571:51 571:51>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:22 573:22>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:34 573:34>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:45 573:45>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:57 573:57>]
LOCAL_SYMBOL: b2Math.h<572:1> [b2Math.h <572:1 572:1>]
LOCAL_SYMBOL: b2Math.h<572:1> [b2Math.h <574:1 574:1>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <577:35 577:35>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:16 579:16>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:28 579:28>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:40 579:40>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:52 579:52>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <577:52 577:52>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:22 579:22>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:34 579:34>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:46 579:46>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:58 579:58>]
LOCAL_SYMBOL: b2Math.h<578:1> [b2Math.h <578:1 578:1>]
LOCAL_SYMBOL: b2Math.h<578:1> [b2Math.h <580:1 580:1>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <582:40 582:40>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:15 584:15>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:29 584:29>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:44 584:44>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:15 585:15>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:29 585:29>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:44 585:44>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <582:57 582:57>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <584:23 584:23>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <584:37 584:37>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <585:23 585:23>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <585:37 585:37>]
LOCAL_SYMBOL: b2Math.h<583:1> [b2Math.h <583:1 583:1>]
LOCAL_SYMBOL: b2Math.h<583:1> [b2Math.h <588:1 588:1>]
LOCAL_SYMBOL: b2Math.h<584:10> [b2Math.h <584:10 584:10>]
LOCAL_SYMBOL: b2Math.h<584:10> [b2Math.h <587:16 587:16>]
LOCAL_SYMBOL: b2Math.h<585:10> [b2Math.h <585:10 585:10>]
LOCAL_SYMBOL: b2Math.h<585:10> [b2Math.h <587:19 587:19>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <590:41 590:41>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <592:21 592:21>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <593:21 593:21>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <594:15 594:15>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <594:28 594:28>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <595:16 595:16>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <595:29 595:29>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <590:58 590:58>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <592:15 592:15>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <593:15 593:15>]
LOCAL_SYMBOL: b2Math.h<591:1> [b2Math.h <591:1 591:1>]
LOCAL_SYMBOL: b2Math.h<591:1> [b2Math.h <598:1 598:1>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <592:10 592:11>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <594:23 594:24>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <595:24 595:25>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <593:10 593:11>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <594:36 594:37>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <595:37 595:38>]
LOCAL_SYMBOL: b2Math.h<594:10> [b2Math.h <594:10 594:10>]
LOCAL_SYMBOL: b2Math.h<594:10> [b2Math.h <597:16 597:16>]
LOCAL_SYMBOL: b2Math.h<595:10> [b2Math.h <595:10 595:10>]
LOCAL_SYMBOL: b2Math.h<595:10> [b2Math.h <597:19 597:19>]
LOCAL_SYMBOL: b2Math.h<59:17> [b2Math.h <59:17 59:19>]
LOCAL_SYMBOL: b2Math.h<59:17> [b2Math.h <59:39 59:41>]
LOCAL_SYMBOL: b2Math.h<59:30> [b2Math.h <59:30 59:32>]
LOCAL_SYMBOL: b2Math.h<59:30> [b2Math.h <59:47 59:49>]
LOCAL_SYMBOL: b2Math.h<59:52> [b2Math.h <59:52 59:52>]
LOCAL_SYMBOL: b2Math.h<59:52> [b2Math.h <59:53 59:53>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <602:45 602:45>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <605:14 605:14>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <606:14 606:14>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <606:26 606:26>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <602:67 602:67>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <605:19 605:19>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <606:19 606:19>]
LOCAL_SYMBOL: b2Math.h<603:1> [b2Math.h <603:1 603:1>]
LOCAL_SYMBOL: b2Math.h<603:1> [b2Math.h <608:1 608:1>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <604:14 604:14>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <605:2 605:2>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <606:2 606:2>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <607:9 607:9>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <612:46 612:46>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <615:15 615:15>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <616:15 616:15>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <616:26 616:26>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <612:68 612:68>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <615:20 615:20>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <616:20 616:20>]
LOCAL_SYMBOL: b2Math.h<613:1> [b2Math.h <613:1 613:1>]
LOCAL_SYMBOL: b2Math.h<613:1> [b2Math.h <618:1 618:1>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <614:14 614:14>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <615:2 615:2>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <616:2 616:2>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <617:9 617:9>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <621:18 621:18>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:9 623:9>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:20 623:20>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:25 623:25>]
LOCAL_SYMBOL: b2Math.h<622:1> [b2Math.h <622:1 622:1>]
LOCAL_SYMBOL: b2Math.h<622:1> [b2Math.h <624:1 624:1>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <626:35 626:35>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <628:22 628:22>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <628:34 628:34>]
LOCAL_SYMBOL: b2Math.h<627:1> [b2Math.h <627:1 627:1>]
LOCAL_SYMBOL: b2Math.h<627:1> [b2Math.h <629:1 629:1>]
LOCAL_SYMBOL: b2Math.h<62:17> [b2Math.h <62:17 62:17>]
LOCAL_SYMBOL: b2Math.h<62:17> [b2Math.h <62:39 62:39>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <631:37 631:37>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <633:23 633:23>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <633:36 633:36>]
LOCAL_SYMBOL: b2Math.h<632:1> [b2Math.h <632:1 632:1>]
LOCAL_SYMBOL: b2Math.h<632:1> [b2Math.h <634:1 634:1>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <637:18 637:18>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <639:9 639:9>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <639:17 639:17>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <637:23 637:23>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <639:13 639:13>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <639:21 639:21>]
LOCAL_SYMBOL: b2Math.h<638:1> [b2Math.h <638:1 638:1>]
LOCAL_SYMBOL: b2Math.h<638:1> [b2Math.h <640:1 640:1>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <642:35 642:35>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <644:22 644:22>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <644:39 644:39>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <642:52 642:52>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <644:27 644:27>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <644:44 644:44>]
LOCAL_SYMBOL: b2Math.h<643:1> [b2Math.h <643:1 643:1>]
LOCAL_SYMBOL: b2Math.h<643:1> [b2Math.h <645:1 645:1>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <648:18 648:18>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <650:9 650:9>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <650:17 650:17>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <648:23 648:23>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <650:13 650:13>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <650:21 650:21>]
LOCAL_SYMBOL: b2Math.h<649:1> [b2Math.h <649:1 649:1>]
LOCAL_SYMBOL: b2Math.h<649:1> [b2Math.h <651:1 651:1>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <653:35 653:35>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <655:22 655:22>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <655:39 655:39>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <653:52 653:52>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <655:27 655:27>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <655:44 655:44>]
LOCAL_SYMBOL: b2Math.h<654:1> [b2Math.h <654:1 654:1>]
LOCAL_SYMBOL: b2Math.h<654:1> [b2Math.h <656:1 656:1>]
LOCAL_SYMBOL: b2Math.h<659:20> [b2Math.h <659:20 659:20>]
LOCAL_SYMBOL: b2Math.h<659:20> [b2Math.h <661:26 661:26>]
LOCAL_SYMBOL: b2Math.h<659:25> [b2Math.h <659:25 659:27>]
LOCAL_SYMBOL: b2Math.h<659:25> [b2Math.h <661:15 661:17>]
LOCAL_SYMBOL: b2Math.h<659:32> [b2Math.h <659:32 659:35>]
LOCAL_SYMBOL: b2Math.h<659:32> [b2Math.h <661:29 661:32>]
LOCAL_SYMBOL: b2Math.h<65:19> [b2Math.h <65:19 65:20>]
LOCAL_SYMBOL: b2Math.h<65:19> [b2Math.h <65:41 65:42>]
LOCAL_SYMBOL: b2Math.h<65:31> [b2Math.h <65:31 65:32>]
LOCAL_SYMBOL: b2Math.h<65:31> [b2Math.h <65:49 65:50>]
LOCAL_SYMBOL: b2Math.h<65:35> [b2Math.h <65:35 65:35>]
LOCAL_SYMBOL: b2Math.h<65:35> [b2Math.h <65:53 65:53>]
LOCAL_SYMBOL: b2Math.h<660:1> [b2Math.h <660:1 660:1>]
LOCAL_SYMBOL: b2Math.h<660:1> [b2Math.h <662:1 662:1>]
LOCAL_SYMBOL: b2Math.h<664:37> [b2Math.h <664:37 664:37>]
LOCAL_SYMBOL: b2Math.h<664:37> [b2Math.h <666:26 666:26>]
LOCAL_SYMBOL: b2Math.h<664:54> [b2Math.h <664:54 664:56>]
LOCAL_SYMBOL: b2Math.h<664:54> [b2Math.h <666:15 666:17>]
LOCAL_SYMBOL: b2Math.h<664:73> [b2Math.h <664:73 664:76>]
LOCAL_SYMBOL: b2Math.h<664:73> [b2Math.h <666:29 666:32>]
LOCAL_SYMBOL: b2Math.h<665:1> [b2Math.h <665:1 665:1>]
LOCAL_SYMBOL: b2Math.h<665:1> [b2Math.h <667:1 667:1>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <669:44 669:44>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <671:10 671:10>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <672:2 672:2>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <669:50 669:50>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <672:6 672:6>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <673:2 673:2>]
LOCAL_SYMBOL: b2Math.h<670:1> [b2Math.h <670:1 670:1>]
LOCAL_SYMBOL: b2Math.h<670:1> [b2Math.h <674:1 674:1>]
LOCAL_SYMBOL: b2Math.h<671:4> [b2Math.h <671:4 671:6>]
LOCAL_SYMBOL: b2Math.h<671:4> [b2Math.h <673:6 673:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <681:39 681:39>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <683:2 683:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <683:8 683:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <684:2 684:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <684:8 684:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <685:2 685:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <685:8 685:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <686:2 686:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <686:8 686:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <687:2 687:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <687:8 687:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <688:9 688:9>]
LOCAL_SYMBOL: b2Math.h<682:1> [b2Math.h <682:1 682:1>]
LOCAL_SYMBOL: b2Math.h<682:1> [b2Math.h <689:1 689:1>]
LOCAL_SYMBOL: b2Math.h<68:28> [b2Math.h <68:28 68:28>]
LOCAL_SYMBOL: b2Math.h<68:28> [b2Math.h <68:65 68:65>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:37 68:37>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:40 68:40>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:62 68:62>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <691:35 691:35>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:16 693:16>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:26 693:26>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:31 693:31>]
LOCAL_SYMBOL: b2Math.h<692:1> [b2Math.h <692:1 692:1>]
LOCAL_SYMBOL: b2Math.h<692:1> [b2Math.h <695:1 695:1>]
LOCAL_SYMBOL: b2Math.h<693:7> [b2Math.h <693:7 693:12>]
LOCAL_SYMBOL: b2Math.h<693:7> [b2Math.h <694:9 694:14>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <697:48 697:49>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <699:2 699:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <701:2 701:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <704:2 704:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <704:17 704:18>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <697:60 697:63>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <699:18 699:21>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <699:31 699:34>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <700:26 700:29>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <700:39 700:42>]
LOCAL_SYMBOL: b2Math.h<698:1> [b2Math.h <698:1 698:1>]
LOCAL_SYMBOL: b2Math.h<698:1> [b2Math.h <705:1 705:1>]
LOCAL_SYMBOL: b2Math.h<700:10> [b2Math.h <700:10 700:14>]
LOCAL_SYMBOL: b2Math.h<700:10> [b2Math.h <701:12 701:16>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <707:38 707:42>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <710:18 710:22>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <713:11 713:15>]
LOCAL_SYMBOL: b2Math.h<708:1> [b2Math.h <708:1 708:1>]
LOCAL_SYMBOL: b2Math.h<708:1> [b2Math.h <714:1 714:1>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <710:10 710:13>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <711:8 711:11>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <712:8 712:11>]
LOCAL_SYMBOL: b2Math.h<718:1> [b2Math.h <718:1 718:1>]
LOCAL_SYMBOL: b2Math.h<718:1> [b2Math.h <723:1 723:1>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <719:10 719:14>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <720:15 720:19>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <720:35 720:39>]
LOCAL_SYMBOL: b2Math.h<71:29> [b2Math.h <71:29 71:29>]
LOCAL_SYMBOL: b2Math.h<71:29> [b2Math.h <73:15 73:15>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <720:10 720:10>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <721:8 721:8>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <722:7 722:7>]
LOCAL_SYMBOL: b2Math.h<72:2> [b2Math.h <72:2 72:2>]
LOCAL_SYMBOL: b2Math.h<72:2> [b2Math.h <74:2 74:2>]
LOCAL_SYMBOL: b2Math.h<77:30> [b2Math.h <77:30 77:30>]
LOCAL_SYMBOL: b2Math.h<77:30> [b2Math.h <79:15 79:15>]
LOCAL_SYMBOL: b2Math.h<78:2> [b2Math.h <78:2 78:2>]
LOCAL_SYMBOL: b2Math.h<78:2> [b2Math.h <80:2 80:2>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <83:34 83:34>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <85:8 85:8>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <85:18 85:18>]
LOCAL_SYMBOL: b2Math.h<84:2> [b2Math.h <84:2 84:2>]
LOCAL_SYMBOL: b2Math.h<84:2> [b2Math.h <86:2 86:2>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <89:34 89:34>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <91:8 91:8>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <91:18 91:18>]
LOCAL_SYMBOL: b2Math.h<90:2> [b2Math.h <90:2 90:2>]
LOCAL_SYMBOL: b2Math.h<90:2> [b2Math.h <92:2 92:2>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <95:28 95:28>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <97:8 97:8>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <97:16 97:16>]
LOCAL_SYMBOL: b2Math.h<96:2> [b2Math.h <96:2 96:2>]
LOCAL_SYMBOL: b2Math.h<96:2> [b2Math.h <98:2 98:2>]
LOCAL_SYMBOL: b2Settings.h<135:21> [b2Settings.h <135:21 135:24>]
LOCAL_SYMBOL: b2Settings.h<138:19> [b2Settings.h <138:19 138:21>]
LOCAL_SYMBOL: b2Settings.h<141:24> [b2Settings.h <141:24 141:29>]
LOCAL_SYMBOL: b2Settings.h<146:1> [b2Settings.h <146:1 146:1>]
LOCAL_SYMBOL: b2Settings.h<146:1> [b2Settings.h <150:1 150:1>]
COMMENT: comment [b2DynamicTree.cpp <1:1 17:3>]
COMMENT: comment [b2DynamicTree.cpp <31:2 31:43>]
COMMENT: comment [b2DynamicTree.cpp <48:2 48:44>]
COMMENT: comment [b2DynamicTree.cpp <52:1 52:62>]
COMMENT: comment [b2DynamicTree.cpp <55:2 55:36>]
COMMENT: comment [b2DynamicTree.cpp <60:3 60:52>]
COMMENT: comment [b2DynamicTree.cpp <67:3 67:55>]
COMMENT: comment [b2DynamicTree.cpp <68:3 68:41>]
COMMENT: comment [b2DynamicTree.cpp <79:2 79:35>]
COMMENT: comment [b2DynamicTree.cpp <91:1 91:30>]
COMMENT: comment [b2DynamicTree.cpp <102:1 102:66>]
COMMENT: comment [b2DynamicTree.cpp <103:1 103:56>]
COMMENT: comment [b2DynamicTree.cpp <104:1 104:18>]
COMMENT: comment [b2DynamicTree.cpp <109:2 109:21>]
COMMENT: comment [b2DynamicTree.cpp <143:2 143:17>]
COMMENT: comment [b2DynamicTree.cpp <149:2 149:31>]
COMMENT: comment [b2DynamicTree.cpp <187:2 187:40>]
COMMENT: comment [b2DynamicTree.cpp <201:3 201:66>]
COMMENT: comment [b2DynamicTree.cpp <204:3 204:60>]
COMMENT: comment [b2DynamicTree.cpp <207:3 207:36>]
COMMENT: comment [b2DynamicTree.cpp <224:3 224:36>]
COMMENT: comment [b2DynamicTree.cpp <241:3 241:44>]
COMMENT: comment [b2DynamicTree.cpp <247:3 247:13>]
COMMENT: comment [b2DynamicTree.cpp <260:2 260:25>]
COMMENT: comment [b2DynamicTree.cpp <270:3 270:35>]
COMMENT: comment [b2DynamicTree.cpp <287:3 287:31>]
COMMENT: comment [b2DynamicTree.cpp <295:2 295:51>]
COMMENT: comment [b2DynamicTree.cpp <313:2 313:15>]
COMMENT: comment [b2DynamicTree.cpp <338:3 338:56>]
COMMENT: comment [b2DynamicTree.cpp <350:3 350:29>]
COMMENT: comment [b2DynamicTree.cpp <372:2 372:15>]
COMMENT: comment [b2DynamicTree.cpp <375:1 375:61>]
COMMENT: comment [b2DynamicTree.cpp <376:1 376:31>]
COMMENT: comment [b2DynamicTree.cpp <397:2 397:16>]
COMMENT: comment [b2DynamicTree.cpp <407:3 407:18>]
COMMENT: comment [b2DynamicTree.cpp <412:3 412:38>]
COMMENT: comment [b2DynamicTree.cpp <430:3 430:12>]
COMMENT: comment [b2DynamicTree.cpp <457:2 457:16>]
COMMENT: comment [b2DynamicTree.cpp <467:3 467:18>]
COMMENT: comment [b2DynamicTree.cpp <472:3 472:38>]
COMMENT: comment [b2DynamicTree.cpp <490:3 490:12>]
COMMENT: comment [b2DynamicTree.cpp <530:1 530:3>]
COMMENT: comment [b2DynamicTree.cpp <547:4 547:24>]
COMMENT: comment [b2DynamicTree.cpp <557:1 557:37>]
COMMENT: comment [b2DynamicTree.cpp <701:2 701:42>]
COMMENT: comment [b2DynamicTree.cpp <706:4 706:24>]
COMMENT: comment [b2DynamicTree.cpp <774:2 774:42>]
COMMENT: comment [b2DynamicTree.h <1:1 17:3>]
COMMENT: comment [b2DynamicTree.h <27:1 27:81>]
COMMENT: comment [b2DynamicTree.h <35:2 35:19>]
COMMENT: comment [b2DynamicTree.h <49:2 49:29>]
COMMENT: comment [b2DynamicTree.h <53:1 53:77>]
COMMENT: comment [b2DynamicTree.h <54:1 54:64>]
COMMENT: comment [b2DynamicTree.h <55:1 55:68>]
COMMENT: comment [b2DynamicTree.h <56:1 56:75>]
COMMENT: comment [b2DynamicTree.h <57:1 57:84>]
COMMENT: comment [b2DynamicTree.h <58:1 58:70>]
COMMENT: comment [b2DynamicTree.h <59:1 59:4>]
COMMENT: comment [b2DynamicTree.h <60:1 60:83>]
COMMENT: comment [b2DynamicTree.h <64:2 64:54>]
COMMENT: comment [b2DynamicTree.h <67:2 67:46>]
COMMENT: comment [b2DynamicTree.h <70:2 70:74>]
COMMENT: comment [b2DynamicTree.h <73:2 73:57>]
COMMENT: comment [b2DynamicTree.h <76:2 76:92>]
COMMENT: comment [b2DynamicTree.h <77:2 77:72>]
COMMENT: comment [b2DynamicTree.h <78:2 78:39>]
COMMENT: comment [b2DynamicTree.h <79:2 79:48>]
COMMENT: comment [b2DynamicTree.h <82:2 82:26>]
COMMENT: comment [b2DynamicTree.h <83:2 83:60>]
COMMENT: comment [b2DynamicTree.h <86:2 86:35>]
COMMENT: comment [b2DynamicTree.h <89:2 89:63>]
COMMENT: comment [b2DynamicTree.h <90:2 90:63>]
COMMENT: comment [b2DynamicTree.h <94:2 94:75>]
COMMENT: comment [b2DynamicTree.h <95:2 95:78>]
COMMENT: comment [b2DynamicTree.h <96:2 96:82>]
COMMENT: comment [b2DynamicTree.h <97:2 97:83>]
COMMENT: comment [b2DynamicTree.h <98:2 98:36>]
COMMENT: comment [b2DynamicTree.h <99:2 99:100>]
COMMENT: comment [b2DynamicTree.h <100:2 100:92>]
COMMENT: comment [b2DynamicTree.h <104:2 104:38>]
COMMENT: comment [b2DynamicTree.h <107:2 107:71>]
COMMENT: comment [b2DynamicTree.h <108:2 108:19>]
COMMENT: comment [b2DynamicTree.h <111:2 111:83>]
COMMENT: comment [b2DynamicTree.h <112:2 112:46>]
COMMENT: comment [b2DynamicTree.h <115:2 115:66>]
COMMENT: comment [b2DynamicTree.h <118:2 118:57>]
COMMENT: comment [b2DynamicTree.h <121:2 121:54>]
COMMENT: comment [b2DynamicTree.h <122:2 122:49>]
COMMENT: comment [b2DynamicTree.h <123:2 123:68>]
COMMENT: comment [b2DynamicTree.h <150:2 150:71>]
COMMENT: comment [b2DynamicTree.h <212:2 212:39>]
COMMENT: comment [b2DynamicTree.h <216:2 216:45>]
COMMENT: comment [b2DynamicTree.h <217:2 217:35>]
COMMENT: comment [b2DynamicTree.h <221:2 221:42>]
COMMENT: comment [b2DynamicTree.h <247:3 247:46>]
COMMENT: comment [b2DynamicTree.h <248:3 248:36>]
COMMENT: comment [b2DynamicTree.h <268:5 268:47>]
COMMENT: comment [b2DynamicTree.h <274:5 274:36>]
COMMENT: comment [b2Collision.h <1:1 17:3>]
COMMENT: comment [b2Collision.h <25:1 25:10>]
COMMENT: comment [b2Collision.h <26:1 26:73>]
COMMENT: comment [b2Collision.h <27:1 27:30>]
COMMENT: comment [b2Collision.h <36:1 36:58>]
COMMENT: comment [b2Collision.h <37:1 37:34>]
COMMENT: comment [b2Collision.h <46:17 46:45>]
COMMENT: comment [b2Collision.h <47:17 47:45>]
COMMENT: comment [b2Collision.h <48:16 48:47>]
COMMENT: comment [b2Collision.h <49:16 49:47>]
COMMENT: comment [b2Collision.h <52:1 52:45>]
COMMENT: comment [b2Collision.h <56:18 56:59>]
COMMENT: comment [b2Collision.h <59:1 59:63>]
COMMENT: comment [b2Collision.h <60:1 60:68>]
COMMENT: comment [b2Collision.h <61:1 61:27>]
COMMENT: comment [b2Collision.h <62:1 62:56>]
COMMENT: comment [b2Collision.h <63:1 63:44>]
COMMENT: comment [b2Collision.h <64:1 64:72>]
COMMENT: comment [b2Collision.h <65:1 65:41>]
COMMENT: comment [b2Collision.h <66:1 66:69>]
COMMENT: comment [b2Collision.h <67:1 67:65>]
COMMENT: comment [b2Collision.h <68:1 68:75>]
COMMENT: comment [b2Collision.h <71:22 71:57>]
COMMENT: comment [b2Collision.h <72:25 72:57>]
COMMENT: comment [b2Collision.h <73:26 73:51>]
COMMENT: comment [b2Collision.h <74:20 74:79>]
COMMENT: comment [b2Collision.h <77:1 77:47>]
COMMENT: comment [b2Collision.h <78:1 78:46>]
COMMENT: comment [b2Collision.h <79:1 79:42>]
COMMENT: comment [b2Collision.h <80:1 80:47>]
COMMENT: comment [b2Collision.h <81:1 81:56>]
COMMENT: comment [b2Collision.h <82:1 82:44>]
COMMENT: comment [b2Collision.h <83:1 83:34>]
COMMENT: comment [b2Collision.h <84:1 84:34>]
COMMENT: comment [b2Collision.h <85:1 85:38>]
COMMENT: comment [b2Collision.h <86:1 86:25>]
COMMENT: comment [b2Collision.h <87:1 87:37>]
COMMENT: comment [b2Collision.h <88:1 88:37>]
COMMENT: comment [b2Collision.h <89:1 89:66>]
COMMENT: comment [b2Collision.h <90:1 90:68>]
COMMENT: comment [b2Collision.h <91:1 91:67>]
COMMENT: comment [b2Collision.h <92:1 92:69>]
COMMENT: comment [b2Collision.h <102:48 102:74>]
COMMENT: comment [b2Collision.h <103:29 103:60>]
COMMENT: comment [b2Collision.h <104:28 104:63>]
COMMENT: comment [b2Collision.h <106:27 106:61>]
COMMENT: comment [b2Collision.h <109:1 109:69>]
COMMENT: comment [b2Collision.h <112:2 112:66>]
COMMENT: comment [b2Collision.h <113:2 113:69>]
COMMENT: comment [b2Collision.h <114:2 114:69>]
COMMENT: comment [b2Collision.h <115:2 115:34>]
COMMENT: comment [b2Collision.h <120:24 120:62>]
COMMENT: comment [b2Collision.h <121:40 121:88>]
COMMENT: comment [b2Collision.h <122:45 122:95>]
COMMENT: comment [b2Collision.h <125:1 125:62>]
COMMENT: comment [b2Collision.h <128:17 128:42>]
COMMENT: comment [b2Collision.h <129:16 129:50>]
COMMENT: comment [b2Collision.h <130:19 130:57>]
COMMENT: comment [b2Collision.h <131:18 131:54>]
COMMENT: comment [b2Collision.h <134:1 134:102>]
COMMENT: comment [b2Collision.h <135:1 135:95>]
COMMENT: comment [b2Collision.h <139:1 139:42>]
COMMENT: comment [b2Collision.h <146:1 146:82>]
COMMENT: comment [b2Collision.h <153:1 153:85>]
COMMENT: comment [b2Collision.h <154:1 154:30>]
COMMENT: comment [b2Collision.h <161:1 161:34>]
COMMENT: comment [b2Collision.h <164:2 164:40>]
COMMENT: comment [b2Collision.h <167:2 167:33>]
COMMENT: comment [b2Collision.h <173:2 173:48>]
COMMENT: comment [b2Collision.h <179:2 179:30>]
COMMENT: comment [b2Collision.h <187:2 187:36>]
COMMENT: comment [b2Collision.h <194:2 194:38>]
COMMENT: comment [b2Collision.h <201:2 201:47>]
COMMENT: comment [b2Collision.h <214:21 214:42>]
COMMENT: comment [b2Collision.h <215:21 215:42>]
COMMENT: comment [b2Collision.h <218:1 218:56>]
COMMENT: comment [b2Collision.h <223:1 223:67>]
COMMENT: comment [b2Collision.h <228:1 228:57>]
COMMENT: comment [b2Collision.h <233:1 233:65>]
COMMENT: comment [b2Collision.h <238:1 238:65>]
COMMENT: comment [b2Collision.h <243:1 243:36>]
COMMENT: comment [b2Collision.h <247:1 247:45>]
COMMENT: comment [b2Collision.h <252:1 252:80>]
COMMENT: comment [b2Math.h <1:1 17:3>]
COMMENT: comment [b2Math.h <25:1 25:91>]
COMMENT: comment [b2Math.h <32:1 32:56>]
COMMENT: comment [b2Math.h <52:1 52:24>]
COMMENT: comment [b2Math.h <55:2 55:57>]
COMMENT: comment [b2Math.h <58:2 58:34>]
COMMENT: comment [b2Math.h <61:2 61:35>]
COMMENT: comment [b2Math.h <64:2 64:52>]
COMMENT: comment [b2Math.h <67:2 67:25>]
COMMENT: comment [b2Math.h <70:2 70:36>]
COMMENT: comment [b2Math.h <76:2 76:34>]
COMMENT: comment [b2Math.h <82:2 82:34>]
COMMENT: comment [b2Math.h <88:2 88:41>]
COMMENT: comment [b2Math.h <94:2 94:39>]
COMMENT: comment [b2Math.h <100:2 100:47>]
COMMENT: comment [b2Math.h <106:2 106:66>]
COMMENT: comment [b2Math.h <107:2 107:35>]
COMMENT: comment [b2Math.h <113:2 113:65>]
COMMENT: comment [b2Math.h <128:2 128:50>]
COMMENT: comment [b2Math.h <134:2 134:77>]
COMMENT: comment [b2Math.h <143:1 143:40>]
COMMENT: comment [b2Math.h <146:2 146:57>]
COMMENT: comment [b2Math.h <149:2 149:34>]
COMMENT: comment [b2Math.h <152:2 152:35>]
COMMENT: comment [b2Math.h <155:2 155:52>]
COMMENT: comment [b2Math.h <158:2 158:25>]
COMMENT: comment [b2Math.h <161:2 161:34>]
COMMENT: comment [b2Math.h <167:2 167:41>]
COMMENT: comment [b2Math.h <173:2 173:39>]
COMMENT: comment [b2Math.h <182:1 182:51>]
COMMENT: comment [b2Math.h <185:2 185:61>]
COMMENT: comment [b2Math.h <188:2 188:42>]
COMMENT: comment [b2Math.h <195:2 195:42>]
COMMENT: comment [b2Math.h <202:2 202:43>]
COMMENT: comment [b2Math.h <209:2 209:38>]
COMMENT: comment [b2Math.h <216:2 216:35>]
COMMENT: comment [b2Math.h <237:2 237:73>]
COMMENT: comment [b2Math.h <238:2 238:51>]
COMMENT: comment [b2Math.h <256:1 256:51>]
COMMENT: comment [b2Math.h <259:2 259:61>]
COMMENT: comment [b2Math.h <262:2 262:42>]
COMMENT: comment [b2Math.h <270:2 270:35>]
COMMENT: comment [b2Math.h <278:2 278:73>]
COMMENT: comment [b2Math.h <279:2 279:51>]
COMMENT: comment [b2Math.h <282:2 282:73>]
COMMENT: comment [b2Math.h <283:2 283:72>]
COMMENT: comment [b2Math.h <284:2 284:29>]
COMMENT: comment [b2Math.h <287:2 287:49>]
COMMENT: comment [b2Math.h <288:2 288:42>]
COMMENT: comment [b2Math.h <291:2 291:59>]
COMMENT: comment [b2Math.h <292:2 292:42>]
COMMENT: comment [b2Math.h <298:1 298:13>]
COMMENT: comment [b2Math.h <303:2 303:41>]
COMMENT: comment [b2Math.h <306:3 306:25>]
COMMENT: comment [b2Math.h <311:2 311:36>]
COMMENT: comment [b2Math.h <314:3 314:25>]
COMMENT: comment [b2Math.h <319:2 319:34>]
COMMENT: comment [b2Math.h <326:2 326:30>]
COMMENT: comment [b2Math.h <332:2 332:20>]
COMMENT: comment [b2Math.h <338:2 338:20>]
COMMENT: comment [b2Math.h <344:2 344:21>]
COMMENT: comment [b2Math.h <348:1 348:75>]
COMMENT: comment [b2Math.h <349:1 349:50>]
COMMENT: comment [b2Math.h <352:2 352:43>]
COMMENT: comment [b2Math.h <355:2 355:56>]
COMMENT: comment [b2Math.h <358:2 358:41>]
COMMENT: comment [b2Math.h <365:2 365:47>]
COMMENT: comment [b2Math.h <376:1 376:67>]
COMMENT: comment [b2Math.h <377:1 377:66>]
COMMENT: comment [b2Math.h <378:1 378:70>]
COMMENT: comment [b2Math.h <379:1 379:53>]
COMMENT: comment [b2Math.h <382:2 382:56>]
COMMENT: comment [b2Math.h <383:2 383:65>]
COMMENT: comment [b2Math.h <386:2 386:62>]
COMMENT: comment [b2Math.h <387:2 387:40>]
COMMENT: comment [b2Math.h <390:2 390:27>]
COMMENT: comment [b2Math.h <393:22 393:56>]
COMMENT: comment [b2Math.h <394:17 394:44>]
COMMENT: comment [b2Math.h <395:18 395:35>]
COMMENT: comment [b2Math.h <397:2 397:58>]
COMMENT: comment [b2Math.h <398:2 398:44>]
COMMENT: comment [b2Math.h <402:1 402:20>]
COMMENT: comment [b2Math.h <405:1 405:44>]
COMMENT: comment [b2Math.h <411:1 411:76>]
COMMENT: comment [b2Math.h <417:1 417:76>]
COMMENT: comment [b2Math.h <418:1 418:14>]
COMMENT: comment [b2Math.h <424:1 424:76>]
COMMENT: comment [b2Math.h <425:1 425:14>]
COMMENT: comment [b2Math.h <431:1 431:72>]
COMMENT: comment [b2Math.h <432:1 432:63>]
COMMENT: comment [b2Math.h <438:1 438:82>]
COMMENT: comment [b2Math.h <439:1 439:83>]
COMMENT: comment [b2Math.h <445:1 445:36>]
COMMENT: comment [b2Math.h <451:1 451:41>]
COMMENT: comment [b2Math.h <489:1 489:36>]
COMMENT: comment [b2Math.h <495:1 495:41>]
COMMENT: comment [b2Math.h <501:1 501:44>]
COMMENT: comment [b2Math.h <507:1 507:46>]
COMMENT: comment [b2Math.h <518:1 518:9>]
COMMENT: comment [b2Math.h <524:1 524:11>]
COMMENT: comment [b2Math.h <532:1 532:38>]
COMMENT: comment [b2Math.h <538:1 538:38>]
COMMENT: comment [b2Math.h <544:1 544:34>]
COMMENT: comment [b2Math.h <547:2 547:53>]
COMMENT: comment [b2Math.h <548:2 548:53>]
COMMENT: comment [b2Math.h <549:2 549:26>]
COMMENT: comment [b2Math.h <550:2 550:26>]
COMMENT: comment [b2Math.h <557:1 557:45>]
COMMENT: comment [b2Math.h <560:2 560:53>]
COMMENT: comment [b2Math.h <561:2 561:53>]
COMMENT: comment [b2Math.h <562:2 562:26>]
COMMENT: comment [b2Math.h <563:2 563:26>]
COMMENT: comment [b2Math.h <570:1 570:20>]
COMMENT: comment [b2Math.h <576:1 576:28>]
COMMENT: comment [b2Math.h <600:1 600:41>]
COMMENT: comment [b2Math.h <601:1 601:49>]
COMMENT: comment [b2Math.h <610:1 610:38>]
COMMENT: comment [b2Math.h <611:1 611:45>]
COMMENT: comment [b2Math.h <676:1 676:29>]
COMMENT: comment [b2Math.h <677:1 677:100>]
COMMENT: comment [b2Math.h <678:1 678:103>]
COMMENT: comment [b2Math.h <679:1 679:99>]
COMMENT: comment [b2Math.h <680:1 680:45>]
COMMENT: comment [b2Math.h <703:2 703:20>]
COMMENT: comment [b2Math.h <716:1 716:59>]
COMMENT: comment [b2Settings.h <1:1 17:3>]
COMMENT: comment [b2Settings.h <46:1 46:10>]
COMMENT: comment [b2Settings.h <47:1 47:75>]
COMMENT: comment [b2Settings.h <48:1 48:4>]
COMMENT: comment [b2Settings.h <50:1 50:13>]
COMMENT: comment [b2Settings.h <52:1 52:71>]
COMMENT: comment [b2Settings.h <53:1 53:27>]
COMMENT: comment [b2Settings.h <56:1 56:76>]
COMMENT: comment [b2Settings.h <57:1 57:70>]
COMMENT: comment [b2Settings.h <60:1 60:74>]
COMMENT: comment [b2Settings.h <61:1 61:68>]
COMMENT: comment [b2Settings.h <62:1 62:23>]
COMMENT: comment [b2Settings.h <65:1 65:78>]
COMMENT: comment [b2Settings.h <66:1 66:59>]
COMMENT: comment [b2Settings.h <67:1 67:40>]
COMMENT: comment [b2Settings.h <70:1 70:79>]
COMMENT: comment [b2Settings.h <71:1 71:70>]
COMMENT: comment [b2Settings.h <74:1 74:78>]
COMMENT: comment [b2Settings.h <75:1 75:70>]
COMMENT: comment [b2Settings.h <78:1 78:83>]
COMMENT: comment [b2Settings.h <79:1 79:91>]
COMMENT: comment [b2Settings.h <80:1 80:64>]
COMMENT: comment [b2Settings.h <83:1 83:78>]
COMMENT: comment [b2Settings.h <87:1 87:12>]
COMMENT: comment [b2Settings.h <89:1 89:68>]
COMMENT: comment [b2Settings.h <92:1 92:86>]
COMMENT: comment [b2Settings.h <93:1 93:64>]
COMMENT: comment [b2Settings.h <96:1 96:88>]
COMMENT: comment [b2Settings.h <97:1 97:23>]
COMMENT: comment [b2Settings.h <100:1 100:89>]
COMMENT: comment [b2Settings.h <101:1 101:23>]
COMMENT: comment [b2Settings.h <104:1 104:80>]
COMMENT: comment [b2Settings.h <105:1 105:70>]
COMMENT: comment [b2Settings.h <109:1 109:81>]
COMMENT: comment [b2Settings.h <110:1 110:70>]
COMMENT: comment [b2Settings.h <114:1 114:88>]
COMMENT: comment [b2Settings.h <115:1 115:89>]
COMMENT: comment [b2Settings.h <116:1 116:18>]
COMMENT: comment [b2Settings.h <121:1 121:9>]
COMMENT: comment [b2Settings.h <123:1 123:67>]
COMMENT: comment [b2Settings.h <126:1 126:72>]
COMMENT: comment [b2Settings.h <129:1 129:73>]
COMMENT: comment [b2Settings.h <132:1 132:21>]
COMMENT: comment [b2Settings.h <134:1 134:62>]
COMMENT: comment [b2Settings.h <137:1 137:71>]
COMMENT: comment [b2Settings.h <140:1 140:22>]
COMMENT: comment [b2Settings.h <143:1 143:30>]
COMMENT: comment [b2Settings.h <144:1 144:57>]
COMMENT: comment [b2Settings.h <147:16 147:40>]
COMMENT: comment [b2Settings.h <148:16 148:40>]
COMMENT: comment [b2Settings.h <149:19 149:33>]
COMMENT: comment [b2Settings.h <152:1 152:21>]
COMMENT: comment [b2GrowableStack.h <1:1 17:3>]
COMMENT: comment [b2GrowableStack.h <24:1 24:65>]
COMMENT: comment [b2GrowableStack.h <25:1 25:69>]
COMMENT: comment [b2GrowableStack.h <26:1 26:39>]
