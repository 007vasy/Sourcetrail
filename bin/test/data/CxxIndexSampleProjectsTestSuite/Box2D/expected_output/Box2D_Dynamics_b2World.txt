FILE: b2World.cpp
FILE: b2World.h
FILE: b2Math.h
FILE: b2Settings.h
FILE: stddef.h non-indexed
FILE: corecrt.h non-indexed
FILE: vcruntime.h non-indexed
FILE: sal.h non-indexed
FILE: concurrencysal.h non-indexed
FILE: vadefs.h non-indexed
FILE: assert.h non-indexed
FILE: float.h non-indexed
FILE: math.h non-indexed
FILE: b2BlockAllocator.h
FILE: b2StackAllocator.h
FILE: b2ContactManager.h
FILE: b2BroadPhase.h
FILE: b2Collision.h
FILE: limits.h non-indexed
FILE: b2DynamicTree.h
FILE: b2GrowableStack.h
FILE: string.h non-indexed
FILE: corecrt_memory.h non-indexed
FILE: corecrt_memcpy_s.h non-indexed
FILE: errno.h non-indexed
FILE: vcruntime_string.h non-indexed
FILE: corecrt_wstring.h non-indexed
FILE: algorithm non-indexed
FILE: xmemory non-indexed
FILE: xmemory0 non-indexed
FILE: cstdint non-indexed
FILE: yvals.h non-indexed
FILE: yvals_core.h non-indexed
FILE: xkeycheck.h non-indexed
FILE: crtdefs.h non-indexed
FILE: crtdbg.h non-indexed
FILE: vcruntime_new_debug.h non-indexed
FILE: vcruntime_new.h non-indexed
FILE: use_ansi.h non-indexed
FILE: stdint.h non-indexed
FILE: cstdlib non-indexed
FILE: stdlib.h non-indexed
FILE: corecrt_malloc.h non-indexed
FILE: corecrt_search.h non-indexed
FILE: corecrt_wstdlib.h non-indexed
FILE: limits non-indexed
FILE: ymath.h non-indexed
FILE: cfloat non-indexed
FILE: climits non-indexed
FILE: cmath non-indexed
FILE: xtgmath.h non-indexed
FILE: xtr1common non-indexed
FILE: cwchar non-indexed
FILE: wchar.h non-indexed
FILE: corecrt_wconio.h non-indexed
FILE: corecrt_stdio_config.h non-indexed
FILE: corecrt_wctype.h non-indexed
FILE: corecrt_wdirect.h non-indexed
FILE: corecrt_wio.h non-indexed
FILE: corecrt_share.h non-indexed
FILE: corecrt_wprocess.h non-indexed
FILE: corecrt_wstdio.h non-indexed
FILE: corecrt_wtime.h non-indexed
FILE: stat.h non-indexed
FILE: types.h non-indexed
FILE: xstddef non-indexed
FILE: cstddef non-indexed
FILE: initializer_list non-indexed
FILE: new non-indexed
FILE: exception non-indexed
FILE: type_traits non-indexed
FILE: malloc.h non-indexed
FILE: vcruntime_exception.h non-indexed
FILE: eh.h non-indexed
FILE: corecrt_terminate.h non-indexed
FILE: xutility non-indexed
FILE: utility non-indexed
FILE: iosfwd non-indexed
FILE: cstdio non-indexed
FILE: stdio.h non-indexed
FILE: cstring non-indexed
FILE: xatomic0.h non-indexed
FILE: intrin0.h non-indexed
FILE: b2WorldCallbacks.h
FILE: b2TimeStep.h
FILE: b2Body.h
FILE: b2Shape.h
FILE: memory non-indexed
FILE: typeinfo non-indexed
FILE: vcruntime_typeinfo.h non-indexed
FILE: b2Fixture.h
FILE: b2Island.h
FILE: b2PulleyJoint.h
FILE: b2Joint.h
FILE: b2Contact.h
FILE: b2ContactSolver.h
FILE: b2CircleShape.h
FILE: b2EdgeShape.h
FILE: b2ChainShape.h
FILE: b2PolygonShape.h
FILE: b2TimeOfImpact.h
FILE: b2Distance.h
FILE: b2Draw.h
FILE: b2Timer.h
SYMBOL_MACRO: B2_WORLD_H [b2World.h <20:9 20:18>]
SYMBOL_MACRO: B2_MATH_H [b2Math.h <20:9 20:17>]
SYMBOL_MACRO: B2_SETTINGS_H [b2Settings.h <20:9 20:21>]
SYMBOL_MACRO: b2DEBUG [b2Settings.h <27:10 27:16>]
SYMBOL_MACRO: B2_NOT_USED [b2Settings.h <30:9 <30:9 30:19> 30:33>]
SYMBOL_MACRO: b2Assert [b2Settings.h <31:9 <31:9 31:16> 31:28>]
SYMBOL_MACRO: b2_maxFloat [b2Settings.h <42:9 <42:9 42:19> 42:21>]
SYMBOL_MACRO: b2_epsilon [b2Settings.h <43:9 <43:9 43:18> 43:20>]
SYMBOL_MACRO: b2_pi [b2Settings.h <44:9 <44:9 44:13> 44:16>]
SYMBOL_MACRO: b2_maxManifoldPoints [b2Settings.h <54:9 <54:9 54:28> 54:29>]
SYMBOL_MACRO: b2_maxPolygonVertices [b2Settings.h <58:9 <58:9 58:29> 58:30>]
SYMBOL_MACRO: b2_aabbExtension [b2Settings.h <63:9 <63:9 63:24> 63:26>]
SYMBOL_MACRO: b2_aabbMultiplier [b2Settings.h <68:9 <68:9 68:25> 68:27>]
SYMBOL_MACRO: b2_linearSlop [b2Settings.h <72:9 <72:9 72:21> 72:24>]
SYMBOL_MACRO: b2_angularSlop [b2Settings.h <76:9 <76:9 76:22> 76:47>]
SYMBOL_MACRO: b2_polygonRadius [b2Settings.h <81:9 <81:9 81:24> 81:47>]
SYMBOL_MACRO: b2_maxSubSteps [b2Settings.h <84:9 <84:9 84:22> 84:25>]
SYMBOL_MACRO: b2_maxTOIContacts [b2Settings.h <90:9 <90:9 90:25> 90:28>]
SYMBOL_MACRO: b2_velocityThreshold [b2Settings.h <94:9 <94:9 94:28> 94:30>]
SYMBOL_MACRO: b2_maxLinearCorrection [b2Settings.h <98:9 <98:9 98:30> 98:32>]
SYMBOL_MACRO: b2_maxAngularCorrection [b2Settings.h <102:9 <102:9 102:31> 102:55>]
SYMBOL_MACRO: b2_maxTranslation [b2Settings.h <106:9 <106:9 106:25> 106:28>]
SYMBOL_MACRO: b2_maxTranslationSquared [b2Settings.h <107:9 <107:9 107:32> 107:71>]
SYMBOL_MACRO: b2_maxRotation [b2Settings.h <111:9 <111:9 111:22> 111:39>]
SYMBOL_MACRO: b2_maxRotationSquared [b2Settings.h <112:9 <112:9 112:29> 112:63>]
SYMBOL_MACRO: b2_baumgarte [b2Settings.h <117:9 <117:9 117:20> 117:24>]
SYMBOL_MACRO: b2_toiBaugarte [b2Settings.h <118:9 <118:9 118:22> 118:26>]
SYMBOL_MACRO: b2_timeToSleep [b2Settings.h <124:9 <124:9 124:22> 124:26>]
SYMBOL_MACRO: b2_linearSleepTolerance [b2Settings.h <127:9 <127:9 127:31> 127:33>]
SYMBOL_MACRO: b2_angularSleepTolerance [b2Settings.h <130:9 <130:9 130:32> 130:55>]
SYMBOL_MACRO: b2Sqrt [b2Math.h <49:9 <49:9 49:14> 49:25>]
SYMBOL_MACRO: b2Atan2 [b2Math.h <50:9 <50:9 50:15> 50:33>]
SYMBOL_MACRO: B2_BLOCK_ALLOCATOR_H [b2BlockAllocator.h <20:9 20:28>]
SYMBOL_MACRO: B2_STACK_ALLOCATOR_H [b2StackAllocator.h <20:9 20:28>]
SYMBOL_MACRO: B2_CONTACT_MANAGER_H [b2ContactManager.h <20:9 20:28>]
SYMBOL_MACRO: B2_BROAD_PHASE_H [b2BroadPhase.h <20:9 20:24>]
SYMBOL_MACRO: B2_COLLISION_H [b2Collision.h <20:9 20:22>]
SYMBOL_MACRO: B2_DYNAMIC_TREE_H [b2DynamicTree.h <20:9 20:25>]
SYMBOL_MACRO: B2_GROWABLE_STACK_H [b2GrowableStack.h <20:9 20:27>]
SYMBOL_MACRO: b2_nullNode [b2DynamicTree.h <25:9 <25:9 25:19> 25:23>]
SYMBOL_MACRO: B2_WORLD_CALLBACKS_H [b2WorldCallbacks.h <20:9 20:28>]
SYMBOL_MACRO: B2_TIME_STEP_H [b2TimeStep.h <20:9 20:22>]
SYMBOL_MACRO: B2_BODY_H [b2Body.h <20:9 20:17>]
SYMBOL_MACRO: B2_SHAPE_H [b2Shape.h <20:9 20:18>]
SYMBOL_MACRO: B2_FIXTURE_H [b2Fixture.h <20:9 20:20>]
SYMBOL_MACRO: B2_ISLAND_H [b2Island.h <20:9 20:19>]
SYMBOL_MACRO: B2_PULLEY_JOINT_H [b2PulleyJoint.h <20:9 20:25>]
SYMBOL_MACRO: B2_JOINT_H [b2Joint.h <20:9 20:18>]
SYMBOL_MACRO: B2_CONTACT_H [b2Contact.h <20:9 20:20>]
SYMBOL_MACRO: B2_CONTACT_SOLVER_H [b2ContactSolver.h <20:9 20:27>]
SYMBOL_MACRO: B2_CIRCLE_SHAPE_H [b2CircleShape.h <20:9 20:25>]
SYMBOL_MACRO: B2_EDGE_SHAPE_H [b2EdgeShape.h <20:9 20:23>]
SYMBOL_MACRO: B2_CHAIN_SHAPE_H [b2ChainShape.h <20:9 20:24>]
SYMBOL_MACRO: B2_POLYGON_SHAPE_H [b2PolygonShape.h <20:9 20:26>]
SYMBOL_MACRO: B2_TIME_OF_IMPACT_H [b2TimeOfImpact.h <20:9 20:27>]
SYMBOL_MACRO: B2_DISTANCE_H [b2Distance.h <21:9 21:21>]
SYMBOL_MACRO: B2_DRAW_H [b2Draw.h <20:9 20:17>]
SYMBOL_MACRO: B2_TIMER_H [b2Timer.h <20:9 20:18>]
SYMBOL_TYPEDEF: int8 [b2Settings.h <33:21 33:24>]
SYMBOL_BUILTIN_TYPE: signed char
SYMBOL_TYPEDEF: int16 [b2Settings.h <34:22 34:26>]
SYMBOL_BUILTIN_TYPE: short
SYMBOL_TYPEDEF: int32 [b2Settings.h <35:20 35:24>]
SYMBOL_BUILTIN_TYPE: int
SYMBOL_TYPEDEF: uint8 [b2Settings.h <36:23 36:27>]
SYMBOL_BUILTIN_TYPE: unsigned char
SYMBOL_TYPEDEF: uint16 [b2Settings.h <37:24 37:29>]
SYMBOL_BUILTIN_TYPE: unsigned short
SYMBOL_TYPEDEF: uint32 [b2Settings.h <38:22 38:27>]
SYMBOL_BUILTIN_TYPE: unsigned int
SYMBOL_TYPEDEF: float32 [b2Settings.h <39:15 39:21>]
SYMBOL_BUILTIN_TYPE: float
SYMBOL_TYPEDEF: float64 [b2Settings.h <40:16 40:22>]
SYMBOL_BUILTIN_TYPE: double
SYMBOL_FUNCTION: void * b2Alloc(int32) [b2Settings.h <135:1 <135:7 135:13> 135:25>]
SYMBOL_BUILTIN_TYPE: void
SYMBOL_FUNCTION: void b2Free(void *) [b2Settings.h <138:1 <138:6 138:11> 138:22>]
SYMBOL_FUNCTION: void b2Log(const char *) [b2Settings.h <141:1 <141:6 141:10> 141:35>]
SYMBOL_BUILTIN_TYPE: char
SYMBOL_STRUCT: b2Version [b2Settings.h <145:1 <145:8 145:16> 150:1>]
SYMBOL_FIELD: public int32 b2Version::major [b2Settings.h <147:8 147:12>]
SYMBOL_FIELD: public int32 b2Version::minor [b2Settings.h <148:8 148:12>]
SYMBOL_FIELD: public int32 b2Version::revision [b2Settings.h <149:8 149:15>]
SYMBOL_GLOBAL_VARIABLE: b2Version b2_version [b2Settings.h <153:18 153:27>]
SYMBOL_FUNCTION: bool b2IsValid(float32) [b2Math.h <26:1 <26:1 <26:13 26:21> 26:32> 30:1>]
SYMBOL_BUILTIN_TYPE: bool
SYMBOL_FUNCTION: float32 b2InvSqrt(float32) [b2Math.h <33:1 <33:1 <33:16 33:24> 33:35> 47:1>]
SYMBOL_UNION: b2InvSqrt::anonymous union (b2Math.h<35:2>) [b2Math.h <35:2 <35:2 35:6> 39:2>]
SYMBOL_FIELD: public float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <37:11 37:11>]
SYMBOL_FIELD: public int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <38:9 38:9>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::() [b2Math.h <35:2 <35:2 35:6> 35:6>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::(const b2InvSqrt::anonymous union (b2Math.h<35:2>) &) [b2Math.h <35:2 <35:2 35:6> 35:6>]
SYMBOL_METHOD: public void b2InvSqrt::anonymous union (b2Math.h<35:2>)::(b2InvSqrt::anonymous union (b2Math.h<35:2>) &&) [b2Math.h <35:2 <35:2 35:6> 35:6>]
QUALIFIER: b2Vec2 [b2Math.h <380:8 380:14>]
SYMBOL_STRUCT: b2Vec2 [b2Math.h <53:1 <53:8 53:13> 141:1>]
SYMBOL_STRUCT: b2Vec2 [b2WorldCallbacks.h <24:8 24:13>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2() [b2Math.h <56:2 <56:2 <56:2 56:7> 56:9> 56:12>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(float32, float32) [b2Math.h <59:2 <59:2 <59:2 59:7> 59:33> 59:53>]
SYMBOL_FIELD: public float32 b2Vec2::x [b2Math.h <140:10 140:10>]
SYMBOL_FIELD: public float32 b2Vec2::y [b2Math.h <140:13 140:13>]
SYMBOL_METHOD: public void b2Vec2::SetZero() [b2Math.h <62:2 <62:2 <62:7 62:13> 62:15> 62:39>]
SYMBOL_METHOD: public void b2Vec2::Set(float32, float32) [b2Math.h <65:2 <65:2 <65:7 65:9> 65:33> 65:53>]
SYMBOL_METHOD: public b2Vec2 b2Vec2::operator-() const [b2Math.h <68:2 <68:2 <68:9 68:18> 68:26> 68:65>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public float32 b2Vec2::operator()(int32) const [b2Math.h <71:2 <71:2 <71:10 71:20> 71:36> 74:2>]
SYMBOL_METHOD: public float32 & b2Vec2::operator()(int32) [b2Math.h <77:2 <77:2 <77:11 77:21> 77:31> 80:2>]
SYMBOL_METHOD: public void b2Vec2::operator+=(const b2Vec2 &) [b2Math.h <83:2 <83:2 <83:7 83:17> 83:35> 86:2>]
SYMBOL_METHOD: public void b2Vec2::operator-=(const b2Vec2 &) [b2Math.h <89:2 <89:2 <89:7 89:17> 89:35> 92:2>]
SYMBOL_METHOD: public void b2Vec2::operator*=(float32) [b2Math.h <95:2 <95:2 <95:7 95:17> 95:29> 98:2>]
SYMBOL_METHOD: public float32 b2Vec2::Length() const [b2Math.h <101:2 <101:2 <101:10 101:15> 101:23> 104:2>]
SYMBOL_FUNCTION: float sqrtf(float)
SYMBOL_METHOD: public float32 b2Vec2::LengthSquared() const [b2Math.h <108:2 <108:2 <108:10 108:22> 108:30> 111:2>]
SYMBOL_METHOD: public float32 b2Vec2::Normalize() [b2Math.h <114:2 <114:2 <114:10 114:18> 114:20> 126:2>]
SYMBOL_METHOD: public bool b2Vec2::IsValid() const [b2Math.h <129:2 <129:2 <129:7 129:13> 129:21> 132:2>]
SYMBOL_METHOD: public b2Vec2 b2Vec2::Skew() const [b2Math.h <135:2 <135:2 <135:9 135:12> 135:20> 138:2>]
SYMBOL_METHOD: public void b2Vec2::b2Vec2(const b2Vec2 &) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public void b2Vec2::~b2Vec2() [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_METHOD: public b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <53:8 <53:8 53:13> 53:13>]
SYMBOL_STRUCT: b2Vec3 [b2Math.h <144:1 <144:8 144:13> 180:1>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3() [b2Math.h <147:2 <147:2 <147:2 147:7> 147:9> 147:12>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <150:2 <150:2 <150:2 150:7> 150:46> 150:74>]
SYMBOL_FIELD: public float32 b2Vec3::x [b2Math.h <179:10 179:10>]
SYMBOL_FIELD: public float32 b2Vec3::y [b2Math.h <179:13 179:13>]
SYMBOL_FIELD: public float32 b2Vec3::z [b2Math.h <179:16 179:16>]
SYMBOL_METHOD: public void b2Vec3::SetZero() [b2Math.h <153:2 <153:2 <153:7 153:13> 153:15> 153:49>]
SYMBOL_METHOD: public void b2Vec3::Set(float32, float32, float32) [b2Math.h <156:2 <156:2 <156:7 156:9> 156:45> 156:73>]
SYMBOL_METHOD: public b2Vec3 b2Vec3::operator-() const [b2Math.h <159:2 <159:2 <159:9 159:18> 159:26> 159:69>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(b2Vec3 &&) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public void b2Vec3::operator+=(const b2Vec3 &) [b2Math.h <162:2 <162:2 <162:7 162:17> 162:35> 165:2>]
SYMBOL_METHOD: public void b2Vec3::operator-=(const b2Vec3 &) [b2Math.h <168:2 <168:2 <168:7 168:17> 168:35> 171:2>]
SYMBOL_METHOD: public void b2Vec3::operator*=(float32) [b2Math.h <174:2 <174:2 <174:7 174:17> 174:29> 177:2>]
SYMBOL_METHOD: public void b2Vec3::b2Vec3(const b2Vec3 &) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public b2Vec3 & b2Vec3::operator=(b2Vec3 &&) [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_METHOD: public void b2Vec3::~b2Vec3() [b2Math.h <144:8 <144:8 144:13> 144:13>]
SYMBOL_STRUCT: b2Mat22 [b2Math.h <183:1 <183:8 183:14> 254:1>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22() [b2Math.h <186:2 <186:2 <186:2 186:8> 186:10> 186:13>]
SYMBOL_FIELD: public b2Vec2 b2Mat22::ex [b2Math.h <253:9 253:10>]
SYMBOL_FIELD: public b2Vec2 b2Mat22::ey [b2Math.h <253:13 253:14>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <189:2 <189:2 <189:2 189:8> 189:44> 193:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(float32, float32, float32, float32) [b2Math.h <196:2 <196:2 <196:2 196:8> 196:60> 200:2>]
SYMBOL_METHOD: public void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) [b2Math.h <203:2 <203:2 <203:7 203:9> 203:45> 207:2>]
SYMBOL_METHOD: public void b2Mat22::SetIdentity() [b2Math.h <210:2 <210:2 <210:7 210:17> 210:19> 214:2>]
SYMBOL_METHOD: public void b2Mat22::SetZero() [b2Math.h <217:2 <217:2 <217:7 217:13> 217:15> 221:2>]
SYMBOL_METHOD: public b2Mat22 b2Mat22::GetInverse() const [b2Math.h <223:2 <223:2 <223:10 223:19> 223:27> 235:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(b2Mat22 &&) [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_METHOD: public b2Vec2 b2Mat22::Solve(const b2Vec2 &) const [b2Math.h <239:2 <239:2 <239:9 239:13> 239:36> 251:2>]
SYMBOL_METHOD: public void b2Mat22::b2Mat22(const b2Mat22 &) [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_METHOD: public void b2Mat22::~b2Mat22() [b2Math.h <183:8 <183:8 183:14> 183:14>]
SYMBOL_STRUCT: b2Mat33 [b2Math.h <257:1 <257:8 257:14> 296:1>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33() [b2Math.h <260:2 <260:2 <260:2 260:8> 260:10> 260:13>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ex [b2Math.h <295:9 295:10>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ey [b2Math.h <295:13 295:14>]
SYMBOL_FIELD: public b2Vec3 b2Mat33::ez [b2Math.h <295:17 295:18>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) [b2Math.h <263:2 <263:2 <263:2 263:8> 263:62> 268:2>]
SYMBOL_METHOD: public void b2Mat33::SetZero() [b2Math.h <271:2 <271:2 <271:7 271:13> 271:15> 276:2>]
SYMBOL_METHOD: public b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const [b2Math.h <280:2 <280:9 280:15> 280:38>]
SYMBOL_METHOD: public b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const [b2Math.h <285:2 <285:9 285:15> 285:38>]
SYMBOL_METHOD: public void b2Mat33::GetInverse22(b2Mat33 *) const [b2Math.h <289:2 <289:7 289:18> 289:36>]
SYMBOL_METHOD: public void b2Mat33::GetSymInverse33(b2Mat33 *) const [b2Math.h <293:2 <293:7 293:21> 293:39>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(const b2Mat33 &) [b2Math.h <257:8 <257:8 257:14> 257:14>]
SYMBOL_METHOD: public void b2Mat33::b2Mat33(b2Mat33 &&) [b2Math.h <257:8 <257:8 257:14> 257:14>]
SYMBOL_STRUCT: b2Rot [b2Math.h <299:1 <299:8 299:12> 346:1>]
SYMBOL_METHOD: public void b2Rot::b2Rot() [b2Math.h <301:2 <301:2 <301:2 301:6> 301:8> 301:11>]
SYMBOL_METHOD: public void b2Rot::b2Rot(float32) [b2Math.h <304:2 <304:2 <304:11 304:15> 304:30> 309:2>]
SYMBOL_FIELD: public float32 b2Rot::s [b2Math.h <345:10 345:10>]
SYMBOL_FUNCTION: float sinf(float)
SYMBOL_FIELD: public float32 b2Rot::c [b2Math.h <345:13 345:13>]
SYMBOL_FUNCTION: float cosf(float)
SYMBOL_METHOD: public void b2Rot::Set(float32) [b2Math.h <312:2 <312:2 <312:7 312:9> 312:24> 317:2>]
SYMBOL_METHOD: public void b2Rot::SetIdentity() [b2Math.h <320:2 <320:2 <320:7 320:17> 320:19> 324:2>]
SYMBOL_METHOD: public float32 b2Rot::GetAngle() const [b2Math.h <327:2 <327:2 <327:10 327:17> 327:25> 330:2>]
SYMBOL_FUNCTION: float atan2f(float, float)
SYMBOL_METHOD: public b2Vec2 b2Rot::GetXAxis() const [b2Math.h <333:2 <333:2 <333:9 333:16> 333:24> 336:2>]
SYMBOL_METHOD: public b2Vec2 b2Rot::GetYAxis() const [b2Math.h <339:2 <339:2 <339:9 339:16> 339:24> 342:2>]
SYMBOL_METHOD: public void b2Rot::b2Rot(const b2Rot &) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public void b2Rot::b2Rot(b2Rot &&) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public void b2Rot::~b2Rot() [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public b2Rot & b2Rot::operator=(const b2Rot &) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_METHOD: public b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <299:8 <299:8 299:12> 299:12>]
SYMBOL_STRUCT: b2Transform [b2Math.h <350:1 <350:8 350:18> 374:1>]
SYMBOL_STRUCT: b2Transform [b2WorldCallbacks.h <25:8 25:18>]
SYMBOL_METHOD: public void b2Transform::b2Transform() [b2Math.h <353:2 <353:2 <353:2 353:12> 353:14> 353:17>]
SYMBOL_FIELD: public b2Vec2 b2Transform::p [b2Math.h <372:9 372:9>]
SYMBOL_FIELD: public b2Rot b2Transform::q [b2Math.h <373:8 373:8>]
SYMBOL_METHOD: public void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) [b2Math.h <356:2 <356:2 <356:2 356:12> 356:59> 356:89>]
SYMBOL_METHOD: public void b2Transform::SetIdentity() [b2Math.h <359:2 <359:2 <359:7 359:17> 359:19> 363:2>]
SYMBOL_METHOD: public void b2Transform::Set(const b2Vec2 &, float32) [b2Math.h <366:2 <366:2 <366:7 366:9> 366:48> 370:2>]
SYMBOL_METHOD: public void b2Transform::b2Transform(const b2Transform &) [b2Math.h <350:8 <350:8 350:18> 350:18>]
SYMBOL_METHOD: public void b2Transform::b2Transform(b2Transform &&) [b2Math.h <350:8 <350:8 350:18> 350:18>]
SYMBOL_METHOD: public void b2Transform::~b2Transform() [b2Math.h <350:8 <350:8 350:18> 350:18>]
QUALIFIER: b2Sweep [b2Math.h <697:13 697:19>]
QUALIFIER: b2Sweep [b2Math.h <707:13 707:19>]
QUALIFIER: b2Sweep [b2Math.h <717:13 717:19>]
SYMBOL_STRUCT: b2Sweep [b2Math.h <380:1 <380:8 380:14> 400:1>]
SYMBOL_METHOD: public void b2Sweep::GetTransform(b2Transform *, float32) const [b2Math.h <384:2 <384:7 384:18> 384:56>]
SYMBOL_METHOD: public void b2Sweep::GetTransform(b2Transform *, float32) const [b2Math.h <697:1 <697:22 697:33> 705:1>]
SYMBOL_METHOD: public void b2Sweep::Advance(float32) [b2Math.h <388:2 <388:7 388:13> 388:28>]
SYMBOL_METHOD: public void b2Sweep::Advance(float32) [b2Math.h <707:1 <707:22 707:28> 714:1>]
SYMBOL_METHOD: public void b2Sweep::Normalize() [b2Math.h <391:2 <391:7 391:15> 391:17>]
SYMBOL_METHOD: public void b2Sweep::Normalize() [b2Math.h <717:1 <717:22 717:30> 723:1>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::localCenter [b2Math.h <393:9 393:19>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::c0 [b2Math.h <394:9 394:10>]
SYMBOL_FIELD: public b2Vec2 b2Sweep::c [b2Math.h <394:13 394:13>]
SYMBOL_FIELD: public float32 b2Sweep::a0 [b2Math.h <395:10 395:11>]
SYMBOL_FIELD: public float32 b2Sweep::a [b2Math.h <395:14 395:14>]
SYMBOL_FIELD: public float32 b2Sweep::alpha0 [b2Math.h <399:10 399:15>]
SYMBOL_METHOD: public void b2Sweep::b2Sweep(const b2Sweep &) [b2Math.h <380:8 <380:8 380:14> 380:14>]
SYMBOL_METHOD: public void b2Sweep::b2Sweep(b2Sweep &&) [b2Math.h <380:8 <380:8 380:14> 380:14>]
SYMBOL_METHOD: public void b2Sweep::~b2Sweep() [b2Math.h <380:8 <380:8 380:14> 380:14>]
SYMBOL_METHOD: public void b2Sweep::b2Sweep() [b2Math.h <380:8 <380:8 380:14> 380:14>]
SYMBOL_METHOD: public b2Sweep & b2Sweep::operator=(const b2Sweep &) [b2Math.h <380:8 <380:8 380:14> 380:14>]
SYMBOL_METHOD: public b2Sweep & b2Sweep::operator=(b2Sweep &&) [b2Math.h <380:8 <380:8 380:14> 380:14>]
SYMBOL_GLOBAL_VARIABLE: const b2Vec2 b2Vec2_zero [b2Math.h <403:21 403:31>]
SYMBOL_FUNCTION: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <406:1 <406:1 <406:16 406:20> 406:54> 409:1>]
SYMBOL_FUNCTION: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2Math.h <412:1 <412:1 <412:16 412:22> 412:56> 415:1>]
SYMBOL_FUNCTION: b2Vec2 b2Cross(const b2Vec2 &, float32) [b2Math.h <419:1 <419:1 <419:15 419:21> 419:49> 422:1>]
SYMBOL_FUNCTION: b2Vec2 b2Cross(float32, const b2Vec2 &) [b2Math.h <426:1 <426:1 <426:15 426:21> 426:49> 429:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <433:1 <433:1 <433:15 433:19> 433:54> 436:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) [b2Math.h <440:1 <440:1 <440:15 440:20> 440:55> 443:1>]
SYMBOL_FUNCTION: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <446:1 <446:1 <446:15 446:24> 446:59> 449:1>]
SYMBOL_FUNCTION: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <452:1 <452:1 <452:15 452:24> 452:59> 455:1>]
SYMBOL_FUNCTION: b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <457:1 <457:1 <457:15 457:24> 457:53> 460:1>]
SYMBOL_FUNCTION: bool operator==(const b2Vec2 &, const b2Vec2 &) [b2Math.h <462:1 <462:1 <462:13 462:23> 462:58> 465:1>]
SYMBOL_FUNCTION: bool operator!=(const b2Vec2 &, const b2Vec2 &) [b2Math.h <467:1 <467:1 <467:13 467:23> 467:58> 470:1>]
SYMBOL_FUNCTION: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) [b2Math.h <472:1 <472:1 <472:16 472:25> 472:59> 476:1>]
SYMBOL_FUNCTION: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) [b2Math.h <478:1 <478:1 <478:16 478:32> 478:66> 482:1>]
SYMBOL_FUNCTION: b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <484:1 <484:1 <484:15 484:24> 484:53> 487:1>]
SYMBOL_FUNCTION: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <490:1 <490:1 <490:15 490:24> 490:59> 493:1>]
SYMBOL_FUNCTION: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) [b2Math.h <496:1 <496:1 <496:15 496:24> 496:59> 499:1>]
SYMBOL_FUNCTION: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) [b2Math.h <502:1 <502:1 <502:16 502:20> 502:54> 505:1>]
SYMBOL_FUNCTION: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) [b2Math.h <508:1 <508:1 <508:15 508:21> 508:55> 511:1>]
SYMBOL_FUNCTION: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) [b2Math.h <513:1 <513:1 <513:16 513:25> 513:62> 516:1>]
SYMBOL_FUNCTION: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) [b2Math.h <519:1 <519:1 <519:16 519:20> 519:56> 522:1>]
SYMBOL_FUNCTION: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) [b2Math.h <525:1 <525:1 <525:16 525:21> 525:57> 530:1>]
SYMBOL_FUNCTION: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) [b2Math.h <533:1 <533:1 <533:15 533:19> 533:54> 536:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) [b2Math.h <539:1 <539:1 <539:15 539:21> 539:56> 542:1>]
SYMBOL_FUNCTION: b2Rot b2Mul(const b2Rot &, const b2Rot &) [b2Math.h <545:1 <545:1 <545:14 545:18> 545:50> 555:1>]
SYMBOL_FUNCTION: b2Rot b2MulT(const b2Rot &, const b2Rot &) [b2Math.h <558:1 <558:1 <558:14 558:19> 558:51> 568:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <571:1 <571:1 <571:15 571:19> 571:52> 574:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2Math.h <577:1 <577:1 <577:15 577:20> 577:53> 580:1>]
SYMBOL_FUNCTION: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Math.h <582:1 <582:1 <582:15 582:19> 582:58> 588:1>]
SYMBOL_FUNCTION: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) [b2Math.h <590:1 <590:1 <590:15 590:20> 590:59> 598:1>]
SYMBOL_FUNCTION: b2Transform b2Mul(const b2Transform &, const b2Transform &) [b2Math.h <602:1 <602:1 <602:20 602:24> 602:68> 608:1>]
SYMBOL_FUNCTION: b2Transform b2MulT(const b2Transform &, const b2Transform &) [b2Math.h <612:1 <612:1 <612:20 612:25> 612:69> 618:1>]
SYMBOL_FUNCTION: T b2Abs<typename T>(T) [b2Math.h <620:1 <621:1 <621:10 621:14> 621:19> 624:1>]
SYMBOL_FUNCTION: float b2Abs<float>(float) [b2Math.h <621:1 <621:1 <621:10 621:14> 621:19> 624:1>]
SYMBOL_FUNCTION: b2Vec2 b2Abs<b2Vec2>(b2Vec2) [b2Math.h <621:1 <621:10 621:14> 624:1>]
SYMBOL_FUNCTION: b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <626:1 <626:1 <626:15 626:19> 626:36> 629:1>]
SYMBOL_FUNCTION: b2Mat22 b2Abs(const b2Mat22 &) [b2Math.h <631:1 <631:1 <631:16 631:20> 631:38> 634:1>]
SYMBOL_FUNCTION: T b2Min<typename T>(T, T) [b2Math.h <636:1 <637:1 <637:10 637:14> 637:24> 640:1>]
SYMBOL_FUNCTION: float b2Min<float>(float, float) [b2Math.h <637:1 <637:1 <637:10 637:14> 637:24> 640:1>]
SYMBOL_FUNCTION: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) [b2Math.h <637:1 <637:10 637:14> 640:1>]
SYMBOL_FUNCTION: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Math.h <642:1 <642:1 <642:15 642:19> 642:53> 645:1>]
SYMBOL_FUNCTION: T b2Max<typename T>(T, T) [b2Math.h <647:1 <648:1 <648:10 648:14> 648:24> 651:1>]
SYMBOL_FUNCTION: float b2Max<float>(float, float) [b2Math.h <648:1 <648:1 <648:10 648:14> 648:24> 651:1>]
SYMBOL_FUNCTION: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) [b2Math.h <648:1 <648:10 648:14> 651:1>]
SYMBOL_FUNCTION: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Math.h <653:1 <653:1 <653:15 653:19> 653:53> 656:1>]
SYMBOL_FUNCTION: T b2Clamp<typename T>(T, T, T) [b2Math.h <658:1 <659:1 <659:10 659:16> 659:36> 662:1>]
SYMBOL_FUNCTION: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) [b2Math.h <664:1 <664:1 <664:15 664:21> 664:77> 667:1>]
SYMBOL_FUNCTION: void b2Swap<typename T>(T &, T &) [b2Math.h <669:1 <669:22 <669:34 669:39> 669:51> 674:1>]
SYMBOL_FUNCTION: uint32 b2NextPowerOfTwo(uint32) [b2Math.h <681:1 <681:1 <681:15 681:30> 681:40> 689:1>]
SYMBOL_FUNCTION: bool b2IsPowerOfTwo(uint32) [b2Math.h <691:1 <691:1 <691:13 691:26> 691:36> 695:1>]
SYMBOL_FUNCTION: void _wassert(const wchar_t *, const wchar_t *, unsigned int)
SYMBOL_FUNCTION: float floorf(float)
SYMBOL_GLOBAL_VARIABLE: const int32 b2_chunkSize [b2BlockAllocator.h <24:13 24:24>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_maxBlockSize [b2BlockAllocator.h <25:13 25:27>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_blockSizes [b2BlockAllocator.h <26:13 26:25>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_chunkArrayIncrement [b2BlockAllocator.h <27:13 27:34>]
SYMBOL_STRUCT: b2Block [b2BlockAllocator.h <29:8 29:14>]
SYMBOL_STRUCT: b2Chunk [b2BlockAllocator.h <30:8 30:14>]
SYMBOL_CLASS: b2BlockAllocator [b2BlockAllocator.h <35:1 <35:7 35:22> 60:1>]
SYMBOL_CLASS: b2BlockAllocator [b2ContactManager.h <27:7 27:22>]
SYMBOL_CLASS: b2BlockAllocator [b2Fixture.h <26:7 26:22>]
SYMBOL_CLASS: b2BlockAllocator [b2Joint.h <27:7 27:22>]
SYMBOL_CLASS: b2BlockAllocator [b2Contact.h <31:7 31:22>]
SYMBOL_METHOD: public void b2BlockAllocator::b2BlockAllocator() [b2BlockAllocator.h <38:2 <38:2 38:17> 38:19>]
SYMBOL_METHOD: public void b2BlockAllocator::~b2BlockAllocator() [b2BlockAllocator.h <39:2 <39:2 39:18> 39:20>]
SYMBOL_METHOD: public void * b2BlockAllocator::Allocate(int32) [b2BlockAllocator.h <42:2 <42:8 42:15> 42:27>]
SYMBOL_METHOD: public void b2BlockAllocator::Free(void *, int32) [b2BlockAllocator.h <45:2 <45:7 45:10> 45:31>]
SYMBOL_METHOD: public void b2BlockAllocator::Clear() [b2BlockAllocator.h <47:2 <47:7 47:11> 47:13>]
SYMBOL_FIELD: private b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.h <51:11 51:18>]
SYMBOL_FIELD: private int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.h <52:8 52:19>]
SYMBOL_FIELD: private int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.h <53:8 53:19>]
SYMBOL_FIELD: private b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.h <55:11 55:21>]
SYMBOL_FIELD: private static int32 [] b2BlockAllocator::s_blockSizes [b2BlockAllocator.h <57:15 57:26>]
SYMBOL_FIELD: private static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.h <58:15 58:31>]
SYMBOL_FIELD: private static bool b2BlockAllocator::s_blockSizeLookupInitialized [b2BlockAllocator.h <59:14 59:41>]
SYMBOL_METHOD: public void b2BlockAllocator::b2BlockAllocator(const b2BlockAllocator &) [b2BlockAllocator.h <35:7 <35:7 35:22> 35:22>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_stackSize [b2StackAllocator.h <24:13 24:24>]
SYMBOL_GLOBAL_VARIABLE: const int32 b2_maxStackEntries [b2StackAllocator.h <25:13 25:30>]
SYMBOL_STRUCT: b2StackEntry [b2StackAllocator.h <27:1 <27:8 27:19> 32:1>]
SYMBOL_FIELD: public char * b2StackEntry::data [b2StackAllocator.h <29:8 29:11>]
SYMBOL_FIELD: public int32 b2StackEntry::size [b2StackAllocator.h <30:8 30:11>]
SYMBOL_FIELD: public bool b2StackEntry::usedMalloc [b2StackAllocator.h <31:7 31:16>]
SYMBOL_METHOD: public void b2StackEntry::b2StackEntry(const b2StackEntry &) [b2StackAllocator.h <27:8 <27:8 27:19> 27:19>]
SYMBOL_METHOD: public void b2StackEntry::b2StackEntry(b2StackEntry &&) [b2StackAllocator.h <27:8 <27:8 27:19> 27:19>]
SYMBOL_METHOD: public void b2StackEntry::~b2StackEntry() [b2StackAllocator.h <27:8 <27:8 27:19> 27:19>]
SYMBOL_CLASS: b2StackAllocator [b2StackAllocator.h <37:1 <37:7 37:22> 58:1>]
SYMBOL_CLASS: b2StackAllocator [b2Island.h <28:7 28:22>]
SYMBOL_CLASS: b2StackAllocator [b2Contact.h <32:7 32:22>]
SYMBOL_CLASS: b2StackAllocator [b2ContactSolver.h <28:7 28:22>]
SYMBOL_METHOD: public void b2StackAllocator::b2StackAllocator() [b2StackAllocator.h <40:2 <40:2 40:17> 40:19>]
SYMBOL_METHOD: public void b2StackAllocator::~b2StackAllocator() [b2StackAllocator.h <41:2 <41:2 41:18> 41:20>]
SYMBOL_METHOD: public void * b2StackAllocator::Allocate(int32) [b2StackAllocator.h <43:2 <43:8 43:15> 43:27>]
SYMBOL_METHOD: public void b2StackAllocator::Free(void *) [b2StackAllocator.h <44:2 <44:7 44:10> 44:19>]
SYMBOL_METHOD: public int32 b2StackAllocator::GetMaxAllocation() const [b2StackAllocator.h <46:2 <46:8 46:23> 46:31>]
SYMBOL_FIELD: private char [] b2StackAllocator::m_data [b2StackAllocator.h <50:7 50:12>]
SYMBOL_FIELD: private int32 b2StackAllocator::m_index [b2StackAllocator.h <51:8 51:14>]
SYMBOL_FIELD: private int32 b2StackAllocator::m_allocation [b2StackAllocator.h <53:8 53:19>]
SYMBOL_FIELD: private int32 b2StackAllocator::m_maxAllocation [b2StackAllocator.h <54:8 54:22>]
SYMBOL_FIELD: private b2StackEntry [] b2StackAllocator::m_entries [b2StackAllocator.h <56:15 56:23>]
SYMBOL_FIELD: private int32 b2StackAllocator::m_entryCount [b2StackAllocator.h <57:8 57:19>]
SYMBOL_METHOD: public void b2StackAllocator::b2StackAllocator(const b2StackAllocator &) [b2StackAllocator.h <37:7 <37:7 37:22> 37:22>]
QUALIFIER: b2Shape [b2World.cpp <1035:7 1035:13>]
QUALIFIER: b2Shape [b2World.cpp <1047:7 1047:13>]
QUALIFIER: b2Shape [b2World.cpp <1056:7 1056:13>]
QUALIFIER: b2Shape [b2World.cpp <1091:7 1091:13>]
QUALIFIER: b2Shape [b2Shape.h <99:8 99:14>]
QUALIFIER: b2Shape [b2Shape.h <99:22 99:28>]
QUALIFIER: b2Shape [b2Fixture.h <112:2 112:8>]
QUALIFIER: b2Shape [b2Fixture.h <238:8 238:14>]
QUALIFIER: b2Shape [b2Contact.h <180:7 180:13>]
QUALIFIER: b2Shape [b2Contact.h <180:28 180:34>]
QUALIFIER: b2Shape [b2Contact.h <183:42 183:48>]
QUALIFIER: b2Shape [b2Contact.h <183:63 183:69>]
QUALIFIER: b2Shape [b2Contact.h <192:39 192:45>]
QUALIFIER: b2Shape [b2Contact.h <192:61 192:67>]
SYMBOL_CLASS: b2Shape [b2Collision.h <29:7 29:13>]
SYMBOL_CLASS: b2Shape [b2Shape.h <42:1 <42:7 42:13> 97:1>]
SYMBOL_CLASS: b2Shape [b2Distance.h <25:7 25:13>]
QUALIFIER: b2CircleShape [b2CircleShape.h <53:8 53:20>]
SYMBOL_CLASS: b2CircleShape [b2Collision.h <25:1 <30:7 30:19> 51:1>]
SYMBOL_CLASS: b2CircleShape [b2CircleShape.h <25:1 <25:7 25:19> 51:1>]
QUALIFIER: b2EdgeShape [b2EdgeShape.h <62:8 62:18>]
SYMBOL_CLASS: b2EdgeShape [b2Collision.h <27:1 <31:7 31:17> 60:1>]
SYMBOL_CLASS: b2EdgeShape [b2EdgeShape.h <27:1 <27:7 27:17> 60:1>]
SYMBOL_CLASS: b2EdgeShape [b2ChainShape.h <24:7 24:17>]
QUALIFIER: b2PolygonShape [b2PolygonShape.h <81:8 81:21>]
SYMBOL_CLASS: b2PolygonShape [b2Collision.h <28:1 <32:7 32:20> 79:1>]
SYMBOL_CLASS: b2PolygonShape [b2PolygonShape.h <28:1 <28:7 28:20> 79:1>]
SYMBOL_GLOBAL_VARIABLE: const uint8 b2_nullFeature [b2Collision.h <34:13 34:26>]
SYMBOL_STRUCT: b2ContactFeature [b2Collision.h <38:1 <38:8 38:23> 50:1>]
SYMBOL_ENUM: public b2ContactFeature::Type [b2Collision.h <40:2 <40:7 40:10> 44:2>]
SYMBOL_ENUM_CONSTANT: b2ContactFeature::Type::e_vertex [b2Collision.h <42:3 42:10>]
SYMBOL_ENUM_CONSTANT: b2ContactFeature::Type::e_face [b2Collision.h <43:3 43:8>]
SYMBOL_FIELD: public uint8 b2ContactFeature::indexA [b2Collision.h <46:8 46:13>]
SYMBOL_FIELD: public uint8 b2ContactFeature::indexB [b2Collision.h <47:8 47:13>]
SYMBOL_FIELD: public uint8 b2ContactFeature::typeA [b2Collision.h <48:8 48:12>]
SYMBOL_FIELD: public uint8 b2ContactFeature::typeB [b2Collision.h <49:8 49:12>]
SYMBOL_METHOD: public b2ContactFeature & b2ContactFeature::operator=(const b2ContactFeature &) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public b2ContactFeature & b2ContactFeature::operator=(b2ContactFeature &&) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public void b2ContactFeature::b2ContactFeature() [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public void b2ContactFeature::~b2ContactFeature() [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public void b2ContactFeature::b2ContactFeature(const b2ContactFeature &) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_METHOD: public void b2ContactFeature::b2ContactFeature(b2ContactFeature &&) [b2Collision.h <38:8 <38:8 38:23> 38:23>]
SYMBOL_UNION: b2ContactID [b2Collision.h <53:1 <53:7 53:17> 57:1>]
SYMBOL_FIELD: public b2ContactFeature b2ContactID::cf [b2Collision.h <55:19 55:20>]
SYMBOL_FIELD: public uint32 b2ContactID::key [b2Collision.h <56:9 56:11>]
SYMBOL_METHOD: public b2ContactID & b2ContactID::operator=(const b2ContactID &) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public b2ContactID & b2ContactID::operator=(b2ContactID &&) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public void b2ContactID::b2ContactID() [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public void b2ContactID::~b2ContactID() [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public void b2ContactID::b2ContactID(const b2ContactID &) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_METHOD: public void b2ContactID::b2ContactID(b2ContactID &&) [b2Collision.h <53:7 <53:7 53:17> 53:17>]
SYMBOL_STRUCT: b2ManifoldPoint [b2Collision.h <69:1 <69:8 69:22> 75:1>]
SYMBOL_FIELD: public b2Vec2 b2ManifoldPoint::localPoint [b2Collision.h <71:9 71:18>]
SYMBOL_FIELD: public float32 b2ManifoldPoint::normalImpulse [b2Collision.h <72:10 72:22>]
SYMBOL_FIELD: public float32 b2ManifoldPoint::tangentImpulse [b2Collision.h <73:10 73:23>]
SYMBOL_FIELD: public b2ContactID b2ManifoldPoint::id [b2Collision.h <74:14 74:15>]
SYMBOL_METHOD: public b2ManifoldPoint & b2ManifoldPoint::operator=(const b2ManifoldPoint &) [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_METHOD: public b2ManifoldPoint & b2ManifoldPoint::operator=(b2ManifoldPoint &&) [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_METHOD: public void b2ManifoldPoint::b2ManifoldPoint() [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_METHOD: public void b2ManifoldPoint::~b2ManifoldPoint() [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_METHOD: public void b2ManifoldPoint::b2ManifoldPoint(const b2ManifoldPoint &) [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_METHOD: public void b2ManifoldPoint::b2ManifoldPoint(b2ManifoldPoint &&) [b2Collision.h <69:8 <69:8 69:22> 69:22>]
SYMBOL_STRUCT: b2Manifold [b2Collision.h <93:1 <93:8 93:17> 107:1>]
SYMBOL_STRUCT: b2Manifold [b2WorldCallbacks.h <31:8 31:17>]
SYMBOL_ENUM: public b2Manifold::Type [b2Collision.h <95:2 <95:7 95:10> 100:2>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_circles [b2Collision.h <97:3 97:11>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_faceA [b2Collision.h <98:3 98:9>]
SYMBOL_ENUM_CONSTANT: b2Manifold::Type::e_faceB [b2Collision.h <99:3 99:9>]
SYMBOL_FIELD: public b2ManifoldPoint [] b2Manifold::points [b2Collision.h <102:18 102:23>]
SYMBOL_FIELD: public b2Vec2 b2Manifold::localNormal [b2Collision.h <103:9 103:19>]
SYMBOL_FIELD: public b2Vec2 b2Manifold::localPoint [b2Collision.h <104:9 104:18>]
SYMBOL_FIELD: public b2Manifold::Type b2Manifold::type [b2Collision.h <105:7 105:10>]
SYMBOL_FIELD: public int32 b2Manifold::pointCount [b2Collision.h <106:8 106:17>]
SYMBOL_METHOD: public b2Manifold & b2Manifold::operator=(const b2Manifold &) [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_METHOD: public b2Manifold & b2Manifold::operator=(b2Manifold &&) [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_METHOD: public void b2Manifold::b2Manifold() [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_METHOD: public void b2Manifold::b2Manifold(const b2Manifold &) [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_METHOD: public void b2Manifold::b2Manifold(b2Manifold &&) [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_METHOD: public void b2Manifold::~b2Manifold() [b2Collision.h <93:8 <93:8 93:17> 93:17>]
SYMBOL_STRUCT: b2WorldManifold [b2Collision.h <110:1 <110:8 110:22> 123:1>]
SYMBOL_METHOD: public void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) [b2Collision.h <116:2 <116:7 116:16> 118:45>]
SYMBOL_FIELD: public b2Vec2 b2WorldManifold::normal [b2Collision.h <120:9 120:14>]
SYMBOL_FIELD: public b2Vec2 [] b2WorldManifold::points [b2Collision.h <121:9 121:14>]
SYMBOL_FIELD: public float32 [] b2WorldManifold::separations [b2Collision.h <122:10 122:20>]
SYMBOL_ENUM: b2PointState [b2Collision.h <126:1 <126:6 126:17> 132:1>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_nullState [b2Collision.h <128:2 128:13>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_addState [b2Collision.h <129:2 129:12>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_persistState [b2Collision.h <130:2 130:16>]
SYMBOL_ENUM_CONSTANT: b2PointState::b2_removeState [b2Collision.h <131:2 131:15>]
SYMBOL_FUNCTION: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) [b2Collision.h <136:1 <136:6 136:21> 137:64>]
SYMBOL_STRUCT: b2ClipVertex [b2Collision.h <140:1 <140:8 140:19> 144:1>]
SYMBOL_FIELD: public b2Vec2 b2ClipVertex::v [b2Collision.h <142:9 142:9>]
SYMBOL_FIELD: public b2ContactID b2ClipVertex::id [b2Collision.h <143:14 143:15>]
SYMBOL_STRUCT: b2RayCastInput [b2Collision.h <147:1 <147:8 147:21> 151:1>]
SYMBOL_FIELD: public b2Vec2 b2RayCastInput::p1 [b2Collision.h <149:9 149:10>]
SYMBOL_FIELD: public b2Vec2 b2RayCastInput::p2 [b2Collision.h <149:13 149:14>]
SYMBOL_FIELD: public float32 b2RayCastInput::maxFraction [b2Collision.h <150:10 150:20>]
SYMBOL_METHOD: public void b2RayCastInput::b2RayCastInput() [b2Collision.h <147:8 <147:8 147:21> 147:21>]
SYMBOL_METHOD: public void b2RayCastInput::b2RayCastInput(const b2RayCastInput &) [b2Collision.h <147:8 <147:8 147:21> 147:21>]
SYMBOL_METHOD: public void b2RayCastInput::b2RayCastInput(b2RayCastInput &&) [b2Collision.h <147:8 <147:8 147:21> 147:21>]
SYMBOL_STRUCT: b2RayCastOutput [b2Collision.h <155:1 <155:8 155:22> 159:1>]
SYMBOL_FIELD: public b2Vec2 b2RayCastOutput::normal [b2Collision.h <157:9 157:14>]
SYMBOL_FIELD: public float32 b2RayCastOutput::fraction [b2Collision.h <158:10 158:17>]
SYMBOL_METHOD: public void b2RayCastOutput::b2RayCastOutput() [b2Collision.h <155:8 <155:8 155:22> 155:22>]
SYMBOL_METHOD: public void b2RayCastOutput::b2RayCastOutput(const b2RayCastOutput &) [b2Collision.h <155:8 <155:8 155:22> 155:22>]
SYMBOL_METHOD: public void b2RayCastOutput::b2RayCastOutput(b2RayCastOutput &&) [b2Collision.h <155:8 <155:8 155:22> 155:22>]
QUALIFIER: b2AABB [b2Collision.h <254:13 254:18>]
SYMBOL_STRUCT: b2AABB [b2World.h <29:8 29:13>]
SYMBOL_STRUCT: b2AABB [b2Collision.h <162:1 <162:8 162:13> 216:1>]
SYMBOL_METHOD: public bool b2AABB::IsValid() const [b2Collision.h <165:2 <165:7 165:13> 165:21>]
SYMBOL_METHOD: public bool b2AABB::IsValid() const [b2Collision.h <254:1 <254:21 254:27> 260:1>]
SYMBOL_METHOD: public b2Vec2 b2AABB::GetCenter() const [b2Collision.h <168:2 <168:2 <168:9 168:17> 168:25> 171:2>]
SYMBOL_FIELD: public b2Vec2 b2AABB::lowerBound [b2Collision.h <214:9 214:18>]
SYMBOL_FIELD: public b2Vec2 b2AABB::upperBound [b2Collision.h <215:9 215:18>]
SYMBOL_METHOD: public b2Vec2 b2AABB::GetExtents() const [b2Collision.h <174:2 <174:2 <174:9 174:18> 174:26> 177:2>]
SYMBOL_METHOD: public float32 b2AABB::GetPerimeter() const [b2Collision.h <180:2 <180:2 <180:10 180:21> 180:29> 185:2>]
SYMBOL_METHOD: public void b2AABB::Combine(const b2AABB &) [b2Collision.h <188:2 <188:2 <188:7 188:13> 188:33> 192:2>]
SYMBOL_METHOD: public void b2AABB::Combine(const b2AABB &, const b2AABB &) [b2Collision.h <195:2 <195:2 <195:7 195:13> 195:55> 199:2>]
SYMBOL_METHOD: public bool b2AABB::Contains(const b2AABB &) const [b2Collision.h <202:2 <202:2 <202:7 202:14> 202:40> 210:2>]
SYMBOL_METHOD: public bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const [b2Collision.h <212:2 <212:7 212:13> 212:73>]
SYMBOL_METHOD: public void b2AABB::b2AABB() [b2Collision.h <162:8 <162:8 162:13> 162:13>]
SYMBOL_METHOD: public void b2AABB::b2AABB(const b2AABB &) [b2Collision.h <162:8 <162:8 162:13> 162:13>]
SYMBOL_METHOD: public void b2AABB::b2AABB(b2AABB &&) [b2Collision.h <162:8 <162:8 162:13> 162:13>]
SYMBOL_FUNCTION: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <219:1 <219:6 219:21> 221:60>]
SYMBOL_FUNCTION: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <224:1 <224:6 224:30> 226:63>]
SYMBOL_FUNCTION: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2Collision.h <229:1 <229:6 229:22> 231:63>]
SYMBOL_FUNCTION: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2Collision.h <234:1 <234:6 234:27> 236:63>]
SYMBOL_FUNCTION: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) [b2Collision.h <239:1 <239:6 239:28> 241:64>]
SYMBOL_FUNCTION: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) [b2Collision.h <244:1 <244:7 244:25> 245:64>]
SYMBOL_FUNCTION: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) [b2Collision.h <248:1 <248:6 248:18> 250:52>]
SYMBOL_FUNCTION: bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2Collision.h <262:1 <262:1 <262:13 262:25> 262:59> 275:1>]
SYMBOL_CLASS: b2GrowableStack<typename T, int32 N> [b2GrowableStack.h <27:1 <28:7 28:21> 82:1>]
SYMBOL_METHOD: public void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() [b2GrowableStack.h <31:2 <31:2 <31:2 31:16> 31:18> 36:2>]
SYMBOL_FIELD: private T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <78:5 78:11>]
SYMBOL_FIELD: private T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <79:4 79:10>]
SYMBOL_FIELD: private int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <80:8 80:14>]
SYMBOL_FIELD: private int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <81:8 81:17>]
SYMBOL_METHOD: public void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() [b2GrowableStack.h <38:2 <38:2 <38:2 38:17> 38:19> 45:2>]
SYMBOL_METHOD: public void b2GrowableStack<typename T, int32 N>::Push(const T &) [b2GrowableStack.h <47:2 <47:2 <47:7 47:10> 47:28> 63:2>]
SYMBOL_METHOD: public T b2GrowableStack<typename T, int32 N>::Pop() [b2GrowableStack.h <65:2 <65:2 <65:4 65:6> 65:8> 70:2>]
SYMBOL_METHOD: public int32 b2GrowableStack<typename T, int32 N>::GetCount() [b2GrowableStack.h <72:2 <72:2 <72:8 72:15> 72:17> 75:2>]
SYMBOL_CLASS: b2GrowableStack<int, 256> [b2GrowableStack.h <27:1 <28:7 28:21> 82:1>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::b2GrowableStack() [b2GrowableStack.h <31:2 <31:2 <31:2 31:16> 31:18> 36:2>]
SYMBOL_FIELD: private int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <78:5 78:11>]
SYMBOL_FIELD: private int [] b2GrowableStack<int, 256>::m_array [b2GrowableStack.h <79:4 79:10>]
SYMBOL_FIELD: private int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <80:8 80:14>]
SYMBOL_FIELD: private int32 b2GrowableStack<int, 256>::m_capacity [b2GrowableStack.h <81:8 81:17>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::~b2GrowableStack() [b2GrowableStack.h <38:2 <38:2 <38:2 38:17> 38:19> 45:2>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::Push(const int &) [b2GrowableStack.h <47:2 <47:2 <47:7 47:10> 47:28> 63:2>]
SYMBOL_FUNCTION: void * memcpy(void *, const void *, size_t)
SYMBOL_METHOD: public int b2GrowableStack<int, 256>::Pop() [b2GrowableStack.h <65:2 <65:2 <65:4 65:6> 65:8> 70:2>]
SYMBOL_METHOD: public int32 b2GrowableStack<int, 256>::GetCount() [b2GrowableStack.h <72:2 <72:2 <72:8 72:15> 72:17> 75:2>]
SYMBOL_METHOD: public void b2GrowableStack<int, 256>::b2GrowableStack(const b2GrowableStack<int, 256> &) [b2GrowableStack.h <28:7 <28:7 28:21> 28:21>]
SYMBOL_STRUCT: b2TreeNode [b2DynamicTree.h <28:1 <28:8 28:17> 51:1>]
SYMBOL_METHOD: public bool b2TreeNode::IsLeaf() const [b2DynamicTree.h <30:2 <30:2 <30:7 30:12> 30:20> 33:2>]
SYMBOL_FIELD: public int32 b2TreeNode::child1 [b2DynamicTree.h <46:8 46:13>]
SYMBOL_FIELD: public b2AABB b2TreeNode::aabb [b2DynamicTree.h <36:9 36:12>]
SYMBOL_FIELD: public void * b2TreeNode::userData [b2DynamicTree.h <38:8 38:15>]
SYMBOL_UNION: public b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) [b2DynamicTree.h <40:2 <40:2 40:6> 44:2>]
SYMBOL_FIELD: public int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent [b2DynamicTree.h <42:9 42:14>]
SYMBOL_FIELD: public int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next [b2DynamicTree.h <43:9 43:12>]
SYMBOL_FIELD: public b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: [b2DynamicTree.h <40:2 40:6>]
SYMBOL_FIELD: public int32 b2TreeNode::child2 [b2DynamicTree.h <47:8 47:13>]
SYMBOL_FIELD: public int32 b2TreeNode::height [b2DynamicTree.h <50:8 50:13>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <156:14 156:26>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <162:22 162:34>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <169:13 169:25>]
QUALIFIER: b2DynamicTree [b2DynamicTree.h <204:13 204:25>]
SYMBOL_CLASS: b2DynamicTree [b2DynamicTree.h <61:1 <61:7 61:19> 154:1>]
SYMBOL_METHOD: public void b2DynamicTree::b2DynamicTree() [b2DynamicTree.h <65:2 <65:2 65:14> 65:16>]
SYMBOL_METHOD: public void b2DynamicTree::~b2DynamicTree() [b2DynamicTree.h <68:2 <68:2 68:15> 68:17>]
SYMBOL_METHOD: public int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) [b2DynamicTree.h <71:2 <71:8 71:18> 71:54>]
SYMBOL_METHOD: public void b2DynamicTree::DestroyProxy(int32) [b2DynamicTree.h <74:2 <74:7 74:18> 74:33>]
SYMBOL_METHOD: public bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) [b2DynamicTree.h <80:2 <80:7 80:15> 80:79>]
SYMBOL_METHOD: public void * b2DynamicTree::GetUserData(int32) const [b2DynamicTree.h <84:2 <84:8 84:18> 84:39>]
SYMBOL_METHOD: public void * b2DynamicTree::GetUserData(int32) const [b2DynamicTree.h <156:1 <156:29 156:39> 160:1>]
SYMBOL_METHOD: public const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2DynamicTree.h <87:2 <87:16 87:25> 87:46>]
SYMBOL_METHOD: public const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2DynamicTree.h <162:1 <162:37 162:46> 166:1>]
SYMBOL_METHOD: public void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const [b2DynamicTree.h <92:2 <92:7 92:11> 92:50>]
SYMBOL_METHOD: public void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const [b2DynamicTree.h <168:1 <169:28 169:32> 201:1>]
SYMBOL_METHOD: public void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const [b2DynamicTree.h <169:1 <169:28 169:32> 201:1>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <147:14 147:25>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <152:13 152:24>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <159:22 159:33>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <164:14 164:25>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <169:14 169:25>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <174:14 174:25>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <179:16 179:27>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <185:6 185:17>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <241:13 241:24>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <247:13 247:24>]
QUALIFIER: b2BroadPhase [b2BroadPhase.h <252:13 252:24>]
SYMBOL_CLASS: b2BroadPhase [b2BroadPhase.h <36:1 <36:7 36:18> 129:1>]
SYMBOL_CLASS: b2BroadPhase [b2Fixture.h <28:7 28:18>]
SYMBOL_METHOD: public void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const [b2DynamicTree.h <169:1 <169:1 <169:28 169:32> 169:71> 201:1>]
SYMBOL_STRUCT: b2WorldQueryWrapper [b2World.cpp <974:1 <974:8 974:26> 984:1>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_root [b2DynamicTree.h <142:8 142:13>]
SYMBOL_FIELD: private b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <144:14 144:20>]
SYMBOL_METHOD: public bool b2WorldQueryWrapper::QueryCallback(int32) [b2World.cpp <976:2 <976:2 <976:7 976:19> 976:34> 980:2>]
SYMBOL_METHOD: public void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const [b2DynamicTree.h <102:2 <102:7 102:13> 102:61>]
SYMBOL_METHOD: public void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const [b2DynamicTree.h <203:1 <204:28 204:34> 287:1>]
SYMBOL_METHOD: public void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const [b2DynamicTree.h <204:1 <204:1 <204:28 204:34> 204:82> 287:1>]
SYMBOL_STRUCT: b2WorldRayCastWrapper [b2World.cpp <994:1 <994:8 994:28> 1017:1>]
SYMBOL_METHOD: public float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) [b2World.cpp <996:2 <996:2 <996:10 996:24> 996:68> 1013:2>]
SYMBOL_METHOD: public void b2DynamicTree::Validate() const [b2DynamicTree.h <105:2 <105:7 105:14> 105:22>]
SYMBOL_METHOD: public int32 b2DynamicTree::GetHeight() const [b2DynamicTree.h <109:2 <109:8 109:16> 109:24>]
SYMBOL_METHOD: public int32 b2DynamicTree::GetMaxBalance() const [b2DynamicTree.h <113:2 <113:8 113:20> 113:28>]
SYMBOL_METHOD: public float32 b2DynamicTree::GetAreaRatio() const [b2DynamicTree.h <116:2 <116:10 116:21> 116:29>]
SYMBOL_METHOD: public void b2DynamicTree::RebuildBottomUp() [b2DynamicTree.h <119:2 <119:7 119:21> 119:23>]
SYMBOL_METHOD: public void b2DynamicTree::ShiftOrigin(const b2Vec2 &) [b2DynamicTree.h <124:2 <124:7 124:17> 124:42>]
SYMBOL_METHOD: private int32 b2DynamicTree::AllocateNode() [b2DynamicTree.h <128:2 <128:8 128:19> 128:21>]
SYMBOL_METHOD: private void b2DynamicTree::FreeNode(int32) [b2DynamicTree.h <129:2 <129:7 129:14> 129:26>]
SYMBOL_METHOD: private void b2DynamicTree::InsertLeaf(int32) [b2DynamicTree.h <131:2 <131:7 131:16> 131:28>]
SYMBOL_METHOD: private void b2DynamicTree::RemoveLeaf(int32) [b2DynamicTree.h <132:2 <132:7 132:16> 132:28>]
SYMBOL_METHOD: private int32 b2DynamicTree::Balance(int32) [b2DynamicTree.h <134:2 <134:8 134:14> 134:27>]
SYMBOL_METHOD: private int32 b2DynamicTree::ComputeHeight() const [b2DynamicTree.h <136:2 <136:8 136:20> 136:28>]
SYMBOL_METHOD: private int32 b2DynamicTree::ComputeHeight(int32) const [b2DynamicTree.h <137:2 <137:8 137:20> 137:40>]
SYMBOL_METHOD: private void b2DynamicTree::ValidateStructure(int32) const [b2DynamicTree.h <139:2 <139:7 139:23> 139:42>]
SYMBOL_METHOD: private void b2DynamicTree::ValidateMetrics(int32) const [b2DynamicTree.h <140:2 <140:7 140:21> 140:40>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_nodeCount [b2DynamicTree.h <145:8 145:18>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.h <146:8 146:21>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_freeList [b2DynamicTree.h <148:8 148:17>]
SYMBOL_FIELD: private uint32 b2DynamicTree::m_path [b2DynamicTree.h <151:9 151:14>]
SYMBOL_FIELD: private int32 b2DynamicTree::m_insertionCount [b2DynamicTree.h <153:8 153:23>]
SYMBOL_METHOD: public void b2DynamicTree::b2DynamicTree(const b2DynamicTree &) [b2DynamicTree.h <61:7 <61:7 61:19> 61:19>]
SYMBOL_METHOD: public b2DynamicTree & b2DynamicTree::operator=(const b2DynamicTree &) [b2DynamicTree.h <61:7 <61:7 61:19> 61:19>]
SYMBOL_STRUCT: b2Pair [b2BroadPhase.h <27:1 <27:8 27:13> 31:1>]
SYMBOL_FIELD: public int32 b2Pair::proxyIdA [b2BroadPhase.h <29:8 29:15>]
SYMBOL_FIELD: public int32 b2Pair::proxyIdB [b2BroadPhase.h <30:8 30:15>]
SYMBOL_ENUM: public b2BroadPhase::anonymous enum (b2BroadPhase.h<40:2>) [b2BroadPhase.h <40:2 <40:2 40:5> 43:2>]
SYMBOL_ENUM_CONSTANT: b2BroadPhase::anonymous enum (b2BroadPhase.h<40:2>)::e_nullProxy [b2BroadPhase.h <42:3 42:13>]
SYMBOL_METHOD: public void b2BroadPhase::b2BroadPhase() [b2BroadPhase.h <45:2 <45:2 45:13> 45:15>]
SYMBOL_METHOD: public void b2BroadPhase::~b2BroadPhase() [b2BroadPhase.h <46:2 <46:2 46:14> 46:16>]
SYMBOL_METHOD: public int32 b2BroadPhase::CreateProxy(const b2AABB &, void *) [b2BroadPhase.h <50:2 <50:8 50:18> 50:54>]
SYMBOL_METHOD: public void b2BroadPhase::DestroyProxy(int32) [b2BroadPhase.h <53:2 <53:7 53:18> 53:33>]
SYMBOL_METHOD: public void b2BroadPhase::MoveProxy(int32, const b2AABB &, const b2Vec2 &) [b2BroadPhase.h <57:2 <57:7 57:15> 57:78>]
SYMBOL_METHOD: public void b2BroadPhase::TouchProxy(int32) [b2BroadPhase.h <60:2 <60:7 60:16> 60:31>]
SYMBOL_METHOD: public const b2AABB & b2BroadPhase::GetFatAABB(int32) const [b2BroadPhase.h <63:2 <63:16 63:25> 63:46>]
SYMBOL_METHOD: public const b2AABB & b2BroadPhase::GetFatAABB(int32) const [b2BroadPhase.h <159:1 <159:36 159:45> 162:1>]
SYMBOL_METHOD: public void * b2BroadPhase::GetUserData(int32) const [b2BroadPhase.h <66:2 <66:8 66:18> 66:39>]
SYMBOL_METHOD: public void * b2BroadPhase::GetUserData(int32) const [b2BroadPhase.h <147:1 <147:28 147:38> 150:1>]
SYMBOL_METHOD: public bool b2BroadPhase::TestOverlap(int32, int32) const [b2BroadPhase.h <69:2 <69:7 69:17> 69:55>]
SYMBOL_METHOD: public bool b2BroadPhase::TestOverlap(int32, int32) const [b2BroadPhase.h <152:1 <152:27 152:37> 157:1>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetProxyCount() const [b2BroadPhase.h <72:2 <72:8 72:20> 72:28>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetProxyCount() const [b2BroadPhase.h <164:1 <164:28 164:40> 167:1>]
SYMBOL_METHOD: public void b2BroadPhase::UpdatePairs<typename T>(T *) [b2BroadPhase.h <76:2 <76:7 76:17> 76:30>]
SYMBOL_METHOD: public void b2BroadPhase::UpdatePairs<typename T>(T *) [b2BroadPhase.h <184:1 <185:20 185:30> 238:1>]
SYMBOL_METHOD: public void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const [b2BroadPhase.h <81:2 <81:7 81:11> 81:50>]
SYMBOL_METHOD: public void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const [b2BroadPhase.h <240:1 <241:27 241:31> 244:1>]
SYMBOL_METHOD: public void b2BroadPhase::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const [b2BroadPhase.h <241:1 <241:1 <241:27 241:31> 241:70> 244:1>]
SYMBOL_FIELD: private b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <116:16 116:21>]
SYMBOL_METHOD: public void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const [b2BroadPhase.h <91:2 <91:7 91:13> 91:61>]
SYMBOL_METHOD: public void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const [b2BroadPhase.h <246:1 <247:27 247:33> 250:1>]
SYMBOL_METHOD: public void b2BroadPhase::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const [b2BroadPhase.h <247:1 <247:1 <247:27 247:33> 247:81> 250:1>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetTreeHeight() const [b2BroadPhase.h <94:2 <94:8 94:20> 94:28>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetTreeHeight() const [b2BroadPhase.h <169:1 <169:28 169:40> 172:1>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetTreeBalance() const [b2BroadPhase.h <97:2 <97:8 97:21> 97:29>]
SYMBOL_METHOD: public int32 b2BroadPhase::GetTreeBalance() const [b2BroadPhase.h <174:1 <174:28 174:41> 177:1>]
SYMBOL_METHOD: public float32 b2BroadPhase::GetTreeQuality() const [b2BroadPhase.h <100:2 <100:10 100:23> 100:31>]
SYMBOL_METHOD: public float32 b2BroadPhase::GetTreeQuality() const [b2BroadPhase.h <179:1 <179:30 179:43> 182:1>]
SYMBOL_METHOD: public void b2BroadPhase::ShiftOrigin(const b2Vec2 &) [b2BroadPhase.h <105:2 <105:7 105:17> 105:42>]
SYMBOL_METHOD: public void b2BroadPhase::ShiftOrigin(const b2Vec2 &) [b2BroadPhase.h <252:1 <252:27 252:37> 255:1>]
SYMBOL_METHOD: private void b2BroadPhase::BufferMove(int32) [b2BroadPhase.h <111:2 <111:7 111:16> 111:31>]
SYMBOL_METHOD: private void b2BroadPhase::UnBufferMove(int32) [b2BroadPhase.h <112:2 <112:7 112:18> 112:33>]
SYMBOL_METHOD: private bool b2BroadPhase::QueryCallback(int32) [b2BroadPhase.h <114:2 <114:7 114:19> 114:34>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_proxyCount [b2BroadPhase.h <118:8 118:19>]
SYMBOL_FIELD: private int32 * b2BroadPhase::m_moveBuffer [b2BroadPhase.h <120:9 120:20>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_moveCapacity [b2BroadPhase.h <121:8 121:21>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_moveCount [b2BroadPhase.h <122:8 122:18>]
SYMBOL_FIELD: private b2Pair * b2BroadPhase::m_pairBuffer [b2BroadPhase.h <124:10 124:21>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_pairCapacity [b2BroadPhase.h <125:8 125:21>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_pairCount [b2BroadPhase.h <126:8 126:18>]
SYMBOL_FIELD: private int32 b2BroadPhase::m_queryProxyId [b2BroadPhase.h <128:8 128:21>]
SYMBOL_METHOD: public void b2BroadPhase::b2BroadPhase(const b2BroadPhase &) [b2BroadPhase.h <36:7 <36:7 36:18> 36:18>]
SYMBOL_METHOD: public b2BroadPhase & b2BroadPhase::operator=(const b2BroadPhase &) [b2BroadPhase.h <36:7 <36:7 36:18> 36:18>]
SYMBOL_FUNCTION: bool b2PairLessThan(const b2Pair &, const b2Pair &) [b2BroadPhase.h <132:1 <132:1 <132:13 132:26> 132:68> 145:1>]
SYMBOL_FUNCTION: void std::sort<b2Pair *, bool(const b2Pair &, const b2Pair &) *>(b2Pair * const, b2Pair * const, bool(const b2Pair &, const b2Pair &) *)
QUALIFIER: std [b2BroadPhase.h <211:2 211:4>]
SYMBOL_NAMESPACE: std
QUALIFIER: b2Contact [b2World.cpp <406:18 406:26>]
QUALIFIER: b2Contact [b2World.cpp <464:28 464:36>]
QUALIFIER: b2Contact [b2World.cpp <485:25 485:33>]
QUALIFIER: b2Contact [b2World.cpp <592:20 592:28>]
QUALIFIER: b2Contact [b2World.cpp <592:43 592:51>]
QUALIFIER: b2Contact [b2World.cpp <620:21 620:29>]
QUALIFIER: b2Contact [b2World.cpp <704:19 704:27>]
QUALIFIER: b2Contact [b2World.cpp <736:27 736:35>]
QUALIFIER: b2Contact [b2World.cpp <762:26 762:34>]
QUALIFIER: b2Contact [b2World.cpp <786:29 786:37>]
QUALIFIER: b2Contact [b2World.cpp <834:26 834:34>]
QUALIFIER: b2Contact [b2World.cpp <881:31 881:39>]
QUALIFIER: b2Contact [b2World.cpp <881:54 881:62>]
QUALIFIER: b2Contact [b2Contact.h <222:20 222:28>]
QUALIFIER: b2Contact [b2Contact.h <227:26 227:34>]
QUALIFIER: b2Contact [b2Contact.h <232:13 232:21>]
QUALIFIER: b2Contact [b2Contact.h <242:13 242:21>]
QUALIFIER: b2Contact [b2Contact.h <254:13 254:21>]
QUALIFIER: b2Contact [b2Contact.h <259:13 259:21>]
QUALIFIER: b2Contact [b2Contact.h <264:19 264:27>]
QUALIFIER: b2Contact [b2Contact.h <269:25 269:33>]
QUALIFIER: b2Contact [b2Contact.h <274:19 274:27>]
QUALIFIER: b2Contact [b2Contact.h <279:25 279:33>]
QUALIFIER: b2Contact [b2Contact.h <284:19 284:27>]
QUALIFIER: b2Contact [b2Contact.h <289:14 289:22>]
QUALIFIER: b2Contact [b2Contact.h <294:25 294:33>]
QUALIFIER: b2Contact [b2Contact.h <299:14 299:22>]
QUALIFIER: b2Contact [b2Contact.h <304:13 304:21>]
QUALIFIER: b2Contact [b2Contact.h <309:13 309:21>]
QUALIFIER: b2Contact [b2Contact.h <314:16 314:24>]
QUALIFIER: b2Contact [b2Contact.h <319:13 319:21>]
QUALIFIER: b2Contact [b2Contact.h <324:13 324:21>]
QUALIFIER: b2Contact [b2Contact.h <329:16 329:24>]
QUALIFIER: b2Contact [b2Contact.h <334:13 334:21>]
QUALIFIER: b2Contact [b2Contact.h <339:13 339:21>]
QUALIFIER: b2Contact [b2Contact.h <344:16 344:24>]
SYMBOL_CLASS: b2Contact [b2ContactManager.h <24:7 24:15>]
SYMBOL_CLASS: b2Contact [b2WorldCallbacks.h <29:7 29:15>]
SYMBOL_CLASS: b2Contact [b2Body.h <28:7 28:15>]
SYMBOL_CLASS: b2Contact [b2Island.h <26:7 26:15>]
SYMBOL_CLASS: b2Contact [b2Contact.h <28:7 28:15>]
SYMBOL_CLASS: b2Contact [b2Contact.h <77:1 <77:7 77:15> 220:1>]
SYMBOL_CLASS: b2Contact [b2ContactSolver.h <26:7 26:15>]
SYMBOL_CLASS: b2ContactFilter [b2ContactManager.h <25:7 25:21>]
SYMBOL_CLASS: b2ContactFilter [b2WorldCallbacks.h <52:1 <52:7 52:21> 60:1>]
SYMBOL_CLASS: b2ContactListener [b2ContactManager.h <26:7 26:23>]
SYMBOL_CLASS: b2ContactListener [b2WorldCallbacks.h <81:1 <81:7 81:23> 119:1>]
SYMBOL_CLASS: b2ContactListener [b2Island.h <29:7 29:23>]
SYMBOL_CLASS: b2ContactListener [b2Contact.h <33:7 33:23>]
SYMBOL_CLASS: b2ContactManager [b2ContactManager.h <30:1 <30:7 30:22> 50:1>]
SYMBOL_METHOD: public void b2ContactManager::b2ContactManager() [b2ContactManager.h <33:2 <33:2 33:17> 33:19>]
SYMBOL_METHOD: public void b2ContactManager::AddPair(void *, void *) [b2ContactManager.h <36:2 <36:7 36:13> 36:57>]
SYMBOL_METHOD: public void b2ContactManager::FindNewContacts() [b2ContactManager.h <38:2 <38:7 38:21> 38:23>]
SYMBOL_METHOD: public void b2ContactManager::Destroy(b2Contact *) [b2ContactManager.h <40:2 <40:7 40:13> 40:27>]
SYMBOL_METHOD: public void b2ContactManager::Collide() [b2ContactManager.h <42:2 <42:7 42:13> 42:15>]
SYMBOL_FIELD: public b2BroadPhase b2ContactManager::m_broadPhase [b2ContactManager.h <44:15 44:26>]
SYMBOL_FIELD: public b2Contact * b2ContactManager::m_contactList [b2ContactManager.h <45:13 45:25>]
SYMBOL_FIELD: public int32 b2ContactManager::m_contactCount [b2ContactManager.h <46:8 46:21>]
SYMBOL_FIELD: public b2ContactFilter * b2ContactManager::m_contactFilter [b2ContactManager.h <47:19 47:33>]
SYMBOL_FIELD: public b2ContactListener * b2ContactManager::m_contactListener [b2ContactManager.h <48:21 48:37>]
SYMBOL_FIELD: public b2BlockAllocator * b2ContactManager::m_allocator [b2ContactManager.h <49:20 49:30>]
SYMBOL_METHOD: public void b2ContactManager::b2ContactManager(const b2ContactManager &) [b2ContactManager.h <30:7 <30:7 30:22> 30:22>]
SYMBOL_METHOD: public void b2ContactManager::b2ContactManager(b2ContactManager &&) [b2ContactManager.h <30:7 <30:7 30:22> 30:22>]
SYMBOL_METHOD: public b2ContactManager & b2ContactManager::operator=(b2ContactManager &&) [b2ContactManager.h <30:7 <30:7 30:22> 30:22>]
SYMBOL_METHOD: public void b2ContactManager::~b2ContactManager() [b2ContactManager.h <30:7 <30:7 30:22> 30:22>]
QUALIFIER: b2Fixture [b2Fixture.h <238:22 238:30>]
QUALIFIER: b2Fixture [b2Fixture.h <243:17 243:25>]
QUALIFIER: b2Fixture [b2Fixture.h <248:23 248:31>]
QUALIFIER: b2Fixture [b2Fixture.h <253:13 253:21>]
QUALIFIER: b2Fixture [b2Fixture.h <258:24 258:32>]
QUALIFIER: b2Fixture [b2Fixture.h <263:14 263:22>]
QUALIFIER: b2Fixture [b2Fixture.h <268:13 268:21>]
QUALIFIER: b2Fixture [b2Fixture.h <273:16 273:24>]
QUALIFIER: b2Fixture [b2Fixture.h <278:22 278:30>]
QUALIFIER: b2Fixture [b2Fixture.h <283:19 283:27>]
QUALIFIER: b2Fixture [b2Fixture.h <288:25 288:33>]
QUALIFIER: b2Fixture [b2Fixture.h <293:13 293:21>]
QUALIFIER: b2Fixture [b2Fixture.h <299:16 299:24>]
QUALIFIER: b2Fixture [b2Fixture.h <304:16 304:24>]
QUALIFIER: b2Fixture [b2Fixture.h <309:13 309:21>]
QUALIFIER: b2Fixture [b2Fixture.h <314:16 314:24>]
QUALIFIER: b2Fixture [b2Fixture.h <319:13 319:21>]
QUALIFIER: b2Fixture [b2Fixture.h <324:13 324:21>]
QUALIFIER: b2Fixture [b2Fixture.h <329:13 329:21>]
QUALIFIER: b2Fixture [b2Fixture.h <334:13 334:21>]
QUALIFIER: b2Fixture [b2Fixture.h <339:22 339:30>]
SYMBOL_CLASS: b2Fixture [b2World.h <35:7 35:15>]
SYMBOL_CLASS: b2Fixture [b2WorldCallbacks.h <26:7 26:15>]
SYMBOL_CLASS: b2Fixture [b2Body.h <26:7 26:15>]
SYMBOL_CLASS: b2Fixture [b2Fixture.h <29:7 29:15>]
SYMBOL_CLASS: b2Fixture [b2Fixture.h <107:1 <107:7 107:15> 236:1>]
SYMBOL_CLASS: b2Fixture [b2Contact.h <29:7 29:15>]
QUALIFIER: b2Body [b2World.cpp <402:18 402:23>]
QUALIFIER: b2Body [b2World.cpp <418:23 418:28>]
QUALIFIER: b2Body [b2World.cpp <438:20 438:25>]
QUALIFIER: b2Body [b2World.cpp <449:18 449:23>]
QUALIFIER: b2Body [b2World.cpp <490:26 490:31>]
QUALIFIER: b2Body [b2World.cpp <497:23 497:28>]
QUALIFIER: b2Body [b2World.cpp <519:26 519:31>]
QUALIFIER: b2Body [b2World.cpp <526:23 526:28>]
QUALIFIER: b2Body [b2World.cpp <543:20 543:25>]
QUALIFIER: b2Body [b2World.cpp <556:22 556:27>]
QUALIFIER: b2Body [b2World.cpp <585:19 585:24>]
QUALIFIER: b2Body [b2World.cpp <760:18 760:23>]
QUALIFIER: b2Body [b2World.cpp <761:18 761:23>]
QUALIFIER: b2Body [b2World.cpp <809:28 809:33>]
QUALIFIER: b2Body [b2World.cpp <838:27 838:32>]
QUALIFIER: b2Body [b2World.cpp <844:24 844:29>]
QUALIFIER: b2Body [b2World.cpp <869:22 869:27>]
QUALIFIER: b2Body [b2Body.h <475:19 475:24>]
QUALIFIER: b2Body [b2Body.h <480:27 480:32>]
QUALIFIER: b2Body [b2Body.h <485:22 485:27>]
QUALIFIER: b2Body [b2Body.h <490:16 490:21>]
QUALIFIER: b2Body [b2Body.h <495:22 495:27>]
QUALIFIER: b2Body [b2Body.h <500:22 500:27>]
QUALIFIER: b2Body [b2Body.h <505:13 505:18>]
QUALIFIER: b2Body [b2Body.h <520:22 520:27>]
QUALIFIER: b2Body [b2Body.h <525:13 525:18>]
QUALIFIER: b2Body [b2Body.h <540:16 540:21>]
QUALIFIER: b2Body [b2Body.h <545:16 545:21>]
QUALIFIER: b2Body [b2Body.h <550:16 550:21>]
QUALIFIER: b2Body [b2Body.h <555:13 555:18>]
QUALIFIER: b2Body [b2Body.h <562:15 562:20>]
QUALIFIER: b2Body [b2Body.h <567:15 567:20>]
QUALIFIER: b2Body [b2Body.h <572:15 572:20>]
QUALIFIER: b2Body [b2Body.h <577:15 577:20>]
QUALIFIER: b2Body [b2Body.h <582:15 582:20>]
QUALIFIER: b2Body [b2Body.h <587:15 587:20>]
QUALIFIER: b2Body [b2Body.h <592:16 592:21>]
QUALIFIER: b2Body [b2Body.h <597:13 597:18>]
QUALIFIER: b2Body [b2Body.h <602:16 602:21>]
QUALIFIER: b2Body [b2Body.h <607:13 607:18>]
QUALIFIER: b2Body [b2Body.h <612:16 612:21>]
QUALIFIER: b2Body [b2Body.h <617:13 617:18>]
QUALIFIER: b2Body [b2Body.h <622:13 622:18>]
QUALIFIER: b2Body [b2Body.h <634:13 634:18>]
QUALIFIER: b2Body [b2Body.h <639:13 639:18>]
QUALIFIER: b2Body [b2Body.h <657:13 657:18>]
QUALIFIER: b2Body [b2Body.h <662:13 662:18>]
QUALIFIER: b2Body [b2Body.h <667:13 667:18>]
QUALIFIER: b2Body [b2Body.h <672:13 672:18>]
QUALIFIER: b2Body [b2Body.h <685:13 685:18>]
QUALIFIER: b2Body [b2Body.h <690:19 690:24>]
QUALIFIER: b2Body [b2Body.h <695:25 695:30>]
QUALIFIER: b2Body [b2Body.h <700:21 700:26>]
QUALIFIER: b2Body [b2Body.h <705:27 705:32>]
QUALIFIER: b2Body [b2Body.h <710:23 710:28>]
QUALIFIER: b2Body [b2Body.h <715:29 715:34>]
QUALIFIER: b2Body [b2Body.h <720:16 720:21>]
QUALIFIER: b2Body [b2Body.h <725:22 725:27>]
QUALIFIER: b2Body [b2Body.h <730:13 730:18>]
QUALIFIER: b2Body [b2Body.h <735:14 735:19>]
QUALIFIER: b2Body [b2Body.h <740:13 740:18>]
QUALIFIER: b2Body [b2Body.h <760:13 760:18>]
QUALIFIER: b2Body [b2Body.h <779:13 779:18>]
QUALIFIER: b2Body [b2Body.h <798:13 798:18>]
QUALIFIER: b2Body [b2Body.h <818:13 818:18>]
QUALIFIER: b2Body [b2Body.h <837:13 837:18>]
QUALIFIER: b2Body [b2Body.h <856:13 856:18>]
QUALIFIER: b2Body [b2Body.h <862:13 862:18>]
QUALIFIER: b2Body [b2Body.h <872:17 872:22>]
QUALIFIER: b2Body [b2Body.h <877:23 877:28>]
SYMBOL_CLASS: b2Body [b2World.h <33:7 33:12>]
SYMBOL_CLASS: b2Body [b2WorldCallbacks.h <27:7 27:12>]
SYMBOL_CLASS: b2Body [b2Body.h <128:1 <128:7 128:12> 473:1>]
SYMBOL_CLASS: b2Body [b2Fixture.h <27:7 27:12>]
SYMBOL_CLASS: b2Body [b2Joint.h <24:7 24:12>]
SYMBOL_CLASS: b2Body [b2Contact.h <27:7 27:12>]
SYMBOL_CLASS: b2Body [b2ContactSolver.h <27:7 27:12>]
QUALIFIER: b2Joint [b2World.cpp <220:15 220:21>]
QUALIFIER: b2Joint [b2World.cpp <344:2 344:8>]
QUALIFIER: b2Joint [b2Joint.h <186:20 186:26>]
QUALIFIER: b2Joint [b2Joint.h <191:16 191:22>]
QUALIFIER: b2Joint [b2Joint.h <196:16 196:22>]
QUALIFIER: b2Joint [b2Joint.h <201:17 201:23>]
QUALIFIER: b2Joint [b2Joint.h <206:23 206:29>]
QUALIFIER: b2Joint [b2Joint.h <211:14 211:20>]
QUALIFIER: b2Joint [b2Joint.h <216:13 216:19>]
QUALIFIER: b2Joint [b2Joint.h <221:13 221:19>]
SYMBOL_CLASS: b2Joint [b2World.h <36:7 36:13>]
SYMBOL_CLASS: b2Joint [b2WorldCallbacks.h <28:7 28:13>]
SYMBOL_CLASS: b2Joint [b2Body.h <27:7 27:13>]
SYMBOL_CLASS: b2Joint [b2Island.h <27:7 27:13>]
SYMBOL_CLASS: b2Joint [b2Joint.h <25:7 25:13>]
SYMBOL_CLASS: b2Joint [b2Joint.h <103:1 <103:7 103:13> 184:1>]
SYMBOL_STRUCT: b2ContactResult [b2WorldCallbacks.h <30:8 30:22>]
SYMBOL_CLASS: b2DestructionListener [b2WorldCallbacks.h <36:1 <36:7 36:27> 48:1>]
SYMBOL_METHOD: public void b2DestructionListener::~b2DestructionListener() [b2WorldCallbacks.h <39:2 <39:2 <39:10 39:31> 39:33> 39:36>]
SYMBOL_METHOD: public void b2DestructionListener::SayGoodbye(b2Joint *) [b2WorldCallbacks.h <43:2 <43:15 43:24> 43:44>]
SYMBOL_METHOD: public void b2DestructionListener::SayGoodbye(b2Fixture *) [b2WorldCallbacks.h <47:2 <47:15 47:24> 47:48>]
SYMBOL_METHOD: public b2DestructionListener & b2DestructionListener::operator=(const b2DestructionListener &) [b2WorldCallbacks.h <36:7 <36:7 36:27> 36:27>]
SYMBOL_METHOD: public void b2ContactFilter::~b2ContactFilter() [b2WorldCallbacks.h <55:2 <55:2 <55:10 55:25> 55:27> 55:30>]
SYMBOL_METHOD: public bool b2ContactFilter::ShouldCollide(b2Fixture *, b2Fixture *) [b2WorldCallbacks.h <59:2 <59:15 59:27> 59:69>]
SYMBOL_METHOD: public b2ContactFilter & b2ContactFilter::operator=(const b2ContactFilter &) [b2WorldCallbacks.h <52:7 <52:7 52:21> 52:21>]
SYMBOL_STRUCT: b2ContactImpulse [b2WorldCallbacks.h <65:1 <65:8 65:23> 70:1>]
SYMBOL_FIELD: public float32 [] b2ContactImpulse::normalImpulses [b2WorldCallbacks.h <67:10 67:23>]
SYMBOL_FIELD: public float32 [] b2ContactImpulse::tangentImpulses [b2WorldCallbacks.h <68:10 68:24>]
SYMBOL_FIELD: public int32 b2ContactImpulse::count [b2WorldCallbacks.h <69:8 69:12>]
SYMBOL_METHOD: public void b2ContactListener::~b2ContactListener() [b2WorldCallbacks.h <84:2 <84:2 <84:10 84:27> 84:29> 84:32>]
SYMBOL_METHOD: public void b2ContactListener::BeginContact(b2Contact *) [b2WorldCallbacks.h <87:2 <87:2 <87:15 87:26> 87:46> 87:72>]
SYMBOL_METHOD: public void b2ContactListener::EndContact(b2Contact *) [b2WorldCallbacks.h <90:2 <90:2 <90:15 90:24> 90:44> 90:70>]
SYMBOL_METHOD: public void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) [b2WorldCallbacks.h <102:2 <102:2 <102:15 102:22> 102:73> 106:2>]
SYMBOL_METHOD: public void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) [b2WorldCallbacks.h <114:2 <114:2 <114:15 114:23> 114:76> 118:2>]
SYMBOL_METHOD: public b2ContactListener & b2ContactListener::operator=(const b2ContactListener &) [b2WorldCallbacks.h <81:7 <81:7 81:23> 81:23>]
SYMBOL_CLASS: b2QueryCallback [b2WorldCallbacks.h <123:1 <123:7 123:21> 131:1>]
SYMBOL_METHOD: public void b2QueryCallback::~b2QueryCallback() [b2WorldCallbacks.h <126:2 <126:2 <126:10 126:25> 126:27> 126:30>]
SYMBOL_METHOD: public bool b2QueryCallback::ReportFixture(b2Fixture *) [b2WorldCallbacks.h <130:2 <130:15 130:27> 130:51>]
SYMBOL_METHOD: public b2QueryCallback & b2QueryCallback::operator=(const b2QueryCallback &) [b2WorldCallbacks.h <123:7 <123:7 123:21> 123:21>]
SYMBOL_CLASS: b2RayCastCallback [b2WorldCallbacks.h <135:1 <135:7 135:23> 153:1>]
SYMBOL_METHOD: public void b2RayCastCallback::~b2RayCastCallback() [b2WorldCallbacks.h <138:2 <138:2 <138:10 138:27> 138:29> 138:32>]
SYMBOL_METHOD: public float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) [b2WorldCallbacks.h <151:2 <151:18 151:30> 152:52>]
SYMBOL_METHOD: public b2RayCastCallback & b2RayCastCallback::operator=(const b2RayCastCallback &) [b2WorldCallbacks.h <135:7 <135:7 135:23> 135:23>]
SYMBOL_STRUCT: b2Profile [b2TimeStep.h <25:1 <25:8 25:16> 35:1>]
SYMBOL_STRUCT: b2Profile [b2Island.h <25:1 <31:8 31:16> 35:1>]
SYMBOL_FIELD: public float32 b2Profile::step [b2TimeStep.h <27:10 27:13>]
SYMBOL_FIELD: public float32 b2Profile::collide [b2TimeStep.h <28:10 28:16>]
SYMBOL_FIELD: public float32 b2Profile::solve [b2TimeStep.h <29:10 29:14>]
SYMBOL_FIELD: public float32 b2Profile::solveInit [b2TimeStep.h <30:10 30:18>]
SYMBOL_FIELD: public float32 b2Profile::solveVelocity [b2TimeStep.h <31:10 31:22>]
SYMBOL_FIELD: public float32 b2Profile::solvePosition [b2TimeStep.h <32:10 32:22>]
SYMBOL_FIELD: public float32 b2Profile::broadphase [b2TimeStep.h <33:10 33:19>]
SYMBOL_FIELD: public float32 b2Profile::solveTOI [b2TimeStep.h <34:10 34:17>]
SYMBOL_METHOD: public void b2Profile::b2Profile(const b2Profile &) [b2TimeStep.h <25:8 <25:8 25:16> 25:16>]
SYMBOL_METHOD: public void b2Profile::b2Profile(b2Profile &&) [b2TimeStep.h <25:8 <25:8 25:16> 25:16>]
SYMBOL_METHOD: public void b2Profile::~b2Profile() [b2TimeStep.h <25:8 <25:8 25:16> 25:16>]
SYMBOL_METHOD: public void b2Profile::b2Profile() [b2TimeStep.h <25:8 <25:8 25:16> 25:16>]
SYMBOL_STRUCT: b2TimeStep [b2TimeStep.h <38:1 <38:8 38:17> 46:1>]
SYMBOL_FIELD: public float32 b2TimeStep::dt [b2TimeStep.h <40:10 40:11>]
SYMBOL_FIELD: public float32 b2TimeStep::inv_dt [b2TimeStep.h <41:10 41:15>]
SYMBOL_FIELD: public float32 b2TimeStep::dtRatio [b2TimeStep.h <42:10 42:16>]
SYMBOL_FIELD: public int32 b2TimeStep::velocityIterations [b2TimeStep.h <43:8 43:25>]
SYMBOL_FIELD: public int32 b2TimeStep::positionIterations [b2TimeStep.h <44:8 44:25>]
SYMBOL_FIELD: public bool b2TimeStep::warmStarting [b2TimeStep.h <45:7 45:18>]
SYMBOL_METHOD: public void b2TimeStep::b2TimeStep() [b2TimeStep.h <38:8 <38:8 38:17> 38:17>]
SYMBOL_METHOD: public void b2TimeStep::b2TimeStep(const b2TimeStep &) [b2TimeStep.h <38:8 <38:8 38:17> 38:17>]
SYMBOL_METHOD: public void b2TimeStep::b2TimeStep(b2TimeStep &&) [b2TimeStep.h <38:8 <38:8 38:17> 38:17>]
SYMBOL_STRUCT: b2Position [b2TimeStep.h <49:1 <49:8 49:17> 53:1>]
SYMBOL_FIELD: public b2Vec2 b2Position::c [b2TimeStep.h <51:9 51:9>]
SYMBOL_FIELD: public float32 b2Position::a [b2TimeStep.h <52:10 52:10>]
SYMBOL_STRUCT: b2Velocity [b2TimeStep.h <56:1 <56:8 56:17> 60:1>]
SYMBOL_FIELD: public b2Vec2 b2Velocity::v [b2TimeStep.h <58:9 58:9>]
SYMBOL_FIELD: public float32 b2Velocity::w [b2TimeStep.h <59:10 59:10>]
SYMBOL_STRUCT: b2SolverData [b2TimeStep.h <63:1 <63:8 63:19> 68:1>]
SYMBOL_STRUCT: b2SolverData [b2Joint.h <26:8 26:19>]
SYMBOL_FIELD: public b2TimeStep b2SolverData::step [b2TimeStep.h <65:13 65:16>]
SYMBOL_FIELD: public b2Position * b2SolverData::positions [b2TimeStep.h <66:14 66:22>]
SYMBOL_FIELD: public b2Velocity * b2SolverData::velocities [b2TimeStep.h <67:14 67:23>]
SYMBOL_STRUCT: b2BodyDef [b2World.h <30:8 30:16>]
SYMBOL_STRUCT: b2BodyDef [b2Body.h <51:1 <51:8 51:16> 125:1>]
SYMBOL_STRUCT: b2Color [b2World.h <25:1 <31:8 31:14> 39:1>]
SYMBOL_STRUCT: b2Color [b2Draw.h <25:1 <25:8 25:14> 39:1>]
SYMBOL_STRUCT: b2JointDef [b2World.h <32:8 32:17>]
SYMBOL_STRUCT: b2JointDef [b2Joint.h <74:1 <74:8 74:17> 99:1>]
QUALIFIER: b2Draw [b2World.cpp <1162:14 1162:19>]
QUALIFIER: b2Draw [b2World.cpp <1193:14 1193:19>]
QUALIFIER: b2Draw [b2World.cpp <1201:14 1201:19>]
QUALIFIER: b2Draw [b2World.cpp <1216:14 1216:19>]
QUALIFIER: b2Draw [b2World.cpp <1246:14 1246:19>]
SYMBOL_CLASS: b2Draw [b2World.h <34:7 34:12>]
SYMBOL_CLASS: b2Draw [b2Draw.h <43:1 <43:7 43:12> 95:1>]
QUALIFIER: b2World [b2World.cpp <37:1 37:7>]
QUALIFIER: b2World [b2World.cpp <66:1 66:7>]
QUALIFIER: b2World [b2World.cpp <87:6 87:12>]
QUALIFIER: b2World [b2World.cpp <92:6 92:12>]
QUALIFIER: b2World [b2World.cpp <97:6 97:12>]
QUALIFIER: b2World [b2World.cpp <102:6 102:12>]
QUALIFIER: b2World [b2World.cpp <107:9 107:15>]
QUALIFIER: b2World [b2World.cpp <131:6 131:12>]
QUALIFIER: b2World [b2World.cpp <212:10 212:16>]
QUALIFIER: b2World [b2World.cpp <272:6 272:12>]
QUALIFIER: b2World [b2World.cpp <368:6 368:12>]
QUALIFIER: b2World [b2World.cpp <386:6 386:12>]
QUALIFIER: b2World [b2World.cpp <577:6 577:12>]
QUALIFIER: b2World [b2World.cpp <897:6 897:12>]
QUALIFIER: b2World [b2World.cpp <965:6 965:12>]
QUALIFIER: b2World [b2World.cpp <986:6 986:12>]
QUALIFIER: b2World [b2World.cpp <1019:6 1019:12>]
QUALIFIER: b2World [b2World.cpp <1031:6 1031:12>]
QUALIFIER: b2World [b2World.cpp <1112:6 1112:12>]
QUALIFIER: b2World [b2World.cpp <1153:6 1153:12>]
QUALIFIER: b2World [b2World.cpp <1257:7 1257:13>]
QUALIFIER: b2World [b2World.cpp <1262:7 1262:13>]
QUALIFIER: b2World [b2World.cpp <1267:7 1267:13>]
QUALIFIER: b2World [b2World.cpp <1272:9 1272:15>]
QUALIFIER: b2World [b2World.cpp <1277:6 1277:12>]
QUALIFIER: b2World [b2World.cpp <1300:6 1300:12>]
QUALIFIER: b2World [b2World.h <266:16 266:22>]
QUALIFIER: b2World [b2World.h <271:22 271:28>]
QUALIFIER: b2World [b2World.h <276:17 276:23>]
QUALIFIER: b2World [b2World.h <281:23 281:29>]
QUALIFIER: b2World [b2World.h <286:19 286:25>]
QUALIFIER: b2World [b2World.h <291:25 291:31>]
QUALIFIER: b2World [b2World.h <296:14 296:20>]
QUALIFIER: b2World [b2World.h <301:14 301:20>]
QUALIFIER: b2World [b2World.h <306:14 306:20>]
QUALIFIER: b2World [b2World.h <311:13 311:19>]
QUALIFIER: b2World [b2World.h <316:15 316:21>]
QUALIFIER: b2World [b2World.h <321:13 321:19>]
QUALIFIER: b2World [b2World.h <326:13 326:19>]
QUALIFIER: b2World [b2World.h <339:13 339:19>]
QUALIFIER: b2World [b2World.h <344:32 344:38>]
QUALIFIER: b2World [b2World.h <349:25 349:31>]
SYMBOL_CLASS: b2World [b2World.h <41:1 <41:7 41:13> 264:1>]
SYMBOL_CLASS: b2World [b2Body.h <30:7 30:13>]
SYMBOL_CLASS: b2World [b2Contact.h <30:7 30:13>]
SYMBOL_METHOD: public void b2World::b2World(const b2Vec2 &) [b2World.cpp <37:1 <37:10 37:16> 64:1>]
SYMBOL_METHOD: public void b2World::b2World(const b2Vec2 &) [b2World.h <37:1 <46:2 <46:2 46:8> 46:31> 64:1>]
SYMBOL_METHOD: public void b2World::~b2World() [b2World.cpp <66:1 <66:10 66:17> 85:1>]
SYMBOL_METHOD: public void b2World::~b2World() [b2World.h <49:2 <49:2 49:9> 49:11>]
SYMBOL_METHOD: public void b2World::SetDestructionListener(b2DestructionListener *) [b2World.cpp <87:1 <87:15 87:36> 90:1>]
SYMBOL_METHOD: public void b2World::SetDestructionListener(b2DestructionListener *) [b2World.h <53:2 <53:7 53:28> 53:61>]
SYMBOL_METHOD: public void b2World::SetContactFilter(b2ContactFilter *) [b2World.cpp <92:1 <92:15 92:30> 95:1>]
SYMBOL_METHOD: public void b2World::SetContactFilter(b2ContactFilter *) [b2World.h <58:2 <58:7 58:22> 58:47>]
SYMBOL_METHOD: public void b2World::SetContactListener(b2ContactListener *) [b2World.cpp <97:1 <97:15 97:32> 100:1>]
SYMBOL_METHOD: public void b2World::SetContactListener(b2ContactListener *) [b2World.h <62:2 <62:7 62:24> 62:53>]
SYMBOL_METHOD: public void b2World::SetDebugDraw(b2Draw *) [b2World.cpp <102:1 <102:15 102:26> 105:1>]
SYMBOL_METHOD: public void b2World::SetDebugDraw(b2Draw *) [b2World.h <67:2 <67:7 67:18> 67:37>]
SYMBOL_METHOD: public b2Body * b2World::CreateBody(const b2BodyDef *) [b2World.cpp <107:1 <107:18 107:27> 129:1>]
SYMBOL_METHOD: public b2Body * b2World::CreateBody(const b2BodyDef *) [b2World.h <72:2 <72:10 72:19> 72:41>]
SYMBOL_METHOD: public void b2World::DestroyBody(b2Body *) [b2World.cpp <131:1 <131:15 131:25> 210:1>]
SYMBOL_METHOD: public void b2World::DestroyBody(b2Body *) [b2World.h <78:2 <78:7 78:17> 78:31>]
SYMBOL_METHOD: public b2Joint * b2World::CreateJoint(const b2JointDef *) [b2World.cpp <212:1 <212:19 212:29> 270:1>]
SYMBOL_METHOD: public b2Joint * b2World::CreateJoint(const b2JointDef *) [b2World.h <83:2 <83:11 83:21> 83:44>]
SYMBOL_METHOD: public void b2World::DestroyJoint(b2Joint *) [b2World.cpp <272:1 <272:15 272:26> 365:1>]
SYMBOL_METHOD: public void b2World::DestroyJoint(b2Joint *) [b2World.h <87:2 <87:7 87:18> 87:34>]
SYMBOL_METHOD: public void b2World::Step(float32, int32, int32) [b2World.cpp <897:1 <897:15 897:18> 963:1>]
SYMBOL_METHOD: public void b2World::Step(float32, int32, int32) [b2World.h <94:2 <94:7 94:10> 96:29>]
SYMBOL_METHOD: public void b2World::ClearForces() [b2World.cpp <965:1 <965:15 965:25> 972:1>]
SYMBOL_METHOD: public void b2World::ClearForces() [b2World.h <105:2 <105:7 105:17> 105:19>]
SYMBOL_METHOD: public void b2World::DrawDebugData() [b2World.cpp <1153:1 <1153:15 1153:27> 1255:1>]
SYMBOL_METHOD: public void b2World::DrawDebugData() [b2World.h <108:2 <108:7 108:19> 108:21>]
SYMBOL_METHOD: public void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const [b2World.cpp <986:1 <986:15 986:23> 992:1>]
SYMBOL_METHOD: public void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const [b2World.h <114:2 <114:7 114:15> 114:68>]
SYMBOL_METHOD: public void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const [b2World.cpp <1019:1 <1019:15 1019:21> 1029:1>]
SYMBOL_METHOD: public void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const [b2World.h <122:2 <122:7 122:13> 122:92>]
SYMBOL_METHOD: public b2Body * b2World::GetBodyList() [b2World.h <127:2 <127:10 127:20> 127:22>]
SYMBOL_METHOD: public b2Body * b2World::GetBodyList() [b2World.h <266:1 <266:25 266:35> 269:1>]
SYMBOL_METHOD: public const b2Body * b2World::GetBodyList() const [b2World.h <128:2 <128:16 128:26> 128:34>]
SYMBOL_METHOD: public const b2Body * b2World::GetBodyList() const [b2World.h <271:1 <271:31 271:41> 274:1>]
SYMBOL_METHOD: public b2Joint * b2World::GetJointList() [b2World.h <133:2 <133:11 133:22> 133:24>]
SYMBOL_METHOD: public b2Joint * b2World::GetJointList() [b2World.h <276:1 <276:26 276:37> 279:1>]
SYMBOL_METHOD: public const b2Joint * b2World::GetJointList() const [b2World.h <134:2 <134:17 134:28> 134:36>]
SYMBOL_METHOD: public const b2Joint * b2World::GetJointList() const [b2World.h <281:1 <281:32 281:43> 284:1>]
SYMBOL_METHOD: public b2Contact * b2World::GetContactList() [b2World.h <141:2 <141:13 141:26> 141:28>]
SYMBOL_METHOD: public b2Contact * b2World::GetContactList() [b2World.h <286:1 <286:28 286:41> 289:1>]
SYMBOL_METHOD: public const b2Contact * b2World::GetContactList() const [b2World.h <142:2 <142:19 142:32> 142:40>]
SYMBOL_METHOD: public const b2Contact * b2World::GetContactList() const [b2World.h <291:1 <291:34 291:47> 294:1>]
SYMBOL_METHOD: public void b2World::SetAllowSleeping(bool) [b2World.cpp <368:1 <368:15 368:30> 383:1>]
SYMBOL_METHOD: public void b2World::SetAllowSleeping(bool) [b2World.h <145:2 <145:7 145:22> 145:33>]
SYMBOL_METHOD: public bool b2World::GetAllowSleeping() const [b2World.h <146:2 <146:2 <146:7 146:22> 146:30> 146:55>]
SYMBOL_FIELD: private bool b2World::m_allowSleep [b2World.h <247:7 247:18>]
SYMBOL_METHOD: public void b2World::SetWarmStarting(bool) [b2World.h <149:2 <149:2 <149:7 149:21> 149:32> 149:59>]
SYMBOL_FIELD: private bool b2World::m_warmStarting [b2World.h <257:7 257:20>]
SYMBOL_METHOD: public bool b2World::GetWarmStarting() const [b2World.h <150:2 <150:2 <150:7 150:21> 150:29> 150:56>]
SYMBOL_METHOD: public void b2World::SetContinuousPhysics(bool) [b2World.h <153:2 <153:2 <153:7 153:26> 153:37> 153:69>]
SYMBOL_FIELD: private bool b2World::m_continuousPhysics [b2World.h <258:7 258:25>]
SYMBOL_METHOD: public bool b2World::GetContinuousPhysics() const [b2World.h <154:2 <154:2 <154:7 154:26> 154:34> 154:66>]
SYMBOL_METHOD: public void b2World::SetSubStepping(bool) [b2World.h <157:2 <157:2 <157:7 157:20> 157:31> 157:57>]
SYMBOL_FIELD: private bool b2World::m_subStepping [b2World.h <259:7 259:19>]
SYMBOL_METHOD: public bool b2World::GetSubStepping() const [b2World.h <158:2 <158:2 <158:7 158:20> 158:28> 158:54>]
SYMBOL_METHOD: public int32 b2World::GetProxyCount() const [b2World.cpp <1257:1 <1257:16 1257:28> 1260:1>]
SYMBOL_METHOD: public int32 b2World::GetProxyCount() const [b2World.h <161:2 <161:8 161:20> 161:28>]
SYMBOL_METHOD: public int32 b2World::GetBodyCount() const [b2World.h <164:2 <164:8 164:19> 164:27>]
SYMBOL_METHOD: public int32 b2World::GetBodyCount() const [b2World.h <296:1 <296:23 296:34> 299:1>]
SYMBOL_METHOD: public int32 b2World::GetJointCount() const [b2World.h <167:2 <167:8 167:20> 167:28>]
SYMBOL_METHOD: public int32 b2World::GetJointCount() const [b2World.h <301:1 <301:23 301:35> 304:1>]
SYMBOL_METHOD: public int32 b2World::GetContactCount() const [b2World.h <170:2 <170:8 170:22> 170:30>]
SYMBOL_METHOD: public int32 b2World::GetContactCount() const [b2World.h <306:1 <306:23 306:37> 309:1>]
SYMBOL_METHOD: public int32 b2World::GetTreeHeight() const [b2World.cpp <1262:1 <1262:16 1262:28> 1265:1>]
SYMBOL_METHOD: public int32 b2World::GetTreeHeight() const [b2World.h <173:2 <173:8 173:20> 173:28>]
SYMBOL_METHOD: public int32 b2World::GetTreeBalance() const [b2World.cpp <1267:1 <1267:16 1267:29> 1270:1>]
SYMBOL_METHOD: public int32 b2World::GetTreeBalance() const [b2World.h <176:2 <176:8 176:21> 176:29>]
SYMBOL_METHOD: public float32 b2World::GetTreeQuality() const [b2World.cpp <1272:1 <1272:18 1272:31> 1275:1>]
SYMBOL_METHOD: public float32 b2World::GetTreeQuality() const [b2World.h <180:2 <180:10 180:23> 180:31>]
SYMBOL_METHOD: public void b2World::SetGravity(const b2Vec2 &) [b2World.h <183:2 <183:7 183:16> 183:39>]
SYMBOL_METHOD: public void b2World::SetGravity(const b2Vec2 &) [b2World.h <311:1 <311:22 311:31> 314:1>]
SYMBOL_METHOD: public b2Vec2 b2World::GetGravity() const [b2World.h <186:2 <186:9 186:18> 186:26>]
SYMBOL_METHOD: public b2Vec2 b2World::GetGravity() const [b2World.h <316:1 <316:24 316:33> 319:1>]
SYMBOL_METHOD: public bool b2World::IsLocked() const [b2World.h <189:2 <189:7 189:14> 189:22>]
SYMBOL_METHOD: public bool b2World::IsLocked() const [b2World.h <321:1 <321:22 321:29> 324:1>]
SYMBOL_METHOD: public void b2World::SetAutoClearForces(bool) [b2World.h <192:2 <192:7 192:24> 192:35>]
SYMBOL_METHOD: public void b2World::SetAutoClearForces(bool) [b2World.h <326:1 <326:22 326:39> 336:1>]
SYMBOL_METHOD: public bool b2World::GetAutoClearForces() const [b2World.h <195:2 <195:7 195:24> 195:32>]
SYMBOL_METHOD: public bool b2World::GetAutoClearForces() const [b2World.h <339:1 <339:22 339:39> 342:1>]
SYMBOL_METHOD: public void b2World::ShiftOrigin(const b2Vec2 &) [b2World.cpp <1277:1 <1277:15 1277:25> 1298:1>]
SYMBOL_METHOD: public void b2World::ShiftOrigin(const b2Vec2 &) [b2World.h <200:2 <200:7 200:17> 200:42>]
SYMBOL_METHOD: public const b2ContactManager & b2World::GetContactManager() const [b2World.h <203:2 <203:26 203:42> 203:50>]
SYMBOL_METHOD: public const b2ContactManager & b2World::GetContactManager() const [b2World.h <344:1 <344:41 344:57> 347:1>]
SYMBOL_METHOD: public const b2Profile & b2World::GetProfile() const [b2World.h <206:2 <206:19 206:28> 206:36>]
SYMBOL_METHOD: public const b2Profile & b2World::GetProfile() const [b2World.h <349:1 <349:34 349:43> 352:1>]
SYMBOL_METHOD: public void b2World::Dump() [b2World.cpp <1300:1 <1300:15 1300:18> 1357:1>]
SYMBOL_METHOD: public void b2World::Dump() [b2World.h <210:2 <210:7 210:10> 210:12>]
SYMBOL_ENUM: private b2World::anonymous enum (b2World.h<215:2>) [b2World.h <215:2 <215:2 215:5> 220:2>]
SYMBOL_ENUM_CONSTANT: b2World::anonymous enum (b2World.h<215:2>)::e_newFixture [b2World.h <217:3 217:14>]
SYMBOL_ENUM_CONSTANT: b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.h <218:3 218:10>]
SYMBOL_ENUM_CONSTANT: b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.h <219:3 219:15>]
SYMBOL_CLASS: b2Controller [b2Body.h <29:7 29:18>]
SYMBOL_METHOD: private void b2World::Solve(const b2TimeStep &) [b2World.cpp <386:1 <386:15 386:19> 574:1>]
SYMBOL_METHOD: private void b2World::Solve(const b2TimeStep &) [b2World.h <227:2 <227:7 227:11> 227:35>]
SYMBOL_METHOD: private void b2World::SolveTOI(const b2TimeStep &) [b2World.cpp <577:1 <577:15 577:22> 895:1>]
SYMBOL_METHOD: private void b2World::SolveTOI(const b2TimeStep &) [b2World.h <228:2 <228:7 228:14> 228:38>]
SYMBOL_METHOD: private void b2World::DrawJoint(b2Joint *) [b2World.cpp <1112:1 <1112:15 1112:23> 1151:1>]
SYMBOL_METHOD: private void b2World::DrawJoint(b2Joint *) [b2World.h <230:2 <230:7 230:15> 230:31>]
SYMBOL_METHOD: private void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) [b2World.cpp <1031:1 <1031:15 1031:23> 1110:1>]
SYMBOL_METHOD: private void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) [b2World.h <231:2 <231:7 231:15> 231:78>]
SYMBOL_FIELD: private b2BlockAllocator b2World::m_blockAllocator [b2World.h <233:19 233:34>]
SYMBOL_FIELD: private b2StackAllocator b2World::m_stackAllocator [b2World.h <234:19 234:34>]
SYMBOL_FIELD: private int32 b2World::m_flags [b2World.h <236:8 236:14>]
SYMBOL_FIELD: private b2ContactManager b2World::m_contactManager [b2World.h <238:19 238:34>]
SYMBOL_FIELD: private b2Body * b2World::m_bodyList [b2World.h <240:10 240:19>]
SYMBOL_FIELD: private b2Joint * b2World::m_jointList [b2World.h <241:11 241:21>]
SYMBOL_FIELD: private int32 b2World::m_bodyCount [b2World.h <243:8 243:18>]
SYMBOL_FIELD: private int32 b2World::m_jointCount [b2World.h <244:8 244:19>]
SYMBOL_FIELD: private b2Vec2 b2World::m_gravity [b2World.h <246:9 246:17>]
SYMBOL_FIELD: private b2DestructionListener * b2World::m_destructionListener [b2World.h <249:25 249:45>]
SYMBOL_FIELD: private b2Draw * b2World::g_debugDraw [b2World.h <250:10 250:20>]
SYMBOL_FIELD: private float32 b2World::m_inv_dt0 [b2World.h <254:10 254:18>]
SYMBOL_FIELD: private bool b2World::m_stepComplete [b2World.h <261:7 261:20>]
SYMBOL_FIELD: private b2Profile b2World::m_profile [b2World.h <263:12 263:20>]
SYMBOL_METHOD: public void b2World::b2World(const b2World &) [b2World.h <41:7 <41:7 41:13> 41:13>]
SYMBOL_STRUCT: b2MassData [b2Shape.h <27:1 <27:8 27:17> 37:1>]
SYMBOL_FIELD: public float32 b2MassData::mass [b2Shape.h <30:10 30:13>]
SYMBOL_FIELD: public b2Vec2 b2MassData::center [b2Shape.h <33:9 33:14>]
SYMBOL_FIELD: public float32 b2MassData::I [b2Shape.h <36:10 36:10>]
SYMBOL_ENUM: public b2Shape::Type [b2Shape.h <46:2 <46:7 46:10> 53:2>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_circle [b2Shape.h <48:3 48:10>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_edge [b2Shape.h <49:3 49:8>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_polygon [b2Shape.h <50:3 50:11>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_chain [b2Shape.h <51:3 51:9>]
SYMBOL_ENUM_CONSTANT: b2Shape::Type::e_typeCount [b2Shape.h <52:3 52:13>]
SYMBOL_METHOD: public void b2Shape::~b2Shape() [b2Shape.h <55:2 <55:2 <55:10 55:17> 55:19> 55:22>]
SYMBOL_METHOD: public b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2Shape.h <58:2 <58:19 58:23> 58:62>]
SYMBOL_METHOD: public b2Shape::Type b2Shape::GetType() const [b2Shape.h <62:2 <62:7 62:13> 62:21>]
SYMBOL_METHOD: public b2Shape::Type b2Shape::GetType() const [b2Shape.h <99:1 <99:31 99:37> 102:1>]
SYMBOL_METHOD: public int32 b2Shape::GetChildCount() const [b2Shape.h <65:2 <65:16 65:28> 65:40>]
SYMBOL_METHOD: public bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2Shape.h <70:2 <70:15 70:23> 70:73>]
SYMBOL_METHOD: public bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2Shape.h <77:2 <77:15 77:21> 78:63>]
SYMBOL_METHOD: public void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2Shape.h <84:2 <84:15 84:25> 84:90>]
SYMBOL_METHOD: public void b2Shape::ComputeMass(b2MassData *, float32) const [b2Shape.h <90:2 <90:15 90:25> 90:74>]
SYMBOL_FIELD: public b2Shape::Type b2Shape::m_type [b2Shape.h <92:7 92:12>]
SYMBOL_FIELD: public float32 b2Shape::m_radius [b2Shape.h <96:10 96:17>]
SYMBOL_METHOD: public b2Shape & b2Shape::operator=(const b2Shape &) [b2Shape.h <42:7 <42:7 42:13> 42:13>]
SYMBOL_METHOD: public void b2Shape::b2Shape(const b2Shape &) [b2Shape.h <42:7 <42:7 42:13> 42:13>]
SYMBOL_METHOD: public void b2Shape::b2Shape() [b2Shape.h <42:7 <42:7 42:13> 42:13>]
SYMBOL_STRUCT: b2FixtureDef [b2Body.h <31:8 31:19>]
SYMBOL_STRUCT: b2FixtureDef [b2Fixture.h <56:1 <56:8 56:19> 91:1>]
SYMBOL_STRUCT: b2JointEdge [b2Body.h <32:8 32:18>]
SYMBOL_STRUCT: b2JointEdge [b2Joint.h <65:1 <65:8 65:18> 71:1>]
SYMBOL_STRUCT: b2ContactEdge [b2Body.h <33:8 33:20>]
SYMBOL_STRUCT: b2ContactEdge [b2Contact.h <66:1 <66:8 66:20> 72:1>]
SYMBOL_ENUM: b2BodyType [b2Body.h <39:1 <39:6 39:15> 47:1>]
SYMBOL_ENUM_CONSTANT: b2BodyType::b2_staticBody [b2Body.h <41:2 41:14>]
SYMBOL_ENUM_CONSTANT: b2BodyType::b2_kinematicBody [b2Body.h <42:2 42:17>]
SYMBOL_ENUM_CONSTANT: b2BodyType::b2_dynamicBody [b2Body.h <43:2 43:15>]
SYMBOL_METHOD: public void b2BodyDef::b2BodyDef() [b2Body.h <54:2 <54:2 <54:2 54:10> 54:12> 70:2>]
SYMBOL_FIELD: public b2Vec2 b2BodyDef::position [b2Body.h <78:9 78:16>]
SYMBOL_FIELD: public b2Vec2 b2BodyDef::linearVelocity [b2Body.h <84:9 84:22>]
SYMBOL_FIELD: public void * b2BodyDef::userData [b2Body.h <121:8 121:15>]
SYMBOL_FIELD: public float32 b2BodyDef::angle [b2Body.h <81:10 81:14>]
SYMBOL_FIELD: public float32 b2BodyDef::angularVelocity [b2Body.h <87:10 87:24>]
SYMBOL_FIELD: public float32 b2BodyDef::linearDamping [b2Body.h <93:10 93:22>]
SYMBOL_FIELD: public float32 b2BodyDef::angularDamping [b2Body.h <99:10 99:23>]
SYMBOL_FIELD: public bool b2BodyDef::allowSleep [b2Body.h <103:7 103:16>]
SYMBOL_FIELD: public bool b2BodyDef::awake [b2Body.h <106:7 106:11>]
SYMBOL_FIELD: public bool b2BodyDef::fixedRotation [b2Body.h <109:7 109:19>]
SYMBOL_FIELD: public bool b2BodyDef::bullet [b2Body.h <115:7 115:12>]
SYMBOL_FIELD: public b2BodyType b2BodyDef::type [b2Body.h <74:13 74:16>]
SYMBOL_FIELD: public bool b2BodyDef::active [b2Body.h <118:7 118:12>]
SYMBOL_FIELD: public float32 b2BodyDef::gravityScale [b2Body.h <124:10 124:21>]
SYMBOL_METHOD: public b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) [b2Body.h <138:2 <138:13 138:25> 138:50>]
SYMBOL_METHOD: public b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) [b2Body.h <147:2 <147:13 147:25> 147:64>]
SYMBOL_METHOD: public void b2Body::DestroyFixture(b2Fixture *) [b2Body.h <156:2 <156:7 156:20> 156:40>]
SYMBOL_METHOD: public void b2Body::SetTransform(const b2Vec2 &, float32) [b2Body.h <163:2 <163:7 163:18> 163:57>]
SYMBOL_METHOD: public const b2Transform & b2Body::GetTransform() const [b2Body.h <167:2 <167:21 167:32> 167:40>]
SYMBOL_METHOD: public const b2Transform & b2Body::GetTransform() const [b2Body.h <480:1 <480:35 480:46> 483:1>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetPosition() const [b2Body.h <171:2 <171:16 171:26> 171:34>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetPosition() const [b2Body.h <485:1 <485:30 485:40> 488:1>]
SYMBOL_METHOD: public float32 b2Body::GetAngle() const [b2Body.h <175:2 <175:10 175:17> 175:25>]
SYMBOL_METHOD: public float32 b2Body::GetAngle() const [b2Body.h <490:1 <490:24 490:31> 493:1>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetWorldCenter() const [b2Body.h <178:2 <178:16 178:29> 178:37>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetWorldCenter() const [b2Body.h <495:1 <495:30 495:43> 498:1>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetLocalCenter() const [b2Body.h <181:2 <181:16 181:29> 181:37>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetLocalCenter() const [b2Body.h <500:1 <500:30 500:43> 503:1>]
SYMBOL_METHOD: public void b2Body::SetLinearVelocity(const b2Vec2 &) [b2Body.h <185:2 <185:7 185:23> 185:40>]
SYMBOL_METHOD: public void b2Body::SetLinearVelocity(const b2Vec2 &) [b2Body.h <505:1 <505:21 505:37> 518:1>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetLinearVelocity() const [b2Body.h <189:2 <189:16 189:32> 189:40>]
SYMBOL_METHOD: public const b2Vec2 & b2Body::GetLinearVelocity() const [b2Body.h <520:1 <520:30 520:46> 523:1>]
SYMBOL_METHOD: public void b2Body::SetAngularVelocity(float32) [b2Body.h <193:2 <193:7 193:24> 193:39>]
SYMBOL_METHOD: public void b2Body::SetAngularVelocity(float32) [b2Body.h <525:1 <525:21 525:38> 538:1>]
SYMBOL_METHOD: public float32 b2Body::GetAngularVelocity() const [b2Body.h <197:2 <197:10 197:27> 197:35>]
SYMBOL_METHOD: public float32 b2Body::GetAngularVelocity() const [b2Body.h <540:1 <540:24 540:41> 543:1>]
SYMBOL_METHOD: public void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) [b2Body.h <205:2 <205:7 205:16> 205:69>]
SYMBOL_METHOD: public void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) [b2Body.h <740:1 <740:21 740:30> 758:1>]
SYMBOL_METHOD: public void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) [b2Body.h <210:2 <210:7 210:24> 210:56>]
SYMBOL_METHOD: public void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) [b2Body.h <760:1 <760:21 760:38> 777:1>]
SYMBOL_METHOD: public void b2Body::ApplyTorque(float32, bool) [b2Body.h <216:2 <216:7 216:17> 216:44>]
SYMBOL_METHOD: public void b2Body::ApplyTorque(float32, bool) [b2Body.h <779:1 <779:21 779:31> 796:1>]
SYMBOL_METHOD: public void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) [b2Body.h <224:2 <224:7 224:24> 224:79>]
SYMBOL_METHOD: public void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) [b2Body.h <798:1 <798:21 798:38> 816:1>]
SYMBOL_METHOD: public void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) [b2Body.h <229:2 <229:7 229:32> 229:66>]
SYMBOL_METHOD: public void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) [b2Body.h <818:1 <818:21 818:46> 835:1>]
SYMBOL_METHOD: public void b2Body::ApplyAngularImpulse(float32, bool) [b2Body.h <234:2 <234:7 234:25> 234:53>]
SYMBOL_METHOD: public void b2Body::ApplyAngularImpulse(float32, bool) [b2Body.h <837:1 <837:21 837:39> 854:1>]
SYMBOL_METHOD: public float32 b2Body::GetMass() const [b2Body.h <238:2 <238:10 238:16> 238:24>]
SYMBOL_METHOD: public float32 b2Body::GetMass() const [b2Body.h <545:1 <545:24 545:30> 548:1>]
SYMBOL_METHOD: public float32 b2Body::GetInertia() const [b2Body.h <242:2 <242:10 242:19> 242:27>]
SYMBOL_METHOD: public float32 b2Body::GetInertia() const [b2Body.h <550:1 <550:24 550:33> 553:1>]
SYMBOL_METHOD: public void b2Body::GetMassData(b2MassData *) const [b2Body.h <246:2 <246:7 246:17> 246:41>]
SYMBOL_METHOD: public void b2Body::GetMassData(b2MassData *) const [b2Body.h <555:1 <555:21 555:31> 560:1>]
SYMBOL_METHOD: public void b2Body::SetMassData(const b2MassData *) [b2Body.h <253:2 <253:7 253:17> 253:41>]
SYMBOL_METHOD: public void b2Body::ResetMassData() [b2Body.h <258:2 <258:7 258:19> 258:21>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const [b2Body.h <263:2 <263:9 263:21> 263:53>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const [b2Body.h <562:1 <562:23 562:35> 565:1>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const [b2Body.h <268:2 <268:9 268:22> 268:55>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const [b2Body.h <567:1 <567:23 567:36> 570:1>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const [b2Body.h <273:2 <273:9 273:21> 273:53>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const [b2Body.h <572:1 <572:23 572:35> 575:1>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const [b2Body.h <278:2 <278:9 278:22> 278:55>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const [b2Body.h <577:1 <577:23 577:36> 580:1>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const [b2Body.h <283:2 <283:9 283:39> 283:71>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const [b2Body.h <582:1 <582:23 582:53> 585:1>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const [b2Body.h <288:2 <288:9 288:39> 288:71>]
SYMBOL_METHOD: public b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const [b2Body.h <587:1 <587:23 587:53> 590:1>]
SYMBOL_METHOD: public float32 b2Body::GetLinearDamping() const [b2Body.h <291:2 <291:10 291:25> 291:33>]
SYMBOL_METHOD: public float32 b2Body::GetLinearDamping() const [b2Body.h <592:1 <592:24 592:39> 595:1>]
SYMBOL_METHOD: public void b2Body::SetLinearDamping(float32) [b2Body.h <294:2 <294:7 294:22> 294:45>]
SYMBOL_METHOD: public void b2Body::SetLinearDamping(float32) [b2Body.h <597:1 <597:21 597:36> 600:1>]
SYMBOL_METHOD: public float32 b2Body::GetAngularDamping() const [b2Body.h <297:2 <297:10 297:26> 297:34>]
SYMBOL_METHOD: public float32 b2Body::GetAngularDamping() const [b2Body.h <602:1 <602:24 602:40> 605:1>]
SYMBOL_METHOD: public void b2Body::SetAngularDamping(float32) [b2Body.h <300:2 <300:7 300:23> 300:47>]
SYMBOL_METHOD: public void b2Body::SetAngularDamping(float32) [b2Body.h <607:1 <607:21 607:37> 610:1>]
SYMBOL_METHOD: public float32 b2Body::GetGravityScale() const [b2Body.h <303:2 <303:10 303:24> 303:32>]
SYMBOL_METHOD: public float32 b2Body::GetGravityScale() const [b2Body.h <612:1 <612:24 612:38> 615:1>]
SYMBOL_METHOD: public void b2Body::SetGravityScale(float32) [b2Body.h <306:2 <306:7 306:21> 306:36>]
SYMBOL_METHOD: public void b2Body::SetGravityScale(float32) [b2Body.h <617:1 <617:21 617:35> 620:1>]
SYMBOL_METHOD: public void b2Body::SetType(b2BodyType) [b2Body.h <309:2 <309:7 309:13> 309:30>]
SYMBOL_METHOD: public b2BodyType b2Body::GetType() const [b2Body.h <312:2 <312:13 312:19> 312:27>]
SYMBOL_METHOD: public b2BodyType b2Body::GetType() const [b2Body.h <475:1 <475:27 475:33> 478:1>]
SYMBOL_METHOD: public void b2Body::SetBullet(bool) [b2Body.h <315:2 <315:7 315:15> 315:26>]
SYMBOL_METHOD: public void b2Body::SetBullet(bool) [b2Body.h <622:1 <622:21 622:29> 632:1>]
SYMBOL_METHOD: public bool b2Body::IsBullet() const [b2Body.h <318:2 <318:7 318:14> 318:22>]
SYMBOL_METHOD: public bool b2Body::IsBullet() const [b2Body.h <634:1 <634:21 634:28> 637:1>]
SYMBOL_METHOD: public void b2Body::SetSleepingAllowed(bool) [b2Body.h <322:2 <322:7 322:24> 322:35>]
SYMBOL_METHOD: public void b2Body::SetSleepingAllowed(bool) [b2Body.h <672:1 <672:21 672:38> 683:1>]
SYMBOL_METHOD: public bool b2Body::IsSleepingAllowed() const [b2Body.h <325:2 <325:7 325:23> 325:31>]
SYMBOL_METHOD: public bool b2Body::IsSleepingAllowed() const [b2Body.h <685:1 <685:21 685:37> 688:1>]
SYMBOL_METHOD: public void b2Body::SetAwake(bool) [b2Body.h <330:2 <330:7 330:14> 330:25>]
SYMBOL_METHOD: public void b2Body::SetAwake(bool) [b2Body.h <639:1 <639:21 639:28> 655:1>]
SYMBOL_METHOD: public bool b2Body::IsAwake() const [b2Body.h <334:2 <334:7 334:13> 334:21>]
SYMBOL_METHOD: public bool b2Body::IsAwake() const [b2Body.h <657:1 <657:21 657:27> 660:1>]
SYMBOL_METHOD: public void b2Body::SetActive(bool) [b2Body.h <349:2 <349:7 349:15> 349:26>]
SYMBOL_METHOD: public bool b2Body::IsActive() const [b2Body.h <352:2 <352:7 352:14> 352:22>]
SYMBOL_METHOD: public bool b2Body::IsActive() const [b2Body.h <662:1 <662:21 662:28> 665:1>]
SYMBOL_METHOD: public void b2Body::SetFixedRotation(bool) [b2Body.h <356:2 <356:7 356:22> 356:33>]
SYMBOL_METHOD: public bool b2Body::IsFixedRotation() const [b2Body.h <359:2 <359:7 359:21> 359:29>]
SYMBOL_METHOD: public bool b2Body::IsFixedRotation() const [b2Body.h <667:1 <667:21 667:35> 670:1>]
SYMBOL_METHOD: public b2Fixture * b2Body::GetFixtureList() [b2Body.h <362:2 <362:13 362:26> 362:28>]
SYMBOL_METHOD: public b2Fixture * b2Body::GetFixtureList() [b2Body.h <690:1 <690:27 690:40> 693:1>]
SYMBOL_METHOD: public const b2Fixture * b2Body::GetFixtureList() const [b2Body.h <363:2 <363:19 363:32> 363:40>]
SYMBOL_METHOD: public const b2Fixture * b2Body::GetFixtureList() const [b2Body.h <695:1 <695:33 695:46> 698:1>]
SYMBOL_METHOD: public b2JointEdge * b2Body::GetJointList() [b2Body.h <366:2 <366:15 366:26> 366:28>]
SYMBOL_METHOD: public b2JointEdge * b2Body::GetJointList() [b2Body.h <700:1 <700:29 700:40> 703:1>]
SYMBOL_METHOD: public const b2JointEdge * b2Body::GetJointList() const [b2Body.h <367:2 <367:21 367:32> 367:40>]
SYMBOL_METHOD: public const b2JointEdge * b2Body::GetJointList() const [b2Body.h <705:1 <705:35 705:46> 708:1>]
SYMBOL_METHOD: public b2ContactEdge * b2Body::GetContactList() [b2Body.h <372:2 <372:17 372:30> 372:32>]
SYMBOL_METHOD: public b2ContactEdge * b2Body::GetContactList() [b2Body.h <710:1 <710:31 710:44> 713:1>]
SYMBOL_METHOD: public const b2ContactEdge * b2Body::GetContactList() const [b2Body.h <373:2 <373:23 373:36> 373:44>]
SYMBOL_METHOD: public const b2ContactEdge * b2Body::GetContactList() const [b2Body.h <715:1 <715:37 715:50> 718:1>]
SYMBOL_METHOD: public b2Body * b2Body::GetNext() [b2Body.h <376:2 <376:10 376:16> 376:18>]
SYMBOL_METHOD: public b2Body * b2Body::GetNext() [b2Body.h <720:1 <720:24 720:30> 723:1>]
SYMBOL_METHOD: public const b2Body * b2Body::GetNext() const [b2Body.h <377:2 <377:16 377:22> 377:30>]
SYMBOL_METHOD: public const b2Body * b2Body::GetNext() const [b2Body.h <725:1 <725:30 725:36> 728:1>]
SYMBOL_METHOD: public void * b2Body::GetUserData() const [b2Body.h <380:2 <380:8 380:18> 380:26>]
SYMBOL_METHOD: public void * b2Body::GetUserData() const [b2Body.h <735:1 <735:22 735:32> 738:1>]
SYMBOL_METHOD: public void b2Body::SetUserData(void *) [b2Body.h <383:2 <383:7 383:17> 383:29>]
SYMBOL_METHOD: public void b2Body::SetUserData(void *) [b2Body.h <730:1 <730:21 730:31> 733:1>]
SYMBOL_METHOD: public b2World * b2Body::GetWorld() [b2Body.h <386:2 <386:11 386:18> 386:20>]
SYMBOL_METHOD: public b2World * b2Body::GetWorld() [b2Body.h <872:1 <872:25 872:32> 875:1>]
SYMBOL_METHOD: public const b2World * b2Body::GetWorld() const [b2Body.h <387:2 <387:17 387:24> 387:32>]
SYMBOL_METHOD: public const b2World * b2Body::GetWorld() const [b2Body.h <877:1 <877:31 877:38> 880:1>]
SYMBOL_METHOD: public void b2Body::Dump() [b2Body.h <390:2 <390:7 390:10> 390:12>]
SYMBOL_CLASS: b2Island [b2Island.h <34:1 <34:7 34:14> 91:1>]
SYMBOL_CLASS: b2ContactSolver [b2ContactSolver.h <69:1 <69:7 69:21> 92:1>]
SYMBOL_CLASS: b2PulleyJoint [b2PulleyJoint.h <79:1 <79:7 79:19> 150:1>]
SYMBOL_ENUM: private b2Body::anonymous enum (b2Body.h<413:2>) [b2Body.h <413:2 <413:2 413:5> 422:2>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2Body.h <415:3 415:14>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <416:3 416:13>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.h <417:3 417:17>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.h <418:3 418:14>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.h <419:3 419:21>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.h <420:3 420:14>]
SYMBOL_ENUM_CONSTANT: b2Body::anonymous enum (b2Body.h<413:2>)::e_toiFlag [b2Body.h <421:3 421:11>]
SYMBOL_METHOD: private void b2Body::b2Body(const b2BodyDef *, b2World *) [b2Body.h <424:2 <424:2 424:7> 424:44>]
SYMBOL_METHOD: private void b2Body::~b2Body() [b2Body.h <425:2 <425:2 425:8> 425:10>]
SYMBOL_METHOD: private void b2Body::SynchronizeFixtures() [b2Body.h <427:2 <427:7 427:25> 427:27>]
SYMBOL_METHOD: private void b2Body::SynchronizeTransform() [b2Body.h <428:2 <428:7 428:26> 428:28>]
SYMBOL_METHOD: private void b2Body::SynchronizeTransform() [b2Body.h <856:1 <856:21 856:40> 860:1>]
SYMBOL_METHOD: private bool b2Body::ShouldCollide(const b2Body *) const [b2Body.h <432:2 <432:7 432:19> 432:46>]
SYMBOL_METHOD: private void b2Body::Advance(float32) [b2Body.h <434:2 <434:7 434:13> 434:24>]
SYMBOL_METHOD: private void b2Body::Advance(float32) [b2Body.h <862:1 <862:21 862:27> 870:1>]
SYMBOL_FIELD: private b2BodyType b2Body::m_type [b2Body.h <436:13 436:18>]
SYMBOL_FIELD: private uint16 b2Body::m_flags [b2Body.h <438:9 438:15>]
SYMBOL_FIELD: private int32 b2Body::m_islandIndex [b2Body.h <440:8 440:20>]
SYMBOL_FIELD: private b2Transform b2Body::m_xf [b2Body.h <442:14 442:17>]
SYMBOL_FIELD: private b2Sweep b2Body::m_sweep [b2Body.h <443:10 443:16>]
SYMBOL_FIELD: private b2Vec2 b2Body::m_linearVelocity [b2Body.h <445:9 445:24>]
SYMBOL_FIELD: private float32 b2Body::m_angularVelocity [b2Body.h <446:10 446:26>]
SYMBOL_FIELD: private b2Vec2 b2Body::m_force [b2Body.h <448:9 448:15>]
SYMBOL_FIELD: private float32 b2Body::m_torque [b2Body.h <449:10 449:17>]
SYMBOL_FIELD: private b2World * b2Body::m_world [b2Body.h <451:11 451:17>]
SYMBOL_FIELD: private b2Body * b2Body::m_prev [b2Body.h <452:10 452:15>]
SYMBOL_FIELD: private b2Body * b2Body::m_next [b2Body.h <453:10 453:15>]
SYMBOL_FIELD: private b2Fixture * b2Body::m_fixtureList [b2Body.h <455:13 455:25>]
SYMBOL_FIELD: private int32 b2Body::m_fixtureCount [b2Body.h <456:8 456:21>]
SYMBOL_FIELD: private b2JointEdge * b2Body::m_jointList [b2Body.h <458:15 458:25>]
SYMBOL_FIELD: private b2ContactEdge * b2Body::m_contactList [b2Body.h <459:17 459:29>]
SYMBOL_FIELD: private float32 b2Body::m_mass [b2Body.h <461:10 461:15>]
SYMBOL_FIELD: private float32 b2Body::m_invMass [b2Body.h <461:18 461:26>]
SYMBOL_FIELD: private float32 b2Body::m_I [b2Body.h <464:10 464:12>]
SYMBOL_FIELD: private float32 b2Body::m_invI [b2Body.h <464:15 464:20>]
SYMBOL_FIELD: private float32 b2Body::m_linearDamping [b2Body.h <466:10 466:24>]
SYMBOL_FIELD: private float32 b2Body::m_angularDamping [b2Body.h <467:10 467:25>]
SYMBOL_FIELD: private float32 b2Body::m_gravityScale [b2Body.h <468:10 468:23>]
SYMBOL_FIELD: private float32 b2Body::m_sleepTime [b2Body.h <470:10 470:20>]
SYMBOL_FIELD: private void * b2Body::m_userData [b2Body.h <472:8 472:17>]
SYMBOL_METHOD: public void b2Body::b2Body(const b2Body &) [b2Body.h <128:7 <128:7 128:12> 128:12>]
SYMBOL_STRUCT: b2Filter [b2Fixture.h <32:1 <32:8 32:15> 52:1>]
SYMBOL_METHOD: public void b2Filter::b2Filter() [b2Fixture.h <34:2 <34:2 <34:2 34:9> 34:11> 39:2>]
SYMBOL_FIELD: public uint16 b2Filter::categoryBits [b2Fixture.h <42:9 42:20>]
SYMBOL_FIELD: public uint16 b2Filter::maskBits [b2Fixture.h <46:9 46:16>]
SYMBOL_FIELD: public int16 b2Filter::groupIndex [b2Fixture.h <51:8 51:17>]
SYMBOL_METHOD: public void b2Filter::b2Filter(const b2Filter &) [b2Fixture.h <32:8 <32:8 32:15> 32:15>]
SYMBOL_METHOD: public void b2Filter::b2Filter(b2Filter &&) [b2Fixture.h <32:8 <32:8 32:15> 32:15>]
SYMBOL_METHOD: public void b2Filter::~b2Filter() [b2Fixture.h <32:8 <32:8 32:15> 32:15>]
SYMBOL_METHOD: public void b2FixtureDef::b2FixtureDef() [b2Fixture.h <59:2 <59:2 <59:2 59:13> 59:15> 67:2>]
SYMBOL_FIELD: public b2Filter b2FixtureDef::filter [b2Fixture.h <90:11 90:16>]
SYMBOL_FIELD: public const b2Shape * b2FixtureDef::shape [b2Fixture.h <71:17 71:21>]
SYMBOL_FIELD: public void * b2FixtureDef::userData [b2Fixture.h <74:8 74:15>]
SYMBOL_FIELD: public float32 b2FixtureDef::friction [b2Fixture.h <77:10 77:17>]
SYMBOL_FIELD: public float32 b2FixtureDef::restitution [b2Fixture.h <80:10 80:20>]
SYMBOL_FIELD: public float32 b2FixtureDef::density [b2Fixture.h <83:10 83:16>]
SYMBOL_FIELD: public bool b2FixtureDef::isSensor [b2Fixture.h <87:7 87:14>]
SYMBOL_STRUCT: b2FixtureProxy [b2Fixture.h <94:1 <94:8 94:21> 100:1>]
SYMBOL_FIELD: public b2AABB b2FixtureProxy::aabb [b2Fixture.h <96:9 96:12>]
SYMBOL_FIELD: public b2Fixture * b2FixtureProxy::fixture [b2Fixture.h <97:13 97:19>]
SYMBOL_FIELD: public int32 b2FixtureProxy::childIndex [b2Fixture.h <98:8 98:17>]
SYMBOL_FIELD: public int32 b2FixtureProxy::proxyId [b2Fixture.h <99:8 99:14>]
SYMBOL_METHOD: public b2Shape::Type b2Fixture::GetType() const [b2Fixture.h <112:2 <112:16 112:22> 112:30>]
SYMBOL_METHOD: public b2Shape::Type b2Fixture::GetType() const [b2Fixture.h <238:1 <238:33 238:39> 241:1>]
SYMBOL_METHOD: public b2Shape * b2Fixture::GetShape() [b2Fixture.h <117:2 <117:11 117:18> 117:20>]
SYMBOL_METHOD: public b2Shape * b2Fixture::GetShape() [b2Fixture.h <243:1 <243:28 243:35> 246:1>]
SYMBOL_METHOD: public const b2Shape * b2Fixture::GetShape() const [b2Fixture.h <118:2 <118:17 118:24> 118:32>]
SYMBOL_METHOD: public const b2Shape * b2Fixture::GetShape() const [b2Fixture.h <248:1 <248:34 248:41> 251:1>]
SYMBOL_METHOD: public void b2Fixture::SetSensor(bool) [b2Fixture.h <121:2 <121:7 121:15> 121:28>]
SYMBOL_METHOD: public bool b2Fixture::IsSensor() const [b2Fixture.h <125:2 <125:7 125:14> 125:22>]
SYMBOL_METHOD: public bool b2Fixture::IsSensor() const [b2Fixture.h <253:1 <253:24 253:31> 256:1>]
SYMBOL_METHOD: public void b2Fixture::SetFilterData(const b2Filter &) [b2Fixture.h <130:2 <130:7 130:19> 130:43>]
SYMBOL_METHOD: public const b2Filter & b2Fixture::GetFilterData() const [b2Fixture.h <133:2 <133:18 133:30> 133:38>]
SYMBOL_METHOD: public const b2Filter & b2Fixture::GetFilterData() const [b2Fixture.h <258:1 <258:35 258:47> 261:1>]
SYMBOL_METHOD: public void b2Fixture::Refilter() [b2Fixture.h <136:2 <136:7 136:14> 136:16>]
SYMBOL_METHOD: public b2Body * b2Fixture::GetBody() [b2Fixture.h <140:2 <140:10 140:16> 140:18>]
SYMBOL_METHOD: public b2Body * b2Fixture::GetBody() [b2Fixture.h <273:1 <273:27 273:33> 276:1>]
SYMBOL_METHOD: public const b2Body * b2Fixture::GetBody() const [b2Fixture.h <141:2 <141:16 141:22> 141:30>]
SYMBOL_METHOD: public const b2Body * b2Fixture::GetBody() const [b2Fixture.h <278:1 <278:33 278:39> 281:1>]
SYMBOL_METHOD: public b2Fixture * b2Fixture::GetNext() [b2Fixture.h <145:2 <145:13 145:19> 145:21>]
SYMBOL_METHOD: public b2Fixture * b2Fixture::GetNext() [b2Fixture.h <283:1 <283:30 283:36> 286:1>]
SYMBOL_METHOD: public const b2Fixture * b2Fixture::GetNext() const [b2Fixture.h <146:2 <146:19 146:25> 146:33>]
SYMBOL_METHOD: public const b2Fixture * b2Fixture::GetNext() const [b2Fixture.h <288:1 <288:36 288:42> 291:1>]
SYMBOL_METHOD: public void * b2Fixture::GetUserData() const [b2Fixture.h <150:2 <150:8 150:18> 150:26>]
SYMBOL_METHOD: public void * b2Fixture::GetUserData() const [b2Fixture.h <263:1 <263:25 263:35> 266:1>]
SYMBOL_METHOD: public void b2Fixture::SetUserData(void *) [b2Fixture.h <153:2 <153:7 153:17> 153:29>]
SYMBOL_METHOD: public void b2Fixture::SetUserData(void *) [b2Fixture.h <268:1 <268:24 268:34> 271:1>]
SYMBOL_METHOD: public bool b2Fixture::TestPoint(const b2Vec2 &) const [b2Fixture.h <157:2 <157:7 157:15> 157:38>]
SYMBOL_METHOD: public bool b2Fixture::TestPoint(const b2Vec2 &) const [b2Fixture.h <324:1 <324:24 324:32> 327:1>]
SYMBOL_METHOD: public bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const [b2Fixture.h <162:2 <162:7 162:13> 162:91>]
SYMBOL_METHOD: public bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const [b2Fixture.h <329:1 <329:24 329:30> 332:1>]
SYMBOL_METHOD: public void b2Fixture::GetMassData(b2MassData *) const [b2Fixture.h <167:2 <167:7 167:17> 167:45>]
SYMBOL_METHOD: public void b2Fixture::GetMassData(b2MassData *) const [b2Fixture.h <334:1 <334:24 334:34> 337:1>]
SYMBOL_METHOD: public void b2Fixture::SetDensity(float32) [b2Fixture.h <171:2 <171:7 171:16> 171:33>]
SYMBOL_METHOD: public void b2Fixture::SetDensity(float32) [b2Fixture.h <293:1 <293:24 293:33> 297:1>]
SYMBOL_METHOD: public float32 b2Fixture::GetDensity() const [b2Fixture.h <174:2 <174:10 174:19> 174:27>]
SYMBOL_METHOD: public float32 b2Fixture::GetDensity() const [b2Fixture.h <299:1 <299:27 299:36> 302:1>]
SYMBOL_METHOD: public float32 b2Fixture::GetFriction() const [b2Fixture.h <177:2 <177:10 177:20> 177:28>]
SYMBOL_METHOD: public float32 b2Fixture::GetFriction() const [b2Fixture.h <304:1 <304:27 304:37> 307:1>]
SYMBOL_METHOD: public void b2Fixture::SetFriction(float32) [b2Fixture.h <181:2 <181:7 181:17> 181:35>]
SYMBOL_METHOD: public void b2Fixture::SetFriction(float32) [b2Fixture.h <309:1 <309:24 309:34> 312:1>]
SYMBOL_METHOD: public float32 b2Fixture::GetRestitution() const [b2Fixture.h <184:2 <184:10 184:23> 184:31>]
SYMBOL_METHOD: public float32 b2Fixture::GetRestitution() const [b2Fixture.h <314:1 <314:27 314:40> 317:1>]
SYMBOL_METHOD: public void b2Fixture::SetRestitution(float32) [b2Fixture.h <188:2 <188:7 188:20> 188:41>]
SYMBOL_METHOD: public void b2Fixture::SetRestitution(float32) [b2Fixture.h <319:1 <319:24 319:37> 322:1>]
SYMBOL_METHOD: public const b2AABB & b2Fixture::GetAABB(int32) const [b2Fixture.h <193:2 <193:16 193:22> 193:46>]
SYMBOL_METHOD: public const b2AABB & b2Fixture::GetAABB(int32) const [b2Fixture.h <339:1 <339:33 339:39> 343:1>]
SYMBOL_METHOD: public void b2Fixture::Dump(int32) [b2Fixture.h <196:2 <196:7 196:10> 196:27>]
SYMBOL_METHOD: protected void b2Fixture::b2Fixture() [b2Fixture.h <205:2 <205:2 205:10> 205:12>]
SYMBOL_METHOD: protected void b2Fixture::Create(b2BlockAllocator *, b2Body *, const b2FixtureDef *) [b2Fixture.h <209:2 <209:7 209:12> 209:80>]
SYMBOL_METHOD: protected void b2Fixture::Destroy(b2BlockAllocator *) [b2Fixture.h <210:2 <210:7 210:13> 210:42>]
SYMBOL_METHOD: protected void b2Fixture::CreateProxies(b2BroadPhase *, const b2Transform &) [b2Fixture.h <213:2 <213:7 213:19> 213:68>]
SYMBOL_METHOD: protected void b2Fixture::DestroyProxies(b2BroadPhase *) [b2Fixture.h <214:2 <214:7 214:20> 214:46>]
SYMBOL_METHOD: protected void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) [b2Fixture.h <216:2 <216:7 216:17> 216:91>]
SYMBOL_FIELD: protected float32 b2Fixture::m_density [b2Fixture.h <218:10 218:18>]
SYMBOL_FIELD: protected b2Fixture * b2Fixture::m_next [b2Fixture.h <220:13 220:18>]
SYMBOL_FIELD: protected b2Body * b2Fixture::m_body [b2Fixture.h <221:10 221:15>]
SYMBOL_FIELD: protected b2Shape * b2Fixture::m_shape [b2Fixture.h <223:11 223:17>]
SYMBOL_FIELD: protected float32 b2Fixture::m_friction [b2Fixture.h <225:10 225:19>]
SYMBOL_FIELD: protected float32 b2Fixture::m_restitution [b2Fixture.h <226:10 226:22>]
SYMBOL_FIELD: protected b2FixtureProxy * b2Fixture::m_proxies [b2Fixture.h <228:18 228:26>]
SYMBOL_FIELD: protected int32 b2Fixture::m_proxyCount [b2Fixture.h <229:8 229:19>]
SYMBOL_FIELD: protected b2Filter b2Fixture::m_filter [b2Fixture.h <231:11 231:18>]
SYMBOL_FIELD: protected bool b2Fixture::m_isSensor [b2Fixture.h <233:7 233:16>]
SYMBOL_FIELD: protected void * b2Fixture::m_userData [b2Fixture.h <235:8 235:17>]
SYMBOL_METHOD: public void b2Fixture::~b2Fixture() [b2Fixture.h <107:7 <107:7 107:15> 107:15>]
SYMBOL_STRUCT: b2ContactVelocityConstraint [b2Island.h <30:8 30:34>]
SYMBOL_STRUCT: b2ContactVelocityConstraint [b2ContactSolver.h <42:1 <42:8 42:34> 57:1>]
SYMBOL_METHOD: public void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) [b2Island.h <37:2 <37:2 37:9> 38:60>]
SYMBOL_METHOD: public void b2Island::~b2Island() [b2Island.h <39:2 <39:2 39:10> 39:12>]
SYMBOL_METHOD: public void b2Island::Clear() [b2Island.h <41:2 <41:2 <41:7 41:11> 41:13> 46:2>]
SYMBOL_FIELD: public int32 b2Island::m_bodyCount [b2Island.h <84:8 84:18>]
SYMBOL_FIELD: public int32 b2Island::m_contactCount [b2Island.h <86:8 86:21>]
SYMBOL_FIELD: public int32 b2Island::m_jointCount [b2Island.h <85:8 85:19>]
SYMBOL_METHOD: public void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) [b2Island.h <48:2 <48:7 48:11> 48:95>]
SYMBOL_METHOD: public void b2Island::SolveTOI(const b2TimeStep &, int32, int32) [b2Island.h <50:2 <50:7 50:14> 50:75>]
SYMBOL_METHOD: public void b2Island::Add(b2Body *) [b2Island.h <52:2 <52:2 <52:7 52:9> 52:23> 58:2>]
SYMBOL_FIELD: public int32 b2Island::m_bodyCapacity [b2Island.h <88:8 88:21>]
SYMBOL_FIELD: public b2Body * * b2Island::m_bodies [b2Island.h <77:11 77:18>]
SYMBOL_METHOD: public void b2Island::Add(b2Contact *) [b2Island.h <60:2 <60:2 <60:7 60:9> 60:29> 64:2>]
SYMBOL_FIELD: public int32 b2Island::m_contactCapacity [b2Island.h <89:8 89:24>]
SYMBOL_FIELD: public b2Contact * * b2Island::m_contacts [b2Island.h <78:14 78:23>]
SYMBOL_METHOD: public void b2Island::Add(b2Joint *) [b2Island.h <66:2 <66:2 <66:7 66:9> 66:25> 70:2>]
SYMBOL_FIELD: public int32 b2Island::m_jointCapacity [b2Island.h <90:8 90:22>]
SYMBOL_FIELD: public b2Joint * * b2Island::m_joints [b2Island.h <79:12 79:19>]
SYMBOL_METHOD: public void b2Island::Report(const b2ContactVelocityConstraint *) [b2Island.h <72:2 <72:7 72:12> 72:60>]
SYMBOL_FIELD: public b2StackAllocator * b2Island::m_allocator [b2Island.h <74:20 74:30>]
SYMBOL_FIELD: public b2ContactListener * b2Island::m_listener [b2Island.h <75:21 75:30>]
SYMBOL_FIELD: public b2Position * b2Island::m_positions [b2Island.h <81:14 81:24>]
SYMBOL_FIELD: public b2Velocity * b2Island::m_velocities [b2Island.h <82:14 82:25>]
SYMBOL_METHOD: public void b2Island::b2Island(const b2Island &) [b2Island.h <34:7 <34:7 34:14> 34:14>]
SYMBOL_ENUM: b2JointType [b2Joint.h <29:1 <29:6 29:16> 43:1>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_unknownJoint [b2Joint.h <31:2 31:15>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_revoluteJoint [b2Joint.h <32:2 32:16>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_prismaticJoint [b2Joint.h <33:2 33:17>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_distanceJoint [b2Joint.h <34:2 34:16>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_pulleyJoint [b2Joint.h <35:2 35:14>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_mouseJoint [b2Joint.h <36:2 36:13>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_gearJoint [b2Joint.h <37:2 37:12>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_wheelJoint [b2Joint.h <38:2 38:13>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_weldJoint [b2Joint.h <39:5 39:15>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_frictionJoint [b2Joint.h <40:2 40:16>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_ropeJoint [b2Joint.h <41:2 41:12>]
SYMBOL_ENUM_CONSTANT: b2JointType::e_motorJoint [b2Joint.h <42:2 42:13>]
SYMBOL_ENUM: b2LimitState [b2Joint.h <45:1 <45:6 45:17> 51:1>]
SYMBOL_ENUM_CONSTANT: b2LimitState::e_inactiveLimit [b2Joint.h <47:2 47:16>]
SYMBOL_ENUM_CONSTANT: b2LimitState::e_atLowerLimit [b2Joint.h <48:2 48:15>]
SYMBOL_ENUM_CONSTANT: b2LimitState::e_atUpperLimit [b2Joint.h <49:2 49:15>]
SYMBOL_ENUM_CONSTANT: b2LimitState::e_equalLimits [b2Joint.h <50:2 50:14>]
SYMBOL_STRUCT: b2Jacobian [b2Joint.h <53:1 <53:8 53:17> 58:1>]
SYMBOL_FIELD: public b2Vec2 b2Jacobian::linear [b2Joint.h <55:9 55:14>]
SYMBOL_FIELD: public float32 b2Jacobian::angularA [b2Joint.h <56:10 56:17>]
SYMBOL_FIELD: public float32 b2Jacobian::angularB [b2Joint.h <57:10 57:17>]
SYMBOL_FIELD: public b2Body * b2JointEdge::other [b2Joint.h <67:10 67:14>]
SYMBOL_FIELD: public b2Joint * b2JointEdge::joint [b2Joint.h <68:11 68:15>]
SYMBOL_FIELD: public b2JointEdge * b2JointEdge::prev [b2Joint.h <69:15 69:18>]
SYMBOL_FIELD: public b2JointEdge * b2JointEdge::next [b2Joint.h <70:15 70:18>]
SYMBOL_METHOD: public b2JointEdge & b2JointEdge::operator=(const b2JointEdge &) [b2Joint.h <65:8 <65:8 65:18> 65:18>]
SYMBOL_METHOD: public b2JointEdge & b2JointEdge::operator=(b2JointEdge &&) [b2Joint.h <65:8 <65:8 65:18> 65:18>]
SYMBOL_METHOD: public void b2JointEdge::~b2JointEdge() [b2Joint.h <65:8 <65:8 65:18> 65:18>]
SYMBOL_METHOD: public void b2JointEdge::b2JointEdge(const b2JointEdge &) [b2Joint.h <65:8 <65:8 65:18> 65:18>]
SYMBOL_METHOD: public void b2JointEdge::b2JointEdge(b2JointEdge &&) [b2Joint.h <65:8 <65:8 65:18> 65:18>]
SYMBOL_METHOD: public void b2JointDef::b2JointDef() [b2Joint.h <76:2 <76:2 <76:2 76:11> 76:13> 83:2>]
SYMBOL_FIELD: public b2JointType b2JointDef::type [b2Joint.h <86:14 86:17>]
SYMBOL_FIELD: public void * b2JointDef::userData [b2Joint.h <89:8 89:15>]
SYMBOL_FIELD: public b2Body * b2JointDef::bodyA [b2Joint.h <92:10 92:14>]
SYMBOL_FIELD: public b2Body * b2JointDef::bodyB [b2Joint.h <95:10 95:14>]
SYMBOL_FIELD: public bool b2JointDef::collideConnected [b2Joint.h <98:7 98:22>]
SYMBOL_METHOD: public void b2JointDef::b2JointDef(const b2JointDef &) [b2Joint.h <74:8 <74:8 74:17> 74:17>]
SYMBOL_METHOD: public void b2JointDef::b2JointDef(b2JointDef &&) [b2Joint.h <74:8 <74:8 74:17> 74:17>]
SYMBOL_METHOD: public b2JointType b2Joint::GetType() const [b2Joint.h <108:2 <108:14 108:20> 108:28>]
SYMBOL_METHOD: public b2JointType b2Joint::GetType() const [b2Joint.h <186:1 <186:29 186:35> 189:1>]
SYMBOL_METHOD: public b2Body * b2Joint::GetBodyA() [b2Joint.h <111:2 <111:10 111:17> 111:19>]
SYMBOL_METHOD: public b2Body * b2Joint::GetBodyA() [b2Joint.h <191:1 <191:25 191:32> 194:1>]
SYMBOL_METHOD: public b2Body * b2Joint::GetBodyB() [b2Joint.h <114:2 <114:10 114:17> 114:19>]
SYMBOL_METHOD: public b2Body * b2Joint::GetBodyB() [b2Joint.h <196:1 <196:25 196:32> 199:1>]
SYMBOL_METHOD: public b2Vec2 b2Joint::GetAnchorA() const [b2Joint.h <117:2 <117:17 117:26> 117:38>]
SYMBOL_METHOD: public b2Vec2 b2Joint::GetAnchorB() const [b2Joint.h <120:2 <120:17 120:26> 120:38>]
SYMBOL_METHOD: public b2Vec2 b2Joint::GetReactionForce(float32) const [b2Joint.h <123:2 <123:17 123:32> 123:58>]
SYMBOL_METHOD: public float32 b2Joint::GetReactionTorque(float32) const [b2Joint.h <126:2 <126:18 126:34> 126:60>]
SYMBOL_METHOD: public b2Joint * b2Joint::GetNext() [b2Joint.h <129:2 <129:11 129:17> 129:19>]
SYMBOL_METHOD: public b2Joint * b2Joint::GetNext() [b2Joint.h <201:1 <201:26 201:32> 204:1>]
SYMBOL_METHOD: public const b2Joint * b2Joint::GetNext() const [b2Joint.h <130:2 <130:17 130:23> 130:31>]
SYMBOL_METHOD: public const b2Joint * b2Joint::GetNext() const [b2Joint.h <206:1 <206:32 206:38> 209:1>]
SYMBOL_METHOD: public void * b2Joint::GetUserData() const [b2Joint.h <133:2 <133:8 133:18> 133:26>]
SYMBOL_METHOD: public void * b2Joint::GetUserData() const [b2Joint.h <211:1 <211:23 211:33> 214:1>]
SYMBOL_METHOD: public void b2Joint::SetUserData(void *) [b2Joint.h <136:2 <136:7 136:17> 136:29>]
SYMBOL_METHOD: public void b2Joint::SetUserData(void *) [b2Joint.h <216:1 <216:22 216:32> 219:1>]
SYMBOL_METHOD: public bool b2Joint::IsActive() const [b2Joint.h <139:2 <139:7 139:14> 139:22>]
SYMBOL_METHOD: public bool b2Joint::GetCollideConnected() const [b2Joint.h <144:2 <144:7 144:25> 144:33>]
SYMBOL_METHOD: public bool b2Joint::GetCollideConnected() const [b2Joint.h <221:1 <221:22 221:40> 224:1>]
SYMBOL_METHOD: public void b2Joint::Dump() [b2Joint.h <147:2 <147:2 <147:15 147:18> 147:20> 147:82>]
SYMBOL_METHOD: public void b2Joint::ShiftOrigin(const b2Vec2 &) [b2Joint.h <150:2 <150:2 <150:15 150:25> 150:50> 150:79>]
SYMBOL_METHOD: protected static b2Joint * b2Joint::Create(const b2JointDef *, b2BlockAllocator *) [b2Joint.h <158:2 <158:18 158:23> 158:75>]
SYMBOL_METHOD: protected static void b2Joint::Destroy(b2Joint *, b2BlockAllocator *) [b2Joint.h <159:2 <159:14 159:20> 159:65>]
SYMBOL_METHOD: protected void b2Joint::b2Joint(const b2JointDef *) [b2Joint.h <161:2 <161:2 161:8> 161:31>]
SYMBOL_METHOD: protected void b2Joint::~b2Joint() [b2Joint.h <162:2 <162:2 <162:10 162:17> 162:19> 162:22>]
SYMBOL_METHOD: protected void b2Joint::InitVelocityConstraints(const b2SolverData &) [b2Joint.h <164:2 <164:15 164:37> 164:67>]
SYMBOL_METHOD: protected void b2Joint::SolveVelocityConstraints(const b2SolverData &) [b2Joint.h <165:2 <165:15 165:38> 165:68>]
SYMBOL_METHOD: protected bool b2Joint::SolvePositionConstraints(const b2SolverData &) [b2Joint.h <168:2 <168:15 168:38> 168:68>]
SYMBOL_FIELD: protected b2JointType b2Joint::m_type [b2Joint.h <170:14 170:19>]
SYMBOL_FIELD: protected b2Joint * b2Joint::m_prev [b2Joint.h <171:11 171:16>]
SYMBOL_FIELD: protected b2Joint * b2Joint::m_next [b2Joint.h <172:11 172:16>]
SYMBOL_FIELD: protected b2JointEdge b2Joint::m_edgeA [b2Joint.h <173:14 173:20>]
SYMBOL_FIELD: protected b2JointEdge b2Joint::m_edgeB [b2Joint.h <174:14 174:20>]
SYMBOL_FIELD: protected b2Body * b2Joint::m_bodyA [b2Joint.h <175:10 175:16>]
SYMBOL_FIELD: protected b2Body * b2Joint::m_bodyB [b2Joint.h <176:10 176:16>]
SYMBOL_FIELD: protected int32 b2Joint::m_index [b2Joint.h <178:8 178:14>]
SYMBOL_FIELD: protected bool b2Joint::m_islandFlag [b2Joint.h <180:7 180:18>]
SYMBOL_FIELD: protected bool b2Joint::m_collideConnected [b2Joint.h <181:7 181:24>]
SYMBOL_FIELD: protected void * b2Joint::m_userData [b2Joint.h <183:8 183:17>]
SYMBOL_METHOD: public b2Joint & b2Joint::operator=(const b2Joint &) [b2Joint.h <103:7 <103:7 103:13> 103:13>]
SYMBOL_METHOD: public void b2Joint::b2Joint(const b2Joint &) [b2Joint.h <103:7 <103:7 103:13> 103:13>]
SYMBOL_GLOBAL_VARIABLE: const float32 b2_minPulleyLength [b2PulleyJoint.h <24:15 24:32>]
SYMBOL_STRUCT: b2PulleyJointDef [b2PulleyJoint.h <28:1 <28:8 28:23> 69:1>]
SYMBOL_METHOD: public void b2PulleyJointDef::b2PulleyJointDef() [b2PulleyJoint.h <30:2 <30:2 <30:2 30:17> 30:19> 41:2>]
SYMBOL_FIELD: public b2Vec2 b2PulleyJointDef::groundAnchorA [b2PulleyJoint.h <50:9 50:21>]
SYMBOL_FIELD: public b2Vec2 b2PulleyJointDef::groundAnchorB [b2PulleyJoint.h <53:9 53:21>]
SYMBOL_FIELD: public b2Vec2 b2PulleyJointDef::localAnchorA [b2PulleyJoint.h <56:9 56:20>]
SYMBOL_FIELD: public b2Vec2 b2PulleyJointDef::localAnchorB [b2PulleyJoint.h <59:9 59:20>]
SYMBOL_FIELD: public float32 b2PulleyJointDef::lengthA [b2PulleyJoint.h <62:10 62:16>]
SYMBOL_FIELD: public float32 b2PulleyJointDef::lengthB [b2PulleyJoint.h <65:10 65:16>]
SYMBOL_FIELD: public float32 b2PulleyJointDef::ratio [b2PulleyJoint.h <68:10 68:14>]
SYMBOL_METHOD: public void b2PulleyJointDef::Initialize(b2Body *, b2Body *, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, float32) [b2PulleyJoint.h <44:2 <44:7 44:16> 47:19>]
SYMBOL_METHOD: public b2Vec2 b2PulleyJoint::GetAnchorA() const [b2PulleyJoint.h <82:2 <82:9 82:18> 82:35>]
SYMBOL_METHOD: public b2Vec2 b2PulleyJoint::GetAnchorB() const [b2PulleyJoint.h <83:2 <83:9 83:18> 83:35>]
SYMBOL_METHOD: public b2Vec2 b2PulleyJoint::GetReactionForce(float32) const [b2PulleyJoint.h <85:2 <85:9 85:24> 85:55>]
SYMBOL_METHOD: public float32 b2PulleyJoint::GetReactionTorque(float32) const [b2PulleyJoint.h <86:2 <86:10 86:26> 86:57>]
SYMBOL_METHOD: public b2Vec2 b2PulleyJoint::GetGroundAnchorA() const [b2PulleyJoint.h <89:2 <89:9 89:24> 89:32>]
SYMBOL_METHOD: public b2Vec2 b2PulleyJoint::GetGroundAnchorB() const [b2PulleyJoint.h <92:2 <92:9 92:24> 92:32>]
SYMBOL_METHOD: public float32 b2PulleyJoint::GetLengthA() const [b2PulleyJoint.h <95:2 <95:10 95:19> 95:27>]
SYMBOL_METHOD: public float32 b2PulleyJoint::GetLengthB() const [b2PulleyJoint.h <98:2 <98:10 98:19> 98:27>]
SYMBOL_METHOD: public float32 b2PulleyJoint::GetRatio() const [b2PulleyJoint.h <101:2 <101:10 101:17> 101:25>]
SYMBOL_METHOD: public float32 b2PulleyJoint::GetCurrentLengthA() const [b2PulleyJoint.h <104:2 <104:10 104:26> 104:34>]
SYMBOL_METHOD: public float32 b2PulleyJoint::GetCurrentLengthB() const [b2PulleyJoint.h <107:2 <107:10 107:26> 107:34>]
SYMBOL_METHOD: public void b2PulleyJoint::Dump() [b2PulleyJoint.h <110:2 <110:7 110:10> 110:21>]
SYMBOL_METHOD: public void b2PulleyJoint::ShiftOrigin(const b2Vec2 &) [b2PulleyJoint.h <113:2 <113:7 113:17> 113:51>]
SYMBOL_METHOD: protected void b2PulleyJoint::b2PulleyJoint(const b2PulleyJointDef *) [b2PulleyJoint.h <118:2 <118:2 118:14> 118:44>]
SYMBOL_METHOD: protected void b2PulleyJoint::InitVelocityConstraints(const b2SolverData &) [b2PulleyJoint.h <120:2 <120:7 120:29> 120:64>]
SYMBOL_METHOD: protected void b2PulleyJoint::SolveVelocityConstraints(const b2SolverData &) [b2PulleyJoint.h <121:2 <121:7 121:30> 121:65>]
SYMBOL_METHOD: protected bool b2PulleyJoint::SolvePositionConstraints(const b2SolverData &) [b2PulleyJoint.h <122:2 <122:7 122:30> 122:65>]
SYMBOL_FIELD: protected b2Vec2 b2PulleyJoint::m_groundAnchorA [b2PulleyJoint.h <124:9 124:23>]
SYMBOL_FIELD: protected b2Vec2 b2PulleyJoint::m_groundAnchorB [b2PulleyJoint.h <125:9 125:23>]
SYMBOL_FIELD: protected float32 b2PulleyJoint::m_lengthA [b2PulleyJoint.h <126:10 126:18>]
SYMBOL_FIELD: protected float32 b2PulleyJoint::m_lengthB [b2PulleyJoint.h <127:10 127:18>]
SYMBOL_FIELD: protected b2Vec2 b2PulleyJoint::m_localAnchorA [b2PulleyJoint.h <130:9 130:22>]
SYMBOL_FIELD: protected b2Vec2 b2PulleyJoint::m_localAnchorB [b2PulleyJoint.h <131:9 131:22>]
SYMBOL_FIELD: protected float32 b2PulleyJoint::m_constant [b2PulleyJoint.h <132:10 132:19>]
SYMBOL_FIELD: protected float32 b2PulleyJoint::m_ratio [b2PulleyJoint.h <133:10 133:16>]
SYMBOL_FIELD: protected float32 b2PulleyJoint::m_impulse [b2PulleyJoint.h <134:10 134:18>]
SYMBOL_FIELD: protected int32 b2PulleyJoint::m_indexA [b2PulleyJoint.h <137:8 137:15>]
SYMBOL_FIELD: protected int32 b2PulleyJoint::m_indexB [b2PulleyJoint.h <138:8 138:15>]
SYMBOL_FIELD: protected b2Vec2 b2PulleyJoint::m_uA [b2PulleyJoint.h <139:9 139:12>]
SYMBOL_FIELD: protected b2Vec2 b2PulleyJoint::m_uB [b2PulleyJoint.h <140:9 140:12>]
SYMBOL_FIELD: protected b2Vec2 b2PulleyJoint::m_rA [b2PulleyJoint.h <141:9 141:12>]
SYMBOL_FIELD: protected b2Vec2 b2PulleyJoint::m_rB [b2PulleyJoint.h <142:9 142:12>]
SYMBOL_FIELD: protected b2Vec2 b2PulleyJoint::m_localCenterA [b2PulleyJoint.h <143:9 143:22>]
SYMBOL_FIELD: protected b2Vec2 b2PulleyJoint::m_localCenterB [b2PulleyJoint.h <144:9 144:22>]
SYMBOL_FIELD: protected float32 b2PulleyJoint::m_invMassA [b2PulleyJoint.h <145:10 145:19>]
SYMBOL_FIELD: protected float32 b2PulleyJoint::m_invMassB [b2PulleyJoint.h <146:10 146:19>]
SYMBOL_FIELD: protected float32 b2PulleyJoint::m_invIA [b2PulleyJoint.h <147:10 147:16>]
SYMBOL_FIELD: protected float32 b2PulleyJoint::m_invIB [b2PulleyJoint.h <148:10 148:16>]
SYMBOL_FIELD: protected float32 b2PulleyJoint::m_mass [b2PulleyJoint.h <149:10 149:15>]
SYMBOL_METHOD: public void b2PulleyJoint::b2PulleyJoint(const b2PulleyJoint &) [b2PulleyJoint.h <79:7 <79:7 79:19> 79:19>]
SYMBOL_METHOD: public void b2PulleyJoint::b2PulleyJoint(b2PulleyJoint &&) [b2PulleyJoint.h <79:7 <79:7 79:19> 79:19>]
SYMBOL_METHOD: public b2PulleyJoint & b2PulleyJoint::operator=(const b2PulleyJoint &) [b2PulleyJoint.h <79:7 <79:7 79:19> 79:19>]
SYMBOL_METHOD: public b2PulleyJoint & b2PulleyJoint::operator=(b2PulleyJoint &&) [b2PulleyJoint.h <79:7 <79:7 79:19> 79:19>]
SYMBOL_METHOD: public void b2PulleyJoint::~b2PulleyJoint() [b2PulleyJoint.h <79:7 <79:7 79:19> 79:19>]
SYMBOL_FUNCTION: float32 b2MixFriction(float32, float32) [b2Contact.h <37:1 <37:1 <37:16 37:28> 37:66> 40:1>]
SYMBOL_FUNCTION: float32 b2MixRestitution(float32, float32) [b2Contact.h <44:1 <44:1 <44:16 44:31> 44:75> 47:1>]
SYMBOL_TYPEDEF: b2ContactCreateFcn [b2Contact.h <49:20 49:37>]
SYMBOL_TYPEDEF: b2ContactDestroyFcn [b2Contact.h <52:14 52:32>]
SYMBOL_STRUCT: b2ContactRegister [b2Contact.h <54:1 <54:8 54:24> 59:1>]
SYMBOL_FIELD: public b2ContactCreateFcn * b2ContactRegister::createFcn [b2Contact.h <56:22 56:30>]
SYMBOL_FIELD: public b2ContactDestroyFcn * b2ContactRegister::destroyFcn [b2Contact.h <57:23 57:32>]
SYMBOL_FIELD: public bool b2ContactRegister::primary [b2Contact.h <58:7 58:13>]
SYMBOL_FIELD: public b2Body * b2ContactEdge::other [b2Contact.h <68:10 68:14>]
SYMBOL_FIELD: public b2Contact * b2ContactEdge::contact [b2Contact.h <69:13 69:19>]
SYMBOL_FIELD: public b2ContactEdge * b2ContactEdge::prev [b2Contact.h <70:17 70:20>]
SYMBOL_FIELD: public b2ContactEdge * b2ContactEdge::next [b2Contact.h <71:17 71:20>]
SYMBOL_METHOD: public b2ContactEdge & b2ContactEdge::operator=(const b2ContactEdge &) [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public b2ContactEdge & b2ContactEdge::operator=(b2ContactEdge &&) [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public void b2ContactEdge::b2ContactEdge() [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public void b2ContactEdge::b2ContactEdge(const b2ContactEdge &) [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public void b2ContactEdge::b2ContactEdge(b2ContactEdge &&) [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public void b2ContactEdge::~b2ContactEdge() [b2Contact.h <66:8 <66:8 66:20> 66:20>]
SYMBOL_METHOD: public b2Manifold * b2Contact::GetManifold() [b2Contact.h <83:2 <83:14 83:24> 83:26>]
SYMBOL_METHOD: public b2Manifold * b2Contact::GetManifold() [b2Contact.h <222:1 <222:31 222:41> 225:1>]
SYMBOL_METHOD: public const b2Manifold * b2Contact::GetManifold() const [b2Contact.h <84:2 <84:20 84:30> 84:38>]
SYMBOL_METHOD: public const b2Manifold * b2Contact::GetManifold() const [b2Contact.h <227:1 <227:37 227:47> 230:1>]
SYMBOL_METHOD: public void b2Contact::GetWorldManifold(b2WorldManifold *) const [b2Contact.h <87:2 <87:7 87:22> 87:60>]
SYMBOL_METHOD: public void b2Contact::GetWorldManifold(b2WorldManifold *) const [b2Contact.h <232:1 <232:24 232:39> 240:1>]
SYMBOL_METHOD: public bool b2Contact::IsTouching() const [b2Contact.h <90:2 <90:7 90:16> 90:24>]
SYMBOL_METHOD: public bool b2Contact::IsTouching() const [b2Contact.h <259:1 <259:24 259:33> 262:1>]
SYMBOL_METHOD: public void b2Contact::SetEnabled(bool) [b2Contact.h <95:2 <95:7 95:16> 95:27>]
SYMBOL_METHOD: public void b2Contact::SetEnabled(bool) [b2Contact.h <242:1 <242:24 242:33> 252:1>]
SYMBOL_METHOD: public bool b2Contact::IsEnabled() const [b2Contact.h <98:2 <98:7 98:15> 98:23>]
SYMBOL_METHOD: public bool b2Contact::IsEnabled() const [b2Contact.h <254:1 <254:24 254:32> 257:1>]
SYMBOL_METHOD: public b2Contact * b2Contact::GetNext() [b2Contact.h <101:2 <101:13 101:19> 101:21>]
SYMBOL_METHOD: public b2Contact * b2Contact::GetNext() [b2Contact.h <264:1 <264:30 264:36> 267:1>]
SYMBOL_METHOD: public const b2Contact * b2Contact::GetNext() const [b2Contact.h <102:2 <102:19 102:25> 102:33>]
SYMBOL_METHOD: public const b2Contact * b2Contact::GetNext() const [b2Contact.h <269:1 <269:36 269:42> 272:1>]
SYMBOL_METHOD: public b2Fixture * b2Contact::GetFixtureA() [b2Contact.h <105:2 <105:13 105:23> 105:25>]
SYMBOL_METHOD: public b2Fixture * b2Contact::GetFixtureA() [b2Contact.h <274:1 <274:30 274:40> 277:1>]
SYMBOL_METHOD: public const b2Fixture * b2Contact::GetFixtureA() const [b2Contact.h <106:2 <106:19 106:29> 106:37>]
SYMBOL_METHOD: public const b2Fixture * b2Contact::GetFixtureA() const [b2Contact.h <279:1 <279:36 279:46> 282:1>]
SYMBOL_METHOD: public int32 b2Contact::GetChildIndexA() const [b2Contact.h <109:2 <109:8 109:21> 109:29>]
SYMBOL_METHOD: public int32 b2Contact::GetChildIndexA() const [b2Contact.h <289:1 <289:25 289:38> 292:1>]
SYMBOL_METHOD: public b2Fixture * b2Contact::GetFixtureB() [b2Contact.h <112:2 <112:13 112:23> 112:25>]
SYMBOL_METHOD: public b2Fixture * b2Contact::GetFixtureB() [b2Contact.h <284:1 <284:30 284:40> 287:1>]
SYMBOL_METHOD: public const b2Fixture * b2Contact::GetFixtureB() const [b2Contact.h <113:2 <113:19 113:29> 113:37>]
SYMBOL_METHOD: public const b2Fixture * b2Contact::GetFixtureB() const [b2Contact.h <294:1 <294:36 294:46> 297:1>]
SYMBOL_METHOD: public int32 b2Contact::GetChildIndexB() const [b2Contact.h <116:2 <116:8 116:21> 116:29>]
SYMBOL_METHOD: public int32 b2Contact::GetChildIndexB() const [b2Contact.h <299:1 <299:25 299:38> 302:1>]
SYMBOL_METHOD: public void b2Contact::SetFriction(float32) [b2Contact.h <120:2 <120:7 120:17> 120:35>]
SYMBOL_METHOD: public void b2Contact::SetFriction(float32) [b2Contact.h <309:1 <309:24 309:34> 312:1>]
SYMBOL_METHOD: public float32 b2Contact::GetFriction() const [b2Contact.h <123:2 <123:10 123:20> 123:28>]
SYMBOL_METHOD: public float32 b2Contact::GetFriction() const [b2Contact.h <314:1 <314:27 314:37> 317:1>]
SYMBOL_METHOD: public void b2Contact::ResetFriction() [b2Contact.h <126:2 <126:7 126:19> 126:21>]
SYMBOL_METHOD: public void b2Contact::ResetFriction() [b2Contact.h <319:1 <319:24 319:36> 322:1>]
SYMBOL_METHOD: public void b2Contact::SetRestitution(float32) [b2Contact.h <130:2 <130:7 130:20> 130:41>]
SYMBOL_METHOD: public void b2Contact::SetRestitution(float32) [b2Contact.h <324:1 <324:24 324:37> 327:1>]
SYMBOL_METHOD: public float32 b2Contact::GetRestitution() const [b2Contact.h <133:2 <133:10 133:23> 133:31>]
SYMBOL_METHOD: public float32 b2Contact::GetRestitution() const [b2Contact.h <329:1 <329:27 329:40> 332:1>]
SYMBOL_METHOD: public void b2Contact::ResetRestitution() [b2Contact.h <136:2 <136:7 136:22> 136:24>]
SYMBOL_METHOD: public void b2Contact::ResetRestitution() [b2Contact.h <334:1 <334:24 334:39> 337:1>]
SYMBOL_METHOD: public void b2Contact::SetTangentSpeed(float32) [b2Contact.h <139:2 <139:7 139:21> 139:36>]
SYMBOL_METHOD: public void b2Contact::SetTangentSpeed(float32) [b2Contact.h <339:1 <339:24 339:38> 342:1>]
SYMBOL_METHOD: public float32 b2Contact::GetTangentSpeed() const [b2Contact.h <142:2 <142:10 142:24> 142:32>]
SYMBOL_METHOD: public float32 b2Contact::GetTangentSpeed() const [b2Contact.h <344:1 <344:27 344:41> 347:1>]
SYMBOL_METHOD: public void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) [b2Contact.h <145:2 <145:15 145:22> 145:96>]
SYMBOL_ENUM: protected b2Contact::anonymous enum (b2Contact.h<155:2>) [b2Contact.h <155:2 <155:2 155:5> 174:2>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_islandFlag [b2Contact.h <158:3 158:14>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_touchingFlag [b2Contact.h <161:3 161:16>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_enabledFlag [b2Contact.h <164:3 164:15>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_filterFlag [b2Contact.h <167:3 167:14>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_bulletHitFlag [b2Contact.h <170:3 170:17>]
SYMBOL_ENUM_CONSTANT: b2Contact::anonymous enum (b2Contact.h<155:2>)::e_toiFlag [b2Contact.h <173:3 173:11>]
SYMBOL_METHOD: protected void b2Contact::FlagForFiltering() [b2Contact.h <177:2 <177:7 177:22> 177:24>]
SYMBOL_METHOD: protected void b2Contact::FlagForFiltering() [b2Contact.h <304:1 <304:24 304:39> 307:1>]
SYMBOL_METHOD: protected static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) [b2Contact.h <179:2 <179:14 179:20> 180:47>]
SYMBOL_METHOD: protected static void b2Contact::InitializeRegisters() [b2Contact.h <181:2 <181:14 181:32> 181:34>]
SYMBOL_METHOD: protected static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) [b2Contact.h <182:2 <182:20 182:25> 182:124>]
SYMBOL_METHOD: protected static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) [b2Contact.h <183:2 <183:14 183:20> 183:111>]
SYMBOL_METHOD: protected static void b2Contact::Destroy(b2Contact *, b2BlockAllocator *) [b2Contact.h <184:2 <184:14 184:20> 184:69>]
SYMBOL_METHOD: protected void b2Contact::b2Contact() [b2Contact.h <186:2 <186:2 <186:2 186:10> 186:12> 186:58>]
SYMBOL_FIELD: protected b2ContactEdge b2Contact::m_nodeA [b2Contact.h <202:16 202:22>]
SYMBOL_FIELD: protected b2ContactEdge b2Contact::m_nodeB [b2Contact.h <203:16 203:22>]
SYMBOL_FIELD: protected b2Fixture * b2Contact::m_fixtureA [b2Contact.h <205:13 205:22>]
SYMBOL_FIELD: protected b2Fixture * b2Contact::m_fixtureB [b2Contact.h <206:13 206:22>]
SYMBOL_FIELD: protected b2Manifold b2Contact::m_manifold [b2Contact.h <211:13 211:22>]
SYMBOL_METHOD: protected void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) [b2Contact.h <187:2 <187:2 187:10> 187:80>]
SYMBOL_METHOD: protected void b2Contact::~b2Contact() [b2Contact.h <188:2 <188:2 <188:10 188:19> 188:21> 188:24>]
SYMBOL_METHOD: protected void b2Contact::Update(b2ContactListener *) [b2Contact.h <190:2 <190:7 190:12> 190:41>]
SYMBOL_FIELD: protected static b2ContactRegister [] [] b2Contact::s_registers [b2Contact.h <192:27 192:37>]
SYMBOL_FIELD: protected static bool b2Contact::s_initialized [b2Contact.h <193:14 193:26>]
SYMBOL_FIELD: protected uint32 b2Contact::m_flags [b2Contact.h <195:9 195:15>]
SYMBOL_FIELD: protected b2Contact * b2Contact::m_prev [b2Contact.h <198:13 198:18>]
SYMBOL_FIELD: protected b2Contact * b2Contact::m_next [b2Contact.h <199:13 199:18>]
SYMBOL_FIELD: protected int32 b2Contact::m_indexA [b2Contact.h <208:8 208:15>]
SYMBOL_FIELD: protected int32 b2Contact::m_indexB [b2Contact.h <209:8 209:15>]
SYMBOL_FIELD: protected int32 b2Contact::m_toiCount [b2Contact.h <213:8 213:17>]
SYMBOL_FIELD: protected float32 b2Contact::m_toi [b2Contact.h <214:10 214:14>]
SYMBOL_FIELD: protected float32 b2Contact::m_friction [b2Contact.h <216:10 216:19>]
SYMBOL_FIELD: protected float32 b2Contact::m_restitution [b2Contact.h <217:10 217:22>]
SYMBOL_FIELD: protected float32 b2Contact::m_tangentSpeed [b2Contact.h <219:10 219:23>]
SYMBOL_METHOD: public b2Contact & b2Contact::operator=(const b2Contact &) [b2Contact.h <77:7 <77:7 77:15> 77:15>]
SYMBOL_STRUCT: b2ContactPositionConstraint [b2ContactSolver.h <29:8 29:34>]
SYMBOL_STRUCT: b2VelocityConstraintPoint [b2ContactSolver.h <31:1 <31:8 31:32> 40:1>]
SYMBOL_FIELD: public b2Vec2 b2VelocityConstraintPoint::rA [b2ContactSolver.h <33:9 33:10>]
SYMBOL_FIELD: public b2Vec2 b2VelocityConstraintPoint::rB [b2ContactSolver.h <34:9 34:10>]
SYMBOL_FIELD: public float32 b2VelocityConstraintPoint::normalImpulse [b2ContactSolver.h <35:10 35:22>]
SYMBOL_FIELD: public float32 b2VelocityConstraintPoint::tangentImpulse [b2ContactSolver.h <36:10 36:23>]
SYMBOL_FIELD: public float32 b2VelocityConstraintPoint::normalMass [b2ContactSolver.h <37:10 37:19>]
SYMBOL_FIELD: public float32 b2VelocityConstraintPoint::tangentMass [b2ContactSolver.h <38:10 38:20>]
SYMBOL_FIELD: public float32 b2VelocityConstraintPoint::velocityBias [b2ContactSolver.h <39:10 39:21>]
SYMBOL_FIELD: public b2VelocityConstraintPoint [] b2ContactVelocityConstraint::points [b2ContactSolver.h <44:28 44:33>]
SYMBOL_FIELD: public b2Vec2 b2ContactVelocityConstraint::normal [b2ContactSolver.h <45:9 45:14>]
SYMBOL_FIELD: public b2Mat22 b2ContactVelocityConstraint::normalMass [b2ContactSolver.h <46:10 46:19>]
SYMBOL_FIELD: public b2Mat22 b2ContactVelocityConstraint::K [b2ContactSolver.h <47:10 47:10>]
SYMBOL_FIELD: public int32 b2ContactVelocityConstraint::indexA [b2ContactSolver.h <48:8 48:13>]
SYMBOL_FIELD: public int32 b2ContactVelocityConstraint::indexB [b2ContactSolver.h <49:8 49:13>]
SYMBOL_FIELD: public float32 b2ContactVelocityConstraint::invMassA [b2ContactSolver.h <50:10 50:17>]
SYMBOL_FIELD: public float32 b2ContactVelocityConstraint::invMassB [b2ContactSolver.h <50:20 50:27>]
SYMBOL_FIELD: public float32 b2ContactVelocityConstraint::invIA [b2ContactSolver.h <51:10 51:14>]
SYMBOL_FIELD: public float32 b2ContactVelocityConstraint::invIB [b2ContactSolver.h <51:17 51:21>]
SYMBOL_FIELD: public float32 b2ContactVelocityConstraint::friction [b2ContactSolver.h <52:10 52:17>]
SYMBOL_FIELD: public float32 b2ContactVelocityConstraint::restitution [b2ContactSolver.h <53:10 53:20>]
SYMBOL_FIELD: public float32 b2ContactVelocityConstraint::tangentSpeed [b2ContactSolver.h <54:10 54:21>]
SYMBOL_FIELD: public int32 b2ContactVelocityConstraint::pointCount [b2ContactSolver.h <55:8 55:17>]
SYMBOL_FIELD: public int32 b2ContactVelocityConstraint::contactIndex [b2ContactSolver.h <56:8 56:19>]
SYMBOL_STRUCT: b2ContactSolverDef [b2ContactSolver.h <59:1 <59:8 59:25> 67:1>]
SYMBOL_FIELD: public b2TimeStep b2ContactSolverDef::step [b2ContactSolver.h <61:13 61:16>]
SYMBOL_FIELD: public b2Contact * * b2ContactSolverDef::contacts [b2ContactSolver.h <62:14 62:21>]
SYMBOL_FIELD: public int32 b2ContactSolverDef::count [b2ContactSolver.h <63:8 63:12>]
SYMBOL_FIELD: public b2Position * b2ContactSolverDef::positions [b2ContactSolver.h <64:14 64:22>]
SYMBOL_FIELD: public b2Velocity * b2ContactSolverDef::velocities [b2ContactSolver.h <65:14 65:23>]
SYMBOL_FIELD: public b2StackAllocator * b2ContactSolverDef::allocator [b2ContactSolver.h <66:20 66:28>]
SYMBOL_METHOD: public void b2ContactSolver::b2ContactSolver(b2ContactSolverDef *) [b2ContactSolver.h <72:2 <72:2 72:16> 72:41>]
SYMBOL_METHOD: public void b2ContactSolver::~b2ContactSolver() [b2ContactSolver.h <73:2 <73:2 73:17> 73:19>]
SYMBOL_METHOD: public void b2ContactSolver::InitializeVelocityConstraints() [b2ContactSolver.h <75:2 <75:7 75:35> 75:37>]
SYMBOL_METHOD: public void b2ContactSolver::WarmStart() [b2ContactSolver.h <77:2 <77:7 77:15> 77:17>]
SYMBOL_METHOD: public void b2ContactSolver::SolveVelocityConstraints() [b2ContactSolver.h <78:2 <78:7 78:30> 78:32>]
SYMBOL_METHOD: public void b2ContactSolver::StoreImpulses() [b2ContactSolver.h <79:2 <79:7 79:19> 79:21>]
SYMBOL_METHOD: public bool b2ContactSolver::SolvePositionConstraints() [b2ContactSolver.h <81:2 <81:7 81:30> 81:32>]
SYMBOL_METHOD: public bool b2ContactSolver::SolveTOIPositionConstraints(int32, int32) [b2ContactSolver.h <82:2 <82:7 82:33> 82:67>]
SYMBOL_FIELD: public b2TimeStep b2ContactSolver::m_step [b2ContactSolver.h <84:13 84:18>]
SYMBOL_FIELD: public b2Position * b2ContactSolver::m_positions [b2ContactSolver.h <85:14 85:24>]
SYMBOL_FIELD: public b2Velocity * b2ContactSolver::m_velocities [b2ContactSolver.h <86:14 86:25>]
SYMBOL_FIELD: public b2StackAllocator * b2ContactSolver::m_allocator [b2ContactSolver.h <87:20 87:30>]
SYMBOL_FIELD: public b2ContactPositionConstraint * b2ContactSolver::m_positionConstraints [b2ContactSolver.h <88:31 88:51>]
SYMBOL_FIELD: public b2ContactVelocityConstraint * b2ContactSolver::m_velocityConstraints [b2ContactSolver.h <89:31 89:51>]
SYMBOL_FIELD: public b2Contact * * b2ContactSolver::m_contacts [b2ContactSolver.h <90:14 90:23>]
SYMBOL_FIELD: public int b2ContactSolver::m_count [b2ContactSolver.h <91:6 91:12>]
SYMBOL_METHOD: public void b2CircleShape::b2CircleShape() [b2CircleShape.h <28:2 <28:2 28:14> 28:16>]
SYMBOL_METHOD: public void b2CircleShape::b2CircleShape() [b2CircleShape.h <53:1 <53:23 53:35> 58:1>]
SYMBOL_METHOD: public b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const [b2CircleShape.h <31:2 <31:11 31:15> 31:59>]
SYMBOL_METHOD: public int32 b2CircleShape::GetChildCount() const [b2CircleShape.h <34:2 <34:8 34:20> 34:37>]
SYMBOL_METHOD: public bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2CircleShape.h <37:2 <37:7 37:15> 37:77>]
SYMBOL_METHOD: public bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2CircleShape.h <40:2 <40:7 40:13> 41:66>]
SYMBOL_METHOD: public void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2CircleShape.h <44:2 <44:7 44:17> 44:94>]
SYMBOL_METHOD: public void b2CircleShape::ComputeMass(b2MassData *, float32) const [b2CircleShape.h <47:2 <47:7 47:17> 47:71>]
SYMBOL_FIELD: public b2Vec2 b2CircleShape::m_p [b2CircleShape.h <50:9 50:11>]
SYMBOL_METHOD: public void b2CircleShape::b2CircleShape(const b2CircleShape &) [b2CircleShape.h <25:7 <25:7 25:19> 25:19>]
SYMBOL_METHOD: public void b2CircleShape::b2CircleShape(b2CircleShape &&) [b2CircleShape.h <25:7 <25:7 25:19> 25:19>]
SYMBOL_METHOD: public b2CircleShape & b2CircleShape::operator=(const b2CircleShape &) [b2CircleShape.h <25:7 <25:7 25:19> 25:19>]
SYMBOL_METHOD: public b2CircleShape & b2CircleShape::operator=(b2CircleShape &&) [b2CircleShape.h <25:7 <25:7 25:19> 25:19>]
SYMBOL_METHOD: public void b2CircleShape::~b2CircleShape() [b2CircleShape.h <25:7 <25:7 25:19> 25:19>]
SYMBOL_METHOD: public void b2EdgeShape::b2EdgeShape() [b2EdgeShape.h <30:2 <30:2 30:12> 30:14>]
SYMBOL_METHOD: public void b2EdgeShape::b2EdgeShape() [b2EdgeShape.h <62:1 <62:21 62:31> 72:1>]
SYMBOL_METHOD: public void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.h <33:2 <33:7 33:9> 33:45>]
SYMBOL_METHOD: public b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const [b2EdgeShape.h <36:2 <36:11 36:15> 36:59>]
SYMBOL_METHOD: public int32 b2EdgeShape::GetChildCount() const [b2EdgeShape.h <39:2 <39:8 39:20> 39:37>]
SYMBOL_METHOD: public bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2EdgeShape.h <42:2 <42:7 42:15> 42:77>]
SYMBOL_METHOD: public bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2EdgeShape.h <45:2 <45:7 45:13> 46:66>]
SYMBOL_METHOD: public void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2EdgeShape.h <49:2 <49:7 49:17> 49:94>]
SYMBOL_METHOD: public void b2EdgeShape::ComputeMass(b2MassData *, float32) const [b2EdgeShape.h <52:2 <52:7 52:17> 52:71>]
SYMBOL_FIELD: public b2Vec2 b2EdgeShape::m_vertex1 [b2EdgeShape.h <55:9 55:17>]
SYMBOL_FIELD: public b2Vec2 b2EdgeShape::m_vertex2 [b2EdgeShape.h <55:20 55:28>]
SYMBOL_FIELD: public b2Vec2 b2EdgeShape::m_vertex0 [b2EdgeShape.h <58:9 58:17>]
SYMBOL_FIELD: public b2Vec2 b2EdgeShape::m_vertex3 [b2EdgeShape.h <58:20 58:28>]
SYMBOL_FIELD: public bool b2EdgeShape::m_hasVertex0 [b2EdgeShape.h <59:7 59:18>]
SYMBOL_FIELD: public bool b2EdgeShape::m_hasVertex3 [b2EdgeShape.h <59:21 59:32>]
SYMBOL_METHOD: public void b2EdgeShape::b2EdgeShape(const b2EdgeShape &) [b2EdgeShape.h <27:7 <27:7 27:17> 27:17>]
SYMBOL_METHOD: public void b2EdgeShape::b2EdgeShape(b2EdgeShape &&) [b2EdgeShape.h <27:7 <27:7 27:17> 27:17>]
SYMBOL_METHOD: public b2EdgeShape & b2EdgeShape::operator=(const b2EdgeShape &) [b2EdgeShape.h <27:7 <27:7 27:17> 27:17>]
SYMBOL_METHOD: public b2EdgeShape & b2EdgeShape::operator=(b2EdgeShape &&) [b2EdgeShape.h <27:7 <27:7 27:17> 27:17>]
SYMBOL_METHOD: public void b2EdgeShape::~b2EdgeShape() [b2EdgeShape.h <27:7 <27:7 27:17> 27:17>]
QUALIFIER: b2ChainShape [b2ChainShape.h <95:8 95:19>]
SYMBOL_CLASS: b2ChainShape [b2ChainShape.h <32:1 <32:7 32:18> 93:1>]
SYMBOL_METHOD: public void b2ChainShape::b2ChainShape() [b2ChainShape.h <35:2 <35:2 35:13> 35:15>]
SYMBOL_METHOD: public void b2ChainShape::b2ChainShape() [b2ChainShape.h <95:1 <95:22 95:33> 103:1>]
SYMBOL_METHOD: public void b2ChainShape::~b2ChainShape() [b2ChainShape.h <38:2 <38:2 38:14> 38:16>]
SYMBOL_METHOD: public void b2ChainShape::Clear() [b2ChainShape.h <41:2 <41:7 41:11> 41:13>]
SYMBOL_METHOD: public void b2ChainShape::CreateLoop(const b2Vec2 *, int32) [b2ChainShape.h <46:2 <46:7 46:16> 46:53>]
SYMBOL_METHOD: public void b2ChainShape::CreateChain(const b2Vec2 *, int32) [b2ChainShape.h <51:2 <51:7 51:17> 51:54>]
SYMBOL_METHOD: public void b2ChainShape::SetPrevVertex(const b2Vec2 &) [b2ChainShape.h <55:2 <55:7 55:19> 55:45>]
SYMBOL_METHOD: public void b2ChainShape::SetNextVertex(const b2Vec2 &) [b2ChainShape.h <59:2 <59:7 59:19> 59:45>]
SYMBOL_METHOD: public b2Shape * b2ChainShape::Clone(b2BlockAllocator *) const [b2ChainShape.h <62:2 <62:11 62:15> 62:59>]
SYMBOL_METHOD: public int32 b2ChainShape::GetChildCount() const [b2ChainShape.h <65:2 <65:8 65:20> 65:37>]
SYMBOL_METHOD: public void b2ChainShape::GetChildEdge(b2EdgeShape *, int32) const [b2ChainShape.h <68:2 <68:7 68:18> 68:56>]
SYMBOL_METHOD: public bool b2ChainShape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2ChainShape.h <72:2 <72:7 72:15> 72:77>]
SYMBOL_METHOD: public bool b2ChainShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2ChainShape.h <75:2 <75:7 75:13> 76:67>]
SYMBOL_METHOD: public void b2ChainShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2ChainShape.h <79:2 <79:7 79:17> 79:94>]
SYMBOL_METHOD: public void b2ChainShape::ComputeMass(b2MassData *, float32) const [b2ChainShape.h <83:2 <83:7 83:17> 83:71>]
SYMBOL_FIELD: public b2Vec2 * b2ChainShape::m_vertices [b2ChainShape.h <86:10 86:19>]
SYMBOL_FIELD: public int32 b2ChainShape::m_count [b2ChainShape.h <89:8 89:14>]
SYMBOL_FIELD: public b2Vec2 b2ChainShape::m_prevVertex [b2ChainShape.h <91:9 91:20>]
SYMBOL_FIELD: public b2Vec2 b2ChainShape::m_nextVertex [b2ChainShape.h <91:23 91:34>]
SYMBOL_FIELD: public bool b2ChainShape::m_hasPrevVertex [b2ChainShape.h <92:7 92:21>]
SYMBOL_FIELD: public bool b2ChainShape::m_hasNextVertex [b2ChainShape.h <92:24 92:38>]
SYMBOL_METHOD: public void b2ChainShape::b2ChainShape(const b2ChainShape &) [b2ChainShape.h <32:7 <32:7 32:18> 32:18>]
SYMBOL_METHOD: public b2ChainShape & b2ChainShape::operator=(const b2ChainShape &) [b2ChainShape.h <32:7 <32:7 32:18> 32:18>]
SYMBOL_METHOD: public void b2PolygonShape::b2PolygonShape() [b2PolygonShape.h <31:2 <31:2 31:15> 31:17>]
SYMBOL_METHOD: public void b2PolygonShape::b2PolygonShape() [b2PolygonShape.h <81:1 <81:24 81:37> 87:1>]
SYMBOL_METHOD: public b2Shape * b2PolygonShape::Clone(b2BlockAllocator *) const [b2PolygonShape.h <34:2 <34:11 34:15> 34:59>]
SYMBOL_METHOD: public int32 b2PolygonShape::GetChildCount() const [b2PolygonShape.h <37:2 <37:8 37:20> 37:37>]
SYMBOL_METHOD: public void b2PolygonShape::Set(const b2Vec2 *, int32) [b2PolygonShape.h <44:2 <44:7 44:9> 44:44>]
SYMBOL_METHOD: public void b2PolygonShape::SetAsBox(float32, float32) [b2PolygonShape.h <49:2 <49:7 49:14> 49:38>]
SYMBOL_METHOD: public void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) [b2PolygonShape.h <56:2 <56:7 56:14> 56:75>]
SYMBOL_METHOD: public bool b2PolygonShape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2PolygonShape.h <59:2 <59:7 59:15> 59:77>]
SYMBOL_METHOD: public bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2PolygonShape.h <62:2 <62:7 62:13> 63:67>]
SYMBOL_METHOD: public void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2PolygonShape.h <66:2 <66:7 66:17> 66:94>]
SYMBOL_METHOD: public void b2PolygonShape::ComputeMass(b2MassData *, float32) const [b2PolygonShape.h <69:2 <69:7 69:17> 69:71>]
SYMBOL_METHOD: public bool b2PolygonShape::Validate() const [b2PolygonShape.h <73:2 <73:7 73:14> 73:22>]
SYMBOL_FIELD: public b2Vec2 b2PolygonShape::m_centroid [b2PolygonShape.h <75:9 75:18>]
SYMBOL_FIELD: public b2Vec2 [] b2PolygonShape::m_vertices [b2PolygonShape.h <76:9 76:18>]
SYMBOL_FIELD: public b2Vec2 [] b2PolygonShape::m_normals [b2PolygonShape.h <77:9 77:17>]
SYMBOL_FIELD: public int32 b2PolygonShape::m_count [b2PolygonShape.h <78:8 78:14>]
SYMBOL_METHOD: public void b2PolygonShape::b2PolygonShape(const b2PolygonShape &) [b2PolygonShape.h <28:7 <28:7 28:20> 28:20>]
SYMBOL_METHOD: public void b2PolygonShape::b2PolygonShape(b2PolygonShape &&) [b2PolygonShape.h <28:7 <28:7 28:20> 28:20>]
SYMBOL_METHOD: public b2PolygonShape & b2PolygonShape::operator=(const b2PolygonShape &) [b2PolygonShape.h <28:7 <28:7 28:20> 28:20>]
SYMBOL_METHOD: public b2PolygonShape & b2PolygonShape::operator=(b2PolygonShape &&) [b2PolygonShape.h <28:7 <28:7 28:20> 28:20>]
SYMBOL_METHOD: public void b2PolygonShape::~b2PolygonShape() [b2PolygonShape.h <28:7 <28:7 28:20> 28:20>]
QUALIFIER: b2DistanceProxy [b2Distance.h <96:14 96:28>]
QUALIFIER: b2DistanceProxy [b2Distance.h <101:22 101:36>]
QUALIFIER: b2DistanceProxy [b2Distance.h <107:14 107:28>]
QUALIFIER: b2DistanceProxy [b2Distance.h <124:22 124:36>]
SYMBOL_STRUCT: b2DistanceProxy [b2Distance.h <29:1 <29:8 29:22> 53:1>]
SYMBOL_METHOD: public void b2DistanceProxy::b2DistanceProxy() [b2Distance.h <31:2 <31:2 <31:2 31:16> 31:18> 31:71>]
SYMBOL_FIELD: public b2Vec2 [] b2DistanceProxy::m_buffer [b2Distance.h <49:9 49:16>]
SYMBOL_FIELD: public const b2Vec2 * b2DistanceProxy::m_vertices [b2Distance.h <50:16 50:25>]
SYMBOL_FIELD: public int32 b2DistanceProxy::m_count [b2Distance.h <51:8 51:14>]
SYMBOL_FIELD: public float32 b2DistanceProxy::m_radius [b2Distance.h <52:10 52:17>]
SYMBOL_METHOD: public void b2DistanceProxy::Set(const b2Shape *, int32) [b2Distance.h <35:2 <35:7 35:9> 35:44>]
SYMBOL_METHOD: public int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const [b2Distance.h <38:2 <38:8 38:17> 38:40>]
SYMBOL_METHOD: public int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const [b2Distance.h <107:1 <107:31 107:40> 122:1>]
SYMBOL_METHOD: public const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const [b2Distance.h <41:2 <41:16 41:31> 41:54>]
SYMBOL_METHOD: public const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const [b2Distance.h <124:1 <124:39 124:54> 139:1>]
SYMBOL_METHOD: public int32 b2DistanceProxy::GetVertexCount() const [b2Distance.h <44:2 <44:8 44:21> 44:29>]
SYMBOL_METHOD: public int32 b2DistanceProxy::GetVertexCount() const [b2Distance.h <96:1 <96:31 96:44> 99:1>]
SYMBOL_METHOD: public const b2Vec2 & b2DistanceProxy::GetVertex(int32) const [b2Distance.h <47:2 <47:16 47:24> 47:43>]
SYMBOL_METHOD: public const b2Vec2 & b2DistanceProxy::GetVertex(int32) const [b2Distance.h <101:1 <101:39 101:47> 105:1>]
SYMBOL_METHOD: public void b2DistanceProxy::~b2DistanceProxy() [b2Distance.h <29:8 <29:8 29:22> 29:22>]
SYMBOL_METHOD: public void b2DistanceProxy::b2DistanceProxy(const b2DistanceProxy &) [b2Distance.h <29:8 <29:8 29:22> 29:22>]
SYMBOL_METHOD: public void b2DistanceProxy::b2DistanceProxy(b2DistanceProxy &&) [b2Distance.h <29:8 <29:8 29:22> 29:22>]
SYMBOL_STRUCT: b2SimplexCache [b2Distance.h <57:1 <57:8 57:21> 63:1>]
SYMBOL_FIELD: public float32 b2SimplexCache::metric [b2Distance.h <59:10 59:15>]
SYMBOL_FIELD: public uint16 b2SimplexCache::count [b2Distance.h <60:9 60:13>]
SYMBOL_FIELD: public uint8 [] b2SimplexCache::indexA [b2Distance.h <61:8 61:13>]
SYMBOL_FIELD: public uint8 [] b2SimplexCache::indexB [b2Distance.h <62:8 62:13>]
SYMBOL_STRUCT: b2DistanceInput [b2Distance.h <68:1 <68:8 68:22> 75:1>]
SYMBOL_FIELD: public b2DistanceProxy b2DistanceInput::proxyA [b2Distance.h <70:18 70:23>]
SYMBOL_FIELD: public b2DistanceProxy b2DistanceInput::proxyB [b2Distance.h <71:18 71:23>]
SYMBOL_FIELD: public b2Transform b2DistanceInput::transformA [b2Distance.h <72:14 72:23>]
SYMBOL_FIELD: public b2Transform b2DistanceInput::transformB [b2Distance.h <73:14 73:23>]
SYMBOL_FIELD: public bool b2DistanceInput::useRadii [b2Distance.h <74:7 74:14>]
SYMBOL_STRUCT: b2DistanceOutput [b2Distance.h <78:1 <78:8 78:23> 84:1>]
SYMBOL_FIELD: public b2Vec2 b2DistanceOutput::pointA [b2Distance.h <80:9 80:14>]
SYMBOL_FIELD: public b2Vec2 b2DistanceOutput::pointB [b2Distance.h <81:9 81:14>]
SYMBOL_FIELD: public float32 b2DistanceOutput::distance [b2Distance.h <82:10 82:17>]
SYMBOL_FIELD: public int32 b2DistanceOutput::iterations [b2Distance.h <83:8 83:17>]
SYMBOL_FUNCTION: void b2Distance(b2DistanceOutput *, b2SimplexCache *, const b2DistanceInput *) [b2Distance.h <89:1 <89:6 89:15> 91:33>]
SYMBOL_STRUCT: b2TOIInput [b2TimeOfImpact.h <26:1 <26:8 26:17> 33:1>]
SYMBOL_FIELD: public b2DistanceProxy b2TOIInput::proxyA [b2TimeOfImpact.h <28:18 28:23>]
SYMBOL_FIELD: public b2DistanceProxy b2TOIInput::proxyB [b2TimeOfImpact.h <29:18 29:23>]
SYMBOL_FIELD: public b2Sweep b2TOIInput::sweepA [b2TimeOfImpact.h <30:10 30:15>]
SYMBOL_FIELD: public b2Sweep b2TOIInput::sweepB [b2TimeOfImpact.h <31:10 31:15>]
SYMBOL_FIELD: public float32 b2TOIInput::tMax [b2TimeOfImpact.h <32:10 32:13>]
SYMBOL_METHOD: public void b2TOIInput::b2TOIInput() [b2TimeOfImpact.h <26:8 <26:8 26:17> 26:17>]
SYMBOL_METHOD: public void b2TOIInput::b2TOIInput(const b2TOIInput &) [b2TimeOfImpact.h <26:8 <26:8 26:17> 26:17>]
SYMBOL_METHOD: public void b2TOIInput::b2TOIInput(b2TOIInput &&) [b2TimeOfImpact.h <26:8 <26:8 26:17> 26:17>]
QUALIFIER: b2TOIOutput [b2World.cpp <694:25 694:35>]
SYMBOL_STRUCT: b2TOIOutput [b2TimeOfImpact.h <36:1 <36:8 36:18> 49:1>]
SYMBOL_ENUM: public b2TOIOutput::State [b2TimeOfImpact.h <38:2 <38:7 38:11> 45:2>]
SYMBOL_ENUM_CONSTANT: b2TOIOutput::State::e_unknown [b2TimeOfImpact.h <40:3 40:11>]
SYMBOL_ENUM_CONSTANT: b2TOIOutput::State::e_failed [b2TimeOfImpact.h <41:3 41:10>]
SYMBOL_ENUM_CONSTANT: b2TOIOutput::State::e_overlapped [b2TimeOfImpact.h <42:3 42:14>]
SYMBOL_ENUM_CONSTANT: b2TOIOutput::State::e_touching [b2TimeOfImpact.h <43:3 43:12>]
SYMBOL_ENUM_CONSTANT: b2TOIOutput::State::e_separated [b2TimeOfImpact.h <44:3 44:13>]
SYMBOL_FIELD: public b2TOIOutput::State b2TOIOutput::state [b2TimeOfImpact.h <47:8 47:12>]
SYMBOL_FIELD: public float32 b2TOIOutput::t [b2TimeOfImpact.h <48:10 48:10>]
SYMBOL_METHOD: public void b2TOIOutput::b2TOIOutput() [b2TimeOfImpact.h <36:8 <36:8 36:18> 36:18>]
SYMBOL_METHOD: public void b2TOIOutput::b2TOIOutput(const b2TOIOutput &) [b2TimeOfImpact.h <36:8 <36:8 36:18> 36:18>]
SYMBOL_METHOD: public void b2TOIOutput::b2TOIOutput(b2TOIOutput &&) [b2TimeOfImpact.h <36:8 <36:8 36:18> 36:18>]
SYMBOL_FUNCTION: void b2TimeOfImpact(b2TOIOutput *, const b2TOIInput *) [b2TimeOfImpact.h <56:1 <56:6 56:19> 56:65>]
SYMBOL_METHOD: public void b2Color::b2Color() [b2Draw.h <27:2 <27:2 <27:2 27:8> 27:10> 27:13>]
SYMBOL_METHOD: public void b2Color::b2Color(float32, float32, float32, float32) [b2Draw.h <28:2 <28:2 <28:2 28:8> 28:67> 31:2>]
SYMBOL_FIELD: public float32 b2Color::r [b2Draw.h <38:10 38:10>]
SYMBOL_FIELD: public float32 b2Color::g [b2Draw.h <38:13 38:13>]
SYMBOL_FIELD: public float32 b2Color::b [b2Draw.h <38:16 38:16>]
SYMBOL_FIELD: public float32 b2Color::a [b2Draw.h <38:19 38:19>]
SYMBOL_METHOD: public void b2Color::Set(float32, float32, float32, float32) [b2Draw.h <33:2 <33:2 <33:7 33:9> 33:68> 36:2>]
SYMBOL_METHOD: public void b2Color::b2Color(const b2Color &) [b2Draw.h <25:8 <25:8 25:14> 25:14>]
SYMBOL_METHOD: public void b2Color::b2Color(b2Color &&) [b2Draw.h <25:8 <25:8 25:14> 25:14>]
SYMBOL_METHOD: public void b2Color::~b2Color() [b2Draw.h <25:8 <25:8 25:14> 25:14>]
SYMBOL_METHOD: public void b2Draw::b2Draw() [b2Draw.h <46:2 <46:2 46:7> 46:9>]
SYMBOL_METHOD: public void b2Draw::~b2Draw() [b2Draw.h <48:2 <48:2 <48:10 48:16> 48:18> 48:21>]
SYMBOL_ENUM: public b2Draw::anonymous enum (b2Draw.h<50:2>) [b2Draw.h <50:2 <50:2 50:5> 57:2>]
SYMBOL_ENUM_CONSTANT: b2Draw::anonymous enum (b2Draw.h<50:2>)::e_shapeBit [b2Draw.h <52:3 52:12>]
SYMBOL_ENUM_CONSTANT: b2Draw::anonymous enum (b2Draw.h<50:2>)::e_jointBit [b2Draw.h <53:3 53:12>]
SYMBOL_ENUM_CONSTANT: b2Draw::anonymous enum (b2Draw.h<50:2>)::e_aabbBit [b2Draw.h <54:3 54:11>]
SYMBOL_ENUM_CONSTANT: b2Draw::anonymous enum (b2Draw.h<50:2>)::e_pairBit [b2Draw.h <55:3 55:11>]
SYMBOL_ENUM_CONSTANT: b2Draw::anonymous enum (b2Draw.h<50:2>)::e_centerOfMassBit [b2Draw.h <56:3 56:19>]
SYMBOL_METHOD: public void b2Draw::SetFlags(uint32) [b2Draw.h <60:2 <60:7 60:14> 60:28>]
SYMBOL_METHOD: public uint32 b2Draw::GetFlags() const [b2Draw.h <63:2 <63:9 63:16> 63:24>]
SYMBOL_METHOD: public void b2Draw::AppendFlags(uint32) [b2Draw.h <66:2 <66:7 66:17> 66:31>]
SYMBOL_METHOD: public void b2Draw::ClearFlags(uint32) [b2Draw.h <69:2 <69:7 69:16> 69:30>]
SYMBOL_METHOD: public void b2Draw::DrawPolygon(const b2Vec2 *, int32, const b2Color &) [b2Draw.h <72:2 <72:15 72:25> 72:94>]
SYMBOL_METHOD: public void b2Draw::DrawSolidPolygon(const b2Vec2 *, int32, const b2Color &) [b2Draw.h <75:2 <75:15 75:30> 75:99>]
SYMBOL_METHOD: public void b2Draw::DrawCircle(const b2Vec2 &, float32, const b2Color &) [b2Draw.h <78:2 <78:15 78:24> 78:88>]
SYMBOL_METHOD: public void b2Draw::DrawSolidCircle(const b2Vec2 &, float32, const b2Vec2 &, const b2Color &) [b2Draw.h <81:2 <81:15 81:29> 81:113>]
SYMBOL_METHOD: public void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2Draw.h <84:2 <84:15 84:25> 84:87>]
SYMBOL_METHOD: public void b2Draw::DrawTransform(const b2Transform &) [b2Draw.h <88:2 <88:15 88:27> 88:54>]
SYMBOL_METHOD: public void b2Draw::DrawPoint(const b2Vec2 &, float32, const b2Color &) [b2Draw.h <91:2 <91:15 91:23> 91:80>]
SYMBOL_FIELD: protected uint32 b2Draw::m_drawFlags [b2Draw.h <94:9 94:19>]
SYMBOL_METHOD: public b2Draw & b2Draw::operator=(const b2Draw &) [b2Draw.h <43:7 <43:7 43:12> 43:12>]
SYMBOL_CLASS: b2Timer [b2Timer.h <26:1 <26:7 26:13> 48:1>]
SYMBOL_METHOD: public void b2Timer::b2Timer() [b2Timer.h <31:2 <31:2 31:8> 31:10>]
SYMBOL_METHOD: public void b2Timer::Reset() [b2Timer.h <34:2 <34:7 34:11> 34:13>]
SYMBOL_METHOD: public float32 b2Timer::GetMilliseconds() const [b2Timer.h <37:2 <37:10 37:24> 37:32>]
SYMBOL_FIELD: private float64 b2Timer::m_start [b2Timer.h <42:10 42:16>]
SYMBOL_FIELD: private static float64 b2Timer::s_invFrequency [b2Timer.h <43:17 43:30>]
SYMBOL_METHOD: public void b2Timer::b2Timer(const b2Timer &) [b2Timer.h <26:7 <26:7 26:13> 26:13>]
SYMBOL_METHOD: public void b2Timer::b2Timer(b2Timer &&) [b2Timer.h <26:7 <26:7 26:13> 26:13>]
SYMBOL_FUNCTION: void * memset(void *, int, size_t)
SYMBOL_FIELD: public const b2BroadPhase * b2WorldQueryWrapper::broadPhase [b2World.cpp <982:22 982:31>]
SYMBOL_FIELD: public b2QueryCallback * b2WorldQueryWrapper::callback [b2World.cpp <983:19 983:26>]
SYMBOL_METHOD: public void b2WorldQueryWrapper::b2WorldQueryWrapper() [b2World.cpp <974:8 <974:8 974:26> 974:26>]
SYMBOL_METHOD: public void b2WorldQueryWrapper::b2WorldQueryWrapper(const b2WorldQueryWrapper &) [b2World.cpp <974:8 <974:8 974:26> 974:26>]
SYMBOL_METHOD: public void b2WorldQueryWrapper::b2WorldQueryWrapper(b2WorldQueryWrapper &&) [b2World.cpp <974:8 <974:8 974:26> 974:26>]
SYMBOL_FIELD: public const b2BroadPhase * b2WorldRayCastWrapper::broadPhase [b2World.cpp <1015:22 1015:31>]
SYMBOL_FIELD: public b2RayCastCallback * b2WorldRayCastWrapper::callback [b2World.cpp <1016:21 1016:28>]
SYMBOL_METHOD: public void b2WorldRayCastWrapper::b2WorldRayCastWrapper() [b2World.cpp <994:8 <994:8 994:28> 994:28>]
SYMBOL_METHOD: public void b2WorldRayCastWrapper::b2WorldRayCastWrapper(const b2WorldRayCastWrapper &) [b2World.cpp <994:8 <994:8 994:28> 994:28>]
SYMBOL_METHOD: public void b2WorldRayCastWrapper::b2WorldRayCastWrapper(b2WorldRayCastWrapper &&) [b2World.cpp <994:8 <994:8 994:28> 994:28>]
REFERENCE_INCLUDE: b2World.cpp -> b2World.h [b2World.cpp <19:10 19:35>]
REFERENCE_MACRO_USAGE: b2World.h -> B2_WORLD_H [b2World.h <19:9 19:18>]
REFERENCE_INCLUDE: b2World.h -> b2Math.h [b2World.h <22:10 22:32>]
REFERENCE_MACRO_USAGE: b2Math.h -> B2_MATH_H [b2Math.h <19:9 19:17>]
REFERENCE_INCLUDE: b2Math.h -> b2Settings.h [b2Math.h <22:10 22:36>]
REFERENCE_MACRO_USAGE: b2Settings.h -> B2_SETTINGS_H [b2Settings.h <19:9 19:21>]
REFERENCE_INCLUDE: b2Settings.h -> stddef.h [b2Settings.h <22:10 22:19>]
REFERENCE_INCLUDE: stddef.h -> corecrt.h [stddef.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt.h -> vcruntime.h [corecrt.h <10:10 10:22>]
REFERENCE_INCLUDE: vcruntime.h -> sal.h [vcruntime.h <47:10 47:16>]
REFERENCE_INCLUDE: sal.h -> concurrencysal.h [sal.h <2990:10 2990:27>]
REFERENCE_INCLUDE: vcruntime.h -> vadefs.h [vcruntime.h <48:10 48:19>]
REFERENCE_INCLUDE: b2Settings.h -> assert.h [b2Settings.h <23:10 23:19>]
REFERENCE_INCLUDE: assert.h -> corecrt.h [assert.h <12:10 12:20>]
REFERENCE_INCLUDE: b2Settings.h -> float.h [b2Settings.h <24:10 24:18>]
REFERENCE_INCLUDE: float.h -> corecrt.h [float.h <12:10 12:20>]
REFERENCE_MACRO_USAGE: b2Settings.h -> NDEBUG [b2Settings.h <26:14 26:19>]
REFERENCE_INCLUDE: b2Math.h -> math.h [b2Math.h <23:10 23:17>]
REFERENCE_INCLUDE: math.h -> corecrt.h [math.h <11:10 11:20>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Sqrt [b2Math.h <103:10 103:15>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2_epsilon [b2Math.h <117:16 117:25>]
REFERENCE_MACRO_USAGE: b2Settings.h -> FLT_EPSILON [b2Settings.h <43:21 43:31>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Atan2 [b2Math.h <329:10 329:16>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2Assert [b2Math.h <709:2 709:9>]
REFERENCE_MACRO_USAGE: b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE: b2Math.h -> b2_pi [b2Math.h <719:25 719:29>]
REFERENCE_INCLUDE: b2World.h -> b2BlockAllocator.h [b2World.h <23:10 23:42>]
REFERENCE_MACRO_USAGE: b2BlockAllocator.h -> B2_BLOCK_ALLOCATOR_H [b2BlockAllocator.h <19:9 19:28>]
REFERENCE_INCLUDE: b2BlockAllocator.h -> b2Settings.h [b2BlockAllocator.h <22:10 22:36>]
REFERENCE_INCLUDE: b2World.h -> b2StackAllocator.h [b2World.h <24:10 24:42>]
REFERENCE_MACRO_USAGE: b2StackAllocator.h -> B2_STACK_ALLOCATOR_H [b2StackAllocator.h <19:9 19:28>]
REFERENCE_INCLUDE: b2StackAllocator.h -> b2Settings.h [b2StackAllocator.h <22:10 22:36>]
REFERENCE_INCLUDE: b2World.h -> b2ContactManager.h [b2World.h <25:10 25:44>]
REFERENCE_MACRO_USAGE: b2ContactManager.h -> B2_CONTACT_MANAGER_H [b2ContactManager.h <19:9 19:28>]
REFERENCE_INCLUDE: b2ContactManager.h -> b2BroadPhase.h [b2ContactManager.h <22:10 22:41>]
REFERENCE_MACRO_USAGE: b2BroadPhase.h -> B2_BROAD_PHASE_H [b2BroadPhase.h <19:9 19:24>]
REFERENCE_INCLUDE: b2BroadPhase.h -> b2Settings.h [b2BroadPhase.h <22:10 22:36>]
REFERENCE_INCLUDE: b2BroadPhase.h -> b2Collision.h [b2BroadPhase.h <23:10 23:40>]
REFERENCE_MACRO_USAGE: b2Collision.h -> B2_COLLISION_H [b2Collision.h <19:9 19:22>]
REFERENCE_INCLUDE: b2Collision.h -> b2Math.h [b2Collision.h <22:10 22:32>]
REFERENCE_INCLUDE: b2Collision.h -> limits.h [b2Collision.h <23:10 23:19>]
REFERENCE_INCLUDE: limits.h -> vcruntime.h [limits.h <11:10 11:22>]
REFERENCE_MACRO_USAGE: b2Collision.h -> UCHAR_MAX [b2Collision.h <34:30 34:38>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <102:25 102:44>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <121:16 121:35>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <122:22 122:41>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <136:43 136:62>]
REFERENCE_MACRO_USAGE: b2Collision.h -> b2_maxManifoldPoints [b2Collision.h <136:86 136:105>]
REFERENCE_INCLUDE: b2BroadPhase.h -> b2DynamicTree.h [b2BroadPhase.h <24:10 24:42>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> B2_DYNAMIC_TREE_H [b2DynamicTree.h <19:9 19:25>]
REFERENCE_INCLUDE: b2DynamicTree.h -> b2Collision.h [b2DynamicTree.h <22:10 22:40>]
REFERENCE_INCLUDE: b2DynamicTree.h -> b2GrowableStack.h [b2DynamicTree.h <23:10 23:41>]
REFERENCE_MACRO_USAGE: b2GrowableStack.h -> B2_GROWABLE_STACK_H [b2GrowableStack.h <19:9 19:27>]
REFERENCE_INCLUDE: b2GrowableStack.h -> b2Settings.h [b2GrowableStack.h <21:10 21:36>]
REFERENCE_INCLUDE: b2GrowableStack.h -> string.h [b2GrowableStack.h <22:10 22:19>]
REFERENCE_INCLUDE: string.h -> corecrt.h [string.h <11:10 11:20>]
REFERENCE_INCLUDE: string.h -> corecrt_memory.h [string.h <12:10 12:27>]
REFERENCE_INCLUDE: corecrt_memory.h -> corecrt.h [corecrt_memory.h <13:10 13:20>]
REFERENCE_INCLUDE: corecrt_memory.h -> corecrt_memcpy_s.h [corecrt_memory.h <14:10 14:29>]
REFERENCE_INCLUDE: corecrt_memcpy_s.h -> corecrt.h [corecrt_memcpy_s.h <10:10 10:20>]
REFERENCE_INCLUDE: corecrt_memcpy_s.h -> errno.h [corecrt_memcpy_s.h <11:10 11:18>]
REFERENCE_INCLUDE: errno.h -> corecrt.h [errno.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt_memcpy_s.h -> vcruntime_string.h [corecrt_memcpy_s.h <12:10 12:29>]
REFERENCE_INCLUDE: vcruntime_string.h -> vcruntime.h [vcruntime_string.h <10:10 10:22>]
REFERENCE_INCLUDE: corecrt_memory.h -> vcruntime_string.h [corecrt_memory.h <15:10 15:29>]
REFERENCE_INCLUDE: string.h -> corecrt_wstring.h [string.h <13:10 13:28>]
REFERENCE_INCLUDE: corecrt_wstring.h -> corecrt.h [corecrt_wstring.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt_wstring.h -> vcruntime_string.h [corecrt_wstring.h <12:10 12:29>]
REFERENCE_INCLUDE: string.h -> vcruntime_string.h [string.h <14:10 14:29>]
REFERENCE_MACRO_USAGE: b2GrowableStack.h -> b2Assert [b2GrowableStack.h <67:3 67:10>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2_nullNode [b2DynamicTree.h <32:20 32:30>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2_nullNode [b2DynamicTree.h <177:17 177:27>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2_nullNode [b2DynamicTree.h <235:17 235:27>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2Assert [b2DynamicTree.h <158:2 158:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2Assert [b2DynamicTree.h <164:2 164:9>]
REFERENCE_MACRO_USAGE: b2DynamicTree.h -> b2Assert [b2DynamicTree.h <209:2 209:9>]
REFERENCE_INCLUDE: b2BroadPhase.h -> algorithm [b2BroadPhase.h <25:10 25:20>]
REFERENCE_INCLUDE: algorithm -> xmemory [algorithm <6:10 6:18>]
REFERENCE_INCLUDE: xmemory -> xmemory0 [xmemory <6:10 6:19>]
REFERENCE_INCLUDE: xmemory0 -> cstdint [xmemory0 <6:10 6:18>]
REFERENCE_INCLUDE: cstdint -> yvals.h [cstdint <7:10 7:18>]
REFERENCE_INCLUDE: yvals.h -> yvals_core.h [yvals.h <7:10 7:23>]
REFERENCE_INCLUDE: yvals_core.h -> xkeycheck.h [yvals_core.h <220:10 220:22>]
REFERENCE_INCLUDE: yvals_core.h -> crtdefs.h [yvals_core.h <221:10 221:20>]
REFERENCE_INCLUDE: crtdefs.h -> vcruntime.h [crtdefs.h <9:10 9:22>]
REFERENCE_INCLUDE: crtdefs.h -> corecrt.h [crtdefs.h <10:10 10:20>]
REFERENCE_INCLUDE: yvals.h -> crtdbg.h [yvals.h <8:10 8:19>]
REFERENCE_INCLUDE: crtdbg.h -> corecrt.h [crtdbg.h <11:10 11:20>]
REFERENCE_INCLUDE: crtdbg.h -> vcruntime_new_debug.h [crtdbg.h <12:10 12:32>]
REFERENCE_INCLUDE: vcruntime_new_debug.h -> vcruntime_new.h [vcruntime_new_debug.h <10:10 10:26>]
REFERENCE_INCLUDE: vcruntime_new.h -> vcruntime.h [vcruntime_new.h <10:10 10:22>]
REFERENCE_INCLUDE: yvals.h -> use_ansi.h [yvals.h <201:10 201:21>]
REFERENCE_INCLUDE: cstdint -> stdint.h [cstdint <8:10 8:19>]
REFERENCE_INCLUDE: stdint.h -> vcruntime.h [stdint.h <13:10 13:22>]
REFERENCE_INCLUDE: xmemory0 -> cstdlib [xmemory0 <7:10 7:18>]
REFERENCE_INCLUDE: cstdlib -> yvals_core.h [cstdlib <7:10 7:23>]
REFERENCE_INCLUDE: cstdlib -> stdlib.h [cstdlib <8:10 8:19>]
REFERENCE_INCLUDE: stdlib.h -> corecrt.h [stdlib.h <11:10 11:20>]
REFERENCE_INCLUDE: stdlib.h -> corecrt_malloc.h [stdlib.h <12:10 12:27>]
REFERENCE_INCLUDE: corecrt_malloc.h -> corecrt.h [corecrt_malloc.h <11:10 11:20>]
REFERENCE_INCLUDE: stdlib.h -> corecrt_search.h [stdlib.h <13:10 13:27>]
REFERENCE_INCLUDE: corecrt_search.h -> corecrt.h [corecrt_search.h <13:10 13:20>]
REFERENCE_INCLUDE: corecrt_search.h -> stddef.h [corecrt_search.h <14:10 14:19>]
REFERENCE_INCLUDE: stdlib.h -> corecrt_wstdlib.h [stdlib.h <14:10 14:28>]
REFERENCE_INCLUDE: corecrt_wstdlib.h -> corecrt.h [corecrt_wstdlib.h <11:10 11:20>]
REFERENCE_INCLUDE: stdlib.h -> limits.h [stdlib.h <15:10 15:19>]
REFERENCE_INCLUDE: cstdlib -> math.h [cstdlib <9:10 9:17>]
REFERENCE_INCLUDE: xmemory0 -> limits [xmemory0 <8:10 8:17>]
REFERENCE_INCLUDE: limits -> ymath.h [limits <6:10 6:18>]
REFERENCE_INCLUDE: ymath.h -> yvals.h [ymath.h <6:10 6:18>]
REFERENCE_INCLUDE: limits -> cfloat [limits <7:10 7:17>]
REFERENCE_INCLUDE: cfloat -> yvals.h [cfloat <5:10 5:18>]
REFERENCE_INCLUDE: cfloat -> float.h [cfloat <7:10 7:18>]
REFERENCE_INCLUDE: limits -> climits [limits <8:10 8:18>]
REFERENCE_INCLUDE: climits -> yvals.h [climits <7:10 7:18>]
REFERENCE_INCLUDE: climits -> limits.h [climits <8:10 8:19>]
REFERENCE_INCLUDE: limits -> cmath [limits <9:10 9:16>]
REFERENCE_INCLUDE: cmath -> yvals.h [cmath <7:10 7:18>]
REFERENCE_INCLUDE: cmath -> cstdlib [cmath <8:10 8:18>]
REFERENCE_INCLUDE: cmath -> xtgmath.h [cmath <625:10 625:20>]
REFERENCE_INCLUDE: xtgmath.h -> cstdlib [xtgmath.h <8:10 8:18>]
REFERENCE_INCLUDE: xtgmath.h -> xtr1common [xtgmath.h <9:10 9:21>]
REFERENCE_INCLUDE: xtr1common -> yvals_core.h [xtr1common <6:10 6:23>]
REFERENCE_INCLUDE: xtgmath.h -> yvals.h [xtgmath.h <10:10 10:18>]
REFERENCE_INCLUDE: limits -> cwchar [limits <10:10 10:17>]
REFERENCE_INCLUDE: cwchar -> yvals.h [cwchar <7:10 7:18>]
REFERENCE_INCLUDE: cwchar -> wchar.h [cwchar <8:10 8:18>]
REFERENCE_INCLUDE: wchar.h -> corecrt.h [wchar.h <13:10 13:20>]
REFERENCE_INCLUDE: wchar.h -> corecrt_memcpy_s.h [wchar.h <14:10 14:29>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wconio.h [wchar.h <15:10 15:27>]
REFERENCE_INCLUDE: corecrt_wconio.h -> corecrt.h [corecrt_wconio.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt_wconio.h -> corecrt_stdio_config.h [corecrt_wconio.h <12:10 12:33>]
REFERENCE_INCLUDE: corecrt_stdio_config.h -> corecrt.h [corecrt_stdio_config.h <10:10 10:20>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wctype.h [wchar.h <16:10 16:27>]
REFERENCE_INCLUDE: corecrt_wctype.h -> corecrt.h [corecrt_wctype.h <11:10 11:20>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wdirect.h [wchar.h <17:10 17:28>]
REFERENCE_INCLUDE: corecrt_wdirect.h -> corecrt.h [corecrt_wdirect.h <11:10 11:20>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wio.h [wchar.h <18:10 18:24>]
REFERENCE_INCLUDE: corecrt_wio.h -> corecrt.h [corecrt_wio.h <11:10 11:20>]
REFERENCE_INCLUDE: corecrt_wio.h -> corecrt_share.h [corecrt_wio.h <12:10 12:26>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wprocess.h [wchar.h <19:10 19:29>]
REFERENCE_INCLUDE: corecrt_wprocess.h -> corecrt.h [corecrt_wprocess.h <11:10 11:20>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wstdio.h [wchar.h <20:10 20:27>]
REFERENCE_INCLUDE: corecrt_wstdio.h -> corecrt.h [corecrt_wstdio.h <12:10 12:20>]
REFERENCE_INCLUDE: corecrt_wstdio.h -> corecrt_stdio_config.h [corecrt_wstdio.h <13:10 13:33>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wstdlib.h [wchar.h <21:10 21:28>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wstring.h [wchar.h <22:10 22:28>]
REFERENCE_INCLUDE: wchar.h -> corecrt_wtime.h [wchar.h <23:10 23:26>]
REFERENCE_INCLUDE: corecrt_wtime.h -> corecrt.h [corecrt_wtime.h <11:10 11:20>]
REFERENCE_INCLUDE: wchar.h -> stat.h [wchar.h <24:10 24:21>]
REFERENCE_INCLUDE: stat.h -> corecrt.h [stat.h <10:10 10:20>]
REFERENCE_INCLUDE: stat.h -> types.h [stat.h <11:10 11:22>]
REFERENCE_INCLUDE: wchar.h -> types.h [wchar.h <25:10 25:22>]
REFERENCE_INCLUDE: wchar.h -> vcruntime_string.h [wchar.h <26:10 26:29>]
REFERENCE_INCLUDE: limits -> xstddef [limits <11:10 11:18>]
REFERENCE_INCLUDE: xstddef -> cstddef [xstddef <6:10 6:18>]
REFERENCE_INCLUDE: cstddef -> stddef.h [cstddef <7:10 7:19>]
REFERENCE_INCLUDE: cstddef -> xtr1common [cstddef <8:10 8:21>]
REFERENCE_INCLUDE: xstddef -> cstdlib [xstddef <7:10 7:18>]
REFERENCE_INCLUDE: xstddef -> initializer_list [xstddef <8:10 8:27>]
REFERENCE_INCLUDE: initializer_list -> cstddef [initializer_list <6:10 6:18>]
REFERENCE_INCLUDE: xstddef -> xtr1common [xstddef <9:10 9:21>]
REFERENCE_INCLUDE: xmemory0 -> new [xmemory0 <9:10 9:14>]
REFERENCE_INCLUDE: new -> exception [new <6:10 6:20>]
REFERENCE_INCLUDE: exception -> yvals.h [exception <7:10 7:18>]
REFERENCE_INCLUDE: exception -> type_traits [exception <8:10 8:22>]
REFERENCE_INCLUDE: type_traits -> xstddef [type_traits <6:10 6:18>]
REFERENCE_INCLUDE: exception -> malloc.h [exception <26:10 26:19>]
REFERENCE_INCLUDE: malloc.h -> corecrt.h [malloc.h <11:10 11:20>]
REFERENCE_INCLUDE: malloc.h -> corecrt_malloc.h [malloc.h <12:10 12:27>]
REFERENCE_INCLUDE: exception -> vcruntime_exception.h [exception <27:10 27:32>]
REFERENCE_INCLUDE: vcruntime_exception.h -> eh.h [vcruntime_exception.h <10:10 10:15>]
REFERENCE_INCLUDE: eh.h -> corecrt_terminate.h [eh.h <11:10 11:30>]
REFERENCE_INCLUDE: corecrt_terminate.h -> corecrt.h [corecrt_terminate.h <10:10 10:20>]
REFERENCE_INCLUDE: new -> vcruntime_new.h [new <7:10 7:26>]
REFERENCE_INCLUDE: xmemory0 -> xutility [xmemory0 <10:10 10:19>]
REFERENCE_INCLUDE: xutility -> climits [xutility <6:10 6:18>]
REFERENCE_INCLUDE: xutility -> cstdlib [xutility <7:10 7:18>]
REFERENCE_INCLUDE: xutility -> utility [xutility <8:10 8:18>]
REFERENCE_INCLUDE: utility -> xstddef [utility <6:10 6:18>]
REFERENCE_INCLUDE: utility -> iosfwd [utility <7:10 7:17>]
REFERENCE_INCLUDE: iosfwd -> cstdio [iosfwd <6:10 6:17>]
REFERENCE_INCLUDE: cstdio -> yvals.h [cstdio <7:10 7:18>]
REFERENCE_INCLUDE: cstdio -> stdio.h [cstdio <8:10 8:18>]
REFERENCE_INCLUDE: stdio.h -> corecrt.h [stdio.h <11:10 11:20>]
REFERENCE_INCLUDE: stdio.h -> corecrt_wstdio.h [stdio.h <12:10 12:27>]
REFERENCE_INCLUDE: iosfwd -> cstring [iosfwd <7:10 7:18>]
REFERENCE_INCLUDE: cstring -> yvals.h [cstring <7:10 7:18>]
REFERENCE_INCLUDE: cstring -> string.h [cstring <8:10 8:19>]
REFERENCE_INCLUDE: iosfwd -> cwchar [iosfwd <8:10 8:17>]
REFERENCE_INCLUDE: iosfwd -> xstddef [iosfwd <9:10 9:18>]
REFERENCE_INCLUDE: iosfwd -> yvals.h [iosfwd <10:10 10:18>]
REFERENCE_INCLUDE: iosfwd -> crtdbg.h [iosfwd <12:10 12:19>]
REFERENCE_INCLUDE: utility -> type_traits [utility <8:10 8:22>]
REFERENCE_INCLUDE: xmemory0 -> xatomic0.h [xmemory0 <1228:12 1228:23>]
REFERENCE_INCLUDE: xatomic0.h -> yvals.h [xatomic0.h <6:10 6:18>]
REFERENCE_INCLUDE: xmemory0 -> intrin0.h [xmemory0 <1231:13 1231:23>]
REFERENCE_INCLUDE: b2World.h -> b2WorldCallbacks.h [b2World.h <26:10 26:44>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_WORLD_CALLBACKS_H [b2WorldCallbacks.h <19:9 19:28>]
REFERENCE_INCLUDE: b2WorldCallbacks.h -> b2Settings.h [b2WorldCallbacks.h <22:10 22:36>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> b2_maxManifoldPoints [b2WorldCallbacks.h <67:25 67:44>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> b2_maxManifoldPoints [b2WorldCallbacks.h <68:26 68:45>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <87:50 87:60>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <90:48 90:58>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <104:3 104:13>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <105:3 105:13>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <116:3 116:13>]
REFERENCE_MACRO_USAGE: b2WorldCallbacks.h -> B2_NOT_USED [b2WorldCallbacks.h <117:3 117:13>]
REFERENCE_INCLUDE: b2World.h -> b2TimeStep.h [b2World.h <27:10 27:38>]
REFERENCE_MACRO_USAGE: b2TimeStep.h -> B2_TIME_STEP_H [b2TimeStep.h <19:9 19:22>]
REFERENCE_INCLUDE: b2TimeStep.h -> b2Math.h [b2TimeStep.h <22:10 22:32>]
REFERENCE_INCLUDE: b2World.cpp -> b2Body.h [b2World.cpp <20:10 20:34>]
REFERENCE_MACRO_USAGE: b2Body.h -> B2_BODY_H [b2Body.h <19:9 19:17>]
REFERENCE_INCLUDE: b2Body.h -> b2Math.h [b2Body.h <22:10 22:32>]
REFERENCE_INCLUDE: b2Body.h -> b2Shape.h [b2Body.h <23:10 23:43>]
REFERENCE_MACRO_USAGE: b2Shape.h -> B2_SHAPE_H [b2Shape.h <19:9 19:18>]
REFERENCE_INCLUDE: b2Shape.h -> b2BlockAllocator.h [b2Shape.h <22:10 22:42>]
REFERENCE_INCLUDE: b2Shape.h -> b2Math.h [b2Shape.h <23:10 23:32>]
REFERENCE_INCLUDE: b2Shape.h -> b2Collision.h [b2Shape.h <24:10 24:40>]
REFERENCE_INCLUDE: b2Body.h -> memory [b2Body.h <24:10 24:17>]
REFERENCE_INCLUDE: memory -> xmemory [memory <6:10 6:18>]
REFERENCE_INCLUDE: memory -> exception [memory <7:10 7:20>]
REFERENCE_INCLUDE: memory -> typeinfo [memory <8:10 8:19>]
REFERENCE_INCLUDE: typeinfo -> exception [typeinfo <22:10 22:20>]
REFERENCE_INCLUDE: typeinfo -> vcruntime_typeinfo.h [typeinfo <33:10 33:31>]
REFERENCE_INCLUDE: vcruntime_typeinfo.h -> vcruntime.h [vcruntime_typeinfo.h <10:10 10:22>]
REFERENCE_INCLUDE: vcruntime_typeinfo.h -> vcruntime_exception.h [vcruntime_typeinfo.h <11:10 11:32>]
REFERENCE_INCLUDE: memory -> type_traits [memory <9:10 9:22>]
REFERENCE_INCLUDE: b2World.cpp -> b2Fixture.h [b2World.cpp <21:10 21:37>]
REFERENCE_MACRO_USAGE: b2Fixture.h -> B2_FIXTURE_H [b2Fixture.h <19:9 19:20>]
REFERENCE_INCLUDE: b2Fixture.h -> b2Body.h [b2Fixture.h <22:10 22:34>]
REFERENCE_INCLUDE: b2Fixture.h -> b2Collision.h [b2Fixture.h <23:10 23:40>]
REFERENCE_INCLUDE: b2Fixture.h -> b2Shape.h [b2Fixture.h <24:10 24:43>]
REFERENCE_MACRO_USAGE: b2Fixture.h -> b2Assert [b2Fixture.h <295:2 295:9>]
REFERENCE_MACRO_USAGE: b2Fixture.h -> b2Assert [b2Fixture.h <341:2 341:9>]
REFERENCE_INCLUDE: b2World.cpp -> b2Island.h [b2World.cpp <22:10 22:36>]
REFERENCE_MACRO_USAGE: b2Island.h -> B2_ISLAND_H [b2Island.h <19:9 19:19>]
REFERENCE_INCLUDE: b2Island.h -> b2Math.h [b2Island.h <22:10 22:32>]
REFERENCE_INCLUDE: b2Island.h -> b2Body.h [b2Island.h <23:10 23:34>]
REFERENCE_INCLUDE: b2Island.h -> b2TimeStep.h [b2Island.h <24:10 24:38>]
REFERENCE_MACRO_USAGE: b2Island.h -> b2Assert [b2Island.h <54:3 54:10>]
REFERENCE_MACRO_USAGE: b2Island.h -> b2Assert [b2Island.h <62:3 62:10>]
REFERENCE_MACRO_USAGE: b2Island.h -> b2Assert [b2Island.h <68:3 68:10>]
REFERENCE_INCLUDE: b2World.cpp -> b2PulleyJoint.h [b2World.cpp <23:10 23:48>]
REFERENCE_MACRO_USAGE: b2PulleyJoint.h -> B2_PULLEY_JOINT_H [b2PulleyJoint.h <19:9 19:25>]
REFERENCE_INCLUDE: b2PulleyJoint.h -> b2Joint.h [b2PulleyJoint.h <22:10 22:42>]
REFERENCE_MACRO_USAGE: b2Joint.h -> B2_JOINT_H [b2Joint.h <19:9 19:18>]
REFERENCE_INCLUDE: b2Joint.h -> b2Math.h [b2Joint.h <22:10 22:32>]
REFERENCE_MACRO_USAGE: b2Joint.h -> B2_NOT_USED [b2Joint.h <150:54 150:64>]
REFERENCE_INCLUDE: b2World.cpp -> b2Contact.h [b2World.cpp <24:10 24:46>]
REFERENCE_MACRO_USAGE: b2Contact.h -> B2_CONTACT_H [b2Contact.h <19:9 19:20>]
REFERENCE_INCLUDE: b2Contact.h -> b2Math.h [b2Contact.h <22:10 22:32>]
REFERENCE_INCLUDE: b2Contact.h -> b2Collision.h [b2Contact.h <23:10 23:40>]
REFERENCE_INCLUDE: b2Contact.h -> b2Shape.h [b2Contact.h <24:10 24:43>]
REFERENCE_INCLUDE: b2Contact.h -> b2Fixture.h [b2Contact.h <25:10 25:37>]
REFERENCE_MACRO_USAGE: b2Contact.h -> b2Sqrt [b2Contact.h <39:9 39:14>]
REFERENCE_INCLUDE: b2World.cpp -> b2ContactSolver.h [b2World.cpp <25:10 25:52>]
REFERENCE_MACRO_USAGE: b2ContactSolver.h -> B2_CONTACT_SOLVER_H [b2ContactSolver.h <19:9 19:27>]
REFERENCE_INCLUDE: b2ContactSolver.h -> b2Math.h [b2ContactSolver.h <22:10 22:32>]
REFERENCE_INCLUDE: b2ContactSolver.h -> b2Collision.h [b2ContactSolver.h <23:10 23:40>]
REFERENCE_INCLUDE: b2ContactSolver.h -> b2TimeStep.h [b2ContactSolver.h <24:10 24:38>]
REFERENCE_MACRO_USAGE: b2ContactSolver.h -> b2_maxManifoldPoints [b2ContactSolver.h <44:35 44:54>]
REFERENCE_INCLUDE: b2World.cpp -> b2Collision.h [b2World.cpp <26:10 26:40>]
REFERENCE_INCLUDE: b2World.cpp -> b2BroadPhase.h [b2World.cpp <27:10 27:41>]
REFERENCE_INCLUDE: b2World.cpp -> b2CircleShape.h [b2World.cpp <28:10 28:49>]
REFERENCE_MACRO_USAGE: b2CircleShape.h -> B2_CIRCLE_SHAPE_H [b2CircleShape.h <19:9 19:25>]
REFERENCE_INCLUDE: b2CircleShape.h -> b2Shape.h [b2CircleShape.h <22:10 22:43>]
REFERENCE_INCLUDE: b2World.cpp -> b2EdgeShape.h [b2World.cpp <29:10 29:47>]
REFERENCE_MACRO_USAGE: b2EdgeShape.h -> B2_EDGE_SHAPE_H [b2EdgeShape.h <19:9 19:23>]
REFERENCE_INCLUDE: b2EdgeShape.h -> b2Shape.h [b2EdgeShape.h <22:10 22:43>]
REFERENCE_MACRO_USAGE: b2EdgeShape.h -> b2_polygonRadius [b2EdgeShape.h <65:13 65:28>]
REFERENCE_MACRO_USAGE: b2Settings.h -> b2_linearSlop [b2Settings.h <81:35 81:47>]
REFERENCE_INCLUDE: b2World.cpp -> b2ChainShape.h [b2World.cpp <30:10 30:48>]
REFERENCE_MACRO_USAGE: b2ChainShape.h -> B2_CHAIN_SHAPE_H [b2ChainShape.h <19:9 19:24>]
REFERENCE_INCLUDE: b2ChainShape.h -> b2Shape.h [b2ChainShape.h <22:10 22:43>]
REFERENCE_MACRO_USAGE: b2ChainShape.h -> b2_polygonRadius [b2ChainShape.h <98:13 98:28>]
REFERENCE_INCLUDE: b2World.cpp -> b2PolygonShape.h [b2World.cpp <31:10 31:50>]
REFERENCE_MACRO_USAGE: b2PolygonShape.h -> B2_POLYGON_SHAPE_H [b2PolygonShape.h <19:9 19:26>]
REFERENCE_INCLUDE: b2PolygonShape.h -> b2Shape.h [b2PolygonShape.h <22:10 22:43>]
REFERENCE_MACRO_USAGE: b2PolygonShape.h -> b2_maxPolygonVertices [b2PolygonShape.h <76:20 76:40>]
REFERENCE_MACRO_USAGE: b2PolygonShape.h -> b2_maxPolygonVertices [b2PolygonShape.h <77:19 77:39>]
REFERENCE_MACRO_USAGE: b2PolygonShape.h -> b2_polygonRadius [b2PolygonShape.h <84:13 84:28>]
REFERENCE_INCLUDE: b2World.cpp -> b2TimeOfImpact.h [b2World.cpp <32:10 32:43>]
REFERENCE_MACRO_USAGE: b2TimeOfImpact.h -> B2_TIME_OF_IMPACT_H [b2TimeOfImpact.h <19:9 19:27>]
REFERENCE_INCLUDE: b2TimeOfImpact.h -> b2Math.h [b2TimeOfImpact.h <22:10 22:32>]
REFERENCE_INCLUDE: b2TimeOfImpact.h -> b2Distance.h [b2TimeOfImpact.h <23:10 23:39>]
REFERENCE_MACRO_USAGE: b2Distance.h -> B2_DISTANCE_H [b2Distance.h <20:9 20:21>]
REFERENCE_INCLUDE: b2Distance.h -> b2Math.h [b2Distance.h <23:10 23:32>]
REFERENCE_MACRO_USAGE: b2Distance.h -> b2Assert [b2Distance.h <103:2 103:9>]
REFERENCE_INCLUDE: b2World.cpp -> b2Draw.h [b2World.cpp <33:10 33:32>]
REFERENCE_MACRO_USAGE: b2Draw.h -> B2_DRAW_H [b2Draw.h <19:9 19:17>]
REFERENCE_INCLUDE: b2Draw.h -> b2Math.h [b2Draw.h <22:10 22:32>]
REFERENCE_INCLUDE: b2World.cpp -> b2Timer.h [b2World.cpp <34:10 34:33>]
REFERENCE_MACRO_USAGE: b2Timer.h -> B2_TIMER_H [b2Timer.h <19:9 19:18>]
REFERENCE_INCLUDE: b2Timer.h -> b2Settings.h [b2Timer.h <22:10 22:36>]
REFERENCE_MACRO_USAGE: b2Timer.h -> _WIN32 [b2Timer.h <41:13 41:18>]
REFERENCE_INCLUDE: b2World.cpp -> new [b2World.cpp <35:10 35:14>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <109:2 109:9>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <133:2 133:9>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <134:2 134:9>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <214:2 214:9>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <274:2 274:9>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <346:2 346:9>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <445:4 445:11>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <495:5 495:12>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <524:5 524:12>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <641:5 641:12>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <676:5 676:12>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <1095:4 1095:11>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2Assert [b2World.cpp <1279:2 1279:9>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2_maxTOIContacts [b2World.cpp <579:22 579:38>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2_maxTOIContacts [b2World.cpp <579:41 579:57>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2_maxSubSteps [b2World.cpp <614:24 614:37>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2_epsilon [b2World.cpp <715:47 715:56>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2_maxPolygonVertices [b2World.cpp <1095:28 1095:48>]
REFERENCE_MACRO_USAGE: b2World.cpp -> b2_maxPolygonVertices [b2World.cpp <1096:20 1096:40>]
REFERENCE_TYPE_USAGE: int8 -> signed char [b2Settings.h <33:9 33:14>]
REFERENCE_TYPE_USAGE: int16 -> short [b2Settings.h <34:9 34:14>]
REFERENCE_TYPE_USAGE: int32 -> int [b2Settings.h <35:9 35:14>]
REFERENCE_TYPE_USAGE: uint8 -> unsigned char [b2Settings.h <36:9 36:16>]
REFERENCE_TYPE_USAGE: uint16 -> unsigned short [b2Settings.h <37:9 37:16>]
REFERENCE_TYPE_USAGE: uint32 -> unsigned int [b2Settings.h <38:9 38:16>]
REFERENCE_TYPE_USAGE: float32 -> float [b2Settings.h <39:9 39:13>]
REFERENCE_TYPE_USAGE: float64 -> double [b2Settings.h <40:9 40:14>]
REFERENCE_TYPE_USAGE: void * b2Alloc(int32) -> void [b2Settings.h <135:1 135:4>]
REFERENCE_TYPE_USAGE: void * b2Alloc(int32) -> int32 [b2Settings.h <135:15 135:19>]
REFERENCE_TYPE_USAGE: void b2Free(void *) -> void [b2Settings.h <138:1 138:4>]
REFERENCE_TYPE_USAGE: void b2Free(void *) -> void [b2Settings.h <138:13 138:16>]
REFERENCE_TYPE_USAGE: void b2Log(const char *) -> void [b2Settings.h <141:1 141:4>]
REFERENCE_TYPE_USAGE: void b2Log(const char *) -> char [b2Settings.h <141:18 141:21>]
REFERENCE_TYPE_USAGE: int32 b2Version::major -> int32 [b2Settings.h <147:2 147:6>]
REFERENCE_TYPE_USAGE: int32 b2Version::minor -> int32 [b2Settings.h <148:2 148:6>]
REFERENCE_TYPE_USAGE: int32 b2Version::revision -> int32 [b2Settings.h <149:2 149:6>]
REFERENCE_TYPE_USAGE: b2Version b2_version -> b2Version [b2Settings.h <153:8 153:16>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> bool [b2Math.h <26:8 26:11>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> float32 [b2Math.h <26:23 26:29>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> int32 [b2Math.h <28:2 28:6>]
REFERENCE_TYPE_USAGE: bool b2IsValid(float32) -> int32 [b2Math.h <28:31 28:35>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <33:8 33:14>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <33:26 33:32>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> float32 [b2Math.h <42:2 42:8>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x -> float32 [b2Math.h <37:3 37:9>]
REFERENCE_TYPE_USAGE: int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i -> int32 [b2Math.h <38:3 38:7>]
REFERENCE_TYPE_USAGE: float32 b2InvSqrt(float32) -> b2InvSqrt::anonymous union (b2Math.h<35:2>) [b2Math.h <35:2 35:6>]
REFERENCE_CALL: float32 b2InvSqrt(float32) -> void b2InvSqrt::anonymous union (b2Math.h<35:2>)::() [b2Math.h <39:4 39:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <41:10 41:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> float32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::x [b2Math.h <44:14 44:14>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <43:10 43:10>]
REFERENCE_USAGE: float32 b2InvSqrt(float32) -> int32 b2InvSqrt::anonymous union (b2Math.h<35:2>)::i [b2Math.h <43:36 43:36>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 [b2Math.h <59:9 59:15>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 [b2Math.h <59:22 59:28>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 b2Vec2::x [b2Math.h <59:37 59:37>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(float32, float32) -> float32 b2Vec2::y [b2Math.h <59:45 59:45>]
REFERENCE_TYPE_USAGE: void b2Vec2::SetZero() -> void [b2Math.h <62:2 62:5>]
REFERENCE_USAGE: void b2Vec2::SetZero() -> float32 b2Vec2::x [b2Math.h <62:19 62:19>]
REFERENCE_USAGE: void b2Vec2::SetZero() -> float32 b2Vec2::y [b2Math.h <62:29 62:29>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> void [b2Math.h <65:2 65:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> float32 [b2Math.h <65:11 65:17>]
REFERENCE_TYPE_USAGE: void b2Vec2::Set(float32, float32) -> float32 [b2Math.h <65:23 65:29>]
REFERENCE_USAGE: void b2Vec2::Set(float32, float32) -> float32 b2Vec2::x [b2Math.h <65:37 65:37>]
REFERENCE_USAGE: void b2Vec2::Set(float32, float32) -> float32 b2Vec2::y [b2Math.h <65:45 65:45>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::operator-() const -> b2Vec2 [b2Math.h <68:2 68:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::operator-() const -> b2Vec2 [b2Math.h <68:30 68:35>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::b2Vec2() [b2Math.h <68:37 68:37>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::Set(float32, float32) [b2Math.h <68:42 68:44>]
REFERENCE_USAGE: b2Vec2 b2Vec2::operator-() const -> float32 b2Vec2::x [b2Math.h <68:47 68:47>]
REFERENCE_USAGE: b2Vec2 b2Vec2::operator-() const -> float32 b2Vec2::y [b2Math.h <68:51 68:51>]
REFERENCE_CALL: b2Vec2 b2Vec2::operator-() const -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <68:62 68:62>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::operator()(int32) const -> float32 [b2Math.h <71:2 71:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::operator()(int32) const -> int32 [b2Math.h <71:23 71:27>]
REFERENCE_USAGE: float32 b2Vec2::operator()(int32) const -> float32 b2Vec2::x [b2Math.h <73:12 73:12>]
REFERENCE_TYPE_USAGE: float32 & b2Vec2::operator()(int32) -> float32 [b2Math.h <77:2 77:8>]
REFERENCE_TYPE_USAGE: float32 & b2Vec2::operator()(int32) -> int32 [b2Math.h <77:24 77:28>]
REFERENCE_USAGE: float32 & b2Vec2::operator()(int32) -> float32 b2Vec2::x [b2Math.h <79:12 79:12>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> void [b2Math.h <83:2 83:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> b2Vec2 [b2Math.h <83:26 83:31>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <85:3 85:3>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <85:10 85:10>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <85:13 85:13>]
REFERENCE_USAGE: void b2Vec2::operator+=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <85:20 85:20>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> void [b2Math.h <89:2 89:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> b2Vec2 [b2Math.h <89:26 89:31>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <91:3 91:3>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <91:10 91:10>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <91:13 91:13>]
REFERENCE_USAGE: void b2Vec2::operator-=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <91:20 91:20>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator*=(float32) -> void [b2Math.h <95:2 95:5>]
REFERENCE_TYPE_USAGE: void b2Vec2::operator*=(float32) -> float32 [b2Math.h <95:20 95:26>]
REFERENCE_USAGE: void b2Vec2::operator*=(float32) -> float32 b2Vec2::x [b2Math.h <97:3 97:3>]
REFERENCE_USAGE: void b2Vec2::operator*=(float32) -> float32 b2Vec2::y [b2Math.h <97:11 97:11>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Length() const -> float32 [b2Math.h <101:2 101:8>]
REFERENCE_CALL: float32 b2Vec2::Length() const -> float sqrtf(float) [b2Math.h <103:10 103:15>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::x [b2Math.h <103:17 103:17>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::x [b2Math.h <103:21 103:21>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::y [b2Math.h <103:25 103:25>]
REFERENCE_USAGE: float32 b2Vec2::Length() const -> float32 b2Vec2::y [b2Math.h <103:29 103:29>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 [b2Math.h <108:2 108:8>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::x [b2Math.h <110:10 110:10>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::x [b2Math.h <110:14 110:14>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::y [b2Math.h <110:18 110:18>]
REFERENCE_USAGE: float32 b2Vec2::LengthSquared() const -> float32 b2Vec2::y [b2Math.h <110:22 110:22>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <114:2 114:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <116:3 116:9>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::Normalize() -> float32 [b2Math.h <121:3 121:9>]
REFERENCE_CALL: float32 b2Vec2::Normalize() -> float32 b2Vec2::Length() const [b2Math.h <116:20 116:25>]
REFERENCE_USAGE: float32 b2Vec2::Normalize() -> float32 b2Vec2::x [b2Math.h <122:3 122:3>]
REFERENCE_USAGE: float32 b2Vec2::Normalize() -> float32 b2Vec2::y [b2Math.h <123:3 123:3>]
REFERENCE_TYPE_USAGE: bool b2Vec2::IsValid() const -> bool [b2Math.h <129:2 129:5>]
REFERENCE_CALL: bool b2Vec2::IsValid() const -> bool b2IsValid(float32) [b2Math.h <131:10 131:18>]
REFERENCE_CALL: bool b2Vec2::IsValid() const -> bool b2IsValid(float32) [b2Math.h <131:26 131:34>]
REFERENCE_USAGE: bool b2Vec2::IsValid() const -> float32 b2Vec2::x [b2Math.h <131:20 131:20>]
REFERENCE_USAGE: bool b2Vec2::IsValid() const -> float32 b2Vec2::y [b2Math.h <131:36 131:36>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::Skew() const -> b2Vec2 [b2Math.h <135:2 135:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Vec2::Skew() const -> b2Vec2 [b2Math.h <137:10 137:15>]
REFERENCE_CALL: b2Vec2 b2Vec2::Skew() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <137:10 137:15>]
REFERENCE_USAGE: b2Vec2 b2Vec2::Skew() const -> float32 b2Vec2::y [b2Math.h <137:18 137:18>]
REFERENCE_USAGE: b2Vec2 b2Vec2::Skew() const -> float32 b2Vec2::x [b2Math.h <137:21 137:21>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::x -> float32 [b2Math.h <140:2 140:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec2::y -> float32 [b2Math.h <140:2 140:8>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> b2Vec2 [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: void b2Vec2::b2Vec2(b2Vec2 &&) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> float32 b2Vec2::x [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> b2Vec2 [b2Math.h <53:8 53:13>]
REFERENCE_USAGE: b2Vec2 & b2Vec2::operator=(b2Vec2 &&) -> float32 b2Vec2::y [b2Math.h <53:8 53:13>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:9 150:15>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:22 150:28>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 [b2Math.h <150:35 150:41>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::x [b2Math.h <150:50 150:50>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::y [b2Math.h <150:58 150:58>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(float32, float32, float32) -> float32 b2Vec3::z [b2Math.h <150:66 150:66>]
REFERENCE_TYPE_USAGE: void b2Vec3::SetZero() -> void [b2Math.h <153:2 153:5>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::x [b2Math.h <153:19 153:19>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::y [b2Math.h <153:29 153:29>]
REFERENCE_USAGE: void b2Vec3::SetZero() -> float32 b2Vec3::z [b2Math.h <153:39 153:39>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> void [b2Math.h <156:2 156:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:11 156:17>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:23 156:29>]
REFERENCE_TYPE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 [b2Math.h <156:35 156:41>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::x [b2Math.h <156:49 156:49>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::y [b2Math.h <156:57 156:57>]
REFERENCE_USAGE: void b2Vec3::Set(float32, float32, float32) -> float32 b2Vec3::z [b2Math.h <156:65 156:65>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Vec3::operator-() const -> b2Vec3 [b2Math.h <159:2 159:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Vec3::operator-() const -> b2Vec3 [b2Math.h <159:30 159:35>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::b2Vec3() [b2Math.h <159:37 159:37>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::Set(float32, float32, float32) [b2Math.h <159:42 159:44>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::x [b2Math.h <159:47 159:47>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::y [b2Math.h <159:51 159:51>]
REFERENCE_USAGE: b2Vec3 b2Vec3::operator-() const -> float32 b2Vec3::z [b2Math.h <159:55 159:55>]
REFERENCE_CALL: b2Vec3 b2Vec3::operator-() const -> void b2Vec3::b2Vec3(b2Vec3 &&) [b2Math.h <159:66 159:66>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> void [b2Math.h <162:2 162:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> b2Vec3 [b2Math.h <162:26 162:31>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <164:3 164:3>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <164:10 164:10>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <164:13 164:13>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <164:20 164:20>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <164:23 164:23>]
REFERENCE_USAGE: void b2Vec3::operator+=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <164:30 164:30>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> void [b2Math.h <168:2 168:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> b2Vec3 [b2Math.h <168:26 168:31>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <170:3 170:3>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <170:10 170:10>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <170:13 170:13>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <170:20 170:20>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <170:23 170:23>]
REFERENCE_USAGE: void b2Vec3::operator-=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <170:30 170:30>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator*=(float32) -> void [b2Math.h <174:2 174:5>]
REFERENCE_TYPE_USAGE: void b2Vec3::operator*=(float32) -> float32 [b2Math.h <174:20 174:26>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::x [b2Math.h <176:3 176:3>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::y [b2Math.h <176:11 176:11>]
REFERENCE_USAGE: void b2Vec3::operator*=(float32) -> float32 b2Vec3::z [b2Math.h <176:19 176:19>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::x -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::y -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_TYPE_USAGE: float32 b2Vec3::z -> float32 [b2Math.h <179:2 179:8>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::x [b2Math.h <144:8 144:13>]
REFERENCE_TYPE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> b2Vec3 [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::y [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Vec3::b2Vec3(b2Vec3 &&) -> float32 b2Vec3::z [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: b2Vec3 & b2Vec3::operator=(const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <144:8 144:13>]
REFERENCE_USAGE: void b2Mat22::b2Mat22() -> b2Vec2 b2Mat22::ex [b2Math.h <186:2 186:8>]
REFERENCE_CALL: void b2Mat22::b2Mat22() -> void b2Vec2::b2Vec2() [b2Math.h <186:2 186:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22() -> b2Vec2 b2Mat22::ey [b2Math.h <186:2 186:8>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <189:16 189:21>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <189:34 189:39>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <191:3 191:4>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2() [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <189:2 189:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <192:3 192:4>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <191:6 191:6>]
REFERENCE_CALL: void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <192:6 192:6>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:10 196:16>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:23 196:29>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:36 196:42>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 [b2Math.h <196:49 196:55>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <198:3 198:4>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ex [b2Math.h <198:15 198:16>]
REFERENCE_CALL: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> void b2Vec2::b2Vec2() [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <196:2 196:8>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <199:3 199:4>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> b2Vec2 b2Mat22::ey [b2Math.h <199:15 199:16>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::x [b2Math.h <198:6 198:6>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::x [b2Math.h <199:6 199:6>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::y [b2Math.h <198:18 198:18>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(float32, float32, float32, float32) -> float32 b2Vec2::y [b2Math.h <199:18 199:18>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> void [b2Math.h <203:2 203:5>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <203:17 203:22>]
REFERENCE_TYPE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <203:35 203:40>]
REFERENCE_CALL: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <205:6 205:6>]
REFERENCE_CALL: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <206:6 206:6>]
REFERENCE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <205:3 205:4>]
REFERENCE_USAGE: void b2Mat22::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <206:3 206:4>]
REFERENCE_TYPE_USAGE: void b2Mat22::SetIdentity() -> void [b2Math.h <210:2 210:5>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::x [b2Math.h <212:6 212:6>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::x [b2Math.h <212:19 212:19>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ex [b2Math.h <212:3 212:4>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ex [b2Math.h <213:3 213:4>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ey [b2Math.h <212:16 212:17>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> b2Vec2 b2Mat22::ey [b2Math.h <213:16 213:17>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::y [b2Math.h <213:6 213:6>]
REFERENCE_USAGE: void b2Mat22::SetIdentity() -> float32 b2Vec2::y [b2Math.h <213:19 213:19>]
REFERENCE_TYPE_USAGE: void b2Mat22::SetZero() -> void [b2Math.h <217:2 217:5>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::x [b2Math.h <219:6 219:6>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::x [b2Math.h <219:19 219:19>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ex [b2Math.h <219:3 219:4>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ex [b2Math.h <220:3 220:4>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ey [b2Math.h <219:16 219:17>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> b2Vec2 b2Mat22::ey [b2Math.h <220:16 220:17>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::y [b2Math.h <220:6 220:6>]
REFERENCE_USAGE: void b2Mat22::SetZero() -> float32 b2Vec2::y [b2Math.h <220:19 220:19>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Mat22 [b2Math.h <223:2 223:8>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Mat22 [b2Math.h <226:3 226:9>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 [b2Math.h <225:3 225:9>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 [b2Math.h <227:3 227:9>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <225:18 225:18>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <225:28 225:28>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <232:8 232:8>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::x [b2Math.h <232:27 232:27>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <225:15 225:16>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <225:35 225:36>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <232:5 232:6>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ex [b2Math.h <233:5 233:6>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <225:25 225:26>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <225:45 225:46>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <232:24 232:25>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> b2Vec2 b2Mat22::ey [b2Math.h <233:24 233:25>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <225:38 225:38>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <225:48 225:48>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <233:8 233:8>]
REFERENCE_USAGE: b2Mat22 b2Mat22::GetInverse() const -> float32 b2Vec2::y [b2Math.h <233:27 233:27>]
REFERENCE_CALL: b2Mat22 b2Mat22::GetInverse() const -> void b2Mat22::b2Mat22() [b2Math.h <226:11 226:11>]
REFERENCE_CALL: b2Mat22 b2Mat22::GetInverse() const -> void b2Mat22::b2Mat22(b2Mat22 &&) [b2Math.h <234:10 234:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <239:2 239:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <239:21 239:26>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 [b2Math.h <247:3 247:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 [b2Math.h <241:3 241:9>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 [b2Math.h <242:3 242:9>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <241:20 241:20>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <241:32 241:32>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <248:5 248:5>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <248:24 248:24>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::x [b2Math.h <249:36 249:36>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ex [b2Math.h <241:17 241:18>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ex [b2Math.h <241:41 241:42>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ey [b2Math.h <241:29 241:30>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> b2Vec2 b2Mat22::ey [b2Math.h <241:53 241:54>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <241:44 241:44>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <241:56 241:56>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <248:36 248:36>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <249:5 249:5>]
REFERENCE_USAGE: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> float32 b2Vec2::y [b2Math.h <249:24 249:24>]
REFERENCE_CALL: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> void b2Vec2::b2Vec2() [b2Math.h <247:10 247:10>]
REFERENCE_CALL: b2Vec2 b2Mat22::Solve(const b2Vec2 &) const -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <250:10 250:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::ex -> b2Vec2 [b2Math.h <253:2 253:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat22::ey -> b2Vec2 [b2Math.h <253:2 253:7>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Vec2 b2Mat22::ex [b2Math.h <183:8 183:14>]
REFERENCE_CALL: void b2Mat22::b2Mat22(b2Mat22 &&) -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <183:8 183:14>]
REFERENCE_TYPE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Mat22 [b2Math.h <183:8 183:14>]
REFERENCE_USAGE: void b2Mat22::b2Mat22(b2Mat22 &&) -> b2Vec2 b2Mat22::ey [b2Math.h <183:8 183:14>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ex [b2Math.h <260:2 260:8>]
REFERENCE_CALL: void b2Mat33::b2Mat33() -> void b2Vec3::b2Vec3() [b2Math.h <260:2 260:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ey [b2Math.h <260:2 260:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33() -> b2Vec3 b2Mat33::ez [b2Math.h <260:2 260:8>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:16 263:21>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:34 263:39>]
REFERENCE_TYPE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <263:52 263:57>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <265:3 265:4>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3() [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <266:3 266:4>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <263:2 263:8>]
REFERENCE_USAGE: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <267:3 267:4>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <265:6 265:6>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <266:6 266:6>]
REFERENCE_CALL: void b2Mat33::b2Mat33(const b2Vec3 &, const b2Vec3 &, const b2Vec3 &) -> b2Vec3 & b2Vec3::operator=(const b2Vec3 &) [b2Math.h <267:6 267:6>]
REFERENCE_TYPE_USAGE: void b2Mat33::SetZero() -> void [b2Math.h <271:2 271:5>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <273:6 273:12>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <274:6 274:12>]
REFERENCE_CALL: void b2Mat33::SetZero() -> void b2Vec3::SetZero() [b2Math.h <275:6 275:12>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ex [b2Math.h <273:3 273:4>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ey [b2Math.h <274:3 274:4>]
REFERENCE_USAGE: void b2Mat33::SetZero() -> b2Vec3 b2Mat33::ez [b2Math.h <275:3 275:4>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const -> b2Vec3 [b2Math.h <280:2 280:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::Solve33(const b2Vec3 &) const -> b2Vec3 [b2Math.h <280:23 280:28>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const -> b2Vec2 [b2Math.h <285:2 285:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mat33::Solve22(const b2Vec2 &) const -> b2Vec2 [b2Math.h <285:23 285:28>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetInverse22(b2Mat33 *) const -> void [b2Math.h <289:2 289:5>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetInverse22(b2Mat33 *) const -> b2Mat33 [b2Math.h <289:20 289:26>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetSymInverse33(b2Mat33 *) const -> void [b2Math.h <293:2 293:5>]
REFERENCE_TYPE_USAGE: void b2Mat33::GetSymInverse33(b2Mat33 *) const -> b2Mat33 [b2Math.h <293:23 293:29>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ex -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ey -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mat33::ez -> b2Vec3 [b2Math.h <295:2 295:7>]
REFERENCE_TYPE_USAGE: void b2Rot::b2Rot(float32) -> float32 [b2Math.h <304:17 304:23>]
REFERENCE_USAGE: void b2Rot::b2Rot(float32) -> float32 b2Rot::s [b2Math.h <307:3 307:3>]
REFERENCE_CALL: void b2Rot::b2Rot(float32) -> float sinf(float) [b2Math.h <307:7 307:10>]
REFERENCE_USAGE: void b2Rot::b2Rot(float32) -> float32 b2Rot::c [b2Math.h <308:3 308:3>]
REFERENCE_CALL: void b2Rot::b2Rot(float32) -> float cosf(float) [b2Math.h <308:7 308:10>]
REFERENCE_TYPE_USAGE: void b2Rot::Set(float32) -> void [b2Math.h <312:2 312:5>]
REFERENCE_TYPE_USAGE: void b2Rot::Set(float32) -> float32 [b2Math.h <312:11 312:17>]
REFERENCE_USAGE: void b2Rot::Set(float32) -> float32 b2Rot::s [b2Math.h <315:3 315:3>]
REFERENCE_CALL: void b2Rot::Set(float32) -> float sinf(float) [b2Math.h <315:7 315:10>]
REFERENCE_USAGE: void b2Rot::Set(float32) -> float32 b2Rot::c [b2Math.h <316:3 316:3>]
REFERENCE_CALL: void b2Rot::Set(float32) -> float cosf(float) [b2Math.h <316:7 316:10>]
REFERENCE_TYPE_USAGE: void b2Rot::SetIdentity() -> void [b2Math.h <320:2 320:5>]
REFERENCE_USAGE: void b2Rot::SetIdentity() -> float32 b2Rot::s [b2Math.h <322:3 322:3>]
REFERENCE_USAGE: void b2Rot::SetIdentity() -> float32 b2Rot::c [b2Math.h <323:3 323:3>]
REFERENCE_TYPE_USAGE: float32 b2Rot::GetAngle() const -> float32 [b2Math.h <327:2 327:8>]
REFERENCE_CALL: float32 b2Rot::GetAngle() const -> float atan2f(float, float) [b2Math.h <329:10 329:16>]
REFERENCE_USAGE: float32 b2Rot::GetAngle() const -> float32 b2Rot::s [b2Math.h <329:18 329:18>]
REFERENCE_USAGE: float32 b2Rot::GetAngle() const -> float32 b2Rot::c [b2Math.h <329:21 329:21>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> b2Vec2 [b2Math.h <333:2 333:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> b2Vec2 [b2Math.h <335:10 335:15>]
REFERENCE_CALL: b2Vec2 b2Rot::GetXAxis() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <335:10 335:15>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> float32 b2Rot::c [b2Math.h <335:17 335:17>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetXAxis() const -> float32 b2Rot::s [b2Math.h <335:20 335:20>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> b2Vec2 [b2Math.h <339:2 339:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> b2Vec2 [b2Math.h <341:10 341:15>]
REFERENCE_CALL: b2Vec2 b2Rot::GetYAxis() const -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <341:10 341:15>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> float32 b2Rot::s [b2Math.h <341:18 341:18>]
REFERENCE_USAGE: b2Vec2 b2Rot::GetYAxis() const -> float32 b2Rot::c [b2Math.h <341:21 341:21>]
REFERENCE_TYPE_USAGE: float32 b2Rot::s -> float32 [b2Math.h <345:2 345:8>]
REFERENCE_TYPE_USAGE: float32 b2Rot::c -> float32 [b2Math.h <345:2 345:8>]
REFERENCE_USAGE: void b2Rot::b2Rot(const b2Rot &) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(const b2Rot &) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_TYPE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> b2Rot [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Rot::b2Rot(b2Rot &&) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> float32 b2Rot::s [b2Math.h <299:8 299:12>]
REFERENCE_TYPE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> b2Rot [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: b2Rot & b2Rot::operator=(b2Rot &&) -> float32 b2Rot::c [b2Math.h <299:8 299:12>]
REFERENCE_USAGE: void b2Transform::b2Transform() -> b2Vec2 b2Transform::p [b2Math.h <353:2 353:12>]
REFERENCE_CALL: void b2Transform::b2Transform() -> void b2Vec2::b2Vec2() [b2Math.h <353:2 353:12>]
REFERENCE_USAGE: void b2Transform::b2Transform() -> b2Rot b2Transform::q [b2Math.h <353:2 353:12>]
REFERENCE_CALL: void b2Transform::b2Transform() -> void b2Rot::b2Rot() [b2Math.h <353:2 353:12>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Vec2 [b2Math.h <356:20 356:25>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Rot [b2Math.h <356:44 356:48>]
REFERENCE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Vec2 b2Transform::p [b2Math.h <356:63 356:63>]
REFERENCE_CALL: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Math.h <356:63 356:63>]
REFERENCE_USAGE: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> b2Rot b2Transform::q [b2Math.h <356:76 356:76>]
REFERENCE_CALL: void b2Transform::b2Transform(const b2Vec2 &, const b2Rot &) -> void b2Rot::b2Rot(const b2Rot &) [b2Math.h <356:76 356:76>]
REFERENCE_TYPE_USAGE: void b2Transform::SetIdentity() -> void [b2Math.h <359:2 359:5>]
REFERENCE_CALL: void b2Transform::SetIdentity() -> void b2Vec2::SetZero() [b2Math.h <361:5 361:11>]
REFERENCE_USAGE: void b2Transform::SetIdentity() -> b2Vec2 b2Transform::p [b2Math.h <361:3 361:3>]
REFERENCE_CALL: void b2Transform::SetIdentity() -> void b2Rot::SetIdentity() [b2Math.h <362:5 362:15>]
REFERENCE_USAGE: void b2Transform::SetIdentity() -> b2Rot b2Transform::q [b2Math.h <362:3 362:3>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> void [b2Math.h <366:2 366:5>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <366:17 366:22>]
REFERENCE_TYPE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> float32 [b2Math.h <366:35 366:41>]
REFERENCE_CALL: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <368:5 368:5>]
REFERENCE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Vec2 b2Transform::p [b2Math.h <368:3 368:3>]
REFERENCE_CALL: void b2Transform::Set(const b2Vec2 &, float32) -> void b2Rot::Set(float32) [b2Math.h <369:5 369:7>]
REFERENCE_USAGE: void b2Transform::Set(const b2Vec2 &, float32) -> b2Rot b2Transform::q [b2Math.h <369:3 369:3>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Transform::p -> b2Vec2 [b2Math.h <372:2 372:7>]
REFERENCE_TYPE_USAGE: b2Rot b2Transform::q -> b2Rot [b2Math.h <373:2 373:6>]
REFERENCE_USAGE: void b2Transform::b2Transform(const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <350:8 350:18>]
REFERENCE_CALL: void b2Transform::b2Transform(const b2Transform &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Math.h <350:8 350:18>]
REFERENCE_USAGE: void b2Transform::b2Transform(const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <350:8 350:18>]
REFERENCE_CALL: void b2Transform::b2Transform(const b2Transform &) -> void b2Rot::b2Rot(const b2Rot &) [b2Math.h <350:8 350:18>]
REFERENCE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Vec2 b2Transform::p [b2Math.h <350:8 350:18>]
REFERENCE_CALL: void b2Transform::b2Transform(b2Transform &&) -> void b2Vec2::b2Vec2(b2Vec2 &&) [b2Math.h <350:8 350:18>]
REFERENCE_TYPE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Transform [b2Math.h <350:8 350:18>]
REFERENCE_USAGE: void b2Transform::b2Transform(b2Transform &&) -> b2Rot b2Transform::q [b2Math.h <350:8 350:18>]
REFERENCE_CALL: void b2Transform::b2Transform(b2Transform &&) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <350:8 350:18>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> void [b2Math.h <384:2 384:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> void [b2Math.h <697:8 697:11>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Transform [b2Math.h <384:20 384:30>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Transform [b2Math.h <697:35 697:45>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <384:38 384:44>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <697:52 697:58>]
REFERENCE_TYPE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 [b2Math.h <700:2 700:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <388:2 388:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <707:8 707:11>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> void [b2Math.h <709:2 709:9>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <388:15 388:21>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <707:30 707:36>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> float32 [b2Math.h <710:2 710:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> void [b2Math.h <391:2 391:5>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> void [b2Math.h <717:8 717:11>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::localCenter -> b2Vec2 [b2Math.h <393:2 393:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::c0 -> b2Vec2 [b2Math.h <394:2 394:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Sweep::c -> b2Vec2 [b2Math.h <394:2 394:7>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::a0 -> float32 [b2Math.h <395:2 395:8>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::a -> float32 [b2Math.h <395:2 395:8>]
REFERENCE_TYPE_USAGE: float32 b2Sweep::alpha0 -> float32 [b2Math.h <399:2 399:8>]
REFERENCE_USAGE: void b2Sweep::b2Sweep(const b2Sweep &) -> b2Vec2 b2Sweep::localCenter [b2Math.h <380:8 380:14>]
REFERENCE_CALL: void b2Sweep::b2Sweep(const b2Sweep &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: void b2Sweep::b2Sweep(const b2Sweep &) -> b2Vec2 b2Sweep::c0 [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: void b2Sweep::b2Sweep(const b2Sweep &) -> b2Vec2 b2Sweep::c [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: void b2Sweep::b2Sweep(const b2Sweep &) -> float32 b2Sweep::a0 [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: void b2Sweep::b2Sweep(const b2Sweep &) -> float32 b2Sweep::a [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: void b2Sweep::b2Sweep(const b2Sweep &) -> float32 b2Sweep::alpha0 [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: void b2Sweep::b2Sweep() -> b2Vec2 b2Sweep::localCenter [b2Math.h <380:8 380:14>]
REFERENCE_CALL: void b2Sweep::b2Sweep() -> void b2Vec2::b2Vec2() [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: void b2Sweep::b2Sweep() -> b2Vec2 b2Sweep::c0 [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: void b2Sweep::b2Sweep() -> b2Vec2 b2Sweep::c [b2Math.h <380:8 380:14>]
REFERENCE_CALL: b2Sweep & b2Sweep::operator=(const b2Sweep &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: b2Sweep & b2Sweep::operator=(const b2Sweep &) -> b2Vec2 b2Sweep::localCenter [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: b2Sweep & b2Sweep::operator=(const b2Sweep &) -> b2Vec2 b2Sweep::c0 [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: b2Sweep & b2Sweep::operator=(const b2Sweep &) -> b2Vec2 b2Sweep::c [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: b2Sweep & b2Sweep::operator=(const b2Sweep &) -> float32 b2Sweep::a0 [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: b2Sweep & b2Sweep::operator=(const b2Sweep &) -> float32 b2Sweep::a [b2Math.h <380:8 380:14>]
REFERENCE_USAGE: b2Sweep & b2Sweep::operator=(const b2Sweep &) -> float32 b2Sweep::alpha0 [b2Math.h <380:8 380:14>]
REFERENCE_TYPE_USAGE: const b2Vec2 b2Vec2_zero -> b2Vec2 [b2Math.h <403:14 403:19>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <406:8 406:14>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <406:28 406:33>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <406:45 406:50>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <408:11 408:11>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <408:17 408:17>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <408:23 408:23>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <408:29 408:29>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <412:8 412:14>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <412:30 412:35>]
REFERENCE_TYPE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <412:47 412:52>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <414:11 414:11>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <414:29 414:29>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <414:17 414:17>]
REFERENCE_USAGE: float32 b2Cross(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <414:23 414:23>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <419:8 419:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <419:29 419:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> b2Vec2 [b2Math.h <421:9 421:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 [b2Math.h <419:40 419:46>]
REFERENCE_CALL: b2Vec2 b2Cross(const b2Vec2 &, float32) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <421:9 421:14>]
REFERENCE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 b2Vec2::y [b2Math.h <421:22 421:22>]
REFERENCE_USAGE: b2Vec2 b2Cross(const b2Vec2 &, float32) -> float32 b2Vec2::x [b2Math.h <421:32 421:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <426:8 426:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <426:40 426:45>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <428:9 428:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 [b2Math.h <426:23 426:29>]
REFERENCE_CALL: b2Vec2 b2Cross(float32, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <428:9 428:14>]
REFERENCE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <428:23 428:23>]
REFERENCE_USAGE: b2Vec2 b2Cross(float32, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <428:32 428:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <433:8 433:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <433:45 433:50>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <435:9 435:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Mat22 [b2Math.h <433:27 433:33>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <435:9 435:14>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:21 435:21>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:27 435:27>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:36 435:36>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <435:56 435:56>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <435:18 435:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <435:47 435:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <435:33 435:34>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <435:62 435:63>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:42 435:42>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:50 435:50>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:65 435:65>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <435:71 435:71>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <440:8 440:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <440:46 440:51>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <442:9 442:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Mat22 [b2Math.h <440:28 440:34>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <442:9 442:14>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <442:16 442:20>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <442:32 442:36>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ex [b2Math.h <442:27 442:28>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Mat22 &, const b2Vec2 &) -> b2Vec2 b2Mat22::ey [b2Math.h <442:43 442:44>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:8 446:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:33 446:38>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <446:50 446:55>]
REFERENCE_TYPE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <448:9 448:14>]
REFERENCE_CALL: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <448:9 448:14>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <448:18 448:18>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <448:24 448:24>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <448:29 448:29>]
REFERENCE_USAGE: b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <448:35 448:35>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:8 452:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:33 452:38>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <452:50 452:55>]
REFERENCE_TYPE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <454:9 454:14>]
REFERENCE_CALL: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <454:9 454:14>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <454:18 454:18>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <454:24 454:24>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <454:29 454:29>]
REFERENCE_USAGE: b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <454:35 454:35>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <457:8 457:13>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <457:44 457:49>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> b2Vec2 [b2Math.h <459:9 459:14>]
REFERENCE_TYPE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 [b2Math.h <457:27 457:33>]
REFERENCE_CALL: b2Vec2 operator*(float32, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <459:9 459:14>]
REFERENCE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <459:22 459:22>]
REFERENCE_USAGE: b2Vec2 operator*(float32, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <459:31 459:31>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> bool [b2Math.h <462:8 462:11>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <462:32 462:37>]
REFERENCE_TYPE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <462:49 462:54>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <464:11 464:11>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <464:18 464:18>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <464:25 464:25>]
REFERENCE_USAGE: bool operator==(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <464:32 464:32>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> bool [b2Math.h <467:8 467:11>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <467:32 467:37>]
REFERENCE_TYPE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <467:49 467:54>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <469:11 469:11>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <469:18 469:18>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <469:25 469:25>]
REFERENCE_USAGE: bool operator!=(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <469:32 469:32>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <472:8 472:14>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <472:33 472:38>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <472:50 472:55>]
REFERENCE_TYPE_USAGE: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <474:2 474:7>]
REFERENCE_CALL: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <474:15 474:15>]
REFERENCE_CALL: float32 b2Distance(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::Length() const [b2Math.h <475:11 475:16>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> float32 [b2Math.h <478:8 478:14>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <478:40 478:45>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <478:57 478:62>]
REFERENCE_TYPE_USAGE: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <480:2 480:7>]
REFERENCE_CALL: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <480:15 480:15>]
REFERENCE_CALL: float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <481:9 481:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <484:8 484:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <484:44 484:49>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> b2Vec3 [b2Math.h <486:9 486:14>]
REFERENCE_TYPE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 [b2Math.h <484:27 484:33>]
REFERENCE_CALL: b2Vec3 operator*(float32, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <486:9 486:14>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <486:22 486:22>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <486:31 486:31>]
REFERENCE_USAGE: b2Vec3 operator*(float32, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <486:40 486:40>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:8 490:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:33 490:38>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <490:50 490:55>]
REFERENCE_TYPE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <492:9 492:14>]
REFERENCE_CALL: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <492:9 492:14>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <492:18 492:18>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <492:24 492:24>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <492:29 492:29>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <492:35 492:35>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <492:40 492:40>]
REFERENCE_USAGE: b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <492:46 492:46>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:8 496:13>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:33 496:38>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <496:50 496:55>]
REFERENCE_TYPE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <498:9 498:14>]
REFERENCE_CALL: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <498:9 498:14>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <498:18 498:18>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <498:24 498:24>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <498:29 498:29>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <498:35 498:35>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <498:40 498:40>]
REFERENCE_USAGE: b2Vec3 operator-(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <498:46 498:46>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 [b2Math.h <502:8 502:14>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <502:28 502:33>]
REFERENCE_TYPE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <502:45 502:50>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <504:11 504:11>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <504:17 504:17>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <504:23 504:23>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <504:29 504:29>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <504:35 504:35>]
REFERENCE_USAGE: float32 b2Dot(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <504:41 504:41>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:8 508:13>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:29 508:34>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <508:46 508:51>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <510:9 510:14>]
REFERENCE_CALL: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> void b2Vec3::b2Vec3(float32, float32, float32) [b2Math.h <510:9 510:14>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:18 510:18>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:36 510:36>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:70 510:70>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <510:76 510:76>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:24 510:24>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:30 510:30>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:41 510:41>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <510:59 510:59>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:47 510:47>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:53 510:53>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:64 510:64>]
REFERENCE_USAGE: b2Vec3 b2Cross(const b2Vec3 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <510:82 510:82>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:8 513:14>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:34 513:40>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <513:52 513:58>]
REFERENCE_TYPE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <515:9 515:15>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:9 515:15>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:22 515:22>]
REFERENCE_CALL: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <515:35 515:35>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <515:19 515:20>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <515:26 515:27>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <515:32 515:33>]
REFERENCE_USAGE: b2Mat22 operator+(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <515:39 515:40>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:8 519:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:28 519:34>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <519:46 519:52>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <521:9 521:15>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <521:9 521:15>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <521:17 521:21>]
REFERENCE_CALL: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2Math.h <521:33 521:37>]
REFERENCE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <521:28 521:29>]
REFERENCE_USAGE: b2Mat22 b2Mul(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <521:44 521:45>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:8 525:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:29 525:35>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <525:47 525:53>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Mat22 [b2Math.h <529:9 529:15>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 [b2Math.h <527:2 527:7>]
REFERENCE_TYPE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 [b2Math.h <528:2 528:7>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <527:9 527:10>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <528:9 528:10>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <527:12 527:16>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <527:31 527:35>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <528:12 528:16>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Math.h <528:31 528:35>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:20 527:21>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:26 527:27>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <527:45 527:46>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <528:20 528:21>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <527:39 527:40>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:26 528:27>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:39 528:40>]
REFERENCE_USAGE: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <528:45 528:46>]
REFERENCE_CALL: b2Mat22 b2MulT(const b2Mat22 &, const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <529:9 529:15>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <533:8 533:13>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 [b2Math.h <533:45 533:50>]
REFERENCE_TYPE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Mat33 [b2Math.h <533:27 533:33>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <535:20 535:20>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator+(const b2Vec3 &, const b2Vec3 &) [b2Math.h <535:33 535:33>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:13 535:13>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:26 535:26>]
REFERENCE_CALL: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 operator*(float32, const b2Vec3 &) [b2Math.h <535:39 535:39>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::x [b2Math.h <535:11 535:11>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ex [b2Math.h <535:17 535:18>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::y [b2Math.h <535:24 535:24>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ey [b2Math.h <535:30 535:31>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> float32 b2Vec3::z [b2Math.h <535:37 535:37>]
REFERENCE_USAGE: b2Vec3 b2Mul(const b2Mat33 &, const b2Vec3 &) -> b2Vec3 b2Mat33::ez [b2Math.h <535:43 535:44>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <539:8 539:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <539:47 539:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <541:9 541:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Mat33 [b2Math.h <539:29 539:35>]
REFERENCE_CALL: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <541:9 541:14>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::x [b2Math.h <541:21 541:21>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::x [b2Math.h <541:36 541:36>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ex [b2Math.h <541:18 541:19>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ex [b2Math.h <541:47 541:48>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <541:27 541:27>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <541:56 541:56>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ey [b2Math.h <541:33 541:34>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> b2Vec3 b2Mat33::ey [b2Math.h <541:62 541:63>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <541:42 541:42>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <541:71 541:71>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::y [b2Math.h <541:50 541:50>]
REFERENCE_USAGE: b2Vec2 b2Mul22(const b2Mat33 &, const b2Vec2 &) -> float32 b2Vec3::y [b2Math.h <541:65 541:65>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:8 545:12>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:26 545:30>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <545:42 545:46>]
REFERENCE_TYPE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <551:2 551:6>]
REFERENCE_CALL: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot() [b2Math.h <551:8 551:9>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:5 552:5>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:11 552:11>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <552:29 552:29>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <553:23 553:23>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <553:29 553:29>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <552:17 552:17>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <552:23 552:23>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:5 553:5>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:11 553:11>]
REFERENCE_USAGE: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <553:17 553:17>]
REFERENCE_CALL: b2Rot b2Mul(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <554:9 554:10>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:8 558:12>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:27 558:31>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <558:43 558:47>]
REFERENCE_TYPE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> b2Rot [b2Math.h <564:2 564:6>]
REFERENCE_CALL: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot() [b2Math.h <564:8 564:9>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:5 565:5>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:17 565:17>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <565:23 565:23>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <566:23 566:23>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::s [b2Math.h <566:29 566:29>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <565:11 565:11>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <565:29 565:29>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:5 566:5>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:11 566:11>]
REFERENCE_USAGE: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> float32 b2Rot::c [b2Math.h <566:17 566:17>]
REFERENCE_CALL: b2Rot b2MulT(const b2Rot &, const b2Rot &) -> void b2Rot::b2Rot(b2Rot &&) [b2Math.h <567:9 567:10>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <571:8 571:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <571:43 571:48>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <573:9 573:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> b2Rot [b2Math.h <571:27 571:31>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <573:9 573:14>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <573:18 573:18>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <573:53 573:53>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <573:24 573:24>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <573:47 573:47>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <573:30 573:30>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <573:41 573:41>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <573:36 573:36>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <573:59 573:59>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <577:8 577:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <577:44 577:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Vec2 [b2Math.h <579:9 579:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> b2Rot [b2Math.h <577:28 577:32>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <579:9 579:14>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <579:18 579:18>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <579:54 579:54>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <579:24 579:24>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <579:48 579:48>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <579:30 579:30>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <579:42 579:42>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <579:36 579:36>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <579:60 579:60>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <582:8 582:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <582:49 582:54>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <587:9 587:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Transform [b2Math.h <582:27 582:37>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <584:2 584:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <585:2 585:8>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <584:19 584:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <585:33 585:33>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <584:17 584:17>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <584:31 584:31>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <585:17 585:17>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <585:31 585:31>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <584:25 584:25>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <584:48 584:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <585:25 585:25>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <584:33 584:33>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <585:19 585:19>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <584:39 584:39>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <585:39 585:39>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <585:48 585:48>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <584:46 584:46>]
REFERENCE_USAGE: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <585:46 585:46>]
REFERENCE_CALL: b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <587:9 587:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <590:8 590:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <590:50 590:55>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 [b2Math.h <597:9 597:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Transform [b2Math.h <590:28 590:38>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <592:2 592:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <593:2 593:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <594:2 594:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 [b2Math.h <595:2 595:8>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <592:17 592:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <592:25 592:25>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <592:23 592:23>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Vec2 b2Transform::p [b2Math.h <593:23 593:23>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <593:17 593:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <593:25 593:25>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <594:19 594:19>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::c [b2Math.h <595:33 595:33>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <594:17 594:17>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <594:30 594:30>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <595:18 595:18>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> b2Rot b2Transform::q [b2Math.h <595:31 595:31>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <594:32 594:32>]
REFERENCE_USAGE: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> float32 b2Rot::s [b2Math.h <595:20 595:20>]
REFERENCE_CALL: b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <597:9 597:14>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:8 602:18>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:32 602:42>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <602:54 602:64>]
REFERENCE_TYPE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <604:2 604:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform() [b2Math.h <604:14 604:14>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <605:6 605:6>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:4 605:4>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:16 605:16>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <605:21 605:21>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <606:16 606:16>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Rot b2Mul(const b2Rot &, const b2Rot &) [b2Math.h <605:8 605:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <606:6 606:6>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:4 606:4>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:21 606:21>]
REFERENCE_USAGE: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <606:28 606:28>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <606:24 606:24>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <606:8 606:12>]
REFERENCE_CALL: b2Transform b2Mul(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform(b2Transform &&) [b2Math.h <607:9 607:9>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:8 612:18>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:33 612:43>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <612:55 612:65>]
REFERENCE_TYPE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Transform [b2Math.h <614:2 614:12>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform() [b2Math.h <614:14 614:14>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot & b2Rot::operator=(b2Rot &&) [b2Math.h <615:6 615:6>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:4 615:4>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:17 615:17>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <615:22 615:22>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2Transform::q [b2Math.h <616:17 616:17>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Rot b2MulT(const b2Rot &, const b2Rot &) [b2Math.h <615:8 615:13>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <616:6 616:6>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:4 616:4>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:22 616:22>]
REFERENCE_USAGE: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2Transform::p [b2Math.h <616:28 616:28>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2Math.h <616:8 616:13>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <616:24 616:24>]
REFERENCE_CALL: b2Transform b2MulT(const b2Transform &, const b2Transform &) -> void b2Transform::b2Transform(b2Transform &&) [b2Math.h <617:9 617:9>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Abs<float>(float) -> T b2Abs<typename T>(T) [b2Math.h <621:10 621:14>]
REFERENCE_TYPE_USAGE: float b2Abs<float>(float) -> float [b2Math.h <621:8 621:8>]
REFERENCE_TYPE_USAGE: float b2Abs<float>(float) -> float [b2Math.h <621:16 621:16>]
REFERENCE_TYPE_USAGE: float b2Abs<float>(float) -> float [b2Math.h <623:13 623:13>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Abs<b2Vec2>(b2Vec2) -> T b2Abs<typename T>(T) [b2Math.h <621:10 621:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs<b2Vec2>(b2Vec2) -> b2Vec2 [b2Math.h <621:8 621:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs<b2Vec2>(b2Vec2) -> b2Vec2 [b2Math.h <621:16 621:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <626:8 626:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <626:27 626:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> b2Vec2 [b2Math.h <628:9 628:14>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <628:9 628:14>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> float b2Abs<float>(float) [b2Math.h <628:16 628:20>]
REFERENCE_CALL: b2Vec2 b2Abs(const b2Vec2 &) -> float b2Abs<float>(float) [b2Math.h <628:28 628:32>]
REFERENCE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <628:24 628:24>]
REFERENCE_USAGE: b2Vec2 b2Abs(const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <628:36 628:36>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <631:8 631:14>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <631:28 631:34>]
REFERENCE_TYPE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Mat22 [b2Math.h <633:9 633:15>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> void b2Mat22::b2Mat22(const b2Vec2 &, const b2Vec2 &) [b2Math.h <633:9 633:15>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <633:17 633:21>]
REFERENCE_CALL: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Abs(const b2Vec2 &) [b2Math.h <633:30 633:34>]
REFERENCE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Mat22::ex [b2Math.h <633:25 633:26>]
REFERENCE_USAGE: b2Mat22 b2Abs(const b2Mat22 &) -> b2Vec2 b2Mat22::ey [b2Math.h <633:38 633:39>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Min<float>(float, float) -> T b2Min<typename T>(T, T) [b2Math.h <637:10 637:14>]
REFERENCE_TYPE_USAGE: float b2Min<float>(float, float) -> float [b2Math.h <637:8 637:8>]
REFERENCE_TYPE_USAGE: float b2Min<float>(float, float) -> float [b2Math.h <637:16 637:16>]
REFERENCE_TYPE_USAGE: float b2Min<float>(float, float) -> float [b2Math.h <637:21 637:21>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> T b2Min<typename T>(T, T) [b2Math.h <637:10 637:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <637:8 637:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <637:16 637:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <637:21 637:21>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:8 642:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:27 642:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <642:44 642:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <644:9 644:14>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <644:9 644:14>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float b2Min<float>(float, float) [b2Math.h <644:16 644:20>]
REFERENCE_CALL: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float b2Min<float>(float, float) [b2Math.h <644:33 644:37>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <644:24 644:24>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <644:29 644:29>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <644:41 644:41>]
REFERENCE_USAGE: b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <644:46 644:46>]
REFERENCE_TEMPLATE_SPECIALIZATION: float b2Max<float>(float, float) -> T b2Max<typename T>(T, T) [b2Math.h <648:10 648:14>]
REFERENCE_TYPE_USAGE: float b2Max<float>(float, float) -> float [b2Math.h <648:8 648:8>]
REFERENCE_TYPE_USAGE: float b2Max<float>(float, float) -> float [b2Math.h <648:16 648:16>]
REFERENCE_TYPE_USAGE: float b2Max<float>(float, float) -> float [b2Math.h <648:21 648:21>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> T b2Max<typename T>(T, T) [b2Math.h <648:10 648:14>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <648:8 648:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <648:16 648:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max<b2Vec2>(b2Vec2, b2Vec2) -> b2Vec2 [b2Math.h <648:21 648:21>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:8 653:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:27 653:32>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <653:44 653:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <655:9 655:14>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> void b2Vec2::b2Vec2(float32, float32) [b2Math.h <655:9 655:14>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float b2Max<float>(float, float) [b2Math.h <655:16 655:20>]
REFERENCE_CALL: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float b2Max<float>(float, float) [b2Math.h <655:33 655:37>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <655:24 655:24>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::x [b2Math.h <655:29 655:29>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <655:41 655:41>]
REFERENCE_USAGE: b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) -> float32 b2Vec2::y [b2Math.h <655:46 655:46>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:8 664:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:29 664:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:46 664:51>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2Math.h <664:65 664:70>]
REFERENCE_CALL: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Math.h <666:9 666:13>]
REFERENCE_CALL: b2Vec2 b2Clamp(const b2Vec2 &, const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Math.h <666:20 666:24>]
REFERENCE_TYPE_USAGE: void b2Swap<typename T>(T &, T &) -> void [b2Math.h <669:29 669:32>]
REFERENCE_TYPE_USAGE: uint32 b2NextPowerOfTwo(uint32) -> uint32 [b2Math.h <681:8 681:13>]
REFERENCE_TYPE_USAGE: uint32 b2NextPowerOfTwo(uint32) -> uint32 [b2Math.h <681:32 681:37>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> bool [b2Math.h <691:8 691:11>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> bool [b2Math.h <693:2 693:5>]
REFERENCE_TYPE_USAGE: bool b2IsPowerOfTwo(uint32) -> uint32 [b2Math.h <691:28 691:33>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Math.h <699:8 699:8>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Transform::p [b2Math.h <699:6 699:6>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Transform::p [b2Math.h <704:6 704:6>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Math.h <699:29 699:29>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <699:24 699:24>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <699:36 699:36>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::c0 [b2Math.h <699:26 699:27>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::c [b2Math.h <699:38 699:38>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 b2Sweep::a0 [b2Math.h <700:34 700:35>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> float32 b2Sweep::a [b2Math.h <700:46 700:46>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> void b2Rot::Set(float32) [b2Math.h <701:8 701:10>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Rot b2Transform::q [b2Math.h <701:6 701:6>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Rot b2Transform::q [b2Math.h <704:21 704:21>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> void b2Vec2::operator-=(const b2Vec2 &) [b2Math.h <704:8 704:9>]
REFERENCE_CALL: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Math.h <704:11 704:15>]
REFERENCE_USAGE: void b2Sweep::GetTransform(b2Transform *, float32) const -> b2Vec2 b2Sweep::localCenter [b2Math.h <704:24 704:34>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <709:11 709:16>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <710:26 710:31>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <710:44 710:49>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::alpha0 [b2Math.h <713:2 713:7>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Math.h <709:2 709:9>]
REFERENCE_TYPE_USAGE: void b2Sweep::Advance(float32) -> unsigned int [b2Math.h <709:2 709:9>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Math.h <711:5 711:6>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c0 [b2Math.h <711:2 711:3>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c0 [b2Math.h <711:20 711:21>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Math.h <711:13 711:13>]
REFERENCE_CALL: void b2Sweep::Advance(float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Math.h <711:18 711:18>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> b2Vec2 b2Sweep::c [b2Math.h <711:16 711:16>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a0 [b2Math.h <712:2 712:3>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a0 [b2Math.h <712:20 712:21>]
REFERENCE_USAGE: void b2Sweep::Advance(float32) -> float32 b2Sweep::a [b2Math.h <712:16 712:16>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> float32 [b2Math.h <719:2 719:8>]
REFERENCE_TYPE_USAGE: void b2Sweep::Normalize() -> float32 [b2Math.h <720:2 720:8>]
REFERENCE_CALL: void b2Sweep::Normalize() -> float floorf(float) [b2Math.h <720:23 720:28>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a0 [b2Math.h <720:30 720:31>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a0 [b2Math.h <721:2 721:3>]
REFERENCE_USAGE: void b2Sweep::Normalize() -> float32 b2Sweep::a [b2Math.h <722:2 722:2>]
REFERENCE_TYPE_USAGE: const int32 b2_chunkSize -> int32 [b2BlockAllocator.h <24:7 24:11>]
REFERENCE_TYPE_USAGE: const int32 b2_maxBlockSize -> int32 [b2BlockAllocator.h <25:7 25:11>]
REFERENCE_TYPE_USAGE: const int32 b2_blockSizes -> int32 [b2BlockAllocator.h <26:7 26:11>]
REFERENCE_TYPE_USAGE: const int32 b2_chunkArrayIncrement -> int32 [b2BlockAllocator.h <27:7 27:11>]
REFERENCE_TYPE_USAGE: void * b2BlockAllocator::Allocate(int32) -> void [b2BlockAllocator.h <42:2 42:5>]
REFERENCE_TYPE_USAGE: void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.h <42:17 42:21>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.h <45:2 45:5>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.h <45:12 45:15>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Free(void *, int32) -> int32 [b2BlockAllocator.h <45:21 45:25>]
REFERENCE_TYPE_USAGE: void b2BlockAllocator::Clear() -> void [b2BlockAllocator.h <47:2 47:5>]
REFERENCE_TYPE_USAGE: b2Chunk * b2BlockAllocator::m_chunks -> b2Chunk [b2BlockAllocator.h <51:2 51:8>]
REFERENCE_TYPE_USAGE: int32 b2BlockAllocator::m_chunkCount -> int32 [b2BlockAllocator.h <52:2 52:6>]
REFERENCE_TYPE_USAGE: int32 b2BlockAllocator::m_chunkSpace -> int32 [b2BlockAllocator.h <53:2 53:6>]
REFERENCE_TYPE_USAGE: b2Block * [] b2BlockAllocator::m_freeLists -> b2Block [b2BlockAllocator.h <55:2 55:8>]
REFERENCE_USAGE: b2Block * [] b2BlockAllocator::m_freeLists -> const int32 b2_blockSizes [b2BlockAllocator.h <55:23 55:35>]
REFERENCE_TYPE_USAGE: static int32 [] b2BlockAllocator::s_blockSizes -> int32 [b2BlockAllocator.h <57:9 57:13>]
REFERENCE_USAGE: static int32 [] b2BlockAllocator::s_blockSizes -> const int32 b2_blockSizes [b2BlockAllocator.h <57:28 57:40>]
REFERENCE_TYPE_USAGE: static uint8 [] b2BlockAllocator::s_blockSizeLookup -> uint8 [b2BlockAllocator.h <58:9 58:13>]
REFERENCE_USAGE: static uint8 [] b2BlockAllocator::s_blockSizeLookup -> const int32 b2_maxBlockSize [b2BlockAllocator.h <58:33 58:47>]
REFERENCE_TYPE_USAGE: static bool b2BlockAllocator::s_blockSizeLookupInitialized -> bool [b2BlockAllocator.h <59:9 59:12>]
REFERENCE_TYPE_USAGE: const int32 b2_stackSize -> int32 [b2StackAllocator.h <24:7 24:11>]
REFERENCE_TYPE_USAGE: const int32 b2_maxStackEntries -> int32 [b2StackAllocator.h <25:7 25:11>]
REFERENCE_TYPE_USAGE: char * b2StackEntry::data -> char [b2StackAllocator.h <29:2 29:5>]
REFERENCE_TYPE_USAGE: int32 b2StackEntry::size -> int32 [b2StackAllocator.h <30:2 30:6>]
REFERENCE_TYPE_USAGE: bool b2StackEntry::usedMalloc -> bool [b2StackAllocator.h <31:2 31:5>]
REFERENCE_TYPE_USAGE: void * b2StackAllocator::Allocate(int32) -> void [b2StackAllocator.h <43:2 43:5>]
REFERENCE_TYPE_USAGE: void * b2StackAllocator::Allocate(int32) -> int32 [b2StackAllocator.h <43:17 43:21>]
REFERENCE_TYPE_USAGE: void b2StackAllocator::Free(void *) -> void [b2StackAllocator.h <44:2 44:5>]
REFERENCE_TYPE_USAGE: void b2StackAllocator::Free(void *) -> void [b2StackAllocator.h <44:12 44:15>]
REFERENCE_TYPE_USAGE: int32 b2StackAllocator::GetMaxAllocation() const -> int32 [b2StackAllocator.h <46:2 46:6>]
REFERENCE_TYPE_USAGE: char [] b2StackAllocator::m_data -> char [b2StackAllocator.h <50:2 50:5>]
REFERENCE_USAGE: char [] b2StackAllocator::m_data -> const int32 b2_stackSize [b2StackAllocator.h <50:14 50:25>]
REFERENCE_TYPE_USAGE: int32 b2StackAllocator::m_index -> int32 [b2StackAllocator.h <51:2 51:6>]
REFERENCE_TYPE_USAGE: int32 b2StackAllocator::m_allocation -> int32 [b2StackAllocator.h <53:2 53:6>]
REFERENCE_TYPE_USAGE: int32 b2StackAllocator::m_maxAllocation -> int32 [b2StackAllocator.h <54:2 54:6>]
REFERENCE_TYPE_USAGE: b2StackEntry [] b2StackAllocator::m_entries -> b2StackEntry [b2StackAllocator.h <56:2 56:13>]
REFERENCE_USAGE: b2StackEntry [] b2StackAllocator::m_entries -> const int32 b2_maxStackEntries [b2StackAllocator.h <56:25 56:42>]
REFERENCE_TYPE_USAGE: int32 b2StackAllocator::m_entryCount -> int32 [b2StackAllocator.h <57:2 57:6>]
REFERENCE_TYPE_USAGE: const uint8 b2_nullFeature -> uint8 [b2Collision.h <34:7 34:11>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::indexA -> uint8 [b2Collision.h <46:2 46:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::indexB -> uint8 [b2Collision.h <47:2 47:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::typeA -> uint8 [b2Collision.h <48:2 48:6>]
REFERENCE_TYPE_USAGE: uint8 b2ContactFeature::typeB -> uint8 [b2Collision.h <49:2 49:6>]
REFERENCE_TYPE_USAGE: b2ContactFeature b2ContactID::cf -> b2ContactFeature [b2Collision.h <55:2 55:17>]
REFERENCE_TYPE_USAGE: uint32 b2ContactID::key -> uint32 [b2Collision.h <56:2 56:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ManifoldPoint::localPoint -> b2Vec2 [b2Collision.h <71:2 71:7>]
REFERENCE_TYPE_USAGE: float32 b2ManifoldPoint::normalImpulse -> float32 [b2Collision.h <72:2 72:8>]
REFERENCE_TYPE_USAGE: float32 b2ManifoldPoint::tangentImpulse -> float32 [b2Collision.h <73:2 73:8>]
REFERENCE_TYPE_USAGE: b2ContactID b2ManifoldPoint::id -> b2ContactID [b2Collision.h <74:2 74:12>]
REFERENCE_USAGE: void b2ManifoldPoint::b2ManifoldPoint() -> b2Vec2 b2ManifoldPoint::localPoint [b2Collision.h <69:8 69:22>]
REFERENCE_CALL: void b2ManifoldPoint::b2ManifoldPoint() -> void b2Vec2::b2Vec2() [b2Collision.h <69:8 69:22>]
REFERENCE_USAGE: void b2ManifoldPoint::b2ManifoldPoint() -> b2ContactID b2ManifoldPoint::id [b2Collision.h <69:8 69:22>]
REFERENCE_CALL: void b2ManifoldPoint::b2ManifoldPoint() -> void b2ContactID::b2ContactID() [b2Collision.h <69:8 69:22>]
REFERENCE_TYPE_USAGE: b2ManifoldPoint [] b2Manifold::points -> b2ManifoldPoint [b2Collision.h <102:2 102:16>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Manifold::localNormal -> b2Vec2 [b2Collision.h <103:2 103:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Manifold::localPoint -> b2Vec2 [b2Collision.h <104:2 104:7>]
REFERENCE_TYPE_USAGE: b2Manifold::Type b2Manifold::type -> b2Manifold::Type [b2Collision.h <105:2 105:5>]
REFERENCE_TYPE_USAGE: int32 b2Manifold::pointCount -> int32 [b2Collision.h <106:2 106:6>]
REFERENCE_USAGE: void b2Manifold::b2Manifold() -> b2ManifoldPoint [] b2Manifold::points [b2Collision.h <93:8 93:17>]
REFERENCE_CALL: void b2Manifold::b2Manifold() -> void b2ManifoldPoint::b2ManifoldPoint() [b2Collision.h <93:8 93:17>]
REFERENCE_USAGE: void b2Manifold::b2Manifold() -> b2Vec2 b2Manifold::localNormal [b2Collision.h <93:8 93:17>]
REFERENCE_CALL: void b2Manifold::b2Manifold() -> void b2Vec2::b2Vec2() [b2Collision.h <93:8 93:17>]
REFERENCE_USAGE: void b2Manifold::b2Manifold() -> b2Vec2 b2Manifold::localPoint [b2Collision.h <93:8 93:17>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> void [b2Collision.h <116:2 116:5>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Manifold [b2Collision.h <116:24 116:33>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Transform [b2Collision.h <117:12 117:22>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Transform [b2Collision.h <118:12 118:22>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [b2Collision.h <117:30 117:36>]
REFERENCE_TYPE_USAGE: void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [b2Collision.h <118:30 118:36>]
REFERENCE_TYPE_USAGE: b2Vec2 b2WorldManifold::normal -> b2Vec2 [b2Collision.h <120:2 120:7>]
REFERENCE_TYPE_USAGE: b2Vec2 [] b2WorldManifold::points -> b2Vec2 [b2Collision.h <121:2 121:7>]
REFERENCE_TYPE_USAGE: float32 [] b2WorldManifold::separations -> float32 [b2Collision.h <122:2 122:8>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> void [b2Collision.h <136:1 136:4>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState [b2Collision.h <136:23 136:34>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState [b2Collision.h <136:66 136:77>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2Manifold [b2Collision.h <137:14 137:23>]
REFERENCE_TYPE_USAGE: void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2Manifold [b2Collision.h <137:43 137:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ClipVertex::v -> b2Vec2 [b2Collision.h <142:2 142:7>]
REFERENCE_TYPE_USAGE: b2ContactID b2ClipVertex::id -> b2ContactID [b2Collision.h <143:2 143:12>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastInput::p1 -> b2Vec2 [b2Collision.h <149:2 149:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastInput::p2 -> b2Vec2 [b2Collision.h <149:2 149:7>]
REFERENCE_TYPE_USAGE: float32 b2RayCastInput::maxFraction -> float32 [b2Collision.h <150:2 150:8>]
REFERENCE_USAGE: void b2RayCastInput::b2RayCastInput() -> b2Vec2 b2RayCastInput::p1 [b2Collision.h <147:8 147:21>]
REFERENCE_CALL: void b2RayCastInput::b2RayCastInput() -> void b2Vec2::b2Vec2() [b2Collision.h <147:8 147:21>]
REFERENCE_USAGE: void b2RayCastInput::b2RayCastInput() -> b2Vec2 b2RayCastInput::p2 [b2Collision.h <147:8 147:21>]
REFERENCE_TYPE_USAGE: b2Vec2 b2RayCastOutput::normal -> b2Vec2 [b2Collision.h <157:2 157:7>]
REFERENCE_TYPE_USAGE: float32 b2RayCastOutput::fraction -> float32 [b2Collision.h <158:2 158:8>]
REFERENCE_USAGE: void b2RayCastOutput::b2RayCastOutput() -> b2Vec2 b2RayCastOutput::normal [b2Collision.h <155:8 155:22>]
REFERENCE_CALL: void b2RayCastOutput::b2RayCastOutput() -> void b2Vec2::b2Vec2() [b2Collision.h <155:8 155:22>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <165:2 165:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <254:8 254:11>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> bool [b2Collision.h <257:2 257:5>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 [b2Collision.h <168:2 168:7>]
REFERENCE_CALL: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.h <170:15 170:15>]
REFERENCE_CALL: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <170:29 170:29>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <170:18 170:27>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetCenter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <170:31 170:40>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 [b2Collision.h <174:2 174:7>]
REFERENCE_CALL: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.h <176:15 176:15>]
REFERENCE_CALL: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <176:29 176:29>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <176:18 176:27>]
REFERENCE_USAGE: b2Vec2 b2AABB::GetExtents() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <176:31 176:40>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <180:2 180:8>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <182:3 182:9>]
REFERENCE_TYPE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 [b2Collision.h <183:3 183:9>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::x [b2Collision.h <182:27 182:27>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::x [b2Collision.h <182:42 182:42>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <182:16 182:25>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <183:16 183:25>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <182:31 182:40>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <183:31 183:40>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::y [b2Collision.h <183:27 183:27>]
REFERENCE_USAGE: float32 b2AABB::GetPerimeter() const -> float32 b2Vec2::y [b2Collision.h <183:42 183:42>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &) -> void [b2Collision.h <188:2 188:5>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2AABB [b2Collision.h <188:21 188:26>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <190:14 190:14>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <191:14 191:14>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:3 190:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:22 190:31>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <190:39 190:48>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <190:16 190:20>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:3 191:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:22 191:31>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <191:39 191:48>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <191:16 191:20>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> void [b2Collision.h <195:2 195:5>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <195:21 195:26>]
REFERENCE_TYPE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <195:42 195:47>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <197:14 197:14>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <198:14 198:14>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:3 197:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:28 197:37>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <197:46 197:55>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <197:16 197:20>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:3 198:12>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:28 198:37>]
REFERENCE_USAGE: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <198:46 198:55>]
REFERENCE_CALL: void b2AABB::Combine(const b2AABB &, const b2AABB &) -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <198:16 198:20>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> bool [b2Collision.h <202:2 202:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> bool [b2Collision.h <204:3 204:6>]
REFERENCE_TYPE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2AABB [b2Collision.h <202:22 202:27>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <205:33 205:33>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <205:54 205:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <207:38 207:38>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::x [b2Collision.h <207:54 207:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <205:22 205:31>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <205:43 205:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <206:22 206:31>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <206:43 206:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <206:33 206:33>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <206:54 206:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <208:38 208:38>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> float32 b2Vec2::y [b2Collision.h <208:54 208:54>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <207:27 207:36>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <207:43 207:52>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <208:27 208:36>]
REFERENCE_USAGE: bool b2AABB::Contains(const b2AABB &) const -> b2Vec2 b2AABB::upperBound [b2Collision.h <208:43 208:52>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> bool [b2Collision.h <212:2 212:5>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2RayCastOutput [b2Collision.h <212:15 212:29>]
REFERENCE_TYPE_USAGE: bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2RayCastInput [b2Collision.h <212:46 212:59>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::lowerBound -> b2Vec2 [b2Collision.h <214:2 214:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2AABB::upperBound -> b2Vec2 [b2Collision.h <215:2 215:7>]
REFERENCE_USAGE: void b2AABB::b2AABB() -> b2Vec2 b2AABB::lowerBound [b2Collision.h <162:8 162:13>]
REFERENCE_CALL: void b2AABB::b2AABB() -> void b2Vec2::b2Vec2() [b2Collision.h <162:8 162:13>]
REFERENCE_USAGE: void b2AABB::b2AABB() -> b2Vec2 b2AABB::upperBound [b2Collision.h <162:8 162:13>]
REFERENCE_USAGE: void b2AABB::b2AABB(const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <162:8 162:13>]
REFERENCE_CALL: void b2AABB::b2AABB(const b2AABB &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Collision.h <162:8 162:13>]
REFERENCE_USAGE: void b2AABB::b2AABB(const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <162:8 162:13>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <219:1 219:4>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <219:23 219:32>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <220:14 220:26>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <221:14 221:26>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <220:44 220:54>]
REFERENCE_TYPE_USAGE: void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <221:44 221:54>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <224:1 224:4>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <224:32 224:41>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <225:17 225:30>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <225:49 225:59>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <226:47 226:57>]
REFERENCE_TYPE_USAGE: void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <226:17 226:29>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void [b2Collision.h <229:1 229:4>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold [b2Collision.h <229:24 229:33>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <230:15 230:28>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <231:15 231:28>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <230:47 230:57>]
REFERENCE_TYPE_USAGE: void b2CollidePolygons(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <231:47 231:57>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> void [b2Collision.h <234:1 234:4>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Manifold [b2Collision.h <234:29 234:38>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2EdgeShape [b2Collision.h <235:17 235:27>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <235:46 235:56>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2Transform [b2Collision.h <236:47 236:57>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndCircle(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) -> b2CircleShape [b2Collision.h <236:17 236:29>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> void [b2Collision.h <239:1 239:4>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Manifold [b2Collision.h <239:30 239:39>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2EdgeShape [b2Collision.h <240:17 240:27>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <240:43 240:53>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2Transform [b2Collision.h <241:48 241:58>]
REFERENCE_TYPE_USAGE: void b2CollideEdgeAndPolygon(b2Manifold *, const b2EdgeShape *, const b2Transform &, const b2PolygonShape *, const b2Transform &) -> b2PolygonShape [b2Collision.h <241:17 241:30>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> int32 [b2Collision.h <244:1 244:5>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> int32 [b2Collision.h <245:46 245:50>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex [b2Collision.h <244:27 244:38>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex [b2Collision.h <244:55 244:66>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 [b2Collision.h <245:14 245:19>]
REFERENCE_TYPE_USAGE: int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> float32 [b2Collision.h <245:30 245:36>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> bool [b2Collision.h <248:1 248:4>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Shape [b2Collision.h <248:27 248:33>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Shape [b2Collision.h <249:12 249:18>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> int32 [b2Collision.h <248:44 248:48>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> int32 [b2Collision.h <249:29 249:33>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform [b2Collision.h <250:12 250:22>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform [b2Collision.h <250:36 250:46>]
REFERENCE_TYPE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 [b2Collision.h <256:2 256:7>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <256:24 256:24>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <256:13 256:22>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::upperBound [b2Collision.h <258:43 258:52>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <256:26 256:35>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> b2Vec2 b2AABB::lowerBound [b2Collision.h <258:19 258:28>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> float32 b2Vec2::x [b2Collision.h <257:17 257:17>]
REFERENCE_USAGE: bool b2AABB::IsValid() const -> float32 b2Vec2::y [b2Collision.h <257:32 257:32>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> bool b2Vec2::IsValid() const [b2Collision.h <258:30 258:36>]
REFERENCE_CALL: bool b2AABB::IsValid() const -> bool b2Vec2::IsValid() const [b2Collision.h <258:54 258:60>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> bool [b2Collision.h <262:8 262:11>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <262:33 262:38>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2AABB [b2Collision.h <262:50 262:55>]
REFERENCE_TYPE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 [b2Collision.h <264:2 264:7>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> void b2Vec2::b2Vec2() [b2Collision.h <264:9 264:10>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> void b2Vec2::b2Vec2() [b2Collision.h <264:13 264:14>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <265:5 265:5>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Collision.h <266:5 266:5>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <265:20 265:20>]
REFERENCE_CALL: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.h <266:20 266:20>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <265:9 265:18>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::lowerBound [b2Collision.h <266:9 266:18>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <265:24 265:33>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> b2Vec2 b2AABB::upperBound [b2Collision.h <266:24 266:33>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::x [b2Collision.h <268:9 268:9>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::x [b2Collision.h <271:9 271:9>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::y [b2Collision.h <268:24 268:24>]
REFERENCE_USAGE: bool b2TestOverlap(const b2AABB &, const b2AABB &) -> float32 b2Vec2::y [b2Collision.h <271:24 271:24>]
REFERENCE_TYPE_USAGE: b2GrowableStack<typename T, int32 N> -> int32 [b2GrowableStack.h <27:23 27:27>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <33:3 33:9>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <33:13 33:19>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <34:3 34:9>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <35:3 35:12>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <40:7 40:13>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <42:11 42:17>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <43:4 43:10>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() -> T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <40:18 40:24>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> void [b2GrowableStack.h <47:2 47:5>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <49:7 49:13>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <54:25 54:31>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <61:11 61:17>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <62:5 62:11>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <49:18 49:27>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <52:4 52:13>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <53:26 53:35>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <51:13 51:19>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <53:4 53:10>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <54:11 54:17>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <61:3 61:9>]
REFERENCE_USAGE: void b2GrowableStack<typename T, int32 N>::Push(const T &) -> T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <55:15 55:21>]
REFERENCE_TYPE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> void [b2GrowableStack.h <67:3 67:10>]
REFERENCE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <67:12 67:18>]
REFERENCE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <68:5 68:11>]
REFERENCE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <69:18 69:24>]
REFERENCE_CALL: T b2GrowableStack<typename T, int32 N>::Pop() -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2GrowableStack.h <67:3 67:10>]
REFERENCE_TYPE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> unsigned int [b2GrowableStack.h <67:3 67:10>]
REFERENCE_USAGE: T b2GrowableStack<typename T, int32 N>::Pop() -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <69:10 69:16>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<typename T, int32 N>::GetCount() -> int32 [b2GrowableStack.h <72:2 72:6>]
REFERENCE_USAGE: int32 b2GrowableStack<typename T, int32 N>::GetCount() -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <74:10 74:16>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<typename T, int32 N>::m_count -> int32 [b2GrowableStack.h <80:2 80:6>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<typename T, int32 N>::m_capacity -> int32 [b2GrowableStack.h <81:2 81:6>]
REFERENCE_TEMPLATE_SPECIALIZATION: b2GrowableStack<int, 256> -> b2GrowableStack<typename T, int32 N> [b2GrowableStack.h <28:7 28:21>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2GrowableStack<int, 256>::b2GrowableStack() -> void b2GrowableStack<typename T, int32 N>::b2GrowableStack<T, N>() [b2GrowableStack.h <31:2 31:16>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::b2GrowableStack() -> int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <33:3 33:9>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::b2GrowableStack() -> int [] b2GrowableStack<int, 256>::m_array [b2GrowableStack.h <33:13 33:19>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::b2GrowableStack() -> int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <34:3 34:9>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::b2GrowableStack() -> int32 b2GrowableStack<int, 256>::m_capacity [b2GrowableStack.h <35:3 35:12>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2GrowableStack<int, 256>::~b2GrowableStack() -> void b2GrowableStack<typename T, int32 N>::~b2GrowableStack<T, N>() [b2GrowableStack.h <38:2 38:2>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::~b2GrowableStack() -> int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <40:7 40:13>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::~b2GrowableStack() -> int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <42:11 42:17>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::~b2GrowableStack() -> int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <43:4 43:10>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::~b2GrowableStack() -> int [] b2GrowableStack<int, 256>::m_array [b2GrowableStack.h <40:18 40:24>]
REFERENCE_CALL: void b2GrowableStack<int, 256>::~b2GrowableStack() -> void b2Free(void *) [b2GrowableStack.h <42:4 42:9>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2GrowableStack<int, 256>::Push(const int &) -> void b2GrowableStack<typename T, int32 N>::Push(const T &) [b2GrowableStack.h <47:7 47:10>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> void [b2GrowableStack.h <47:2 47:5>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int [b2GrowableStack.h <47:18 47:18>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int [b2GrowableStack.h <51:4 51:4>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int [b2GrowableStack.h <53:15 53:15>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int [b2GrowableStack.h <53:46 53:46>]
REFERENCE_TYPE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int [b2GrowableStack.h <54:42 54:42>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <49:7 49:13>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <54:25 54:31>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <61:11 61:17>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <62:5 62:11>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int32 b2GrowableStack<int, 256>::m_capacity [b2GrowableStack.h <49:18 49:27>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int32 b2GrowableStack<int, 256>::m_capacity [b2GrowableStack.h <52:4 52:13>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int32 b2GrowableStack<int, 256>::m_capacity [b2GrowableStack.h <53:26 53:35>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <51:13 51:19>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <53:4 53:10>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <54:11 54:17>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <61:3 61:9>]
REFERENCE_CALL: void b2GrowableStack<int, 256>::Push(const int &) -> void * b2Alloc(int32) [b2GrowableStack.h <53:18 53:24>]
REFERENCE_CALL: void b2GrowableStack<int, 256>::Push(const int &) -> void * memcpy(void *, const void *, size_t) [b2GrowableStack.h <54:4 54:9>]
REFERENCE_USAGE: void b2GrowableStack<int, 256>::Push(const int &) -> int [] b2GrowableStack<int, 256>::m_array [b2GrowableStack.h <55:15 55:21>]
REFERENCE_CALL: void b2GrowableStack<int, 256>::Push(const int &) -> void b2Free(void *) [b2GrowableStack.h <57:5 57:10>]
REFERENCE_TEMPLATE_SPECIALIZATION: int b2GrowableStack<int, 256>::Pop() -> T b2GrowableStack<typename T, int32 N>::Pop() [b2GrowableStack.h <65:4 65:6>]
REFERENCE_TYPE_USAGE: int b2GrowableStack<int, 256>::Pop() -> int [b2GrowableStack.h <65:2 65:2>]
REFERENCE_TYPE_USAGE: int b2GrowableStack<int, 256>::Pop() -> void [b2GrowableStack.h <67:3 67:10>]
REFERENCE_USAGE: int b2GrowableStack<int, 256>::Pop() -> int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <67:12 67:18>]
REFERENCE_USAGE: int b2GrowableStack<int, 256>::Pop() -> int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <68:5 68:11>]
REFERENCE_USAGE: int b2GrowableStack<int, 256>::Pop() -> int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <69:18 69:24>]
REFERENCE_CALL: int b2GrowableStack<int, 256>::Pop() -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2GrowableStack.h <67:3 67:10>]
REFERENCE_TYPE_USAGE: int b2GrowableStack<int, 256>::Pop() -> unsigned int [b2GrowableStack.h <67:3 67:10>]
REFERENCE_USAGE: int b2GrowableStack<int, 256>::Pop() -> int * b2GrowableStack<int, 256>::m_stack [b2GrowableStack.h <69:10 69:16>]
REFERENCE_TEMPLATE_SPECIALIZATION: int32 b2GrowableStack<int, 256>::GetCount() -> int32 b2GrowableStack<typename T, int32 N>::GetCount() [b2GrowableStack.h <72:8 72:15>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<int, 256>::GetCount() -> int32 [b2GrowableStack.h <72:2 72:6>]
REFERENCE_USAGE: int32 b2GrowableStack<int, 256>::GetCount() -> int32 b2GrowableStack<int, 256>::m_count [b2GrowableStack.h <74:10 74:16>]
REFERENCE_TEMPLATE_SPECIALIZATION: int * b2GrowableStack<int, 256>::m_stack -> T * b2GrowableStack<typename T, int32 N>::m_stack [b2GrowableStack.h <78:5 78:11>]
REFERENCE_TYPE_USAGE: int * b2GrowableStack<int, 256>::m_stack -> int [b2GrowableStack.h <78:2 78:2>]
REFERENCE_TEMPLATE_SPECIALIZATION: int [] b2GrowableStack<int, 256>::m_array -> T [] b2GrowableStack<typename T, int32 N>::m_array [b2GrowableStack.h <79:4 79:10>]
REFERENCE_TYPE_USAGE: int [] b2GrowableStack<int, 256>::m_array -> int [b2GrowableStack.h <79:2 79:2>]
REFERENCE_TEMPLATE_SPECIALIZATION: int32 b2GrowableStack<int, 256>::m_count -> int32 b2GrowableStack<typename T, int32 N>::m_count [b2GrowableStack.h <80:8 80:14>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<int, 256>::m_count -> int32 [b2GrowableStack.h <80:2 80:6>]
REFERENCE_TEMPLATE_SPECIALIZATION: int32 b2GrowableStack<int, 256>::m_capacity -> int32 b2GrowableStack<typename T, int32 N>::m_capacity [b2GrowableStack.h <81:8 81:17>]
REFERENCE_TYPE_USAGE: int32 b2GrowableStack<int, 256>::m_capacity -> int32 [b2GrowableStack.h <81:2 81:6>]
REFERENCE_TYPE_USAGE: bool b2TreeNode::IsLeaf() const -> bool [b2DynamicTree.h <30:2 30:5>]
REFERENCE_USAGE: bool b2TreeNode::IsLeaf() const -> int32 b2TreeNode::child1 [b2DynamicTree.h <32:10 32:15>]
REFERENCE_TYPE_USAGE: b2AABB b2TreeNode::aabb -> b2AABB [b2DynamicTree.h <36:2 36:7>]
REFERENCE_TYPE_USAGE: void * b2TreeNode::userData -> void [b2DynamicTree.h <38:2 38:5>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::parent -> int32 [b2DynamicTree.h <42:3 42:7>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::anonymous union (b2DynamicTree.h<40:2>)::next -> int32 [b2DynamicTree.h <43:3 43:7>]
REFERENCE_TYPE_USAGE: b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) b2TreeNode:: -> b2TreeNode::anonymous union (b2DynamicTree.h<40:2>) [b2DynamicTree.h <40:2 40:6>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::child1 -> int32 [b2DynamicTree.h <46:2 46:6>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::child2 -> int32 [b2DynamicTree.h <47:2 47:6>]
REFERENCE_TYPE_USAGE: int32 b2TreeNode::height -> int32 [b2DynamicTree.h <50:2 50:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> int32 [b2DynamicTree.h <71:2 71:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> b2AABB [b2DynamicTree.h <71:26 71:31>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::CreateProxy(const b2AABB &, void *) -> void [b2DynamicTree.h <71:40 71:43>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> void [b2DynamicTree.h <74:2 74:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::DestroyProxy(int32) -> int32 [b2DynamicTree.h <74:20 74:24>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> bool [b2DynamicTree.h <80:2 80:5>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> int32 [b2DynamicTree.h <80:17 80:21>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2AABB [b2DynamicTree.h <80:38 80:43>]
REFERENCE_TYPE_USAGE: bool b2DynamicTree::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 [b2DynamicTree.h <80:59 80:64>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void [b2DynamicTree.h <84:2 84:5>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void [b2DynamicTree.h <156:8 156:11>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void [b2DynamicTree.h <158:2 158:9>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> int32 [b2DynamicTree.h <84:20 84:24>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> int32 [b2DynamicTree.h <156:41 156:45>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2AABB [b2DynamicTree.h <87:8 87:13>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2AABB [b2DynamicTree.h <162:14 162:19>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> int32 [b2DynamicTree.h <87:27 87:31>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> int32 [b2DynamicTree.h <162:48 162:52>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void [b2DynamicTree.h <92:2 92:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void [b2DynamicTree.h <169:8 169:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2AABB [b2DynamicTree.h <92:32 92:37>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2AABB [b2DynamicTree.h <169:53 169:58>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const -> void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const [b2DynamicTree.h <169:28 169:32>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const -> void [b2DynamicTree.h <169:8 169:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const -> b2BroadPhase [b2DynamicTree.h <169:34 169:34>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const -> b2AABB [b2DynamicTree.h <169:53 169:58>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const [b2DynamicTree.h <169:28 169:32>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> void [b2DynamicTree.h <169:8 169:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> b2WorldQueryWrapper [b2DynamicTree.h <169:34 169:34>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> b2AABB [b2DynamicTree.h <169:53 169:58>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> b2GrowableStack<int, 256> [b2DynamicTree.h <171:2 171:16>]
REFERENCE_TYPE_USAGE: b2GrowableStack<int, 256> -> int32 [b2DynamicTree.h <171:18 171:22>]
REFERENCE_TYPE_USAGE: b2GrowableStack<int, 256> -> int32 [b2DynamicTree.h <229:18 229:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> int32 [b2DynamicTree.h <171:18 171:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> int32 [b2DynamicTree.h <176:3 176:7>]
REFERENCE_CALL: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> void b2GrowableStack<int, 256>::b2GrowableStack() [b2DynamicTree.h <171:30 171:34>]
REFERENCE_CALL: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <172:8 172:11>]
REFERENCE_CALL: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <196:11 196:14>]
REFERENCE_CALL: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <197:11 197:14>]
REFERENCE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> int32 b2DynamicTree::m_root [b2DynamicTree.h <172:13 172:18>]
REFERENCE_CALL: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> int32 b2GrowableStack<int, 256>::GetCount() [b2DynamicTree.h <174:15 174:22>]
REFERENCE_CALL: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> int b2GrowableStack<int, 256>::Pop() [b2DynamicTree.h <176:24 176:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> b2TreeNode [b2DynamicTree.h <182:9 182:18>]
REFERENCE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <182:28 182:34>]
REFERENCE_CALL: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2DynamicTree.h <184:7 184:19>]
REFERENCE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <184:27 184:30>]
REFERENCE_CALL: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.h <186:14 186:19>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> bool [b2DynamicTree.h <188:5 188:8>]
REFERENCE_CALL: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> bool b2WorldQueryWrapper::QueryCallback(int32) [b2DynamicTree.h <188:30 188:42>]
REFERENCE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> int32 b2TreeNode::child1 [b2DynamicTree.h <196:22 196:27>]
REFERENCE_USAGE: void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> int32 b2TreeNode::child2 [b2DynamicTree.h <197:22 197:27>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2DynamicTree.h <102:2 102:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2DynamicTree.h <204:8 204:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2DynamicTree.h <209:2 209:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2DynamicTree.h <102:34 102:47>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2DynamicTree.h <204:55 204:68>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2DynamicTree.h <259:4 259:17>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const [b2DynamicTree.h <204:28 204:34>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void [b2DynamicTree.h <204:8 204:11>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void [b2DynamicTree.h <209:2 209:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2WorldRayCastWrapper [b2DynamicTree.h <204:36 204:36>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2RayCastInput [b2DynamicTree.h <204:55 204:68>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2RayCastInput [b2DynamicTree.h <259:4 259:17>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <206:2 206:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <207:2 207:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <208:2 208:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <213:2 213:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <214:2 214:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <224:3 224:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <249:3 249:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <250:3 250:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <276:5 276:10>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2DynamicTree.h <206:20 206:21>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2DynamicTree.h <207:20 207:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <206:20 206:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <260:13 260:14>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <260:24 260:25>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <207:20 207:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <261:13 261:14>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <261:24 261:25>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <208:16 208:16>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <224:37 224:37>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:42 251:42>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <276:39 276:39>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> float32 b2Vec2::LengthSquared() const [b2DynamicTree.h <209:13 209:25>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.h <209:2 209:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> unsigned int [b2DynamicTree.h <209:2 209:9>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> float32 b2Vec2::Normalize() [b2DynamicTree.h <210:4 210:12>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2Cross(float32, const b2Vec2 &) [b2DynamicTree.h <213:13 213:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2Abs(const b2Vec2 &) [b2DynamicTree.h <214:17 214:21>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <219:2 219:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <251:3 251:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <264:4 264:10>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> float32 b2RayCastInput::maxFraction [b2DynamicTree.h <219:30 219:40>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> float32 b2RayCastInput::maxFraction [b2DynamicTree.h <262:13 262:23>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2AABB [b2DynamicTree.h <222:2 222:7>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void b2AABB::b2AABB() [b2DynamicTree.h <222:9 222:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <224:17 224:17>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <276:19 276:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2DynamicTree.h <224:31 224:31>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2DynamicTree.h <276:33 276:33>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <225:26 225:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <226:26 226:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <277:28 277:28>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <278:28 278:28>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.h <225:15 225:24>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.h <277:17 277:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <225:28 225:32>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <277:30 277:34>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2AABB::upperBound [b2DynamicTree.h <226:15 226:24>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2AABB::upperBound [b2DynamicTree.h <278:17 278:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <226:28 226:32>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <278:30 278:34>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2GrowableStack<int, 256> [b2DynamicTree.h <229:2 229:16>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> int32 [b2DynamicTree.h <229:18 229:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> int32 [b2DynamicTree.h <234:3 234:7>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::b2GrowableStack() [b2DynamicTree.h <229:30 229:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <230:8 230:11>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <283:10 283:13>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <284:10 284:13>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> int32 b2DynamicTree::m_root [b2DynamicTree.h <230:13 230:18>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> int32 b2GrowableStack<int, 256>::GetCount() [b2DynamicTree.h <232:15 232:22>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> int b2GrowableStack<int, 256>::Pop() [b2DynamicTree.h <234:24 234:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2TreeNode [b2DynamicTree.h <240:9 240:18>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <240:28 240:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2DynamicTree.h <242:7 242:19>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <242:27 242:30>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <249:20 249:23>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <250:20 250:23>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2AABB::GetCenter() const [b2DynamicTree.h <249:25 249:33>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 b2AABB::GetExtents() const [b2DynamicTree.h <250:25 250:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> float b2Abs<float>(float) [b2DynamicTree.h <251:24 251:28>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:30 251:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:50 251:54>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.h <257:13 257:18>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void b2RayCastInput::b2RayCastInput() [b2DynamicTree.h <259:19 259:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2DynamicTree.h <260:16 260:16>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2DynamicTree.h <261:16 261:16>]
REFERENCE_CALL: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) [b2DynamicTree.h <264:30 264:44>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> int32 b2TreeNode::child1 [b2DynamicTree.h <283:21 283:26>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> int32 b2TreeNode::child2 [b2DynamicTree.h <284:21 284:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Validate() const -> void [b2DynamicTree.h <105:2 105:5>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetHeight() const -> int32 [b2DynamicTree.h <109:2 109:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::GetMaxBalance() const -> int32 [b2DynamicTree.h <113:2 113:6>]
REFERENCE_TYPE_USAGE: float32 b2DynamicTree::GetAreaRatio() const -> float32 [b2DynamicTree.h <116:2 116:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RebuildBottomUp() -> void [b2DynamicTree.h <119:2 119:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> void [b2DynamicTree.h <124:2 124:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2DynamicTree.h <124:25 124:30>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::AllocateNode() -> int32 [b2DynamicTree.h <128:2 128:6>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> void [b2DynamicTree.h <129:2 129:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::FreeNode(int32) -> int32 [b2DynamicTree.h <129:16 129:20>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> void [b2DynamicTree.h <131:2 131:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::InsertLeaf(int32) -> int32 [b2DynamicTree.h <131:18 131:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> void [b2DynamicTree.h <132:2 132:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RemoveLeaf(int32) -> int32 [b2DynamicTree.h <132:18 132:22>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.h <134:2 134:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::Balance(int32) -> int32 [b2DynamicTree.h <134:16 134:20>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight() const -> int32 [b2DynamicTree.h <136:2 136:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 [b2DynamicTree.h <137:2 137:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::ComputeHeight(int32) const -> int32 [b2DynamicTree.h <137:22 137:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> void [b2DynamicTree.h <139:2 139:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateStructure(int32) const -> int32 [b2DynamicTree.h <139:25 139:29>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> void [b2DynamicTree.h <140:2 140:5>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::ValidateMetrics(int32) const -> int32 [b2DynamicTree.h <140:23 140:27>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_root -> int32 [b2DynamicTree.h <142:2 142:6>]
REFERENCE_TYPE_USAGE: b2TreeNode * b2DynamicTree::m_nodes -> b2TreeNode [b2DynamicTree.h <144:2 144:11>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_nodeCount -> int32 [b2DynamicTree.h <145:2 145:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_nodeCapacity -> int32 [b2DynamicTree.h <146:2 146:6>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_freeList -> int32 [b2DynamicTree.h <148:2 148:6>]
REFERENCE_TYPE_USAGE: uint32 b2DynamicTree::m_path -> uint32 [b2DynamicTree.h <151:2 151:7>]
REFERENCE_TYPE_USAGE: int32 b2DynamicTree::m_insertionCount -> int32 [b2DynamicTree.h <153:2 153:6>]
REFERENCE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.h <158:37 158:50>]
REFERENCE_CALL: void * b2DynamicTree::GetUserData(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.h <158:2 158:9>]
REFERENCE_TYPE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> unsigned int [b2DynamicTree.h <158:2 158:9>]
REFERENCE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> void * b2TreeNode::userData [b2DynamicTree.h <159:26 159:33>]
REFERENCE_USAGE: void * b2DynamicTree::GetUserData(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <159:9 159:15>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> void [b2DynamicTree.h <164:2 164:9>]
REFERENCE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> int32 b2DynamicTree::m_nodeCapacity [b2DynamicTree.h <164:37 164:50>]
REFERENCE_CALL: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.h <164:2 164:9>]
REFERENCE_TYPE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> unsigned int [b2DynamicTree.h <164:2 164:9>]
REFERENCE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <165:26 165:29>]
REFERENCE_USAGE: const b2AABB & b2DynamicTree::GetFatAABB(int32) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <165:9 165:15>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2GrowableStack<int, 256> [b2DynamicTree.h <171:2 171:16>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 [b2DynamicTree.h <171:18 171:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 [b2DynamicTree.h <176:3 176:7>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::b2GrowableStack() [b2DynamicTree.h <171:30 171:34>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <172:8 172:11>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <196:11 196:14>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <197:11 197:14>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2DynamicTree::m_root [b2DynamicTree.h <172:13 172:18>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2GrowableStack<int, 256>::GetCount() [b2DynamicTree.h <174:15 174:22>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int b2GrowableStack<int, 256>::Pop() [b2DynamicTree.h <176:24 176:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2TreeNode [b2DynamicTree.h <182:9 182:18>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <182:28 182:34>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2DynamicTree.h <184:7 184:19>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <184:27 184:30>]
REFERENCE_CALL: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.h <186:14 186:19>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> bool [b2DynamicTree.h <188:5 188:8>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2TreeNode::child1 [b2DynamicTree.h <196:22 196:27>]
REFERENCE_USAGE: void b2DynamicTree::Query<typename T>(T *, const b2AABB &) const -> int32 b2TreeNode::child2 [b2DynamicTree.h <197:22 197:27>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <206:2 206:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <207:2 207:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <208:2 208:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <213:2 213:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <214:2 214:7>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <224:3 224:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <249:3 249:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <250:3 250:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 [b2DynamicTree.h <276:5 276:10>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2DynamicTree.h <206:20 206:21>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2DynamicTree.h <207:20 207:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <206:20 206:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <260:13 260:14>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2DynamicTree.h <260:24 260:25>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <207:20 207:21>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <261:13 261:14>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2DynamicTree.h <261:24 261:25>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <208:16 208:16>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <224:37 224:37>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:42 251:42>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <276:39 276:39>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Vec2::LengthSquared() const [b2DynamicTree.h <209:13 209:25>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2DynamicTree.h <209:2 209:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> unsigned int [b2DynamicTree.h <209:2 209:9>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Vec2::Normalize() [b2DynamicTree.h <210:4 210:12>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Cross(float32, const b2Vec2 &) [b2DynamicTree.h <213:13 213:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Abs(const b2Vec2 &) [b2DynamicTree.h <214:17 214:21>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <219:2 219:8>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <251:3 251:9>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 [b2DynamicTree.h <264:4 264:10>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2RayCastInput::maxFraction [b2DynamicTree.h <219:30 219:40>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2RayCastInput::maxFraction [b2DynamicTree.h <262:13 262:23>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB [b2DynamicTree.h <222:2 222:7>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2AABB::b2AABB() [b2DynamicTree.h <222:9 222:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <224:17 224:17>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <276:19 276:19>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2DynamicTree.h <224:31 224:31>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2DynamicTree.h <276:33 276:33>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <225:26 225:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <226:26 226:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <277:28 277:28>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2DynamicTree.h <278:28 278:28>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.h <225:15 225:24>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::lowerBound [b2DynamicTree.h <277:17 277:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <225:28 225:32>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <277:30 277:34>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::upperBound [b2DynamicTree.h <226:15 226:24>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::upperBound [b2DynamicTree.h <278:17 278:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <226:28 226:32>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <278:30 278:34>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2GrowableStack<int, 256> [b2DynamicTree.h <229:2 229:16>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 [b2DynamicTree.h <229:18 229:22>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 [b2DynamicTree.h <234:3 234:7>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::b2GrowableStack() [b2DynamicTree.h <229:30 229:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <230:8 230:11>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <283:10 283:13>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2GrowableStack<int, 256>::Push(const int &) [b2DynamicTree.h <284:10 284:13>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2DynamicTree::m_root [b2DynamicTree.h <230:13 230:18>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2GrowableStack<int, 256>::GetCount() [b2DynamicTree.h <232:15 232:22>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int b2GrowableStack<int, 256>::Pop() [b2DynamicTree.h <234:24 234:26>]
REFERENCE_TYPE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2TreeNode [b2DynamicTree.h <240:9 240:18>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2TreeNode * b2DynamicTree::m_nodes [b2DynamicTree.h <240:28 240:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2DynamicTree.h <242:7 242:19>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <242:27 242:30>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <249:20 249:23>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2AABB b2TreeNode::aabb [b2DynamicTree.h <250:20 250:23>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::GetCenter() const [b2DynamicTree.h <249:25 249:33>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 b2AABB::GetExtents() const [b2DynamicTree.h <250:25 250:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float b2Abs<float>(float) [b2DynamicTree.h <251:24 251:28>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:30 251:34>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2DynamicTree.h <251:50 251:54>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> bool b2TreeNode::IsLeaf() const [b2DynamicTree.h <257:13 257:18>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> void b2RayCastInput::b2RayCastInput() [b2DynamicTree.h <259:19 259:26>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2DynamicTree.h <260:16 260:16>]
REFERENCE_CALL: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2DynamicTree.h <261:16 261:16>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2TreeNode::child1 [b2DynamicTree.h <283:21 283:26>]
REFERENCE_USAGE: void b2DynamicTree::RayCast<typename T>(T *, const b2RayCastInput &) const -> int32 b2TreeNode::child2 [b2DynamicTree.h <284:21 284:26>]
REFERENCE_TYPE_USAGE: int32 b2Pair::proxyIdA -> int32 [b2BroadPhase.h <29:2 29:6>]
REFERENCE_TYPE_USAGE: int32 b2Pair::proxyIdB -> int32 [b2BroadPhase.h <30:2 30:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::CreateProxy(const b2AABB &, void *) -> int32 [b2BroadPhase.h <50:2 50:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::CreateProxy(const b2AABB &, void *) -> b2AABB [b2BroadPhase.h <50:26 50:31>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::CreateProxy(const b2AABB &, void *) -> void [b2BroadPhase.h <50:40 50:43>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::DestroyProxy(int32) -> void [b2BroadPhase.h <53:2 53:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::DestroyProxy(int32) -> int32 [b2BroadPhase.h <53:20 53:24>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> void [b2BroadPhase.h <57:2 57:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> int32 [b2BroadPhase.h <57:17 57:21>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2AABB [b2BroadPhase.h <57:38 57:43>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::MoveProxy(int32, const b2AABB &, const b2Vec2 &) -> b2Vec2 [b2BroadPhase.h <57:58 57:63>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::TouchProxy(int32) -> void [b2BroadPhase.h <60:2 60:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::TouchProxy(int32) -> int32 [b2BroadPhase.h <60:18 60:22>]
REFERENCE_TYPE_USAGE: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> b2AABB [b2BroadPhase.h <63:8 63:13>]
REFERENCE_TYPE_USAGE: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> b2AABB [b2BroadPhase.h <159:14 159:19>]
REFERENCE_TYPE_USAGE: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> int32 [b2BroadPhase.h <63:27 63:31>]
REFERENCE_TYPE_USAGE: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> int32 [b2BroadPhase.h <159:47 159:51>]
REFERENCE_TYPE_USAGE: void * b2BroadPhase::GetUserData(int32) const -> void [b2BroadPhase.h <66:2 66:5>]
REFERENCE_TYPE_USAGE: void * b2BroadPhase::GetUserData(int32) const -> void [b2BroadPhase.h <147:8 147:11>]
REFERENCE_TYPE_USAGE: void * b2BroadPhase::GetUserData(int32) const -> int32 [b2BroadPhase.h <66:20 66:24>]
REFERENCE_TYPE_USAGE: void * b2BroadPhase::GetUserData(int32) const -> int32 [b2BroadPhase.h <147:40 147:44>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> bool [b2BroadPhase.h <69:2 69:5>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> bool [b2BroadPhase.h <152:8 152:11>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> int32 [b2BroadPhase.h <69:19 69:23>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> int32 [b2BroadPhase.h <69:35 69:39>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> int32 [b2BroadPhase.h <152:39 152:43>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> int32 [b2BroadPhase.h <152:55 152:59>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetProxyCount() const -> int32 [b2BroadPhase.h <72:2 72:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetProxyCount() const -> int32 [b2BroadPhase.h <164:8 164:12>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void [b2BroadPhase.h <76:2 76:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void [b2BroadPhase.h <185:1 185:4>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void [b2BroadPhase.h <218:3 218:6>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void [b2BroadPhase.h <219:3 219:6>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const -> void [b2BroadPhase.h <81:2 81:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const -> void [b2BroadPhase.h <241:8 241:11>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const -> b2AABB [b2BroadPhase.h <81:32 81:37>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const -> b2AABB [b2BroadPhase.h <241:52 241:57>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2BroadPhase::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const [b2BroadPhase.h <241:27 241:31>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> void [b2BroadPhase.h <241:8 241:11>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> b2WorldQueryWrapper [b2BroadPhase.h <241:33 241:33>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> b2AABB [b2BroadPhase.h <241:52 241:57>]
REFERENCE_CALL: void b2BroadPhase::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> void b2DynamicTree::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const [b2BroadPhase.h <243:9 243:13>]
REFERENCE_USAGE: void b2BroadPhase::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <243:2 243:7>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2BroadPhase.h <91:2 91:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const -> void [b2BroadPhase.h <247:8 247:11>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2BroadPhase.h <91:34 91:47>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2RayCastInput [b2BroadPhase.h <247:54 247:67>]
REFERENCE_TEMPLATE_SPECIALIZATION: void b2BroadPhase::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const [b2BroadPhase.h <247:27 247:33>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void [b2BroadPhase.h <247:8 247:11>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2WorldRayCastWrapper [b2BroadPhase.h <247:35 247:35>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2RayCastInput [b2BroadPhase.h <247:54 247:67>]
REFERENCE_CALL: void b2BroadPhase::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> void b2DynamicTree::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const [b2BroadPhase.h <249:9 249:15>]
REFERENCE_USAGE: void b2BroadPhase::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <249:2 249:7>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetTreeHeight() const -> int32 [b2BroadPhase.h <94:2 94:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetTreeHeight() const -> int32 [b2BroadPhase.h <169:8 169:12>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetTreeBalance() const -> int32 [b2BroadPhase.h <97:2 97:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::GetTreeBalance() const -> int32 [b2BroadPhase.h <174:8 174:12>]
REFERENCE_TYPE_USAGE: float32 b2BroadPhase::GetTreeQuality() const -> float32 [b2BroadPhase.h <100:2 100:8>]
REFERENCE_TYPE_USAGE: float32 b2BroadPhase::GetTreeQuality() const -> float32 [b2BroadPhase.h <179:8 179:14>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> void [b2BroadPhase.h <105:2 105:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> void [b2BroadPhase.h <252:8 252:11>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2BroadPhase.h <105:25 105:30>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2BroadPhase.h <252:45 252:50>]
REFERENCE_TYPE_USAGE: b2BroadPhase -> b2DynamicTree [b2BroadPhase.h <109:15 109:27>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::BufferMove(int32) -> void [b2BroadPhase.h <111:2 111:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::BufferMove(int32) -> int32 [b2BroadPhase.h <111:18 111:22>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UnBufferMove(int32) -> void [b2BroadPhase.h <112:2 112:5>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UnBufferMove(int32) -> int32 [b2BroadPhase.h <112:20 112:24>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::QueryCallback(int32) -> bool [b2BroadPhase.h <114:2 114:5>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::QueryCallback(int32) -> int32 [b2BroadPhase.h <114:21 114:25>]
REFERENCE_TYPE_USAGE: b2DynamicTree b2BroadPhase::m_tree -> b2DynamicTree [b2BroadPhase.h <116:2 116:14>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_proxyCount -> int32 [b2BroadPhase.h <118:2 118:6>]
REFERENCE_TYPE_USAGE: int32 * b2BroadPhase::m_moveBuffer -> int32 [b2BroadPhase.h <120:2 120:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_moveCapacity -> int32 [b2BroadPhase.h <121:2 121:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_moveCount -> int32 [b2BroadPhase.h <122:2 122:6>]
REFERENCE_TYPE_USAGE: b2Pair * b2BroadPhase::m_pairBuffer -> b2Pair [b2BroadPhase.h <124:2 124:7>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_pairCapacity -> int32 [b2BroadPhase.h <125:2 125:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_pairCount -> int32 [b2BroadPhase.h <126:2 126:6>]
REFERENCE_TYPE_USAGE: int32 b2BroadPhase::m_queryProxyId -> int32 [b2BroadPhase.h <128:2 128:6>]
REFERENCE_TYPE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> bool [b2BroadPhase.h <132:8 132:11>]
REFERENCE_TYPE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> b2Pair [b2BroadPhase.h <132:34 132:39>]
REFERENCE_TYPE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> b2Pair [b2BroadPhase.h <132:55 132:60>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <134:12 134:19>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <134:29 134:36>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <139:12 139:19>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <139:30 139:37>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdB [b2BroadPhase.h <141:16 141:23>]
REFERENCE_USAGE: bool b2PairLessThan(const b2Pair &, const b2Pair &) -> int32 b2Pair::proxyIdB [b2BroadPhase.h <141:33 141:40>]
REFERENCE_CALL: void * b2BroadPhase::GetUserData(int32) const -> void * b2DynamicTree::GetUserData(int32) const [b2BroadPhase.h <149:16 149:26>]
REFERENCE_USAGE: void * b2BroadPhase::GetUserData(int32) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <149:9 149:14>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> b2AABB [b2BroadPhase.h <154:8 154:13>]
REFERENCE_TYPE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> b2AABB [b2BroadPhase.h <155:8 155:13>]
REFERENCE_CALL: bool b2BroadPhase::TestOverlap(int32, int32) const -> const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2BroadPhase.h <154:31 154:40>]
REFERENCE_CALL: bool b2BroadPhase::TestOverlap(int32, int32) const -> const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2BroadPhase.h <155:31 155:40>]
REFERENCE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <154:24 154:29>]
REFERENCE_USAGE: bool b2BroadPhase::TestOverlap(int32, int32) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <155:24 155:29>]
REFERENCE_CALL: bool b2BroadPhase::TestOverlap(int32, int32) const -> bool b2TestOverlap(const b2AABB &, const b2AABB &) [b2BroadPhase.h <156:9 156:21>]
REFERENCE_CALL: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2BroadPhase.h <161:16 161:25>]
REFERENCE_USAGE: const b2AABB & b2BroadPhase::GetFatAABB(int32) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <161:9 161:14>]
REFERENCE_USAGE: int32 b2BroadPhase::GetProxyCount() const -> int32 b2BroadPhase::m_proxyCount [b2BroadPhase.h <166:9 166:20>]
REFERENCE_CALL: int32 b2BroadPhase::GetTreeHeight() const -> int32 b2DynamicTree::GetHeight() const [b2BroadPhase.h <171:16 171:24>]
REFERENCE_USAGE: int32 b2BroadPhase::GetTreeHeight() const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <171:9 171:14>]
REFERENCE_CALL: int32 b2BroadPhase::GetTreeBalance() const -> int32 b2DynamicTree::GetMaxBalance() const [b2BroadPhase.h <176:16 176:28>]
REFERENCE_USAGE: int32 b2BroadPhase::GetTreeBalance() const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <176:9 176:14>]
REFERENCE_CALL: float32 b2BroadPhase::GetTreeQuality() const -> float32 b2DynamicTree::GetAreaRatio() const [b2BroadPhase.h <181:16 181:27>]
REFERENCE_USAGE: float32 b2BroadPhase::GetTreeQuality() const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <181:9 181:14>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_pairCount [b2BroadPhase.h <188:2 188:12>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_pairCount [b2BroadPhase.h <211:41 211:51>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_pairCount [b2BroadPhase.h <215:13 215:23>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_pairCount [b2BroadPhase.h <225:14 225:24>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 [b2BroadPhase.h <191:7 191:11>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 [b2BroadPhase.h <214:2 214:6>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_moveCount [b2BroadPhase.h <191:24 191:34>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_moveCount [b2BroadPhase.h <208:2 208:12>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_queryProxyId [b2BroadPhase.h <193:3 193:16>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_queryProxyId [b2BroadPhase.h <194:7 194:20>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2BroadPhase::m_queryProxyId [b2BroadPhase.h <201:45 201:58>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 * b2BroadPhase::m_moveBuffer [b2BroadPhase.h <193:20 193:31>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2BroadPhase::anonymous enum (b2BroadPhase.h<40:2>)::e_nullProxy [b2BroadPhase.h <194:25 194:35>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2AABB [b2BroadPhase.h <201:9 201:14>]
REFERENCE_CALL: void b2BroadPhase::UpdatePairs<typename T>(T *) -> const b2AABB & b2DynamicTree::GetFatAABB(int32) const [b2BroadPhase.h <201:34 201:43>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <201:27 201:32>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <204:3 204:8>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <218:21 218:26>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <219:21 219:26>]
REFERENCE_CALL: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void b2DynamicTree::Query<b2BroadPhase>(b2BroadPhase *, const b2AABB &) const [b2BroadPhase.h <204:10 204:14>]
REFERENCE_CALL: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void std::sort<b2Pair *, bool(const b2Pair &, const b2Pair &) *>(b2Pair * const, b2Pair * const, bool(const b2Pair &, const b2Pair &) *) [b2BroadPhase.h <211:7 211:10>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair * b2BroadPhase::m_pairBuffer [b2BroadPhase.h <211:12 211:23>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair * b2BroadPhase::m_pairBuffer [b2BroadPhase.h <211:26 211:37>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair * b2BroadPhase::m_pairBuffer [b2BroadPhase.h <217:25 217:36>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair * b2BroadPhase::m_pairBuffer [b2BroadPhase.h <227:19 227:30>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> bool b2PairLessThan(const b2Pair &, const b2Pair &) [b2BroadPhase.h <211:54 211:67>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair [b2BroadPhase.h <217:3 217:8>]
REFERENCE_TYPE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> b2Pair [b2BroadPhase.h <227:4 227:9>]
REFERENCE_CALL: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void * b2DynamicTree::GetUserData(int32) const [b2BroadPhase.h <218:28 218:38>]
REFERENCE_CALL: void b2BroadPhase::UpdatePairs<typename T>(T *) -> void * b2DynamicTree::GetUserData(int32) const [b2BroadPhase.h <219:28 219:38>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <218:53 218:60>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <228:14 228:21>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdA [b2BroadPhase.h <228:39 228:46>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdB [b2BroadPhase.h <219:53 219:60>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdB [b2BroadPhase.h <228:57 228:64>]
REFERENCE_USAGE: void b2BroadPhase::UpdatePairs<typename T>(T *) -> int32 b2Pair::proxyIdB [b2BroadPhase.h <228:82 228:89>]
REFERENCE_USAGE: void b2BroadPhase::Query<typename T>(T *, const b2AABB &) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <243:2 243:7>]
REFERENCE_USAGE: void b2BroadPhase::RayCast<typename T>(T *, const b2RayCastInput &) const -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <249:2 249:7>]
REFERENCE_CALL: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> void b2DynamicTree::ShiftOrigin(const b2Vec2 &) [b2BroadPhase.h <254:9 254:19>]
REFERENCE_USAGE: void b2BroadPhase::ShiftOrigin(const b2Vec2 &) -> b2DynamicTree b2BroadPhase::m_tree [b2BroadPhase.h <254:2 254:7>]
REFERENCE_TYPE_USAGE: void b2ContactManager::AddPair(void *, void *) -> void [b2ContactManager.h <36:2 36:5>]
REFERENCE_TYPE_USAGE: void b2ContactManager::AddPair(void *, void *) -> void [b2ContactManager.h <36:15 36:18>]
REFERENCE_TYPE_USAGE: void b2ContactManager::AddPair(void *, void *) -> void [b2ContactManager.h <36:37 36:40>]
REFERENCE_TYPE_USAGE: void b2ContactManager::FindNewContacts() -> void [b2ContactManager.h <38:2 38:5>]
REFERENCE_TYPE_USAGE: void b2ContactManager::Destroy(b2Contact *) -> void [b2ContactManager.h <40:2 40:5>]
REFERENCE_TYPE_USAGE: void b2ContactManager::Destroy(b2Contact *) -> b2Contact [b2ContactManager.h <40:15 40:23>]
REFERENCE_TYPE_USAGE: void b2ContactManager::Collide() -> void [b2ContactManager.h <42:2 42:5>]
REFERENCE_TYPE_USAGE: b2BroadPhase b2ContactManager::m_broadPhase -> b2BroadPhase [b2ContactManager.h <44:2 44:13>]
REFERENCE_TYPE_USAGE: b2Contact * b2ContactManager::m_contactList -> b2Contact [b2ContactManager.h <45:2 45:10>]
REFERENCE_TYPE_USAGE: int32 b2ContactManager::m_contactCount -> int32 [b2ContactManager.h <46:2 46:6>]
REFERENCE_TYPE_USAGE: b2ContactFilter * b2ContactManager::m_contactFilter -> b2ContactFilter [b2ContactManager.h <47:2 47:16>]
REFERENCE_TYPE_USAGE: b2ContactListener * b2ContactManager::m_contactListener -> b2ContactListener [b2ContactManager.h <48:2 48:18>]
REFERENCE_TYPE_USAGE: b2BlockAllocator * b2ContactManager::m_allocator -> b2BlockAllocator [b2ContactManager.h <49:2 49:17>]
REFERENCE_TYPE_USAGE: void b2DestructionListener::SayGoodbye(b2Joint *) -> void [b2WorldCallbacks.h <43:10 43:13>]
REFERENCE_TYPE_USAGE: void b2DestructionListener::SayGoodbye(b2Joint *) -> b2Joint [b2WorldCallbacks.h <43:26 43:32>]
REFERENCE_TYPE_USAGE: void b2DestructionListener::SayGoodbye(b2Fixture *) -> void [b2WorldCallbacks.h <47:10 47:13>]
REFERENCE_TYPE_USAGE: void b2DestructionListener::SayGoodbye(b2Fixture *) -> b2Fixture [b2WorldCallbacks.h <47:26 47:34>]
REFERENCE_TYPE_USAGE: bool b2ContactFilter::ShouldCollide(b2Fixture *, b2Fixture *) -> bool [b2WorldCallbacks.h <59:10 59:13>]
REFERENCE_TYPE_USAGE: bool b2ContactFilter::ShouldCollide(b2Fixture *, b2Fixture *) -> b2Fixture [b2WorldCallbacks.h <59:29 59:37>]
REFERENCE_TYPE_USAGE: bool b2ContactFilter::ShouldCollide(b2Fixture *, b2Fixture *) -> b2Fixture [b2WorldCallbacks.h <59:50 59:58>]
REFERENCE_TYPE_USAGE: float32 [] b2ContactImpulse::normalImpulses -> float32 [b2WorldCallbacks.h <67:2 67:8>]
REFERENCE_TYPE_USAGE: float32 [] b2ContactImpulse::tangentImpulses -> float32 [b2WorldCallbacks.h <68:2 68:8>]
REFERENCE_TYPE_USAGE: int32 b2ContactImpulse::count -> int32 [b2WorldCallbacks.h <69:2 69:6>]
REFERENCE_TYPE_USAGE: void b2ContactListener::BeginContact(b2Contact *) -> void [b2WorldCallbacks.h <87:10 87:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::BeginContact(b2Contact *) -> void [b2WorldCallbacks.h <87:50 87:60>]
REFERENCE_TYPE_USAGE: void b2ContactListener::BeginContact(b2Contact *) -> b2Contact [b2WorldCallbacks.h <87:28 87:36>]
REFERENCE_TYPE_USAGE: void b2ContactListener::EndContact(b2Contact *) -> void [b2WorldCallbacks.h <90:10 90:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::EndContact(b2Contact *) -> void [b2WorldCallbacks.h <90:48 90:58>]
REFERENCE_TYPE_USAGE: void b2ContactListener::EndContact(b2Contact *) -> b2Contact [b2WorldCallbacks.h <90:26 90:34>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) -> void [b2WorldCallbacks.h <102:10 102:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) -> void [b2WorldCallbacks.h <104:3 104:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) -> void [b2WorldCallbacks.h <105:3 105:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) -> b2Contact [b2WorldCallbacks.h <102:24 102:32>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PreSolve(b2Contact *, const b2Manifold *) -> b2Manifold [b2WorldCallbacks.h <102:50 102:59>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) -> void [b2WorldCallbacks.h <114:10 114:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) -> void [b2WorldCallbacks.h <116:3 116:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) -> void [b2WorldCallbacks.h <117:3 117:13>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) -> b2Contact [b2WorldCallbacks.h <114:25 114:33>]
REFERENCE_TYPE_USAGE: void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) -> b2ContactImpulse [b2WorldCallbacks.h <114:51 114:66>]
REFERENCE_TYPE_USAGE: bool b2QueryCallback::ReportFixture(b2Fixture *) -> bool [b2WorldCallbacks.h <130:10 130:13>]
REFERENCE_TYPE_USAGE: bool b2QueryCallback::ReportFixture(b2Fixture *) -> b2Fixture [b2WorldCallbacks.h <130:29 130:37>]
REFERENCE_TYPE_USAGE: float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) -> float32 [b2WorldCallbacks.h <151:10 151:16>]
REFERENCE_TYPE_USAGE: float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) -> float32 [b2WorldCallbacks.h <152:32 152:38>]
REFERENCE_TYPE_USAGE: float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) -> b2Fixture [b2WorldCallbacks.h <151:33 151:41>]
REFERENCE_TYPE_USAGE: float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) -> b2Vec2 [b2WorldCallbacks.h <151:59 151:64>]
REFERENCE_TYPE_USAGE: float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) -> b2Vec2 [b2WorldCallbacks.h <152:16 152:21>]
REFERENCE_TYPE_USAGE: float32 b2Profile::step -> float32 [b2TimeStep.h <27:2 27:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::collide -> float32 [b2TimeStep.h <28:2 28:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::solve -> float32 [b2TimeStep.h <29:2 29:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::solveInit -> float32 [b2TimeStep.h <30:2 30:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::solveVelocity -> float32 [b2TimeStep.h <31:2 31:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::solvePosition -> float32 [b2TimeStep.h <32:2 32:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::broadphase -> float32 [b2TimeStep.h <33:2 33:8>]
REFERENCE_TYPE_USAGE: float32 b2Profile::solveTOI -> float32 [b2TimeStep.h <34:2 34:8>]
REFERENCE_TYPE_USAGE: float32 b2TimeStep::dt -> float32 [b2TimeStep.h <40:2 40:8>]
REFERENCE_TYPE_USAGE: float32 b2TimeStep::inv_dt -> float32 [b2TimeStep.h <41:2 41:8>]
REFERENCE_TYPE_USAGE: float32 b2TimeStep::dtRatio -> float32 [b2TimeStep.h <42:2 42:8>]
REFERENCE_TYPE_USAGE: int32 b2TimeStep::velocityIterations -> int32 [b2TimeStep.h <43:2 43:6>]
REFERENCE_TYPE_USAGE: int32 b2TimeStep::positionIterations -> int32 [b2TimeStep.h <44:2 44:6>]
REFERENCE_TYPE_USAGE: bool b2TimeStep::warmStarting -> bool [b2TimeStep.h <45:2 45:5>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Position::c -> b2Vec2 [b2TimeStep.h <51:2 51:7>]
REFERENCE_TYPE_USAGE: float32 b2Position::a -> float32 [b2TimeStep.h <52:2 52:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Velocity::v -> b2Vec2 [b2TimeStep.h <58:2 58:7>]
REFERENCE_TYPE_USAGE: float32 b2Velocity::w -> float32 [b2TimeStep.h <59:2 59:8>]
REFERENCE_TYPE_USAGE: b2TimeStep b2SolverData::step -> b2TimeStep [b2TimeStep.h <65:2 65:11>]
REFERENCE_TYPE_USAGE: b2Position * b2SolverData::positions -> b2Position [b2TimeStep.h <66:2 66:11>]
REFERENCE_TYPE_USAGE: b2Velocity * b2SolverData::velocities -> b2Velocity [b2TimeStep.h <67:2 67:11>]
REFERENCE_TYPE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2Vec2 [b2World.cpp <37:24 37:29>]
REFERENCE_TYPE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2Vec2 [b2World.h <46:16 46:21>]
REFERENCE_TYPE_USAGE: void b2World::SetDestructionListener(b2DestructionListener *) -> void [b2World.cpp <87:1 87:4>]
REFERENCE_TYPE_USAGE: void b2World::SetDestructionListener(b2DestructionListener *) -> void [b2World.h <53:2 53:5>]
REFERENCE_TYPE_USAGE: void b2World::SetDestructionListener(b2DestructionListener *) -> b2DestructionListener [b2World.cpp <87:38 87:58>]
REFERENCE_TYPE_USAGE: void b2World::SetDestructionListener(b2DestructionListener *) -> b2DestructionListener [b2World.h <53:30 53:50>]
REFERENCE_TYPE_USAGE: void b2World::SetContactFilter(b2ContactFilter *) -> void [b2World.cpp <92:1 92:4>]
REFERENCE_TYPE_USAGE: void b2World::SetContactFilter(b2ContactFilter *) -> void [b2World.h <58:2 58:5>]
REFERENCE_TYPE_USAGE: void b2World::SetContactFilter(b2ContactFilter *) -> b2ContactFilter [b2World.cpp <92:32 92:46>]
REFERENCE_TYPE_USAGE: void b2World::SetContactFilter(b2ContactFilter *) -> b2ContactFilter [b2World.h <58:24 58:38>]
REFERENCE_TYPE_USAGE: void b2World::SetContactListener(b2ContactListener *) -> void [b2World.cpp <97:1 97:4>]
REFERENCE_TYPE_USAGE: void b2World::SetContactListener(b2ContactListener *) -> void [b2World.h <62:2 62:5>]
REFERENCE_TYPE_USAGE: void b2World::SetContactListener(b2ContactListener *) -> b2ContactListener [b2World.cpp <97:34 97:50>]
REFERENCE_TYPE_USAGE: void b2World::SetContactListener(b2ContactListener *) -> b2ContactListener [b2World.h <62:26 62:42>]
REFERENCE_TYPE_USAGE: void b2World::SetDebugDraw(b2Draw *) -> void [b2World.cpp <102:1 102:4>]
REFERENCE_TYPE_USAGE: void b2World::SetDebugDraw(b2Draw *) -> void [b2World.h <67:2 67:5>]
REFERENCE_TYPE_USAGE: void b2World::SetDebugDraw(b2Draw *) -> b2Draw [b2World.cpp <102:28 102:33>]
REFERENCE_TYPE_USAGE: void b2World::SetDebugDraw(b2Draw *) -> b2Draw [b2World.h <67:20 67:25>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body [b2World.cpp <107:1 107:6>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body [b2World.cpp <115:47 115:52>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body [b2World.cpp <116:2 116:7>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body [b2World.cpp <116:24 116:29>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body [b2World.h <72:2 72:7>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2BodyDef [b2World.cpp <107:35 107:43>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2BodyDef [b2World.h <72:27 72:35>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> void [b2World.cpp <131:1 131:4>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> void [b2World.cpp <133:2 133:9>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> void [b2World.cpp <134:2 134:9>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> void [b2World.h <78:2 78:5>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body [b2World.cpp <131:27 131:32>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body [b2World.cpp <209:34 209:39>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body [b2World.h <78:19 78:24>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint [b2World.cpp <212:1 212:7>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint [b2World.cpp <220:2 220:8>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint [b2World.h <83:2 83:8>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointDef [b2World.cpp <212:37 212:46>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointDef [b2World.h <83:29 83:38>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> void [b2World.cpp <272:1 272:4>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> void [b2World.cpp <274:2 274:9>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> void [b2World.cpp <346:2 346:9>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> void [b2World.h <87:2 87:5>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint [b2World.cpp <272:28 272:34>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint [b2World.h <87:20 87:26>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> void [b2World.cpp <897:1 897:4>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> void [b2World.h <94:2 94:5>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> float32 [b2World.cpp <897:20 897:26>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> float32 [b2World.h <94:13 94:19>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> int32 [b2World.cpp <897:32 897:36>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> int32 [b2World.cpp <897:58 897:62>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> int32 [b2World.h <95:5 95:9>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> int32 [b2World.h <96:5 96:9>]
REFERENCE_TYPE_USAGE: void b2World::ClearForces() -> void [b2World.cpp <965:1 965:4>]
REFERENCE_TYPE_USAGE: void b2World::ClearForces() -> void [b2World.h <105:2 105:5>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> void [b2World.cpp <1153:1 1153:4>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> void [b2World.h <108:2 108:5>]
REFERENCE_TYPE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> void [b2World.cpp <986:1 986:4>]
REFERENCE_TYPE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> void [b2World.h <114:2 114:5>]
REFERENCE_TYPE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2QueryCallback [b2World.cpp <986:25 986:39>]
REFERENCE_TYPE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2QueryCallback [b2World.h <114:17 114:31>]
REFERENCE_TYPE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2AABB [b2World.cpp <986:58 986:63>]
REFERENCE_TYPE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2AABB [b2World.h <114:50 114:55>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> void [b2World.cpp <1019:1 1019:4>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> void [b2World.h <122:2 122:5>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2RayCastCallback [b2World.cpp <1019:23 1019:39>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2RayCastCallback [b2World.h <122:15 122:31>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2Vec2 [b2World.cpp <1019:58 1019:63>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2Vec2 [b2World.cpp <1019:80 1019:85>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2Vec2 [b2World.h <122:50 122:55>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2Vec2 [b2World.h <122:72 122:77>]
REFERENCE_TYPE_USAGE: b2Body * b2World::GetBodyList() -> b2Body [b2World.h <127:2 127:7>]
REFERENCE_TYPE_USAGE: b2Body * b2World::GetBodyList() -> b2Body [b2World.h <266:8 266:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2World::GetBodyList() const -> b2Body [b2World.h <128:8 128:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2World::GetBodyList() const -> b2Body [b2World.h <271:14 271:19>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::GetJointList() -> b2Joint [b2World.h <133:2 133:8>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::GetJointList() -> b2Joint [b2World.h <276:8 276:14>]
REFERENCE_TYPE_USAGE: const b2Joint * b2World::GetJointList() const -> b2Joint [b2World.h <134:8 134:14>]
REFERENCE_TYPE_USAGE: const b2Joint * b2World::GetJointList() const -> b2Joint [b2World.h <281:14 281:20>]
REFERENCE_TYPE_USAGE: b2Contact * b2World::GetContactList() -> b2Contact [b2World.h <141:2 141:10>]
REFERENCE_TYPE_USAGE: b2Contact * b2World::GetContactList() -> b2Contact [b2World.h <286:8 286:16>]
REFERENCE_TYPE_USAGE: const b2Contact * b2World::GetContactList() const -> b2Contact [b2World.h <142:8 142:16>]
REFERENCE_TYPE_USAGE: const b2Contact * b2World::GetContactList() const -> b2Contact [b2World.h <291:14 291:22>]
REFERENCE_TYPE_USAGE: void b2World::SetAllowSleeping(bool) -> void [b2World.cpp <368:1 368:4>]
REFERENCE_TYPE_USAGE: void b2World::SetAllowSleeping(bool) -> void [b2World.h <145:2 145:5>]
REFERENCE_TYPE_USAGE: void b2World::SetAllowSleeping(bool) -> bool [b2World.cpp <368:32 368:35>]
REFERENCE_TYPE_USAGE: void b2World::SetAllowSleeping(bool) -> bool [b2World.h <145:24 145:27>]
REFERENCE_TYPE_USAGE: bool b2World::GetAllowSleeping() const -> bool [b2World.h <146:2 146:5>]
REFERENCE_USAGE: bool b2World::GetAllowSleeping() const -> bool b2World::m_allowSleep [b2World.h <146:41 146:52>]
REFERENCE_TYPE_USAGE: void b2World::SetWarmStarting(bool) -> void [b2World.h <149:2 149:5>]
REFERENCE_TYPE_USAGE: void b2World::SetWarmStarting(bool) -> bool [b2World.h <149:23 149:26>]
REFERENCE_USAGE: void b2World::SetWarmStarting(bool) -> bool b2World::m_warmStarting [b2World.h <149:36 149:49>]
REFERENCE_TYPE_USAGE: bool b2World::GetWarmStarting() const -> bool [b2World.h <150:2 150:5>]
REFERENCE_USAGE: bool b2World::GetWarmStarting() const -> bool b2World::m_warmStarting [b2World.h <150:40 150:53>]
REFERENCE_TYPE_USAGE: void b2World::SetContinuousPhysics(bool) -> void [b2World.h <153:2 153:5>]
REFERENCE_TYPE_USAGE: void b2World::SetContinuousPhysics(bool) -> bool [b2World.h <153:28 153:31>]
REFERENCE_USAGE: void b2World::SetContinuousPhysics(bool) -> bool b2World::m_continuousPhysics [b2World.h <153:41 153:59>]
REFERENCE_TYPE_USAGE: bool b2World::GetContinuousPhysics() const -> bool [b2World.h <154:2 154:5>]
REFERENCE_USAGE: bool b2World::GetContinuousPhysics() const -> bool b2World::m_continuousPhysics [b2World.h <154:45 154:63>]
REFERENCE_TYPE_USAGE: void b2World::SetSubStepping(bool) -> void [b2World.h <157:2 157:5>]
REFERENCE_TYPE_USAGE: void b2World::SetSubStepping(bool) -> bool [b2World.h <157:22 157:25>]
REFERENCE_USAGE: void b2World::SetSubStepping(bool) -> bool b2World::m_subStepping [b2World.h <157:35 157:47>]
REFERENCE_TYPE_USAGE: bool b2World::GetSubStepping() const -> bool [b2World.h <158:2 158:5>]
REFERENCE_USAGE: bool b2World::GetSubStepping() const -> bool b2World::m_subStepping [b2World.h <158:39 158:51>]
REFERENCE_TYPE_USAGE: int32 b2World::GetProxyCount() const -> int32 [b2World.cpp <1257:1 1257:5>]
REFERENCE_TYPE_USAGE: int32 b2World::GetProxyCount() const -> int32 [b2World.h <161:2 161:6>]
REFERENCE_TYPE_USAGE: int32 b2World::GetBodyCount() const -> int32 [b2World.h <164:2 164:6>]
REFERENCE_TYPE_USAGE: int32 b2World::GetBodyCount() const -> int32 [b2World.h <296:8 296:12>]
REFERENCE_TYPE_USAGE: int32 b2World::GetJointCount() const -> int32 [b2World.h <167:2 167:6>]
REFERENCE_TYPE_USAGE: int32 b2World::GetJointCount() const -> int32 [b2World.h <301:8 301:12>]
REFERENCE_TYPE_USAGE: int32 b2World::GetContactCount() const -> int32 [b2World.h <170:2 170:6>]
REFERENCE_TYPE_USAGE: int32 b2World::GetContactCount() const -> int32 [b2World.h <306:8 306:12>]
REFERENCE_TYPE_USAGE: int32 b2World::GetTreeHeight() const -> int32 [b2World.cpp <1262:1 1262:5>]
REFERENCE_TYPE_USAGE: int32 b2World::GetTreeHeight() const -> int32 [b2World.h <173:2 173:6>]
REFERENCE_TYPE_USAGE: int32 b2World::GetTreeBalance() const -> int32 [b2World.cpp <1267:1 1267:5>]
REFERENCE_TYPE_USAGE: int32 b2World::GetTreeBalance() const -> int32 [b2World.h <176:2 176:6>]
REFERENCE_TYPE_USAGE: float32 b2World::GetTreeQuality() const -> float32 [b2World.cpp <1272:1 1272:7>]
REFERENCE_TYPE_USAGE: float32 b2World::GetTreeQuality() const -> float32 [b2World.h <180:2 180:8>]
REFERENCE_TYPE_USAGE: void b2World::SetGravity(const b2Vec2 &) -> void [b2World.h <183:2 183:5>]
REFERENCE_TYPE_USAGE: void b2World::SetGravity(const b2Vec2 &) -> void [b2World.h <311:8 311:11>]
REFERENCE_TYPE_USAGE: void b2World::SetGravity(const b2Vec2 &) -> b2Vec2 [b2World.h <183:24 183:29>]
REFERENCE_TYPE_USAGE: void b2World::SetGravity(const b2Vec2 &) -> b2Vec2 [b2World.h <311:39 311:44>]
REFERENCE_TYPE_USAGE: b2Vec2 b2World::GetGravity() const -> b2Vec2 [b2World.h <186:2 186:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2World::GetGravity() const -> b2Vec2 [b2World.h <316:8 316:13>]
REFERENCE_TYPE_USAGE: bool b2World::IsLocked() const -> bool [b2World.h <189:2 189:5>]
REFERENCE_TYPE_USAGE: bool b2World::IsLocked() const -> bool [b2World.h <321:8 321:11>]
REFERENCE_TYPE_USAGE: void b2World::SetAutoClearForces(bool) -> void [b2World.h <192:2 192:5>]
REFERENCE_TYPE_USAGE: void b2World::SetAutoClearForces(bool) -> void [b2World.h <326:8 326:11>]
REFERENCE_TYPE_USAGE: void b2World::SetAutoClearForces(bool) -> bool [b2World.h <192:26 192:29>]
REFERENCE_TYPE_USAGE: void b2World::SetAutoClearForces(bool) -> bool [b2World.h <326:41 326:44>]
REFERENCE_TYPE_USAGE: bool b2World::GetAutoClearForces() const -> bool [b2World.h <195:2 195:5>]
REFERENCE_TYPE_USAGE: bool b2World::GetAutoClearForces() const -> bool [b2World.h <339:8 339:11>]
REFERENCE_TYPE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> void [b2World.cpp <1277:1 1277:4>]
REFERENCE_TYPE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> void [b2World.cpp <1279:2 1279:9>]
REFERENCE_TYPE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> void [b2World.h <200:2 200:5>]
REFERENCE_TYPE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2World.cpp <1277:33 1277:38>]
REFERENCE_TYPE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2World.h <200:25 200:30>]
REFERENCE_TYPE_USAGE: const b2ContactManager & b2World::GetContactManager() const -> b2ContactManager [b2World.h <203:8 203:23>]
REFERENCE_TYPE_USAGE: const b2ContactManager & b2World::GetContactManager() const -> b2ContactManager [b2World.h <344:14 344:29>]
REFERENCE_TYPE_USAGE: const b2Profile & b2World::GetProfile() const -> b2Profile [b2World.h <206:8 206:16>]
REFERENCE_TYPE_USAGE: const b2Profile & b2World::GetProfile() const -> b2Profile [b2World.h <349:14 349:22>]
REFERENCE_TYPE_USAGE: void b2World::Dump() -> void [b2World.cpp <1300:1 1300:4>]
REFERENCE_TYPE_USAGE: void b2World::Dump() -> void [b2World.h <210:2 210:5>]
REFERENCE_TYPE_USAGE: b2World -> b2Body [b2World.h <222:15 222:20>]
REFERENCE_TYPE_USAGE: b2World -> b2Fixture [b2World.h <223:15 223:23>]
REFERENCE_TYPE_USAGE: b2World -> b2ContactManager [b2World.h <224:15 224:30>]
REFERENCE_TYPE_USAGE: b2World -> b2Controller [b2World.h <225:15 225:26>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> void [b2World.cpp <386:1 386:4>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> void [b2World.cpp <445:4 445:11>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> void [b2World.cpp <495:5 495:12>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> void [b2World.cpp <524:5 524:12>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> void [b2World.h <227:2 227:5>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2TimeStep [b2World.cpp <386:27 386:36>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2TimeStep [b2World.h <227:19 227:28>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> void [b2World.cpp <577:1 577:4>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> void [b2World.cpp <641:5 641:12>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> void [b2World.cpp <676:5 676:12>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> void [b2World.h <228:2 228:5>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2TimeStep [b2World.cpp <577:30 577:39>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2TimeStep [b2World.cpp <856:3 856:12>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2TimeStep [b2World.h <228:22 228:31>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> void [b2World.cpp <1112:1 1112:4>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> void [b2World.h <230:2 230:5>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Joint [b2World.cpp <1112:25 1112:31>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Joint [b2World.h <230:17 230:23>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void [b2World.cpp <1031:1 1031:4>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void [b2World.cpp <1095:4 1095:11>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void [b2World.h <231:2 231:5>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Fixture [b2World.cpp <1031:25 1031:33>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Fixture [b2World.h <231:17 231:25>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Transform [b2World.cpp <1031:51 1031:61>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Transform [b2World.h <231:41 231:51>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Color [b2World.cpp <1031:74 1031:80>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Color [b2World.cpp <1062:4 1062:10>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Color [b2World.h <231:64 231:70>]
REFERENCE_TYPE_USAGE: b2BlockAllocator b2World::m_blockAllocator -> b2BlockAllocator [b2World.h <233:2 233:17>]
REFERENCE_TYPE_USAGE: b2StackAllocator b2World::m_stackAllocator -> b2StackAllocator [b2World.h <234:2 234:17>]
REFERENCE_TYPE_USAGE: int32 b2World::m_flags -> int32 [b2World.h <236:2 236:6>]
REFERENCE_TYPE_USAGE: b2ContactManager b2World::m_contactManager -> b2ContactManager [b2World.h <238:2 238:17>]
REFERENCE_TYPE_USAGE: b2Body * b2World::m_bodyList -> b2Body [b2World.h <240:2 240:7>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::m_jointList -> b2Joint [b2World.h <241:2 241:8>]
REFERENCE_TYPE_USAGE: int32 b2World::m_bodyCount -> int32 [b2World.h <243:2 243:6>]
REFERENCE_TYPE_USAGE: int32 b2World::m_jointCount -> int32 [b2World.h <244:2 244:6>]
REFERENCE_TYPE_USAGE: b2Vec2 b2World::m_gravity -> b2Vec2 [b2World.h <246:2 246:7>]
REFERENCE_TYPE_USAGE: bool b2World::m_allowSleep -> bool [b2World.h <247:2 247:5>]
REFERENCE_TYPE_USAGE: b2DestructionListener * b2World::m_destructionListener -> b2DestructionListener [b2World.h <249:2 249:22>]
REFERENCE_TYPE_USAGE: b2Draw * b2World::g_debugDraw -> b2Draw [b2World.h <250:2 250:7>]
REFERENCE_TYPE_USAGE: float32 b2World::m_inv_dt0 -> float32 [b2World.h <254:2 254:8>]
REFERENCE_TYPE_USAGE: bool b2World::m_warmStarting -> bool [b2World.h <257:2 257:5>]
REFERENCE_TYPE_USAGE: bool b2World::m_continuousPhysics -> bool [b2World.h <258:2 258:5>]
REFERENCE_TYPE_USAGE: bool b2World::m_subStepping -> bool [b2World.h <259:2 259:5>]
REFERENCE_TYPE_USAGE: bool b2World::m_stepComplete -> bool [b2World.h <261:2 261:5>]
REFERENCE_TYPE_USAGE: b2Profile b2World::m_profile -> b2Profile [b2World.h <263:2 263:10>]
REFERENCE_USAGE: b2Body * b2World::GetBodyList() -> b2Body * b2World::m_bodyList [b2World.h <268:9 268:18>]
REFERENCE_USAGE: const b2Body * b2World::GetBodyList() const -> b2Body * b2World::m_bodyList [b2World.h <273:9 273:18>]
REFERENCE_USAGE: b2Joint * b2World::GetJointList() -> b2Joint * b2World::m_jointList [b2World.h <278:9 278:19>]
REFERENCE_USAGE: const b2Joint * b2World::GetJointList() const -> b2Joint * b2World::m_jointList [b2World.h <283:9 283:19>]
REFERENCE_USAGE: b2Contact * b2World::GetContactList() -> b2Contact * b2ContactManager::m_contactList [b2World.h <288:26 288:38>]
REFERENCE_USAGE: b2Contact * b2World::GetContactList() -> b2ContactManager b2World::m_contactManager [b2World.h <288:9 288:24>]
REFERENCE_USAGE: const b2Contact * b2World::GetContactList() const -> b2Contact * b2ContactManager::m_contactList [b2World.h <293:26 293:38>]
REFERENCE_USAGE: const b2Contact * b2World::GetContactList() const -> b2ContactManager b2World::m_contactManager [b2World.h <293:9 293:24>]
REFERENCE_USAGE: int32 b2World::GetBodyCount() const -> int32 b2World::m_bodyCount [b2World.h <298:9 298:19>]
REFERENCE_USAGE: int32 b2World::GetJointCount() const -> int32 b2World::m_jointCount [b2World.h <303:9 303:20>]
REFERENCE_USAGE: int32 b2World::GetContactCount() const -> int32 b2ContactManager::m_contactCount [b2World.h <308:26 308:39>]
REFERENCE_USAGE: int32 b2World::GetContactCount() const -> b2ContactManager b2World::m_contactManager [b2World.h <308:9 308:24>]
REFERENCE_CALL: void b2World::SetGravity(const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2World.h <313:12 313:12>]
REFERENCE_USAGE: void b2World::SetGravity(const b2Vec2 &) -> b2Vec2 b2World::m_gravity [b2World.h <313:2 313:10>]
REFERENCE_CALL: b2Vec2 b2World::GetGravity() const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2World.h <318:9 318:17>]
REFERENCE_USAGE: b2Vec2 b2World::GetGravity() const -> b2Vec2 b2World::m_gravity [b2World.h <318:9 318:17>]
REFERENCE_USAGE: bool b2World::IsLocked() const -> int32 b2World::m_flags [b2World.h <323:10 323:16>]
REFERENCE_USAGE: bool b2World::IsLocked() const -> b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.h <323:20 323:27>]
REFERENCE_USAGE: bool b2World::IsLocked() const -> b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.h <323:33 323:40>]
REFERENCE_USAGE: void b2World::SetAutoClearForces(bool) -> int32 b2World::m_flags [b2World.h <330:3 330:9>]
REFERENCE_USAGE: void b2World::SetAutoClearForces(bool) -> int32 b2World::m_flags [b2World.h <334:3 334:9>]
REFERENCE_USAGE: void b2World::SetAutoClearForces(bool) -> b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.h <330:14 330:26>]
REFERENCE_USAGE: void b2World::SetAutoClearForces(bool) -> b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.h <334:15 334:27>]
REFERENCE_USAGE: bool b2World::GetAutoClearForces() const -> int32 b2World::m_flags [b2World.h <341:10 341:16>]
REFERENCE_USAGE: bool b2World::GetAutoClearForces() const -> b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.h <341:20 341:32>]
REFERENCE_USAGE: bool b2World::GetAutoClearForces() const -> b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.h <341:38 341:50>]
REFERENCE_USAGE: const b2ContactManager & b2World::GetContactManager() const -> b2ContactManager b2World::m_contactManager [b2World.h <346:9 346:24>]
REFERENCE_USAGE: const b2Profile & b2World::GetProfile() const -> b2Profile b2World::m_profile [b2World.h <351:9 351:17>]
REFERENCE_TYPE_USAGE: float32 b2MassData::mass -> float32 [b2Shape.h <30:2 30:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2MassData::center -> b2Vec2 [b2Shape.h <33:2 33:7>]
REFERENCE_TYPE_USAGE: float32 b2MassData::I -> float32 [b2Shape.h <36:2 36:8>]
REFERENCE_TYPE_USAGE: b2Shape * b2Shape::Clone(b2BlockAllocator *) const -> b2Shape [b2Shape.h <58:10 58:16>]
REFERENCE_TYPE_USAGE: b2Shape * b2Shape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2Shape.h <58:25 58:40>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Shape::GetType() const -> b2Shape::Type [b2Shape.h <62:2 62:5>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Shape::GetType() const -> b2Shape::Type [b2Shape.h <99:17 99:20>]
REFERENCE_TYPE_USAGE: int32 b2Shape::GetChildCount() const -> int32 [b2Shape.h <65:10 65:14>]
REFERENCE_TYPE_USAGE: bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2Shape.h <70:10 70:13>]
REFERENCE_TYPE_USAGE: bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2Shape.h <70:31 70:41>]
REFERENCE_TYPE_USAGE: bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2Shape.h <70:54 70:59>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2Shape.h <77:10 77:13>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2Shape.h <77:23 77:37>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2Shape.h <77:54 77:67>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2Shape.h <78:13 78:23>]
REFERENCE_TYPE_USAGE: bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2Shape.h <78:37 78:41>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2Shape.h <84:10 84:13>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2Shape.h <84:27 84:32>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2Shape.h <84:47 84:57>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2Shape.h <84:64 84:68>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeMass(b2MassData *, float32) const -> void [b2Shape.h <90:10 90:13>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2Shape.h <90:27 90:36>]
REFERENCE_TYPE_USAGE: void b2Shape::ComputeMass(b2MassData *, float32) const -> float32 [b2Shape.h <90:49 90:55>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Shape::m_type -> b2Shape::Type [b2Shape.h <92:2 92:5>]
REFERENCE_TYPE_USAGE: float32 b2Shape::m_radius -> float32 [b2Shape.h <96:2 96:8>]
REFERENCE_USAGE: b2Shape::Type b2Shape::GetType() const -> b2Shape::Type b2Shape::m_type [b2Shape.h <101:9 101:14>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2Vec2 b2BodyDef::position [b2Body.h <54:2 54:10>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2Vec2 b2BodyDef::position [b2Body.h <57:3 57:10>]
REFERENCE_CALL: void b2BodyDef::b2BodyDef() -> void b2Vec2::b2Vec2() [b2Body.h <54:2 54:10>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2Vec2 b2BodyDef::linearVelocity [b2Body.h <54:2 54:10>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2Vec2 b2BodyDef::linearVelocity [b2Body.h <59:3 59:16>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> void * b2BodyDef::userData [b2Body.h <56:3 56:10>]
REFERENCE_CALL: void b2BodyDef::b2BodyDef() -> void b2Vec2::Set(float32, float32) [b2Body.h <57:12 57:14>]
REFERENCE_CALL: void b2BodyDef::b2BodyDef() -> void b2Vec2::Set(float32, float32) [b2Body.h <59:18 59:20>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> float32 b2BodyDef::angle [b2Body.h <58:3 58:7>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> float32 b2BodyDef::angularVelocity [b2Body.h <60:3 60:17>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> float32 b2BodyDef::linearDamping [b2Body.h <61:3 61:15>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> float32 b2BodyDef::angularDamping [b2Body.h <62:3 62:16>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> bool b2BodyDef::allowSleep [b2Body.h <63:3 63:12>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> bool b2BodyDef::awake [b2Body.h <64:3 64:7>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> bool b2BodyDef::fixedRotation [b2Body.h <65:3 65:15>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> bool b2BodyDef::bullet [b2Body.h <66:3 66:8>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2BodyType b2BodyDef::type [b2Body.h <67:3 67:6>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> b2BodyType::b2_staticBody [b2Body.h <67:10 67:22>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> bool b2BodyDef::active [b2Body.h <68:3 68:8>]
REFERENCE_USAGE: void b2BodyDef::b2BodyDef() -> float32 b2BodyDef::gravityScale [b2Body.h <69:3 69:14>]
REFERENCE_TYPE_USAGE: b2BodyType b2BodyDef::type -> b2BodyType [b2Body.h <74:2 74:11>]
REFERENCE_TYPE_USAGE: b2Vec2 b2BodyDef::position -> b2Vec2 [b2Body.h <78:2 78:7>]
REFERENCE_TYPE_USAGE: float32 b2BodyDef::angle -> float32 [b2Body.h <81:2 81:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2BodyDef::linearVelocity -> b2Vec2 [b2Body.h <84:2 84:7>]
REFERENCE_TYPE_USAGE: float32 b2BodyDef::angularVelocity -> float32 [b2Body.h <87:2 87:8>]
REFERENCE_TYPE_USAGE: float32 b2BodyDef::linearDamping -> float32 [b2Body.h <93:2 93:8>]
REFERENCE_TYPE_USAGE: float32 b2BodyDef::angularDamping -> float32 [b2Body.h <99:2 99:8>]
REFERENCE_TYPE_USAGE: bool b2BodyDef::allowSleep -> bool [b2Body.h <103:2 103:5>]
REFERENCE_TYPE_USAGE: bool b2BodyDef::awake -> bool [b2Body.h <106:2 106:5>]
REFERENCE_TYPE_USAGE: bool b2BodyDef::fixedRotation -> bool [b2Body.h <109:2 109:5>]
REFERENCE_TYPE_USAGE: bool b2BodyDef::bullet -> bool [b2Body.h <115:2 115:5>]
REFERENCE_TYPE_USAGE: bool b2BodyDef::active -> bool [b2Body.h <118:2 118:5>]
REFERENCE_TYPE_USAGE: void * b2BodyDef::userData -> void [b2Body.h <121:2 121:5>]
REFERENCE_TYPE_USAGE: float32 b2BodyDef::gravityScale -> float32 [b2Body.h <124:2 124:8>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2Fixture [b2Body.h <138:2 138:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2FixtureDef *) -> b2FixtureDef [b2Body.h <138:33 138:44>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> b2Fixture [b2Body.h <147:2 147:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> b2Shape [b2Body.h <147:33 147:39>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::CreateFixture(const b2Shape *, float32) -> float32 [b2Body.h <147:49 147:55>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> void [b2Body.h <156:2 156:5>]
REFERENCE_TYPE_USAGE: void b2Body::DestroyFixture(b2Fixture *) -> b2Fixture [b2Body.h <156:22 156:30>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> void [b2Body.h <163:2 163:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> b2Vec2 [b2Body.h <163:26 163:31>]
REFERENCE_TYPE_USAGE: void b2Body::SetTransform(const b2Vec2 &, float32) -> float32 [b2Body.h <163:44 163:50>]
REFERENCE_TYPE_USAGE: const b2Transform & b2Body::GetTransform() const -> b2Transform [b2Body.h <167:8 167:18>]
REFERENCE_TYPE_USAGE: const b2Transform & b2Body::GetTransform() const -> b2Transform [b2Body.h <480:14 480:24>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetPosition() const -> b2Vec2 [b2Body.h <171:8 171:13>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetPosition() const -> b2Vec2 [b2Body.h <485:14 485:19>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngle() const -> float32 [b2Body.h <175:2 175:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngle() const -> float32 [b2Body.h <490:8 490:14>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetWorldCenter() const -> b2Vec2 [b2Body.h <178:8 178:13>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetWorldCenter() const -> b2Vec2 [b2Body.h <495:14 495:19>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetLocalCenter() const -> b2Vec2 [b2Body.h <181:8 181:13>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetLocalCenter() const -> b2Vec2 [b2Body.h <500:14 500:19>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> void [b2Body.h <185:2 185:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> void [b2Body.h <505:8 505:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2Vec2 [b2Body.h <185:31 185:36>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2Vec2 [b2Body.h <505:45 505:50>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetLinearVelocity() const -> b2Vec2 [b2Body.h <189:8 189:13>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2Body::GetLinearVelocity() const -> b2Vec2 [b2Body.h <520:14 520:19>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularVelocity(float32) -> void [b2Body.h <193:2 193:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularVelocity(float32) -> void [b2Body.h <525:8 525:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularVelocity(float32) -> float32 [b2Body.h <193:26 193:32>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularVelocity(float32) -> float32 [b2Body.h <525:40 525:46>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngularVelocity() const -> float32 [b2Body.h <197:2 197:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngularVelocity() const -> float32 [b2Body.h <540:8 540:14>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> void [b2Body.h <205:2 205:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> void [b2Body.h <740:8 740:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <205:24 205:29>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <205:45 205:50>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <740:38 740:43>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <740:59 740:64>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> bool [b2Body.h <205:60 205:63>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> bool [b2Body.h <740:74 740:77>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> void [b2Body.h <210:2 210:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> void [b2Body.h <760:8 760:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <210:32 210:37>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <760:46 760:51>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> bool [b2Body.h <210:47 210:50>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> bool [b2Body.h <760:61 760:64>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> void [b2Body.h <216:2 216:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> void [b2Body.h <779:8 779:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> float32 [b2Body.h <216:19 216:25>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> float32 [b2Body.h <779:33 779:39>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> bool [b2Body.h <216:35 216:38>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyTorque(float32, bool) -> bool [b2Body.h <779:49 779:52>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> void [b2Body.h <224:2 224:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> void [b2Body.h <798:8 798:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <224:32 224:37>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <224:55 224:60>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <798:46 798:51>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <798:69 798:74>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> bool [b2Body.h <224:70 224:73>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> bool [b2Body.h <798:84 798:87>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> void [b2Body.h <229:2 229:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> void [b2Body.h <818:8 818:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <229:40 229:45>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Vec2 [b2Body.h <818:54 818:59>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> bool [b2Body.h <229:57 229:60>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> bool [b2Body.h <818:71 818:74>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> void [b2Body.h <234:2 234:5>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> void [b2Body.h <837:8 837:11>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> float32 [b2Body.h <234:27 234:33>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> float32 [b2Body.h <837:41 837:47>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> bool [b2Body.h <234:44 234:47>]
REFERENCE_TYPE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> bool [b2Body.h <837:58 837:61>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetMass() const -> float32 [b2Body.h <238:2 238:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetMass() const -> float32 [b2Body.h <545:8 545:14>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetInertia() const -> float32 [b2Body.h <242:2 242:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetInertia() const -> float32 [b2Body.h <550:8 550:14>]
REFERENCE_TYPE_USAGE: void b2Body::GetMassData(b2MassData *) const -> void [b2Body.h <246:2 246:5>]
REFERENCE_TYPE_USAGE: void b2Body::GetMassData(b2MassData *) const -> void [b2Body.h <555:8 555:11>]
REFERENCE_TYPE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2MassData [b2Body.h <246:19 246:28>]
REFERENCE_TYPE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2MassData [b2Body.h <555:33 555:42>]
REFERENCE_TYPE_USAGE: void b2Body::SetMassData(const b2MassData *) -> void [b2Body.h <253:2 253:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetMassData(const b2MassData *) -> b2MassData [b2Body.h <253:25 253:34>]
REFERENCE_TYPE_USAGE: void b2Body::ResetMassData() -> void [b2Body.h <258:2 258:5>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <263:2 263:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <263:29 263:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <562:8 562:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <562:43 562:48>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <268:2 268:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <268:30 268:35>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <567:8 567:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <567:44 567:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <273:2 273:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <273:29 273:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <572:8 572:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <572:43 572:48>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <278:2 278:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <278:30 278:35>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <577:8 577:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Vec2 [b2Body.h <577:44 577:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <283:2 283:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <283:47 283:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <582:8 582:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <582:61 582:66>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <288:2 288:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <288:47 288:52>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <587:8 587:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 [b2Body.h <587:61 587:66>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetLinearDamping() const -> float32 [b2Body.h <291:2 291:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetLinearDamping() const -> float32 [b2Body.h <592:8 592:14>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearDamping(float32) -> void [b2Body.h <294:2 294:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearDamping(float32) -> void [b2Body.h <597:8 597:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearDamping(float32) -> float32 [b2Body.h <294:24 294:30>]
REFERENCE_TYPE_USAGE: void b2Body::SetLinearDamping(float32) -> float32 [b2Body.h <597:38 597:44>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngularDamping() const -> float32 [b2Body.h <297:2 297:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetAngularDamping() const -> float32 [b2Body.h <602:8 602:14>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularDamping(float32) -> void [b2Body.h <300:2 300:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularDamping(float32) -> void [b2Body.h <607:8 607:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularDamping(float32) -> float32 [b2Body.h <300:25 300:31>]
REFERENCE_TYPE_USAGE: void b2Body::SetAngularDamping(float32) -> float32 [b2Body.h <607:39 607:45>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetGravityScale() const -> float32 [b2Body.h <303:2 303:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::GetGravityScale() const -> float32 [b2Body.h <612:8 612:14>]
REFERENCE_TYPE_USAGE: void b2Body::SetGravityScale(float32) -> void [b2Body.h <306:2 306:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetGravityScale(float32) -> void [b2Body.h <617:8 617:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetGravityScale(float32) -> float32 [b2Body.h <306:23 306:29>]
REFERENCE_TYPE_USAGE: void b2Body::SetGravityScale(float32) -> float32 [b2Body.h <617:37 617:43>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> void [b2Body.h <309:2 309:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetType(b2BodyType) -> b2BodyType [b2Body.h <309:15 309:24>]
REFERENCE_TYPE_USAGE: b2BodyType b2Body::GetType() const -> b2BodyType [b2Body.h <312:2 312:11>]
REFERENCE_TYPE_USAGE: b2BodyType b2Body::GetType() const -> b2BodyType [b2Body.h <475:8 475:17>]
REFERENCE_TYPE_USAGE: void b2Body::SetBullet(bool) -> void [b2Body.h <315:2 315:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetBullet(bool) -> void [b2Body.h <622:8 622:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetBullet(bool) -> bool [b2Body.h <315:17 315:20>]
REFERENCE_TYPE_USAGE: void b2Body::SetBullet(bool) -> bool [b2Body.h <622:31 622:34>]
REFERENCE_TYPE_USAGE: bool b2Body::IsBullet() const -> bool [b2Body.h <318:2 318:5>]
REFERENCE_TYPE_USAGE: bool b2Body::IsBullet() const -> bool [b2Body.h <634:8 634:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetSleepingAllowed(bool) -> void [b2Body.h <322:2 322:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetSleepingAllowed(bool) -> void [b2Body.h <672:8 672:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetSleepingAllowed(bool) -> bool [b2Body.h <322:26 322:29>]
REFERENCE_TYPE_USAGE: void b2Body::SetSleepingAllowed(bool) -> bool [b2Body.h <672:40 672:43>]
REFERENCE_TYPE_USAGE: bool b2Body::IsSleepingAllowed() const -> bool [b2Body.h <325:2 325:5>]
REFERENCE_TYPE_USAGE: bool b2Body::IsSleepingAllowed() const -> bool [b2Body.h <685:8 685:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetAwake(bool) -> void [b2Body.h <330:2 330:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetAwake(bool) -> void [b2Body.h <639:8 639:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetAwake(bool) -> bool [b2Body.h <330:16 330:19>]
REFERENCE_TYPE_USAGE: void b2Body::SetAwake(bool) -> bool [b2Body.h <639:30 639:33>]
REFERENCE_TYPE_USAGE: bool b2Body::IsAwake() const -> bool [b2Body.h <334:2 334:5>]
REFERENCE_TYPE_USAGE: bool b2Body::IsAwake() const -> bool [b2Body.h <657:8 657:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> void [b2Body.h <349:2 349:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetActive(bool) -> bool [b2Body.h <349:17 349:20>]
REFERENCE_TYPE_USAGE: bool b2Body::IsActive() const -> bool [b2Body.h <352:2 352:5>]
REFERENCE_TYPE_USAGE: bool b2Body::IsActive() const -> bool [b2Body.h <662:8 662:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetFixedRotation(bool) -> void [b2Body.h <356:2 356:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetFixedRotation(bool) -> bool [b2Body.h <356:24 356:27>]
REFERENCE_TYPE_USAGE: bool b2Body::IsFixedRotation() const -> bool [b2Body.h <359:2 359:5>]
REFERENCE_TYPE_USAGE: bool b2Body::IsFixedRotation() const -> bool [b2Body.h <667:8 667:11>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::GetFixtureList() -> b2Fixture [b2Body.h <362:2 362:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::GetFixtureList() -> b2Fixture [b2Body.h <690:8 690:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Body::GetFixtureList() const -> b2Fixture [b2Body.h <363:8 363:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Body::GetFixtureList() const -> b2Fixture [b2Body.h <695:14 695:22>]
REFERENCE_TYPE_USAGE: b2JointEdge * b2Body::GetJointList() -> b2JointEdge [b2Body.h <366:2 366:12>]
REFERENCE_TYPE_USAGE: b2JointEdge * b2Body::GetJointList() -> b2JointEdge [b2Body.h <700:8 700:18>]
REFERENCE_TYPE_USAGE: const b2JointEdge * b2Body::GetJointList() const -> b2JointEdge [b2Body.h <367:8 367:18>]
REFERENCE_TYPE_USAGE: const b2JointEdge * b2Body::GetJointList() const -> b2JointEdge [b2Body.h <705:14 705:24>]
REFERENCE_TYPE_USAGE: b2ContactEdge * b2Body::GetContactList() -> b2ContactEdge [b2Body.h <372:2 372:14>]
REFERENCE_TYPE_USAGE: b2ContactEdge * b2Body::GetContactList() -> b2ContactEdge [b2Body.h <710:8 710:20>]
REFERENCE_TYPE_USAGE: const b2ContactEdge * b2Body::GetContactList() const -> b2ContactEdge [b2Body.h <373:8 373:20>]
REFERENCE_TYPE_USAGE: const b2ContactEdge * b2Body::GetContactList() const -> b2ContactEdge [b2Body.h <715:14 715:26>]
REFERENCE_TYPE_USAGE: b2Body * b2Body::GetNext() -> b2Body [b2Body.h <376:2 376:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Body::GetNext() -> b2Body [b2Body.h <720:8 720:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2Body::GetNext() const -> b2Body [b2Body.h <377:8 377:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2Body::GetNext() const -> b2Body [b2Body.h <725:14 725:19>]
REFERENCE_TYPE_USAGE: void * b2Body::GetUserData() const -> void [b2Body.h <380:2 380:5>]
REFERENCE_TYPE_USAGE: void * b2Body::GetUserData() const -> void [b2Body.h <735:8 735:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetUserData(void *) -> void [b2Body.h <383:2 383:5>]
REFERENCE_TYPE_USAGE: void b2Body::SetUserData(void *) -> void [b2Body.h <383:19 383:22>]
REFERENCE_TYPE_USAGE: void b2Body::SetUserData(void *) -> void [b2Body.h <730:8 730:11>]
REFERENCE_TYPE_USAGE: void b2Body::SetUserData(void *) -> void [b2Body.h <730:33 730:36>]
REFERENCE_TYPE_USAGE: b2World * b2Body::GetWorld() -> b2World [b2Body.h <386:2 386:8>]
REFERENCE_TYPE_USAGE: b2World * b2Body::GetWorld() -> b2World [b2Body.h <872:8 872:14>]
REFERENCE_TYPE_USAGE: const b2World * b2Body::GetWorld() const -> b2World [b2Body.h <387:8 387:14>]
REFERENCE_TYPE_USAGE: const b2World * b2Body::GetWorld() const -> b2World [b2Body.h <877:14 877:20>]
REFERENCE_TYPE_USAGE: void b2Body::Dump() -> void [b2Body.h <390:2 390:5>]
REFERENCE_TYPE_USAGE: b2Body -> b2World [b2Body.h <394:15 394:21>]
REFERENCE_TYPE_USAGE: b2Body -> b2Island [b2Body.h <395:15 395:22>]
REFERENCE_TYPE_USAGE: b2Body -> b2ContactManager [b2Body.h <396:15 396:30>]
REFERENCE_TYPE_USAGE: b2Body -> b2ContactSolver [b2Body.h <397:15 397:29>]
REFERENCE_TYPE_USAGE: b2Body -> b2Contact [b2Body.h <398:15 398:23>]
REFERENCE_TYPE_USAGE: b2Body -> b2DistanceJoint [b2Body.h <400:15 400:29>]
REFERENCE_TYPE_USAGE: b2Body -> b2FrictionJoint [b2Body.h <401:15 401:29>]
REFERENCE_TYPE_USAGE: b2Body -> b2GearJoint [b2Body.h <402:15 402:25>]
REFERENCE_TYPE_USAGE: b2Body -> b2MotorJoint [b2Body.h <403:15 403:26>]
REFERENCE_TYPE_USAGE: b2Body -> b2MouseJoint [b2Body.h <404:15 404:26>]
REFERENCE_TYPE_USAGE: b2Body -> b2PrismaticJoint [b2Body.h <405:15 405:30>]
REFERENCE_TYPE_USAGE: b2Body -> b2PulleyJoint [b2Body.h <406:15 406:27>]
REFERENCE_TYPE_USAGE: b2Body -> b2RevoluteJoint [b2Body.h <407:15 407:29>]
REFERENCE_TYPE_USAGE: b2Body -> b2RopeJoint [b2Body.h <408:15 408:25>]
REFERENCE_TYPE_USAGE: b2Body -> b2WeldJoint [b2Body.h <409:15 409:25>]
REFERENCE_TYPE_USAGE: b2Body -> b2WheelJoint [b2Body.h <410:15 410:26>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2BodyDef [b2Body.h <424:15 424:23>]
REFERENCE_TYPE_USAGE: void b2Body::b2Body(const b2BodyDef *, b2World *) -> b2World [b2Body.h <424:30 424:36>]
REFERENCE_TYPE_USAGE: void b2Body::SynchronizeFixtures() -> void [b2Body.h <427:2 427:5>]
REFERENCE_TYPE_USAGE: void b2Body::SynchronizeTransform() -> void [b2Body.h <428:2 428:5>]
REFERENCE_TYPE_USAGE: void b2Body::SynchronizeTransform() -> void [b2Body.h <856:8 856:11>]
REFERENCE_TYPE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> bool [b2Body.h <432:2 432:5>]
REFERENCE_TYPE_USAGE: bool b2Body::ShouldCollide(const b2Body *) const -> b2Body [b2Body.h <432:27 432:32>]
REFERENCE_TYPE_USAGE: void b2Body::Advance(float32) -> void [b2Body.h <434:2 434:5>]
REFERENCE_TYPE_USAGE: void b2Body::Advance(float32) -> void [b2Body.h <862:8 862:11>]
REFERENCE_TYPE_USAGE: void b2Body::Advance(float32) -> float32 [b2Body.h <434:15 434:21>]
REFERENCE_TYPE_USAGE: void b2Body::Advance(float32) -> float32 [b2Body.h <862:29 862:35>]
REFERENCE_TYPE_USAGE: b2BodyType b2Body::m_type -> b2BodyType [b2Body.h <436:2 436:11>]
REFERENCE_TYPE_USAGE: uint16 b2Body::m_flags -> uint16 [b2Body.h <438:2 438:7>]
REFERENCE_TYPE_USAGE: int32 b2Body::m_islandIndex -> int32 [b2Body.h <440:2 440:6>]
REFERENCE_TYPE_USAGE: b2Transform b2Body::m_xf -> b2Transform [b2Body.h <442:2 442:12>]
REFERENCE_TYPE_USAGE: b2Sweep b2Body::m_sweep -> b2Sweep [b2Body.h <443:2 443:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::m_linearVelocity -> b2Vec2 [b2Body.h <445:2 445:7>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_angularVelocity -> float32 [b2Body.h <446:2 446:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Body::m_force -> b2Vec2 [b2Body.h <448:2 448:7>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_torque -> float32 [b2Body.h <449:2 449:8>]
REFERENCE_TYPE_USAGE: b2World * b2Body::m_world -> b2World [b2Body.h <451:2 451:8>]
REFERENCE_TYPE_USAGE: b2Body * b2Body::m_prev -> b2Body [b2Body.h <452:2 452:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Body::m_next -> b2Body [b2Body.h <453:2 453:7>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Body::m_fixtureList -> b2Fixture [b2Body.h <455:2 455:10>]
REFERENCE_TYPE_USAGE: int32 b2Body::m_fixtureCount -> int32 [b2Body.h <456:2 456:6>]
REFERENCE_TYPE_USAGE: b2JointEdge * b2Body::m_jointList -> b2JointEdge [b2Body.h <458:2 458:12>]
REFERENCE_TYPE_USAGE: b2ContactEdge * b2Body::m_contactList -> b2ContactEdge [b2Body.h <459:2 459:14>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_mass -> float32 [b2Body.h <461:2 461:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_invMass -> float32 [b2Body.h <461:2 461:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_I -> float32 [b2Body.h <464:2 464:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_invI -> float32 [b2Body.h <464:2 464:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_linearDamping -> float32 [b2Body.h <466:2 466:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_angularDamping -> float32 [b2Body.h <467:2 467:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_gravityScale -> float32 [b2Body.h <468:2 468:8>]
REFERENCE_TYPE_USAGE: float32 b2Body::m_sleepTime -> float32 [b2Body.h <470:2 470:8>]
REFERENCE_TYPE_USAGE: void * b2Body::m_userData -> void [b2Body.h <472:2 472:5>]
REFERENCE_USAGE: b2BodyType b2Body::GetType() const -> b2BodyType b2Body::m_type [b2Body.h <477:9 477:14>]
REFERENCE_USAGE: const b2Transform & b2Body::GetTransform() const -> b2Transform b2Body::m_xf [b2Body.h <482:9 482:12>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetPosition() const -> b2Vec2 b2Transform::p [b2Body.h <487:14 487:14>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetPosition() const -> b2Transform b2Body::m_xf [b2Body.h <487:9 487:12>]
REFERENCE_USAGE: float32 b2Body::GetAngle() const -> float32 b2Sweep::a [b2Body.h <492:17 492:17>]
REFERENCE_USAGE: float32 b2Body::GetAngle() const -> b2Sweep b2Body::m_sweep [b2Body.h <492:9 492:15>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetWorldCenter() const -> b2Vec2 b2Sweep::c [b2Body.h <497:17 497:17>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetWorldCenter() const -> b2Sweep b2Body::m_sweep [b2Body.h <497:9 497:15>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetLocalCenter() const -> b2Vec2 b2Sweep::localCenter [b2Body.h <502:17 502:27>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetLocalCenter() const -> b2Sweep b2Body::m_sweep [b2Body.h <502:9 502:15>]
REFERENCE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2BodyType b2Body::m_type [b2Body.h <507:6 507:11>]
REFERENCE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2BodyType::b2_staticBody [b2Body.h <507:16 507:28>]
REFERENCE_CALL: void b2Body::SetLinearVelocity(const b2Vec2 &) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Body.h <512:6 512:10>]
REFERENCE_CALL: void b2Body::SetLinearVelocity(const b2Vec2 &) -> void b2Body::SetAwake(bool) [b2Body.h <514:3 514:10>]
REFERENCE_CALL: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.h <517:19 517:19>]
REFERENCE_USAGE: void b2Body::SetLinearVelocity(const b2Vec2 &) -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <517:2 517:17>]
REFERENCE_USAGE: const b2Vec2 & b2Body::GetLinearVelocity() const -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <522:9 522:24>]
REFERENCE_USAGE: void b2Body::SetAngularVelocity(float32) -> b2BodyType b2Body::m_type [b2Body.h <527:6 527:11>]
REFERENCE_USAGE: void b2Body::SetAngularVelocity(float32) -> b2BodyType::b2_staticBody [b2Body.h <527:16 527:28>]
REFERENCE_CALL: void b2Body::SetAngularVelocity(float32) -> void b2Body::SetAwake(bool) [b2Body.h <534:3 534:10>]
REFERENCE_USAGE: void b2Body::SetAngularVelocity(float32) -> float32 b2Body::m_angularVelocity [b2Body.h <537:2 537:18>]
REFERENCE_USAGE: float32 b2Body::GetAngularVelocity() const -> float32 b2Body::m_angularVelocity [b2Body.h <542:9 542:25>]
REFERENCE_USAGE: float32 b2Body::GetMass() const -> float32 b2Body::m_mass [b2Body.h <547:9 547:14>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> float32 b2Body::m_I [b2Body.h <552:9 552:11>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> float32 b2Body::m_mass [b2Body.h <552:15 552:20>]
REFERENCE_CALL: float32 b2Body::GetInertia() const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Body.h <552:24 552:28>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> b2Vec2 b2Sweep::localCenter [b2Body.h <552:38 552:48>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> b2Vec2 b2Sweep::localCenter [b2Body.h <552:59 552:69>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> b2Sweep b2Body::m_sweep [b2Body.h <552:30 552:36>]
REFERENCE_USAGE: float32 b2Body::GetInertia() const -> b2Sweep b2Body::m_sweep [b2Body.h <552:51 552:57>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> float32 b2MassData::mass [b2Body.h <557:8 557:11>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> float32 b2Body::m_mass [b2Body.h <557:15 557:20>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> float32 b2Body::m_mass [b2Body.h <558:18 558:23>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> float32 b2MassData::I [b2Body.h <558:8 558:8>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> float32 b2Body::m_I [b2Body.h <558:12 558:14>]
REFERENCE_CALL: void b2Body::GetMassData(b2MassData *) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Body.h <558:27 558:31>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Vec2 b2Sweep::localCenter [b2Body.h <558:41 558:51>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Vec2 b2Sweep::localCenter [b2Body.h <558:62 558:72>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Vec2 b2Sweep::localCenter [b2Body.h <559:25 559:35>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Sweep b2Body::m_sweep [b2Body.h <558:33 558:39>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Sweep b2Body::m_sweep [b2Body.h <558:54 558:60>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Sweep b2Body::m_sweep [b2Body.h <559:17 559:23>]
REFERENCE_CALL: void b2Body::GetMassData(b2MassData *) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.h <559:15 559:15>]
REFERENCE_USAGE: void b2Body::GetMassData(b2MassData *) const -> b2Vec2 b2MassData::center [b2Body.h <559:8 559:13>]
REFERENCE_CALL: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Body.h <564:9 564:13>]
REFERENCE_USAGE: b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const -> b2Transform b2Body::m_xf [b2Body.h <564:15 564:18>]
REFERENCE_CALL: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Body.h <569:9 569:13>]
REFERENCE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Rot b2Transform::q [b2Body.h <569:20 569:20>]
REFERENCE_USAGE: b2Vec2 b2Body::GetWorldVector(const b2Vec2 &) const -> b2Transform b2Body::m_xf [b2Body.h <569:15 569:18>]
REFERENCE_CALL: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Vec2 b2MulT(const b2Transform &, const b2Vec2 &) [b2Body.h <574:9 574:14>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const -> b2Transform b2Body::m_xf [b2Body.h <574:16 574:19>]
REFERENCE_CALL: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2Body.h <579:9 579:14>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Rot b2Transform::q [b2Body.h <579:21 579:21>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLocalVector(const b2Vec2 &) const -> b2Transform b2Body::m_xf [b2Body.h <579:16 579:19>]
REFERENCE_CALL: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Body.h <584:26 584:26>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <584:9 584:24>]
REFERENCE_CALL: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 b2Cross(float32, const b2Vec2 &) [b2Body.h <584:28 584:34>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> float32 b2Body::m_angularVelocity [b2Body.h <584:36 584:52>]
REFERENCE_CALL: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.h <584:66 584:66>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Vec2 b2Sweep::c [b2Body.h <584:76 584:76>]
REFERENCE_USAGE: b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const -> b2Sweep b2Body::m_sweep [b2Body.h <584:68 584:74>]
REFERENCE_CALL: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2 &) const [b2Body.h <589:9 589:39>]
REFERENCE_CALL: b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2 &) const -> b2Vec2 b2Body::GetWorldPoint(const b2Vec2 &) const [b2Body.h <589:41 589:53>]
REFERENCE_USAGE: float32 b2Body::GetLinearDamping() const -> float32 b2Body::m_linearDamping [b2Body.h <594:9 594:23>]
REFERENCE_USAGE: void b2Body::SetLinearDamping(float32) -> float32 b2Body::m_linearDamping [b2Body.h <599:2 599:16>]
REFERENCE_USAGE: float32 b2Body::GetAngularDamping() const -> float32 b2Body::m_angularDamping [b2Body.h <604:9 604:24>]
REFERENCE_USAGE: void b2Body::SetAngularDamping(float32) -> float32 b2Body::m_angularDamping [b2Body.h <609:2 609:17>]
REFERENCE_USAGE: float32 b2Body::GetGravityScale() const -> float32 b2Body::m_gravityScale [b2Body.h <614:9 614:22>]
REFERENCE_USAGE: void b2Body::SetGravityScale(float32) -> float32 b2Body::m_gravityScale [b2Body.h <619:2 619:15>]
REFERENCE_USAGE: void b2Body::SetBullet(bool) -> uint16 b2Body::m_flags [b2Body.h <626:3 626:9>]
REFERENCE_USAGE: void b2Body::SetBullet(bool) -> uint16 b2Body::m_flags [b2Body.h <630:3 630:9>]
REFERENCE_USAGE: void b2Body::SetBullet(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.h <626:14 626:25>]
REFERENCE_USAGE: void b2Body::SetBullet(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.h <630:15 630:26>]
REFERENCE_USAGE: bool b2Body::IsBullet() const -> uint16 b2Body::m_flags [b2Body.h <636:10 636:16>]
REFERENCE_USAGE: bool b2Body::IsBullet() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.h <636:20 636:31>]
REFERENCE_USAGE: bool b2Body::IsBullet() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_bulletFlag [b2Body.h <636:37 636:48>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> uint16 b2Body::m_flags [b2Body.h <643:3 643:9>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> uint16 b2Body::m_flags [b2Body.h <648:3 648:9>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <643:14 643:24>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <648:15 648:25>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> float32 b2Body::m_sleepTime [b2Body.h <644:3 644:13>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> float32 b2Body::m_sleepTime [b2Body.h <649:3 649:13>]
REFERENCE_CALL: void b2Body::SetAwake(bool) -> void b2Vec2::SetZero() [b2Body.h <650:20 650:26>]
REFERENCE_CALL: void b2Body::SetAwake(bool) -> void b2Vec2::SetZero() [b2Body.h <652:11 652:17>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <650:3 650:18>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> float32 b2Body::m_angularVelocity [b2Body.h <651:3 651:19>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> b2Vec2 b2Body::m_force [b2Body.h <652:3 652:9>]
REFERENCE_USAGE: void b2Body::SetAwake(bool) -> float32 b2Body::m_torque [b2Body.h <653:3 653:10>]
REFERENCE_USAGE: bool b2Body::IsAwake() const -> uint16 b2Body::m_flags [b2Body.h <659:10 659:16>]
REFERENCE_USAGE: bool b2Body::IsAwake() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <659:20 659:30>]
REFERENCE_USAGE: bool b2Body::IsAwake() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <659:36 659:46>]
REFERENCE_USAGE: bool b2Body::IsActive() const -> uint16 b2Body::m_flags [b2Body.h <664:10 664:16>]
REFERENCE_USAGE: bool b2Body::IsActive() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.h <664:20 664:31>]
REFERENCE_USAGE: bool b2Body::IsActive() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_activeFlag [b2Body.h <664:37 664:48>]
REFERENCE_USAGE: bool b2Body::IsFixedRotation() const -> uint16 b2Body::m_flags [b2Body.h <669:10 669:16>]
REFERENCE_USAGE: bool b2Body::IsFixedRotation() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.h <669:20 669:38>]
REFERENCE_USAGE: bool b2Body::IsFixedRotation() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_fixedRotationFlag [b2Body.h <669:44 669:62>]
REFERENCE_USAGE: void b2Body::SetSleepingAllowed(bool) -> uint16 b2Body::m_flags [b2Body.h <676:3 676:9>]
REFERENCE_USAGE: void b2Body::SetSleepingAllowed(bool) -> uint16 b2Body::m_flags [b2Body.h <680:3 680:9>]
REFERENCE_USAGE: void b2Body::SetSleepingAllowed(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.h <676:14 676:28>]
REFERENCE_USAGE: void b2Body::SetSleepingAllowed(bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.h <680:15 680:29>]
REFERENCE_CALL: void b2Body::SetSleepingAllowed(bool) -> void b2Body::SetAwake(bool) [b2Body.h <681:3 681:10>]
REFERENCE_USAGE: bool b2Body::IsSleepingAllowed() const -> uint16 b2Body::m_flags [b2Body.h <687:10 687:16>]
REFERENCE_USAGE: bool b2Body::IsSleepingAllowed() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.h <687:20 687:34>]
REFERENCE_USAGE: bool b2Body::IsSleepingAllowed() const -> b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Body.h <687:40 687:54>]
REFERENCE_USAGE: b2Fixture * b2Body::GetFixtureList() -> b2Fixture * b2Body::m_fixtureList [b2Body.h <692:9 692:21>]
REFERENCE_USAGE: const b2Fixture * b2Body::GetFixtureList() const -> b2Fixture * b2Body::m_fixtureList [b2Body.h <697:9 697:21>]
REFERENCE_USAGE: b2JointEdge * b2Body::GetJointList() -> b2JointEdge * b2Body::m_jointList [b2Body.h <702:9 702:19>]
REFERENCE_USAGE: const b2JointEdge * b2Body::GetJointList() const -> b2JointEdge * b2Body::m_jointList [b2Body.h <707:9 707:19>]
REFERENCE_USAGE: b2ContactEdge * b2Body::GetContactList() -> b2ContactEdge * b2Body::m_contactList [b2Body.h <712:9 712:21>]
REFERENCE_USAGE: const b2ContactEdge * b2Body::GetContactList() const -> b2ContactEdge * b2Body::m_contactList [b2Body.h <717:9 717:21>]
REFERENCE_USAGE: b2Body * b2Body::GetNext() -> b2Body * b2Body::m_next [b2Body.h <722:9 722:14>]
REFERENCE_USAGE: const b2Body * b2Body::GetNext() const -> b2Body * b2Body::m_next [b2Body.h <727:9 727:14>]
REFERENCE_USAGE: void b2Body::SetUserData(void *) -> void * b2Body::m_userData [b2Body.h <732:2 732:11>]
REFERENCE_USAGE: void * b2Body::GetUserData() const -> void * b2Body::m_userData [b2Body.h <737:9 737:18>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2BodyType b2Body::m_type [b2Body.h <742:6 742:11>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <742:16 742:29>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <747:15 747:21>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <753:6 753:12>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <747:25 747:35>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <753:16 753:26>]
REFERENCE_CALL: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> void b2Body::SetAwake(bool) [b2Body.h <749:3 749:10>]
REFERENCE_CALL: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Body.h <755:11 755:12>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 b2Body::m_force [b2Body.h <755:3 755:9>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Body::m_torque [b2Body.h <756:3 756:10>]
REFERENCE_CALL: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2Body.h <756:15 756:21>]
REFERENCE_CALL: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.h <756:29 756:29>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 b2Sweep::c [b2Body.h <756:39 756:39>]
REFERENCE_USAGE: void b2Body::ApplyForce(const b2Vec2 &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Body.h <756:31 756:37>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2BodyType b2Body::m_type [b2Body.h <762:6 762:11>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <762:16 762:29>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <767:15 767:21>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <773:6 773:12>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <767:25 767:35>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <773:16 773:26>]
REFERENCE_CALL: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> void b2Body::SetAwake(bool) [b2Body.h <769:3 769:10>]
REFERENCE_CALL: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Body.h <775:11 775:12>]
REFERENCE_USAGE: void b2Body::ApplyForceToCenter(const b2Vec2 &, bool) -> b2Vec2 b2Body::m_force [b2Body.h <775:3 775:9>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> b2BodyType b2Body::m_type [b2Body.h <781:6 781:11>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <781:16 781:29>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> uint16 b2Body::m_flags [b2Body.h <786:15 786:21>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> uint16 b2Body::m_flags [b2Body.h <792:6 792:12>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <786:25 786:35>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <792:16 792:26>]
REFERENCE_CALL: void b2Body::ApplyTorque(float32, bool) -> void b2Body::SetAwake(bool) [b2Body.h <788:3 788:10>]
REFERENCE_USAGE: void b2Body::ApplyTorque(float32, bool) -> float32 b2Body::m_torque [b2Body.h <794:3 794:10>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2BodyType b2Body::m_type [b2Body.h <800:6 800:11>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <800:16 800:29>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <805:15 805:21>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <811:6 811:12>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <805:25 805:35>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <811:16 811:26>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> void b2Body::SetAwake(bool) [b2Body.h <807:3 807:10>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Body.h <813:20 813:21>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <813:3 813:18>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Body.h <813:33 813:33>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Body::m_invMass [b2Body.h <813:23 813:31>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Body::m_angularVelocity [b2Body.h <814:3 814:19>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Body::m_invI [b2Body.h <814:24 814:29>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2Body.h <814:33 814:39>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.h <814:47 814:47>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Vec2 b2Sweep::c [b2Body.h <814:57 814:57>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulse(const b2Vec2 &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Body.h <814:49 814:55>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2BodyType b2Body::m_type [b2Body.h <820:6 820:11>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <820:16 820:29>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <825:15 825:21>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Body.h <831:6 831:12>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <825:25 825:35>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <831:16 831:26>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> void b2Body::SetAwake(bool) [b2Body.h <827:3 827:10>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Body.h <833:20 833:21>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Vec2 b2Body::m_linearVelocity [b2Body.h <833:3 833:18>]
REFERENCE_CALL: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Body.h <833:33 833:33>]
REFERENCE_USAGE: void b2Body::ApplyLinearImpulseToCenter(const b2Vec2 &, bool) -> float32 b2Body::m_invMass [b2Body.h <833:23 833:31>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> b2BodyType b2Body::m_type [b2Body.h <839:6 839:11>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> b2BodyType::b2_dynamicBody [b2Body.h <839:16 839:29>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> uint16 b2Body::m_flags [b2Body.h <844:15 844:21>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> uint16 b2Body::m_flags [b2Body.h <850:6 850:12>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <844:25 844:35>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2Body.h <850:16 850:26>]
REFERENCE_CALL: void b2Body::ApplyAngularImpulse(float32, bool) -> void b2Body::SetAwake(bool) [b2Body.h <846:3 846:10>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> float32 b2Body::m_angularVelocity [b2Body.h <852:3 852:19>]
REFERENCE_USAGE: void b2Body::ApplyAngularImpulse(float32, bool) -> float32 b2Body::m_invI [b2Body.h <852:24 852:29>]
REFERENCE_CALL: void b2Body::SynchronizeTransform() -> void b2Rot::Set(float32) [b2Body.h <858:9 858:11>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Rot b2Transform::q [b2Body.h <858:7 858:7>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Rot b2Transform::q [b2Body.h <859:34 859:34>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Transform b2Body::m_xf [b2Body.h <858:2 858:5>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Transform b2Body::m_xf [b2Body.h <859:2 859:5>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Transform b2Body::m_xf [b2Body.h <859:29 859:32>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> float32 b2Sweep::a [b2Body.h <858:21 858:21>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Sweep b2Body::m_sweep [b2Body.h <858:13 858:19>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Sweep b2Body::m_sweep [b2Body.h <859:11 859:17>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Sweep b2Body::m_sweep [b2Body.h <859:37 859:43>]
REFERENCE_CALL: void b2Body::SynchronizeTransform() -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Body.h <859:9 859:9>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Vec2 b2Transform::p [b2Body.h <859:7 859:7>]
REFERENCE_CALL: void b2Body::SynchronizeTransform() -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.h <859:21 859:21>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Vec2 b2Sweep::c [b2Body.h <859:19 859:19>]
REFERENCE_CALL: void b2Body::SynchronizeTransform() -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Body.h <859:23 859:27>]
REFERENCE_USAGE: void b2Body::SynchronizeTransform() -> b2Vec2 b2Sweep::localCenter [b2Body.h <859:45 859:55>]
REFERENCE_CALL: void b2Body::Advance(float32) -> void b2Sweep::Advance(float32) [b2Body.h <865:10 865:16>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <865:2 865:8>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <866:2 866:8>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <866:14 866:20>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <867:2 867:8>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <867:14 867:20>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <868:13 868:19>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <869:11 869:17>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Sweep b2Body::m_sweep [b2Body.h <869:37 869:43>]
REFERENCE_CALL: void b2Body::Advance(float32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Body.h <866:12 866:12>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Vec2 b2Sweep::c [b2Body.h <866:10 866:10>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Vec2 b2Sweep::c [b2Body.h <869:19 869:19>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Vec2 b2Sweep::c0 [b2Body.h <866:22 866:23>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> float32 b2Sweep::a [b2Body.h <867:10 867:10>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> float32 b2Sweep::a [b2Body.h <868:21 868:21>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> float32 b2Sweep::a0 [b2Body.h <867:22 867:23>]
REFERENCE_CALL: void b2Body::Advance(float32) -> void b2Rot::Set(float32) [b2Body.h <868:9 868:11>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Rot b2Transform::q [b2Body.h <868:7 868:7>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Rot b2Transform::q [b2Body.h <869:34 869:34>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Transform b2Body::m_xf [b2Body.h <868:2 868:5>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Transform b2Body::m_xf [b2Body.h <869:2 869:5>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Transform b2Body::m_xf [b2Body.h <869:29 869:32>]
REFERENCE_CALL: void b2Body::Advance(float32) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2Body.h <869:9 869:9>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Vec2 b2Transform::p [b2Body.h <869:7 869:7>]
REFERENCE_CALL: void b2Body::Advance(float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Body.h <869:21 869:21>]
REFERENCE_CALL: void b2Body::Advance(float32) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Body.h <869:23 869:27>]
REFERENCE_USAGE: void b2Body::Advance(float32) -> b2Vec2 b2Sweep::localCenter [b2Body.h <869:45 869:55>]
REFERENCE_USAGE: b2World * b2Body::GetWorld() -> b2World * b2Body::m_world [b2Body.h <874:9 874:15>]
REFERENCE_USAGE: const b2World * b2Body::GetWorld() const -> b2World * b2Body::m_world [b2Body.h <879:9 879:15>]
REFERENCE_USAGE: void b2Filter::b2Filter() -> uint16 b2Filter::categoryBits [b2Fixture.h <36:3 36:14>]
REFERENCE_USAGE: void b2Filter::b2Filter() -> uint16 b2Filter::maskBits [b2Fixture.h <37:3 37:10>]
REFERENCE_USAGE: void b2Filter::b2Filter() -> int16 b2Filter::groupIndex [b2Fixture.h <38:3 38:12>]
REFERENCE_TYPE_USAGE: uint16 b2Filter::categoryBits -> uint16 [b2Fixture.h <42:2 42:7>]
REFERENCE_TYPE_USAGE: uint16 b2Filter::maskBits -> uint16 [b2Fixture.h <46:2 46:7>]
REFERENCE_TYPE_USAGE: int16 b2Filter::groupIndex -> int16 [b2Fixture.h <51:2 51:6>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> b2Filter b2FixtureDef::filter [b2Fixture.h <59:2 59:13>]
REFERENCE_CALL: void b2FixtureDef::b2FixtureDef() -> void b2Filter::b2Filter() [b2Fixture.h <59:2 59:13>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> const b2Shape * b2FixtureDef::shape [b2Fixture.h <61:3 61:7>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> void * b2FixtureDef::userData [b2Fixture.h <62:3 62:10>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> float32 b2FixtureDef::friction [b2Fixture.h <63:3 63:10>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> float32 b2FixtureDef::restitution [b2Fixture.h <64:3 64:13>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> float32 b2FixtureDef::density [b2Fixture.h <65:3 65:9>]
REFERENCE_USAGE: void b2FixtureDef::b2FixtureDef() -> bool b2FixtureDef::isSensor [b2Fixture.h <66:3 66:10>]
REFERENCE_TYPE_USAGE: const b2Shape * b2FixtureDef::shape -> b2Shape [b2Fixture.h <71:8 71:14>]
REFERENCE_TYPE_USAGE: void * b2FixtureDef::userData -> void [b2Fixture.h <74:2 74:5>]
REFERENCE_TYPE_USAGE: float32 b2FixtureDef::friction -> float32 [b2Fixture.h <77:2 77:8>]
REFERENCE_TYPE_USAGE: float32 b2FixtureDef::restitution -> float32 [b2Fixture.h <80:2 80:8>]
REFERENCE_TYPE_USAGE: float32 b2FixtureDef::density -> float32 [b2Fixture.h <83:2 83:8>]
REFERENCE_TYPE_USAGE: bool b2FixtureDef::isSensor -> bool [b2Fixture.h <87:2 87:5>]
REFERENCE_TYPE_USAGE: b2Filter b2FixtureDef::filter -> b2Filter [b2Fixture.h <90:2 90:9>]
REFERENCE_TYPE_USAGE: b2AABB b2FixtureProxy::aabb -> b2AABB [b2Fixture.h <96:2 96:7>]
REFERENCE_TYPE_USAGE: b2Fixture * b2FixtureProxy::fixture -> b2Fixture [b2Fixture.h <97:2 97:10>]
REFERENCE_TYPE_USAGE: int32 b2FixtureProxy::childIndex -> int32 [b2Fixture.h <98:2 98:6>]
REFERENCE_TYPE_USAGE: int32 b2FixtureProxy::proxyId -> int32 [b2Fixture.h <99:2 99:6>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Fixture::GetType() const -> b2Shape::Type [b2Fixture.h <112:11 112:14>]
REFERENCE_TYPE_USAGE: b2Shape::Type b2Fixture::GetType() const -> b2Shape::Type [b2Fixture.h <238:17 238:20>]
REFERENCE_TYPE_USAGE: b2Shape * b2Fixture::GetShape() -> b2Shape [b2Fixture.h <117:2 117:8>]
REFERENCE_TYPE_USAGE: b2Shape * b2Fixture::GetShape() -> b2Shape [b2Fixture.h <243:8 243:14>]
REFERENCE_TYPE_USAGE: const b2Shape * b2Fixture::GetShape() const -> b2Shape [b2Fixture.h <118:8 118:14>]
REFERENCE_TYPE_USAGE: const b2Shape * b2Fixture::GetShape() const -> b2Shape [b2Fixture.h <248:14 248:20>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetSensor(bool) -> void [b2Fixture.h <121:2 121:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetSensor(bool) -> bool [b2Fixture.h <121:17 121:20>]
REFERENCE_TYPE_USAGE: bool b2Fixture::IsSensor() const -> bool [b2Fixture.h <125:2 125:5>]
REFERENCE_TYPE_USAGE: bool b2Fixture::IsSensor() const -> bool [b2Fixture.h <253:8 253:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFilterData(const b2Filter &) -> void [b2Fixture.h <130:2 130:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFilterData(const b2Filter &) -> b2Filter [b2Fixture.h <130:27 130:34>]
REFERENCE_TYPE_USAGE: const b2Filter & b2Fixture::GetFilterData() const -> b2Filter [b2Fixture.h <133:8 133:15>]
REFERENCE_TYPE_USAGE: const b2Filter & b2Fixture::GetFilterData() const -> b2Filter [b2Fixture.h <258:14 258:21>]
REFERENCE_TYPE_USAGE: void b2Fixture::Refilter() -> void [b2Fixture.h <136:2 136:5>]
REFERENCE_TYPE_USAGE: b2Body * b2Fixture::GetBody() -> b2Body [b2Fixture.h <140:2 140:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Fixture::GetBody() -> b2Body [b2Fixture.h <273:8 273:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2Fixture::GetBody() const -> b2Body [b2Fixture.h <141:8 141:13>]
REFERENCE_TYPE_USAGE: const b2Body * b2Fixture::GetBody() const -> b2Body [b2Fixture.h <278:14 278:19>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Fixture::GetNext() -> b2Fixture [b2Fixture.h <145:2 145:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Fixture::GetNext() -> b2Fixture [b2Fixture.h <283:8 283:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Fixture::GetNext() const -> b2Fixture [b2Fixture.h <146:8 146:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Fixture::GetNext() const -> b2Fixture [b2Fixture.h <288:14 288:22>]
REFERENCE_TYPE_USAGE: void * b2Fixture::GetUserData() const -> void [b2Fixture.h <150:2 150:5>]
REFERENCE_TYPE_USAGE: void * b2Fixture::GetUserData() const -> void [b2Fixture.h <263:8 263:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetUserData(void *) -> void [b2Fixture.h <153:2 153:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetUserData(void *) -> void [b2Fixture.h <153:19 153:22>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetUserData(void *) -> void [b2Fixture.h <268:8 268:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetUserData(void *) -> void [b2Fixture.h <268:36 268:39>]
REFERENCE_TYPE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> bool [b2Fixture.h <157:2 157:5>]
REFERENCE_TYPE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> bool [b2Fixture.h <324:8 324:11>]
REFERENCE_TYPE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> b2Vec2 [b2Fixture.h <157:23 157:28>]
REFERENCE_TYPE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> b2Vec2 [b2Fixture.h <324:40 324:45>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> bool [b2Fixture.h <162:2 162:5>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> bool [b2Fixture.h <329:8 329:11>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2RayCastOutput [b2Fixture.h <162:15 162:29>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2RayCastOutput [b2Fixture.h <329:32 329:46>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2RayCastInput [b2Fixture.h <162:46 162:59>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2RayCastInput [b2Fixture.h <329:63 329:76>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> int32 [b2Fixture.h <162:69 162:73>]
REFERENCE_TYPE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> int32 [b2Fixture.h <329:86 329:90>]
REFERENCE_TYPE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> void [b2Fixture.h <167:2 167:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> void [b2Fixture.h <334:8 334:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> b2MassData [b2Fixture.h <167:19 167:28>]
REFERENCE_TYPE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> b2MassData [b2Fixture.h <334:36 334:45>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> void [b2Fixture.h <171:2 171:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> void [b2Fixture.h <293:8 293:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> void [b2Fixture.h <295:2 295:9>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> float32 [b2Fixture.h <171:18 171:24>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> float32 [b2Fixture.h <293:35 293:41>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetDensity() const -> float32 [b2Fixture.h <174:2 174:8>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetDensity() const -> float32 [b2Fixture.h <299:8 299:14>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetFriction() const -> float32 [b2Fixture.h <177:2 177:8>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetFriction() const -> float32 [b2Fixture.h <304:8 304:14>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFriction(float32) -> void [b2Fixture.h <181:2 181:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFriction(float32) -> void [b2Fixture.h <309:8 309:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFriction(float32) -> float32 [b2Fixture.h <181:19 181:25>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetFriction(float32) -> float32 [b2Fixture.h <309:36 309:42>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetRestitution() const -> float32 [b2Fixture.h <184:2 184:8>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::GetRestitution() const -> float32 [b2Fixture.h <314:8 314:14>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetRestitution(float32) -> void [b2Fixture.h <188:2 188:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetRestitution(float32) -> void [b2Fixture.h <319:8 319:11>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetRestitution(float32) -> float32 [b2Fixture.h <188:22 188:28>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetRestitution(float32) -> float32 [b2Fixture.h <319:39 319:45>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> b2AABB [b2Fixture.h <193:8 193:13>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> b2AABB [b2Fixture.h <339:14 339:19>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> int32 [b2Fixture.h <193:24 193:28>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> int32 [b2Fixture.h <339:41 339:45>]
REFERENCE_TYPE_USAGE: void b2Fixture::Dump(int32) -> void [b2Fixture.h <196:2 196:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::Dump(int32) -> int32 [b2Fixture.h <196:12 196:16>]
REFERENCE_TYPE_USAGE: b2Fixture -> b2Body [b2Fixture.h <200:15 200:20>]
REFERENCE_TYPE_USAGE: b2Fixture -> b2World [b2Fixture.h <201:15 201:21>]
REFERENCE_TYPE_USAGE: b2Fixture -> b2Contact [b2Fixture.h <202:15 202:23>]
REFERENCE_TYPE_USAGE: b2Fixture -> b2ContactManager [b2Fixture.h <203:15 203:30>]
REFERENCE_TYPE_USAGE: void b2Fixture::Create(b2BlockAllocator *, b2Body *, const b2FixtureDef *) -> void [b2Fixture.h <209:2 209:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::Create(b2BlockAllocator *, b2Body *, const b2FixtureDef *) -> b2BlockAllocator [b2Fixture.h <209:14 209:29>]
REFERENCE_TYPE_USAGE: void b2Fixture::Create(b2BlockAllocator *, b2Body *, const b2FixtureDef *) -> b2Body [b2Fixture.h <209:43 209:48>]
REFERENCE_TYPE_USAGE: void b2Fixture::Create(b2BlockAllocator *, b2Body *, const b2FixtureDef *) -> b2FixtureDef [b2Fixture.h <209:63 209:74>]
REFERENCE_TYPE_USAGE: void b2Fixture::Destroy(b2BlockAllocator *) -> void [b2Fixture.h <210:2 210:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::Destroy(b2BlockAllocator *) -> b2BlockAllocator [b2Fixture.h <210:15 210:30>]
REFERENCE_TYPE_USAGE: void b2Fixture::CreateProxies(b2BroadPhase *, const b2Transform &) -> void [b2Fixture.h <213:2 213:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::CreateProxies(b2BroadPhase *, const b2Transform &) -> b2BroadPhase [b2Fixture.h <213:21 213:32>]
REFERENCE_TYPE_USAGE: void b2Fixture::CreateProxies(b2BroadPhase *, const b2Transform &) -> b2Transform [b2Fixture.h <213:53 213:63>]
REFERENCE_TYPE_USAGE: void b2Fixture::DestroyProxies(b2BroadPhase *) -> void [b2Fixture.h <214:2 214:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::DestroyProxies(b2BroadPhase *) -> b2BroadPhase [b2Fixture.h <214:22 214:33>]
REFERENCE_TYPE_USAGE: void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) -> void [b2Fixture.h <216:2 216:5>]
REFERENCE_TYPE_USAGE: void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) -> b2BroadPhase [b2Fixture.h <216:19 216:30>]
REFERENCE_TYPE_USAGE: void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) -> b2Transform [b2Fixture.h <216:51 216:61>]
REFERENCE_TYPE_USAGE: void b2Fixture::Synchronize(b2BroadPhase *, const b2Transform &, const b2Transform &) -> b2Transform [b2Fixture.h <216:75 216:85>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::m_density -> float32 [b2Fixture.h <218:2 218:8>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Fixture::m_next -> b2Fixture [b2Fixture.h <220:2 220:10>]
REFERENCE_TYPE_USAGE: b2Body * b2Fixture::m_body -> b2Body [b2Fixture.h <221:2 221:7>]
REFERENCE_TYPE_USAGE: b2Shape * b2Fixture::m_shape -> b2Shape [b2Fixture.h <223:2 223:8>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::m_friction -> float32 [b2Fixture.h <225:2 225:8>]
REFERENCE_TYPE_USAGE: float32 b2Fixture::m_restitution -> float32 [b2Fixture.h <226:2 226:8>]
REFERENCE_TYPE_USAGE: b2FixtureProxy * b2Fixture::m_proxies -> b2FixtureProxy [b2Fixture.h <228:2 228:15>]
REFERENCE_TYPE_USAGE: int32 b2Fixture::m_proxyCount -> int32 [b2Fixture.h <229:2 229:6>]
REFERENCE_TYPE_USAGE: b2Filter b2Fixture::m_filter -> b2Filter [b2Fixture.h <231:2 231:9>]
REFERENCE_TYPE_USAGE: bool b2Fixture::m_isSensor -> bool [b2Fixture.h <233:2 233:5>]
REFERENCE_TYPE_USAGE: void * b2Fixture::m_userData -> void [b2Fixture.h <235:2 235:5>]
REFERENCE_CALL: b2Shape::Type b2Fixture::GetType() const -> b2Shape::Type b2Shape::GetType() const [b2Fixture.h <240:18 240:24>]
REFERENCE_USAGE: b2Shape::Type b2Fixture::GetType() const -> b2Shape * b2Fixture::m_shape [b2Fixture.h <240:9 240:15>]
REFERENCE_USAGE: b2Shape * b2Fixture::GetShape() -> b2Shape * b2Fixture::m_shape [b2Fixture.h <245:9 245:15>]
REFERENCE_USAGE: const b2Shape * b2Fixture::GetShape() const -> b2Shape * b2Fixture::m_shape [b2Fixture.h <250:9 250:15>]
REFERENCE_USAGE: bool b2Fixture::IsSensor() const -> bool b2Fixture::m_isSensor [b2Fixture.h <255:9 255:18>]
REFERENCE_USAGE: const b2Filter & b2Fixture::GetFilterData() const -> b2Filter b2Fixture::m_filter [b2Fixture.h <260:9 260:16>]
REFERENCE_USAGE: void * b2Fixture::GetUserData() const -> void * b2Fixture::m_userData [b2Fixture.h <265:9 265:18>]
REFERENCE_USAGE: void b2Fixture::SetUserData(void *) -> void * b2Fixture::m_userData [b2Fixture.h <270:2 270:11>]
REFERENCE_USAGE: b2Body * b2Fixture::GetBody() -> b2Body * b2Fixture::m_body [b2Fixture.h <275:9 275:14>]
REFERENCE_USAGE: const b2Body * b2Fixture::GetBody() const -> b2Body * b2Fixture::m_body [b2Fixture.h <280:9 280:14>]
REFERENCE_USAGE: b2Fixture * b2Fixture::GetNext() -> b2Fixture * b2Fixture::m_next [b2Fixture.h <285:9 285:14>]
REFERENCE_USAGE: const b2Fixture * b2Fixture::GetNext() const -> b2Fixture * b2Fixture::m_next [b2Fixture.h <290:9 290:14>]
REFERENCE_CALL: void b2Fixture::SetDensity(float32) -> bool b2IsValid(float32) [b2Fixture.h <295:11 295:19>]
REFERENCE_CALL: void b2Fixture::SetDensity(float32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Fixture.h <295:2 295:9>]
REFERENCE_TYPE_USAGE: void b2Fixture::SetDensity(float32) -> unsigned int [b2Fixture.h <295:2 295:9>]
REFERENCE_USAGE: void b2Fixture::SetDensity(float32) -> float32 b2Fixture::m_density [b2Fixture.h <296:2 296:10>]
REFERENCE_USAGE: float32 b2Fixture::GetDensity() const -> float32 b2Fixture::m_density [b2Fixture.h <301:9 301:17>]
REFERENCE_USAGE: float32 b2Fixture::GetFriction() const -> float32 b2Fixture::m_friction [b2Fixture.h <306:9 306:18>]
REFERENCE_USAGE: void b2Fixture::SetFriction(float32) -> float32 b2Fixture::m_friction [b2Fixture.h <311:2 311:11>]
REFERENCE_USAGE: float32 b2Fixture::GetRestitution() const -> float32 b2Fixture::m_restitution [b2Fixture.h <316:9 316:21>]
REFERENCE_USAGE: void b2Fixture::SetRestitution(float32) -> float32 b2Fixture::m_restitution [b2Fixture.h <321:2 321:14>]
REFERENCE_CALL: bool b2Fixture::TestPoint(const b2Vec2 &) const -> bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2Fixture.h <326:18 326:26>]
REFERENCE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> b2Shape * b2Fixture::m_shape [b2Fixture.h <326:9 326:15>]
REFERENCE_CALL: bool b2Fixture::TestPoint(const b2Vec2 &) const -> const b2Transform & b2Body::GetTransform() const [b2Fixture.h <326:36 326:47>]
REFERENCE_USAGE: bool b2Fixture::TestPoint(const b2Vec2 &) const -> b2Body * b2Fixture::m_body [b2Fixture.h <326:28 326:33>]
REFERENCE_CALL: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2Fixture.h <331:18 331:24>]
REFERENCE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2Shape * b2Fixture::m_shape [b2Fixture.h <331:9 331:15>]
REFERENCE_CALL: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> const b2Transform & b2Body::GetTransform() const [b2Fixture.h <331:49 331:60>]
REFERENCE_USAGE: bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const -> b2Body * b2Fixture::m_body [b2Fixture.h <331:41 331:46>]
REFERENCE_CALL: void b2Fixture::GetMassData(b2MassData *) const -> void b2Shape::ComputeMass(b2MassData *, float32) const [b2Fixture.h <336:11 336:21>]
REFERENCE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> b2Shape * b2Fixture::m_shape [b2Fixture.h <336:2 336:8>]
REFERENCE_USAGE: void b2Fixture::GetMassData(b2MassData *) const -> float32 b2Fixture::m_density [b2Fixture.h <336:33 336:41>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> void [b2Fixture.h <341:2 341:9>]
REFERENCE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> int32 b2Fixture::m_proxyCount [b2Fixture.h <341:43 341:54>]
REFERENCE_CALL: const b2AABB & b2Fixture::GetAABB(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Fixture.h <341:2 341:9>]
REFERENCE_TYPE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> unsigned int [b2Fixture.h <341:2 341:9>]
REFERENCE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> b2AABB b2FixtureProxy::aabb [b2Fixture.h <342:31 342:34>]
REFERENCE_USAGE: const b2AABB & b2Fixture::GetAABB(int32) const -> b2FixtureProxy * b2Fixture::m_proxies [b2Fixture.h <342:9 342:17>]
REFERENCE_TYPE_USAGE: void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 [b2Island.h <37:11 37:15>]
REFERENCE_TYPE_USAGE: void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 [b2Island.h <37:31 37:35>]
REFERENCE_TYPE_USAGE: void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 [b2Island.h <37:54 37:58>]
REFERENCE_TYPE_USAGE: void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2StackAllocator [b2Island.h <38:4 38:19>]
REFERENCE_TYPE_USAGE: void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2ContactListener [b2Island.h <38:33 38:49>]
REFERENCE_TYPE_USAGE: void b2Island::Clear() -> void [b2Island.h <41:2 41:5>]
REFERENCE_USAGE: void b2Island::Clear() -> int32 b2Island::m_bodyCount [b2Island.h <43:3 43:13>]
REFERENCE_USAGE: void b2Island::Clear() -> int32 b2Island::m_contactCount [b2Island.h <44:3 44:16>]
REFERENCE_USAGE: void b2Island::Clear() -> int32 b2Island::m_jointCount [b2Island.h <45:3 45:14>]
REFERENCE_TYPE_USAGE: void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void [b2Island.h <48:2 48:5>]
REFERENCE_TYPE_USAGE: void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Profile [b2Island.h <48:13 48:21>]
REFERENCE_TYPE_USAGE: void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2TimeStep [b2Island.h <48:39 48:48>]
REFERENCE_TYPE_USAGE: void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 [b2Island.h <48:63 48:68>]
REFERENCE_TYPE_USAGE: void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> bool [b2Island.h <48:80 48:83>]
REFERENCE_TYPE_USAGE: void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void [b2Island.h <50:2 50:5>]
REFERENCE_TYPE_USAGE: void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2TimeStep [b2Island.h <50:22 50:31>]
REFERENCE_TYPE_USAGE: void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 [b2Island.h <50:43 50:47>]
REFERENCE_TYPE_USAGE: void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 [b2Island.h <50:60 50:64>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Body *) -> void [b2Island.h <52:2 52:5>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Body *) -> void [b2Island.h <54:3 54:10>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Body *) -> b2Body [b2Island.h <52:11 52:16>]
REFERENCE_USAGE: void b2Island::Add(b2Body *) -> int32 b2Island::m_bodyCount [b2Island.h <54:12 54:22>]
REFERENCE_USAGE: void b2Island::Add(b2Body *) -> int32 b2Island::m_bodyCount [b2Island.h <55:25 55:35>]
REFERENCE_USAGE: void b2Island::Add(b2Body *) -> int32 b2Island::m_bodyCount [b2Island.h <56:12 56:22>]
REFERENCE_USAGE: void b2Island::Add(b2Body *) -> int32 b2Island::m_bodyCount [b2Island.h <57:5 57:15>]
REFERENCE_USAGE: void b2Island::Add(b2Body *) -> int32 b2Island::m_bodyCapacity [b2Island.h <54:26 54:39>]
REFERENCE_CALL: void b2Island::Add(b2Body *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Island.h <54:3 54:10>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Body *) -> unsigned int [b2Island.h <54:3 54:10>]
REFERENCE_USAGE: void b2Island::Add(b2Body *) -> int32 b2Body::m_islandIndex [b2Island.h <55:9 55:21>]
REFERENCE_USAGE: void b2Island::Add(b2Body *) -> b2Body * * b2Island::m_bodies [b2Island.h <56:3 56:10>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Contact *) -> void [b2Island.h <60:2 60:5>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Contact *) -> void [b2Island.h <62:3 62:10>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Contact *) -> b2Contact [b2Island.h <60:11 60:19>]
REFERENCE_USAGE: void b2Island::Add(b2Contact *) -> int32 b2Island::m_contactCount [b2Island.h <62:12 62:25>]
REFERENCE_USAGE: void b2Island::Add(b2Contact *) -> int32 b2Island::m_contactCount [b2Island.h <63:14 63:27>]
REFERENCE_USAGE: void b2Island::Add(b2Contact *) -> int32 b2Island::m_contactCapacity [b2Island.h <62:29 62:45>]
REFERENCE_CALL: void b2Island::Add(b2Contact *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Island.h <62:3 62:10>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Contact *) -> unsigned int [b2Island.h <62:3 62:10>]
REFERENCE_USAGE: void b2Island::Add(b2Contact *) -> b2Contact * * b2Island::m_contacts [b2Island.h <63:3 63:12>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Joint *) -> void [b2Island.h <66:2 66:5>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Joint *) -> void [b2Island.h <68:3 68:10>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Joint *) -> b2Joint [b2Island.h <66:11 66:17>]
REFERENCE_USAGE: void b2Island::Add(b2Joint *) -> int32 b2Island::m_jointCount [b2Island.h <68:12 68:23>]
REFERENCE_USAGE: void b2Island::Add(b2Joint *) -> int32 b2Island::m_jointCount [b2Island.h <69:12 69:23>]
REFERENCE_USAGE: void b2Island::Add(b2Joint *) -> int32 b2Island::m_jointCapacity [b2Island.h <68:27 68:41>]
REFERENCE_CALL: void b2Island::Add(b2Joint *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Island.h <68:3 68:10>]
REFERENCE_TYPE_USAGE: void b2Island::Add(b2Joint *) -> unsigned int [b2Island.h <68:3 68:10>]
REFERENCE_USAGE: void b2Island::Add(b2Joint *) -> b2Joint * * b2Island::m_joints [b2Island.h <69:3 69:10>]
REFERENCE_TYPE_USAGE: void b2Island::Report(const b2ContactVelocityConstraint *) -> void [b2Island.h <72:2 72:5>]
REFERENCE_TYPE_USAGE: void b2Island::Report(const b2ContactVelocityConstraint *) -> b2ContactVelocityConstraint [b2Island.h <72:20 72:46>]
REFERENCE_TYPE_USAGE: b2StackAllocator * b2Island::m_allocator -> b2StackAllocator [b2Island.h <74:2 74:17>]
REFERENCE_TYPE_USAGE: b2ContactListener * b2Island::m_listener -> b2ContactListener [b2Island.h <75:2 75:18>]
REFERENCE_TYPE_USAGE: b2Body * * b2Island::m_bodies -> b2Body [b2Island.h <77:2 77:7>]
REFERENCE_TYPE_USAGE: b2Contact * * b2Island::m_contacts -> b2Contact [b2Island.h <78:2 78:10>]
REFERENCE_TYPE_USAGE: b2Joint * * b2Island::m_joints -> b2Joint [b2Island.h <79:2 79:8>]
REFERENCE_TYPE_USAGE: b2Position * b2Island::m_positions -> b2Position [b2Island.h <81:2 81:11>]
REFERENCE_TYPE_USAGE: b2Velocity * b2Island::m_velocities -> b2Velocity [b2Island.h <82:2 82:11>]
REFERENCE_TYPE_USAGE: int32 b2Island::m_bodyCount -> int32 [b2Island.h <84:2 84:6>]
REFERENCE_TYPE_USAGE: int32 b2Island::m_jointCount -> int32 [b2Island.h <85:2 85:6>]
REFERENCE_TYPE_USAGE: int32 b2Island::m_contactCount -> int32 [b2Island.h <86:2 86:6>]
REFERENCE_TYPE_USAGE: int32 b2Island::m_bodyCapacity -> int32 [b2Island.h <88:2 88:6>]
REFERENCE_TYPE_USAGE: int32 b2Island::m_contactCapacity -> int32 [b2Island.h <89:2 89:6>]
REFERENCE_TYPE_USAGE: int32 b2Island::m_jointCapacity -> int32 [b2Island.h <90:2 90:6>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Jacobian::linear -> b2Vec2 [b2Joint.h <55:2 55:7>]
REFERENCE_TYPE_USAGE: float32 b2Jacobian::angularA -> float32 [b2Joint.h <56:2 56:8>]
REFERENCE_TYPE_USAGE: float32 b2Jacobian::angularB -> float32 [b2Joint.h <57:2 57:8>]
REFERENCE_TYPE_USAGE: b2Body * b2JointEdge::other -> b2Body [b2Joint.h <67:2 67:7>]
REFERENCE_TYPE_USAGE: b2Joint * b2JointEdge::joint -> b2Joint [b2Joint.h <68:2 68:8>]
REFERENCE_TYPE_USAGE: b2JointEdge * b2JointEdge::prev -> b2JointEdge [b2Joint.h <69:2 69:12>]
REFERENCE_TYPE_USAGE: b2JointEdge * b2JointEdge::next -> b2JointEdge [b2Joint.h <70:2 70:12>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> b2JointType b2JointDef::type [b2Joint.h <78:3 78:6>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> b2JointType::e_unknownJoint [b2Joint.h <78:10 78:23>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> void * b2JointDef::userData [b2Joint.h <79:3 79:10>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> b2Body * b2JointDef::bodyA [b2Joint.h <80:3 80:7>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> b2Body * b2JointDef::bodyB [b2Joint.h <81:3 81:7>]
REFERENCE_USAGE: void b2JointDef::b2JointDef() -> bool b2JointDef::collideConnected [b2Joint.h <82:3 82:18>]
REFERENCE_TYPE_USAGE: b2JointType b2JointDef::type -> b2JointType [b2Joint.h <86:2 86:12>]
REFERENCE_TYPE_USAGE: void * b2JointDef::userData -> void [b2Joint.h <89:2 89:5>]
REFERENCE_TYPE_USAGE: b2Body * b2JointDef::bodyA -> b2Body [b2Joint.h <92:2 92:7>]
REFERENCE_TYPE_USAGE: b2Body * b2JointDef::bodyB -> b2Body [b2Joint.h <95:2 95:7>]
REFERENCE_TYPE_USAGE: bool b2JointDef::collideConnected -> bool [b2Joint.h <98:2 98:5>]
REFERENCE_TYPE_USAGE: b2JointType b2Joint::GetType() const -> b2JointType [b2Joint.h <108:2 108:12>]
REFERENCE_TYPE_USAGE: b2JointType b2Joint::GetType() const -> b2JointType [b2Joint.h <186:8 186:18>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::GetBodyA() -> b2Body [b2Joint.h <111:2 111:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::GetBodyA() -> b2Body [b2Joint.h <191:8 191:13>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::GetBodyB() -> b2Body [b2Joint.h <114:2 114:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::GetBodyB() -> b2Body [b2Joint.h <196:8 196:13>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Joint::GetAnchorA() const -> b2Vec2 [b2Joint.h <117:10 117:15>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Joint::GetAnchorB() const -> b2Vec2 [b2Joint.h <120:10 120:15>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Joint::GetReactionForce(float32) const -> b2Vec2 [b2Joint.h <123:10 123:15>]
REFERENCE_TYPE_USAGE: b2Vec2 b2Joint::GetReactionForce(float32) const -> float32 [b2Joint.h <123:34 123:40>]
REFERENCE_TYPE_USAGE: float32 b2Joint::GetReactionTorque(float32) const -> float32 [b2Joint.h <126:10 126:16>]
REFERENCE_TYPE_USAGE: float32 b2Joint::GetReactionTorque(float32) const -> float32 [b2Joint.h <126:36 126:42>]
REFERENCE_TYPE_USAGE: b2Joint * b2Joint::GetNext() -> b2Joint [b2Joint.h <129:2 129:8>]
REFERENCE_TYPE_USAGE: b2Joint * b2Joint::GetNext() -> b2Joint [b2Joint.h <201:8 201:14>]
REFERENCE_TYPE_USAGE: const b2Joint * b2Joint::GetNext() const -> b2Joint [b2Joint.h <130:8 130:14>]
REFERENCE_TYPE_USAGE: const b2Joint * b2Joint::GetNext() const -> b2Joint [b2Joint.h <206:14 206:20>]
REFERENCE_TYPE_USAGE: void * b2Joint::GetUserData() const -> void [b2Joint.h <133:2 133:5>]
REFERENCE_TYPE_USAGE: void * b2Joint::GetUserData() const -> void [b2Joint.h <211:8 211:11>]
REFERENCE_TYPE_USAGE: void b2Joint::SetUserData(void *) -> void [b2Joint.h <136:2 136:5>]
REFERENCE_TYPE_USAGE: void b2Joint::SetUserData(void *) -> void [b2Joint.h <136:19 136:22>]
REFERENCE_TYPE_USAGE: void b2Joint::SetUserData(void *) -> void [b2Joint.h <216:8 216:11>]
REFERENCE_TYPE_USAGE: void b2Joint::SetUserData(void *) -> void [b2Joint.h <216:34 216:37>]
REFERENCE_TYPE_USAGE: bool b2Joint::IsActive() const -> bool [b2Joint.h <139:2 139:5>]
REFERENCE_TYPE_USAGE: bool b2Joint::GetCollideConnected() const -> bool [b2Joint.h <144:2 144:5>]
REFERENCE_TYPE_USAGE: bool b2Joint::GetCollideConnected() const -> bool [b2Joint.h <221:8 221:11>]
REFERENCE_TYPE_USAGE: void b2Joint::Dump() -> void [b2Joint.h <147:10 147:13>]
REFERENCE_CALL: void b2Joint::Dump() -> void b2Log(const char *) [b2Joint.h <147:24 147:28>]
REFERENCE_TYPE_USAGE: void b2Joint::ShiftOrigin(const b2Vec2 &) -> void [b2Joint.h <150:10 150:13>]
REFERENCE_TYPE_USAGE: void b2Joint::ShiftOrigin(const b2Vec2 &) -> void [b2Joint.h <150:54 150:64>]
REFERENCE_TYPE_USAGE: void b2Joint::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2Joint.h <150:33 150:38>]
REFERENCE_TYPE_USAGE: b2Joint -> b2World [b2Joint.h <153:15 153:21>]
REFERENCE_TYPE_USAGE: b2Joint -> b2Body [b2Joint.h <154:15 154:20>]
REFERENCE_TYPE_USAGE: b2Joint -> b2Island [b2Joint.h <155:15 155:22>]
REFERENCE_TYPE_USAGE: b2Joint -> b2GearJoint [b2Joint.h <156:15 156:25>]
REFERENCE_TYPE_USAGE: static b2Joint * b2Joint::Create(const b2JointDef *, b2BlockAllocator *) -> b2Joint [b2Joint.h <158:9 158:15>]
REFERENCE_TYPE_USAGE: static b2Joint * b2Joint::Create(const b2JointDef *, b2BlockAllocator *) -> b2JointDef [b2Joint.h <158:31 158:40>]
REFERENCE_TYPE_USAGE: static b2Joint * b2Joint::Create(const b2JointDef *, b2BlockAllocator *) -> b2BlockAllocator [b2Joint.h <158:48 158:63>]
REFERENCE_TYPE_USAGE: static void b2Joint::Destroy(b2Joint *, b2BlockAllocator *) -> void [b2Joint.h <159:9 159:12>]
REFERENCE_TYPE_USAGE: static void b2Joint::Destroy(b2Joint *, b2BlockAllocator *) -> b2Joint [b2Joint.h <159:22 159:28>]
REFERENCE_TYPE_USAGE: static void b2Joint::Destroy(b2Joint *, b2BlockAllocator *) -> b2BlockAllocator [b2Joint.h <159:38 159:53>]
REFERENCE_TYPE_USAGE: void b2Joint::b2Joint(const b2JointDef *) -> b2JointDef [b2Joint.h <161:16 161:25>]
REFERENCE_TYPE_USAGE: void b2Joint::InitVelocityConstraints(const b2SolverData &) -> void [b2Joint.h <164:10 164:13>]
REFERENCE_TYPE_USAGE: void b2Joint::InitVelocityConstraints(const b2SolverData &) -> b2SolverData [b2Joint.h <164:45 164:56>]
REFERENCE_TYPE_USAGE: void b2Joint::SolveVelocityConstraints(const b2SolverData &) -> void [b2Joint.h <165:10 165:13>]
REFERENCE_TYPE_USAGE: void b2Joint::SolveVelocityConstraints(const b2SolverData &) -> b2SolverData [b2Joint.h <165:46 165:57>]
REFERENCE_TYPE_USAGE: bool b2Joint::SolvePositionConstraints(const b2SolverData &) -> bool [b2Joint.h <168:10 168:13>]
REFERENCE_TYPE_USAGE: bool b2Joint::SolvePositionConstraints(const b2SolverData &) -> b2SolverData [b2Joint.h <168:46 168:57>]
REFERENCE_TYPE_USAGE: b2JointType b2Joint::m_type -> b2JointType [b2Joint.h <170:2 170:12>]
REFERENCE_TYPE_USAGE: b2Joint * b2Joint::m_prev -> b2Joint [b2Joint.h <171:2 171:8>]
REFERENCE_TYPE_USAGE: b2Joint * b2Joint::m_next -> b2Joint [b2Joint.h <172:2 172:8>]
REFERENCE_TYPE_USAGE: b2JointEdge b2Joint::m_edgeA -> b2JointEdge [b2Joint.h <173:2 173:12>]
REFERENCE_TYPE_USAGE: b2JointEdge b2Joint::m_edgeB -> b2JointEdge [b2Joint.h <174:2 174:12>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::m_bodyA -> b2Body [b2Joint.h <175:2 175:7>]
REFERENCE_TYPE_USAGE: b2Body * b2Joint::m_bodyB -> b2Body [b2Joint.h <176:2 176:7>]
REFERENCE_TYPE_USAGE: int32 b2Joint::m_index -> int32 [b2Joint.h <178:2 178:6>]
REFERENCE_TYPE_USAGE: bool b2Joint::m_islandFlag -> bool [b2Joint.h <180:2 180:5>]
REFERENCE_TYPE_USAGE: bool b2Joint::m_collideConnected -> bool [b2Joint.h <181:2 181:5>]
REFERENCE_TYPE_USAGE: void * b2Joint::m_userData -> void [b2Joint.h <183:2 183:5>]
REFERENCE_USAGE: b2JointType b2Joint::GetType() const -> b2JointType b2Joint::m_type [b2Joint.h <188:9 188:14>]
REFERENCE_USAGE: b2Body * b2Joint::GetBodyA() -> b2Body * b2Joint::m_bodyA [b2Joint.h <193:9 193:15>]
REFERENCE_USAGE: b2Body * b2Joint::GetBodyB() -> b2Body * b2Joint::m_bodyB [b2Joint.h <198:9 198:15>]
REFERENCE_USAGE: b2Joint * b2Joint::GetNext() -> b2Joint * b2Joint::m_next [b2Joint.h <203:9 203:14>]
REFERENCE_USAGE: const b2Joint * b2Joint::GetNext() const -> b2Joint * b2Joint::m_next [b2Joint.h <208:9 208:14>]
REFERENCE_USAGE: void * b2Joint::GetUserData() const -> void * b2Joint::m_userData [b2Joint.h <213:9 213:18>]
REFERENCE_USAGE: void b2Joint::SetUserData(void *) -> void * b2Joint::m_userData [b2Joint.h <218:2 218:11>]
REFERENCE_USAGE: bool b2Joint::GetCollideConnected() const -> bool b2Joint::m_collideConnected [b2Joint.h <223:9 223:26>]
REFERENCE_TYPE_USAGE: const float32 b2_minPulleyLength -> float32 [b2PulleyJoint.h <24:7 24:13>]
REFERENCE_INHERITANCE: b2PulleyJointDef -> b2JointDef [b2PulleyJoint.h <28:34 28:43>]
REFERENCE_CALL: void b2PulleyJointDef::b2PulleyJointDef() -> void b2JointDef::b2JointDef() [b2PulleyJoint.h <30:2 30:17>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> b2Vec2 b2PulleyJointDef::groundAnchorA [b2PulleyJoint.h <30:2 30:17>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> b2Vec2 b2PulleyJointDef::groundAnchorA [b2PulleyJoint.h <33:3 33:15>]
REFERENCE_CALL: void b2PulleyJointDef::b2PulleyJointDef() -> void b2Vec2::b2Vec2() [b2PulleyJoint.h <30:2 30:17>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> b2Vec2 b2PulleyJointDef::groundAnchorB [b2PulleyJoint.h <30:2 30:17>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> b2Vec2 b2PulleyJointDef::groundAnchorB [b2PulleyJoint.h <34:3 34:15>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> b2Vec2 b2PulleyJointDef::localAnchorA [b2PulleyJoint.h <30:2 30:17>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> b2Vec2 b2PulleyJointDef::localAnchorA [b2PulleyJoint.h <35:3 35:14>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> b2Vec2 b2PulleyJointDef::localAnchorB [b2PulleyJoint.h <30:2 30:17>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> b2Vec2 b2PulleyJointDef::localAnchorB [b2PulleyJoint.h <36:3 36:14>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> b2JointType b2JointDef::type [b2PulleyJoint.h <32:3 32:6>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> b2JointType::e_pulleyJoint [b2PulleyJoint.h <32:10 32:22>]
REFERENCE_CALL: void b2PulleyJointDef::b2PulleyJointDef() -> void b2Vec2::Set(float32, float32) [b2PulleyJoint.h <33:17 33:19>]
REFERENCE_CALL: void b2PulleyJointDef::b2PulleyJointDef() -> void b2Vec2::Set(float32, float32) [b2PulleyJoint.h <34:17 34:19>]
REFERENCE_CALL: void b2PulleyJointDef::b2PulleyJointDef() -> void b2Vec2::Set(float32, float32) [b2PulleyJoint.h <35:16 35:18>]
REFERENCE_CALL: void b2PulleyJointDef::b2PulleyJointDef() -> void b2Vec2::Set(float32, float32) [b2PulleyJoint.h <36:16 36:18>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> float32 b2PulleyJointDef::lengthA [b2PulleyJoint.h <37:3 37:9>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> float32 b2PulleyJointDef::lengthB [b2PulleyJoint.h <38:3 38:9>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> float32 b2PulleyJointDef::ratio [b2PulleyJoint.h <39:3 39:7>]
REFERENCE_USAGE: void b2PulleyJointDef::b2PulleyJointDef() -> bool b2JointDef::collideConnected [b2PulleyJoint.h <40:3 40:18>]
REFERENCE_TYPE_USAGE: void b2PulleyJointDef::Initialize(b2Body *, b2Body *, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, float32) -> void [b2PulleyJoint.h <44:2 44:5>]
REFERENCE_TYPE_USAGE: void b2PulleyJointDef::Initialize(b2Body *, b2Body *, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, float32) -> b2Body [b2PulleyJoint.h <44:18 44:23>]
REFERENCE_TYPE_USAGE: void b2PulleyJointDef::Initialize(b2Body *, b2Body *, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, float32) -> b2Body [b2PulleyJoint.h <44:33 44:38>]
REFERENCE_TYPE_USAGE: void b2PulleyJointDef::Initialize(b2Body *, b2Body *, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, float32) -> b2Vec2 [b2PulleyJoint.h <45:12 45:17>]
REFERENCE_TYPE_USAGE: void b2PulleyJointDef::Initialize(b2Body *, b2Body *, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, float32) -> b2Vec2 [b2PulleyJoint.h <45:41 45:46>]
REFERENCE_TYPE_USAGE: void b2PulleyJointDef::Initialize(b2Body *, b2Body *, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, float32) -> b2Vec2 [b2PulleyJoint.h <46:12 46:17>]
REFERENCE_TYPE_USAGE: void b2PulleyJointDef::Initialize(b2Body *, b2Body *, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, float32) -> b2Vec2 [b2PulleyJoint.h <46:35 46:40>]
REFERENCE_TYPE_USAGE: void b2PulleyJointDef::Initialize(b2Body *, b2Body *, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, const b2Vec2 &, float32) -> float32 [b2PulleyJoint.h <47:6 47:12>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJointDef::groundAnchorA -> b2Vec2 [b2PulleyJoint.h <50:2 50:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJointDef::groundAnchorB -> b2Vec2 [b2PulleyJoint.h <53:2 53:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJointDef::localAnchorA -> b2Vec2 [b2PulleyJoint.h <56:2 56:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJointDef::localAnchorB -> b2Vec2 [b2PulleyJoint.h <59:2 59:7>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJointDef::lengthA -> float32 [b2PulleyJoint.h <62:2 62:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJointDef::lengthB -> float32 [b2PulleyJoint.h <65:2 65:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJointDef::ratio -> float32 [b2PulleyJoint.h <68:2 68:8>]
REFERENCE_INHERITANCE: b2PulleyJoint -> b2Joint [b2PulleyJoint.h <79:30 79:36>]
REFERENCE_OVERRIDE: b2Vec2 b2PulleyJoint::GetAnchorA() const -> b2Vec2 b2Joint::GetAnchorA() const [b2PulleyJoint.h <82:9 82:18>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::GetAnchorA() const -> b2Vec2 [b2PulleyJoint.h <82:2 82:7>]
REFERENCE_OVERRIDE: b2Vec2 b2PulleyJoint::GetAnchorB() const -> b2Vec2 b2Joint::GetAnchorB() const [b2PulleyJoint.h <83:9 83:18>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::GetAnchorB() const -> b2Vec2 [b2PulleyJoint.h <83:2 83:7>]
REFERENCE_OVERRIDE: b2Vec2 b2PulleyJoint::GetReactionForce(float32) const -> b2Vec2 b2Joint::GetReactionForce(float32) const [b2PulleyJoint.h <85:9 85:24>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::GetReactionForce(float32) const -> b2Vec2 [b2PulleyJoint.h <85:2 85:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::GetReactionForce(float32) const -> float32 [b2PulleyJoint.h <85:26 85:32>]
REFERENCE_OVERRIDE: float32 b2PulleyJoint::GetReactionTorque(float32) const -> float32 b2Joint::GetReactionTorque(float32) const [b2PulleyJoint.h <86:10 86:26>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::GetReactionTorque(float32) const -> float32 [b2PulleyJoint.h <86:2 86:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::GetReactionTorque(float32) const -> float32 [b2PulleyJoint.h <86:28 86:34>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::GetGroundAnchorA() const -> b2Vec2 [b2PulleyJoint.h <89:2 89:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::GetGroundAnchorB() const -> b2Vec2 [b2PulleyJoint.h <92:2 92:7>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::GetLengthA() const -> float32 [b2PulleyJoint.h <95:2 95:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::GetLengthB() const -> float32 [b2PulleyJoint.h <98:2 98:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::GetRatio() const -> float32 [b2PulleyJoint.h <101:2 101:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::GetCurrentLengthA() const -> float32 [b2PulleyJoint.h <104:2 104:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::GetCurrentLengthB() const -> float32 [b2PulleyJoint.h <107:2 107:8>]
REFERENCE_OVERRIDE: void b2PulleyJoint::Dump() -> void b2Joint::Dump() [b2PulleyJoint.h <110:7 110:10>]
REFERENCE_TYPE_USAGE: void b2PulleyJoint::Dump() -> void [b2PulleyJoint.h <110:2 110:5>]
REFERENCE_OVERRIDE: void b2PulleyJoint::ShiftOrigin(const b2Vec2 &) -> void b2Joint::ShiftOrigin(const b2Vec2 &) [b2PulleyJoint.h <113:7 113:17>]
REFERENCE_TYPE_USAGE: void b2PulleyJoint::ShiftOrigin(const b2Vec2 &) -> void [b2PulleyJoint.h <113:2 113:5>]
REFERENCE_TYPE_USAGE: void b2PulleyJoint::ShiftOrigin(const b2Vec2 &) -> b2Vec2 [b2PulleyJoint.h <113:25 113:30>]
REFERENCE_TYPE_USAGE: b2PulleyJoint -> b2Joint [b2PulleyJoint.h <117:15 117:21>]
REFERENCE_TYPE_USAGE: void b2PulleyJoint::b2PulleyJoint(const b2PulleyJointDef *) -> b2PulleyJointDef [b2PulleyJoint.h <118:22 118:37>]
REFERENCE_OVERRIDE: void b2PulleyJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Joint::InitVelocityConstraints(const b2SolverData &) [b2PulleyJoint.h <120:7 120:29>]
REFERENCE_TYPE_USAGE: void b2PulleyJoint::InitVelocityConstraints(const b2SolverData &) -> void [b2PulleyJoint.h <120:2 120:5>]
REFERENCE_TYPE_USAGE: void b2PulleyJoint::InitVelocityConstraints(const b2SolverData &) -> b2SolverData [b2PulleyJoint.h <120:37 120:48>]
REFERENCE_OVERRIDE: void b2PulleyJoint::SolveVelocityConstraints(const b2SolverData &) -> void b2Joint::SolveVelocityConstraints(const b2SolverData &) [b2PulleyJoint.h <121:7 121:30>]
REFERENCE_TYPE_USAGE: void b2PulleyJoint::SolveVelocityConstraints(const b2SolverData &) -> void [b2PulleyJoint.h <121:2 121:5>]
REFERENCE_TYPE_USAGE: void b2PulleyJoint::SolveVelocityConstraints(const b2SolverData &) -> b2SolverData [b2PulleyJoint.h <121:38 121:49>]
REFERENCE_OVERRIDE: bool b2PulleyJoint::SolvePositionConstraints(const b2SolverData &) -> bool b2Joint::SolvePositionConstraints(const b2SolverData &) [b2PulleyJoint.h <122:7 122:30>]
REFERENCE_TYPE_USAGE: bool b2PulleyJoint::SolvePositionConstraints(const b2SolverData &) -> bool [b2PulleyJoint.h <122:2 122:5>]
REFERENCE_TYPE_USAGE: bool b2PulleyJoint::SolvePositionConstraints(const b2SolverData &) -> b2SolverData [b2PulleyJoint.h <122:38 122:49>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::m_groundAnchorA -> b2Vec2 [b2PulleyJoint.h <124:2 124:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::m_groundAnchorB -> b2Vec2 [b2PulleyJoint.h <125:2 125:7>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::m_lengthA -> float32 [b2PulleyJoint.h <126:2 126:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::m_lengthB -> float32 [b2PulleyJoint.h <127:2 127:8>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::m_localAnchorA -> b2Vec2 [b2PulleyJoint.h <130:2 130:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::m_localAnchorB -> b2Vec2 [b2PulleyJoint.h <131:2 131:7>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::m_constant -> float32 [b2PulleyJoint.h <132:2 132:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::m_ratio -> float32 [b2PulleyJoint.h <133:2 133:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::m_impulse -> float32 [b2PulleyJoint.h <134:2 134:8>]
REFERENCE_TYPE_USAGE: int32 b2PulleyJoint::m_indexA -> int32 [b2PulleyJoint.h <137:2 137:6>]
REFERENCE_TYPE_USAGE: int32 b2PulleyJoint::m_indexB -> int32 [b2PulleyJoint.h <138:2 138:6>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::m_uA -> b2Vec2 [b2PulleyJoint.h <139:2 139:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::m_uB -> b2Vec2 [b2PulleyJoint.h <140:2 140:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::m_rA -> b2Vec2 [b2PulleyJoint.h <141:2 141:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::m_rB -> b2Vec2 [b2PulleyJoint.h <142:2 142:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::m_localCenterA -> b2Vec2 [b2PulleyJoint.h <143:2 143:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PulleyJoint::m_localCenterB -> b2Vec2 [b2PulleyJoint.h <144:2 144:7>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::m_invMassA -> float32 [b2PulleyJoint.h <145:2 145:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::m_invMassB -> float32 [b2PulleyJoint.h <146:2 146:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::m_invIA -> float32 [b2PulleyJoint.h <147:2 147:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::m_invIB -> float32 [b2PulleyJoint.h <148:2 148:8>]
REFERENCE_TYPE_USAGE: float32 b2PulleyJoint::m_mass -> float32 [b2PulleyJoint.h <149:2 149:8>]
REFERENCE_OVERRIDE: void b2PulleyJoint::~b2PulleyJoint() -> void b2Joint::~b2Joint() [b2PulleyJoint.h <79:7 79:19>]
REFERENCE_TYPE_USAGE: float32 b2MixFriction(float32, float32) -> float32 [b2Contact.h <37:8 37:14>]
REFERENCE_TYPE_USAGE: float32 b2MixFriction(float32, float32) -> float32 [b2Contact.h <37:30 37:36>]
REFERENCE_TYPE_USAGE: float32 b2MixFriction(float32, float32) -> float32 [b2Contact.h <37:49 37:55>]
REFERENCE_CALL: float32 b2MixFriction(float32, float32) -> float sqrtf(float) [b2Contact.h <39:9 39:14>]
REFERENCE_TYPE_USAGE: float32 b2MixRestitution(float32, float32) -> float32 [b2Contact.h <44:8 44:14>]
REFERENCE_TYPE_USAGE: float32 b2MixRestitution(float32, float32) -> float32 [b2Contact.h <44:33 44:39>]
REFERENCE_TYPE_USAGE: float32 b2MixRestitution(float32, float32) -> float32 [b2Contact.h <44:55 44:61>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> b2Contact [b2Contact.h <49:9 49:17>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> b2Fixture [b2Contact.h <49:40 49:48>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> b2Fixture [b2Contact.h <50:11 50:19>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> int32 [b2Contact.h <49:61 49:65>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> int32 [b2Contact.h <50:32 50:36>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn -> b2BlockAllocator [b2Contact.h <51:11 51:26>]
REFERENCE_TYPE_USAGE: b2ContactDestroyFcn -> void [b2Contact.h <52:9 52:12>]
REFERENCE_TYPE_USAGE: b2ContactDestroyFcn -> b2Contact [b2Contact.h <52:34 52:42>]
REFERENCE_TYPE_USAGE: b2ContactDestroyFcn -> b2BlockAllocator [b2Contact.h <52:54 52:69>]
REFERENCE_TYPE_USAGE: b2ContactCreateFcn * b2ContactRegister::createFcn -> b2ContactCreateFcn [b2Contact.h <56:2 56:19>]
REFERENCE_TYPE_USAGE: b2ContactDestroyFcn * b2ContactRegister::destroyFcn -> b2ContactDestroyFcn [b2Contact.h <57:2 57:20>]
REFERENCE_TYPE_USAGE: bool b2ContactRegister::primary -> bool [b2Contact.h <58:2 58:5>]
REFERENCE_TYPE_USAGE: b2Body * b2ContactEdge::other -> b2Body [b2Contact.h <68:2 68:7>]
REFERENCE_TYPE_USAGE: b2Contact * b2ContactEdge::contact -> b2Contact [b2Contact.h <69:2 69:10>]
REFERENCE_TYPE_USAGE: b2ContactEdge * b2ContactEdge::prev -> b2ContactEdge [b2Contact.h <70:2 70:14>]
REFERENCE_TYPE_USAGE: b2ContactEdge * b2ContactEdge::next -> b2ContactEdge [b2Contact.h <71:2 71:14>]
REFERENCE_TYPE_USAGE: b2Manifold * b2Contact::GetManifold() -> b2Manifold [b2Contact.h <83:2 83:11>]
REFERENCE_TYPE_USAGE: b2Manifold * b2Contact::GetManifold() -> b2Manifold [b2Contact.h <222:8 222:17>]
REFERENCE_TYPE_USAGE: const b2Manifold * b2Contact::GetManifold() const -> b2Manifold [b2Contact.h <84:8 84:17>]
REFERENCE_TYPE_USAGE: const b2Manifold * b2Contact::GetManifold() const -> b2Manifold [b2Contact.h <227:14 227:23>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> void [b2Contact.h <87:2 87:5>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> void [b2Contact.h <232:8 232:11>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2WorldManifold [b2Contact.h <87:24 87:38>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2WorldManifold [b2Contact.h <232:41 232:55>]
REFERENCE_TYPE_USAGE: bool b2Contact::IsTouching() const -> bool [b2Contact.h <90:2 90:5>]
REFERENCE_TYPE_USAGE: bool b2Contact::IsTouching() const -> bool [b2Contact.h <259:8 259:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetEnabled(bool) -> void [b2Contact.h <95:2 95:5>]
REFERENCE_TYPE_USAGE: void b2Contact::SetEnabled(bool) -> void [b2Contact.h <242:8 242:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetEnabled(bool) -> bool [b2Contact.h <95:18 95:21>]
REFERENCE_TYPE_USAGE: void b2Contact::SetEnabled(bool) -> bool [b2Contact.h <242:35 242:38>]
REFERENCE_TYPE_USAGE: bool b2Contact::IsEnabled() const -> bool [b2Contact.h <98:2 98:5>]
REFERENCE_TYPE_USAGE: bool b2Contact::IsEnabled() const -> bool [b2Contact.h <254:8 254:11>]
REFERENCE_TYPE_USAGE: b2Contact * b2Contact::GetNext() -> b2Contact [b2Contact.h <101:2 101:10>]
REFERENCE_TYPE_USAGE: b2Contact * b2Contact::GetNext() -> b2Contact [b2Contact.h <264:8 264:16>]
REFERENCE_TYPE_USAGE: const b2Contact * b2Contact::GetNext() const -> b2Contact [b2Contact.h <102:8 102:16>]
REFERENCE_TYPE_USAGE: const b2Contact * b2Contact::GetNext() const -> b2Contact [b2Contact.h <269:14 269:22>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::GetFixtureA() -> b2Fixture [b2Contact.h <105:2 105:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::GetFixtureA() -> b2Fixture [b2Contact.h <274:8 274:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Contact::GetFixtureA() const -> b2Fixture [b2Contact.h <106:8 106:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Contact::GetFixtureA() const -> b2Fixture [b2Contact.h <279:14 279:22>]
REFERENCE_TYPE_USAGE: int32 b2Contact::GetChildIndexA() const -> int32 [b2Contact.h <109:2 109:6>]
REFERENCE_TYPE_USAGE: int32 b2Contact::GetChildIndexA() const -> int32 [b2Contact.h <289:8 289:12>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::GetFixtureB() -> b2Fixture [b2Contact.h <112:2 112:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::GetFixtureB() -> b2Fixture [b2Contact.h <284:8 284:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Contact::GetFixtureB() const -> b2Fixture [b2Contact.h <113:8 113:16>]
REFERENCE_TYPE_USAGE: const b2Fixture * b2Contact::GetFixtureB() const -> b2Fixture [b2Contact.h <294:14 294:22>]
REFERENCE_TYPE_USAGE: int32 b2Contact::GetChildIndexB() const -> int32 [b2Contact.h <116:2 116:6>]
REFERENCE_TYPE_USAGE: int32 b2Contact::GetChildIndexB() const -> int32 [b2Contact.h <299:8 299:12>]
REFERENCE_TYPE_USAGE: void b2Contact::SetFriction(float32) -> void [b2Contact.h <120:2 120:5>]
REFERENCE_TYPE_USAGE: void b2Contact::SetFriction(float32) -> void [b2Contact.h <309:8 309:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetFriction(float32) -> float32 [b2Contact.h <120:19 120:25>]
REFERENCE_TYPE_USAGE: void b2Contact::SetFriction(float32) -> float32 [b2Contact.h <309:36 309:42>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetFriction() const -> float32 [b2Contact.h <123:2 123:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetFriction() const -> float32 [b2Contact.h <314:8 314:14>]
REFERENCE_TYPE_USAGE: void b2Contact::ResetFriction() -> void [b2Contact.h <126:2 126:5>]
REFERENCE_TYPE_USAGE: void b2Contact::ResetFriction() -> void [b2Contact.h <319:8 319:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetRestitution(float32) -> void [b2Contact.h <130:2 130:5>]
REFERENCE_TYPE_USAGE: void b2Contact::SetRestitution(float32) -> void [b2Contact.h <324:8 324:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetRestitution(float32) -> float32 [b2Contact.h <130:22 130:28>]
REFERENCE_TYPE_USAGE: void b2Contact::SetRestitution(float32) -> float32 [b2Contact.h <324:39 324:45>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetRestitution() const -> float32 [b2Contact.h <133:2 133:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetRestitution() const -> float32 [b2Contact.h <329:8 329:14>]
REFERENCE_TYPE_USAGE: void b2Contact::ResetRestitution() -> void [b2Contact.h <136:2 136:5>]
REFERENCE_TYPE_USAGE: void b2Contact::ResetRestitution() -> void [b2Contact.h <334:8 334:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetTangentSpeed(float32) -> void [b2Contact.h <139:2 139:5>]
REFERENCE_TYPE_USAGE: void b2Contact::SetTangentSpeed(float32) -> void [b2Contact.h <339:8 339:11>]
REFERENCE_TYPE_USAGE: void b2Contact::SetTangentSpeed(float32) -> float32 [b2Contact.h <139:23 139:29>]
REFERENCE_TYPE_USAGE: void b2Contact::SetTangentSpeed(float32) -> float32 [b2Contact.h <339:40 339:46>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetTangentSpeed() const -> float32 [b2Contact.h <142:2 142:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::GetTangentSpeed() const -> float32 [b2Contact.h <344:8 344:14>]
REFERENCE_TYPE_USAGE: void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> void [b2Contact.h <145:10 145:13>]
REFERENCE_TYPE_USAGE: void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Manifold [b2Contact.h <145:24 145:33>]
REFERENCE_TYPE_USAGE: void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Transform [b2Contact.h <145:52 145:62>]
REFERENCE_TYPE_USAGE: void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Transform [b2Contact.h <145:76 145:86>]
REFERENCE_TYPE_USAGE: b2Contact -> b2ContactManager [b2Contact.h <148:15 148:30>]
REFERENCE_TYPE_USAGE: b2Contact -> b2World [b2Contact.h <149:15 149:21>]
REFERENCE_TYPE_USAGE: b2Contact -> b2ContactSolver [b2Contact.h <150:15 150:29>]
REFERENCE_TYPE_USAGE: b2Contact -> b2Body [b2Contact.h <151:15 151:20>]
REFERENCE_TYPE_USAGE: b2Contact -> b2Fixture [b2Contact.h <152:15 152:23>]
REFERENCE_TYPE_USAGE: void b2Contact::FlagForFiltering() -> void [b2Contact.h <177:2 177:5>]
REFERENCE_TYPE_USAGE: void b2Contact::FlagForFiltering() -> void [b2Contact.h <304:8 304:11>]
REFERENCE_TYPE_USAGE: static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) -> void [b2Contact.h <179:9 179:12>]
REFERENCE_TYPE_USAGE: static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) -> b2ContactCreateFcn [b2Contact.h <179:22 179:39>]
REFERENCE_TYPE_USAGE: static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) -> b2ContactDestroyFcn [b2Contact.h <179:53 179:71>]
REFERENCE_TYPE_USAGE: static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) -> b2Shape::Type [b2Contact.h <180:16 180:19>]
REFERENCE_TYPE_USAGE: static void b2Contact::AddType(b2ContactCreateFcn *, b2ContactDestroyFcn *, b2Shape::Type, b2Shape::Type) -> b2Shape::Type [b2Contact.h <180:37 180:40>]
REFERENCE_TYPE_USAGE: static void b2Contact::InitializeRegisters() -> void [b2Contact.h <181:9 181:12>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Contact [b2Contact.h <182:9 182:17>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Fixture [b2Contact.h <182:27 182:35>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Fixture [b2Contact.h <182:62 182:70>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> int32 [b2Contact.h <182:48 182:52>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> int32 [b2Contact.h <182:83 182:87>]
REFERENCE_TYPE_USAGE: static b2Contact * b2Contact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2BlockAllocator [b2Contact.h <182:97 182:112>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) -> void [b2Contact.h <183:9 183:12>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) -> b2Contact [b2Contact.h <183:22 183:30>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) -> b2Shape::Type [b2Contact.h <183:51 183:54>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) -> b2Shape::Type [b2Contact.h <183:72 183:75>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2Shape::Type, b2Shape::Type, b2BlockAllocator *) -> b2BlockAllocator [b2Contact.h <183:84 183:99>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2BlockAllocator *) -> void [b2Contact.h <184:9 184:12>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2BlockAllocator *) -> b2Contact [b2Contact.h <184:22 184:30>]
REFERENCE_TYPE_USAGE: static void b2Contact::Destroy(b2Contact *, b2BlockAllocator *) -> b2BlockAllocator [b2Contact.h <184:42 184:57>]
REFERENCE_USAGE: void b2Contact::b2Contact() -> b2ContactEdge b2Contact::m_nodeA [b2Contact.h <186:2 186:10>]
REFERENCE_CALL: void b2Contact::b2Contact() -> void b2ContactEdge::b2ContactEdge() [b2Contact.h <186:2 186:10>]
REFERENCE_USAGE: void b2Contact::b2Contact() -> b2ContactEdge b2Contact::m_nodeB [b2Contact.h <186:2 186:10>]
REFERENCE_USAGE: void b2Contact::b2Contact() -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <186:16 186:25>]
REFERENCE_USAGE: void b2Contact::b2Contact() -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <186:37 186:46>]
REFERENCE_USAGE: void b2Contact::b2Contact() -> b2Manifold b2Contact::m_manifold [b2Contact.h <186:2 186:10>]
REFERENCE_CALL: void b2Contact::b2Contact() -> void b2Manifold::b2Manifold() [b2Contact.h <186:2 186:10>]
REFERENCE_TYPE_USAGE: void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) -> b2Fixture [b2Contact.h <187:12 187:20>]
REFERENCE_TYPE_USAGE: void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) -> b2Fixture [b2Contact.h <187:47 187:55>]
REFERENCE_TYPE_USAGE: void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) -> int32 [b2Contact.h <187:33 187:37>]
REFERENCE_TYPE_USAGE: void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) -> int32 [b2Contact.h <187:68 187:72>]
REFERENCE_TYPE_USAGE: void b2Contact::Update(b2ContactListener *) -> void [b2Contact.h <190:2 190:5>]
REFERENCE_TYPE_USAGE: void b2Contact::Update(b2ContactListener *) -> b2ContactListener [b2Contact.h <190:14 190:30>]
REFERENCE_TYPE_USAGE: static b2ContactRegister [] [] b2Contact::s_registers -> b2ContactRegister [b2Contact.h <192:9 192:25>]
REFERENCE_USAGE: static b2ContactRegister [] [] b2Contact::s_registers -> b2Shape::Type::e_typeCount [b2Contact.h <192:48 192:58>]
REFERENCE_USAGE: static b2ContactRegister [] [] b2Contact::s_registers -> b2Shape::Type::e_typeCount [b2Contact.h <192:70 192:80>]
REFERENCE_TYPE_USAGE: static bool b2Contact::s_initialized -> bool [b2Contact.h <193:9 193:12>]
REFERENCE_TYPE_USAGE: uint32 b2Contact::m_flags -> uint32 [b2Contact.h <195:2 195:7>]
REFERENCE_TYPE_USAGE: b2Contact * b2Contact::m_prev -> b2Contact [b2Contact.h <198:2 198:10>]
REFERENCE_TYPE_USAGE: b2Contact * b2Contact::m_next -> b2Contact [b2Contact.h <199:2 199:10>]
REFERENCE_TYPE_USAGE: b2ContactEdge b2Contact::m_nodeA -> b2ContactEdge [b2Contact.h <202:2 202:14>]
REFERENCE_TYPE_USAGE: b2ContactEdge b2Contact::m_nodeB -> b2ContactEdge [b2Contact.h <203:2 203:14>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::m_fixtureA -> b2Fixture [b2Contact.h <205:2 205:10>]
REFERENCE_TYPE_USAGE: b2Fixture * b2Contact::m_fixtureB -> b2Fixture [b2Contact.h <206:2 206:10>]
REFERENCE_TYPE_USAGE: int32 b2Contact::m_indexA -> int32 [b2Contact.h <208:2 208:6>]
REFERENCE_TYPE_USAGE: int32 b2Contact::m_indexB -> int32 [b2Contact.h <209:2 209:6>]
REFERENCE_TYPE_USAGE: b2Manifold b2Contact::m_manifold -> b2Manifold [b2Contact.h <211:2 211:11>]
REFERENCE_TYPE_USAGE: int32 b2Contact::m_toiCount -> int32 [b2Contact.h <213:2 213:6>]
REFERENCE_TYPE_USAGE: float32 b2Contact::m_toi -> float32 [b2Contact.h <214:2 214:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::m_friction -> float32 [b2Contact.h <216:2 216:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::m_restitution -> float32 [b2Contact.h <217:2 217:8>]
REFERENCE_TYPE_USAGE: float32 b2Contact::m_tangentSpeed -> float32 [b2Contact.h <219:2 219:8>]
REFERENCE_USAGE: b2Manifold * b2Contact::GetManifold() -> b2Manifold b2Contact::m_manifold [b2Contact.h <224:10 224:19>]
REFERENCE_USAGE: const b2Manifold * b2Contact::GetManifold() const -> b2Manifold b2Contact::m_manifold [b2Contact.h <229:10 229:19>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Body [b2Contact.h <234:8 234:13>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Body [b2Contact.h <235:8 235:13>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Body * b2Fixture::GetBody() [b2Contact.h <234:36 234:42>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Body * b2Fixture::GetBody() [b2Contact.h <235:36 235:42>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <234:24 234:33>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <236:26 236:35>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <235:24 235:33>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <237:26 237:35>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Shape [b2Contact.h <236:8 236:14>]
REFERENCE_TYPE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Shape [b2Contact.h <237:8 237:14>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Shape * b2Fixture::GetShape() [b2Contact.h <236:38 236:45>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Shape * b2Fixture::GetShape() [b2Contact.h <237:38 237:45>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) [b2Contact.h <239:17 239:26>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> b2Manifold b2Contact::m_manifold [b2Contact.h <239:29 239:38>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> const b2Transform & b2Body::GetTransform() const [b2Contact.h <239:48 239:59>]
REFERENCE_CALL: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> const b2Transform & b2Body::GetTransform() const [b2Contact.h <239:89 239:100>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> float32 b2Shape::m_radius [b2Contact.h <239:72 239:79>]
REFERENCE_USAGE: void b2Contact::GetWorldManifold(b2WorldManifold *) const -> float32 b2Shape::m_radius [b2Contact.h <239:113 239:120>]
REFERENCE_USAGE: void b2Contact::SetEnabled(bool) -> uint32 b2Contact::m_flags [b2Contact.h <246:3 246:9>]
REFERENCE_USAGE: void b2Contact::SetEnabled(bool) -> uint32 b2Contact::m_flags [b2Contact.h <250:3 250:9>]
REFERENCE_USAGE: void b2Contact::SetEnabled(bool) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_enabledFlag [b2Contact.h <246:14 246:26>]
REFERENCE_USAGE: void b2Contact::SetEnabled(bool) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_enabledFlag [b2Contact.h <250:15 250:27>]
REFERENCE_USAGE: bool b2Contact::IsEnabled() const -> uint32 b2Contact::m_flags [b2Contact.h <256:10 256:16>]
REFERENCE_USAGE: bool b2Contact::IsEnabled() const -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_enabledFlag [b2Contact.h <256:20 256:32>]
REFERENCE_USAGE: bool b2Contact::IsEnabled() const -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_enabledFlag [b2Contact.h <256:38 256:50>]
REFERENCE_USAGE: bool b2Contact::IsTouching() const -> uint32 b2Contact::m_flags [b2Contact.h <261:10 261:16>]
REFERENCE_USAGE: bool b2Contact::IsTouching() const -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_touchingFlag [b2Contact.h <261:20 261:33>]
REFERENCE_USAGE: bool b2Contact::IsTouching() const -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_touchingFlag [b2Contact.h <261:39 261:52>]
REFERENCE_USAGE: b2Contact * b2Contact::GetNext() -> b2Contact * b2Contact::m_next [b2Contact.h <266:9 266:14>]
REFERENCE_USAGE: const b2Contact * b2Contact::GetNext() const -> b2Contact * b2Contact::m_next [b2Contact.h <271:9 271:14>]
REFERENCE_USAGE: b2Fixture * b2Contact::GetFixtureA() -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <276:9 276:18>]
REFERENCE_USAGE: const b2Fixture * b2Contact::GetFixtureA() const -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <281:9 281:18>]
REFERENCE_USAGE: b2Fixture * b2Contact::GetFixtureB() -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <286:9 286:18>]
REFERENCE_USAGE: int32 b2Contact::GetChildIndexA() const -> int32 b2Contact::m_indexA [b2Contact.h <291:9 291:16>]
REFERENCE_USAGE: const b2Fixture * b2Contact::GetFixtureB() const -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <296:9 296:18>]
REFERENCE_USAGE: int32 b2Contact::GetChildIndexB() const -> int32 b2Contact::m_indexB [b2Contact.h <301:9 301:16>]
REFERENCE_USAGE: void b2Contact::FlagForFiltering() -> uint32 b2Contact::m_flags [b2Contact.h <306:2 306:8>]
REFERENCE_USAGE: void b2Contact::FlagForFiltering() -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_filterFlag [b2Contact.h <306:13 306:24>]
REFERENCE_USAGE: void b2Contact::SetFriction(float32) -> float32 b2Contact::m_friction [b2Contact.h <311:2 311:11>]
REFERENCE_USAGE: float32 b2Contact::GetFriction() const -> float32 b2Contact::m_friction [b2Contact.h <316:9 316:18>]
REFERENCE_USAGE: void b2Contact::ResetFriction() -> float32 b2Contact::m_friction [b2Contact.h <321:2 321:11>]
REFERENCE_CALL: void b2Contact::ResetFriction() -> float32 b2MixFriction(float32, float32) [b2Contact.h <321:15 321:27>]
REFERENCE_USAGE: void b2Contact::ResetFriction() -> float32 b2Fixture::m_friction [b2Contact.h <321:41 321:50>]
REFERENCE_USAGE: void b2Contact::ResetFriction() -> float32 b2Fixture::m_friction [b2Contact.h <321:65 321:74>]
REFERENCE_USAGE: void b2Contact::ResetFriction() -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <321:29 321:38>]
REFERENCE_USAGE: void b2Contact::ResetFriction() -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <321:53 321:62>]
REFERENCE_USAGE: void b2Contact::SetRestitution(float32) -> float32 b2Contact::m_restitution [b2Contact.h <326:2 326:14>]
REFERENCE_USAGE: float32 b2Contact::GetRestitution() const -> float32 b2Contact::m_restitution [b2Contact.h <331:9 331:21>]
REFERENCE_USAGE: void b2Contact::ResetRestitution() -> float32 b2Contact::m_restitution [b2Contact.h <336:2 336:14>]
REFERENCE_CALL: void b2Contact::ResetRestitution() -> float32 b2MixRestitution(float32, float32) [b2Contact.h <336:18 336:33>]
REFERENCE_USAGE: void b2Contact::ResetRestitution() -> float32 b2Fixture::m_restitution [b2Contact.h <336:47 336:59>]
REFERENCE_USAGE: void b2Contact::ResetRestitution() -> float32 b2Fixture::m_restitution [b2Contact.h <336:74 336:86>]
REFERENCE_USAGE: void b2Contact::ResetRestitution() -> b2Fixture * b2Contact::m_fixtureA [b2Contact.h <336:35 336:44>]
REFERENCE_USAGE: void b2Contact::ResetRestitution() -> b2Fixture * b2Contact::m_fixtureB [b2Contact.h <336:62 336:71>]
REFERENCE_USAGE: void b2Contact::SetTangentSpeed(float32) -> float32 b2Contact::m_tangentSpeed [b2Contact.h <341:2 341:15>]
REFERENCE_USAGE: float32 b2Contact::GetTangentSpeed() const -> float32 b2Contact::m_tangentSpeed [b2Contact.h <346:9 346:22>]
REFERENCE_TYPE_USAGE: b2Vec2 b2VelocityConstraintPoint::rA -> b2Vec2 [b2ContactSolver.h <33:2 33:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2VelocityConstraintPoint::rB -> b2Vec2 [b2ContactSolver.h <34:2 34:7>]
REFERENCE_TYPE_USAGE: float32 b2VelocityConstraintPoint::normalImpulse -> float32 [b2ContactSolver.h <35:2 35:8>]
REFERENCE_TYPE_USAGE: float32 b2VelocityConstraintPoint::tangentImpulse -> float32 [b2ContactSolver.h <36:2 36:8>]
REFERENCE_TYPE_USAGE: float32 b2VelocityConstraintPoint::normalMass -> float32 [b2ContactSolver.h <37:2 37:8>]
REFERENCE_TYPE_USAGE: float32 b2VelocityConstraintPoint::tangentMass -> float32 [b2ContactSolver.h <38:2 38:8>]
REFERENCE_TYPE_USAGE: float32 b2VelocityConstraintPoint::velocityBias -> float32 [b2ContactSolver.h <39:2 39:8>]
REFERENCE_TYPE_USAGE: b2VelocityConstraintPoint [] b2ContactVelocityConstraint::points -> b2VelocityConstraintPoint [b2ContactSolver.h <44:2 44:26>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ContactVelocityConstraint::normal -> b2Vec2 [b2ContactSolver.h <45:2 45:7>]
REFERENCE_TYPE_USAGE: b2Mat22 b2ContactVelocityConstraint::normalMass -> b2Mat22 [b2ContactSolver.h <46:2 46:8>]
REFERENCE_TYPE_USAGE: b2Mat22 b2ContactVelocityConstraint::K -> b2Mat22 [b2ContactSolver.h <47:2 47:8>]
REFERENCE_TYPE_USAGE: int32 b2ContactVelocityConstraint::indexA -> int32 [b2ContactSolver.h <48:2 48:6>]
REFERENCE_TYPE_USAGE: int32 b2ContactVelocityConstraint::indexB -> int32 [b2ContactSolver.h <49:2 49:6>]
REFERENCE_TYPE_USAGE: float32 b2ContactVelocityConstraint::invMassA -> float32 [b2ContactSolver.h <50:2 50:8>]
REFERENCE_TYPE_USAGE: float32 b2ContactVelocityConstraint::invMassB -> float32 [b2ContactSolver.h <50:2 50:8>]
REFERENCE_TYPE_USAGE: float32 b2ContactVelocityConstraint::invIA -> float32 [b2ContactSolver.h <51:2 51:8>]
REFERENCE_TYPE_USAGE: float32 b2ContactVelocityConstraint::invIB -> float32 [b2ContactSolver.h <51:2 51:8>]
REFERENCE_TYPE_USAGE: float32 b2ContactVelocityConstraint::friction -> float32 [b2ContactSolver.h <52:2 52:8>]
REFERENCE_TYPE_USAGE: float32 b2ContactVelocityConstraint::restitution -> float32 [b2ContactSolver.h <53:2 53:8>]
REFERENCE_TYPE_USAGE: float32 b2ContactVelocityConstraint::tangentSpeed -> float32 [b2ContactSolver.h <54:2 54:8>]
REFERENCE_TYPE_USAGE: int32 b2ContactVelocityConstraint::pointCount -> int32 [b2ContactSolver.h <55:2 55:6>]
REFERENCE_TYPE_USAGE: int32 b2ContactVelocityConstraint::contactIndex -> int32 [b2ContactSolver.h <56:2 56:6>]
REFERENCE_TYPE_USAGE: b2TimeStep b2ContactSolverDef::step -> b2TimeStep [b2ContactSolver.h <61:2 61:11>]
REFERENCE_TYPE_USAGE: b2Contact * * b2ContactSolverDef::contacts -> b2Contact [b2ContactSolver.h <62:2 62:10>]
REFERENCE_TYPE_USAGE: int32 b2ContactSolverDef::count -> int32 [b2ContactSolver.h <63:2 63:6>]
REFERENCE_TYPE_USAGE: b2Position * b2ContactSolverDef::positions -> b2Position [b2ContactSolver.h <64:2 64:11>]
REFERENCE_TYPE_USAGE: b2Velocity * b2ContactSolverDef::velocities -> b2Velocity [b2ContactSolver.h <65:2 65:11>]
REFERENCE_TYPE_USAGE: b2StackAllocator * b2ContactSolverDef::allocator -> b2StackAllocator [b2ContactSolver.h <66:2 66:17>]
REFERENCE_TYPE_USAGE: void b2ContactSolver::b2ContactSolver(b2ContactSolverDef *) -> b2ContactSolverDef [b2ContactSolver.h <72:18 72:35>]
REFERENCE_TYPE_USAGE: void b2ContactSolver::InitializeVelocityConstraints() -> void [b2ContactSolver.h <75:2 75:5>]
REFERENCE_TYPE_USAGE: void b2ContactSolver::WarmStart() -> void [b2ContactSolver.h <77:2 77:5>]
REFERENCE_TYPE_USAGE: void b2ContactSolver::SolveVelocityConstraints() -> void [b2ContactSolver.h <78:2 78:5>]
REFERENCE_TYPE_USAGE: void b2ContactSolver::StoreImpulses() -> void [b2ContactSolver.h <79:2 79:5>]
REFERENCE_TYPE_USAGE: bool b2ContactSolver::SolvePositionConstraints() -> bool [b2ContactSolver.h <81:2 81:5>]
REFERENCE_TYPE_USAGE: bool b2ContactSolver::SolveTOIPositionConstraints(int32, int32) -> bool [b2ContactSolver.h <82:2 82:5>]
REFERENCE_TYPE_USAGE: bool b2ContactSolver::SolveTOIPositionConstraints(int32, int32) -> int32 [b2ContactSolver.h <82:35 82:39>]
REFERENCE_TYPE_USAGE: bool b2ContactSolver::SolveTOIPositionConstraints(int32, int32) -> int32 [b2ContactSolver.h <82:52 82:56>]
REFERENCE_TYPE_USAGE: b2TimeStep b2ContactSolver::m_step -> b2TimeStep [b2ContactSolver.h <84:2 84:11>]
REFERENCE_TYPE_USAGE: b2Position * b2ContactSolver::m_positions -> b2Position [b2ContactSolver.h <85:2 85:11>]
REFERENCE_TYPE_USAGE: b2Velocity * b2ContactSolver::m_velocities -> b2Velocity [b2ContactSolver.h <86:2 86:11>]
REFERENCE_TYPE_USAGE: b2StackAllocator * b2ContactSolver::m_allocator -> b2StackAllocator [b2ContactSolver.h <87:2 87:17>]
REFERENCE_TYPE_USAGE: b2ContactPositionConstraint * b2ContactSolver::m_positionConstraints -> b2ContactPositionConstraint [b2ContactSolver.h <88:2 88:28>]
REFERENCE_TYPE_USAGE: b2ContactVelocityConstraint * b2ContactSolver::m_velocityConstraints -> b2ContactVelocityConstraint [b2ContactSolver.h <89:2 89:28>]
REFERENCE_TYPE_USAGE: b2Contact * * b2ContactSolver::m_contacts -> b2Contact [b2ContactSolver.h <90:2 90:10>]
REFERENCE_TYPE_USAGE: int b2ContactSolver::m_count -> int [b2ContactSolver.h <91:2 91:4>]
REFERENCE_INHERITANCE: b2CircleShape -> b2Shape [b2CircleShape.h <25:30 25:36>]
REFERENCE_OVERRIDE: b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2CircleShape.h <31:11 31:15>]
REFERENCE_TYPE_USAGE: b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2Shape [b2CircleShape.h <31:2 31:8>]
REFERENCE_TYPE_USAGE: b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2CircleShape.h <31:17 31:32>]
REFERENCE_OVERRIDE: int32 b2CircleShape::GetChildCount() const -> int32 b2Shape::GetChildCount() const [b2CircleShape.h <34:8 34:20>]
REFERENCE_TYPE_USAGE: int32 b2CircleShape::GetChildCount() const -> int32 [b2CircleShape.h <34:2 34:6>]
REFERENCE_OVERRIDE: bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2CircleShape.h <37:7 37:15>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2CircleShape.h <37:2 37:5>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2CircleShape.h <37:23 37:33>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2CircleShape.h <37:53 37:58>]
REFERENCE_OVERRIDE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2CircleShape.h <40:7 40:13>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2CircleShape.h <40:2 40:5>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2CircleShape.h <40:15 40:29>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2CircleShape.h <40:46 40:59>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2CircleShape.h <41:11 41:21>]
REFERENCE_TYPE_USAGE: bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2CircleShape.h <41:35 41:39>]
REFERENCE_OVERRIDE: void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2CircleShape.h <44:7 44:17>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2CircleShape.h <44:2 44:5>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2CircleShape.h <44:19 44:24>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2CircleShape.h <44:39 44:49>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2CircleShape.h <44:63 44:67>]
REFERENCE_OVERRIDE: void b2CircleShape::ComputeMass(b2MassData *, float32) const -> void b2Shape::ComputeMass(b2MassData *, float32) const [b2CircleShape.h <47:7 47:17>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeMass(b2MassData *, float32) const -> void [b2CircleShape.h <47:2 47:5>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2CircleShape.h <47:19 47:28>]
REFERENCE_TYPE_USAGE: void b2CircleShape::ComputeMass(b2MassData *, float32) const -> float32 [b2CircleShape.h <47:41 47:47>]
REFERENCE_TYPE_USAGE: b2Vec2 b2CircleShape::m_p -> b2Vec2 [b2CircleShape.h <50:2 50:7>]
REFERENCE_OVERRIDE: void b2CircleShape::~b2CircleShape() -> void b2Shape::~b2Shape() [b2CircleShape.h <25:7 25:19>]
REFERENCE_CALL: void b2CircleShape::b2CircleShape() -> void b2Shape::b2Shape() [b2CircleShape.h <53:23 53:35>]
REFERENCE_USAGE: void b2CircleShape::b2CircleShape() -> b2Vec2 b2CircleShape::m_p [b2CircleShape.h <53:23 53:35>]
REFERENCE_USAGE: void b2CircleShape::b2CircleShape() -> b2Vec2 b2CircleShape::m_p [b2CircleShape.h <57:2 57:4>]
REFERENCE_CALL: void b2CircleShape::b2CircleShape() -> void b2Vec2::b2Vec2() [b2CircleShape.h <53:23 53:35>]
REFERENCE_USAGE: void b2CircleShape::b2CircleShape() -> b2Shape::Type b2Shape::m_type [b2CircleShape.h <55:2 55:7>]
REFERENCE_USAGE: void b2CircleShape::b2CircleShape() -> b2Shape::Type::e_circle [b2CircleShape.h <55:11 55:18>]
REFERENCE_USAGE: void b2CircleShape::b2CircleShape() -> float32 b2Shape::m_radius [b2CircleShape.h <56:2 56:9>]
REFERENCE_CALL: void b2CircleShape::b2CircleShape() -> void b2Vec2::SetZero() [b2CircleShape.h <57:6 57:12>]
REFERENCE_INHERITANCE: b2EdgeShape -> b2Shape [b2EdgeShape.h <27:28 27:34>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> void [b2EdgeShape.h <33:2 33:5>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2EdgeShape.h <33:17 33:22>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2EdgeShape.h <33:35 33:40>]
REFERENCE_OVERRIDE: b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2EdgeShape.h <36:11 36:15>]
REFERENCE_TYPE_USAGE: b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2Shape [b2EdgeShape.h <36:2 36:8>]
REFERENCE_TYPE_USAGE: b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2EdgeShape.h <36:17 36:32>]
REFERENCE_OVERRIDE: int32 b2EdgeShape::GetChildCount() const -> int32 b2Shape::GetChildCount() const [b2EdgeShape.h <39:8 39:20>]
REFERENCE_TYPE_USAGE: int32 b2EdgeShape::GetChildCount() const -> int32 [b2EdgeShape.h <39:2 39:6>]
REFERENCE_OVERRIDE: bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2EdgeShape.h <42:7 42:15>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2EdgeShape.h <42:2 42:5>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2EdgeShape.h <42:23 42:33>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2EdgeShape.h <42:53 42:58>]
REFERENCE_OVERRIDE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2EdgeShape.h <45:7 45:13>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2EdgeShape.h <45:2 45:5>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2EdgeShape.h <45:15 45:29>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2EdgeShape.h <45:46 45:59>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2EdgeShape.h <46:11 46:21>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2EdgeShape.h <46:35 46:39>]
REFERENCE_OVERRIDE: void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2EdgeShape.h <49:7 49:17>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2EdgeShape.h <49:2 49:5>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2EdgeShape.h <49:19 49:24>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2EdgeShape.h <49:39 49:49>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2EdgeShape.h <49:63 49:67>]
REFERENCE_OVERRIDE: void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> void b2Shape::ComputeMass(b2MassData *, float32) const [b2EdgeShape.h <52:7 52:17>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> void [b2EdgeShape.h <52:2 52:5>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2EdgeShape.h <52:19 52:28>]
REFERENCE_TYPE_USAGE: void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> float32 [b2EdgeShape.h <52:41 52:47>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EdgeShape::m_vertex1 -> b2Vec2 [b2EdgeShape.h <55:2 55:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EdgeShape::m_vertex2 -> b2Vec2 [b2EdgeShape.h <55:2 55:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EdgeShape::m_vertex0 -> b2Vec2 [b2EdgeShape.h <58:2 58:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2EdgeShape::m_vertex3 -> b2Vec2 [b2EdgeShape.h <58:2 58:7>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::m_hasVertex0 -> bool [b2EdgeShape.h <59:2 59:5>]
REFERENCE_TYPE_USAGE: bool b2EdgeShape::m_hasVertex3 -> bool [b2EdgeShape.h <59:2 59:5>]
REFERENCE_OVERRIDE: void b2EdgeShape::~b2EdgeShape() -> void b2Shape::~b2Shape() [b2EdgeShape.h <27:7 27:17>]
REFERENCE_CALL: void b2EdgeShape::b2EdgeShape() -> void b2Shape::b2Shape() [b2EdgeShape.h <62:21 62:31>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex1 [b2EdgeShape.h <62:21 62:31>]
REFERENCE_CALL: void b2EdgeShape::b2EdgeShape() -> void b2Vec2::b2Vec2() [b2EdgeShape.h <62:21 62:31>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex2 [b2EdgeShape.h <62:21 62:31>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex0 [b2EdgeShape.h <62:21 62:31>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex0 [b2EdgeShape.h <66:2 66:10>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex0 [b2EdgeShape.h <67:2 67:10>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex3 [b2EdgeShape.h <62:21 62:31>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex3 [b2EdgeShape.h <68:2 68:10>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Vec2 b2EdgeShape::m_vertex3 [b2EdgeShape.h <69:2 69:10>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Shape::Type b2Shape::m_type [b2EdgeShape.h <64:2 64:7>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> b2Shape::Type::e_edge [b2EdgeShape.h <64:11 64:16>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> float32 b2Shape::m_radius [b2EdgeShape.h <65:2 65:9>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> float32 b2Vec2::x [b2EdgeShape.h <66:12 66:12>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> float32 b2Vec2::x [b2EdgeShape.h <68:12 68:12>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> float32 b2Vec2::y [b2EdgeShape.h <67:12 67:12>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> float32 b2Vec2::y [b2EdgeShape.h <69:12 69:12>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> bool b2EdgeShape::m_hasVertex0 [b2EdgeShape.h <70:2 70:13>]
REFERENCE_USAGE: void b2EdgeShape::b2EdgeShape() -> bool b2EdgeShape::m_hasVertex3 [b2EdgeShape.h <71:2 71:13>]
REFERENCE_INHERITANCE: b2ChainShape -> b2Shape [b2ChainShape.h <32:29 32:35>]
REFERENCE_OVERRIDE: void b2ChainShape::~b2ChainShape() -> void b2Shape::~b2Shape() [b2ChainShape.h <38:2 38:2>]
REFERENCE_TYPE_USAGE: void b2ChainShape::Clear() -> void [b2ChainShape.h <41:2 41:5>]
REFERENCE_TYPE_USAGE: void b2ChainShape::CreateLoop(const b2Vec2 *, int32) -> void [b2ChainShape.h <46:2 46:5>]
REFERENCE_TYPE_USAGE: void b2ChainShape::CreateLoop(const b2Vec2 *, int32) -> b2Vec2 [b2ChainShape.h <46:24 46:29>]
REFERENCE_TYPE_USAGE: void b2ChainShape::CreateLoop(const b2Vec2 *, int32) -> int32 [b2ChainShape.h <46:42 46:46>]
REFERENCE_TYPE_USAGE: void b2ChainShape::CreateChain(const b2Vec2 *, int32) -> void [b2ChainShape.h <51:2 51:5>]
REFERENCE_TYPE_USAGE: void b2ChainShape::CreateChain(const b2Vec2 *, int32) -> b2Vec2 [b2ChainShape.h <51:25 51:30>]
REFERENCE_TYPE_USAGE: void b2ChainShape::CreateChain(const b2Vec2 *, int32) -> int32 [b2ChainShape.h <51:43 51:47>]
REFERENCE_TYPE_USAGE: void b2ChainShape::SetPrevVertex(const b2Vec2 &) -> void [b2ChainShape.h <55:2 55:5>]
REFERENCE_TYPE_USAGE: void b2ChainShape::SetPrevVertex(const b2Vec2 &) -> b2Vec2 [b2ChainShape.h <55:27 55:32>]
REFERENCE_TYPE_USAGE: void b2ChainShape::SetNextVertex(const b2Vec2 &) -> void [b2ChainShape.h <59:2 59:5>]
REFERENCE_TYPE_USAGE: void b2ChainShape::SetNextVertex(const b2Vec2 &) -> b2Vec2 [b2ChainShape.h <59:27 59:32>]
REFERENCE_OVERRIDE: b2Shape * b2ChainShape::Clone(b2BlockAllocator *) const -> b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2ChainShape.h <62:11 62:15>]
REFERENCE_TYPE_USAGE: b2Shape * b2ChainShape::Clone(b2BlockAllocator *) const -> b2Shape [b2ChainShape.h <62:2 62:8>]
REFERENCE_TYPE_USAGE: b2Shape * b2ChainShape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2ChainShape.h <62:17 62:32>]
REFERENCE_OVERRIDE: int32 b2ChainShape::GetChildCount() const -> int32 b2Shape::GetChildCount() const [b2ChainShape.h <65:8 65:20>]
REFERENCE_TYPE_USAGE: int32 b2ChainShape::GetChildCount() const -> int32 [b2ChainShape.h <65:2 65:6>]
REFERENCE_TYPE_USAGE: void b2ChainShape::GetChildEdge(b2EdgeShape *, int32) const -> void [b2ChainShape.h <68:2 68:5>]
REFERENCE_TYPE_USAGE: void b2ChainShape::GetChildEdge(b2EdgeShape *, int32) const -> b2EdgeShape [b2ChainShape.h <68:20 68:30>]
REFERENCE_TYPE_USAGE: void b2ChainShape::GetChildEdge(b2EdgeShape *, int32) const -> int32 [b2ChainShape.h <68:39 68:43>]
REFERENCE_OVERRIDE: bool b2ChainShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2ChainShape.h <72:7 72:15>]
REFERENCE_TYPE_USAGE: bool b2ChainShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2ChainShape.h <72:2 72:5>]
REFERENCE_TYPE_USAGE: bool b2ChainShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2ChainShape.h <72:23 72:33>]
REFERENCE_TYPE_USAGE: bool b2ChainShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2ChainShape.h <72:53 72:58>]
REFERENCE_OVERRIDE: bool b2ChainShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2ChainShape.h <75:7 75:13>]
REFERENCE_TYPE_USAGE: bool b2ChainShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2ChainShape.h <75:2 75:5>]
REFERENCE_TYPE_USAGE: bool b2ChainShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2ChainShape.h <75:15 75:29>]
REFERENCE_TYPE_USAGE: bool b2ChainShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2ChainShape.h <75:46 75:59>]
REFERENCE_TYPE_USAGE: bool b2ChainShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2ChainShape.h <76:12 76:22>]
REFERENCE_TYPE_USAGE: bool b2ChainShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2ChainShape.h <76:36 76:40>]
REFERENCE_OVERRIDE: void b2ChainShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2ChainShape.h <79:7 79:17>]
REFERENCE_TYPE_USAGE: void b2ChainShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2ChainShape.h <79:2 79:5>]
REFERENCE_TYPE_USAGE: void b2ChainShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2ChainShape.h <79:19 79:24>]
REFERENCE_TYPE_USAGE: void b2ChainShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2ChainShape.h <79:39 79:49>]
REFERENCE_TYPE_USAGE: void b2ChainShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2ChainShape.h <79:63 79:67>]
REFERENCE_OVERRIDE: void b2ChainShape::ComputeMass(b2MassData *, float32) const -> void b2Shape::ComputeMass(b2MassData *, float32) const [b2ChainShape.h <83:7 83:17>]
REFERENCE_TYPE_USAGE: void b2ChainShape::ComputeMass(b2MassData *, float32) const -> void [b2ChainShape.h <83:2 83:5>]
REFERENCE_TYPE_USAGE: void b2ChainShape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2ChainShape.h <83:19 83:28>]
REFERENCE_TYPE_USAGE: void b2ChainShape::ComputeMass(b2MassData *, float32) const -> float32 [b2ChainShape.h <83:41 83:47>]
REFERENCE_TYPE_USAGE: b2Vec2 * b2ChainShape::m_vertices -> b2Vec2 [b2ChainShape.h <86:2 86:7>]
REFERENCE_TYPE_USAGE: int32 b2ChainShape::m_count -> int32 [b2ChainShape.h <89:2 89:6>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ChainShape::m_prevVertex -> b2Vec2 [b2ChainShape.h <91:2 91:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2ChainShape::m_nextVertex -> b2Vec2 [b2ChainShape.h <91:2 91:7>]
REFERENCE_TYPE_USAGE: bool b2ChainShape::m_hasPrevVertex -> bool [b2ChainShape.h <92:2 92:5>]
REFERENCE_TYPE_USAGE: bool b2ChainShape::m_hasNextVertex -> bool [b2ChainShape.h <92:2 92:5>]
REFERENCE_CALL: void b2ChainShape::b2ChainShape() -> void b2Shape::b2Shape() [b2ChainShape.h <95:22 95:33>]
REFERENCE_USAGE: void b2ChainShape::b2ChainShape() -> b2Vec2 b2ChainShape::m_prevVertex [b2ChainShape.h <95:22 95:33>]
REFERENCE_CALL: void b2ChainShape::b2ChainShape() -> void b2Vec2::b2Vec2() [b2ChainShape.h <95:22 95:33>]
REFERENCE_USAGE: void b2ChainShape::b2ChainShape() -> b2Vec2 b2ChainShape::m_nextVertex [b2ChainShape.h <95:22 95:33>]
REFERENCE_USAGE: void b2ChainShape::b2ChainShape() -> b2Shape::Type b2Shape::m_type [b2ChainShape.h <97:2 97:7>]
REFERENCE_USAGE: void b2ChainShape::b2ChainShape() -> b2Shape::Type::e_chain [b2ChainShape.h <97:11 97:17>]
REFERENCE_USAGE: void b2ChainShape::b2ChainShape() -> float32 b2Shape::m_radius [b2ChainShape.h <98:2 98:9>]
REFERENCE_USAGE: void b2ChainShape::b2ChainShape() -> b2Vec2 * b2ChainShape::m_vertices [b2ChainShape.h <99:2 99:11>]
REFERENCE_USAGE: void b2ChainShape::b2ChainShape() -> int32 b2ChainShape::m_count [b2ChainShape.h <100:2 100:8>]
REFERENCE_USAGE: void b2ChainShape::b2ChainShape() -> bool b2ChainShape::m_hasPrevVertex [b2ChainShape.h <101:2 101:16>]
REFERENCE_USAGE: void b2ChainShape::b2ChainShape() -> bool b2ChainShape::m_hasNextVertex [b2ChainShape.h <102:2 102:16>]
REFERENCE_INHERITANCE: b2PolygonShape -> b2Shape [b2PolygonShape.h <28:31 28:37>]
REFERENCE_OVERRIDE: b2Shape * b2PolygonShape::Clone(b2BlockAllocator *) const -> b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2PolygonShape.h <34:11 34:15>]
REFERENCE_TYPE_USAGE: b2Shape * b2PolygonShape::Clone(b2BlockAllocator *) const -> b2Shape [b2PolygonShape.h <34:2 34:8>]
REFERENCE_TYPE_USAGE: b2Shape * b2PolygonShape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2PolygonShape.h <34:17 34:32>]
REFERENCE_OVERRIDE: int32 b2PolygonShape::GetChildCount() const -> int32 b2Shape::GetChildCount() const [b2PolygonShape.h <37:8 37:20>]
REFERENCE_TYPE_USAGE: int32 b2PolygonShape::GetChildCount() const -> int32 [b2PolygonShape.h <37:2 37:6>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::Set(const b2Vec2 *, int32) -> void [b2PolygonShape.h <44:2 44:5>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::Set(const b2Vec2 *, int32) -> b2Vec2 [b2PolygonShape.h <44:17 44:22>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::Set(const b2Vec2 *, int32) -> int32 [b2PolygonShape.h <44:33 44:37>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32) -> void [b2PolygonShape.h <49:2 49:5>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32) -> float32 [b2PolygonShape.h <49:16 49:22>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32) -> float32 [b2PolygonShape.h <49:28 49:34>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) -> void [b2PolygonShape.h <56:2 56:5>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) -> float32 [b2PolygonShape.h <56:16 56:22>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) -> float32 [b2PolygonShape.h <56:28 56:34>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) -> float32 [b2PolygonShape.h <56:62 56:68>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::SetAsBox(float32, float32, const b2Vec2 &, float32) -> b2Vec2 [b2PolygonShape.h <56:46 56:51>]
REFERENCE_OVERRIDE: bool b2PolygonShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2PolygonShape.h <59:7 59:15>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2PolygonShape.h <59:2 59:5>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2PolygonShape.h <59:23 59:33>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2PolygonShape.h <59:53 59:58>]
REFERENCE_OVERRIDE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2PolygonShape.h <62:7 62:13>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2PolygonShape.h <62:2 62:5>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2PolygonShape.h <62:15 62:29>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2PolygonShape.h <62:46 62:59>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2PolygonShape.h <63:12 63:22>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2PolygonShape.h <63:36 63:40>]
REFERENCE_OVERRIDE: void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2PolygonShape.h <66:7 66:17>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2PolygonShape.h <66:2 66:5>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2PolygonShape.h <66:19 66:24>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2PolygonShape.h <66:39 66:49>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2PolygonShape.h <66:63 66:67>]
REFERENCE_OVERRIDE: void b2PolygonShape::ComputeMass(b2MassData *, float32) const -> void b2Shape::ComputeMass(b2MassData *, float32) const [b2PolygonShape.h <69:7 69:17>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeMass(b2MassData *, float32) const -> void [b2PolygonShape.h <69:2 69:5>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2PolygonShape.h <69:19 69:28>]
REFERENCE_TYPE_USAGE: void b2PolygonShape::ComputeMass(b2MassData *, float32) const -> float32 [b2PolygonShape.h <69:41 69:47>]
REFERENCE_TYPE_USAGE: bool b2PolygonShape::Validate() const -> bool [b2PolygonShape.h <73:2 73:5>]
REFERENCE_TYPE_USAGE: b2Vec2 b2PolygonShape::m_centroid -> b2Vec2 [b2PolygonShape.h <75:2 75:7>]
REFERENCE_TYPE_USAGE: b2Vec2 [] b2PolygonShape::m_vertices -> b2Vec2 [b2PolygonShape.h <76:2 76:7>]
REFERENCE_TYPE_USAGE: b2Vec2 [] b2PolygonShape::m_normals -> b2Vec2 [b2PolygonShape.h <77:2 77:7>]
REFERENCE_TYPE_USAGE: int32 b2PolygonShape::m_count -> int32 [b2PolygonShape.h <78:2 78:6>]
REFERENCE_OVERRIDE: void b2PolygonShape::~b2PolygonShape() -> void b2Shape::~b2Shape() [b2PolygonShape.h <28:7 28:20>]
REFERENCE_CALL: void b2PolygonShape::b2PolygonShape() -> void b2Shape::b2Shape() [b2PolygonShape.h <81:24 81:37>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Vec2 b2PolygonShape::m_centroid [b2PolygonShape.h <81:24 81:37>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Vec2 b2PolygonShape::m_centroid [b2PolygonShape.h <86:2 86:11>]
REFERENCE_CALL: void b2PolygonShape::b2PolygonShape() -> void b2Vec2::b2Vec2() [b2PolygonShape.h <81:24 81:37>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Vec2 [] b2PolygonShape::m_vertices [b2PolygonShape.h <81:24 81:37>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Vec2 [] b2PolygonShape::m_normals [b2PolygonShape.h <81:24 81:37>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Shape::Type b2Shape::m_type [b2PolygonShape.h <83:2 83:7>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> b2Shape::Type::e_polygon [b2PolygonShape.h <83:11 83:19>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> float32 b2Shape::m_radius [b2PolygonShape.h <84:2 84:9>]
REFERENCE_USAGE: void b2PolygonShape::b2PolygonShape() -> int32 b2PolygonShape::m_count [b2PolygonShape.h <85:2 85:8>]
REFERENCE_CALL: void b2PolygonShape::b2PolygonShape() -> void b2Vec2::SetZero() [b2PolygonShape.h <86:13 86:19>]
REFERENCE_USAGE: void b2DistanceProxy::b2DistanceProxy() -> b2Vec2 [] b2DistanceProxy::m_buffer [b2Distance.h <31:2 31:16>]
REFERENCE_CALL: void b2DistanceProxy::b2DistanceProxy() -> void b2Vec2::b2Vec2() [b2Distance.h <31:2 31:16>]
REFERENCE_USAGE: void b2DistanceProxy::b2DistanceProxy() -> const b2Vec2 * b2DistanceProxy::m_vertices [b2Distance.h <31:22 31:31>]
REFERENCE_USAGE: void b2DistanceProxy::b2DistanceProxy() -> int32 b2DistanceProxy::m_count [b2Distance.h <31:43 31:49>]
REFERENCE_USAGE: void b2DistanceProxy::b2DistanceProxy() -> float32 b2DistanceProxy::m_radius [b2Distance.h <31:55 31:62>]
REFERENCE_TYPE_USAGE: void b2DistanceProxy::Set(const b2Shape *, int32) -> void [b2Distance.h <35:2 35:5>]
REFERENCE_TYPE_USAGE: void b2DistanceProxy::Set(const b2Shape *, int32) -> b2Shape [b2Distance.h <35:17 35:23>]
REFERENCE_TYPE_USAGE: void b2DistanceProxy::Set(const b2Shape *, int32) -> int32 [b2Distance.h <35:33 35:37>]
REFERENCE_TYPE_USAGE: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> int32 [b2Distance.h <38:2 38:6>]
REFERENCE_TYPE_USAGE: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> int32 [b2Distance.h <107:8 107:12>]
REFERENCE_TYPE_USAGE: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> int32 [b2Distance.h <109:2 109:6>]
REFERENCE_TYPE_USAGE: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> int32 [b2Distance.h <111:7 111:11>]
REFERENCE_TYPE_USAGE: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> b2Vec2 [b2Distance.h <38:25 38:30>]
REFERENCE_TYPE_USAGE: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> b2Vec2 [b2Distance.h <107:48 107:53>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> b2Vec2 [b2Distance.h <41:8 41:13>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> b2Vec2 [b2Distance.h <41:39 41:44>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> b2Vec2 [b2Distance.h <124:14 124:19>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> b2Vec2 [b2Distance.h <124:62 124:67>]
REFERENCE_TYPE_USAGE: int32 b2DistanceProxy::GetVertexCount() const -> int32 [b2Distance.h <44:2 44:6>]
REFERENCE_TYPE_USAGE: int32 b2DistanceProxy::GetVertexCount() const -> int32 [b2Distance.h <96:8 96:12>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetVertex(int32) const -> b2Vec2 [b2Distance.h <47:8 47:13>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetVertex(int32) const -> b2Vec2 [b2Distance.h <101:14 101:19>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetVertex(int32) const -> int32 [b2Distance.h <47:26 47:30>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetVertex(int32) const -> int32 [b2Distance.h <101:49 101:53>]
REFERENCE_TYPE_USAGE: b2Vec2 [] b2DistanceProxy::m_buffer -> b2Vec2 [b2Distance.h <49:2 49:7>]
REFERENCE_TYPE_USAGE: const b2Vec2 * b2DistanceProxy::m_vertices -> b2Vec2 [b2Distance.h <50:8 50:13>]
REFERENCE_TYPE_USAGE: int32 b2DistanceProxy::m_count -> int32 [b2Distance.h <51:2 51:6>]
REFERENCE_TYPE_USAGE: float32 b2DistanceProxy::m_radius -> float32 [b2Distance.h <52:2 52:8>]
REFERENCE_TYPE_USAGE: float32 b2SimplexCache::metric -> float32 [b2Distance.h <59:2 59:8>]
REFERENCE_TYPE_USAGE: uint16 b2SimplexCache::count -> uint16 [b2Distance.h <60:2 60:7>]
REFERENCE_TYPE_USAGE: uint8 [] b2SimplexCache::indexA -> uint8 [b2Distance.h <61:2 61:6>]
REFERENCE_TYPE_USAGE: uint8 [] b2SimplexCache::indexB -> uint8 [b2Distance.h <62:2 62:6>]
REFERENCE_TYPE_USAGE: b2DistanceProxy b2DistanceInput::proxyA -> b2DistanceProxy [b2Distance.h <70:2 70:16>]
REFERENCE_TYPE_USAGE: b2DistanceProxy b2DistanceInput::proxyB -> b2DistanceProxy [b2Distance.h <71:2 71:16>]
REFERENCE_TYPE_USAGE: b2Transform b2DistanceInput::transformA -> b2Transform [b2Distance.h <72:2 72:12>]
REFERENCE_TYPE_USAGE: b2Transform b2DistanceInput::transformB -> b2Transform [b2Distance.h <73:2 73:12>]
REFERENCE_TYPE_USAGE: bool b2DistanceInput::useRadii -> bool [b2Distance.h <74:2 74:5>]
REFERENCE_TYPE_USAGE: b2Vec2 b2DistanceOutput::pointA -> b2Vec2 [b2Distance.h <80:2 80:7>]
REFERENCE_TYPE_USAGE: b2Vec2 b2DistanceOutput::pointB -> b2Vec2 [b2Distance.h <81:2 81:7>]
REFERENCE_TYPE_USAGE: float32 b2DistanceOutput::distance -> float32 [b2Distance.h <82:2 82:8>]
REFERENCE_TYPE_USAGE: int32 b2DistanceOutput::iterations -> int32 [b2Distance.h <83:2 83:6>]
REFERENCE_TYPE_USAGE: void b2Distance(b2DistanceOutput *, b2SimplexCache *, const b2DistanceInput *) -> void [b2Distance.h <89:1 89:4>]
REFERENCE_TYPE_USAGE: void b2Distance(b2DistanceOutput *, b2SimplexCache *, const b2DistanceInput *) -> b2DistanceOutput [b2Distance.h <89:17 89:32>]
REFERENCE_TYPE_USAGE: void b2Distance(b2DistanceOutput *, b2SimplexCache *, const b2DistanceInput *) -> b2SimplexCache [b2Distance.h <90:5 90:18>]
REFERENCE_TYPE_USAGE: void b2Distance(b2DistanceOutput *, b2SimplexCache *, const b2DistanceInput *) -> b2DistanceInput [b2Distance.h <91:11 91:25>]
REFERENCE_USAGE: int32 b2DistanceProxy::GetVertexCount() const -> int32 b2DistanceProxy::m_count [b2Distance.h <98:9 98:15>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetVertex(int32) const -> void [b2Distance.h <103:2 103:9>]
REFERENCE_USAGE: const b2Vec2 & b2DistanceProxy::GetVertex(int32) const -> int32 b2DistanceProxy::m_count [b2Distance.h <103:33 103:39>]
REFERENCE_CALL: const b2Vec2 & b2DistanceProxy::GetVertex(int32) const -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2Distance.h <103:2 103:9>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetVertex(int32) const -> unsigned int [b2Distance.h <103:2 103:9>]
REFERENCE_USAGE: const b2Vec2 & b2DistanceProxy::GetVertex(int32) const -> const b2Vec2 * b2DistanceProxy::m_vertices [b2Distance.h <104:9 104:18>]
REFERENCE_TYPE_USAGE: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> float32 [b2Distance.h <110:2 110:8>]
REFERENCE_TYPE_USAGE: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> float32 [b2Distance.h <113:3 113:9>]
REFERENCE_CALL: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Distance.h <110:22 110:26>]
REFERENCE_CALL: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Distance.h <113:19 113:23>]
REFERENCE_USAGE: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> const b2Vec2 * b2DistanceProxy::m_vertices [b2Distance.h <110:28 110:37>]
REFERENCE_USAGE: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> const b2Vec2 * b2DistanceProxy::m_vertices [b2Distance.h <113:25 113:34>]
REFERENCE_USAGE: int32 b2DistanceProxy::GetSupport(const b2Vec2 &) const -> int32 b2DistanceProxy::m_count [b2Distance.h <111:24 111:30>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> int32 [b2Distance.h <126:2 126:6>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> int32 [b2Distance.h <128:7 128:11>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> float32 [b2Distance.h <127:2 127:8>]
REFERENCE_TYPE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> float32 [b2Distance.h <130:3 130:9>]
REFERENCE_CALL: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Distance.h <127:22 127:26>]
REFERENCE_CALL: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Distance.h <130:19 130:23>]
REFERENCE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> const b2Vec2 * b2DistanceProxy::m_vertices [b2Distance.h <127:28 127:37>]
REFERENCE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> const b2Vec2 * b2DistanceProxy::m_vertices [b2Distance.h <130:25 130:34>]
REFERENCE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> const b2Vec2 * b2DistanceProxy::m_vertices [b2Distance.h <138:9 138:18>]
REFERENCE_USAGE: const b2Vec2 & b2DistanceProxy::GetSupportVertex(const b2Vec2 &) const -> int32 b2DistanceProxy::m_count [b2Distance.h <128:24 128:30>]
REFERENCE_TYPE_USAGE: b2DistanceProxy b2TOIInput::proxyA -> b2DistanceProxy [b2TimeOfImpact.h <28:2 28:16>]
REFERENCE_TYPE_USAGE: b2DistanceProxy b2TOIInput::proxyB -> b2DistanceProxy [b2TimeOfImpact.h <29:2 29:16>]
REFERENCE_TYPE_USAGE: b2Sweep b2TOIInput::sweepA -> b2Sweep [b2TimeOfImpact.h <30:2 30:8>]
REFERENCE_TYPE_USAGE: b2Sweep b2TOIInput::sweepB -> b2Sweep [b2TimeOfImpact.h <31:2 31:8>]
REFERENCE_TYPE_USAGE: float32 b2TOIInput::tMax -> float32 [b2TimeOfImpact.h <32:2 32:8>]
REFERENCE_USAGE: void b2TOIInput::b2TOIInput() -> b2DistanceProxy b2TOIInput::proxyA [b2TimeOfImpact.h <26:8 26:17>]
REFERENCE_CALL: void b2TOIInput::b2TOIInput() -> void b2DistanceProxy::b2DistanceProxy() [b2TimeOfImpact.h <26:8 26:17>]
REFERENCE_USAGE: void b2TOIInput::b2TOIInput() -> b2DistanceProxy b2TOIInput::proxyB [b2TimeOfImpact.h <26:8 26:17>]
REFERENCE_USAGE: void b2TOIInput::b2TOIInput() -> b2Sweep b2TOIInput::sweepA [b2TimeOfImpact.h <26:8 26:17>]
REFERENCE_CALL: void b2TOIInput::b2TOIInput() -> void b2Sweep::b2Sweep() [b2TimeOfImpact.h <26:8 26:17>]
REFERENCE_USAGE: void b2TOIInput::b2TOIInput() -> b2Sweep b2TOIInput::sweepB [b2TimeOfImpact.h <26:8 26:17>]
REFERENCE_TYPE_USAGE: b2TOIOutput::State b2TOIOutput::state -> b2TOIOutput::State [b2TimeOfImpact.h <47:2 47:6>]
REFERENCE_TYPE_USAGE: float32 b2TOIOutput::t -> float32 [b2TimeOfImpact.h <48:2 48:8>]
REFERENCE_TYPE_USAGE: void b2TimeOfImpact(b2TOIOutput *, const b2TOIInput *) -> void [b2TimeOfImpact.h <56:1 56:4>]
REFERENCE_TYPE_USAGE: void b2TimeOfImpact(b2TOIOutput *, const b2TOIInput *) -> b2TOIOutput [b2TimeOfImpact.h <56:21 56:31>]
REFERENCE_TYPE_USAGE: void b2TimeOfImpact(b2TOIOutput *, const b2TOIInput *) -> b2TOIInput [b2TimeOfImpact.h <56:48 56:57>]
REFERENCE_TYPE_USAGE: void b2Color::b2Color(float32, float32, float32, float32) -> float32 [b2Draw.h <28:10 28:16>]
REFERENCE_TYPE_USAGE: void b2Color::b2Color(float32, float32, float32, float32) -> float32 [b2Draw.h <28:23 28:29>]
REFERENCE_TYPE_USAGE: void b2Color::b2Color(float32, float32, float32, float32) -> float32 [b2Draw.h <28:36 28:42>]
REFERENCE_TYPE_USAGE: void b2Color::b2Color(float32, float32, float32, float32) -> float32 [b2Draw.h <28:49 28:55>]
REFERENCE_USAGE: void b2Color::b2Color(float32, float32, float32, float32) -> float32 b2Color::r [b2Draw.h <30:3 30:3>]
REFERENCE_USAGE: void b2Color::b2Color(float32, float32, float32, float32) -> float32 b2Color::g [b2Draw.h <30:12 30:12>]
REFERENCE_USAGE: void b2Color::b2Color(float32, float32, float32, float32) -> float32 b2Color::b [b2Draw.h <30:21 30:21>]
REFERENCE_USAGE: void b2Color::b2Color(float32, float32, float32, float32) -> float32 b2Color::a [b2Draw.h <30:30 30:30>]
REFERENCE_TYPE_USAGE: void b2Color::Set(float32, float32, float32, float32) -> void [b2Draw.h <33:2 33:5>]
REFERENCE_TYPE_USAGE: void b2Color::Set(float32, float32, float32, float32) -> float32 [b2Draw.h <33:11 33:17>]
REFERENCE_TYPE_USAGE: void b2Color::Set(float32, float32, float32, float32) -> float32 [b2Draw.h <33:24 33:30>]
REFERENCE_TYPE_USAGE: void b2Color::Set(float32, float32, float32, float32) -> float32 [b2Draw.h <33:37 33:43>]
REFERENCE_TYPE_USAGE: void b2Color::Set(float32, float32, float32, float32) -> float32 [b2Draw.h <33:50 33:56>]
REFERENCE_USAGE: void b2Color::Set(float32, float32, float32, float32) -> float32 b2Color::r [b2Draw.h <35:3 35:3>]
REFERENCE_USAGE: void b2Color::Set(float32, float32, float32, float32) -> float32 b2Color::g [b2Draw.h <35:12 35:12>]
REFERENCE_USAGE: void b2Color::Set(float32, float32, float32, float32) -> float32 b2Color::b [b2Draw.h <35:21 35:21>]
REFERENCE_USAGE: void b2Color::Set(float32, float32, float32, float32) -> float32 b2Color::a [b2Draw.h <35:30 35:30>]
REFERENCE_TYPE_USAGE: float32 b2Color::r -> float32 [b2Draw.h <38:2 38:8>]
REFERENCE_TYPE_USAGE: float32 b2Color::g -> float32 [b2Draw.h <38:2 38:8>]
REFERENCE_TYPE_USAGE: float32 b2Color::b -> float32 [b2Draw.h <38:2 38:8>]
REFERENCE_TYPE_USAGE: float32 b2Color::a -> float32 [b2Draw.h <38:2 38:8>]
REFERENCE_TYPE_USAGE: void b2Draw::SetFlags(uint32) -> void [b2Draw.h <60:2 60:5>]
REFERENCE_TYPE_USAGE: void b2Draw::SetFlags(uint32) -> uint32 [b2Draw.h <60:16 60:21>]
REFERENCE_TYPE_USAGE: uint32 b2Draw::GetFlags() const -> uint32 [b2Draw.h <63:2 63:7>]
REFERENCE_TYPE_USAGE: void b2Draw::AppendFlags(uint32) -> void [b2Draw.h <66:2 66:5>]
REFERENCE_TYPE_USAGE: void b2Draw::AppendFlags(uint32) -> uint32 [b2Draw.h <66:19 66:24>]
REFERENCE_TYPE_USAGE: void b2Draw::ClearFlags(uint32) -> void [b2Draw.h <69:2 69:5>]
REFERENCE_TYPE_USAGE: void b2Draw::ClearFlags(uint32) -> uint32 [b2Draw.h <69:18 69:23>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawPolygon(const b2Vec2 *, int32, const b2Color &) -> void [b2Draw.h <72:10 72:13>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawPolygon(const b2Vec2 *, int32, const b2Color &) -> b2Vec2 [b2Draw.h <72:33 72:38>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawPolygon(const b2Vec2 *, int32, const b2Color &) -> int32 [b2Draw.h <72:51 72:55>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawPolygon(const b2Vec2 *, int32, const b2Color &) -> b2Color [b2Draw.h <72:76 72:82>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSolidPolygon(const b2Vec2 *, int32, const b2Color &) -> void [b2Draw.h <75:10 75:13>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSolidPolygon(const b2Vec2 *, int32, const b2Color &) -> b2Vec2 [b2Draw.h <75:38 75:43>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSolidPolygon(const b2Vec2 *, int32, const b2Color &) -> int32 [b2Draw.h <75:56 75:60>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSolidPolygon(const b2Vec2 *, int32, const b2Color &) -> b2Color [b2Draw.h <75:81 75:87>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawCircle(const b2Vec2 &, float32, const b2Color &) -> void [b2Draw.h <78:10 78:13>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawCircle(const b2Vec2 &, float32, const b2Color &) -> b2Vec2 [b2Draw.h <78:32 78:37>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawCircle(const b2Vec2 &, float32, const b2Color &) -> float32 [b2Draw.h <78:48 78:54>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawCircle(const b2Vec2 &, float32, const b2Color &) -> b2Color [b2Draw.h <78:70 78:76>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSolidCircle(const b2Vec2 &, float32, const b2Vec2 &, const b2Color &) -> void [b2Draw.h <81:10 81:13>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSolidCircle(const b2Vec2 &, float32, const b2Vec2 &, const b2Color &) -> b2Vec2 [b2Draw.h <81:37 81:42>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSolidCircle(const b2Vec2 &, float32, const b2Vec2 &, const b2Color &) -> b2Vec2 [b2Draw.h <81:75 81:80>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSolidCircle(const b2Vec2 &, float32, const b2Vec2 &, const b2Color &) -> float32 [b2Draw.h <81:53 81:59>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSolidCircle(const b2Vec2 &, float32, const b2Vec2 &, const b2Color &) -> b2Color [b2Draw.h <81:95 81:101>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) -> void [b2Draw.h <84:10 84:13>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) -> b2Vec2 [b2Draw.h <84:33 84:38>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) -> b2Vec2 [b2Draw.h <84:51 84:56>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) -> b2Color [b2Draw.h <84:69 84:75>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawTransform(const b2Transform &) -> void [b2Draw.h <88:10 88:13>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawTransform(const b2Transform &) -> b2Transform [b2Draw.h <88:35 88:45>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawPoint(const b2Vec2 &, float32, const b2Color &) -> void [b2Draw.h <91:10 91:13>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawPoint(const b2Vec2 &, float32, const b2Color &) -> b2Vec2 [b2Draw.h <91:31 91:36>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawPoint(const b2Vec2 &, float32, const b2Color &) -> float32 [b2Draw.h <91:42 91:48>]
REFERENCE_TYPE_USAGE: void b2Draw::DrawPoint(const b2Vec2 &, float32, const b2Color &) -> b2Color [b2Draw.h <91:62 91:68>]
REFERENCE_TYPE_USAGE: uint32 b2Draw::m_drawFlags -> uint32 [b2Draw.h <94:2 94:7>]
REFERENCE_TYPE_USAGE: void b2Timer::Reset() -> void [b2Timer.h <34:2 34:5>]
REFERENCE_TYPE_USAGE: float32 b2Timer::GetMilliseconds() const -> float32 [b2Timer.h <37:2 37:8>]
REFERENCE_TYPE_USAGE: float64 b2Timer::m_start -> float64 [b2Timer.h <42:2 42:8>]
REFERENCE_TYPE_USAGE: static float64 b2Timer::s_invFrequency -> float64 [b2Timer.h <43:9 43:15>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2BlockAllocator b2World::m_blockAllocator [b2World.cpp <37:10 37:16>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2BlockAllocator b2World::m_blockAllocator [b2World.cpp <61:34 61:49>]
REFERENCE_CALL: void b2World::b2World(const b2Vec2 &) -> void b2BlockAllocator::b2BlockAllocator() [b2World.cpp <37:10 37:16>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2StackAllocator b2World::m_stackAllocator [b2World.cpp <37:10 37:16>]
REFERENCE_CALL: void b2World::b2World(const b2Vec2 &) -> void b2StackAllocator::b2StackAllocator() [b2World.cpp <37:10 37:16>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <37:10 37:16>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <61:2 61:17>]
REFERENCE_CALL: void b2World::b2World(const b2Vec2 &) -> void b2ContactManager::b2ContactManager() [b2World.cpp <37:10 37:16>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2Vec2 b2World::m_gravity [b2World.cpp <37:10 37:16>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2Vec2 b2World::m_gravity [b2World.cpp <55:2 55:10>]
REFERENCE_CALL: void b2World::b2World(const b2Vec2 &) -> void b2Vec2::b2Vec2() [b2World.cpp <37:10 37:16>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2Profile b2World::m_profile [b2World.cpp <37:10 37:16>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2Profile b2World::m_profile [b2World.cpp <63:10 63:18>]
REFERENCE_CALL: void b2World::b2World(const b2Vec2 &) -> void b2Profile::b2Profile() [b2World.cpp <37:10 37:16>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2DestructionListener * b2World::m_destructionListener [b2World.cpp <39:2 39:22>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2Draw * b2World::g_debugDraw [b2World.cpp <40:2 40:12>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2Body * b2World::m_bodyList [b2World.cpp <42:2 42:11>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2Joint * b2World::m_jointList [b2World.cpp <43:2 43:12>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> int32 b2World::m_bodyCount [b2World.cpp <45:2 45:12>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> int32 b2World::m_jointCount [b2World.cpp <46:2 46:13>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> bool b2World::m_warmStarting [b2World.cpp <48:2 48:15>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> bool b2World::m_continuousPhysics [b2World.cpp <49:2 49:20>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> bool b2World::m_subStepping [b2World.cpp <50:2 50:14>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> bool b2World::m_stepComplete [b2World.cpp <52:2 52:15>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> bool b2World::m_allowSleep [b2World.cpp <54:2 54:13>]
REFERENCE_CALL: void b2World::b2World(const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2World.cpp <55:12 55:12>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> int32 b2World::m_flags [b2World.cpp <57:2 57:8>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.cpp <57:12 57:24>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> float32 b2World::m_inv_dt0 [b2World.cpp <59:2 59:10>]
REFERENCE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2BlockAllocator * b2ContactManager::m_allocator [b2World.cpp <61:19 61:29>]
REFERENCE_CALL: void b2World::b2World(const b2Vec2 &) -> void * memset(void *, int, size_t) [b2World.cpp <63:2 63:7>]
REFERENCE_TYPE_USAGE: void b2World::b2World(const b2Vec2 &) -> b2Profile [b2World.cpp <63:31 63:39>]
REFERENCE_TYPE_USAGE: void b2World::~b2World() -> b2Body [b2World.cpp <69:2 69:7>]
REFERENCE_TYPE_USAGE: void b2World::~b2World() -> b2Body [b2World.cpp <72:3 72:8>]
REFERENCE_USAGE: void b2World::~b2World() -> b2Body * b2World::m_bodyList [b2World.cpp <69:14 69:23>]
REFERENCE_USAGE: void b2World::~b2World() -> b2Body * b2Body::m_next [b2World.cpp <72:22 72:27>]
REFERENCE_TYPE_USAGE: void b2World::~b2World() -> b2Fixture [b2World.cpp <74:3 74:11>]
REFERENCE_TYPE_USAGE: void b2World::~b2World() -> b2Fixture [b2World.cpp <77:4 77:12>]
REFERENCE_USAGE: void b2World::~b2World() -> b2Fixture * b2Body::m_fixtureList [b2World.cpp <74:21 74:33>]
REFERENCE_USAGE: void b2World::~b2World() -> b2Fixture * b2Fixture::m_next [b2World.cpp <77:26 77:31>]
REFERENCE_USAGE: void b2World::~b2World() -> int32 b2Fixture::m_proxyCount [b2World.cpp <78:7 78:18>]
REFERENCE_CALL: void b2World::~b2World() -> void b2Fixture::Destroy(b2BlockAllocator *) [b2World.cpp <79:7 79:13>]
REFERENCE_USAGE: void b2World::~b2World() -> b2BlockAllocator b2World::m_blockAllocator [b2World.cpp <79:16 79:31>]
REFERENCE_USAGE: void b2World::SetDestructionListener(b2DestructionListener *) -> b2DestructionListener * b2World::m_destructionListener [b2World.cpp <89:2 89:22>]
REFERENCE_USAGE: void b2World::SetContactFilter(b2ContactFilter *) -> b2ContactFilter * b2ContactManager::m_contactFilter [b2World.cpp <94:19 94:33>]
REFERENCE_USAGE: void b2World::SetContactFilter(b2ContactFilter *) -> b2ContactManager b2World::m_contactManager [b2World.cpp <94:2 94:17>]
REFERENCE_USAGE: void b2World::SetContactListener(b2ContactListener *) -> b2ContactListener * b2ContactManager::m_contactListener [b2World.cpp <99:19 99:35>]
REFERENCE_USAGE: void b2World::SetContactListener(b2ContactListener *) -> b2ContactManager b2World::m_contactManager [b2World.cpp <99:2 99:17>]
REFERENCE_USAGE: void b2World::SetDebugDraw(b2Draw *) -> b2Draw * b2World::g_debugDraw [b2World.cpp <104:2 104:12>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> void [b2World.cpp <109:2 109:9>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> void [b2World.cpp <115:2 115:5>]
REFERENCE_CALL: b2Body * b2World::CreateBody(const b2BodyDef *) -> bool b2World::IsLocked() const [b2World.cpp <109:11 109:18>]
REFERENCE_CALL: b2Body * b2World::CreateBody(const b2BodyDef *) -> bool b2World::IsLocked() const [b2World.cpp <110:6 110:13>]
REFERENCE_CALL: b2Body * b2World::CreateBody(const b2BodyDef *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <109:2 109:9>]
REFERENCE_TYPE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> unsigned int [b2World.cpp <109:2 109:9>]
REFERENCE_CALL: b2Body * b2World::CreateBody(const b2BodyDef *) -> void * b2BlockAllocator::Allocate(int32) [b2World.cpp <115:31 115:38>]
REFERENCE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2BlockAllocator b2World::m_blockAllocator [b2World.cpp <115:14 115:29>]
REFERENCE_CALL: b2Body * b2World::CreateBody(const b2BodyDef *) -> void b2Body::b2Body(const b2BodyDef *, b2World *) [b2World.cpp <116:24 116:29>]
REFERENCE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body * b2Body::m_prev [b2World.cpp <119:5 119:10>]
REFERENCE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body * b2Body::m_prev [b2World.cpp <123:15 123:20>]
REFERENCE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body * b2Body::m_next [b2World.cpp <120:5 120:10>]
REFERENCE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body * b2World::m_bodyList [b2World.cpp <120:14 120:23>]
REFERENCE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body * b2World::m_bodyList [b2World.cpp <121:6 121:15>]
REFERENCE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body * b2World::m_bodyList [b2World.cpp <123:3 123:12>]
REFERENCE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> b2Body * b2World::m_bodyList [b2World.cpp <125:2 125:11>]
REFERENCE_USAGE: b2Body * b2World::CreateBody(const b2BodyDef *) -> int32 b2World::m_bodyCount [b2World.cpp <126:4 126:14>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> int32 b2World::m_bodyCount [b2World.cpp <133:11 133:21>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> int32 b2World::m_bodyCount [b2World.cpp <207:4 207:14>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <133:2 133:9>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <134:2 134:9>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> unsigned int [b2World.cpp <133:2 133:9>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> unsigned int [b2World.cpp <134:2 134:9>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> bool b2World::IsLocked() const [b2World.cpp <134:11 134:18>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> bool b2World::IsLocked() const [b2World.cpp <135:6 135:13>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> b2JointEdge [b2World.cpp <141:2 141:12>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> b2JointEdge [b2World.cpp <144:3 144:13>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <141:23 141:33>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <154:6 154:16>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <156:5 156:15>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <145:12 145:15>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2DestructionListener * b2World::m_destructionListener [b2World.cpp <147:7 147:27>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2DestructionListener * b2World::m_destructionListener [b2World.cpp <149:4 149:24>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2DestructionListener * b2World::m_destructionListener [b2World.cpp <175:7 175:27>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2DestructionListener * b2World::m_destructionListener [b2World.cpp <177:4 177:24>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void b2DestructionListener::SayGoodbye(b2Joint *) [b2World.cpp <149:27 149:36>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Joint * b2JointEdge::joint [b2World.cpp <149:43 149:47>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Joint * b2JointEdge::joint [b2World.cpp <152:21 152:25>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void b2World::DestroyJoint(b2Joint *) [b2World.cpp <152:3 152:14>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> b2ContactEdge [b2World.cpp <159:2 159:14>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> b2ContactEdge [b2World.cpp <162:3 162:15>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2ContactEdge * b2Body::m_contactList [b2World.cpp <159:25 159:37>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2ContactEdge * b2Body::m_contactList [b2World.cpp <166:5 166:17>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2ContactEdge * b2ContactEdge::next [b2World.cpp <163:12 163:15>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void b2ContactManager::Destroy(b2Contact *) [b2World.cpp <164:20 164:26>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2ContactManager b2World::m_contactManager [b2World.cpp <164:3 164:18>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2ContactManager b2World::m_contactManager [b2World.cpp <180:23 180:38>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Contact * b2ContactEdge::contact [b2World.cpp <164:33 164:39>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Fixture [b2World.cpp <169:2 169:10>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Fixture [b2World.cpp <172:3 172:11>]
REFERENCE_TYPE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Fixture [b2World.cpp <183:36 183:44>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Fixture * b2Body::m_fixtureList [b2World.cpp <169:20 169:32>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Fixture * b2Body::m_fixtureList [b2World.cpp <185:6 185:18>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Fixture * b2Body::m_fixtureList [b2World.cpp <188:5 188:17>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Fixture * b2Fixture::m_next [b2World.cpp <173:10 173:15>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void b2DestructionListener::SayGoodbye(b2Fixture *) [b2World.cpp <177:27 177:36>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void b2Fixture::DestroyProxies(b2BroadPhase *) [b2World.cpp <180:7 180:20>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2BroadPhase b2ContactManager::m_broadPhase [b2World.cpp <180:40 180:51>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void b2Fixture::Destroy(b2BlockAllocator *) [b2World.cpp <181:7 181:13>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2BlockAllocator b2World::m_blockAllocator [b2World.cpp <181:16 181:31>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2BlockAllocator b2World::m_blockAllocator [b2World.cpp <183:3 183:18>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2BlockAllocator b2World::m_blockAllocator [b2World.cpp <209:2 209:17>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void b2Fixture::~b2Fixture() [b2World.cpp <182:7 182:7>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void b2BlockAllocator::Free(void *, int32) [b2World.cpp <183:20 183:23>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void b2BlockAllocator::Free(void *, int32) [b2World.cpp <209:19 209:22>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> int32 b2Body::m_fixtureCount [b2World.cpp <186:6 186:19>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> int32 b2Body::m_fixtureCount [b2World.cpp <189:5 189:18>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body * b2Body::m_prev [b2World.cpp <192:9 192:14>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body * b2Body::m_prev [b2World.cpp <194:6 194:11>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body * b2Body::m_prev [b2World.cpp <199:14 199:19>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body * b2Body::m_prev [b2World.cpp <199:26 199:31>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body * b2Body::m_next [b2World.cpp <194:14 194:19>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body * b2Body::m_next [b2World.cpp <194:26 194:31>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body * b2Body::m_next [b2World.cpp <197:9 197:14>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body * b2Body::m_next [b2World.cpp <199:6 199:11>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body * b2Body::m_next [b2World.cpp <204:19 204:24>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body * b2World::m_bodyList [b2World.cpp <202:11 202:20>]
REFERENCE_USAGE: void b2World::DestroyBody(b2Body *) -> b2Body * b2World::m_bodyList [b2World.cpp <204:3 204:12>]
REFERENCE_CALL: void b2World::DestroyBody(b2Body *) -> void b2Body::~b2Body() [b2World.cpp <208:5 208:5>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> void [b2World.cpp <214:2 214:9>]
REFERENCE_CALL: b2Joint * b2World::CreateJoint(const b2JointDef *) -> bool b2World::IsLocked() const [b2World.cpp <214:11 214:18>]
REFERENCE_CALL: b2Joint * b2World::CreateJoint(const b2JointDef *) -> bool b2World::IsLocked() const [b2World.cpp <215:6 215:13>]
REFERENCE_CALL: b2Joint * b2World::CreateJoint(const b2JointDef *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <214:2 214:9>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> unsigned int [b2World.cpp <214:2 214:9>]
REFERENCE_CALL: b2Joint * b2World::CreateJoint(const b2JointDef *) -> static b2Joint * b2Joint::Create(const b2JointDef *, b2BlockAllocator *) [b2World.cpp <220:24 220:29>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2BlockAllocator b2World::m_blockAllocator [b2World.cpp <220:37 220:52>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint * b2Joint::m_prev [b2World.cpp <223:5 223:10>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint * b2Joint::m_prev [b2World.cpp <227:16 227:21>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint * b2Joint::m_next [b2World.cpp <224:5 224:10>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint * b2World::m_jointList [b2World.cpp <224:14 224:24>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint * b2World::m_jointList [b2World.cpp <225:6 225:16>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint * b2World::m_jointList [b2World.cpp <227:3 227:13>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint * b2World::m_jointList [b2World.cpp <229:2 229:12>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> int32 b2World::m_jointCount [b2World.cpp <230:4 230:15>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint * b2JointEdge::joint [b2World.cpp <233:13 233:17>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Joint * b2JointEdge::joint [b2World.cpp <240:13 240:17>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <233:5 233:11>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <234:5 234:11>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <235:5 235:11>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <236:5 236:11>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <237:67 237:73>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <238:32 238:38>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2JointEdge::other [b2World.cpp <234:13 234:17>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2JointEdge::other [b2World.cpp <241:13 241:17>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2Joint::m_bodyB [b2World.cpp <234:24 234:30>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2Joint::m_bodyB [b2World.cpp <243:23 243:29>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2Joint::m_bodyB [b2World.cpp <244:9 244:15>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2Joint::m_bodyB [b2World.cpp <244:34 244:40>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2Joint::m_bodyB [b2World.cpp <245:5 245:11>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <235:13 235:16>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <237:56 237:59>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <242:13 242:16>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <244:56 244:59>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <236:13 236:16>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <243:13 243:16>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <236:32 236:42>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <237:18 237:28>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <237:43 237:53>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <238:14 238:24>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <243:32 243:42>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <244:18 244:28>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <244:43 244:53>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <245:14 245:24>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2Joint::m_bodyA [b2World.cpp <236:23 236:29>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2Joint::m_bodyA [b2World.cpp <237:9 237:15>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2Joint::m_bodyA [b2World.cpp <237:34 237:40>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2Joint::m_bodyA [b2World.cpp <238:5 238:11>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2Joint::m_bodyA [b2World.cpp <241:24 241:30>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <240:5 240:11>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <241:5 241:11>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <242:5 242:11>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <243:5 243:11>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <244:67 244:73>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <245:32 245:38>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body [b2World.cpp <247:2 247:7>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body [b2World.cpp <248:2 248:7>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2JointDef::bodyA [b2World.cpp <247:23 247:27>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2JointDef::bodyB [b2World.cpp <248:23 248:27>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> bool b2JointDef::collideConnected [b2World.cpp <251:11 251:26>]
REFERENCE_TYPE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2ContactEdge [b2World.cpp <253:3 253:15>]
REFERENCE_CALL: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2ContactEdge * b2Body::GetContactList() [b2World.cpp <253:32 253:45>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Body * b2ContactEdge::other [b2World.cpp <256:14 256:18>]
REFERENCE_CALL: b2Joint * b2World::CreateJoint(const b2JointDef *) -> void b2Contact::FlagForFiltering() [b2World.cpp <260:20 260:35>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2Contact * b2ContactEdge::contact [b2World.cpp <260:11 260:17>]
REFERENCE_USAGE: b2Joint * b2World::CreateJoint(const b2JointDef *) -> b2ContactEdge * b2ContactEdge::next [b2World.cpp <263:17 263:20>]
REFERENCE_CALL: void b2World::DestroyJoint(b2Joint *) -> bool b2World::IsLocked() const [b2World.cpp <274:11 274:18>]
REFERENCE_CALL: void b2World::DestroyJoint(b2Joint *) -> bool b2World::IsLocked() const [b2World.cpp <275:6 275:13>]
REFERENCE_CALL: void b2World::DestroyJoint(b2Joint *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <274:2 274:9>]
REFERENCE_CALL: void b2World::DestroyJoint(b2Joint *) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <346:2 346:9>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> unsigned int [b2World.cpp <274:2 274:9>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> unsigned int [b2World.cpp <346:2 346:9>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> bool [b2World.cpp <280:2 280:5>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> bool b2Joint::m_collideConnected [b2World.cpp <280:29 280:46>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint * b2Joint::m_prev [b2World.cpp <283:9 283:14>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint * b2Joint::m_prev [b2World.cpp <285:6 285:11>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint * b2Joint::m_prev [b2World.cpp <290:14 290:19>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint * b2Joint::m_prev [b2World.cpp <290:26 290:31>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint * b2Joint::m_next [b2World.cpp <285:14 285:19>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint * b2Joint::m_next [b2World.cpp <285:26 285:31>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint * b2Joint::m_next [b2World.cpp <288:9 288:14>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint * b2Joint::m_next [b2World.cpp <290:6 290:11>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint * b2Joint::m_next [b2World.cpp <295:20 295:25>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint * b2World::m_jointList [b2World.cpp <293:11 293:21>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Joint * b2World::m_jointList [b2World.cpp <295:3 295:13>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Body [b2World.cpp <299:2 299:7>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Body [b2World.cpp <300:2 300:7>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Body * b2Joint::m_bodyA [b2World.cpp <299:21 299:27>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Body * b2Joint::m_bodyB [b2World.cpp <300:21 300:27>]
REFERENCE_CALL: void b2World::DestroyJoint(b2Joint *) -> void b2Body::SetAwake(bool) [b2World.cpp <303:9 303:16>]
REFERENCE_CALL: void b2World::DestroyJoint(b2Joint *) -> void b2Body::SetAwake(bool) [b2World.cpp <304:9 304:16>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <307:17 307:20>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <309:14 309:17>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <314:20 314:23>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <314:38 314:41>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <322:13 322:16>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <326:17 326:20>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <328:14 328:17>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <333:20 333:23>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <333:38 333:41>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::prev [b2World.cpp <341:13 341:16>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <307:9 307:15>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <309:6 309:12>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <309:30 309:36>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <312:9 312:15>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <314:6 314:12>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <314:30 314:36>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <317:10 317:16>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <319:27 319:33>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <322:5 322:11>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeA [b2World.cpp <323:5 323:11>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <309:20 309:23>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <309:38 309:41>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <312:17 312:20>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <314:14 314:17>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <319:35 319:38>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <323:13 323:16>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <328:20 328:23>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <328:38 328:41>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <331:17 331:20>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <333:14 333:17>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <338:35 338:38>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2JointEdge::next [b2World.cpp <342:13 342:16>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <317:28 317:38>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <319:10 319:20>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <336:28 336:38>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <338:10 338:20>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <326:9 326:15>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <328:6 328:12>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <328:30 328:36>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <331:9 331:15>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <333:6 333:12>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <333:30 333:36>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <336:10 336:16>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <338:27 338:33>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <341:5 341:11>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2JointEdge b2Joint::m_edgeB [b2World.cpp <342:5 342:11>]
REFERENCE_CALL: void b2World::DestroyJoint(b2Joint *) -> static void b2Joint::Destroy(b2Joint *, b2BlockAllocator *) [b2World.cpp <344:11 344:17>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2BlockAllocator b2World::m_blockAllocator [b2World.cpp <344:23 344:38>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> int32 b2World::m_jointCount [b2World.cpp <346:11 346:22>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> int32 b2World::m_jointCount [b2World.cpp <347:4 347:15>]
REFERENCE_TYPE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2ContactEdge [b2World.cpp <352:3 352:15>]
REFERENCE_CALL: void b2World::DestroyJoint(b2Joint *) -> b2ContactEdge * b2Body::GetContactList() [b2World.cpp <352:32 352:45>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Body * b2ContactEdge::other [b2World.cpp <355:14 355:18>]
REFERENCE_CALL: void b2World::DestroyJoint(b2Joint *) -> void b2Contact::FlagForFiltering() [b2World.cpp <359:20 359:35>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2Contact * b2ContactEdge::contact [b2World.cpp <359:11 359:17>]
REFERENCE_USAGE: void b2World::DestroyJoint(b2Joint *) -> b2ContactEdge * b2ContactEdge::next [b2World.cpp <362:17 362:20>]
REFERENCE_USAGE: void b2World::SetAllowSleeping(bool) -> bool b2World::m_allowSleep [b2World.cpp <370:14 370:25>]
REFERENCE_USAGE: void b2World::SetAllowSleeping(bool) -> bool b2World::m_allowSleep [b2World.cpp <375:2 375:13>]
REFERENCE_USAGE: void b2World::SetAllowSleeping(bool) -> bool b2World::m_allowSleep [b2World.cpp <376:6 376:17>]
REFERENCE_TYPE_USAGE: void b2World::SetAllowSleeping(bool) -> b2Body [b2World.cpp <378:8 378:13>]
REFERENCE_USAGE: void b2World::SetAllowSleeping(bool) -> b2Body * b2World::m_bodyList [b2World.cpp <378:20 378:29>]
REFERENCE_USAGE: void b2World::SetAllowSleeping(bool) -> b2Body * b2Body::m_next [b2World.cpp <378:42 378:47>]
REFERENCE_CALL: void b2World::SetAllowSleeping(bool) -> void b2Body::SetAwake(bool) [b2World.cpp <380:7 380:14>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> float32 b2Profile::solveInit [b2World.cpp <388:12 388:20>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> float32 b2Profile::solveInit [b2World.cpp <532:13 532:21>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> float32 b2Profile::solveInit [b2World.cpp <532:34 532:42>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Profile b2World::m_profile [b2World.cpp <388:2 388:10>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Profile b2World::m_profile [b2World.cpp <389:2 389:10>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Profile b2World::m_profile [b2World.cpp <390:2 390:10>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Profile b2World::m_profile [b2World.cpp <532:3 532:11>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Profile b2World::m_profile [b2World.cpp <533:3 533:11>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Profile b2World::m_profile [b2World.cpp <534:3 534:11>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Profile b2World::m_profile [b2World.cpp <572:3 572:11>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> float32 b2Profile::solveVelocity [b2World.cpp <389:12 389:24>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> float32 b2Profile::solveVelocity [b2World.cpp <533:13 533:25>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> float32 b2Profile::solveVelocity [b2World.cpp <533:38 533:50>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> float32 b2Profile::solvePosition [b2World.cpp <390:12 390:24>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> float32 b2Profile::solvePosition [b2World.cpp <534:13 534:25>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> float32 b2Profile::solvePosition [b2World.cpp <534:38 534:50>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Island [b2World.cpp <393:2 393:9>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) [b2World.cpp <393:11 393:16>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> int32 b2World::m_bodyCount [b2World.cpp <393:18 393:28>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> int32 b2World::m_bodyCount [b2World.cpp <414:20 414:30>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> int32 b2ContactManager::m_contactCount [b2World.cpp <394:23 394:36>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <394:6 394:21>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <397:6 397:21>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <404:22 404:37>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <571:3 571:18>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> int32 b2World::m_jointCount [b2World.cpp <395:6 395:17>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2StackAllocator b2World::m_stackAllocator [b2World.cpp <396:7 396:22>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2StackAllocator b2World::m_stackAllocator [b2World.cpp <415:29 415:44>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2StackAllocator b2World::m_stackAllocator [b2World.cpp <548:2 548:17>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2ContactListener * b2ContactManager::m_contactListener [b2World.cpp <397:23 397:39>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body [b2World.cpp <400:7 400:12>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body [b2World.cpp <415:2 415:7>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body [b2World.cpp <415:20 415:25>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body [b2World.cpp <415:74 415:79>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body [b2World.cpp <416:7 416:12>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body [b2World.cpp <444:4 444:9>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body [b2World.cpp <487:5 487:10>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body [b2World.cpp <508:5 508:10>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body [b2World.cpp <540:4 540:9>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body [b2World.cpp <553:8 553:13>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body * b2World::m_bodyList [b2World.cpp <400:19 400:28>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body * b2World::m_bodyList [b2World.cpp <416:22 416:31>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body * b2World::m_bodyList [b2World.cpp <553:20 553:29>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body * b2Body::m_next [b2World.cpp <400:41 400:46>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body * b2Body::m_next [b2World.cpp <416:53 416:58>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <402:6 402:12>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <418:13 418:19>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <438:9 438:15>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <449:7 449:13>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <490:16 490:22>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <497:12 497:18>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <519:16 519:22>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <526:12 526:18>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <543:8 543:14>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <556:12 556:18>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <402:26 402:37>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <418:31 418:42>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <438:28 438:39>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <490:34 490:45>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <497:31 497:42>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <519:34 519:45>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <526:31 526:42>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <543:28 543:39>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <556:30 556:41>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Contact [b2World.cpp <404:7 404:15>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Contact [b2World.cpp <461:5 461:13>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Contact * b2ContactManager::m_contactList [b2World.cpp <404:39 404:51>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Contact * b2Contact::m_next [b2World.cpp <404:64 404:69>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint32 b2Contact::m_flags [b2World.cpp <406:6 406:12>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint32 b2Contact::m_flags [b2World.cpp <464:18 464:24>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> uint32 b2Contact::m_flags [b2World.cpp <485:14 485:20>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_islandFlag [b2World.cpp <406:29 406:40>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_islandFlag [b2World.cpp <464:39 464:50>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_islandFlag [b2World.cpp <485:36 485:47>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Joint [b2World.cpp <408:7 408:13>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Joint * b2World::m_jointList [b2World.cpp <408:20 408:30>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Joint * b2Joint::m_next [b2World.cpp <408:43 408:48>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> bool b2Joint::m_islandFlag [b2World.cpp <410:6 410:17>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> bool b2Joint::m_islandFlag [b2World.cpp <503:20 503:31>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> bool b2Joint::m_islandFlag [b2World.cpp <517:16 517:27>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> int32 [b2World.cpp <414:2 414:6>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> int32 [b2World.cpp <436:3 436:7>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> int32 [b2World.cpp <537:8 537:12>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void * b2StackAllocator::Allocate(int32) [b2World.cpp <415:46 415:53>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> bool b2Body::IsAwake() const [b2World.cpp <423:13 423:19>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> bool b2Body::IsActive() const [b2World.cpp <423:41 423:48>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> bool b2Body::IsActive() const [b2World.cpp <445:16 445:23>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> bool b2Body::IsActive() const [b2World.cpp <511:16 511:23>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> b2BodyType b2Body::GetType() const [b2World.cpp <429:13 429:19>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> b2BodyType b2Body::GetType() const [b2World.cpp <453:11 453:17>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> b2BodyType b2Body::GetType() const [b2World.cpp <541:11 541:17>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> b2BodyType b2Body::GetType() const [b2World.cpp <561:11 561:17>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2BodyType::b2_staticBody [b2World.cpp <429:26 429:38>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2BodyType::b2_staticBody [b2World.cpp <453:24 453:36>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2BodyType::b2_staticBody [b2World.cpp <541:24 541:36>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2BodyType::b2_staticBody [b2World.cpp <561:24 561:36>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void b2Island::Clear() [b2World.cpp <435:10 435:14>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <445:4 445:11>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <495:5 495:12>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <524:5 524:12>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> unsigned int [b2World.cpp <445:4 445:11>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> unsigned int [b2World.cpp <495:5 495:12>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> unsigned int [b2World.cpp <524:5 524:12>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void b2Island::Add(b2Body *) [b2World.cpp <446:11 446:13>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_awakeFlag [b2World.cpp <449:26 449:36>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2ContactEdge [b2World.cpp <459:9 459:21>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2ContactEdge * b2Body::m_contactList [b2World.cpp <459:32 459:44>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2ContactEdge * b2ContactEdge::next [b2World.cpp <459:60 459:63>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Contact * b2ContactEdge::contact [b2World.cpp <461:30 461:36>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> bool b2Contact::IsEnabled() const [b2World.cpp <470:18 470:26>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> bool b2Contact::IsTouching() const [b2World.cpp <471:15 471:24>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> bool [b2World.cpp <477:5 477:8>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> bool [b2World.cpp <478:5 478:8>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> bool b2Fixture::m_isSensor [b2World.cpp <477:41 477:50>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> bool b2Fixture::m_isSensor [b2World.cpp <478:41 478:50>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Fixture * b2Contact::m_fixtureA [b2World.cpp <477:29 477:38>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Fixture * b2Contact::m_fixtureB [b2World.cpp <478:29 478:38>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void b2Island::Add(b2Contact *) [b2World.cpp <484:12 484:14>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body * b2ContactEdge::other [b2World.cpp <487:25 487:29>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2JointEdge [b2World.cpp <501:9 501:19>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2JointEdge * b2Body::m_jointList [b2World.cpp <501:30 501:40>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2JointEdge * b2JointEdge::next [b2World.cpp <501:56 501:59>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Joint * b2JointEdge::joint [b2World.cpp <503:13 503:17>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Joint * b2JointEdge::joint [b2World.cpp <516:20 516:24>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Joint * b2JointEdge::joint [b2World.cpp <517:9 517:13>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body * b2JointEdge::other [b2World.cpp <508:25 508:29>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void b2Island::Add(b2Joint *) [b2World.cpp <516:12 516:14>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Profile [b2World.cpp <530:3 530:11>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void b2Profile::b2Profile() [b2World.cpp <530:13 530:19>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) [b2World.cpp <531:10 531:14>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Vec2 b2World::m_gravity [b2World.cpp <531:32 531:40>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> bool b2World::m_allowSleep [b2World.cpp <531:43 531:54>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> int32 b2Island::m_bodyCount [b2World.cpp <537:32 537:42>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Body * * b2Island::m_bodies [b2World.cpp <540:23 540:30>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void b2StackAllocator::Free(void *) [b2World.cpp <548:19 548:22>]
REFERENCE_TYPE_USAGE: void b2World::Solve(const b2TimeStep &) -> b2Timer [b2World.cpp <551:3 551:9>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void b2Timer::b2Timer() [b2World.cpp <551:11 551:15>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> b2Body * b2Body::GetNext() [b2World.cpp <553:42 553:48>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void b2Body::SynchronizeFixtures() [b2World.cpp <567:7 567:25>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> void b2ContactManager::FindNewContacts() [b2World.cpp <571:20 571:34>]
REFERENCE_USAGE: void b2World::Solve(const b2TimeStep &) -> float32 b2Profile::broadphase [b2World.cpp <572:13 572:22>]
REFERENCE_CALL: void b2World::Solve(const b2TimeStep &) -> float32 b2Timer::GetMilliseconds() const [b2World.cpp <572:32 572:46>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Island [b2World.cpp <579:2 579:9>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) [b2World.cpp <579:11 579:16>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2StackAllocator b2World::m_stackAllocator [b2World.cpp <579:64 579:79>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactListener * b2ContactManager::m_contactListener [b2World.cpp <579:99 579:115>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactListener * b2ContactManager::m_contactListener [b2World.cpp <735:39 735:55>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactListener * b2ContactManager::m_contactListener [b2World.cpp <815:39 815:55>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <579:82 579:97>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <589:23 589:38>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <605:23 605:38>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <735:22 735:37>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <815:22 815:37>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <887:3 887:18>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool b2World::m_stepComplete [b2World.cpp <581:6 581:19>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool b2World::m_stepComplete [b2World.cpp <718:4 718:17>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool b2World::m_stepComplete [b2World.cpp <891:4 891:17>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body [b2World.cpp <583:8 583:13>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body [b2World.cpp <636:5 636:10>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body [b2World.cpp <637:5 637:10>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body [b2World.cpp <725:3 725:8>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body [b2World.cpp <726:3 726:8>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body [b2World.cpp <765:3 765:8>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body [b2World.cpp <768:4 768:9>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body [b2World.cpp <792:6 792:11>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body [b2World.cpp <868:4 868:9>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body * b2World::m_bodyList [b2World.cpp <583:20 583:29>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body * b2Body::m_next [b2World.cpp <583:42 583:47>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <585:7 585:13>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <760:7 760:13>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <761:7 761:13>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <809:18 809:24>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <838:17 838:23>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <844:13 844:19>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint16 b2Body::m_flags [b2World.cpp <869:10 869:16>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <585:27 585:38>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <760:26 760:37>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <761:26 761:37>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <809:36 809:47>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <838:35 838:46>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <844:32 844:43>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_islandFlag [b2World.cpp <869:30 869:41>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2Sweep::alpha0 [b2World.cpp <586:15 586:20>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2Sweep::alpha0 [b2World.cpp <663:34 663:39>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2Sweep::alpha0 [b2World.cpp <665:21 665:26>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2Sweep::alpha0 [b2World.cpp <665:42 665:47>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2Sweep::alpha0 [b2World.cpp <667:27 667:32>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2Sweep::alpha0 [b2World.cpp <670:26 670:31>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2Sweep::alpha0 [b2World.cpp <670:47 670:52>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2Sweep::alpha0 [b2World.cpp <672:27 672:32>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <586:7 586:13>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <663:26 663:32>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <665:13 665:19>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <665:34 665:40>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <667:19 667:25>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <668:10 668:16>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <670:18 670:24>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <670:39 670:45>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <672:19 672:25>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <673:10 673:16>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <685:24 685:30>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <686:24 686:30>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <728:25 728:31>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <729:25 729:31>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <744:8 744:14>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <745:8 745:14>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <808:30 808:36>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <820:14 820:20>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2Body::m_sweep [b2World.cpp <828:14 828:20>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact [b2World.cpp <589:8 589:16>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact [b2World.cpp <602:3 602:11>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact [b2World.cpp <605:8 605:16>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact [b2World.cpp <783:6 783:14>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact * b2ContactManager::m_contactList [b2World.cpp <589:40 589:52>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact * b2ContactManager::m_contactList [b2World.cpp <605:40 605:52>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact * b2Contact::m_next [b2World.cpp <589:65 589:70>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact * b2Contact::m_next [b2World.cpp <605:65 605:70>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint32 b2Contact::m_flags [b2World.cpp <592:7 592:13>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint32 b2Contact::m_flags [b2World.cpp <620:11 620:17>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint32 b2Contact::m_flags [b2World.cpp <704:8 704:14>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint32 b2Contact::m_flags [b2World.cpp <736:15 736:21>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint32 b2Contact::m_flags [b2World.cpp <762:15 762:21>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint32 b2Contact::m_flags [b2World.cpp <786:19 786:25>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint32 b2Contact::m_flags [b2World.cpp <834:15 834:21>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> uint32 b2Contact::m_flags [b2World.cpp <881:18 881:24>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_toiFlag [b2World.cpp <592:31 592:39>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_toiFlag [b2World.cpp <620:32 620:40>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_toiFlag [b2World.cpp <704:30 704:38>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_toiFlag [b2World.cpp <736:38 736:46>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_toiFlag [b2World.cpp <881:42 881:50>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_islandFlag [b2World.cpp <592:54 592:65>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_islandFlag [b2World.cpp <762:37 762:48>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_islandFlag [b2World.cpp <786:40 786:51>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_islandFlag [b2World.cpp <834:37 834:48>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact::anonymous enum (b2Contact.h<155:2>)::e_islandFlag [b2World.cpp <881:65 881:76>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Contact::m_toiCount [b2World.cpp <593:7 593:16>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Contact::m_toiCount [b2World.cpp <614:11 614:20>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Contact::m_toiCount [b2World.cpp <737:17 737:26>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2Contact::m_toi [b2World.cpp <594:7 594:11>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2Contact::m_toi [b2World.cpp <623:16 623:20>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2Contact::m_toi [b2World.cpp <703:8 703:12>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 [b2World.cpp <603:3 603:9>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 [b2World.cpp <619:4 619:10>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 [b2World.cpp <663:5 663:11>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 [b2World.cpp <693:5 693:11>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Contact::IsEnabled() const [b2World.cpp <608:11 608:19>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Contact::IsEnabled() const [b2World.cpp <740:19 740:27>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Contact::IsEnabled() const [b2World.cpp <818:19 818:27>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Fixture [b2World.cpp <627:5 627:13>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Fixture [b2World.cpp <628:5 628:13>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Fixture [b2World.cpp <723:3 723:11>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Fixture [b2World.cpp <724:3 724:11>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Fixture * b2Contact::GetFixtureA() [b2World.cpp <627:24 627:34>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Fixture * b2Contact::GetFixtureA() [b2World.cpp <723:31 723:41>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Fixture * b2Contact::GetFixtureB() [b2World.cpp <628:24 628:34>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Fixture * b2Contact::GetFixtureB() [b2World.cpp <724:31 724:41>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Fixture::IsSensor() const [b2World.cpp <631:13 631:20>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Fixture::IsSensor() const [b2World.cpp <631:31 631:38>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Body * b2Fixture::GetBody() [b2World.cpp <636:22 636:28>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Body * b2Fixture::GetBody() [b2World.cpp <637:22 637:28>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Body * b2Fixture::GetBody() [b2World.cpp <725:20 725:26>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Body * b2Fixture::GetBody() [b2World.cpp <726:20 726:26>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType [b2World.cpp <639:5 639:14>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType [b2World.cpp <640:5 640:14>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType b2Body::m_type [b2World.cpp <639:28 639:33>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType b2Body::m_type [b2World.cpp <640:28 640:33>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType b2Body::m_type [b2World.cpp <769:14 769:19>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType b2Body::m_type [b2World.cpp <793:17 793:22>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType b2Body::m_type [b2World.cpp <846:17 846:22>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType b2Body::m_type [b2World.cpp <871:14 871:19>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType::b2_dynamicBody [b2World.cpp <641:23 641:36>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType::b2_dynamicBody [b2World.cpp <641:50 641:63>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType::b2_dynamicBody [b2World.cpp <652:48 652:61>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType::b2_dynamicBody [b2World.cpp <653:48 653:61>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType::b2_dynamicBody [b2World.cpp <769:24 769:37>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType::b2_dynamicBody [b2World.cpp <793:27 793:40>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType::b2_dynamicBody [b2World.cpp <871:24 871:37>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <641:5 641:12>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <676:5 676:12>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> unsigned int [b2World.cpp <641:5 641:12>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> unsigned int [b2World.cpp <676:5 676:12>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool [b2World.cpp <643:5 643:8>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool [b2World.cpp <644:5 644:8>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool [b2World.cpp <652:5 652:8>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool [b2World.cpp <653:5 653:8>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool [b2World.cpp <800:6 800:9>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool [b2World.cpp <801:6 801:9>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Body::IsAwake() const [b2World.cpp <643:24 643:30>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Body::IsAwake() const [b2World.cpp <644:24 644:30>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType::b2_staticBody [b2World.cpp <643:46 643:58>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType::b2_staticBody [b2World.cpp <644:46 644:58>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2BodyType::b2_staticBody [b2World.cpp <846:27 846:39>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Body::IsBullet() const [b2World.cpp <652:25 652:32>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Body::IsBullet() const [b2World.cpp <653:25 653:32>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Body::IsBullet() const [b2World.cpp <794:13 794:20>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Body::IsBullet() const [b2World.cpp <794:43 794:50>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Sweep::Advance(float32) [b2World.cpp <668:18 668:24>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Sweep::Advance(float32) [b2World.cpp <673:18 673:24>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 [b2World.cpp <678:5 678:9>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 [b2World.cpp <679:5 679:9>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 [b2World.cpp <766:8 766:12>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 [b2World.cpp <866:8 866:12>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Contact::GetChildIndexA() const [b2World.cpp <678:23 678:36>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Contact::GetChildIndexB() const [b2World.cpp <679:23 679:36>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2TOIInput [b2World.cpp <682:5 682:14>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2TOIInput::b2TOIInput() [b2World.cpp <682:16 682:20>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2DistanceProxy::Set(const b2Shape *, int32) [b2World.cpp <683:18 683:20>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2DistanceProxy::Set(const b2Shape *, int32) [b2World.cpp <684:18 684:20>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2DistanceProxy b2TOIInput::proxyA [b2World.cpp <683:11 683:16>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Shape * b2Fixture::GetShape() [b2World.cpp <683:26 683:33>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Shape * b2Fixture::GetShape() [b2World.cpp <684:26 684:33>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2DistanceProxy b2TOIInput::proxyB [b2World.cpp <684:11 684:16>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep & b2Sweep::operator=(const b2Sweep &) [b2World.cpp <685:18 685:18>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep & b2Sweep::operator=(const b2Sweep &) [b2World.cpp <686:18 686:18>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep & b2Sweep::operator=(const b2Sweep &) [b2World.cpp <744:16 744:16>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep & b2Sweep::operator=(const b2Sweep &) [b2World.cpp <745:16 745:16>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep & b2Sweep::operator=(const b2Sweep &) [b2World.cpp <820:22 820:22>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep & b2Sweep::operator=(const b2Sweep &) [b2World.cpp <828:22 828:22>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2TOIInput::sweepA [b2World.cpp <685:11 685:16>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep b2TOIInput::sweepB [b2World.cpp <686:11 686:16>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2TOIInput::tMax [b2World.cpp <687:11 687:14>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2TOIOutput [b2World.cpp <689:5 689:15>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2TOIOutput::b2TOIOutput() [b2World.cpp <689:17 689:22>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2TimeOfImpact(b2TOIOutput *, const b2TOIInput *) [b2World.cpp <690:5 690:18>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2TOIOutput::t [b2World.cpp <693:27 693:27>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2TOIOutput::State b2TOIOutput::state [b2World.cpp <694:16 694:20>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2TOIOutput::State::e_touching [b2World.cpp <694:38 694:47>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> float b2Min<float>(float, float) [b2World.cpp <696:14 696:18>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep [b2World.cpp <728:3 728:9>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep [b2World.cpp <729:3 729:9>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Sweep [b2World.cpp <808:6 808:12>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Sweep::b2Sweep(const b2Sweep &) [b2World.cpp <728:25 728:31>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Sweep::b2Sweep(const b2Sweep &) [b2World.cpp <729:25 729:31>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Sweep::b2Sweep(const b2Sweep &) [b2World.cpp <808:30 808:36>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Body::Advance(float32) [b2World.cpp <731:7 731:13>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Body::Advance(float32) [b2World.cpp <732:7 732:13>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Body::Advance(float32) [b2World.cpp <811:14 811:20>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Contact::Update(b2ContactListener *) [b2World.cpp <735:15 735:20>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Contact::Update(b2ContactListener *) [b2World.cpp <815:15 815:20>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Contact::IsTouching() const [b2World.cpp <740:55 740:64>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Contact::IsTouching() const [b2World.cpp <826:19 826:28>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Contact::SetEnabled(bool) [b2World.cpp <743:16 743:25>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Body::SynchronizeTransform() [b2World.cpp <746:8 746:27>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Body::SynchronizeTransform() [b2World.cpp <747:8 747:27>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Body::SynchronizeTransform() [b2World.cpp <821:14 821:33>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Body::SynchronizeTransform() [b2World.cpp <829:14 829:33>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Body::SetAwake(bool) [b2World.cpp <751:7 751:14>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Body::SetAwake(bool) [b2World.cpp <752:7 752:14>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Body::SetAwake(bool) [b2World.cpp <848:14 848:21>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Island::Clear() [b2World.cpp <755:10 755:14>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Island::Add(b2Body *) [b2World.cpp <756:10 756:12>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Island::Add(b2Body *) [b2World.cpp <757:10 757:12>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Island::Add(b2Body *) [b2World.cpp <851:13 851:15>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Island::Add(b2Contact *) [b2World.cpp <758:10 758:12>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Island::Add(b2Contact *) [b2World.cpp <835:13 835:15>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactEdge [b2World.cpp <771:10 771:22>]
REFERENCE_TYPE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactEdge [b2World.cpp <879:9 879:21>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactEdge * b2Body::m_contactList [b2World.cpp <771:36 771:48>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactEdge * b2Body::m_contactList [b2World.cpp <879:35 879:47>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactEdge * b2ContactEdge::next [b2World.cpp <771:64 771:67>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2ContactEdge * b2ContactEdge::next [b2World.cpp <879:63 879:66>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Island::m_bodyCount [b2World.cpp <773:17 773:27>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Island::m_bodyCount [b2World.cpp <866:32 866:42>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Island::m_bodyCapacity [b2World.cpp <773:39 773:52>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Island::m_contactCount [b2World.cpp <778:17 778:30>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Island::m_contactCapacity [b2World.cpp <778:42 778:58>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact * b2ContactEdge::contact [b2World.cpp <783:31 783:37>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Contact * b2ContactEdge::contact [b2World.cpp <881:9 881:15>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body * b2ContactEdge::other [b2World.cpp <792:26 792:30>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Fixture::m_isSensor [b2World.cpp <800:42 800:51>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool b2Fixture::m_isSensor [b2World.cpp <801:42 801:51>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Fixture * b2Contact::m_fixtureA [b2World.cpp <800:30 800:39>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Fixture * b2Contact::m_fixtureB [b2World.cpp <801:30 801:39>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2TimeStep::b2TimeStep() [b2World.cpp <856:14 856:20>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2TimeStep::dt [b2World.cpp <857:11 857:12>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2TimeStep::dt [b2World.cpp <857:41 857:42>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2TimeStep::dt [b2World.cpp <858:35 858:36>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2TimeStep::inv_dt [b2World.cpp <858:11 858:16>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> float32 b2TimeStep::dtRatio [b2World.cpp <859:11 859:17>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2TimeStep::positionIterations [b2World.cpp <860:11 860:28>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2TimeStep::velocityIterations [b2World.cpp <861:11 861:28>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2TimeStep::velocityIterations [b2World.cpp <861:37 861:54>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool b2TimeStep::warmStarting [b2World.cpp <862:11 862:22>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Island::SolveTOI(const b2TimeStep &, int32, int32) [b2World.cpp <863:10 863:17>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Body::m_islandIndex [b2World.cpp <863:32 863:44>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> int32 b2Body::m_islandIndex [b2World.cpp <863:51 863:63>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> b2Body * * b2Island::m_bodies [b2World.cpp <868:26 868:33>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2Body::SynchronizeFixtures() [b2World.cpp <876:10 876:28>]
REFERENCE_CALL: void b2World::SolveTOI(const b2TimeStep &) -> void b2ContactManager::FindNewContacts() [b2World.cpp <887:20 887:34>]
REFERENCE_USAGE: void b2World::SolveTOI(const b2TimeStep &) -> bool b2World::m_subStepping [b2World.cpp <889:7 889:19>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> b2Timer [b2World.cpp <899:2 899:8>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> b2Timer [b2World.cpp <929:3 929:9>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> b2Timer [b2World.cpp <937:3 937:9>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> b2Timer [b2World.cpp <945:3 945:9>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> void b2Timer::b2Timer() [b2World.cpp <899:10 899:18>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> void b2Timer::b2Timer() [b2World.cpp <929:11 929:15>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> void b2Timer::b2Timer() [b2World.cpp <937:11 937:15>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> void b2Timer::b2Timer() [b2World.cpp <945:11 945:15>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> int32 b2World::m_flags [b2World.cpp <902:6 902:12>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> int32 b2World::m_flags [b2World.cpp <905:3 905:9>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> int32 b2World::m_flags [b2World.cpp <908:2 908:8>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> int32 b2World::m_flags [b2World.cpp <955:6 955:12>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> int32 b2World::m_flags [b2World.cpp <960:2 960:8>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> b2World::anonymous enum (b2World.h<215:2>)::e_newFixture [b2World.cpp <902:16 902:27>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> b2World::anonymous enum (b2World.h<215:2>)::e_newFixture [b2World.cpp <905:15 905:26>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> void b2ContactManager::FindNewContacts() [b2World.cpp <904:20 904:34>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> b2ContactManager b2World::m_contactManager [b2World.cpp <904:3 904:18>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> b2ContactManager b2World::m_contactManager [b2World.cpp <930:3 930:18>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.cpp <908:13 908:20>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.cpp <960:14 960:21>]
REFERENCE_TYPE_USAGE: void b2World::Step(float32, int32, int32) -> b2TimeStep [b2World.cpp <910:2 910:11>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> void b2TimeStep::b2TimeStep() [b2World.cpp <910:13 910:16>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2TimeStep::dt [b2World.cpp <911:7 911:8>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2TimeStep::dt [b2World.cpp <935:29 935:30>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2TimeStep::dt [b2World.cpp <943:34 943:35>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2TimeStep::dt [b2World.cpp <950:11 950:12>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> int32 b2TimeStep::velocityIterations [b2World.cpp <912:7 912:24>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> int32 b2TimeStep::positionIterations [b2World.cpp <913:7 913:24>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2TimeStep::inv_dt [b2World.cpp <916:8 916:13>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2TimeStep::inv_dt [b2World.cpp <920:8 920:13>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2TimeStep::inv_dt [b2World.cpp <952:20 952:25>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2TimeStep::dtRatio [b2World.cpp <923:7 923:13>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2World::m_inv_dt0 [b2World.cpp <923:17 923:25>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2World::m_inv_dt0 [b2World.cpp <952:3 952:11>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> bool b2TimeStep::warmStarting [b2World.cpp <925:7 925:18>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> bool b2World::m_warmStarting [b2World.cpp <925:22 925:35>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> void b2ContactManager::Collide() [b2World.cpp <930:20 930:26>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2Profile::collide [b2World.cpp <931:13 931:19>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> b2Profile b2World::m_profile [b2World.cpp <931:3 931:11>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> b2Profile b2World::m_profile [b2World.cpp <939:3 939:11>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> b2Profile b2World::m_profile [b2World.cpp <947:3 947:11>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> b2Profile b2World::m_profile [b2World.cpp <962:2 962:10>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> float32 b2Timer::GetMilliseconds() const [b2World.cpp <931:29 931:43>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> float32 b2Timer::GetMilliseconds() const [b2World.cpp <939:27 939:41>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> float32 b2Timer::GetMilliseconds() const [b2World.cpp <947:30 947:44>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> float32 b2Timer::GetMilliseconds() const [b2World.cpp <962:29 962:43>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> bool b2World::m_stepComplete [b2World.cpp <935:6 935:19>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> void b2World::Solve(const b2TimeStep &) [b2World.cpp <938:3 938:7>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2Profile::solve [b2World.cpp <939:13 939:17>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> bool b2World::m_continuousPhysics [b2World.cpp <943:6 943:24>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> void b2World::SolveTOI(const b2TimeStep &) [b2World.cpp <946:3 946:10>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2Profile::solveTOI [b2World.cpp <947:13 947:20>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> b2World::anonymous enum (b2World.h<215:2>)::e_clearForces [b2World.cpp <955:16 955:28>]
REFERENCE_CALL: void b2World::Step(float32, int32, int32) -> void b2World::ClearForces() [b2World.cpp <957:3 957:13>]
REFERENCE_USAGE: void b2World::Step(float32, int32, int32) -> float32 b2Profile::step [b2World.cpp <962:12 962:15>]
REFERENCE_TYPE_USAGE: void b2World::ClearForces() -> b2Body [b2World.cpp <967:7 967:12>]
REFERENCE_USAGE: void b2World::ClearForces() -> b2Body * b2World::m_bodyList [b2World.cpp <967:22 967:31>]
REFERENCE_CALL: void b2World::ClearForces() -> b2Body * b2Body::GetNext() [b2World.cpp <967:53 967:59>]
REFERENCE_CALL: void b2World::ClearForces() -> void b2Vec2::SetZero() [b2World.cpp <969:17 969:23>]
REFERENCE_USAGE: void b2World::ClearForces() -> b2Vec2 b2Body::m_force [b2World.cpp <969:9 969:15>]
REFERENCE_USAGE: void b2World::ClearForces() -> float32 b2Body::m_torque [b2World.cpp <970:9 970:16>]
REFERENCE_TYPE_USAGE: bool b2WorldQueryWrapper::QueryCallback(int32) -> bool [b2World.cpp <976:2 976:5>]
REFERENCE_TYPE_USAGE: bool b2WorldQueryWrapper::QueryCallback(int32) -> int32 [b2World.cpp <976:21 976:25>]
REFERENCE_TYPE_USAGE: bool b2WorldQueryWrapper::QueryCallback(int32) -> b2FixtureProxy [b2World.cpp <978:3 978:16>]
REFERENCE_TYPE_USAGE: bool b2WorldQueryWrapper::QueryCallback(int32) -> b2FixtureProxy [b2World.cpp <978:28 978:41>]
REFERENCE_CALL: bool b2WorldQueryWrapper::QueryCallback(int32) -> void * b2BroadPhase::GetUserData(int32) const [b2World.cpp <978:56 978:66>]
REFERENCE_USAGE: bool b2WorldQueryWrapper::QueryCallback(int32) -> const b2BroadPhase * b2WorldQueryWrapper::broadPhase [b2World.cpp <978:44 978:53>]
REFERENCE_CALL: bool b2WorldQueryWrapper::QueryCallback(int32) -> bool b2QueryCallback::ReportFixture(b2Fixture *) [b2World.cpp <979:20 979:32>]
REFERENCE_USAGE: bool b2WorldQueryWrapper::QueryCallback(int32) -> b2QueryCallback * b2WorldQueryWrapper::callback [b2World.cpp <979:10 979:17>]
REFERENCE_USAGE: bool b2WorldQueryWrapper::QueryCallback(int32) -> b2Fixture * b2FixtureProxy::fixture [b2World.cpp <979:41 979:47>]
REFERENCE_TYPE_USAGE: const b2BroadPhase * b2WorldQueryWrapper::broadPhase -> b2BroadPhase [b2World.cpp <982:8 982:19>]
REFERENCE_TYPE_USAGE: b2QueryCallback * b2WorldQueryWrapper::callback -> b2QueryCallback [b2World.cpp <983:2 983:16>]
REFERENCE_TYPE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2WorldQueryWrapper [b2World.cpp <988:2 988:20>]
REFERENCE_CALL: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> void b2WorldQueryWrapper::b2WorldQueryWrapper() [b2World.cpp <988:22 988:28>]
REFERENCE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> const b2BroadPhase * b2WorldQueryWrapper::broadPhase [b2World.cpp <989:10 989:19>]
REFERENCE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2BroadPhase b2ContactManager::m_broadPhase [b2World.cpp <989:41 989:52>]
REFERENCE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2BroadPhase b2ContactManager::m_broadPhase [b2World.cpp <991:19 991:30>]
REFERENCE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2ContactManager b2World::m_contactManager [b2World.cpp <989:24 989:39>]
REFERENCE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2ContactManager b2World::m_contactManager [b2World.cpp <991:2 991:17>]
REFERENCE_USAGE: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> b2QueryCallback * b2WorldQueryWrapper::callback [b2World.cpp <990:10 990:17>]
REFERENCE_CALL: void b2World::QueryAABB(b2QueryCallback *, const b2AABB &) const -> void b2BroadPhase::Query<b2WorldQueryWrapper>(b2WorldQueryWrapper *, const b2AABB &) const [b2World.cpp <991:32 991:36>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> float32 [b2World.cpp <996:2 996:8>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> float32 [b2World.cpp <1007:4 1007:10>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2RayCastInput [b2World.cpp <996:32 996:45>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> int32 [b2World.cpp <996:55 996:59>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> int32 [b2World.cpp <1001:3 1001:7>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> void [b2World.cpp <998:3 998:6>]
REFERENCE_CALL: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> void * b2BroadPhase::GetUserData(int32) const [b2World.cpp <998:32 998:42>]
REFERENCE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> const b2BroadPhase * b2WorldRayCastWrapper::broadPhase [b2World.cpp <998:20 998:29>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2FixtureProxy [b2World.cpp <999:3 999:16>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2FixtureProxy [b2World.cpp <999:28 999:41>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2Fixture [b2World.cpp <1000:3 1000:11>]
REFERENCE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2Fixture * b2FixtureProxy::fixture [b2World.cpp <1000:31 1000:37>]
REFERENCE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> int32 b2FixtureProxy::childIndex [b2World.cpp <1001:24 1001:33>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2RayCastOutput [b2World.cpp <1002:3 1002:17>]
REFERENCE_CALL: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> void b2RayCastOutput::b2RayCastOutput() [b2World.cpp <1002:19 1002:24>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> bool [b2World.cpp <1003:3 1003:6>]
REFERENCE_CALL: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> bool b2Fixture::RayCast(b2RayCastOutput *, const b2RayCastInput &, int32) const [b2World.cpp <1003:23 1003:29>]
REFERENCE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> float32 b2RayCastOutput::fraction [b2World.cpp <1007:30 1007:37>]
REFERENCE_TYPE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2Vec2 [b2World.cpp <1008:4 1008:9>]
REFERENCE_CALL: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2World.cpp <1008:48 1008:48>]
REFERENCE_CALL: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2World.cpp <1008:37 1008:37>]
REFERENCE_CALL: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2World.cpp <1008:59 1008:59>]
REFERENCE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2Vec2 b2RayCastInput::p1 [b2World.cpp <1008:45 1008:46>]
REFERENCE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2Vec2 b2RayCastInput::p2 [b2World.cpp <1008:67 1008:68>]
REFERENCE_CALL: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> float32 b2RayCastCallback::ReportFixture(b2Fixture *, const b2Vec2 &, const b2Vec2 &, float32) [b2World.cpp <1009:21 1009:33>]
REFERENCE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2RayCastCallback * b2WorldRayCastWrapper::callback [b2World.cpp <1009:11 1009:18>]
REFERENCE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> b2Vec2 b2RayCastOutput::normal [b2World.cpp <1009:58 1009:63>]
REFERENCE_USAGE: float32 b2WorldRayCastWrapper::RayCastCallback(const b2RayCastInput &, int32) -> float32 b2RayCastInput::maxFraction [b2World.cpp <1012:16 1012:26>]
REFERENCE_TYPE_USAGE: const b2BroadPhase * b2WorldRayCastWrapper::broadPhase -> b2BroadPhase [b2World.cpp <1015:8 1015:19>]
REFERENCE_TYPE_USAGE: b2RayCastCallback * b2WorldRayCastWrapper::callback -> b2RayCastCallback [b2World.cpp <1016:2 1016:18>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2WorldRayCastWrapper [b2World.cpp <1021:2 1021:22>]
REFERENCE_CALL: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> void b2WorldRayCastWrapper::b2WorldRayCastWrapper() [b2World.cpp <1021:24 1021:30>]
REFERENCE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> const b2BroadPhase * b2WorldRayCastWrapper::broadPhase [b2World.cpp <1022:10 1022:19>]
REFERENCE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2BroadPhase b2ContactManager::m_broadPhase [b2World.cpp <1022:41 1022:52>]
REFERENCE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2BroadPhase b2ContactManager::m_broadPhase [b2World.cpp <1028:19 1028:30>]
REFERENCE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2ContactManager b2World::m_contactManager [b2World.cpp <1022:24 1022:39>]
REFERENCE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2ContactManager b2World::m_contactManager [b2World.cpp <1028:2 1028:17>]
REFERENCE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2RayCastCallback * b2WorldRayCastWrapper::callback [b2World.cpp <1023:10 1023:17>]
REFERENCE_TYPE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2RayCastInput [b2World.cpp <1024:2 1024:15>]
REFERENCE_CALL: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> void b2RayCastInput::b2RayCastInput() [b2World.cpp <1024:17 1024:21>]
REFERENCE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> float32 b2RayCastInput::maxFraction [b2World.cpp <1025:8 1025:18>]
REFERENCE_CALL: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2World.cpp <1026:11 1026:11>]
REFERENCE_CALL: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2World.cpp <1027:11 1027:11>]
REFERENCE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2Vec2 b2RayCastInput::p1 [b2World.cpp <1026:8 1026:9>]
REFERENCE_USAGE: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> b2Vec2 b2RayCastInput::p2 [b2World.cpp <1027:8 1027:9>]
REFERENCE_CALL: void b2World::RayCast(b2RayCastCallback *, const b2Vec2 &, const b2Vec2 &) const -> void b2BroadPhase::RayCast<b2WorldRayCastWrapper>(b2WorldRayCastWrapper *, const b2RayCastInput &) const [b2World.cpp <1028:32 1028:38>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Shape::Type b2Fixture::GetType() const [b2World.cpp <1033:19 1033:25>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Shape::Type::e_circle [b2World.cpp <1035:16 1035:23>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2CircleShape [b2World.cpp <1037:4 1037:16>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2CircleShape [b2World.cpp <1037:29 1037:41>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Shape * b2Fixture::GetShape() [b2World.cpp <1037:53 1037:60>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Shape * b2Fixture::GetShape() [b2World.cpp <1049:47 1049:54>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Shape * b2Fixture::GetShape() [b2World.cpp <1058:50 1058:57>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Shape * b2Fixture::GetShape() [b2World.cpp <1093:53 1093:60>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [b2World.cpp <1039:4 1039:9>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [b2World.cpp <1041:4 1041:9>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [b2World.cpp <1041:30 1041:35>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [b2World.cpp <1050:4 1050:9>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [b2World.cpp <1051:4 1051:9>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [b2World.cpp <1060:10 1060:15>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [b2World.cpp <1064:4 1064:9>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [b2World.cpp <1069:5 1069:10>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [b2World.cpp <1076:5 1076:10>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [b2World.cpp <1084:5 1084:10>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [b2World.cpp <1096:4 1096:9>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2World.cpp <1039:20 1039:24>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2World.cpp <1050:16 1050:20>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2World.cpp <1051:16 1051:20>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2World.cpp <1064:16 1064:20>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2World.cpp <1069:17 1069:21>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2World.cpp <1076:17 1076:21>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2World.cpp <1084:17 1084:21>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2World.cpp <1100:19 1100:23>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2CircleShape::m_p [b2World.cpp <1039:38 1039:40>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> float32 [b2World.cpp <1040:4 1040:10>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> float32 b2Shape::m_radius [b2World.cpp <1040:29 1040:36>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2World.cpp <1041:18 1041:22>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Rot b2Transform::q [b2World.cpp <1041:27 1041:27>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Vec2::b2Vec2(float32, float32) [b2World.cpp <1041:30 1041:35>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Draw::DrawSolidCircle(const b2Vec2 &, float32, const b2Vec2 &, const b2Color &) [b2World.cpp <1043:17 1043:31>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1043:4 1043:14>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1052:4 1052:14>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1065:4 1065:14>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1070:5 1070:15>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1071:5 1071:15>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1077:5 1077:15>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1078:5 1078:15>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1085:5 1085:15>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1086:5 1086:15>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1103:4 1103:14>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Shape::Type::e_edge [b2World.cpp <1047:16 1047:21>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2EdgeShape [b2World.cpp <1049:4 1049:14>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2EdgeShape [b2World.cpp <1049:25 1049:35>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2EdgeShape::m_vertex1 [b2World.cpp <1050:32 1050:40>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2EdgeShape::m_vertex2 [b2World.cpp <1051:32 1051:40>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2World.cpp <1052:17 1052:27>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2World.cpp <1070:18 1070:28>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2World.cpp <1077:18 1077:28>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2World.cpp <1085:18 1085:28>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Shape::Type::e_chain [b2World.cpp <1056:16 1056:22>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2ChainShape [b2World.cpp <1058:4 1058:15>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2ChainShape [b2World.cpp <1058:27 1058:38>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> int32 [b2World.cpp <1059:4 1059:8>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> int32 [b2World.cpp <1074:9 1074:13>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> int32 [b2World.cpp <1094:4 1094:8>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> int32 [b2World.cpp <1098:9 1098:13>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> int32 b2ChainShape::m_count [b2World.cpp <1059:25 1059:31>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 * b2ChainShape::m_vertices [b2World.cpp <1060:36 1060:45>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Color::b2Color(float32, float32, float32, float32) [b2World.cpp <1062:12 1062:21>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> float32 b2Color::r [b2World.cpp <1062:37 1062:37>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> float32 b2Color::g [b2World.cpp <1062:54 1062:54>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> float32 b2Color::b [b2World.cpp <1062:71 1062:71>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> float32 b2Color::a [b2World.cpp <1062:80 1062:80>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Draw::DrawPoint(const b2Vec2 &, float32, const b2Color &) [b2World.cpp <1065:17 1065:25>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Draw::DrawPoint(const b2Vec2 &, float32, const b2Color &) [b2World.cpp <1078:18 1078:26>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> bool b2ChainShape::m_hasPrevVertex [b2World.cpp <1067:15 1067:29>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2ChainShape::m_prevVertex [b2World.cpp <1069:34 1069:45>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Draw::DrawCircle(const b2Vec2 &, float32, const b2Color &) [b2World.cpp <1071:18 1071:27>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Draw::DrawCircle(const b2Vec2 &, float32, const b2Color &) [b2World.cpp <1086:18 1086:27>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2World.cpp <1079:8 1079:8>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> bool b2ChainShape::m_hasNextVertex [b2World.cpp <1082:15 1082:29>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 b2ChainShape::m_nextVertex [b2World.cpp <1084:34 1084:45>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Shape::Type::e_polygon [b2World.cpp <1091:16 1091:24>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2PolygonShape [b2World.cpp <1093:4 1093:17>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2PolygonShape [b2World.cpp <1093:28 1093:41>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> int32 b2PolygonShape::m_count [b2World.cpp <1094:30 1094:36>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <1095:4 1095:11>]
REFERENCE_TYPE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> unsigned int [b2World.cpp <1095:4 1095:11>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Vec2::b2Vec2() [b2World.cpp <1096:11 1096:18>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2World.cpp <1100:17 1100:17>]
REFERENCE_USAGE: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> b2Vec2 [] b2PolygonShape::m_vertices [b2World.cpp <1100:35 1100:44>]
REFERENCE_CALL: void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) -> void b2Draw::DrawSolidPolygon(const b2Vec2 *, int32, const b2Color &) [b2World.cpp <1103:17 1103:32>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Body [b2World.cpp <1114:2 1114:7>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Body [b2World.cpp <1115:2 1115:7>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> b2Body * b2Joint::GetBodyA() [b2World.cpp <1114:25 1114:32>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> b2Body * b2Joint::GetBodyB() [b2World.cpp <1115:25 1115:32>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Transform [b2World.cpp <1116:8 1116:18>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Transform [b2World.cpp <1117:8 1117:18>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> const b2Transform & b2Body::GetTransform() const [b2World.cpp <1116:34 1116:45>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> const b2Transform & b2Body::GetTransform() const [b2World.cpp <1117:34 1117:45>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Vec2 [b2World.cpp <1118:2 1118:7>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Vec2 [b2World.cpp <1119:2 1119:7>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Vec2 [b2World.cpp <1120:2 1120:7>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Vec2 [b2World.cpp <1121:2 1121:7>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Vec2 [b2World.cpp <1134:4 1134:9>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Vec2 [b2World.cpp <1135:4 1135:9>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2World.cpp <1118:18 1118:18>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2World.cpp <1119:18 1119:18>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Vec2 b2Transform::p [b2World.cpp <1118:18 1118:18>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Vec2 b2Transform::p [b2World.cpp <1119:18 1119:18>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> b2Vec2 b2Joint::GetAnchorA() const [b2World.cpp <1120:21 1120:30>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> b2Vec2 b2Joint::GetAnchorB() const [b2World.cpp <1121:21 1121:30>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Color [b2World.cpp <1123:2 1123:8>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> void b2Color::b2Color(float32, float32, float32, float32) [b2World.cpp <1123:10 1123:14>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> b2JointType b2Joint::GetType() const [b2World.cpp <1125:17 1125:23>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2JointType::e_distanceJoint [b2World.cpp <1127:7 1127:21>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2World.cpp <1128:16 1128:26>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2World.cpp <1136:17 1136:27>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2World.cpp <1137:17 1137:27>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2World.cpp <1138:17 1138:27>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2World.cpp <1147:16 1147:26>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2World.cpp <1148:16 1148:26>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> void b2Draw::DrawSegment(const b2Vec2 &, const b2Vec2 &, const b2Color &) [b2World.cpp <1149:16 1149:26>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1128:3 1128:13>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1136:4 1136:14>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1137:4 1137:14>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1138:4 1138:14>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1147:3 1147:13>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1148:3 1148:13>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2Draw * b2World::g_debugDraw [b2World.cpp <1149:3 1149:13>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2JointType::e_pulleyJoint [b2World.cpp <1131:7 1131:19>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2PulleyJoint [b2World.cpp <1133:4 1133:16>]
REFERENCE_TYPE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2PulleyJoint [b2World.cpp <1133:29 1133:41>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> b2Vec2 b2PulleyJoint::GetGroundAnchorA() const [b2World.cpp <1134:24 1134:39>]
REFERENCE_CALL: void b2World::DrawJoint(b2Joint *) -> b2Vec2 b2PulleyJoint::GetGroundAnchorB() const [b2World.cpp <1135:24 1135:39>]
REFERENCE_USAGE: void b2World::DrawJoint(b2Joint *) -> b2JointType::e_mouseJoint [b2World.cpp <1142:7 1142:18>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Draw * b2World::g_debugDraw [b2World.cpp <1155:6 1155:16>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Draw * b2World::g_debugDraw [b2World.cpp <1160:17 1160:27>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Draw * b2World::g_debugDraw [b2World.cpp <1240:6 1240:16>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Draw * b2World::g_debugDraw [b2World.cpp <1252:4 1252:14>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> uint32 [b2World.cpp <1160:2 1160:7>]
REFERENCE_CALL: void b2World::DrawDebugData() -> uint32 b2Draw::GetFlags() const [b2World.cpp <1160:30 1160:37>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Draw::anonymous enum (b2Draw.h<50:2>)::e_shapeBit [b2World.cpp <1162:22 1162:31>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Body [b2World.cpp <1164:8 1164:13>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Body [b2World.cpp <1221:8 1221:13>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Body [b2World.cpp <1248:8 1248:13>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Body * b2World::m_bodyList [b2World.cpp <1164:20 1164:29>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Body * b2World::m_bodyList [b2World.cpp <1221:20 1221:29>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Body * b2World::m_bodyList [b2World.cpp <1248:20 1248:29>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2Body * b2Body::GetNext() [b2World.cpp <1164:42 1164:48>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2Body * b2Body::GetNext() [b2World.cpp <1221:42 1221:48>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2Body * b2Body::GetNext() [b2World.cpp <1248:42 1248:48>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Transform [b2World.cpp <1166:10 1166:20>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Transform [b2World.cpp <1250:4 1250:14>]
REFERENCE_CALL: void b2World::DrawDebugData() -> const b2Transform & b2Body::GetTransform() const [b2World.cpp <1166:31 1166:42>]
REFERENCE_CALL: void b2World::DrawDebugData() -> const b2Transform & b2Body::GetTransform() const [b2World.cpp <1250:24 1250:35>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Fixture [b2World.cpp <1167:9 1167:17>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Fixture [b2World.cpp <1228:9 1228:17>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2Fixture * b2Body::GetFixtureList() [b2World.cpp <1167:27 1167:40>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2Fixture * b2Body::GetFixtureList() [b2World.cpp <1228:27 1228:40>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2Fixture * b2Fixture::GetNext() [b2World.cpp <1167:55 1167:61>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2Fixture * b2Fixture::GetNext() [b2World.cpp <1228:55 1228:61>]
REFERENCE_CALL: void b2World::DrawDebugData() -> bool b2Body::IsActive() const [b2World.cpp <1169:12 1169:19>]
REFERENCE_CALL: void b2World::DrawDebugData() -> bool b2Body::IsActive() const [b2World.cpp <1223:11 1223:18>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) [b2World.cpp <1171:6 1171:14>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) [b2World.cpp <1175:6 1175:14>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) [b2World.cpp <1179:6 1179:14>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) [b2World.cpp <1183:6 1183:14>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2World::DrawShape(b2Fixture *, const b2Transform &, const b2Color &) [b2World.cpp <1187:6 1187:14>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Color::b2Color(float32, float32, float32, float32) [b2World.cpp <1171:23 1171:29>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Color::b2Color(float32, float32, float32, float32) [b2World.cpp <1175:23 1175:29>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Color::b2Color(float32, float32, float32, float32) [b2World.cpp <1179:23 1179:29>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Color::b2Color(float32, float32, float32, float32) [b2World.cpp <1183:23 1183:29>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Color::b2Color(float32, float32, float32, float32) [b2World.cpp <1187:23 1187:29>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Color::b2Color(float32, float32, float32, float32) [b2World.cpp <1203:11 1203:15>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Color::b2Color(float32, float32, float32, float32) [b2World.cpp <1218:11 1218:15>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Color [b2World.cpp <1171:23 1171:29>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Color [b2World.cpp <1175:23 1175:29>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Color [b2World.cpp <1179:23 1179:29>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Color [b2World.cpp <1183:23 1183:29>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Color [b2World.cpp <1187:23 1187:29>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Color [b2World.cpp <1203:3 1203:9>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Color [b2World.cpp <1218:3 1218:9>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2BodyType b2Body::GetType() const [b2World.cpp <1173:17 1173:23>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2BodyType b2Body::GetType() const [b2World.cpp <1177:17 1177:23>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2BodyType::b2_staticBody [b2World.cpp <1173:30 1173:42>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2BodyType::b2_kinematicBody [b2World.cpp <1177:30 1177:45>]
REFERENCE_CALL: void b2World::DrawDebugData() -> bool b2Body::IsAwake() const [b2World.cpp <1181:17 1181:23>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Draw::anonymous enum (b2Draw.h<50:2>)::e_jointBit [b2World.cpp <1193:22 1193:31>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Joint [b2World.cpp <1195:8 1195:14>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Joint * b2World::m_jointList [b2World.cpp <1195:21 1195:31>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2Joint * b2Joint::GetNext() [b2World.cpp <1195:44 1195:50>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2World::DrawJoint(b2Joint *) [b2World.cpp <1197:4 1197:12>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Draw::anonymous enum (b2Draw.h<50:2>)::e_pairBit [b2World.cpp <1201:22 1201:30>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Contact [b2World.cpp <1204:8 1204:16>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Contact * b2ContactManager::m_contactList [b2World.cpp <1204:40 1204:52>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2ContactManager b2World::m_contactManager [b2World.cpp <1204:23 1204:38>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2ContactManager b2World::m_contactManager [b2World.cpp <1219:23 1219:38>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2Contact * b2Contact::GetNext() [b2World.cpp <1204:65 1204:71>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Draw::anonymous enum (b2Draw.h<50:2>)::e_aabbBit [b2World.cpp <1216:22 1216:30>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2BroadPhase [b2World.cpp <1219:3 1219:14>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2BroadPhase b2ContactManager::m_broadPhase [b2World.cpp <1219:40 1219:51>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> int32 [b2World.cpp <1230:10 1230:14>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> int32 b2Fixture::m_proxyCount [b2World.cpp <1230:30 1230:41>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2FixtureProxy [b2World.cpp <1232:6 1232:19>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2FixtureProxy * b2Fixture::m_proxies [b2World.cpp <1232:33 1232:41>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2AABB [b2World.cpp <1233:6 1233:11>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2AABB::b2AABB(const b2AABB &) [b2World.cpp <1233:49 1233:49>]
REFERENCE_CALL: void b2World::DrawDebugData() -> const b2AABB & b2BroadPhase::GetFatAABB(int32) const [b2World.cpp <1233:24 1233:33>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> int32 b2FixtureProxy::proxyId [b2World.cpp <1233:42 1233:48>]
REFERENCE_TYPE_USAGE: void b2World::DrawDebugData() -> b2Vec2 [b2World.cpp <1234:6 1234:11>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Vec2::b2Vec2() [b2World.cpp <1234:13 1234:14>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Vec2::Set(float32, float32) [b2World.cpp <1235:12 1235:14>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Vec2::Set(float32, float32) [b2World.cpp <1236:12 1236:14>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Vec2::Set(float32, float32) [b2World.cpp <1237:12 1237:14>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Vec2::Set(float32, float32) [b2World.cpp <1238:12 1238:14>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> float32 b2Vec2::x [b2World.cpp <1235:32 1235:32>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> float32 b2Vec2::x [b2World.cpp <1236:32 1236:32>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> float32 b2Vec2::x [b2World.cpp <1237:32 1237:32>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> float32 b2Vec2::x [b2World.cpp <1238:32 1238:32>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Vec2 b2AABB::lowerBound [b2World.cpp <1235:21 1235:30>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Vec2 b2AABB::lowerBound [b2World.cpp <1235:40 1235:49>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Vec2 b2AABB::lowerBound [b2World.cpp <1236:40 1236:49>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Vec2 b2AABB::lowerBound [b2World.cpp <1238:21 1238:30>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> float32 b2Vec2::y [b2World.cpp <1235:51 1235:51>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> float32 b2Vec2::y [b2World.cpp <1236:51 1236:51>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> float32 b2Vec2::y [b2World.cpp <1237:51 1237:51>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> float32 b2Vec2::y [b2World.cpp <1238:51 1238:51>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Vec2 b2AABB::upperBound [b2World.cpp <1236:21 1236:30>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Vec2 b2AABB::upperBound [b2World.cpp <1237:21 1237:30>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Vec2 b2AABB::upperBound [b2World.cpp <1237:40 1237:49>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Vec2 b2AABB::upperBound [b2World.cpp <1238:40 1238:49>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Draw::DrawPolygon(const b2Vec2 *, int32, const b2Color &) [b2World.cpp <1240:19 1240:29>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Draw::anonymous enum (b2Draw.h<50:2>)::e_centerOfMassBit [b2World.cpp <1246:22 1246:38>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Transform::b2Transform(const b2Transform &) [b2World.cpp <1250:37 1250:37>]
REFERENCE_CALL: void b2World::DrawDebugData() -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2World.cpp <1251:9 1251:9>]
REFERENCE_USAGE: void b2World::DrawDebugData() -> b2Vec2 b2Transform::p [b2World.cpp <1251:7 1251:7>]
REFERENCE_CALL: void b2World::DrawDebugData() -> const b2Vec2 & b2Body::GetWorldCenter() const [b2World.cpp <1251:14 1251:27>]
REFERENCE_CALL: void b2World::DrawDebugData() -> void b2Draw::DrawTransform(const b2Transform &) [b2World.cpp <1252:17 1252:29>]
REFERENCE_CALL: int32 b2World::GetProxyCount() const -> int32 b2BroadPhase::GetProxyCount() const [b2World.cpp <1259:39 1259:51>]
REFERENCE_USAGE: int32 b2World::GetProxyCount() const -> b2BroadPhase b2ContactManager::m_broadPhase [b2World.cpp <1259:26 1259:37>]
REFERENCE_USAGE: int32 b2World::GetProxyCount() const -> b2ContactManager b2World::m_contactManager [b2World.cpp <1259:9 1259:24>]
REFERENCE_CALL: int32 b2World::GetTreeHeight() const -> int32 b2BroadPhase::GetTreeHeight() const [b2World.cpp <1264:39 1264:51>]
REFERENCE_USAGE: int32 b2World::GetTreeHeight() const -> b2BroadPhase b2ContactManager::m_broadPhase [b2World.cpp <1264:26 1264:37>]
REFERENCE_USAGE: int32 b2World::GetTreeHeight() const -> b2ContactManager b2World::m_contactManager [b2World.cpp <1264:9 1264:24>]
REFERENCE_CALL: int32 b2World::GetTreeBalance() const -> int32 b2BroadPhase::GetTreeBalance() const [b2World.cpp <1269:39 1269:52>]
REFERENCE_USAGE: int32 b2World::GetTreeBalance() const -> b2BroadPhase b2ContactManager::m_broadPhase [b2World.cpp <1269:26 1269:37>]
REFERENCE_USAGE: int32 b2World::GetTreeBalance() const -> b2ContactManager b2World::m_contactManager [b2World.cpp <1269:9 1269:24>]
REFERENCE_CALL: float32 b2World::GetTreeQuality() const -> float32 b2BroadPhase::GetTreeQuality() const [b2World.cpp <1274:39 1274:52>]
REFERENCE_USAGE: float32 b2World::GetTreeQuality() const -> b2BroadPhase b2ContactManager::m_broadPhase [b2World.cpp <1274:26 1274:37>]
REFERENCE_USAGE: float32 b2World::GetTreeQuality() const -> b2ContactManager b2World::m_contactManager [b2World.cpp <1274:9 1274:24>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> int32 b2World::m_flags [b2World.cpp <1279:12 1279:18>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> int32 b2World::m_flags [b2World.cpp <1280:7 1280:13>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.cpp <1279:22 1279:29>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.cpp <1280:17 1280:24>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.cpp <1280:30 1280:37>]
REFERENCE_CALL: void b2World::ShiftOrigin(const b2Vec2 &) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2World.cpp <1279:2 1279:9>]
REFERENCE_TYPE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> unsigned int [b2World.cpp <1279:2 1279:9>]
REFERENCE_TYPE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Body [b2World.cpp <1285:7 1285:12>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Body * b2World::m_bodyList [b2World.cpp <1285:19 1285:28>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Body * b2Body::m_next [b2World.cpp <1285:41 1285:46>]
REFERENCE_CALL: void b2World::ShiftOrigin(const b2Vec2 &) -> void b2Vec2::operator-=(const b2Vec2 &) [b2World.cpp <1287:13 1287:14>]
REFERENCE_CALL: void b2World::ShiftOrigin(const b2Vec2 &) -> void b2Vec2::operator-=(const b2Vec2 &) [b2World.cpp <1288:17 1288:18>]
REFERENCE_CALL: void b2World::ShiftOrigin(const b2Vec2 &) -> void b2Vec2::operator-=(const b2Vec2 &) [b2World.cpp <1289:16 1289:17>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Vec2 b2Transform::p [b2World.cpp <1287:11 1287:11>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Transform b2Body::m_xf [b2World.cpp <1287:6 1287:9>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Vec2 b2Sweep::c0 [b2World.cpp <1288:14 1288:15>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Sweep b2Body::m_sweep [b2World.cpp <1288:6 1288:12>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Sweep b2Body::m_sweep [b2World.cpp <1289:6 1289:12>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Vec2 b2Sweep::c [b2World.cpp <1289:14 1289:14>]
REFERENCE_TYPE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Joint [b2World.cpp <1292:7 1292:13>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Joint * b2World::m_jointList [b2World.cpp <1292:20 1292:30>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2Joint * b2Joint::m_next [b2World.cpp <1292:43 1292:48>]
REFERENCE_CALL: void b2World::ShiftOrigin(const b2Vec2 &) -> void b2Joint::ShiftOrigin(const b2Vec2 &) [b2World.cpp <1294:6 1294:16>]
REFERENCE_CALL: void b2World::ShiftOrigin(const b2Vec2 &) -> void b2BroadPhase::ShiftOrigin(const b2Vec2 &) [b2World.cpp <1297:32 1297:42>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2BroadPhase b2ContactManager::m_broadPhase [b2World.cpp <1297:19 1297:30>]
REFERENCE_USAGE: void b2World::ShiftOrigin(const b2Vec2 &) -> b2ContactManager b2World::m_contactManager [b2World.cpp <1297:2 1297:17>]
REFERENCE_USAGE: void b2World::Dump() -> int32 b2World::m_flags [b2World.cpp <1302:7 1302:13>]
REFERENCE_USAGE: void b2World::Dump() -> b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.cpp <1302:17 1302:24>]
REFERENCE_USAGE: void b2World::Dump() -> b2World::anonymous enum (b2World.h<215:2>)::e_locked [b2World.cpp <1302:30 1302:37>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1307:2 1307:6>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1308:2 1308:6>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1310:2 1310:6>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1311:2 1311:6>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1335:3 1335:7>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1337:3 1337:7>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1348:3 1348:7>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1350:3 1350:7>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1353:2 1353:6>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1354:2 1354:6>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1355:2 1355:6>]
REFERENCE_CALL: void b2World::Dump() -> void b2Log(const char *) [b2World.cpp <1356:2 1356:6>]
REFERENCE_USAGE: void b2World::Dump() -> float32 b2Vec2::x [b2World.cpp <1307:51 1307:51>]
REFERENCE_USAGE: void b2World::Dump() -> b2Vec2 b2World::m_gravity [b2World.cpp <1307:41 1307:49>]
REFERENCE_USAGE: void b2World::Dump() -> b2Vec2 b2World::m_gravity [b2World.cpp <1307:54 1307:62>]
REFERENCE_USAGE: void b2World::Dump() -> float32 b2Vec2::y [b2World.cpp <1307:64 1307:64>]
REFERENCE_USAGE: void b2World::Dump() -> int32 b2World::m_bodyCount [b2World.cpp <1310:72 1310:82>]
REFERENCE_USAGE: void b2World::Dump() -> int32 b2World::m_jointCount [b2World.cpp <1311:75 1311:86>]
REFERENCE_TYPE_USAGE: void b2World::Dump() -> int32 [b2World.cpp <1312:2 1312:6>]
REFERENCE_TYPE_USAGE: void b2World::Dump() -> b2Body [b2World.cpp <1313:7 1313:12>]
REFERENCE_USAGE: void b2World::Dump() -> b2Body * b2World::m_bodyList [b2World.cpp <1313:19 1313:28>]
REFERENCE_USAGE: void b2World::Dump() -> b2Body * b2Body::m_next [b2World.cpp <1313:41 1313:46>]
REFERENCE_USAGE: void b2World::Dump() -> int32 b2Body::m_islandIndex [b2World.cpp <1315:6 1315:18>]
REFERENCE_CALL: void b2World::Dump() -> void b2Body::Dump() [b2World.cpp <1316:6 1316:9>]
REFERENCE_TYPE_USAGE: void b2World::Dump() -> b2Joint [b2World.cpp <1321:7 1321:13>]
REFERENCE_TYPE_USAGE: void b2World::Dump() -> b2Joint [b2World.cpp <1328:7 1328:13>]
REFERENCE_TYPE_USAGE: void b2World::Dump() -> b2Joint [b2World.cpp <1341:7 1341:13>]
REFERENCE_USAGE: void b2World::Dump() -> b2Joint * b2World::m_jointList [b2World.cpp <1321:20 1321:30>]
REFERENCE_USAGE: void b2World::Dump() -> b2Joint * b2World::m_jointList [b2World.cpp <1328:20 1328:30>]
REFERENCE_USAGE: void b2World::Dump() -> b2Joint * b2World::m_jointList [b2World.cpp <1341:20 1341:30>]
REFERENCE_USAGE: void b2World::Dump() -> b2Joint * b2Joint::m_next [b2World.cpp <1321:43 1321:48>]
REFERENCE_USAGE: void b2World::Dump() -> b2Joint * b2Joint::m_next [b2World.cpp <1328:43 1328:48>]
REFERENCE_USAGE: void b2World::Dump() -> b2Joint * b2Joint::m_next [b2World.cpp <1341:43 1341:48>]
REFERENCE_USAGE: void b2World::Dump() -> int32 b2Joint::m_index [b2World.cpp <1323:6 1323:12>]
REFERENCE_USAGE: void b2World::Dump() -> b2JointType b2Joint::m_type [b2World.cpp <1330:10 1330:15>]
REFERENCE_USAGE: void b2World::Dump() -> b2JointType b2Joint::m_type [b2World.cpp <1343:10 1343:15>]
REFERENCE_USAGE: void b2World::Dump() -> b2JointType::e_gearJoint [b2World.cpp <1330:20 1330:30>]
REFERENCE_USAGE: void b2World::Dump() -> b2JointType::e_gearJoint [b2World.cpp <1343:20 1343:30>]
REFERENCE_CALL: void b2World::Dump() -> void b2Joint::Dump() [b2World.cpp <1336:6 1336:9>]
REFERENCE_CALL: void b2World::Dump() -> void b2Joint::Dump() [b2World.cpp <1349:6 1349:9>]
LOCAL_SYMBOL: b2BlockAllocator.h<36:1> [b2BlockAllocator.h <36:1 36:1>]
LOCAL_SYMBOL: b2BlockAllocator.h<36:1> [b2BlockAllocator.h <60:1 60:1>]
LOCAL_SYMBOL: b2BlockAllocator.h<42:23> [b2BlockAllocator.h <42:23 42:26>]
LOCAL_SYMBOL: b2BlockAllocator.h<45:18> [b2BlockAllocator.h <45:18 45:18>]
LOCAL_SYMBOL: b2BlockAllocator.h<45:27> [b2BlockAllocator.h <45:27 45:30>]
LOCAL_SYMBOL: b2Body.h<129:1> [b2Body.h <129:1 129:1>]
LOCAL_SYMBOL: b2Body.h<129:1> [b2Body.h <473:1 473:1>]
LOCAL_SYMBOL: b2Body.h<138:47> [b2Body.h <138:47 138:49>]
LOCAL_SYMBOL: b2Body.h<147:42> [b2Body.h <147:42 147:46>]
LOCAL_SYMBOL: b2Body.h<147:57> [b2Body.h <147:57 147:63>]
LOCAL_SYMBOL: b2Body.h<156:33> [b2Body.h <156:33 156:39>]
LOCAL_SYMBOL: b2Body.h<163:34> [b2Body.h <163:34 163:41>]
LOCAL_SYMBOL: b2Body.h<163:52> [b2Body.h <163:52 163:56>]
LOCAL_SYMBOL: b2Body.h<185:39> [b2Body.h <185:39 185:39>]
LOCAL_SYMBOL: b2Body.h<193:34> [b2Body.h <193:34 193:38>]
LOCAL_SYMBOL: b2Body.h<205:32> [b2Body.h <205:32 205:36>]
LOCAL_SYMBOL: b2Body.h<205:53> [b2Body.h <205:53 205:57>]
LOCAL_SYMBOL: b2Body.h<205:65> [b2Body.h <205:65 205:68>]
LOCAL_SYMBOL: b2Body.h<210:40> [b2Body.h <210:40 210:44>]
LOCAL_SYMBOL: b2Body.h<210:52> [b2Body.h <210:52 210:55>]
LOCAL_SYMBOL: b2Body.h<216:27> [b2Body.h <216:27 216:32>]
LOCAL_SYMBOL: b2Body.h<216:40> [b2Body.h <216:40 216:43>]
LOCAL_SYMBOL: b2Body.h<224:40> [b2Body.h <224:40 224:46>]
LOCAL_SYMBOL: b2Body.h<224:63> [b2Body.h <224:63 224:67>]
LOCAL_SYMBOL: b2Body.h<224:75> [b2Body.h <224:75 224:78>]
LOCAL_SYMBOL: b2Body.h<229:48> [b2Body.h <229:48 229:54>]
LOCAL_SYMBOL: b2Body.h<229:62> [b2Body.h <229:62 229:65>]
LOCAL_SYMBOL: b2Body.h<234:35> [b2Body.h <234:35 234:41>]
LOCAL_SYMBOL: b2Body.h<234:49> [b2Body.h <234:49 234:52>]
LOCAL_SYMBOL: b2Body.h<246:31> [b2Body.h <246:31 246:34>]
LOCAL_SYMBOL: b2Body.h<253:37> [b2Body.h <253:37 253:40>]
LOCAL_SYMBOL: b2Body.h<263:37> [b2Body.h <263:37 263:46>]
LOCAL_SYMBOL: b2Body.h<268:38> [b2Body.h <268:38 268:48>]
LOCAL_SYMBOL: b2Body.h<273:37> [b2Body.h <273:37 273:46>]
LOCAL_SYMBOL: b2Body.h<278:38> [b2Body.h <278:38 278:48>]
LOCAL_SYMBOL: b2Body.h<283:55> [b2Body.h <283:55 283:64>]
LOCAL_SYMBOL: b2Body.h<288:55> [b2Body.h <288:55 288:64>]
LOCAL_SYMBOL: b2Body.h<294:32> [b2Body.h <294:32 294:44>]
LOCAL_SYMBOL: b2Body.h<300:33> [b2Body.h <300:33 300:46>]
LOCAL_SYMBOL: b2Body.h<306:31> [b2Body.h <306:31 306:35>]
LOCAL_SYMBOL: b2Body.h<309:26> [b2Body.h <309:26 309:29>]
LOCAL_SYMBOL: b2Body.h<315:22> [b2Body.h <315:22 315:25>]
LOCAL_SYMBOL: b2Body.h<322:31> [b2Body.h <322:31 322:34>]
LOCAL_SYMBOL: b2Body.h<330:21> [b2Body.h <330:21 330:24>]
LOCAL_SYMBOL: b2Body.h<349:22> [b2Body.h <349:22 349:25>]
LOCAL_SYMBOL: b2Body.h<356:29> [b2Body.h <356:29 356:32>]
LOCAL_SYMBOL: b2Body.h<383:25> [b2Body.h <383:25 383:28>]
LOCAL_SYMBOL: b2Body.h<40:1> [b2Body.h <40:1 40:1>]
LOCAL_SYMBOL: b2Body.h<40:1> [b2Body.h <47:1 47:1>]
LOCAL_SYMBOL: b2Body.h<414:2> [b2Body.h <414:2 414:2>]
LOCAL_SYMBOL: b2Body.h<414:2> [b2Body.h <422:2 422:2>]
LOCAL_SYMBOL: b2Body.h<424:26> [b2Body.h <424:26 424:27>]
LOCAL_SYMBOL: b2Body.h<424:39> [b2Body.h <424:39 424:43>]
LOCAL_SYMBOL: b2Body.h<432:35> [b2Body.h <432:35 432:39>]
LOCAL_SYMBOL: b2Body.h<434:23> [b2Body.h <434:23 434:23>]
LOCAL_SYMBOL: b2Body.h<476:1> [b2Body.h <476:1 476:1>]
LOCAL_SYMBOL: b2Body.h<476:1> [b2Body.h <478:1 478:1>]
LOCAL_SYMBOL: b2Body.h<481:1> [b2Body.h <481:1 481:1>]
LOCAL_SYMBOL: b2Body.h<481:1> [b2Body.h <483:1 483:1>]
LOCAL_SYMBOL: b2Body.h<486:1> [b2Body.h <486:1 486:1>]
LOCAL_SYMBOL: b2Body.h<486:1> [b2Body.h <488:1 488:1>]
LOCAL_SYMBOL: b2Body.h<491:1> [b2Body.h <491:1 491:1>]
LOCAL_SYMBOL: b2Body.h<491:1> [b2Body.h <493:1 493:1>]
LOCAL_SYMBOL: b2Body.h<496:1> [b2Body.h <496:1 496:1>]
LOCAL_SYMBOL: b2Body.h<496:1> [b2Body.h <498:1 498:1>]
LOCAL_SYMBOL: b2Body.h<501:1> [b2Body.h <501:1 501:1>]
LOCAL_SYMBOL: b2Body.h<501:1> [b2Body.h <503:1 503:1>]
LOCAL_SYMBOL: b2Body.h<505:53> [b2Body.h <505:53 505:53>]
LOCAL_SYMBOL: b2Body.h<505:53> [b2Body.h <512:12 512:12>]
LOCAL_SYMBOL: b2Body.h<505:53> [b2Body.h <512:14 512:14>]
LOCAL_SYMBOL: b2Body.h<505:53> [b2Body.h <517:21 517:21>]
LOCAL_SYMBOL: b2Body.h<506:1> [b2Body.h <506:1 506:1>]
LOCAL_SYMBOL: b2Body.h<506:1> [b2Body.h <518:1 518:1>]
LOCAL_SYMBOL: b2Body.h<508:2> [b2Body.h <508:2 508:2>]
LOCAL_SYMBOL: b2Body.h<508:2> [b2Body.h <510:2 510:2>]
LOCAL_SYMBOL: b2Body.h<513:2> [b2Body.h <513:2 513:2>]
LOCAL_SYMBOL: b2Body.h<513:2> [b2Body.h <515:2 515:2>]
LOCAL_SYMBOL: b2Body.h<521:1> [b2Body.h <521:1 521:1>]
LOCAL_SYMBOL: b2Body.h<521:1> [b2Body.h <523:1 523:1>]
LOCAL_SYMBOL: b2Body.h<525:48> [b2Body.h <525:48 525:48>]
LOCAL_SYMBOL: b2Body.h<525:48> [b2Body.h <532:6 532:6>]
LOCAL_SYMBOL: b2Body.h<525:48> [b2Body.h <532:10 532:10>]
LOCAL_SYMBOL: b2Body.h<525:48> [b2Body.h <537:22 537:22>]
LOCAL_SYMBOL: b2Body.h<526:1> [b2Body.h <526:1 526:1>]
LOCAL_SYMBOL: b2Body.h<526:1> [b2Body.h <538:1 538:1>]
LOCAL_SYMBOL: b2Body.h<528:2> [b2Body.h <528:2 528:2>]
LOCAL_SYMBOL: b2Body.h<528:2> [b2Body.h <530:2 530:2>]
LOCAL_SYMBOL: b2Body.h<52:1> [b2Body.h <52:1 52:1>]
LOCAL_SYMBOL: b2Body.h<52:1> [b2Body.h <125:1 125:1>]
LOCAL_SYMBOL: b2Body.h<533:2> [b2Body.h <533:2 533:2>]
LOCAL_SYMBOL: b2Body.h<533:2> [b2Body.h <535:2 535:2>]
LOCAL_SYMBOL: b2Body.h<541:1> [b2Body.h <541:1 541:1>]
LOCAL_SYMBOL: b2Body.h<541:1> [b2Body.h <543:1 543:1>]
LOCAL_SYMBOL: b2Body.h<546:1> [b2Body.h <546:1 546:1>]
LOCAL_SYMBOL: b2Body.h<546:1> [b2Body.h <548:1 548:1>]
LOCAL_SYMBOL: b2Body.h<551:1> [b2Body.h <551:1 551:1>]
LOCAL_SYMBOL: b2Body.h<551:1> [b2Body.h <553:1 553:1>]
LOCAL_SYMBOL: b2Body.h<555:45> [b2Body.h <555:45 555:48>]
LOCAL_SYMBOL: b2Body.h<555:45> [b2Body.h <557:2 557:5>]
LOCAL_SYMBOL: b2Body.h<555:45> [b2Body.h <558:2 558:5>]
LOCAL_SYMBOL: b2Body.h<555:45> [b2Body.h <559:2 559:5>]
LOCAL_SYMBOL: b2Body.h<556:1> [b2Body.h <556:1 556:1>]
LOCAL_SYMBOL: b2Body.h<556:1> [b2Body.h <560:1 560:1>]
LOCAL_SYMBOL: b2Body.h<55:2> [b2Body.h <55:2 55:2>]
LOCAL_SYMBOL: b2Body.h<55:2> [b2Body.h <70:2 70:2>]
LOCAL_SYMBOL: b2Body.h<562:51> [b2Body.h <562:51 562:60>]
LOCAL_SYMBOL: b2Body.h<562:51> [b2Body.h <564:21 564:30>]
LOCAL_SYMBOL: b2Body.h<563:1> [b2Body.h <563:1 563:1>]
LOCAL_SYMBOL: b2Body.h<563:1> [b2Body.h <565:1 565:1>]
LOCAL_SYMBOL: b2Body.h<567:52> [b2Body.h <567:52 567:62>]
LOCAL_SYMBOL: b2Body.h<567:52> [b2Body.h <569:23 569:33>]
LOCAL_SYMBOL: b2Body.h<568:1> [b2Body.h <568:1 568:1>]
LOCAL_SYMBOL: b2Body.h<568:1> [b2Body.h <570:1 570:1>]
LOCAL_SYMBOL: b2Body.h<572:51> [b2Body.h <572:51 572:60>]
LOCAL_SYMBOL: b2Body.h<572:51> [b2Body.h <574:22 574:31>]
LOCAL_SYMBOL: b2Body.h<573:1> [b2Body.h <573:1 573:1>]
LOCAL_SYMBOL: b2Body.h<573:1> [b2Body.h <575:1 575:1>]
LOCAL_SYMBOL: b2Body.h<577:52> [b2Body.h <577:52 577:62>]
LOCAL_SYMBOL: b2Body.h<577:52> [b2Body.h <579:24 579:34>]
LOCAL_SYMBOL: b2Body.h<578:1> [b2Body.h <578:1 578:1>]
LOCAL_SYMBOL: b2Body.h<578:1> [b2Body.h <580:1 580:1>]
LOCAL_SYMBOL: b2Body.h<582:69> [b2Body.h <582:69 582:78>]
LOCAL_SYMBOL: b2Body.h<582:69> [b2Body.h <584:55 584:64>]
LOCAL_SYMBOL: b2Body.h<583:1> [b2Body.h <583:1 583:1>]
LOCAL_SYMBOL: b2Body.h<583:1> [b2Body.h <585:1 585:1>]
LOCAL_SYMBOL: b2Body.h<587:69> [b2Body.h <587:69 587:78>]
LOCAL_SYMBOL: b2Body.h<587:69> [b2Body.h <589:55 589:64>]
LOCAL_SYMBOL: b2Body.h<588:1> [b2Body.h <588:1 588:1>]
LOCAL_SYMBOL: b2Body.h<588:1> [b2Body.h <590:1 590:1>]
LOCAL_SYMBOL: b2Body.h<593:1> [b2Body.h <593:1 593:1>]
LOCAL_SYMBOL: b2Body.h<593:1> [b2Body.h <595:1 595:1>]
LOCAL_SYMBOL: b2Body.h<597:46> [b2Body.h <597:46 597:58>]
LOCAL_SYMBOL: b2Body.h<597:46> [b2Body.h <599:20 599:32>]
LOCAL_SYMBOL: b2Body.h<598:1> [b2Body.h <598:1 598:1>]
LOCAL_SYMBOL: b2Body.h<598:1> [b2Body.h <600:1 600:1>]
LOCAL_SYMBOL: b2Body.h<603:1> [b2Body.h <603:1 603:1>]
LOCAL_SYMBOL: b2Body.h<603:1> [b2Body.h <605:1 605:1>]
LOCAL_SYMBOL: b2Body.h<607:47> [b2Body.h <607:47 607:60>]
LOCAL_SYMBOL: b2Body.h<607:47> [b2Body.h <609:21 609:34>]
LOCAL_SYMBOL: b2Body.h<608:1> [b2Body.h <608:1 608:1>]
LOCAL_SYMBOL: b2Body.h<608:1> [b2Body.h <610:1 610:1>]
LOCAL_SYMBOL: b2Body.h<613:1> [b2Body.h <613:1 613:1>]
LOCAL_SYMBOL: b2Body.h<613:1> [b2Body.h <615:1 615:1>]
LOCAL_SYMBOL: b2Body.h<617:45> [b2Body.h <617:45 617:49>]
LOCAL_SYMBOL: b2Body.h<617:45> [b2Body.h <619:19 619:23>]
LOCAL_SYMBOL: b2Body.h<618:1> [b2Body.h <618:1 618:1>]
LOCAL_SYMBOL: b2Body.h<618:1> [b2Body.h <620:1 620:1>]
LOCAL_SYMBOL: b2Body.h<622:36> [b2Body.h <622:36 622:39>]
LOCAL_SYMBOL: b2Body.h<622:36> [b2Body.h <624:6 624:9>]
LOCAL_SYMBOL: b2Body.h<623:1> [b2Body.h <623:1 623:1>]
LOCAL_SYMBOL: b2Body.h<623:1> [b2Body.h <632:1 632:1>]
LOCAL_SYMBOL: b2Body.h<625:2> [b2Body.h <625:2 625:2>]
LOCAL_SYMBOL: b2Body.h<625:2> [b2Body.h <627:2 627:2>]
LOCAL_SYMBOL: b2Body.h<629:2> [b2Body.h <629:2 629:2>]
LOCAL_SYMBOL: b2Body.h<629:2> [b2Body.h <631:2 631:2>]
LOCAL_SYMBOL: b2Body.h<635:1> [b2Body.h <635:1 635:1>]
LOCAL_SYMBOL: b2Body.h<635:1> [b2Body.h <637:1 637:1>]
LOCAL_SYMBOL: b2Body.h<639:35> [b2Body.h <639:35 639:38>]
LOCAL_SYMBOL: b2Body.h<639:35> [b2Body.h <641:6 641:9>]
LOCAL_SYMBOL: b2Body.h<640:1> [b2Body.h <640:1 640:1>]
LOCAL_SYMBOL: b2Body.h<640:1> [b2Body.h <655:1 655:1>]
LOCAL_SYMBOL: b2Body.h<642:2> [b2Body.h <642:2 642:2>]
LOCAL_SYMBOL: b2Body.h<642:2> [b2Body.h <645:2 645:2>]
LOCAL_SYMBOL: b2Body.h<647:2> [b2Body.h <647:2 647:2>]
LOCAL_SYMBOL: b2Body.h<647:2> [b2Body.h <654:2 654:2>]
LOCAL_SYMBOL: b2Body.h<658:1> [b2Body.h <658:1 658:1>]
LOCAL_SYMBOL: b2Body.h<658:1> [b2Body.h <660:1 660:1>]
LOCAL_SYMBOL: b2Body.h<663:1> [b2Body.h <663:1 663:1>]
LOCAL_SYMBOL: b2Body.h<663:1> [b2Body.h <665:1 665:1>]
LOCAL_SYMBOL: b2Body.h<668:1> [b2Body.h <668:1 668:1>]
LOCAL_SYMBOL: b2Body.h<668:1> [b2Body.h <670:1 670:1>]
LOCAL_SYMBOL: b2Body.h<672:45> [b2Body.h <672:45 672:48>]
LOCAL_SYMBOL: b2Body.h<672:45> [b2Body.h <674:6 674:9>]
LOCAL_SYMBOL: b2Body.h<673:1> [b2Body.h <673:1 673:1>]
LOCAL_SYMBOL: b2Body.h<673:1> [b2Body.h <683:1 683:1>]
LOCAL_SYMBOL: b2Body.h<675:2> [b2Body.h <675:2 675:2>]
LOCAL_SYMBOL: b2Body.h<675:2> [b2Body.h <677:2 677:2>]
LOCAL_SYMBOL: b2Body.h<679:2> [b2Body.h <679:2 679:2>]
LOCAL_SYMBOL: b2Body.h<679:2> [b2Body.h <682:2 682:2>]
LOCAL_SYMBOL: b2Body.h<686:1> [b2Body.h <686:1 686:1>]
LOCAL_SYMBOL: b2Body.h<686:1> [b2Body.h <688:1 688:1>]
LOCAL_SYMBOL: b2Body.h<691:1> [b2Body.h <691:1 691:1>]
LOCAL_SYMBOL: b2Body.h<691:1> [b2Body.h <693:1 693:1>]
LOCAL_SYMBOL: b2Body.h<696:1> [b2Body.h <696:1 696:1>]
LOCAL_SYMBOL: b2Body.h<696:1> [b2Body.h <698:1 698:1>]
LOCAL_SYMBOL: b2Body.h<701:1> [b2Body.h <701:1 701:1>]
LOCAL_SYMBOL: b2Body.h<701:1> [b2Body.h <703:1 703:1>]
LOCAL_SYMBOL: b2Body.h<706:1> [b2Body.h <706:1 706:1>]
LOCAL_SYMBOL: b2Body.h<706:1> [b2Body.h <708:1 708:1>]
LOCAL_SYMBOL: b2Body.h<711:1> [b2Body.h <711:1 711:1>]
LOCAL_SYMBOL: b2Body.h<711:1> [b2Body.h <713:1 713:1>]
LOCAL_SYMBOL: b2Body.h<716:1> [b2Body.h <716:1 716:1>]
LOCAL_SYMBOL: b2Body.h<716:1> [b2Body.h <718:1 718:1>]
LOCAL_SYMBOL: b2Body.h<721:1> [b2Body.h <721:1 721:1>]
LOCAL_SYMBOL: b2Body.h<721:1> [b2Body.h <723:1 723:1>]
LOCAL_SYMBOL: b2Body.h<726:1> [b2Body.h <726:1 726:1>]
LOCAL_SYMBOL: b2Body.h<726:1> [b2Body.h <728:1 728:1>]
LOCAL_SYMBOL: b2Body.h<730:39> [b2Body.h <730:39 730:42>]
LOCAL_SYMBOL: b2Body.h<730:39> [b2Body.h <732:15 732:18>]
LOCAL_SYMBOL: b2Body.h<731:1> [b2Body.h <731:1 731:1>]
LOCAL_SYMBOL: b2Body.h<731:1> [b2Body.h <733:1 733:1>]
LOCAL_SYMBOL: b2Body.h<736:1> [b2Body.h <736:1 736:1>]
LOCAL_SYMBOL: b2Body.h<736:1> [b2Body.h <738:1 738:1>]
LOCAL_SYMBOL: b2Body.h<740:46> [b2Body.h <740:46 740:50>]
LOCAL_SYMBOL: b2Body.h<740:46> [b2Body.h <755:14 755:18>]
LOCAL_SYMBOL: b2Body.h<740:46> [b2Body.h <756:42 756:46>]
LOCAL_SYMBOL: b2Body.h<740:67> [b2Body.h <740:67 740:71>]
LOCAL_SYMBOL: b2Body.h<740:67> [b2Body.h <756:23 756:27>]
LOCAL_SYMBOL: b2Body.h<740:79> [b2Body.h <740:79 740:82>]
LOCAL_SYMBOL: b2Body.h<740:79> [b2Body.h <747:6 747:9>]
LOCAL_SYMBOL: b2Body.h<741:1> [b2Body.h <741:1 741:1>]
LOCAL_SYMBOL: b2Body.h<741:1> [b2Body.h <758:1 758:1>]
LOCAL_SYMBOL: b2Body.h<743:2> [b2Body.h <743:2 743:2>]
LOCAL_SYMBOL: b2Body.h<743:2> [b2Body.h <745:2 745:2>]
LOCAL_SYMBOL: b2Body.h<748:2> [b2Body.h <748:2 748:2>]
LOCAL_SYMBOL: b2Body.h<748:2> [b2Body.h <750:2 750:2>]
LOCAL_SYMBOL: b2Body.h<754:2> [b2Body.h <754:2 754:2>]
LOCAL_SYMBOL: b2Body.h<754:2> [b2Body.h <757:2 757:2>]
LOCAL_SYMBOL: b2Body.h<760:54> [b2Body.h <760:54 760:58>]
LOCAL_SYMBOL: b2Body.h<760:54> [b2Body.h <775:14 775:18>]
LOCAL_SYMBOL: b2Body.h<760:66> [b2Body.h <760:66 760:69>]
LOCAL_SYMBOL: b2Body.h<760:66> [b2Body.h <767:6 767:9>]
LOCAL_SYMBOL: b2Body.h<761:1> [b2Body.h <761:1 761:1>]
LOCAL_SYMBOL: b2Body.h<761:1> [b2Body.h <777:1 777:1>]
LOCAL_SYMBOL: b2Body.h<763:2> [b2Body.h <763:2 763:2>]
LOCAL_SYMBOL: b2Body.h<763:2> [b2Body.h <765:2 765:2>]
LOCAL_SYMBOL: b2Body.h<768:2> [b2Body.h <768:2 768:2>]
LOCAL_SYMBOL: b2Body.h<768:2> [b2Body.h <770:2 770:2>]
LOCAL_SYMBOL: b2Body.h<774:2> [b2Body.h <774:2 774:2>]
LOCAL_SYMBOL: b2Body.h<774:2> [b2Body.h <776:2 776:2>]
LOCAL_SYMBOL: b2Body.h<779:41> [b2Body.h <779:41 779:46>]
LOCAL_SYMBOL: b2Body.h<779:41> [b2Body.h <794:15 794:20>]
LOCAL_SYMBOL: b2Body.h<779:54> [b2Body.h <779:54 779:57>]
LOCAL_SYMBOL: b2Body.h<779:54> [b2Body.h <786:6 786:9>]
LOCAL_SYMBOL: b2Body.h<780:1> [b2Body.h <780:1 780:1>]
LOCAL_SYMBOL: b2Body.h<780:1> [b2Body.h <796:1 796:1>]
LOCAL_SYMBOL: b2Body.h<782:2> [b2Body.h <782:2 782:2>]
LOCAL_SYMBOL: b2Body.h<782:2> [b2Body.h <784:2 784:2>]
LOCAL_SYMBOL: b2Body.h<787:2> [b2Body.h <787:2 787:2>]
LOCAL_SYMBOL: b2Body.h<787:2> [b2Body.h <789:2 789:2>]
LOCAL_SYMBOL: b2Body.h<793:2> [b2Body.h <793:2 793:2>]
LOCAL_SYMBOL: b2Body.h<793:2> [b2Body.h <795:2 795:2>]
LOCAL_SYMBOL: b2Body.h<798:54> [b2Body.h <798:54 798:60>]
LOCAL_SYMBOL: b2Body.h<798:54> [b2Body.h <813:35 813:41>]
LOCAL_SYMBOL: b2Body.h<798:54> [b2Body.h <814:60 814:66>]
LOCAL_SYMBOL: b2Body.h<798:77> [b2Body.h <798:77 798:81>]
LOCAL_SYMBOL: b2Body.h<798:77> [b2Body.h <814:41 814:45>]
LOCAL_SYMBOL: b2Body.h<798:89> [b2Body.h <798:89 798:92>]
LOCAL_SYMBOL: b2Body.h<798:89> [b2Body.h <805:6 805:9>]
LOCAL_SYMBOL: b2Body.h<799:1> [b2Body.h <799:1 799:1>]
LOCAL_SYMBOL: b2Body.h<799:1> [b2Body.h <816:1 816:1>]
LOCAL_SYMBOL: b2Body.h<801:2> [b2Body.h <801:2 801:2>]
LOCAL_SYMBOL: b2Body.h<801:2> [b2Body.h <803:2 803:2>]
LOCAL_SYMBOL: b2Body.h<806:2> [b2Body.h <806:2 806:2>]
LOCAL_SYMBOL: b2Body.h<806:2> [b2Body.h <808:2 808:2>]
LOCAL_SYMBOL: b2Body.h<812:2> [b2Body.h <812:2 812:2>]
LOCAL_SYMBOL: b2Body.h<812:2> [b2Body.h <815:2 815:2>]
LOCAL_SYMBOL: b2Body.h<818:62> [b2Body.h <818:62 818:68>]
LOCAL_SYMBOL: b2Body.h<818:62> [b2Body.h <833:35 833:41>]
LOCAL_SYMBOL: b2Body.h<818:76> [b2Body.h <818:76 818:79>]
LOCAL_SYMBOL: b2Body.h<818:76> [b2Body.h <825:6 825:9>]
LOCAL_SYMBOL: b2Body.h<819:1> [b2Body.h <819:1 819:1>]
LOCAL_SYMBOL: b2Body.h<819:1> [b2Body.h <835:1 835:1>]
LOCAL_SYMBOL: b2Body.h<821:2> [b2Body.h <821:2 821:2>]
LOCAL_SYMBOL: b2Body.h<821:2> [b2Body.h <823:2 823:2>]
LOCAL_SYMBOL: b2Body.h<826:2> [b2Body.h <826:2 826:2>]
LOCAL_SYMBOL: b2Body.h<826:2> [b2Body.h <828:2 828:2>]
LOCAL_SYMBOL: b2Body.h<832:2> [b2Body.h <832:2 832:2>]
LOCAL_SYMBOL: b2Body.h<832:2> [b2Body.h <834:2 834:2>]
LOCAL_SYMBOL: b2Body.h<837:49> [b2Body.h <837:49 837:55>]
LOCAL_SYMBOL: b2Body.h<837:49> [b2Body.h <852:33 852:39>]
LOCAL_SYMBOL: b2Body.h<837:63> [b2Body.h <837:63 837:66>]
LOCAL_SYMBOL: b2Body.h<837:63> [b2Body.h <844:6 844:9>]
LOCAL_SYMBOL: b2Body.h<838:1> [b2Body.h <838:1 838:1>]
LOCAL_SYMBOL: b2Body.h<838:1> [b2Body.h <854:1 854:1>]
LOCAL_SYMBOL: b2Body.h<840:2> [b2Body.h <840:2 840:2>]
LOCAL_SYMBOL: b2Body.h<840:2> [b2Body.h <842:2 842:2>]
LOCAL_SYMBOL: b2Body.h<845:2> [b2Body.h <845:2 845:2>]
LOCAL_SYMBOL: b2Body.h<845:2> [b2Body.h <847:2 847:2>]
LOCAL_SYMBOL: b2Body.h<851:2> [b2Body.h <851:2 851:2>]
LOCAL_SYMBOL: b2Body.h<851:2> [b2Body.h <853:2 853:2>]
LOCAL_SYMBOL: b2Body.h<857:1> [b2Body.h <857:1 857:1>]
LOCAL_SYMBOL: b2Body.h<857:1> [b2Body.h <860:1 860:1>]
LOCAL_SYMBOL: b2Body.h<862:37> [b2Body.h <862:37 862:41>]
LOCAL_SYMBOL: b2Body.h<862:37> [b2Body.h <865:18 865:22>]
LOCAL_SYMBOL: b2Body.h<863:1> [b2Body.h <863:1 863:1>]
LOCAL_SYMBOL: b2Body.h<863:1> [b2Body.h <870:1 870:1>]
LOCAL_SYMBOL: b2Body.h<873:1> [b2Body.h <873:1 873:1>]
LOCAL_SYMBOL: b2Body.h<873:1> [b2Body.h <875:1 875:1>]
LOCAL_SYMBOL: b2Body.h<878:1> [b2Body.h <878:1 878:1>]
LOCAL_SYMBOL: b2Body.h<878:1> [b2Body.h <880:1 880:1>]
LOCAL_SYMBOL: b2BroadPhase.h<105:33> [b2BroadPhase.h <105:33 105:41>]
LOCAL_SYMBOL: b2BroadPhase.h<111:24> [b2BroadPhase.h <111:24 111:30>]
LOCAL_SYMBOL: b2BroadPhase.h<112:26> [b2BroadPhase.h <112:26 112:32>]
LOCAL_SYMBOL: b2BroadPhase.h<114:27> [b2BroadPhase.h <114:27 114:33>]
LOCAL_SYMBOL: b2BroadPhase.h<132:42> [b2BroadPhase.h <132:42 132:46>]
LOCAL_SYMBOL: b2BroadPhase.h<132:42> [b2BroadPhase.h <134:6 134:10>]
LOCAL_SYMBOL: b2BroadPhase.h<132:42> [b2BroadPhase.h <139:6 139:10>]
LOCAL_SYMBOL: b2BroadPhase.h<132:42> [b2BroadPhase.h <141:10 141:14>]
LOCAL_SYMBOL: b2BroadPhase.h<132:63> [b2BroadPhase.h <132:63 132:67>]
LOCAL_SYMBOL: b2BroadPhase.h<132:63> [b2BroadPhase.h <134:23 134:27>]
LOCAL_SYMBOL: b2BroadPhase.h<132:63> [b2BroadPhase.h <139:24 139:28>]
LOCAL_SYMBOL: b2BroadPhase.h<132:63> [b2BroadPhase.h <141:27 141:31>]
LOCAL_SYMBOL: b2BroadPhase.h<133:1> [b2BroadPhase.h <133:1 133:1>]
LOCAL_SYMBOL: b2BroadPhase.h<133:1> [b2BroadPhase.h <145:1 145:1>]
LOCAL_SYMBOL: b2BroadPhase.h<135:2> [b2BroadPhase.h <135:2 135:2>]
LOCAL_SYMBOL: b2BroadPhase.h<135:2> [b2BroadPhase.h <137:2 137:2>]
LOCAL_SYMBOL: b2BroadPhase.h<140:2> [b2BroadPhase.h <140:2 140:2>]
LOCAL_SYMBOL: b2BroadPhase.h<140:2> [b2BroadPhase.h <142:2 142:2>]
LOCAL_SYMBOL: b2BroadPhase.h<147:46> [b2BroadPhase.h <147:46 147:52>]
LOCAL_SYMBOL: b2BroadPhase.h<147:46> [b2BroadPhase.h <149:28 149:34>]
LOCAL_SYMBOL: b2BroadPhase.h<148:1> [b2BroadPhase.h <148:1 148:1>]
LOCAL_SYMBOL: b2BroadPhase.h<148:1> [b2BroadPhase.h <150:1 150:1>]
LOCAL_SYMBOL: b2BroadPhase.h<152:45> [b2BroadPhase.h <152:45 152:52>]
LOCAL_SYMBOL: b2BroadPhase.h<152:45> [b2BroadPhase.h <154:42 154:49>]
LOCAL_SYMBOL: b2BroadPhase.h<152:61> [b2BroadPhase.h <152:61 152:68>]
LOCAL_SYMBOL: b2BroadPhase.h<152:61> [b2BroadPhase.h <155:42 155:49>]
LOCAL_SYMBOL: b2BroadPhase.h<153:1> [b2BroadPhase.h <153:1 153:1>]
LOCAL_SYMBOL: b2BroadPhase.h<153:1> [b2BroadPhase.h <157:1 157:1>]
LOCAL_SYMBOL: b2BroadPhase.h<154:16> [b2BroadPhase.h <154:16 154:20>]
LOCAL_SYMBOL: b2BroadPhase.h<154:16> [b2BroadPhase.h <156:23 156:27>]
LOCAL_SYMBOL: b2BroadPhase.h<155:16> [b2BroadPhase.h <155:16 155:20>]
LOCAL_SYMBOL: b2BroadPhase.h<155:16> [b2BroadPhase.h <156:30 156:34>]
LOCAL_SYMBOL: b2BroadPhase.h<159:53> [b2BroadPhase.h <159:53 159:59>]
LOCAL_SYMBOL: b2BroadPhase.h<159:53> [b2BroadPhase.h <161:27 161:33>]
LOCAL_SYMBOL: b2BroadPhase.h<160:1> [b2BroadPhase.h <160:1 160:1>]
LOCAL_SYMBOL: b2BroadPhase.h<160:1> [b2BroadPhase.h <162:1 162:1>]
LOCAL_SYMBOL: b2BroadPhase.h<165:1> [b2BroadPhase.h <165:1 165:1>]
LOCAL_SYMBOL: b2BroadPhase.h<165:1> [b2BroadPhase.h <167:1 167:1>]
LOCAL_SYMBOL: b2BroadPhase.h<170:1> [b2BroadPhase.h <170:1 170:1>]
LOCAL_SYMBOL: b2BroadPhase.h<170:1> [b2BroadPhase.h <172:1 172:1>]
LOCAL_SYMBOL: b2BroadPhase.h<175:1> [b2BroadPhase.h <175:1 175:1>]
LOCAL_SYMBOL: b2BroadPhase.h<175:1> [b2BroadPhase.h <177:1 177:1>]
LOCAL_SYMBOL: b2BroadPhase.h<180:1> [b2BroadPhase.h <180:1 180:1>]
LOCAL_SYMBOL: b2BroadPhase.h<180:1> [b2BroadPhase.h <182:1 182:1>]
LOCAL_SYMBOL: b2BroadPhase.h<184:20> [b2BroadPhase.h <184:20 184:20>]
LOCAL_SYMBOL: b2BroadPhase.h<184:20> [b2BroadPhase.h <185:32 185:32>]
LOCAL_SYMBOL: b2BroadPhase.h<185:35> [b2BroadPhase.h <185:35 185:42>]
LOCAL_SYMBOL: b2BroadPhase.h<185:35> [b2BroadPhase.h <221:3 221:10>]
LOCAL_SYMBOL: b2BroadPhase.h<186:1> [b2BroadPhase.h <186:1 186:1>]
LOCAL_SYMBOL: b2BroadPhase.h<186:1> [b2BroadPhase.h <238:1 238:1>]
LOCAL_SYMBOL: b2BroadPhase.h<191:13> [b2BroadPhase.h <191:13 191:13>]
LOCAL_SYMBOL: b2BroadPhase.h<191:13> [b2BroadPhase.h <191:20 191:20>]
LOCAL_SYMBOL: b2BroadPhase.h<191:13> [b2BroadPhase.h <191:39 191:39>]
LOCAL_SYMBOL: b2BroadPhase.h<191:13> [b2BroadPhase.h <193:33 193:33>]
LOCAL_SYMBOL: b2BroadPhase.h<192:2> [b2BroadPhase.h <192:2 192:2>]
LOCAL_SYMBOL: b2BroadPhase.h<192:2> [b2BroadPhase.h <205:2 205:2>]
LOCAL_SYMBOL: b2BroadPhase.h<195:3> [b2BroadPhase.h <195:3 195:3>]
LOCAL_SYMBOL: b2BroadPhase.h<195:3> [b2BroadPhase.h <197:3 197:3>]
LOCAL_SYMBOL: b2BroadPhase.h<201:17> [b2BroadPhase.h <201:17 201:23>]
LOCAL_SYMBOL: b2BroadPhase.h<201:17> [b2BroadPhase.h <204:22 204:28>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <214:8 214:8>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <215:9 215:9>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <217:40 217:40>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <222:5 222:5>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <225:10 225:10>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <227:34 227:34>]
LOCAL_SYMBOL: b2BroadPhase.h<214:8> [b2BroadPhase.h <232:6 232:6>]
LOCAL_SYMBOL: b2BroadPhase.h<216:2> [b2BroadPhase.h <216:2 216:2>]
LOCAL_SYMBOL: b2BroadPhase.h<216:2> [b2BroadPhase.h <234:2 234:2>]
LOCAL_SYMBOL: b2BroadPhase.h<217:11> [b2BroadPhase.h <217:11 217:21>]
LOCAL_SYMBOL: b2BroadPhase.h<217:11> [b2BroadPhase.h <218:40 218:50>]
LOCAL_SYMBOL: b2BroadPhase.h<217:11> [b2BroadPhase.h <219:40 219:50>]
LOCAL_SYMBOL: b2BroadPhase.h<217:11> [b2BroadPhase.h <228:26 228:36>]
LOCAL_SYMBOL: b2BroadPhase.h<217:11> [b2BroadPhase.h <228:69 228:79>]
LOCAL_SYMBOL: b2BroadPhase.h<218:9> [b2BroadPhase.h <218:9 218:17>]
LOCAL_SYMBOL: b2BroadPhase.h<218:9> [b2BroadPhase.h <221:21 221:29>]
LOCAL_SYMBOL: b2BroadPhase.h<219:9> [b2BroadPhase.h <219:9 219:17>]
LOCAL_SYMBOL: b2BroadPhase.h<219:9> [b2BroadPhase.h <221:32 221:40>]
LOCAL_SYMBOL: b2BroadPhase.h<226:3> [b2BroadPhase.h <226:3 226:3>]
LOCAL_SYMBOL: b2BroadPhase.h<226:3> [b2BroadPhase.h <233:3 233:3>]
LOCAL_SYMBOL: b2BroadPhase.h<227:12> [b2BroadPhase.h <227:12 227:15>]
LOCAL_SYMBOL: b2BroadPhase.h<227:12> [b2BroadPhase.h <228:8 228:11>]
LOCAL_SYMBOL: b2BroadPhase.h<227:12> [b2BroadPhase.h <228:51 228:54>]
LOCAL_SYMBOL: b2BroadPhase.h<229:4> [b2BroadPhase.h <229:4 229:4>]
LOCAL_SYMBOL: b2BroadPhase.h<229:4> [b2BroadPhase.h <231:4 231:4>]
LOCAL_SYMBOL: b2BroadPhase.h<240:20> [b2BroadPhase.h <240:20 240:20>]
LOCAL_SYMBOL: b2BroadPhase.h<240:20> [b2BroadPhase.h <241:33 241:33>]
LOCAL_SYMBOL: b2BroadPhase.h<241:36> [b2BroadPhase.h <241:36 241:43>]
LOCAL_SYMBOL: b2BroadPhase.h<241:36> [b2BroadPhase.h <243:15 243:22>]
LOCAL_SYMBOL: b2BroadPhase.h<241:60> [b2BroadPhase.h <241:60 241:63>]
LOCAL_SYMBOL: b2BroadPhase.h<241:60> [b2BroadPhase.h <243:25 243:28>]
LOCAL_SYMBOL: b2BroadPhase.h<242:1> [b2BroadPhase.h <242:1 242:1>]
LOCAL_SYMBOL: b2BroadPhase.h<242:1> [b2BroadPhase.h <244:1 244:1>]
LOCAL_SYMBOL: b2BroadPhase.h<246:20> [b2BroadPhase.h <246:20 246:20>]
LOCAL_SYMBOL: b2BroadPhase.h<246:20> [b2BroadPhase.h <247:35 247:35>]
LOCAL_SYMBOL: b2BroadPhase.h<247:38> [b2BroadPhase.h <247:38 247:45>]
LOCAL_SYMBOL: b2BroadPhase.h<247:38> [b2BroadPhase.h <249:17 249:24>]
LOCAL_SYMBOL: b2BroadPhase.h<247:70> [b2BroadPhase.h <247:70 247:74>]
LOCAL_SYMBOL: b2BroadPhase.h<247:70> [b2BroadPhase.h <249:27 249:31>]
LOCAL_SYMBOL: b2BroadPhase.h<248:1> [b2BroadPhase.h <248:1 248:1>]
LOCAL_SYMBOL: b2BroadPhase.h<248:1> [b2BroadPhase.h <250:1 250:1>]
LOCAL_SYMBOL: b2BroadPhase.h<252:53> [b2BroadPhase.h <252:53 252:61>]
LOCAL_SYMBOL: b2BroadPhase.h<252:53> [b2BroadPhase.h <254:21 254:29>]
LOCAL_SYMBOL: b2BroadPhase.h<253:1> [b2BroadPhase.h <253:1 253:1>]
LOCAL_SYMBOL: b2BroadPhase.h<253:1> [b2BroadPhase.h <255:1 255:1>]
LOCAL_SYMBOL: b2BroadPhase.h<28:1> [b2BroadPhase.h <28:1 28:1>]
LOCAL_SYMBOL: b2BroadPhase.h<28:1> [b2BroadPhase.h <31:1 31:1>]
LOCAL_SYMBOL: b2BroadPhase.h<37:1> [b2BroadPhase.h <37:1 37:1>]
LOCAL_SYMBOL: b2BroadPhase.h<37:1> [b2BroadPhase.h <129:1 129:1>]
LOCAL_SYMBOL: b2BroadPhase.h<41:2> [b2BroadPhase.h <41:2 41:2>]
LOCAL_SYMBOL: b2BroadPhase.h<41:2> [b2BroadPhase.h <43:2 43:2>]
LOCAL_SYMBOL: b2BroadPhase.h<50:34> [b2BroadPhase.h <50:34 50:37>]
LOCAL_SYMBOL: b2BroadPhase.h<50:46> [b2BroadPhase.h <50:46 50:53>]
LOCAL_SYMBOL: b2BroadPhase.h<53:26> [b2BroadPhase.h <53:26 53:32>]
LOCAL_SYMBOL: b2BroadPhase.h<57:23> [b2BroadPhase.h <57:23 57:29>]
LOCAL_SYMBOL: b2BroadPhase.h<57:46> [b2BroadPhase.h <57:46 57:49>]
LOCAL_SYMBOL: b2BroadPhase.h<57:66> [b2BroadPhase.h <57:66 57:77>]
LOCAL_SYMBOL: b2BroadPhase.h<60:24> [b2BroadPhase.h <60:24 60:30>]
LOCAL_SYMBOL: b2BroadPhase.h<63:33> [b2BroadPhase.h <63:33 63:39>]
LOCAL_SYMBOL: b2BroadPhase.h<66:26> [b2BroadPhase.h <66:26 66:32>]
LOCAL_SYMBOL: b2BroadPhase.h<69:25> [b2BroadPhase.h <69:25 69:32>]
LOCAL_SYMBOL: b2BroadPhase.h<69:41> [b2BroadPhase.h <69:41 69:48>]
LOCAL_SYMBOL: b2BroadPhase.h<75:21> [b2BroadPhase.h <75:21 75:21>]
LOCAL_SYMBOL: b2BroadPhase.h<75:21> [b2BroadPhase.h <76:19 76:19>]
LOCAL_SYMBOL: b2BroadPhase.h<76:22> [b2BroadPhase.h <76:22 76:29>]
LOCAL_SYMBOL: b2BroadPhase.h<80:21> [b2BroadPhase.h <80:21 80:21>]
LOCAL_SYMBOL: b2BroadPhase.h<80:21> [b2BroadPhase.h <81:13 81:13>]
LOCAL_SYMBOL: b2BroadPhase.h<81:16> [b2BroadPhase.h <81:16 81:23>]
LOCAL_SYMBOL: b2BroadPhase.h<81:40> [b2BroadPhase.h <81:40 81:43>]
LOCAL_SYMBOL: b2BroadPhase.h<90:21> [b2BroadPhase.h <90:21 90:21>]
LOCAL_SYMBOL: b2BroadPhase.h<90:21> [b2BroadPhase.h <91:15 91:15>]
LOCAL_SYMBOL: b2BroadPhase.h<91:18> [b2BroadPhase.h <91:18 91:25>]
LOCAL_SYMBOL: b2BroadPhase.h<91:50> [b2BroadPhase.h <91:50 91:54>]
LOCAL_SYMBOL: b2ChainShape.h<33:1> [b2ChainShape.h <33:1 33:1>]
LOCAL_SYMBOL: b2ChainShape.h<33:1> [b2ChainShape.h <93:1 93:1>]
LOCAL_SYMBOL: b2ChainShape.h<46:32> [b2ChainShape.h <46:32 46:39>]
LOCAL_SYMBOL: b2ChainShape.h<46:48> [b2ChainShape.h <46:48 46:52>]
LOCAL_SYMBOL: b2ChainShape.h<51:33> [b2ChainShape.h <51:33 51:40>]
LOCAL_SYMBOL: b2ChainShape.h<51:49> [b2ChainShape.h <51:49 51:53>]
LOCAL_SYMBOL: b2ChainShape.h<55:35> [b2ChainShape.h <55:35 55:44>]
LOCAL_SYMBOL: b2ChainShape.h<59:35> [b2ChainShape.h <59:35 59:44>]
LOCAL_SYMBOL: b2ChainShape.h<62:35> [b2ChainShape.h <62:35 62:43>]
LOCAL_SYMBOL: b2ChainShape.h<68:33> [b2ChainShape.h <68:33 68:36>]
LOCAL_SYMBOL: b2ChainShape.h<68:45> [b2ChainShape.h <68:45 68:49>]
LOCAL_SYMBOL: b2ChainShape.h<72:36> [b2ChainShape.h <72:36 72:44>]
LOCAL_SYMBOL: b2ChainShape.h<72:61> [b2ChainShape.h <72:61 72:61>]
LOCAL_SYMBOL: b2ChainShape.h<75:32> [b2ChainShape.h <75:32 75:37>]
LOCAL_SYMBOL: b2ChainShape.h<75:62> [b2ChainShape.h <75:62 75:66>]
LOCAL_SYMBOL: b2ChainShape.h<76:25> [b2ChainShape.h <76:25 76:33>]
LOCAL_SYMBOL: b2ChainShape.h<76:42> [b2ChainShape.h <76:42 76:51>]
LOCAL_SYMBOL: b2ChainShape.h<79:27> [b2ChainShape.h <79:27 79:30>]
LOCAL_SYMBOL: b2ChainShape.h<79:52> [b2ChainShape.h <79:52 79:60>]
LOCAL_SYMBOL: b2ChainShape.h<79:69> [b2ChainShape.h <79:69 79:78>]
LOCAL_SYMBOL: b2ChainShape.h<83:31> [b2ChainShape.h <83:31 83:38>]
LOCAL_SYMBOL: b2ChainShape.h<83:49> [b2ChainShape.h <83:49 83:55>]
LOCAL_SYMBOL: b2ChainShape.h<96:1> [b2ChainShape.h <96:1 96:1>]
LOCAL_SYMBOL: b2ChainShape.h<96:1> [b2ChainShape.h <103:1 103:1>]
LOCAL_SYMBOL: b2CircleShape.h<26:1> [b2CircleShape.h <26:1 26:1>]
LOCAL_SYMBOL: b2CircleShape.h<26:1> [b2CircleShape.h <51:1 51:1>]
LOCAL_SYMBOL: b2CircleShape.h<31:35> [b2CircleShape.h <31:35 31:43>]
LOCAL_SYMBOL: b2CircleShape.h<37:36> [b2CircleShape.h <37:36 37:44>]
LOCAL_SYMBOL: b2CircleShape.h<37:61> [b2CircleShape.h <37:61 37:61>]
LOCAL_SYMBOL: b2CircleShape.h<40:32> [b2CircleShape.h <40:32 40:37>]
LOCAL_SYMBOL: b2CircleShape.h<40:62> [b2CircleShape.h <40:62 40:66>]
LOCAL_SYMBOL: b2CircleShape.h<41:24> [b2CircleShape.h <41:24 41:32>]
LOCAL_SYMBOL: b2CircleShape.h<41:41> [b2CircleShape.h <41:41 41:50>]
LOCAL_SYMBOL: b2CircleShape.h<44:27> [b2CircleShape.h <44:27 44:30>]
LOCAL_SYMBOL: b2CircleShape.h<44:52> [b2CircleShape.h <44:52 44:60>]
LOCAL_SYMBOL: b2CircleShape.h<44:69> [b2CircleShape.h <44:69 44:78>]
LOCAL_SYMBOL: b2CircleShape.h<47:31> [b2CircleShape.h <47:31 47:38>]
LOCAL_SYMBOL: b2CircleShape.h<47:49> [b2CircleShape.h <47:49 47:55>]
LOCAL_SYMBOL: b2CircleShape.h<54:1> [b2CircleShape.h <54:1 54:1>]
LOCAL_SYMBOL: b2CircleShape.h<54:1> [b2CircleShape.h <58:1 58:1>]
LOCAL_SYMBOL: b2Collision.h<111:1> [b2Collision.h <111:1 111:1>]
LOCAL_SYMBOL: b2Collision.h<111:1> [b2Collision.h <123:1 123:1>]
LOCAL_SYMBOL: b2Collision.h<116:36> [b2Collision.h <116:36 116:43>]
LOCAL_SYMBOL: b2Collision.h<117:25> [b2Collision.h <117:25 117:27>]
LOCAL_SYMBOL: b2Collision.h<117:38> [b2Collision.h <117:38 117:44>]
LOCAL_SYMBOL: b2Collision.h<118:25> [b2Collision.h <118:25 118:27>]
LOCAL_SYMBOL: b2Collision.h<118:38> [b2Collision.h <118:38 118:44>]
LOCAL_SYMBOL: b2Collision.h<127:1> [b2Collision.h <127:1 127:1>]
LOCAL_SYMBOL: b2Collision.h<127:1> [b2Collision.h <132:1 132:1>]
LOCAL_SYMBOL: b2Collision.h<136:36> [b2Collision.h <136:36 136:41>]
LOCAL_SYMBOL: b2Collision.h<136:79> [b2Collision.h <136:79 136:84>]
LOCAL_SYMBOL: b2Collision.h<137:26> [b2Collision.h <137:26 137:34>]
LOCAL_SYMBOL: b2Collision.h<137:55> [b2Collision.h <137:55 137:63>]
LOCAL_SYMBOL: b2Collision.h<141:1> [b2Collision.h <141:1 141:1>]
LOCAL_SYMBOL: b2Collision.h<141:1> [b2Collision.h <144:1 144:1>]
LOCAL_SYMBOL: b2Collision.h<148:1> [b2Collision.h <148:1 148:1>]
LOCAL_SYMBOL: b2Collision.h<148:1> [b2Collision.h <151:1 151:1>]
LOCAL_SYMBOL: b2Collision.h<156:1> [b2Collision.h <156:1 156:1>]
LOCAL_SYMBOL: b2Collision.h<156:1> [b2Collision.h <159:1 159:1>]
LOCAL_SYMBOL: b2Collision.h<163:1> [b2Collision.h <163:1 163:1>]
LOCAL_SYMBOL: b2Collision.h<163:1> [b2Collision.h <216:1 216:1>]
LOCAL_SYMBOL: b2Collision.h<169:2> [b2Collision.h <169:2 169:2>]
LOCAL_SYMBOL: b2Collision.h<169:2> [b2Collision.h <171:2 171:2>]
LOCAL_SYMBOL: b2Collision.h<175:2> [b2Collision.h <175:2 175:2>]
LOCAL_SYMBOL: b2Collision.h<175:2> [b2Collision.h <177:2 177:2>]
LOCAL_SYMBOL: b2Collision.h<181:2> [b2Collision.h <181:2 181:2>]
LOCAL_SYMBOL: b2Collision.h<181:2> [b2Collision.h <185:2 185:2>]
LOCAL_SYMBOL: b2Collision.h<182:11> [b2Collision.h <182:11 182:12>]
LOCAL_SYMBOL: b2Collision.h<182:11> [b2Collision.h <184:18 184:19>]
LOCAL_SYMBOL: b2Collision.h<183:11> [b2Collision.h <183:11 183:12>]
LOCAL_SYMBOL: b2Collision.h<183:11> [b2Collision.h <184:23 184:24>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <188:29 188:32>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <190:34 190:37>]
LOCAL_SYMBOL: b2Collision.h<188:29> [b2Collision.h <191:34 191:37>]
LOCAL_SYMBOL: b2Collision.h<189:2> [b2Collision.h <189:2 189:2>]
LOCAL_SYMBOL: b2Collision.h<189:2> [b2Collision.h <192:2 192:2>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <195:29 195:33>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <197:22 197:26>]
LOCAL_SYMBOL: b2Collision.h<195:29> [b2Collision.h <198:22 198:26>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <195:50 195:54>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <197:40 197:44>]
LOCAL_SYMBOL: b2Collision.h<195:50> [b2Collision.h <198:40 198:44>]
LOCAL_SYMBOL: b2Collision.h<196:2> [b2Collision.h <196:2 196:2>]
LOCAL_SYMBOL: b2Collision.h<196:2> [b2Collision.h <199:2 199:2>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <202:30 202:33>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <205:38 205:41>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <206:38 206:41>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <207:22 207:25>]
LOCAL_SYMBOL: b2Collision.h<202:30> [b2Collision.h <208:22 208:25>]
LOCAL_SYMBOL: b2Collision.h<203:2> [b2Collision.h <203:2 203:2>]
LOCAL_SYMBOL: b2Collision.h<203:2> [b2Collision.h <210:2 210:2>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <204:8 204:13>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <205:3 205:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <205:12 205:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <206:3 206:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <206:12 206:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <207:3 207:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <207:12 207:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <208:3 208:8>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <208:12 208:17>]
LOCAL_SYMBOL: b2Collision.h<204:8> [b2Collision.h <209:10 209:15>]
LOCAL_SYMBOL: b2Collision.h<212:32> [b2Collision.h <212:32 212:37>]
LOCAL_SYMBOL: b2Collision.h<212:62> [b2Collision.h <212:62 212:66>]
LOCAL_SYMBOL: b2Collision.h<219:35> [b2Collision.h <219:35 219:42>]
LOCAL_SYMBOL: b2Collision.h<220:29> [b2Collision.h <220:29 220:35>]
LOCAL_SYMBOL: b2Collision.h<220:57> [b2Collision.h <220:57 220:59>]
LOCAL_SYMBOL: b2Collision.h<221:29> [b2Collision.h <221:29 221:35>]
LOCAL_SYMBOL: b2Collision.h<221:57> [b2Collision.h <221:57 221:59>]
LOCAL_SYMBOL: b2Collision.h<224:44> [b2Collision.h <224:44 224:51>]
LOCAL_SYMBOL: b2Collision.h<225:33> [b2Collision.h <225:33 225:40>]
LOCAL_SYMBOL: b2Collision.h<225:62> [b2Collision.h <225:62 225:64>]
LOCAL_SYMBOL: b2Collision.h<226:32> [b2Collision.h <226:32 226:38>]
LOCAL_SYMBOL: b2Collision.h<226:60> [b2Collision.h <226:60 226:62>]
LOCAL_SYMBOL: b2Collision.h<229:36> [b2Collision.h <229:36 229:43>]
LOCAL_SYMBOL: b2Collision.h<230:31> [b2Collision.h <230:31 230:38>]
LOCAL_SYMBOL: b2Collision.h<230:60> [b2Collision.h <230:60 230:62>]
LOCAL_SYMBOL: b2Collision.h<231:31> [b2Collision.h <231:31 231:38>]
LOCAL_SYMBOL: b2Collision.h<231:60> [b2Collision.h <231:60 231:62>]
LOCAL_SYMBOL: b2Collision.h<234:41> [b2Collision.h <234:41 234:48>]
LOCAL_SYMBOL: b2Collision.h<235:30> [b2Collision.h <235:30 235:37>]
LOCAL_SYMBOL: b2Collision.h<235:59> [b2Collision.h <235:59 235:61>]
LOCAL_SYMBOL: b2Collision.h<236:32> [b2Collision.h <236:32 236:38>]
LOCAL_SYMBOL: b2Collision.h<236:60> [b2Collision.h <236:60 236:62>]
LOCAL_SYMBOL: b2Collision.h<239:42> [b2Collision.h <239:42 239:49>]
LOCAL_SYMBOL: b2Collision.h<240:30> [b2Collision.h <240:30 240:34>]
LOCAL_SYMBOL: b2Collision.h<240:56> [b2Collision.h <240:56 240:58>]
LOCAL_SYMBOL: b2Collision.h<241:33> [b2Collision.h <241:33 241:39>]
LOCAL_SYMBOL: b2Collision.h<241:61> [b2Collision.h <241:61 241:63>]
LOCAL_SYMBOL: b2Collision.h<244:40> [b2Collision.h <244:40 244:43>]
LOCAL_SYMBOL: b2Collision.h<244:68> [b2Collision.h <244:68 244:70>]
LOCAL_SYMBOL: b2Collision.h<245:22> [b2Collision.h <245:22 245:27>]
LOCAL_SYMBOL: b2Collision.h<245:38> [b2Collision.h <245:38 245:43>]
LOCAL_SYMBOL: b2Collision.h<245:52> [b2Collision.h <245:52 245:63>]
LOCAL_SYMBOL: b2Collision.h<248:36> [b2Collision.h <248:36 248:41>]
LOCAL_SYMBOL: b2Collision.h<248:50> [b2Collision.h <248:50 248:55>]
LOCAL_SYMBOL: b2Collision.h<249:21> [b2Collision.h <249:21 249:26>]
LOCAL_SYMBOL: b2Collision.h<249:35> [b2Collision.h <249:35 249:40>]
LOCAL_SYMBOL: b2Collision.h<250:25> [b2Collision.h <250:25 250:27>]
LOCAL_SYMBOL: b2Collision.h<250:49> [b2Collision.h <250:49 250:51>]
LOCAL_SYMBOL: b2Collision.h<255:1> [b2Collision.h <255:1 255:1>]
LOCAL_SYMBOL: b2Collision.h<255:1> [b2Collision.h <260:1 260:1>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <256:9 256:9>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <257:15 257:15>]
LOCAL_SYMBOL: b2Collision.h<256:9> [b2Collision.h <257:30 257:30>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <257:7 257:11>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <258:2 258:6>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <258:10 258:14>]
LOCAL_SYMBOL: b2Collision.h<257:7> [b2Collision.h <259:9 259:13>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <262:41 262:41>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <265:22 265:22>]
LOCAL_SYMBOL: b2Collision.h<262:41> [b2Collision.h <266:7 266:7>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <262:58 262:58>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <265:7 265:7>]
LOCAL_SYMBOL: b2Collision.h<262:58> [b2Collision.h <266:22 266:22>]
LOCAL_SYMBOL: b2Collision.h<263:1> [b2Collision.h <263:1 263:1>]
LOCAL_SYMBOL: b2Collision.h<263:1> [b2Collision.h <275:1 275:1>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <264:13 264:14>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <266:2 266:3>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <271:6 271:7>]
LOCAL_SYMBOL: b2Collision.h<264:13> [b2Collision.h <271:21 271:22>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <264:9 264:10>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <265:2 265:3>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <268:6 268:7>]
LOCAL_SYMBOL: b2Collision.h<264:9> [b2Collision.h <268:21 268:22>]
LOCAL_SYMBOL: b2Collision.h<39:1> [b2Collision.h <39:1 39:1>]
LOCAL_SYMBOL: b2Collision.h<39:1> [b2Collision.h <50:1 50:1>]
LOCAL_SYMBOL: b2Collision.h<41:2> [b2Collision.h <41:2 41:2>]
LOCAL_SYMBOL: b2Collision.h<41:2> [b2Collision.h <44:2 44:2>]
LOCAL_SYMBOL: b2Collision.h<54:1> [b2Collision.h <54:1 54:1>]
LOCAL_SYMBOL: b2Collision.h<54:1> [b2Collision.h <57:1 57:1>]
LOCAL_SYMBOL: b2Collision.h<70:1> [b2Collision.h <70:1 70:1>]
LOCAL_SYMBOL: b2Collision.h<70:1> [b2Collision.h <75:1 75:1>]
LOCAL_SYMBOL: b2Collision.h<94:1> [b2Collision.h <94:1 94:1>]
LOCAL_SYMBOL: b2Collision.h<94:1> [b2Collision.h <107:1 107:1>]
LOCAL_SYMBOL: b2Collision.h<96:2> [b2Collision.h <96:2 96:2>]
LOCAL_SYMBOL: b2Collision.h<96:2> [b2Collision.h <100:2 100:2>]
LOCAL_SYMBOL: b2Contact.h<120:27> [b2Contact.h <120:27 120:34>]
LOCAL_SYMBOL: b2Contact.h<130:30> [b2Contact.h <130:30 130:40>]
LOCAL_SYMBOL: b2Contact.h<139:31> [b2Contact.h <139:31 139:35>]
LOCAL_SYMBOL: b2Contact.h<145:36> [b2Contact.h <145:36 145:43>]
LOCAL_SYMBOL: b2Contact.h<145:65> [b2Contact.h <145:65 145:67>]
LOCAL_SYMBOL: b2Contact.h<145:89> [b2Contact.h <145:89 145:91>]
LOCAL_SYMBOL: b2Contact.h<156:2> [b2Contact.h <156:2 156:2>]
LOCAL_SYMBOL: b2Contact.h<156:2> [b2Contact.h <174:2 174:2>]
LOCAL_SYMBOL: b2Contact.h<179:42> [b2Contact.h <179:42 179:50>]
LOCAL_SYMBOL: b2Contact.h<179:74> [b2Contact.h <179:74 179:83>]
LOCAL_SYMBOL: b2Contact.h<180:21> [b2Contact.h <180:21 180:25>]
LOCAL_SYMBOL: b2Contact.h<180:42> [b2Contact.h <180:42 180:46>]
LOCAL_SYMBOL: b2Contact.h<182:115> [b2Contact.h <182:115 182:123>]
LOCAL_SYMBOL: b2Contact.h<182:38> [b2Contact.h <182:38 182:45>]
LOCAL_SYMBOL: b2Contact.h<182:54> [b2Contact.h <182:54 182:59>]
LOCAL_SYMBOL: b2Contact.h<182:73> [b2Contact.h <182:73 182:80>]
LOCAL_SYMBOL: b2Contact.h<182:89> [b2Contact.h <182:89 182:94>]
LOCAL_SYMBOL: b2Contact.h<183:102> [b2Contact.h <183:102 183:110>]
LOCAL_SYMBOL: b2Contact.h<183:33> [b2Contact.h <183:33 183:39>]
LOCAL_SYMBOL: b2Contact.h<183:56> [b2Contact.h <183:56 183:60>]
LOCAL_SYMBOL: b2Contact.h<183:77> [b2Contact.h <183:77 183:81>]
LOCAL_SYMBOL: b2Contact.h<184:33> [b2Contact.h <184:33 184:39>]
LOCAL_SYMBOL: b2Contact.h<184:60> [b2Contact.h <184:60 184:68>]
LOCAL_SYMBOL: b2Contact.h<186:57> [b2Contact.h <186:57 186:57>]
LOCAL_SYMBOL: b2Contact.h<186:57> [b2Contact.h <186:58 186:58>]
LOCAL_SYMBOL: b2Contact.h<187:23> [b2Contact.h <187:23 187:30>]
LOCAL_SYMBOL: b2Contact.h<187:39> [b2Contact.h <187:39 187:44>]
LOCAL_SYMBOL: b2Contact.h<187:58> [b2Contact.h <187:58 187:65>]
LOCAL_SYMBOL: b2Contact.h<187:74> [b2Contact.h <187:74 187:79>]
LOCAL_SYMBOL: b2Contact.h<188:23> [b2Contact.h <188:23 188:23>]
LOCAL_SYMBOL: b2Contact.h<188:23> [b2Contact.h <188:24 188:24>]
LOCAL_SYMBOL: b2Contact.h<190:33> [b2Contact.h <190:33 190:40>]
LOCAL_SYMBOL: b2Contact.h<223:1> [b2Contact.h <223:1 223:1>]
LOCAL_SYMBOL: b2Contact.h<223:1> [b2Contact.h <225:1 225:1>]
LOCAL_SYMBOL: b2Contact.h<228:1> [b2Contact.h <228:1 228:1>]
LOCAL_SYMBOL: b2Contact.h<228:1> [b2Contact.h <230:1 230:1>]
LOCAL_SYMBOL: b2Contact.h<232:58> [b2Contact.h <232:58 232:70>]
LOCAL_SYMBOL: b2Contact.h<232:58> [b2Contact.h <239:2 239:14>]
LOCAL_SYMBOL: b2Contact.h<233:1> [b2Contact.h <233:1 233:1>]
LOCAL_SYMBOL: b2Contact.h<233:1> [b2Contact.h <240:1 240:1>]
LOCAL_SYMBOL: b2Contact.h<234:16> [b2Contact.h <234:16 234:20>]
LOCAL_SYMBOL: b2Contact.h<234:16> [b2Contact.h <239:41 239:45>]
LOCAL_SYMBOL: b2Contact.h<235:16> [b2Contact.h <235:16 235:20>]
LOCAL_SYMBOL: b2Contact.h<235:16> [b2Contact.h <239:82 239:86>]
LOCAL_SYMBOL: b2Contact.h<236:17> [b2Contact.h <236:17 236:22>]
LOCAL_SYMBOL: b2Contact.h<236:17> [b2Contact.h <239:64 239:69>]
LOCAL_SYMBOL: b2Contact.h<237:17> [b2Contact.h <237:17 237:22>]
LOCAL_SYMBOL: b2Contact.h<237:17> [b2Contact.h <239:105 239:110>]
LOCAL_SYMBOL: b2Contact.h<242:40> [b2Contact.h <242:40 242:43>]
LOCAL_SYMBOL: b2Contact.h<242:40> [b2Contact.h <244:6 244:9>]
LOCAL_SYMBOL: b2Contact.h<243:1> [b2Contact.h <243:1 243:1>]
LOCAL_SYMBOL: b2Contact.h<243:1> [b2Contact.h <252:1 252:1>]
LOCAL_SYMBOL: b2Contact.h<245:2> [b2Contact.h <245:2 245:2>]
LOCAL_SYMBOL: b2Contact.h<245:2> [b2Contact.h <247:2 247:2>]
LOCAL_SYMBOL: b2Contact.h<249:2> [b2Contact.h <249:2 249:2>]
LOCAL_SYMBOL: b2Contact.h<249:2> [b2Contact.h <251:2 251:2>]
LOCAL_SYMBOL: b2Contact.h<255:1> [b2Contact.h <255:1 255:1>]
LOCAL_SYMBOL: b2Contact.h<255:1> [b2Contact.h <257:1 257:1>]
LOCAL_SYMBOL: b2Contact.h<260:1> [b2Contact.h <260:1 260:1>]
LOCAL_SYMBOL: b2Contact.h<260:1> [b2Contact.h <262:1 262:1>]
LOCAL_SYMBOL: b2Contact.h<265:1> [b2Contact.h <265:1 265:1>]
LOCAL_SYMBOL: b2Contact.h<265:1> [b2Contact.h <267:1 267:1>]
LOCAL_SYMBOL: b2Contact.h<270:1> [b2Contact.h <270:1 270:1>]
LOCAL_SYMBOL: b2Contact.h<270:1> [b2Contact.h <272:1 272:1>]
LOCAL_SYMBOL: b2Contact.h<275:1> [b2Contact.h <275:1 275:1>]
LOCAL_SYMBOL: b2Contact.h<275:1> [b2Contact.h <277:1 277:1>]
LOCAL_SYMBOL: b2Contact.h<280:1> [b2Contact.h <280:1 280:1>]
LOCAL_SYMBOL: b2Contact.h<280:1> [b2Contact.h <282:1 282:1>]
LOCAL_SYMBOL: b2Contact.h<285:1> [b2Contact.h <285:1 285:1>]
LOCAL_SYMBOL: b2Contact.h<285:1> [b2Contact.h <287:1 287:1>]
LOCAL_SYMBOL: b2Contact.h<290:1> [b2Contact.h <290:1 290:1>]
LOCAL_SYMBOL: b2Contact.h<290:1> [b2Contact.h <292:1 292:1>]
LOCAL_SYMBOL: b2Contact.h<295:1> [b2Contact.h <295:1 295:1>]
LOCAL_SYMBOL: b2Contact.h<295:1> [b2Contact.h <297:1 297:1>]
LOCAL_SYMBOL: b2Contact.h<300:1> [b2Contact.h <300:1 300:1>]
LOCAL_SYMBOL: b2Contact.h<300:1> [b2Contact.h <302:1 302:1>]
LOCAL_SYMBOL: b2Contact.h<305:1> [b2Contact.h <305:1 305:1>]
LOCAL_SYMBOL: b2Contact.h<305:1> [b2Contact.h <307:1 307:1>]
LOCAL_SYMBOL: b2Contact.h<309:44> [b2Contact.h <309:44 309:51>]
LOCAL_SYMBOL: b2Contact.h<309:44> [b2Contact.h <311:15 311:22>]
LOCAL_SYMBOL: b2Contact.h<310:1> [b2Contact.h <310:1 310:1>]
LOCAL_SYMBOL: b2Contact.h<310:1> [b2Contact.h <312:1 312:1>]
LOCAL_SYMBOL: b2Contact.h<315:1> [b2Contact.h <315:1 315:1>]
LOCAL_SYMBOL: b2Contact.h<315:1> [b2Contact.h <317:1 317:1>]
LOCAL_SYMBOL: b2Contact.h<320:1> [b2Contact.h <320:1 320:1>]
LOCAL_SYMBOL: b2Contact.h<320:1> [b2Contact.h <322:1 322:1>]
LOCAL_SYMBOL: b2Contact.h<324:47> [b2Contact.h <324:47 324:57>]
LOCAL_SYMBOL: b2Contact.h<324:47> [b2Contact.h <326:18 326:28>]
LOCAL_SYMBOL: b2Contact.h<325:1> [b2Contact.h <325:1 325:1>]
LOCAL_SYMBOL: b2Contact.h<325:1> [b2Contact.h <327:1 327:1>]
LOCAL_SYMBOL: b2Contact.h<330:1> [b2Contact.h <330:1 330:1>]
LOCAL_SYMBOL: b2Contact.h<330:1> [b2Contact.h <332:1 332:1>]
LOCAL_SYMBOL: b2Contact.h<335:1> [b2Contact.h <335:1 335:1>]
LOCAL_SYMBOL: b2Contact.h<335:1> [b2Contact.h <337:1 337:1>]
LOCAL_SYMBOL: b2Contact.h<339:48> [b2Contact.h <339:48 339:52>]
LOCAL_SYMBOL: b2Contact.h<339:48> [b2Contact.h <341:19 341:23>]
LOCAL_SYMBOL: b2Contact.h<340:1> [b2Contact.h <340:1 340:1>]
LOCAL_SYMBOL: b2Contact.h<340:1> [b2Contact.h <342:1 342:1>]
LOCAL_SYMBOL: b2Contact.h<345:1> [b2Contact.h <345:1 345:1>]
LOCAL_SYMBOL: b2Contact.h<345:1> [b2Contact.h <347:1 347:1>]
LOCAL_SYMBOL: b2Contact.h<37:38> [b2Contact.h <37:38 37:46>]
LOCAL_SYMBOL: b2Contact.h<37:38> [b2Contact.h <39:16 39:24>]
LOCAL_SYMBOL: b2Contact.h<37:57> [b2Contact.h <37:57 37:65>]
LOCAL_SYMBOL: b2Contact.h<37:57> [b2Contact.h <39:28 39:36>]
LOCAL_SYMBOL: b2Contact.h<38:1> [b2Contact.h <38:1 38:1>]
LOCAL_SYMBOL: b2Contact.h<38:1> [b2Contact.h <40:1 40:1>]
LOCAL_SYMBOL: b2Contact.h<44:41> [b2Contact.h <44:41 44:52>]
LOCAL_SYMBOL: b2Contact.h<44:41> [b2Contact.h <46:9 46:20>]
LOCAL_SYMBOL: b2Contact.h<44:41> [b2Contact.h <46:39 46:50>]
LOCAL_SYMBOL: b2Contact.h<44:63> [b2Contact.h <44:63 44:74>]
LOCAL_SYMBOL: b2Contact.h<44:63> [b2Contact.h <46:24 46:35>]
LOCAL_SYMBOL: b2Contact.h<44:63> [b2Contact.h <46:54 46:65>]
LOCAL_SYMBOL: b2Contact.h<45:1> [b2Contact.h <45:1 45:1>]
LOCAL_SYMBOL: b2Contact.h<45:1> [b2Contact.h <47:1 47:1>]
LOCAL_SYMBOL: b2Contact.h<49:51> [b2Contact.h <49:51 49:58>]
LOCAL_SYMBOL: b2Contact.h<49:67> [b2Contact.h <49:67 49:72>]
LOCAL_SYMBOL: b2Contact.h<50:22> [b2Contact.h <50:22 50:29>]
LOCAL_SYMBOL: b2Contact.h<50:38> [b2Contact.h <50:38 50:43>]
LOCAL_SYMBOL: b2Contact.h<51:29> [b2Contact.h <51:29 51:37>]
LOCAL_SYMBOL: b2Contact.h<52:45> [b2Contact.h <52:45 52:51>]
LOCAL_SYMBOL: b2Contact.h<52:72> [b2Contact.h <52:72 52:80>]
LOCAL_SYMBOL: b2Contact.h<55:1> [b2Contact.h <55:1 55:1>]
LOCAL_SYMBOL: b2Contact.h<55:1> [b2Contact.h <59:1 59:1>]
LOCAL_SYMBOL: b2Contact.h<67:1> [b2Contact.h <67:1 67:1>]
LOCAL_SYMBOL: b2Contact.h<67:1> [b2Contact.h <72:1 72:1>]
LOCAL_SYMBOL: b2Contact.h<78:1> [b2Contact.h <78:1 78:1>]
LOCAL_SYMBOL: b2Contact.h<78:1> [b2Contact.h <220:1 220:1>]
LOCAL_SYMBOL: b2Contact.h<87:41> [b2Contact.h <87:41 87:53>]
LOCAL_SYMBOL: b2Contact.h<95:23> [b2Contact.h <95:23 95:26>]
LOCAL_SYMBOL: b2ContactManager.h<31:1> [b2ContactManager.h <31:1 31:1>]
LOCAL_SYMBOL: b2ContactManager.h<31:1> [b2ContactManager.h <50:1 50:1>]
LOCAL_SYMBOL: b2ContactManager.h<36:21> [b2ContactManager.h <36:21 36:34>]
LOCAL_SYMBOL: b2ContactManager.h<36:43> [b2ContactManager.h <36:43 36:56>]
LOCAL_SYMBOL: b2ContactManager.h<40:26> [b2ContactManager.h <40:26 40:26>]
LOCAL_SYMBOL: b2ContactSolver.h<32:1> [b2ContactSolver.h <32:1 32:1>]
LOCAL_SYMBOL: b2ContactSolver.h<32:1> [b2ContactSolver.h <40:1 40:1>]
LOCAL_SYMBOL: b2ContactSolver.h<43:1> [b2ContactSolver.h <43:1 43:1>]
LOCAL_SYMBOL: b2ContactSolver.h<43:1> [b2ContactSolver.h <57:1 57:1>]
LOCAL_SYMBOL: b2ContactSolver.h<60:1> [b2ContactSolver.h <60:1 60:1>]
LOCAL_SYMBOL: b2ContactSolver.h<60:1> [b2ContactSolver.h <67:1 67:1>]
LOCAL_SYMBOL: b2ContactSolver.h<70:1> [b2ContactSolver.h <70:1 70:1>]
LOCAL_SYMBOL: b2ContactSolver.h<70:1> [b2ContactSolver.h <92:1 92:1>]
LOCAL_SYMBOL: b2ContactSolver.h<72:38> [b2ContactSolver.h <72:38 72:40>]
LOCAL_SYMBOL: b2ContactSolver.h<82:41> [b2ContactSolver.h <82:41 82:49>]
LOCAL_SYMBOL: b2ContactSolver.h<82:58> [b2ContactSolver.h <82:58 82:66>]
LOCAL_SYMBOL: b2Distance.h<101:55> [b2Distance.h <101:55 101:59>]
LOCAL_SYMBOL: b2Distance.h<101:55> [b2Distance.h <103:16 103:20>]
LOCAL_SYMBOL: b2Distance.h<101:55> [b2Distance.h <103:25 103:29>]
LOCAL_SYMBOL: b2Distance.h<101:55> [b2Distance.h <104:20 104:24>]
LOCAL_SYMBOL: b2Distance.h<102:1> [b2Distance.h <102:1 102:1>]
LOCAL_SYMBOL: b2Distance.h<102:1> [b2Distance.h <105:1 105:1>]
LOCAL_SYMBOL: b2Distance.h<107:56> [b2Distance.h <107:56 107:56>]
LOCAL_SYMBOL: b2Distance.h<107:56> [b2Distance.h <110:43 110:43>]
LOCAL_SYMBOL: b2Distance.h<107:56> [b2Distance.h <113:40 113:40>]
LOCAL_SYMBOL: b2Distance.h<108:1> [b2Distance.h <108:1 108:1>]
LOCAL_SYMBOL: b2Distance.h<108:1> [b2Distance.h <122:1 122:1>]
LOCAL_SYMBOL: b2Distance.h<109:8> [b2Distance.h <109:8 109:16>]
LOCAL_SYMBOL: b2Distance.h<109:8> [b2Distance.h <116:4 116:12>]
LOCAL_SYMBOL: b2Distance.h<109:8> [b2Distance.h <121:9 121:17>]
LOCAL_SYMBOL: b2Distance.h<110:10> [b2Distance.h <110:10 110:18>]
LOCAL_SYMBOL: b2Distance.h<110:10> [b2Distance.h <114:15 114:23>]
LOCAL_SYMBOL: b2Distance.h<110:10> [b2Distance.h <117:4 117:12>]
LOCAL_SYMBOL: b2Distance.h<111:13> [b2Distance.h <111:13 111:13>]
LOCAL_SYMBOL: b2Distance.h<111:13> [b2Distance.h <111:20 111:20>]
LOCAL_SYMBOL: b2Distance.h<111:13> [b2Distance.h <111:35 111:35>]
LOCAL_SYMBOL: b2Distance.h<111:13> [b2Distance.h <113:36 113:36>]
LOCAL_SYMBOL: b2Distance.h<111:13> [b2Distance.h <116:16 116:16>]
LOCAL_SYMBOL: b2Distance.h<112:2> [b2Distance.h <112:2 112:2>]
LOCAL_SYMBOL: b2Distance.h<112:2> [b2Distance.h <119:2 119:2>]
LOCAL_SYMBOL: b2Distance.h<113:11> [b2Distance.h <113:11 113:15>]
LOCAL_SYMBOL: b2Distance.h<113:11> [b2Distance.h <114:7 114:11>]
LOCAL_SYMBOL: b2Distance.h<113:11> [b2Distance.h <117:16 117:20>]
LOCAL_SYMBOL: b2Distance.h<115:3> [b2Distance.h <115:3 115:3>]
LOCAL_SYMBOL: b2Distance.h<115:3> [b2Distance.h <118:3 118:3>]
LOCAL_SYMBOL: b2Distance.h<124:70> [b2Distance.h <124:70 124:70>]
LOCAL_SYMBOL: b2Distance.h<124:70> [b2Distance.h <127:43 127:43>]
LOCAL_SYMBOL: b2Distance.h<124:70> [b2Distance.h <130:40 130:40>]
LOCAL_SYMBOL: b2Distance.h<125:1> [b2Distance.h <125:1 125:1>]
LOCAL_SYMBOL: b2Distance.h<125:1> [b2Distance.h <139:1 139:1>]
LOCAL_SYMBOL: b2Distance.h<126:8> [b2Distance.h <126:8 126:16>]
LOCAL_SYMBOL: b2Distance.h<126:8> [b2Distance.h <133:4 133:12>]
LOCAL_SYMBOL: b2Distance.h<126:8> [b2Distance.h <138:20 138:28>]
LOCAL_SYMBOL: b2Distance.h<127:10> [b2Distance.h <127:10 127:18>]
LOCAL_SYMBOL: b2Distance.h<127:10> [b2Distance.h <131:15 131:23>]
LOCAL_SYMBOL: b2Distance.h<127:10> [b2Distance.h <134:4 134:12>]
LOCAL_SYMBOL: b2Distance.h<128:13> [b2Distance.h <128:13 128:13>]
LOCAL_SYMBOL: b2Distance.h<128:13> [b2Distance.h <128:20 128:20>]
LOCAL_SYMBOL: b2Distance.h<128:13> [b2Distance.h <128:35 128:35>]
LOCAL_SYMBOL: b2Distance.h<128:13> [b2Distance.h <130:36 130:36>]
LOCAL_SYMBOL: b2Distance.h<128:13> [b2Distance.h <133:16 133:16>]
LOCAL_SYMBOL: b2Distance.h<129:2> [b2Distance.h <129:2 129:2>]
LOCAL_SYMBOL: b2Distance.h<129:2> [b2Distance.h <136:2 136:2>]
LOCAL_SYMBOL: b2Distance.h<130:11> [b2Distance.h <130:11 130:15>]
LOCAL_SYMBOL: b2Distance.h<130:11> [b2Distance.h <131:7 131:11>]
LOCAL_SYMBOL: b2Distance.h<130:11> [b2Distance.h <134:16 134:20>]
LOCAL_SYMBOL: b2Distance.h<132:3> [b2Distance.h <132:3 132:3>]
LOCAL_SYMBOL: b2Distance.h<132:3> [b2Distance.h <135:3 135:3>]
LOCAL_SYMBOL: b2Distance.h<30:1> [b2Distance.h <30:1 30:1>]
LOCAL_SYMBOL: b2Distance.h<30:1> [b2Distance.h <53:1 53:1>]
LOCAL_SYMBOL: b2Distance.h<31:70> [b2Distance.h <31:70 31:70>]
LOCAL_SYMBOL: b2Distance.h<31:70> [b2Distance.h <31:71 31:71>]
LOCAL_SYMBOL: b2Distance.h<35:26> [b2Distance.h <35:26 35:30>]
LOCAL_SYMBOL: b2Distance.h<35:39> [b2Distance.h <35:39 35:43>]
LOCAL_SYMBOL: b2Distance.h<38:33> [b2Distance.h <38:33 38:33>]
LOCAL_SYMBOL: b2Distance.h<41:47> [b2Distance.h <41:47 41:47>]
LOCAL_SYMBOL: b2Distance.h<47:32> [b2Distance.h <47:32 47:36>]
LOCAL_SYMBOL: b2Distance.h<58:1> [b2Distance.h <58:1 58:1>]
LOCAL_SYMBOL: b2Distance.h<58:1> [b2Distance.h <63:1 63:1>]
LOCAL_SYMBOL: b2Distance.h<69:1> [b2Distance.h <69:1 69:1>]
LOCAL_SYMBOL: b2Distance.h<69:1> [b2Distance.h <75:1 75:1>]
LOCAL_SYMBOL: b2Distance.h<79:1> [b2Distance.h <79:1 79:1>]
LOCAL_SYMBOL: b2Distance.h<79:1> [b2Distance.h <84:1 84:1>]
LOCAL_SYMBOL: b2Distance.h<89:35> [b2Distance.h <89:35 89:40>]
LOCAL_SYMBOL: b2Distance.h<90:21> [b2Distance.h <90:21 90:25>]
LOCAL_SYMBOL: b2Distance.h<91:28> [b2Distance.h <91:28 91:32>]
LOCAL_SYMBOL: b2Distance.h<97:1> [b2Distance.h <97:1 97:1>]
LOCAL_SYMBOL: b2Distance.h<97:1> [b2Distance.h <99:1 99:1>]
LOCAL_SYMBOL: b2Draw.h<26:1> [b2Draw.h <26:1 26:1>]
LOCAL_SYMBOL: b2Draw.h<26:1> [b2Draw.h <39:1 39:1>]
LOCAL_SYMBOL: b2Draw.h<27:12> [b2Draw.h <27:12 27:12>]
LOCAL_SYMBOL: b2Draw.h<27:12> [b2Draw.h <27:13 27:13>]
LOCAL_SYMBOL: b2Draw.h<28:18> [b2Draw.h <28:18 28:20>]
LOCAL_SYMBOL: b2Draw.h<28:18> [b2Draw.h <30:7 30:9>]
LOCAL_SYMBOL: b2Draw.h<28:31> [b2Draw.h <28:31 28:33>]
LOCAL_SYMBOL: b2Draw.h<28:31> [b2Draw.h <30:16 30:18>]
LOCAL_SYMBOL: b2Draw.h<28:44> [b2Draw.h <28:44 28:46>]
LOCAL_SYMBOL: b2Draw.h<28:44> [b2Draw.h <30:25 30:27>]
LOCAL_SYMBOL: b2Draw.h<28:57> [b2Draw.h <28:57 28:59>]
LOCAL_SYMBOL: b2Draw.h<28:57> [b2Draw.h <30:34 30:36>]
LOCAL_SYMBOL: b2Draw.h<29:2> [b2Draw.h <29:2 29:2>]
LOCAL_SYMBOL: b2Draw.h<29:2> [b2Draw.h <31:2 31:2>]
LOCAL_SYMBOL: b2Draw.h<33:19> [b2Draw.h <33:19 33:21>]
LOCAL_SYMBOL: b2Draw.h<33:19> [b2Draw.h <35:7 35:9>]
LOCAL_SYMBOL: b2Draw.h<33:32> [b2Draw.h <33:32 33:34>]
LOCAL_SYMBOL: b2Draw.h<33:32> [b2Draw.h <35:16 35:18>]
LOCAL_SYMBOL: b2Draw.h<33:45> [b2Draw.h <33:45 33:47>]
LOCAL_SYMBOL: b2Draw.h<33:45> [b2Draw.h <35:25 35:27>]
LOCAL_SYMBOL: b2Draw.h<33:58> [b2Draw.h <33:58 33:60>]
LOCAL_SYMBOL: b2Draw.h<33:58> [b2Draw.h <35:34 35:36>]
LOCAL_SYMBOL: b2Draw.h<34:2> [b2Draw.h <34:2 34:2>]
LOCAL_SYMBOL: b2Draw.h<34:2> [b2Draw.h <36:2 36:2>]
LOCAL_SYMBOL: b2Draw.h<44:1> [b2Draw.h <44:1 44:1>]
LOCAL_SYMBOL: b2Draw.h<44:1> [b2Draw.h <95:1 95:1>]
LOCAL_SYMBOL: b2Draw.h<48:20> [b2Draw.h <48:20 48:20>]
LOCAL_SYMBOL: b2Draw.h<48:20> [b2Draw.h <48:21 48:21>]
LOCAL_SYMBOL: b2Draw.h<51:2> [b2Draw.h <51:2 51:2>]
LOCAL_SYMBOL: b2Draw.h<51:2> [b2Draw.h <57:2 57:2>]
LOCAL_SYMBOL: b2Draw.h<60:23> [b2Draw.h <60:23 60:27>]
LOCAL_SYMBOL: b2Draw.h<66:26> [b2Draw.h <66:26 66:30>]
LOCAL_SYMBOL: b2Draw.h<69:25> [b2Draw.h <69:25 69:29>]
LOCAL_SYMBOL: b2Draw.h<72:41> [b2Draw.h <72:41 72:48>]
LOCAL_SYMBOL: b2Draw.h<72:57> [b2Draw.h <72:57 72:67>]
LOCAL_SYMBOL: b2Draw.h<72:85> [b2Draw.h <72:85 72:89>]
LOCAL_SYMBOL: b2Draw.h<75:46> [b2Draw.h <75:46 75:53>]
LOCAL_SYMBOL: b2Draw.h<75:62> [b2Draw.h <75:62 75:72>]
LOCAL_SYMBOL: b2Draw.h<75:90> [b2Draw.h <75:90 75:94>]
LOCAL_SYMBOL: b2Draw.h<78:40> [b2Draw.h <78:40 78:45>]
LOCAL_SYMBOL: b2Draw.h<78:56> [b2Draw.h <78:56 78:61>]
LOCAL_SYMBOL: b2Draw.h<78:79> [b2Draw.h <78:79 78:83>]
LOCAL_SYMBOL: b2Draw.h<81:104> [b2Draw.h <81:104 81:108>]
LOCAL_SYMBOL: b2Draw.h<81:45> [b2Draw.h <81:45 81:50>]
LOCAL_SYMBOL: b2Draw.h<81:61> [b2Draw.h <81:61 81:66>]
LOCAL_SYMBOL: b2Draw.h<81:83> [b2Draw.h <81:83 81:86>]
LOCAL_SYMBOL: b2Draw.h<84:41> [b2Draw.h <84:41 84:42>]
LOCAL_SYMBOL: b2Draw.h<84:59> [b2Draw.h <84:59 84:60>]
LOCAL_SYMBOL: b2Draw.h<84:78> [b2Draw.h <84:78 84:82>]
LOCAL_SYMBOL: b2Draw.h<88:48> [b2Draw.h <88:48 88:49>]
LOCAL_SYMBOL: b2Draw.h<91:39> [b2Draw.h <91:39 91:39>]
LOCAL_SYMBOL: b2Draw.h<91:50> [b2Draw.h <91:50 91:53>]
LOCAL_SYMBOL: b2Draw.h<91:71> [b2Draw.h <91:71 91:75>]
LOCAL_SYMBOL: b2DynamicTree.h<101:21> [b2DynamicTree.h <101:21 101:21>]
LOCAL_SYMBOL: b2DynamicTree.h<101:21> [b2DynamicTree.h <102:15 102:15>]
LOCAL_SYMBOL: b2DynamicTree.h<102:18> [b2DynamicTree.h <102:18 102:25>]
LOCAL_SYMBOL: b2DynamicTree.h<102:50> [b2DynamicTree.h <102:50 102:54>]
LOCAL_SYMBOL: b2DynamicTree.h<124:33> [b2DynamicTree.h <124:33 124:41>]
LOCAL_SYMBOL: b2DynamicTree.h<129:22> [b2DynamicTree.h <129:22 129:25>]
LOCAL_SYMBOL: b2DynamicTree.h<131:24> [b2DynamicTree.h <131:24 131:27>]
LOCAL_SYMBOL: b2DynamicTree.h<132:24> [b2DynamicTree.h <132:24 132:27>]
LOCAL_SYMBOL: b2DynamicTree.h<134:22> [b2DynamicTree.h <134:22 134:26>]
LOCAL_SYMBOL: b2DynamicTree.h<137:28> [b2DynamicTree.h <137:28 137:33>]
LOCAL_SYMBOL: b2DynamicTree.h<139:31> [b2DynamicTree.h <139:31 139:35>]
LOCAL_SYMBOL: b2DynamicTree.h<140:29> [b2DynamicTree.h <140:29 140:33>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <156:47 156:53>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <158:16 158:22>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <158:27 158:33>]
LOCAL_SYMBOL: b2DynamicTree.h<156:47> [b2DynamicTree.h <159:17 159:23>]
LOCAL_SYMBOL: b2DynamicTree.h<157:1> [b2DynamicTree.h <157:1 157:1>]
LOCAL_SYMBOL: b2DynamicTree.h<157:1> [b2DynamicTree.h <160:1 160:1>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <162:54 162:60>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <164:16 164:22>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <164:27 164:33>]
LOCAL_SYMBOL: b2DynamicTree.h<162:54> [b2DynamicTree.h <165:17 165:23>]
LOCAL_SYMBOL: b2DynamicTree.h<163:1> [b2DynamicTree.h <163:1 163:1>]
LOCAL_SYMBOL: b2DynamicTree.h<163:1> [b2DynamicTree.h <166:1 166:1>]
LOCAL_SYMBOL: b2DynamicTree.h<168:20> [b2DynamicTree.h <168:20 168:20>]
LOCAL_SYMBOL: b2DynamicTree.h<168:20> [b2DynamicTree.h <169:34 169:34>]
LOCAL_SYMBOL: b2DynamicTree.h<169:37> [b2DynamicTree.h <169:37 169:44>]
LOCAL_SYMBOL: b2DynamicTree.h<169:37> [b2DynamicTree.h <188:20 188:27>]
LOCAL_SYMBOL: b2DynamicTree.h<169:61> [b2DynamicTree.h <169:61 169:64>]
LOCAL_SYMBOL: b2DynamicTree.h<169:61> [b2DynamicTree.h <184:33 184:36>]
LOCAL_SYMBOL: b2DynamicTree.h<170:1> [b2DynamicTree.h <170:1 170:1>]
LOCAL_SYMBOL: b2DynamicTree.h<170:1> [b2DynamicTree.h <201:1 201:1>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <171:30 171:34>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <172:2 172:6>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <174:9 174:13>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <176:18 176:22>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <196:5 196:9>]
LOCAL_SYMBOL: b2DynamicTree.h<171:30> [b2DynamicTree.h <197:5 197:9>]
LOCAL_SYMBOL: b2DynamicTree.h<175:2> [b2DynamicTree.h <175:2 175:2>]
LOCAL_SYMBOL: b2DynamicTree.h<175:2> [b2DynamicTree.h <200:2 200:2>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <176:9 176:14>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <177:7 177:12>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <182:38 182:43>]
LOCAL_SYMBOL: b2DynamicTree.h<176:9> [b2DynamicTree.h <188:44 188:49>]
LOCAL_SYMBOL: b2DynamicTree.h<178:3> [b2DynamicTree.h <178:3 178:3>]
LOCAL_SYMBOL: b2DynamicTree.h<178:3> [b2DynamicTree.h <180:3 180:3>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <182:21 182:24>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <184:21 184:24>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <186:8 186:11>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <196:16 196:19>]
LOCAL_SYMBOL: b2DynamicTree.h<182:21> [b2DynamicTree.h <197:16 197:19>]
LOCAL_SYMBOL: b2DynamicTree.h<185:3> [b2DynamicTree.h <185:3 185:3>]
LOCAL_SYMBOL: b2DynamicTree.h<185:3> [b2DynamicTree.h <199:3 199:3>]
LOCAL_SYMBOL: b2DynamicTree.h<187:4> [b2DynamicTree.h <187:4 187:4>]
LOCAL_SYMBOL: b2DynamicTree.h<187:4> [b2DynamicTree.h <193:4 193:4>]
LOCAL_SYMBOL: b2DynamicTree.h<188:10> [b2DynamicTree.h <188:10 188:16>]
LOCAL_SYMBOL: b2DynamicTree.h<188:10> [b2DynamicTree.h <189:9 189:15>]
LOCAL_SYMBOL: b2DynamicTree.h<190:5> [b2DynamicTree.h <190:5 190:5>]
LOCAL_SYMBOL: b2DynamicTree.h<190:5> [b2DynamicTree.h <192:5 192:5>]
LOCAL_SYMBOL: b2DynamicTree.h<195:4> [b2DynamicTree.h <195:4 195:4>]
LOCAL_SYMBOL: b2DynamicTree.h<195:4> [b2DynamicTree.h <198:4 198:4>]
LOCAL_SYMBOL: b2DynamicTree.h<203:20> [b2DynamicTree.h <203:20 203:20>]
LOCAL_SYMBOL: b2DynamicTree.h<203:20> [b2DynamicTree.h <204:36 204:36>]
LOCAL_SYMBOL: b2DynamicTree.h<204:39> [b2DynamicTree.h <204:39 204:46>]
LOCAL_SYMBOL: b2DynamicTree.h<204:39> [b2DynamicTree.h <264:20 264:27>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <204:71 204:75>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <206:14 206:18>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <207:14 207:18>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <219:24 219:28>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <260:18 260:22>]
LOCAL_SYMBOL: b2DynamicTree.h<204:71> [b2DynamicTree.h <261:18 261:22>]
LOCAL_SYMBOL: b2DynamicTree.h<205:1> [b2DynamicTree.h <205:1 205:1>]
LOCAL_SYMBOL: b2DynamicTree.h<205:1> [b2DynamicTree.h <287:1 287:1>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <206:9 206:10>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <208:18 208:19>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <224:14 224:15>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <224:39 224:40>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <225:34 225:35>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <226:34 226:35>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <251:39 251:40>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <276:16 276:17>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <276:41 276:42>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <277:36 277:37>]
LOCAL_SYMBOL: b2DynamicTree.h<206:9> [b2DynamicTree.h <278:36 278:37>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <207:9 207:10>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <208:13 208:14>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <224:34 224:35>]
LOCAL_SYMBOL: b2DynamicTree.h<207:9> [b2DynamicTree.h <276:36 276:37>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <208:9 208:9>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <209:11 209:11>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <210:2 210:2>]
LOCAL_SYMBOL: b2DynamicTree.h<208:9> [b2DynamicTree.h <213:27 213:27>]
LOCAL_SYMBOL: b2DynamicTree.h<213:9> [b2DynamicTree.h <213:9 213:9>]
LOCAL_SYMBOL: b2DynamicTree.h<213:9> [b2DynamicTree.h <214:23 214:23>]
LOCAL_SYMBOL: b2DynamicTree.h<213:9> [b2DynamicTree.h <251:36 251:36>]
LOCAL_SYMBOL: b2DynamicTree.h<214:9> [b2DynamicTree.h <214:9 214:13>]
LOCAL_SYMBOL: b2DynamicTree.h<214:9> [b2DynamicTree.h <251:56 251:60>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <219:10 219:20>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <224:19 224:29>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <262:27 262:37>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <275:5 275:15>]
LOCAL_SYMBOL: b2DynamicTree.h<219:10> [b2DynamicTree.h <276:21 276:31>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <222:9 222:19>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <225:3 225:13>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <226:3 226:13>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <242:33 242:43>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <277:5 277:15>]
LOCAL_SYMBOL: b2DynamicTree.h<222:9> [b2DynamicTree.h <278:5 278:15>]
LOCAL_SYMBOL: b2DynamicTree.h<223:2> [b2DynamicTree.h <223:2 223:2>]
LOCAL_SYMBOL: b2DynamicTree.h<223:2> [b2DynamicTree.h <227:2 227:2>]
LOCAL_SYMBOL: b2DynamicTree.h<224:10> [b2DynamicTree.h <224:10 224:10>]
LOCAL_SYMBOL: b2DynamicTree.h<224:10> [b2DynamicTree.h <225:38 225:38>]
LOCAL_SYMBOL: b2DynamicTree.h<224:10> [b2DynamicTree.h <226:38 226:38>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <229:30 229:34>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <230:2 230:6>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <232:9 232:13>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <234:18 234:22>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <283:4 283:8>]
LOCAL_SYMBOL: b2DynamicTree.h<229:30> [b2DynamicTree.h <284:4 284:8>]
LOCAL_SYMBOL: b2DynamicTree.h<233:2> [b2DynamicTree.h <233:2 233:2>]
LOCAL_SYMBOL: b2DynamicTree.h<233:2> [b2DynamicTree.h <286:2 286:2>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <234:9 234:14>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <235:7 235:12>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <240:38 240:43>]
LOCAL_SYMBOL: b2DynamicTree.h<234:9> [b2DynamicTree.h <264:56 264:61>]
LOCAL_SYMBOL: b2DynamicTree.h<236:3> [b2DynamicTree.h <236:3 236:3>]
LOCAL_SYMBOL: b2DynamicTree.h<236:3> [b2DynamicTree.h <238:3 238:3>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <240:21 240:24>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <242:21 242:24>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <249:14 249:17>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <250:14 250:17>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <257:7 257:10>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <283:15 283:18>]
LOCAL_SYMBOL: b2DynamicTree.h<240:21> [b2DynamicTree.h <284:15 284:18>]
LOCAL_SYMBOL: b2DynamicTree.h<243:3> [b2DynamicTree.h <243:3 243:3>]
LOCAL_SYMBOL: b2DynamicTree.h<243:3> [b2DynamicTree.h <245:3 245:3>]
LOCAL_SYMBOL: b2DynamicTree.h<249:10> [b2DynamicTree.h <249:10 249:10>]
LOCAL_SYMBOL: b2DynamicTree.h<249:10> [b2DynamicTree.h <251:44 251:44>]
LOCAL_SYMBOL: b2DynamicTree.h<250:10> [b2DynamicTree.h <250:10 250:10>]
LOCAL_SYMBOL: b2DynamicTree.h<250:10> [b2DynamicTree.h <251:63 251:63>]
LOCAL_SYMBOL: b2DynamicTree.h<251:11> [b2DynamicTree.h <251:11 251:20>]
LOCAL_SYMBOL: b2DynamicTree.h<251:11> [b2DynamicTree.h <252:7 252:16>]
LOCAL_SYMBOL: b2DynamicTree.h<253:3> [b2DynamicTree.h <253:3 253:3>]
LOCAL_SYMBOL: b2DynamicTree.h<253:3> [b2DynamicTree.h <255:3 255:3>]
LOCAL_SYMBOL: b2DynamicTree.h<258:3> [b2DynamicTree.h <258:3 258:3>]
LOCAL_SYMBOL: b2DynamicTree.h<258:3> [b2DynamicTree.h <280:3 280:3>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <259:19 259:26>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <260:4 260:11>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <261:4 261:11>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <262:4 262:11>]
LOCAL_SYMBOL: b2DynamicTree.h<259:19> [b2DynamicTree.h <264:46 264:53>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <264:12 264:16>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <266:8 266:12>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <272:8 272:12>]
LOCAL_SYMBOL: b2DynamicTree.h<264:12> [b2DynamicTree.h <275:19 275:23>]
LOCAL_SYMBOL: b2DynamicTree.h<267:4> [b2DynamicTree.h <267:4 267:4>]
LOCAL_SYMBOL: b2DynamicTree.h<267:4> [b2DynamicTree.h <270:4 270:4>]
LOCAL_SYMBOL: b2DynamicTree.h<273:4> [b2DynamicTree.h <273:4 273:4>]
LOCAL_SYMBOL: b2DynamicTree.h<273:4> [b2DynamicTree.h <279:4 279:4>]
LOCAL_SYMBOL: b2DynamicTree.h<276:12> [b2DynamicTree.h <276:12 276:12>]
LOCAL_SYMBOL: b2DynamicTree.h<276:12> [b2DynamicTree.h <277:40 277:40>]
LOCAL_SYMBOL: b2DynamicTree.h<276:12> [b2DynamicTree.h <278:40 278:40>]
LOCAL_SYMBOL: b2DynamicTree.h<282:3> [b2DynamicTree.h <282:3 282:3>]
LOCAL_SYMBOL: b2DynamicTree.h<282:3> [b2DynamicTree.h <285:3 285:3>]
LOCAL_SYMBOL: b2DynamicTree.h<29:1> [b2DynamicTree.h <29:1 29:1>]
LOCAL_SYMBOL: b2DynamicTree.h<29:1> [b2DynamicTree.h <51:1 51:1>]
LOCAL_SYMBOL: b2DynamicTree.h<31:2> [b2DynamicTree.h <31:2 31:2>]
LOCAL_SYMBOL: b2DynamicTree.h<31:2> [b2DynamicTree.h <33:2 33:2>]
LOCAL_SYMBOL: b2DynamicTree.h<41:2> [b2DynamicTree.h <41:2 41:2>]
LOCAL_SYMBOL: b2DynamicTree.h<41:2> [b2DynamicTree.h <44:2 44:2>]
LOCAL_SYMBOL: b2DynamicTree.h<62:1> [b2DynamicTree.h <62:1 62:1>]
LOCAL_SYMBOL: b2DynamicTree.h<62:1> [b2DynamicTree.h <154:1 154:1>]
LOCAL_SYMBOL: b2DynamicTree.h<71:34> [b2DynamicTree.h <71:34 71:37>]
LOCAL_SYMBOL: b2DynamicTree.h<71:46> [b2DynamicTree.h <71:46 71:53>]
LOCAL_SYMBOL: b2DynamicTree.h<74:26> [b2DynamicTree.h <74:26 74:32>]
LOCAL_SYMBOL: b2DynamicTree.h<80:23> [b2DynamicTree.h <80:23 80:29>]
LOCAL_SYMBOL: b2DynamicTree.h<80:46> [b2DynamicTree.h <80:46 80:50>]
LOCAL_SYMBOL: b2DynamicTree.h<80:67> [b2DynamicTree.h <80:67 80:78>]
LOCAL_SYMBOL: b2DynamicTree.h<84:26> [b2DynamicTree.h <84:26 84:32>]
LOCAL_SYMBOL: b2DynamicTree.h<87:33> [b2DynamicTree.h <87:33 87:39>]
LOCAL_SYMBOL: b2DynamicTree.h<91:21> [b2DynamicTree.h <91:21 91:21>]
LOCAL_SYMBOL: b2DynamicTree.h<91:21> [b2DynamicTree.h <92:13 92:13>]
LOCAL_SYMBOL: b2DynamicTree.h<92:16> [b2DynamicTree.h <92:16 92:23>]
LOCAL_SYMBOL: b2DynamicTree.h<92:40> [b2DynamicTree.h <92:40 92:43>]
LOCAL_SYMBOL: b2EdgeShape.h<28:1> [b2EdgeShape.h <28:1 28:1>]
LOCAL_SYMBOL: b2EdgeShape.h<28:1> [b2EdgeShape.h <60:1 60:1>]
LOCAL_SYMBOL: b2EdgeShape.h<33:25> [b2EdgeShape.h <33:25 33:26>]
LOCAL_SYMBOL: b2EdgeShape.h<33:43> [b2EdgeShape.h <33:43 33:44>]
LOCAL_SYMBOL: b2EdgeShape.h<36:35> [b2EdgeShape.h <36:35 36:43>]
LOCAL_SYMBOL: b2EdgeShape.h<42:36> [b2EdgeShape.h <42:36 42:44>]
LOCAL_SYMBOL: b2EdgeShape.h<42:61> [b2EdgeShape.h <42:61 42:61>]
LOCAL_SYMBOL: b2EdgeShape.h<45:32> [b2EdgeShape.h <45:32 45:37>]
LOCAL_SYMBOL: b2EdgeShape.h<45:62> [b2EdgeShape.h <45:62 45:66>]
LOCAL_SYMBOL: b2EdgeShape.h<46:24> [b2EdgeShape.h <46:24 46:32>]
LOCAL_SYMBOL: b2EdgeShape.h<46:41> [b2EdgeShape.h <46:41 46:50>]
LOCAL_SYMBOL: b2EdgeShape.h<49:27> [b2EdgeShape.h <49:27 49:30>]
LOCAL_SYMBOL: b2EdgeShape.h<49:52> [b2EdgeShape.h <49:52 49:60>]
LOCAL_SYMBOL: b2EdgeShape.h<49:69> [b2EdgeShape.h <49:69 49:78>]
LOCAL_SYMBOL: b2EdgeShape.h<52:31> [b2EdgeShape.h <52:31 52:38>]
LOCAL_SYMBOL: b2EdgeShape.h<52:49> [b2EdgeShape.h <52:49 52:55>]
LOCAL_SYMBOL: b2EdgeShape.h<63:1> [b2EdgeShape.h <63:1 63:1>]
LOCAL_SYMBOL: b2EdgeShape.h<63:1> [b2EdgeShape.h <72:1 72:1>]
LOCAL_SYMBOL: b2Fixture.h<108:1> [b2Fixture.h <108:1 108:1>]
LOCAL_SYMBOL: b2Fixture.h<108:1> [b2Fixture.h <236:1 236:1>]
LOCAL_SYMBOL: b2Fixture.h<121:22> [b2Fixture.h <121:22 121:27>]
LOCAL_SYMBOL: b2Fixture.h<130:37> [b2Fixture.h <130:37 130:42>]
LOCAL_SYMBOL: b2Fixture.h<153:25> [b2Fixture.h <153:25 153:28>]
LOCAL_SYMBOL: b2Fixture.h<157:31> [b2Fixture.h <157:31 157:31>]
LOCAL_SYMBOL: b2Fixture.h<162:32> [b2Fixture.h <162:32 162:37>]
LOCAL_SYMBOL: b2Fixture.h<162:62> [b2Fixture.h <162:62 162:66>]
LOCAL_SYMBOL: b2Fixture.h<162:75> [b2Fixture.h <162:75 162:84>]
LOCAL_SYMBOL: b2Fixture.h<167:31> [b2Fixture.h <167:31 167:38>]
LOCAL_SYMBOL: b2Fixture.h<171:26> [b2Fixture.h <171:26 171:32>]
LOCAL_SYMBOL: b2Fixture.h<181:27> [b2Fixture.h <181:27 181:34>]
LOCAL_SYMBOL: b2Fixture.h<188:30> [b2Fixture.h <188:30 188:40>]
LOCAL_SYMBOL: b2Fixture.h<193:30> [b2Fixture.h <193:30 193:39>]
LOCAL_SYMBOL: b2Fixture.h<196:18> [b2Fixture.h <196:18 196:26>]
LOCAL_SYMBOL: b2Fixture.h<209:32> [b2Fixture.h <209:32 209:40>]
LOCAL_SYMBOL: b2Fixture.h<209:51> [b2Fixture.h <209:51 209:54>]
LOCAL_SYMBOL: b2Fixture.h<209:77> [b2Fixture.h <209:77 209:79>]
LOCAL_SYMBOL: b2Fixture.h<210:33> [b2Fixture.h <210:33 210:41>]
LOCAL_SYMBOL: b2Fixture.h<213:35> [b2Fixture.h <213:35 213:44>]
LOCAL_SYMBOL: b2Fixture.h<213:66> [b2Fixture.h <213:66 213:67>]
LOCAL_SYMBOL: b2Fixture.h<214:36> [b2Fixture.h <214:36 214:45>]
LOCAL_SYMBOL: b2Fixture.h<216:33> [b2Fixture.h <216:33 216:42>]
LOCAL_SYMBOL: b2Fixture.h<216:64> [b2Fixture.h <216:64 216:66>]
LOCAL_SYMBOL: b2Fixture.h<216:88> [b2Fixture.h <216:88 216:90>]
LOCAL_SYMBOL: b2Fixture.h<239:1> [b2Fixture.h <239:1 239:1>]
LOCAL_SYMBOL: b2Fixture.h<239:1> [b2Fixture.h <241:1 241:1>]
LOCAL_SYMBOL: b2Fixture.h<244:1> [b2Fixture.h <244:1 244:1>]
LOCAL_SYMBOL: b2Fixture.h<244:1> [b2Fixture.h <246:1 246:1>]
LOCAL_SYMBOL: b2Fixture.h<249:1> [b2Fixture.h <249:1 249:1>]
LOCAL_SYMBOL: b2Fixture.h<249:1> [b2Fixture.h <251:1 251:1>]
LOCAL_SYMBOL: b2Fixture.h<254:1> [b2Fixture.h <254:1 254:1>]
LOCAL_SYMBOL: b2Fixture.h<254:1> [b2Fixture.h <256:1 256:1>]
LOCAL_SYMBOL: b2Fixture.h<259:1> [b2Fixture.h <259:1 259:1>]
LOCAL_SYMBOL: b2Fixture.h<259:1> [b2Fixture.h <261:1 261:1>]
LOCAL_SYMBOL: b2Fixture.h<264:1> [b2Fixture.h <264:1 264:1>]
LOCAL_SYMBOL: b2Fixture.h<264:1> [b2Fixture.h <266:1 266:1>]
LOCAL_SYMBOL: b2Fixture.h<268:42> [b2Fixture.h <268:42 268:45>]
LOCAL_SYMBOL: b2Fixture.h<268:42> [b2Fixture.h <270:15 270:18>]
LOCAL_SYMBOL: b2Fixture.h<269:1> [b2Fixture.h <269:1 269:1>]
LOCAL_SYMBOL: b2Fixture.h<269:1> [b2Fixture.h <271:1 271:1>]
LOCAL_SYMBOL: b2Fixture.h<274:1> [b2Fixture.h <274:1 274:1>]
LOCAL_SYMBOL: b2Fixture.h<274:1> [b2Fixture.h <276:1 276:1>]
LOCAL_SYMBOL: b2Fixture.h<279:1> [b2Fixture.h <279:1 279:1>]
LOCAL_SYMBOL: b2Fixture.h<279:1> [b2Fixture.h <281:1 281:1>]
LOCAL_SYMBOL: b2Fixture.h<284:1> [b2Fixture.h <284:1 284:1>]
LOCAL_SYMBOL: b2Fixture.h<284:1> [b2Fixture.h <286:1 286:1>]
LOCAL_SYMBOL: b2Fixture.h<289:1> [b2Fixture.h <289:1 289:1>]
LOCAL_SYMBOL: b2Fixture.h<289:1> [b2Fixture.h <291:1 291:1>]
LOCAL_SYMBOL: b2Fixture.h<293:43> [b2Fixture.h <293:43 293:49>]
LOCAL_SYMBOL: b2Fixture.h<293:43> [b2Fixture.h <295:21 295:27>]
LOCAL_SYMBOL: b2Fixture.h<293:43> [b2Fixture.h <295:33 295:39>]
LOCAL_SYMBOL: b2Fixture.h<293:43> [b2Fixture.h <296:14 296:20>]
LOCAL_SYMBOL: b2Fixture.h<294:1> [b2Fixture.h <294:1 294:1>]
LOCAL_SYMBOL: b2Fixture.h<294:1> [b2Fixture.h <297:1 297:1>]
LOCAL_SYMBOL: b2Fixture.h<300:1> [b2Fixture.h <300:1 300:1>]
LOCAL_SYMBOL: b2Fixture.h<300:1> [b2Fixture.h <302:1 302:1>]
LOCAL_SYMBOL: b2Fixture.h<305:1> [b2Fixture.h <305:1 305:1>]
LOCAL_SYMBOL: b2Fixture.h<305:1> [b2Fixture.h <307:1 307:1>]
LOCAL_SYMBOL: b2Fixture.h<309:44> [b2Fixture.h <309:44 309:51>]
LOCAL_SYMBOL: b2Fixture.h<309:44> [b2Fixture.h <311:15 311:22>]
LOCAL_SYMBOL: b2Fixture.h<310:1> [b2Fixture.h <310:1 310:1>]
LOCAL_SYMBOL: b2Fixture.h<310:1> [b2Fixture.h <312:1 312:1>]
LOCAL_SYMBOL: b2Fixture.h<315:1> [b2Fixture.h <315:1 315:1>]
LOCAL_SYMBOL: b2Fixture.h<315:1> [b2Fixture.h <317:1 317:1>]
LOCAL_SYMBOL: b2Fixture.h<319:47> [b2Fixture.h <319:47 319:57>]
LOCAL_SYMBOL: b2Fixture.h<319:47> [b2Fixture.h <321:18 321:28>]
LOCAL_SYMBOL: b2Fixture.h<320:1> [b2Fixture.h <320:1 320:1>]
LOCAL_SYMBOL: b2Fixture.h<320:1> [b2Fixture.h <322:1 322:1>]
LOCAL_SYMBOL: b2Fixture.h<324:48> [b2Fixture.h <324:48 324:48>]
LOCAL_SYMBOL: b2Fixture.h<324:48> [b2Fixture.h <326:52 326:52>]
LOCAL_SYMBOL: b2Fixture.h<325:1> [b2Fixture.h <325:1 325:1>]
LOCAL_SYMBOL: b2Fixture.h<325:1> [b2Fixture.h <327:1 327:1>]
LOCAL_SYMBOL: b2Fixture.h<329:49> [b2Fixture.h <329:49 329:54>]
LOCAL_SYMBOL: b2Fixture.h<329:49> [b2Fixture.h <331:26 331:31>]
LOCAL_SYMBOL: b2Fixture.h<329:79> [b2Fixture.h <329:79 329:83>]
LOCAL_SYMBOL: b2Fixture.h<329:79> [b2Fixture.h <331:34 331:38>]
LOCAL_SYMBOL: b2Fixture.h<329:92> [b2Fixture.h <329:92 329:101>]
LOCAL_SYMBOL: b2Fixture.h<329:92> [b2Fixture.h <331:65 331:74>]
LOCAL_SYMBOL: b2Fixture.h<330:1> [b2Fixture.h <330:1 330:1>]
LOCAL_SYMBOL: b2Fixture.h<330:1> [b2Fixture.h <332:1 332:1>]
LOCAL_SYMBOL: b2Fixture.h<334:48> [b2Fixture.h <334:48 334:55>]
LOCAL_SYMBOL: b2Fixture.h<334:48> [b2Fixture.h <336:23 336:30>]
LOCAL_SYMBOL: b2Fixture.h<335:1> [b2Fixture.h <335:1 335:1>]
LOCAL_SYMBOL: b2Fixture.h<335:1> [b2Fixture.h <337:1 337:1>]
LOCAL_SYMBOL: b2Fixture.h<339:47> [b2Fixture.h <339:47 339:56>]
LOCAL_SYMBOL: b2Fixture.h<339:47> [b2Fixture.h <341:16 341:25>]
LOCAL_SYMBOL: b2Fixture.h<339:47> [b2Fixture.h <341:30 341:39>]
LOCAL_SYMBOL: b2Fixture.h<339:47> [b2Fixture.h <342:19 342:28>]
LOCAL_SYMBOL: b2Fixture.h<33:1> [b2Fixture.h <33:1 33:1>]
LOCAL_SYMBOL: b2Fixture.h<33:1> [b2Fixture.h <52:1 52:1>]
LOCAL_SYMBOL: b2Fixture.h<340:1> [b2Fixture.h <340:1 340:1>]
LOCAL_SYMBOL: b2Fixture.h<340:1> [b2Fixture.h <343:1 343:1>]
LOCAL_SYMBOL: b2Fixture.h<35:2> [b2Fixture.h <35:2 35:2>]
LOCAL_SYMBOL: b2Fixture.h<35:2> [b2Fixture.h <39:2 39:2>]
LOCAL_SYMBOL: b2Fixture.h<57:1> [b2Fixture.h <57:1 57:1>]
LOCAL_SYMBOL: b2Fixture.h<57:1> [b2Fixture.h <91:1 91:1>]
LOCAL_SYMBOL: b2Fixture.h<60:2> [b2Fixture.h <60:2 60:2>]
LOCAL_SYMBOL: b2Fixture.h<60:2> [b2Fixture.h <67:2 67:2>]
LOCAL_SYMBOL: b2Fixture.h<95:1> [b2Fixture.h <95:1 95:1>]
LOCAL_SYMBOL: b2Fixture.h<95:1> [b2Fixture.h <100:1 100:1>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <27:20 27:20>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <47:18 47:18>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <51:4 51:4>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <53:15 53:15>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <53:46 53:46>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <54:42 54:42>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <65:2 65:2>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <78:2 78:2>]
LOCAL_SYMBOL: b2GrowableStack.h<27:20> [b2GrowableStack.h <79:2 79:2>]
LOCAL_SYMBOL: b2GrowableStack.h<27:29> [b2GrowableStack.h <27:29 27:29>]
LOCAL_SYMBOL: b2GrowableStack.h<27:29> [b2GrowableStack.h <35:16 35:16>]
LOCAL_SYMBOL: b2GrowableStack.h<27:29> [b2GrowableStack.h <79:12 79:12>]
LOCAL_SYMBOL: b2GrowableStack.h<29:1> [b2GrowableStack.h <29:1 29:1>]
LOCAL_SYMBOL: b2GrowableStack.h<29:1> [b2GrowableStack.h <82:1 82:1>]
LOCAL_SYMBOL: b2GrowableStack.h<32:2> [b2GrowableStack.h <32:2 32:2>]
LOCAL_SYMBOL: b2GrowableStack.h<32:2> [b2GrowableStack.h <36:2 36:2>]
LOCAL_SYMBOL: b2GrowableStack.h<39:2> [b2GrowableStack.h <39:2 39:2>]
LOCAL_SYMBOL: b2GrowableStack.h<39:2> [b2GrowableStack.h <45:2 45:2>]
LOCAL_SYMBOL: b2GrowableStack.h<41:3> [b2GrowableStack.h <41:3 41:3>]
LOCAL_SYMBOL: b2GrowableStack.h<41:3> [b2GrowableStack.h <44:3 44:3>]
LOCAL_SYMBOL: b2GrowableStack.h<47:21> [b2GrowableStack.h <47:21 47:27>]
LOCAL_SYMBOL: b2GrowableStack.h<47:21> [b2GrowableStack.h <61:22 61:28>]
LOCAL_SYMBOL: b2GrowableStack.h<48:2> [b2GrowableStack.h <48:2 48:2>]
LOCAL_SYMBOL: b2GrowableStack.h<48:2> [b2GrowableStack.h <63:2 63:2>]
LOCAL_SYMBOL: b2GrowableStack.h<50:3> [b2GrowableStack.h <50:3 50:3>]
LOCAL_SYMBOL: b2GrowableStack.h<50:3> [b2GrowableStack.h <59:3 59:3>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <51:7 51:9>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <54:20 54:22>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <55:8 55:10>]
LOCAL_SYMBOL: b2GrowableStack.h<51:7> [b2GrowableStack.h <57:12 57:14>]
LOCAL_SYMBOL: b2GrowableStack.h<56:4> [b2GrowableStack.h <56:4 56:4>]
LOCAL_SYMBOL: b2GrowableStack.h<56:4> [b2GrowableStack.h <58:4 58:4>]
LOCAL_SYMBOL: b2GrowableStack.h<66:2> [b2GrowableStack.h <66:2 66:2>]
LOCAL_SYMBOL: b2GrowableStack.h<66:2> [b2GrowableStack.h <70:2 70:2>]
LOCAL_SYMBOL: b2GrowableStack.h<73:2> [b2GrowableStack.h <73:2 73:2>]
LOCAL_SYMBOL: b2GrowableStack.h<73:2> [b2GrowableStack.h <75:2 75:2>]
LOCAL_SYMBOL: b2Island.h<35:1> [b2Island.h <35:1 35:1>]
LOCAL_SYMBOL: b2Island.h<35:1> [b2Island.h <91:1 91:1>]
LOCAL_SYMBOL: b2Island.h<37:17> [b2Island.h <37:17 37:28>]
LOCAL_SYMBOL: b2Island.h<37:37> [b2Island.h <37:37 37:51>]
LOCAL_SYMBOL: b2Island.h<37:60> [b2Island.h <37:60 37:72>]
LOCAL_SYMBOL: b2Island.h<38:22> [b2Island.h <38:22 38:30>]
LOCAL_SYMBOL: b2Island.h<38:52> [b2Island.h <38:52 38:59>]
LOCAL_SYMBOL: b2Island.h<42:2> [b2Island.h <42:2 42:2>]
LOCAL_SYMBOL: b2Island.h<42:2> [b2Island.h <46:2 46:2>]
LOCAL_SYMBOL: b2Island.h<48:24> [b2Island.h <48:24 48:30>]
LOCAL_SYMBOL: b2Island.h<48:51> [b2Island.h <48:51 48:54>]
LOCAL_SYMBOL: b2Island.h<48:71> [b2Island.h <48:71 48:77>]
LOCAL_SYMBOL: b2Island.h<48:85> [b2Island.h <48:85 48:94>]
LOCAL_SYMBOL: b2Island.h<50:34> [b2Island.h <50:34 50:40>]
LOCAL_SYMBOL: b2Island.h<50:49> [b2Island.h <50:49 50:57>]
LOCAL_SYMBOL: b2Island.h<50:66> [b2Island.h <50:66 50:74>]
LOCAL_SYMBOL: b2Island.h<52:19> [b2Island.h <52:19 52:22>]
LOCAL_SYMBOL: b2Island.h<52:19> [b2Island.h <55:3 55:6>]
LOCAL_SYMBOL: b2Island.h<52:19> [b2Island.h <56:27 56:30>]
LOCAL_SYMBOL: b2Island.h<53:2> [b2Island.h <53:2 53:2>]
LOCAL_SYMBOL: b2Island.h<53:2> [b2Island.h <58:2 58:2>]
LOCAL_SYMBOL: b2Island.h<60:22> [b2Island.h <60:22 60:28>]
LOCAL_SYMBOL: b2Island.h<60:22> [b2Island.h <63:34 63:40>]
LOCAL_SYMBOL: b2Island.h<61:2> [b2Island.h <61:2 61:2>]
LOCAL_SYMBOL: b2Island.h<61:2> [b2Island.h <64:2 64:2>]
LOCAL_SYMBOL: b2Island.h<66:20> [b2Island.h <66:20 66:24>]
LOCAL_SYMBOL: b2Island.h<66:20> [b2Island.h <69:30 69:34>]
LOCAL_SYMBOL: b2Island.h<67:2> [b2Island.h <67:2 67:2>]
LOCAL_SYMBOL: b2Island.h<67:2> [b2Island.h <70:2 70:2>]
LOCAL_SYMBOL: b2Island.h<72:49> [b2Island.h <72:49 72:59>]
LOCAL_SYMBOL: b2Joint.h<104:1> [b2Joint.h <104:1 104:1>]
LOCAL_SYMBOL: b2Joint.h<104:1> [b2Joint.h <184:1 184:1>]
LOCAL_SYMBOL: b2Joint.h<123:42> [b2Joint.h <123:42 123:47>]
LOCAL_SYMBOL: b2Joint.h<126:44> [b2Joint.h <126:44 126:49>]
LOCAL_SYMBOL: b2Joint.h<136:25> [b2Joint.h <136:25 136:28>]
LOCAL_SYMBOL: b2Joint.h<147:22> [b2Joint.h <147:22 147:22>]
LOCAL_SYMBOL: b2Joint.h<147:22> [b2Joint.h <147:82 147:82>]
LOCAL_SYMBOL: b2Joint.h<150:41> [b2Joint.h <150:41 150:49>]
LOCAL_SYMBOL: b2Joint.h<150:41> [b2Joint.h <150:66 150:74>]
LOCAL_SYMBOL: b2Joint.h<150:52> [b2Joint.h <150:52 150:52>]
LOCAL_SYMBOL: b2Joint.h<150:52> [b2Joint.h <150:79 150:79>]
LOCAL_SYMBOL: b2Joint.h<158:43> [b2Joint.h <158:43 158:45>]
LOCAL_SYMBOL: b2Joint.h<158:66> [b2Joint.h <158:66 158:74>]
LOCAL_SYMBOL: b2Joint.h<159:31> [b2Joint.h <159:31 159:35>]
LOCAL_SYMBOL: b2Joint.h<159:56> [b2Joint.h <159:56 159:64>]
LOCAL_SYMBOL: b2Joint.h<161:28> [b2Joint.h <161:28 161:30>]
LOCAL_SYMBOL: b2Joint.h<162:21> [b2Joint.h <162:21 162:21>]
LOCAL_SYMBOL: b2Joint.h<162:21> [b2Joint.h <162:22 162:22>]
LOCAL_SYMBOL: b2Joint.h<164:59> [b2Joint.h <164:59 164:62>]
LOCAL_SYMBOL: b2Joint.h<165:60> [b2Joint.h <165:60 165:63>]
LOCAL_SYMBOL: b2Joint.h<168:60> [b2Joint.h <168:60 168:63>]
LOCAL_SYMBOL: b2Joint.h<187:1> [b2Joint.h <187:1 187:1>]
LOCAL_SYMBOL: b2Joint.h<187:1> [b2Joint.h <189:1 189:1>]
LOCAL_SYMBOL: b2Joint.h<192:1> [b2Joint.h <192:1 192:1>]
LOCAL_SYMBOL: b2Joint.h<192:1> [b2Joint.h <194:1 194:1>]
LOCAL_SYMBOL: b2Joint.h<197:1> [b2Joint.h <197:1 197:1>]
LOCAL_SYMBOL: b2Joint.h<197:1> [b2Joint.h <199:1 199:1>]
LOCAL_SYMBOL: b2Joint.h<202:1> [b2Joint.h <202:1 202:1>]
LOCAL_SYMBOL: b2Joint.h<202:1> [b2Joint.h <204:1 204:1>]
LOCAL_SYMBOL: b2Joint.h<207:1> [b2Joint.h <207:1 207:1>]
LOCAL_SYMBOL: b2Joint.h<207:1> [b2Joint.h <209:1 209:1>]
LOCAL_SYMBOL: b2Joint.h<212:1> [b2Joint.h <212:1 212:1>]
LOCAL_SYMBOL: b2Joint.h<212:1> [b2Joint.h <214:1 214:1>]
LOCAL_SYMBOL: b2Joint.h<216:40> [b2Joint.h <216:40 216:43>]
LOCAL_SYMBOL: b2Joint.h<216:40> [b2Joint.h <218:15 218:18>]
LOCAL_SYMBOL: b2Joint.h<217:1> [b2Joint.h <217:1 217:1>]
LOCAL_SYMBOL: b2Joint.h<217:1> [b2Joint.h <219:1 219:1>]
LOCAL_SYMBOL: b2Joint.h<222:1> [b2Joint.h <222:1 222:1>]
LOCAL_SYMBOL: b2Joint.h<222:1> [b2Joint.h <224:1 224:1>]
LOCAL_SYMBOL: b2Joint.h<30:1> [b2Joint.h <30:1 30:1>]
LOCAL_SYMBOL: b2Joint.h<30:1> [b2Joint.h <43:1 43:1>]
LOCAL_SYMBOL: b2Joint.h<46:1> [b2Joint.h <46:1 46:1>]
LOCAL_SYMBOL: b2Joint.h<46:1> [b2Joint.h <51:1 51:1>]
LOCAL_SYMBOL: b2Joint.h<54:1> [b2Joint.h <54:1 54:1>]
LOCAL_SYMBOL: b2Joint.h<54:1> [b2Joint.h <58:1 58:1>]
LOCAL_SYMBOL: b2Joint.h<66:1> [b2Joint.h <66:1 66:1>]
LOCAL_SYMBOL: b2Joint.h<66:1> [b2Joint.h <71:1 71:1>]
LOCAL_SYMBOL: b2Joint.h<75:1> [b2Joint.h <75:1 75:1>]
LOCAL_SYMBOL: b2Joint.h<75:1> [b2Joint.h <99:1 99:1>]
LOCAL_SYMBOL: b2Joint.h<77:2> [b2Joint.h <77:2 77:2>]
LOCAL_SYMBOL: b2Joint.h<77:2> [b2Joint.h <83:2 83:2>]
LOCAL_SYMBOL: b2Math.h<102:2> [b2Math.h <102:2 102:2>]
LOCAL_SYMBOL: b2Math.h<102:2> [b2Math.h <104:2 104:2>]
LOCAL_SYMBOL: b2Math.h<109:2> [b2Math.h <109:2 109:2>]
LOCAL_SYMBOL: b2Math.h<109:2> [b2Math.h <111:2 111:2>]
LOCAL_SYMBOL: b2Math.h<115:2> [b2Math.h <115:2 115:2>]
LOCAL_SYMBOL: b2Math.h<115:2> [b2Math.h <126:2 126:2>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <116:11 116:16>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <117:7 117:12>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <121:30 121:35>]
LOCAL_SYMBOL: b2Math.h<116:11> [b2Math.h <125:10 125:15>]
LOCAL_SYMBOL: b2Math.h<118:3> [b2Math.h <118:3 118:3>]
LOCAL_SYMBOL: b2Math.h<118:3> [b2Math.h <120:3 120:3>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <121:11 121:19>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <122:8 122:16>]
LOCAL_SYMBOL: b2Math.h<121:11> [b2Math.h <123:8 123:16>]
LOCAL_SYMBOL: b2Math.h<130:2> [b2Math.h <130:2 130:2>]
LOCAL_SYMBOL: b2Math.h<130:2> [b2Math.h <132:2 132:2>]
LOCAL_SYMBOL: b2Math.h<136:2> [b2Math.h <136:2 136:2>]
LOCAL_SYMBOL: b2Math.h<136:2> [b2Math.h <138:2 138:2>]
LOCAL_SYMBOL: b2Math.h<145:1> [b2Math.h <145:1 145:1>]
LOCAL_SYMBOL: b2Math.h<145:1> [b2Math.h <180:1 180:1>]
LOCAL_SYMBOL: b2Math.h<147:11> [b2Math.h <147:11 147:11>]
LOCAL_SYMBOL: b2Math.h<147:11> [b2Math.h <147:12 147:12>]
LOCAL_SYMBOL: b2Math.h<150:17> [b2Math.h <150:17 150:19>]
LOCAL_SYMBOL: b2Math.h<150:17> [b2Math.h <150:52 150:54>]
LOCAL_SYMBOL: b2Math.h<150:30> [b2Math.h <150:30 150:32>]
LOCAL_SYMBOL: b2Math.h<150:30> [b2Math.h <150:60 150:62>]
LOCAL_SYMBOL: b2Math.h<150:43> [b2Math.h <150:43 150:45>]
LOCAL_SYMBOL: b2Math.h<150:43> [b2Math.h <150:68 150:70>]
LOCAL_SYMBOL: b2Math.h<150:73> [b2Math.h <150:73 150:73>]
LOCAL_SYMBOL: b2Math.h<150:73> [b2Math.h <150:74 150:74>]
LOCAL_SYMBOL: b2Math.h<153:17> [b2Math.h <153:17 153:17>]
LOCAL_SYMBOL: b2Math.h<153:17> [b2Math.h <153:49 153:49>]
LOCAL_SYMBOL: b2Math.h<156:19> [b2Math.h <156:19 156:20>]
LOCAL_SYMBOL: b2Math.h<156:19> [b2Math.h <156:53 156:54>]
LOCAL_SYMBOL: b2Math.h<156:31> [b2Math.h <156:31 156:32>]
LOCAL_SYMBOL: b2Math.h<156:31> [b2Math.h <156:61 156:62>]
LOCAL_SYMBOL: b2Math.h<156:43> [b2Math.h <156:43 156:44>]
LOCAL_SYMBOL: b2Math.h<156:43> [b2Math.h <156:69 156:70>]
LOCAL_SYMBOL: b2Math.h<156:47> [b2Math.h <156:47 156:47>]
LOCAL_SYMBOL: b2Math.h<156:47> [b2Math.h <156:73 156:73>]
LOCAL_SYMBOL: b2Math.h<159:28> [b2Math.h <159:28 159:28>]
LOCAL_SYMBOL: b2Math.h<159:28> [b2Math.h <159:69 159:69>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:37 159:37>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:40 159:40>]
LOCAL_SYMBOL: b2Math.h<159:37> [b2Math.h <159:66 159:66>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <162:34 162:34>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:8 164:8>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:18 164:18>]
LOCAL_SYMBOL: b2Math.h<162:34> [b2Math.h <164:28 164:28>]
LOCAL_SYMBOL: b2Math.h<163:2> [b2Math.h <163:2 163:2>]
LOCAL_SYMBOL: b2Math.h<163:2> [b2Math.h <165:2 165:2>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <168:34 168:34>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:8 170:8>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:18 170:18>]
LOCAL_SYMBOL: b2Math.h<168:34> [b2Math.h <170:28 170:28>]
LOCAL_SYMBOL: b2Math.h<169:2> [b2Math.h <169:2 169:2>]
LOCAL_SYMBOL: b2Math.h<169:2> [b2Math.h <171:2 171:2>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <174:28 174:28>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:8 176:8>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:16 176:16>]
LOCAL_SYMBOL: b2Math.h<174:28> [b2Math.h <176:24 176:24>]
LOCAL_SYMBOL: b2Math.h<175:2> [b2Math.h <175:2 175:2>]
LOCAL_SYMBOL: b2Math.h<175:2> [b2Math.h <177:2 177:2>]
LOCAL_SYMBOL: b2Math.h<184:1> [b2Math.h <184:1 184:1>]
LOCAL_SYMBOL: b2Math.h<184:1> [b2Math.h <254:1 254:1>]
LOCAL_SYMBOL: b2Math.h<186:12> [b2Math.h <186:12 186:12>]
LOCAL_SYMBOL: b2Math.h<186:12> [b2Math.h <186:13 186:13>]
LOCAL_SYMBOL: b2Math.h<189:24> [b2Math.h <189:24 189:25>]
LOCAL_SYMBOL: b2Math.h<189:24> [b2Math.h <191:8 191:9>]
LOCAL_SYMBOL: b2Math.h<189:42> [b2Math.h <189:42 189:43>]
LOCAL_SYMBOL: b2Math.h<189:42> [b2Math.h <192:8 192:9>]
LOCAL_SYMBOL: b2Math.h<190:2> [b2Math.h <190:2 190:2>]
LOCAL_SYMBOL: b2Math.h<190:2> [b2Math.h <193:2 193:2>]
LOCAL_SYMBOL: b2Math.h<196:18> [b2Math.h <196:18 196:20>]
LOCAL_SYMBOL: b2Math.h<196:18> [b2Math.h <198:10 198:12>]
LOCAL_SYMBOL: b2Math.h<196:31> [b2Math.h <196:31 196:33>]
LOCAL_SYMBOL: b2Math.h<196:31> [b2Math.h <199:10 199:12>]
LOCAL_SYMBOL: b2Math.h<196:44> [b2Math.h <196:44 196:46>]
LOCAL_SYMBOL: b2Math.h<196:44> [b2Math.h <198:22 198:24>]
LOCAL_SYMBOL: b2Math.h<196:57> [b2Math.h <196:57 196:59>]
LOCAL_SYMBOL: b2Math.h<196:57> [b2Math.h <199:22 199:24>]
LOCAL_SYMBOL: b2Math.h<197:2> [b2Math.h <197:2 197:2>]
LOCAL_SYMBOL: b2Math.h<197:2> [b2Math.h <200:2 200:2>]
LOCAL_SYMBOL: b2Math.h<203:25> [b2Math.h <203:25 203:26>]
LOCAL_SYMBOL: b2Math.h<203:25> [b2Math.h <205:8 205:9>]
LOCAL_SYMBOL: b2Math.h<203:43> [b2Math.h <203:43 203:44>]
LOCAL_SYMBOL: b2Math.h<203:43> [b2Math.h <206:8 206:9>]
LOCAL_SYMBOL: b2Math.h<204:2> [b2Math.h <204:2 204:2>]
LOCAL_SYMBOL: b2Math.h<204:2> [b2Math.h <207:2 207:2>]
LOCAL_SYMBOL: b2Math.h<211:2> [b2Math.h <211:2 211:2>]
LOCAL_SYMBOL: b2Math.h<211:2> [b2Math.h <214:2 214:2>]
LOCAL_SYMBOL: b2Math.h<218:2> [b2Math.h <218:2 218:2>]
LOCAL_SYMBOL: b2Math.h<218:2> [b2Math.h <221:2 221:2>]
LOCAL_SYMBOL: b2Math.h<224:2> [b2Math.h <224:2 224:2>]
LOCAL_SYMBOL: b2Math.h<224:2> [b2Math.h <235:2 235:2>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <225:11 225:11>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <227:17 227:17>]
LOCAL_SYMBOL: b2Math.h<225:11> [b2Math.h <233:38 233:38>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <225:21 225:21>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <227:25 227:25>]
LOCAL_SYMBOL: b2Math.h<225:21> [b2Math.h <232:38 232:38>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <225:31 225:31>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <227:29 227:29>]
LOCAL_SYMBOL: b2Math.h<225:31> [b2Math.h <233:19 233:19>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <225:41 225:41>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <227:21 227:21>]
LOCAL_SYMBOL: b2Math.h<225:41> [b2Math.h <232:19 232:19>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <226:11 226:11>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <232:3 232:3>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <232:22 232:22>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <233:3 233:3>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <233:22 233:22>]
LOCAL_SYMBOL: b2Math.h<226:11> [b2Math.h <234:10 234:10>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <227:11 227:13>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <228:7 228:9>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <230:4 230:6>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <230:17 230:19>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <232:13 232:15>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <232:32 232:34>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <233:13 233:15>]
LOCAL_SYMBOL: b2Math.h<227:11> [b2Math.h <233:32 233:34>]
LOCAL_SYMBOL: b2Math.h<229:3> [b2Math.h <229:3 229:3>]
LOCAL_SYMBOL: b2Math.h<229:3> [b2Math.h <231:3 231:3>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <239:29 239:29>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <248:22 248:22>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <248:34 248:34>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <249:22 249:22>]
LOCAL_SYMBOL: b2Math.h<239:29> [b2Math.h <249:34 249:34>]
LOCAL_SYMBOL: b2Math.h<240:2> [b2Math.h <240:2 240:2>]
LOCAL_SYMBOL: b2Math.h<240:2> [b2Math.h <251:2 251:2>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <241:11 241:13>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <242:17 242:19>]
LOCAL_SYMBOL: b2Math.h<241:11> [b2Math.h <249:16 249:18>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <241:23 241:25>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <242:29 242:31>]
LOCAL_SYMBOL: b2Math.h<241:23> [b2Math.h <248:28 248:30>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <241:35 241:37>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <242:35 242:37>]
LOCAL_SYMBOL: b2Math.h<241:35> [b2Math.h <249:28 249:30>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <241:47 241:49>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <242:23 242:25>]
LOCAL_SYMBOL: b2Math.h<241:47> [b2Math.h <248:16 248:18>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <242:11 242:13>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <243:7 243:9>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <245:4 245:6>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <245:17 245:19>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <248:9 248:11>]
LOCAL_SYMBOL: b2Math.h<242:11> [b2Math.h <249:9 249:11>]
LOCAL_SYMBOL: b2Math.h<244:3> [b2Math.h <244:3 244:3>]
LOCAL_SYMBOL: b2Math.h<244:3> [b2Math.h <246:3 246:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <247:10 247:10>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <248:3 248:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <249:3 249:3>]
LOCAL_SYMBOL: b2Math.h<247:10> [b2Math.h <250:10 250:10>]
LOCAL_SYMBOL: b2Math.h<258:1> [b2Math.h <258:1 258:1>]
LOCAL_SYMBOL: b2Math.h<258:1> [b2Math.h <296:1 296:1>]
LOCAL_SYMBOL: b2Math.h<260:12> [b2Math.h <260:12 260:12>]
LOCAL_SYMBOL: b2Math.h<260:12> [b2Math.h <260:13 260:13>]
LOCAL_SYMBOL: b2Math.h<263:24> [b2Math.h <263:24 263:25>]
LOCAL_SYMBOL: b2Math.h<263:24> [b2Math.h <265:8 265:9>]
LOCAL_SYMBOL: b2Math.h<263:42> [b2Math.h <263:42 263:43>]
LOCAL_SYMBOL: b2Math.h<263:42> [b2Math.h <266:8 266:9>]
LOCAL_SYMBOL: b2Math.h<263:60> [b2Math.h <263:60 263:61>]
LOCAL_SYMBOL: b2Math.h<263:60> [b2Math.h <267:8 267:9>]
LOCAL_SYMBOL: b2Math.h<264:2> [b2Math.h <264:2 264:2>]
LOCAL_SYMBOL: b2Math.h<264:2> [b2Math.h <268:2 268:2>]
LOCAL_SYMBOL: b2Math.h<26:31> [b2Math.h <26:31 26:31>]
LOCAL_SYMBOL: b2Math.h<26:31> [b2Math.h <28:40 28:40>]
LOCAL_SYMBOL: b2Math.h<272:2> [b2Math.h <272:2 272:2>]
LOCAL_SYMBOL: b2Math.h<272:2> [b2Math.h <276:2 276:2>]
LOCAL_SYMBOL: b2Math.h<27:1> [b2Math.h <27:1 27:1>]
LOCAL_SYMBOL: b2Math.h<27:1> [b2Math.h <30:1 30:1>]
LOCAL_SYMBOL: b2Math.h<280:31> [b2Math.h <280:31 280:31>]
LOCAL_SYMBOL: b2Math.h<285:31> [b2Math.h <285:31 285:31>]
LOCAL_SYMBOL: b2Math.h<289:29> [b2Math.h <289:29 289:29>]
LOCAL_SYMBOL: b2Math.h<28:8> [b2Math.h <28:8 28:9>]
LOCAL_SYMBOL: b2Math.h<28:8> [b2Math.h <29:10 29:11>]
LOCAL_SYMBOL: b2Math.h<293:32> [b2Math.h <293:32 293:32>]
LOCAL_SYMBOL: b2Math.h<300:1> [b2Math.h <300:1 300:1>]
LOCAL_SYMBOL: b2Math.h<300:1> [b2Math.h <346:1 346:1>]
LOCAL_SYMBOL: b2Math.h<301:10> [b2Math.h <301:10 301:10>]
LOCAL_SYMBOL: b2Math.h<301:10> [b2Math.h <301:11 301:11>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <304:25 304:29>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <307:12 307:16>]
LOCAL_SYMBOL: b2Math.h<304:25> [b2Math.h <308:12 308:16>]
LOCAL_SYMBOL: b2Math.h<305:2> [b2Math.h <305:2 305:2>]
LOCAL_SYMBOL: b2Math.h<305:2> [b2Math.h <309:2 309:2>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <312:19 312:23>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <315:12 315:16>]
LOCAL_SYMBOL: b2Math.h<312:19> [b2Math.h <316:12 316:16>]
LOCAL_SYMBOL: b2Math.h<313:2> [b2Math.h <313:2 313:2>]
LOCAL_SYMBOL: b2Math.h<313:2> [b2Math.h <317:2 317:2>]
LOCAL_SYMBOL: b2Math.h<321:2> [b2Math.h <321:2 321:2>]
LOCAL_SYMBOL: b2Math.h<321:2> [b2Math.h <324:2 324:2>]
LOCAL_SYMBOL: b2Math.h<328:2> [b2Math.h <328:2 328:2>]
LOCAL_SYMBOL: b2Math.h<328:2> [b2Math.h <330:2 330:2>]
LOCAL_SYMBOL: b2Math.h<334:2> [b2Math.h <334:2 334:2>]
LOCAL_SYMBOL: b2Math.h<334:2> [b2Math.h <336:2 336:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <33:34 33:34>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <41:14 41:14>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <42:25 42:25>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <44:2 44:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:2 45:2>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:6 45:6>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:26 45:26>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <45:30 45:30>]
LOCAL_SYMBOL: b2Math.h<33:34> [b2Math.h <46:9 46:9>]
LOCAL_SYMBOL: b2Math.h<340:2> [b2Math.h <340:2 340:2>]
LOCAL_SYMBOL: b2Math.h<340:2> [b2Math.h <342:2 342:2>]
LOCAL_SYMBOL: b2Math.h<34:1> [b2Math.h <34:1 34:1>]
LOCAL_SYMBOL: b2Math.h<34:1> [b2Math.h <47:1 47:1>]
LOCAL_SYMBOL: b2Math.h<351:1> [b2Math.h <351:1 351:1>]
LOCAL_SYMBOL: b2Math.h<351:1> [b2Math.h <374:1 374:1>]
LOCAL_SYMBOL: b2Math.h<353:16> [b2Math.h <353:16 353:16>]
LOCAL_SYMBOL: b2Math.h<353:16> [b2Math.h <353:17 353:17>]
LOCAL_SYMBOL: b2Math.h<356:28> [b2Math.h <356:28 356:35>]
LOCAL_SYMBOL: b2Math.h<356:28> [b2Math.h <356:65 356:72>]
LOCAL_SYMBOL: b2Math.h<356:51> [b2Math.h <356:51 356:58>]
LOCAL_SYMBOL: b2Math.h<356:51> [b2Math.h <356:78 356:85>]
LOCAL_SYMBOL: b2Math.h<356:88> [b2Math.h <356:88 356:88>]
LOCAL_SYMBOL: b2Math.h<356:88> [b2Math.h <356:89 356:89>]
LOCAL_SYMBOL: b2Math.h<360:2> [b2Math.h <360:2 360:2>]
LOCAL_SYMBOL: b2Math.h<360:2> [b2Math.h <363:2 363:2>]
LOCAL_SYMBOL: b2Math.h<366:25> [b2Math.h <366:25 366:32>]
LOCAL_SYMBOL: b2Math.h<366:25> [b2Math.h <368:7 368:14>]
LOCAL_SYMBOL: b2Math.h<366:43> [b2Math.h <366:43 366:47>]
LOCAL_SYMBOL: b2Math.h<366:43> [b2Math.h <369:9 369:13>]
LOCAL_SYMBOL: b2Math.h<367:2> [b2Math.h <367:2 367:2>]
LOCAL_SYMBOL: b2Math.h<367:2> [b2Math.h <370:2 370:2>]
LOCAL_SYMBOL: b2Math.h<36:2> [b2Math.h <36:2 36:2>]
LOCAL_SYMBOL: b2Math.h<36:2> [b2Math.h <39:2 39:2>]
LOCAL_SYMBOL: b2Math.h<381:1> [b2Math.h <381:1 381:1>]
LOCAL_SYMBOL: b2Math.h<381:1> [b2Math.h <400:1 400:1>]
LOCAL_SYMBOL: b2Math.h<384:33> [b2Math.h <384:33 384:35>]
LOCAL_SYMBOL: b2Math.h<384:46> [b2Math.h <384:46 384:49>]
LOCAL_SYMBOL: b2Math.h<388:23> [b2Math.h <388:23 388:27>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <39:4 39:10>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <41:2 41:8>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <43:2 43:8>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <43:28 43:34>]
LOCAL_SYMBOL: b2Math.h<39:4> [b2Math.h <44:6 44:12>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <406:36 406:36>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <408:9 408:9>]
LOCAL_SYMBOL: b2Math.h<406:36> [b2Math.h <408:21 408:21>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <406:53 406:53>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <408:15 408:15>]
LOCAL_SYMBOL: b2Math.h<406:53> [b2Math.h <408:27 408:27>]
LOCAL_SYMBOL: b2Math.h<407:1> [b2Math.h <407:1 407:1>]
LOCAL_SYMBOL: b2Math.h<407:1> [b2Math.h <409:1 409:1>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <412:38 412:38>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <414:9 414:9>]
LOCAL_SYMBOL: b2Math.h<412:38> [b2Math.h <414:21 414:21>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <412:55 412:55>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <414:15 414:15>]
LOCAL_SYMBOL: b2Math.h<412:55> [b2Math.h <414:27 414:27>]
LOCAL_SYMBOL: b2Math.h<413:1> [b2Math.h <413:1 413:1>]
LOCAL_SYMBOL: b2Math.h<413:1> [b2Math.h <415:1 415:1>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <419:37 419:37>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <421:20 421:20>]
LOCAL_SYMBOL: b2Math.h<419:37> [b2Math.h <421:30 421:30>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <419:48 419:48>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <421:16 421:16>]
LOCAL_SYMBOL: b2Math.h<419:48> [b2Math.h <421:26 421:26>]
LOCAL_SYMBOL: b2Math.h<420:1> [b2Math.h <420:1 420:1>]
LOCAL_SYMBOL: b2Math.h<420:1> [b2Math.h <422:1 422:1>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <426:31 426:31>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <428:17 428:17>]
LOCAL_SYMBOL: b2Math.h<426:31> [b2Math.h <428:26 428:26>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <426:48 426:48>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <428:21 428:21>]
LOCAL_SYMBOL: b2Math.h<426:48> [b2Math.h <428:30 428:30>]
LOCAL_SYMBOL: b2Math.h<427:1> [b2Math.h <427:1 427:1>]
LOCAL_SYMBOL: b2Math.h<427:1> [b2Math.h <429:1 429:1>]
LOCAL_SYMBOL: b2Math.h<42:10> [b2Math.h <42:10 42:14>]
LOCAL_SYMBOL: b2Math.h<42:10> [b2Math.h <45:18 45:22>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <433:36 433:36>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:16 435:16>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:31 435:31>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:45 435:45>]
LOCAL_SYMBOL: b2Math.h<433:36> [b2Math.h <435:60 435:60>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <433:53 433:53>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:25 435:25>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:40 435:40>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:54 435:54>]
LOCAL_SYMBOL: b2Math.h<433:53> [b2Math.h <435:69 435:69>]
LOCAL_SYMBOL: b2Math.h<434:1> [b2Math.h <434:1 434:1>]
LOCAL_SYMBOL: b2Math.h<434:1> [b2Math.h <436:1 436:1>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <440:37 440:37>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <442:25 442:25>]
LOCAL_SYMBOL: b2Math.h<440:37> [b2Math.h <442:41 442:41>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <440:54 440:54>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <442:22 442:22>]
LOCAL_SYMBOL: b2Math.h<440:54> [b2Math.h <442:38 442:38>]
LOCAL_SYMBOL: b2Math.h<441:1> [b2Math.h <441:1 441:1>]
LOCAL_SYMBOL: b2Math.h<441:1> [b2Math.h <443:1 443:1>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <446:41 446:41>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <448:16 448:16>]
LOCAL_SYMBOL: b2Math.h<446:41> [b2Math.h <448:27 448:27>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <446:58 446:58>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <448:22 448:22>]
LOCAL_SYMBOL: b2Math.h<446:58> [b2Math.h <448:33 448:33>]
LOCAL_SYMBOL: b2Math.h<447:1> [b2Math.h <447:1 447:1>]
LOCAL_SYMBOL: b2Math.h<447:1> [b2Math.h <449:1 449:1>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <452:41 452:41>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <454:16 454:16>]
LOCAL_SYMBOL: b2Math.h<452:41> [b2Math.h <454:27 454:27>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <452:58 452:58>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <454:22 454:22>]
LOCAL_SYMBOL: b2Math.h<452:58> [b2Math.h <454:33 454:33>]
LOCAL_SYMBOL: b2Math.h<453:1> [b2Math.h <453:1 453:1>]
LOCAL_SYMBOL: b2Math.h<453:1> [b2Math.h <455:1 455:1>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <457:35 457:35>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <459:16 459:16>]
LOCAL_SYMBOL: b2Math.h<457:35> [b2Math.h <459:25 459:25>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <457:52 457:52>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <459:20 459:20>]
LOCAL_SYMBOL: b2Math.h<457:52> [b2Math.h <459:29 459:29>]
LOCAL_SYMBOL: b2Math.h<458:1> [b2Math.h <458:1 458:1>]
LOCAL_SYMBOL: b2Math.h<458:1> [b2Math.h <460:1 460:1>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <462:40 462:40>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <464:9 464:9>]
LOCAL_SYMBOL: b2Math.h<462:40> [b2Math.h <464:23 464:23>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <462:57 462:57>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <464:16 464:16>]
LOCAL_SYMBOL: b2Math.h<462:57> [b2Math.h <464:30 464:30>]
LOCAL_SYMBOL: b2Math.h<463:1> [b2Math.h <463:1 463:1>]
LOCAL_SYMBOL: b2Math.h<463:1> [b2Math.h <465:1 465:1>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <467:40 467:40>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <469:9 469:9>]
LOCAL_SYMBOL: b2Math.h<467:40> [b2Math.h <469:23 469:23>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <467:57 467:57>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <469:16 469:16>]
LOCAL_SYMBOL: b2Math.h<467:57> [b2Math.h <469:30 469:30>]
LOCAL_SYMBOL: b2Math.h<468:1> [b2Math.h <468:1 468:1>]
LOCAL_SYMBOL: b2Math.h<468:1> [b2Math.h <470:1 470:1>]
LOCAL_SYMBOL: b2Math.h<472:41> [b2Math.h <472:41 472:41>]
LOCAL_SYMBOL: b2Math.h<472:41> [b2Math.h <474:13 474:13>]
LOCAL_SYMBOL: b2Math.h<472:58> [b2Math.h <472:58 472:58>]
LOCAL_SYMBOL: b2Math.h<472:58> [b2Math.h <474:17 474:17>]
LOCAL_SYMBOL: b2Math.h<473:1> [b2Math.h <473:1 473:1>]
LOCAL_SYMBOL: b2Math.h<473:1> [b2Math.h <476:1 476:1>]
LOCAL_SYMBOL: b2Math.h<474:9> [b2Math.h <474:9 474:9>]
LOCAL_SYMBOL: b2Math.h<474:9> [b2Math.h <475:9 475:9>]
LOCAL_SYMBOL: b2Math.h<478:48> [b2Math.h <478:48 478:48>]
LOCAL_SYMBOL: b2Math.h<478:48> [b2Math.h <480:13 480:13>]
LOCAL_SYMBOL: b2Math.h<478:65> [b2Math.h <478:65 478:65>]
LOCAL_SYMBOL: b2Math.h<478:65> [b2Math.h <480:17 480:17>]
LOCAL_SYMBOL: b2Math.h<479:1> [b2Math.h <479:1 479:1>]
LOCAL_SYMBOL: b2Math.h<479:1> [b2Math.h <482:1 482:1>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <480:9 480:9>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <481:15 481:15>]
LOCAL_SYMBOL: b2Math.h<480:9> [b2Math.h <481:18 481:18>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <484:35 484:35>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:16 486:16>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:25 486:25>]
LOCAL_SYMBOL: b2Math.h<484:35> [b2Math.h <486:34 486:34>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <484:52 484:52>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:20 486:20>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:29 486:29>]
LOCAL_SYMBOL: b2Math.h<484:52> [b2Math.h <486:38 486:38>]
LOCAL_SYMBOL: b2Math.h<485:1> [b2Math.h <485:1 485:1>]
LOCAL_SYMBOL: b2Math.h<485:1> [b2Math.h <487:1 487:1>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <490:41 490:41>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:16 492:16>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:27 492:27>]
LOCAL_SYMBOL: b2Math.h<490:41> [b2Math.h <492:38 492:38>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <490:58 490:58>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:22 492:22>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:33 492:33>]
LOCAL_SYMBOL: b2Math.h<490:58> [b2Math.h <492:44 492:44>]
LOCAL_SYMBOL: b2Math.h<491:1> [b2Math.h <491:1 491:1>]
LOCAL_SYMBOL: b2Math.h<491:1> [b2Math.h <493:1 493:1>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <496:41 496:41>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:16 498:16>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:27 498:27>]
LOCAL_SYMBOL: b2Math.h<496:41> [b2Math.h <498:38 498:38>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <496:58 496:58>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:22 498:22>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:33 498:33>]
LOCAL_SYMBOL: b2Math.h<496:58> [b2Math.h <498:44 498:44>]
LOCAL_SYMBOL: b2Math.h<497:1> [b2Math.h <497:1 497:1>]
LOCAL_SYMBOL: b2Math.h<497:1> [b2Math.h <499:1 499:1>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <502:36 502:36>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:9 504:9>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:21 504:21>]
LOCAL_SYMBOL: b2Math.h<502:36> [b2Math.h <504:33 504:33>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <502:53 502:53>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:15 504:15>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:27 504:27>]
LOCAL_SYMBOL: b2Math.h<502:53> [b2Math.h <504:39 504:39>]
LOCAL_SYMBOL: b2Math.h<503:1> [b2Math.h <503:1 503:1>]
LOCAL_SYMBOL: b2Math.h<503:1> [b2Math.h <505:1 505:1>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <508:37 508:37>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:16 510:16>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:28 510:28>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:39 510:39>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:51 510:51>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:62 510:62>]
LOCAL_SYMBOL: b2Math.h<508:37> [b2Math.h <510:74 510:74>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <508:54 508:54>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:22 510:22>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:34 510:34>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:45 510:45>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:57 510:57>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:68 510:68>]
LOCAL_SYMBOL: b2Math.h<508:54> [b2Math.h <510:80 510:80>]
LOCAL_SYMBOL: b2Math.h<509:1> [b2Math.h <509:1 509:1>]
LOCAL_SYMBOL: b2Math.h<509:1> [b2Math.h <511:1 511:1>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <513:43 513:43>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <515:17 515:17>]
LOCAL_SYMBOL: b2Math.h<513:43> [b2Math.h <515:30 515:30>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <513:61 513:61>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <515:24 515:24>]
LOCAL_SYMBOL: b2Math.h<513:61> [b2Math.h <515:37 515:37>]
LOCAL_SYMBOL: b2Math.h<514:1> [b2Math.h <514:1 514:1>]
LOCAL_SYMBOL: b2Math.h<514:1> [b2Math.h <516:1 516:1>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <519:37 519:37>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <521:23 521:23>]
LOCAL_SYMBOL: b2Math.h<519:37> [b2Math.h <521:39 521:39>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <519:55 519:55>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <521:26 521:26>]
LOCAL_SYMBOL: b2Math.h<519:55> [b2Math.h <521:42 521:42>]
LOCAL_SYMBOL: b2Math.h<520:1> [b2Math.h <520:1 520:1>]
LOCAL_SYMBOL: b2Math.h<520:1> [b2Math.h <522:1 522:1>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <525:38 525:38>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <527:18 527:18>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <527:37 527:37>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <528:18 528:18>]
LOCAL_SYMBOL: b2Math.h<525:38> [b2Math.h <528:37 528:37>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <525:56 525:56>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <527:24 527:24>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <527:43 527:43>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <528:24 528:24>]
LOCAL_SYMBOL: b2Math.h<525:56> [b2Math.h <528:43 528:43>]
LOCAL_SYMBOL: b2Math.h<526:1> [b2Math.h <526:1 526:1>]
LOCAL_SYMBOL: b2Math.h<526:1> [b2Math.h <530:1 530:1>]
LOCAL_SYMBOL: b2Math.h<527:9> [b2Math.h <527:9 527:10>]
LOCAL_SYMBOL: b2Math.h<527:9> [b2Math.h <529:17 529:18>]
LOCAL_SYMBOL: b2Math.h<528:9> [b2Math.h <528:9 528:10>]
LOCAL_SYMBOL: b2Math.h<528:9> [b2Math.h <529:21 529:22>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <533:36 533:36>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:15 535:15>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:28 535:28>]
LOCAL_SYMBOL: b2Math.h<533:36> [b2Math.h <535:41 535:41>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <533:53 533:53>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:9 535:9>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:22 535:22>]
LOCAL_SYMBOL: b2Math.h<533:53> [b2Math.h <535:35 535:35>]
LOCAL_SYMBOL: b2Math.h<534:1> [b2Math.h <534:1 534:1>]
LOCAL_SYMBOL: b2Math.h<534:1> [b2Math.h <536:1 536:1>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <539:38 539:38>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:16 541:16>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:31 541:31>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:45 541:45>]
LOCAL_SYMBOL: b2Math.h<539:38> [b2Math.h <541:60 541:60>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <539:55 539:55>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:25 541:25>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:40 541:40>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:54 541:54>]
LOCAL_SYMBOL: b2Math.h<539:55> [b2Math.h <541:69 541:69>]
LOCAL_SYMBOL: b2Math.h<540:1> [b2Math.h <540:1 540:1>]
LOCAL_SYMBOL: b2Math.h<540:1> [b2Math.h <542:1 542:1>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <545:33 545:33>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <552:9 552:9>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <552:21 552:21>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <553:9 553:9>]
LOCAL_SYMBOL: b2Math.h<545:33> [b2Math.h <553:21 553:21>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <545:49 545:49>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <552:15 552:15>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <552:27 552:27>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <553:15 553:15>]
LOCAL_SYMBOL: b2Math.h<545:49> [b2Math.h <553:27 553:27>]
LOCAL_SYMBOL: b2Math.h<546:1> [b2Math.h <546:1 546:1>]
LOCAL_SYMBOL: b2Math.h<546:1> [b2Math.h <555:1 555:1>]
LOCAL_SYMBOL: b2Math.h<54:1> [b2Math.h <54:1 54:1>]
LOCAL_SYMBOL: b2Math.h<54:1> [b2Math.h <141:1 141:1>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <551:8 551:9>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <552:2 552:3>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <553:2 553:3>]
LOCAL_SYMBOL: b2Math.h<551:8> [b2Math.h <554:9 554:10>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <558:34 558:34>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <565:9 565:9>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <565:21 565:21>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <566:9 566:9>]
LOCAL_SYMBOL: b2Math.h<558:34> [b2Math.h <566:21 566:21>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <558:50 558:50>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <565:15 565:15>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <565:27 565:27>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <566:15 566:15>]
LOCAL_SYMBOL: b2Math.h<558:50> [b2Math.h <566:27 566:27>]
LOCAL_SYMBOL: b2Math.h<559:1> [b2Math.h <559:1 559:1>]
LOCAL_SYMBOL: b2Math.h<559:1> [b2Math.h <568:1 568:1>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <564:8 564:9>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <565:2 565:3>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <566:2 566:3>]
LOCAL_SYMBOL: b2Math.h<564:8> [b2Math.h <567:9 567:10>]
LOCAL_SYMBOL: b2Math.h<56:11> [b2Math.h <56:11 56:11>]
LOCAL_SYMBOL: b2Math.h<56:11> [b2Math.h <56:12 56:12>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <571:34 571:34>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:16 573:16>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:28 573:28>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:39 573:39>]
LOCAL_SYMBOL: b2Math.h<571:34> [b2Math.h <573:51 573:51>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <571:51 571:51>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:22 573:22>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:34 573:34>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:45 573:45>]
LOCAL_SYMBOL: b2Math.h<571:51> [b2Math.h <573:57 573:57>]
LOCAL_SYMBOL: b2Math.h<572:1> [b2Math.h <572:1 572:1>]
LOCAL_SYMBOL: b2Math.h<572:1> [b2Math.h <574:1 574:1>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <577:35 577:35>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:16 579:16>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:28 579:28>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:40 579:40>]
LOCAL_SYMBOL: b2Math.h<577:35> [b2Math.h <579:52 579:52>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <577:52 577:52>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:22 579:22>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:34 579:34>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:46 579:46>]
LOCAL_SYMBOL: b2Math.h<577:52> [b2Math.h <579:58 579:58>]
LOCAL_SYMBOL: b2Math.h<578:1> [b2Math.h <578:1 578:1>]
LOCAL_SYMBOL: b2Math.h<578:1> [b2Math.h <580:1 580:1>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <582:40 582:40>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:15 584:15>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:29 584:29>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <584:44 584:44>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:15 585:15>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:29 585:29>]
LOCAL_SYMBOL: b2Math.h<582:40> [b2Math.h <585:44 585:44>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <582:57 582:57>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <584:23 584:23>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <584:37 584:37>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <585:23 585:23>]
LOCAL_SYMBOL: b2Math.h<582:57> [b2Math.h <585:37 585:37>]
LOCAL_SYMBOL: b2Math.h<583:1> [b2Math.h <583:1 583:1>]
LOCAL_SYMBOL: b2Math.h<583:1> [b2Math.h <588:1 588:1>]
LOCAL_SYMBOL: b2Math.h<584:10> [b2Math.h <584:10 584:10>]
LOCAL_SYMBOL: b2Math.h<584:10> [b2Math.h <587:16 587:16>]
LOCAL_SYMBOL: b2Math.h<585:10> [b2Math.h <585:10 585:10>]
LOCAL_SYMBOL: b2Math.h<585:10> [b2Math.h <587:19 587:19>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <590:41 590:41>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <592:21 592:21>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <593:21 593:21>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <594:15 594:15>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <594:28 594:28>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <595:16 595:16>]
LOCAL_SYMBOL: b2Math.h<590:41> [b2Math.h <595:29 595:29>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <590:58 590:58>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <592:15 592:15>]
LOCAL_SYMBOL: b2Math.h<590:58> [b2Math.h <593:15 593:15>]
LOCAL_SYMBOL: b2Math.h<591:1> [b2Math.h <591:1 591:1>]
LOCAL_SYMBOL: b2Math.h<591:1> [b2Math.h <598:1 598:1>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <592:10 592:11>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <594:23 594:24>]
LOCAL_SYMBOL: b2Math.h<592:10> [b2Math.h <595:24 595:25>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <593:10 593:11>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <594:36 594:37>]
LOCAL_SYMBOL: b2Math.h<593:10> [b2Math.h <595:37 595:38>]
LOCAL_SYMBOL: b2Math.h<594:10> [b2Math.h <594:10 594:10>]
LOCAL_SYMBOL: b2Math.h<594:10> [b2Math.h <597:16 597:16>]
LOCAL_SYMBOL: b2Math.h<595:10> [b2Math.h <595:10 595:10>]
LOCAL_SYMBOL: b2Math.h<595:10> [b2Math.h <597:19 597:19>]
LOCAL_SYMBOL: b2Math.h<59:17> [b2Math.h <59:17 59:19>]
LOCAL_SYMBOL: b2Math.h<59:17> [b2Math.h <59:39 59:41>]
LOCAL_SYMBOL: b2Math.h<59:30> [b2Math.h <59:30 59:32>]
LOCAL_SYMBOL: b2Math.h<59:30> [b2Math.h <59:47 59:49>]
LOCAL_SYMBOL: b2Math.h<59:52> [b2Math.h <59:52 59:52>]
LOCAL_SYMBOL: b2Math.h<59:52> [b2Math.h <59:53 59:53>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <602:45 602:45>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <605:14 605:14>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <606:14 606:14>]
LOCAL_SYMBOL: b2Math.h<602:45> [b2Math.h <606:26 606:26>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <602:67 602:67>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <605:19 605:19>]
LOCAL_SYMBOL: b2Math.h<602:67> [b2Math.h <606:19 606:19>]
LOCAL_SYMBOL: b2Math.h<603:1> [b2Math.h <603:1 603:1>]
LOCAL_SYMBOL: b2Math.h<603:1> [b2Math.h <608:1 608:1>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <604:14 604:14>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <605:2 605:2>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <606:2 606:2>]
LOCAL_SYMBOL: b2Math.h<604:14> [b2Math.h <607:9 607:9>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <612:46 612:46>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <615:15 615:15>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <616:15 616:15>]
LOCAL_SYMBOL: b2Math.h<612:46> [b2Math.h <616:26 616:26>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <612:68 612:68>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <615:20 615:20>]
LOCAL_SYMBOL: b2Math.h<612:68> [b2Math.h <616:20 616:20>]
LOCAL_SYMBOL: b2Math.h<613:1> [b2Math.h <613:1 613:1>]
LOCAL_SYMBOL: b2Math.h<613:1> [b2Math.h <618:1 618:1>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <614:14 614:14>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <615:2 615:2>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <616:2 616:2>]
LOCAL_SYMBOL: b2Math.h<614:14> [b2Math.h <617:9 617:9>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <620:20 620:20>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <621:8 621:8>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <621:16 621:16>]
LOCAL_SYMBOL: b2Math.h<620:20> [b2Math.h <623:13 623:13>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <621:18 621:18>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:9 623:9>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:20 623:20>]
LOCAL_SYMBOL: b2Math.h<621:18> [b2Math.h <623:25 623:25>]
LOCAL_SYMBOL: b2Math.h<622:1> [b2Math.h <622:1 622:1>]
LOCAL_SYMBOL: b2Math.h<622:1> [b2Math.h <624:1 624:1>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <626:35 626:35>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <628:22 628:22>]
LOCAL_SYMBOL: b2Math.h<626:35> [b2Math.h <628:34 628:34>]
LOCAL_SYMBOL: b2Math.h<627:1> [b2Math.h <627:1 627:1>]
LOCAL_SYMBOL: b2Math.h<627:1> [b2Math.h <629:1 629:1>]
LOCAL_SYMBOL: b2Math.h<62:17> [b2Math.h <62:17 62:17>]
LOCAL_SYMBOL: b2Math.h<62:17> [b2Math.h <62:39 62:39>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <631:37 631:37>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <633:23 633:23>]
LOCAL_SYMBOL: b2Math.h<631:37> [b2Math.h <633:36 633:36>]
LOCAL_SYMBOL: b2Math.h<632:1> [b2Math.h <632:1 632:1>]
LOCAL_SYMBOL: b2Math.h<632:1> [b2Math.h <634:1 634:1>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <636:20 636:20>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <637:8 637:8>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <637:16 637:16>]
LOCAL_SYMBOL: b2Math.h<636:20> [b2Math.h <637:21 637:21>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <637:18 637:18>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <639:9 639:9>]
LOCAL_SYMBOL: b2Math.h<637:18> [b2Math.h <639:17 639:17>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <637:23 637:23>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <639:13 639:13>]
LOCAL_SYMBOL: b2Math.h<637:23> [b2Math.h <639:21 639:21>]
LOCAL_SYMBOL: b2Math.h<638:1> [b2Math.h <638:1 638:1>]
LOCAL_SYMBOL: b2Math.h<638:1> [b2Math.h <640:1 640:1>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <642:35 642:35>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <644:22 644:22>]
LOCAL_SYMBOL: b2Math.h<642:35> [b2Math.h <644:39 644:39>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <642:52 642:52>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <644:27 644:27>]
LOCAL_SYMBOL: b2Math.h<642:52> [b2Math.h <644:44 644:44>]
LOCAL_SYMBOL: b2Math.h<643:1> [b2Math.h <643:1 643:1>]
LOCAL_SYMBOL: b2Math.h<643:1> [b2Math.h <645:1 645:1>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <647:20 647:20>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <648:8 648:8>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <648:16 648:16>]
LOCAL_SYMBOL: b2Math.h<647:20> [b2Math.h <648:21 648:21>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <648:18 648:18>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <650:9 650:9>]
LOCAL_SYMBOL: b2Math.h<648:18> [b2Math.h <650:17 650:17>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <648:23 648:23>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <650:13 650:13>]
LOCAL_SYMBOL: b2Math.h<648:23> [b2Math.h <650:21 650:21>]
LOCAL_SYMBOL: b2Math.h<649:1> [b2Math.h <649:1 649:1>]
LOCAL_SYMBOL: b2Math.h<649:1> [b2Math.h <651:1 651:1>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <653:35 653:35>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <655:22 655:22>]
LOCAL_SYMBOL: b2Math.h<653:35> [b2Math.h <655:39 655:39>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <653:52 653:52>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <655:27 655:27>]
LOCAL_SYMBOL: b2Math.h<653:52> [b2Math.h <655:44 655:44>]
LOCAL_SYMBOL: b2Math.h<654:1> [b2Math.h <654:1 654:1>]
LOCAL_SYMBOL: b2Math.h<654:1> [b2Math.h <656:1 656:1>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <658:20 658:20>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:8 659:8>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:18 659:18>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:23 659:23>]
LOCAL_SYMBOL: b2Math.h<658:20> [b2Math.h <659:30 659:30>]
LOCAL_SYMBOL: b2Math.h<659:20> [b2Math.h <659:20 659:20>]
LOCAL_SYMBOL: b2Math.h<659:20> [b2Math.h <661:26 661:26>]
LOCAL_SYMBOL: b2Math.h<659:25> [b2Math.h <659:25 659:27>]
LOCAL_SYMBOL: b2Math.h<659:25> [b2Math.h <661:15 661:17>]
LOCAL_SYMBOL: b2Math.h<659:32> [b2Math.h <659:32 659:35>]
LOCAL_SYMBOL: b2Math.h<659:32> [b2Math.h <661:29 661:32>]
LOCAL_SYMBOL: b2Math.h<65:19> [b2Math.h <65:19 65:20>]
LOCAL_SYMBOL: b2Math.h<65:19> [b2Math.h <65:41 65:42>]
LOCAL_SYMBOL: b2Math.h<65:31> [b2Math.h <65:31 65:32>]
LOCAL_SYMBOL: b2Math.h<65:31> [b2Math.h <65:49 65:50>]
LOCAL_SYMBOL: b2Math.h<65:35> [b2Math.h <65:35 65:35>]
LOCAL_SYMBOL: b2Math.h<65:35> [b2Math.h <65:53 65:53>]
LOCAL_SYMBOL: b2Math.h<660:1> [b2Math.h <660:1 660:1>]
LOCAL_SYMBOL: b2Math.h<660:1> [b2Math.h <662:1 662:1>]
LOCAL_SYMBOL: b2Math.h<664:37> [b2Math.h <664:37 664:37>]
LOCAL_SYMBOL: b2Math.h<664:37> [b2Math.h <666:26 666:26>]
LOCAL_SYMBOL: b2Math.h<664:54> [b2Math.h <664:54 664:56>]
LOCAL_SYMBOL: b2Math.h<664:54> [b2Math.h <666:15 666:17>]
LOCAL_SYMBOL: b2Math.h<664:73> [b2Math.h <664:73 664:76>]
LOCAL_SYMBOL: b2Math.h<664:73> [b2Math.h <666:29 666:32>]
LOCAL_SYMBOL: b2Math.h<665:1> [b2Math.h <665:1 665:1>]
LOCAL_SYMBOL: b2Math.h<665:1> [b2Math.h <667:1 667:1>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <669:19 669:19>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <669:41 669:41>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <669:47 669:47>]
LOCAL_SYMBOL: b2Math.h<669:19> [b2Math.h <671:2 671:2>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <669:44 669:44>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <671:10 671:10>]
LOCAL_SYMBOL: b2Math.h<669:44> [b2Math.h <672:2 672:2>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <669:50 669:50>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <672:6 672:6>]
LOCAL_SYMBOL: b2Math.h<669:50> [b2Math.h <673:2 673:2>]
LOCAL_SYMBOL: b2Math.h<670:1> [b2Math.h <670:1 670:1>]
LOCAL_SYMBOL: b2Math.h<670:1> [b2Math.h <674:1 674:1>]
LOCAL_SYMBOL: b2Math.h<671:4> [b2Math.h <671:4 671:6>]
LOCAL_SYMBOL: b2Math.h<671:4> [b2Math.h <673:6 673:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <681:39 681:39>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <683:2 683:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <683:8 683:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <684:2 684:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <684:8 684:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <685:2 685:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <685:8 685:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <686:2 686:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <686:8 686:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <687:2 687:2>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <687:8 687:8>]
LOCAL_SYMBOL: b2Math.h<681:39> [b2Math.h <688:9 688:9>]
LOCAL_SYMBOL: b2Math.h<682:1> [b2Math.h <682:1 682:1>]
LOCAL_SYMBOL: b2Math.h<682:1> [b2Math.h <689:1 689:1>]
LOCAL_SYMBOL: b2Math.h<68:28> [b2Math.h <68:28 68:28>]
LOCAL_SYMBOL: b2Math.h<68:28> [b2Math.h <68:65 68:65>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:37 68:37>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:40 68:40>]
LOCAL_SYMBOL: b2Math.h<68:37> [b2Math.h <68:62 68:62>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <691:35 691:35>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:16 693:16>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:26 693:26>]
LOCAL_SYMBOL: b2Math.h<691:35> [b2Math.h <693:31 693:31>]
LOCAL_SYMBOL: b2Math.h<692:1> [b2Math.h <692:1 692:1>]
LOCAL_SYMBOL: b2Math.h<692:1> [b2Math.h <695:1 695:1>]
LOCAL_SYMBOL: b2Math.h<693:7> [b2Math.h <693:7 693:12>]
LOCAL_SYMBOL: b2Math.h<693:7> [b2Math.h <694:9 694:14>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <697:48 697:49>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <699:2 699:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <701:2 701:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <704:2 704:3>]
LOCAL_SYMBOL: b2Math.h<697:48> [b2Math.h <704:17 704:18>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <697:60 697:63>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <699:18 699:21>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <699:31 699:34>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <700:26 700:29>]
LOCAL_SYMBOL: b2Math.h<697:60> [b2Math.h <700:39 700:42>]
LOCAL_SYMBOL: b2Math.h<698:1> [b2Math.h <698:1 698:1>]
LOCAL_SYMBOL: b2Math.h<698:1> [b2Math.h <705:1 705:1>]
LOCAL_SYMBOL: b2Math.h<700:10> [b2Math.h <700:10 700:14>]
LOCAL_SYMBOL: b2Math.h<700:10> [b2Math.h <701:12 701:16>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <707:38 707:42>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <710:18 710:22>]
LOCAL_SYMBOL: b2Math.h<707:38> [b2Math.h <713:11 713:15>]
LOCAL_SYMBOL: b2Math.h<708:1> [b2Math.h <708:1 708:1>]
LOCAL_SYMBOL: b2Math.h<708:1> [b2Math.h <714:1 714:1>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <710:10 710:13>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <711:8 711:11>]
LOCAL_SYMBOL: b2Math.h<710:10> [b2Math.h <712:8 712:11>]
LOCAL_SYMBOL: b2Math.h<718:1> [b2Math.h <718:1 718:1>]
LOCAL_SYMBOL: b2Math.h<718:1> [b2Math.h <723:1 723:1>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <719:10 719:14>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <720:15 720:19>]
LOCAL_SYMBOL: b2Math.h<719:10> [b2Math.h <720:35 720:39>]
LOCAL_SYMBOL: b2Math.h<71:29> [b2Math.h <71:29 71:29>]
LOCAL_SYMBOL: b2Math.h<71:29> [b2Math.h <73:15 73:15>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <720:10 720:10>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <721:8 721:8>]
LOCAL_SYMBOL: b2Math.h<720:10> [b2Math.h <722:7 722:7>]
LOCAL_SYMBOL: b2Math.h<72:2> [b2Math.h <72:2 72:2>]
LOCAL_SYMBOL: b2Math.h<72:2> [b2Math.h <74:2 74:2>]
LOCAL_SYMBOL: b2Math.h<77:30> [b2Math.h <77:30 77:30>]
LOCAL_SYMBOL: b2Math.h<77:30> [b2Math.h <79:15 79:15>]
LOCAL_SYMBOL: b2Math.h<78:2> [b2Math.h <78:2 78:2>]
LOCAL_SYMBOL: b2Math.h<78:2> [b2Math.h <80:2 80:2>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <83:34 83:34>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <85:8 85:8>]
LOCAL_SYMBOL: b2Math.h<83:34> [b2Math.h <85:18 85:18>]
LOCAL_SYMBOL: b2Math.h<84:2> [b2Math.h <84:2 84:2>]
LOCAL_SYMBOL: b2Math.h<84:2> [b2Math.h <86:2 86:2>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <89:34 89:34>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <91:8 91:8>]
LOCAL_SYMBOL: b2Math.h<89:34> [b2Math.h <91:18 91:18>]
LOCAL_SYMBOL: b2Math.h<90:2> [b2Math.h <90:2 90:2>]
LOCAL_SYMBOL: b2Math.h<90:2> [b2Math.h <92:2 92:2>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <95:28 95:28>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <97:8 97:8>]
LOCAL_SYMBOL: b2Math.h<95:28> [b2Math.h <97:16 97:16>]
LOCAL_SYMBOL: b2Math.h<96:2> [b2Math.h <96:2 96:2>]
LOCAL_SYMBOL: b2Math.h<96:2> [b2Math.h <98:2 98:2>]
LOCAL_SYMBOL: b2PolygonShape.h<29:1> [b2PolygonShape.h <29:1 29:1>]
LOCAL_SYMBOL: b2PolygonShape.h<29:1> [b2PolygonShape.h <79:1 79:1>]
LOCAL_SYMBOL: b2PolygonShape.h<34:35> [b2PolygonShape.h <34:35 34:43>]
LOCAL_SYMBOL: b2PolygonShape.h<44:25> [b2PolygonShape.h <44:25 44:30>]
LOCAL_SYMBOL: b2PolygonShape.h<44:39> [b2PolygonShape.h <44:39 44:43>]
LOCAL_SYMBOL: b2PolygonShape.h<49:24> [b2PolygonShape.h <49:24 49:25>]
LOCAL_SYMBOL: b2PolygonShape.h<49:36> [b2PolygonShape.h <49:36 49:37>]
LOCAL_SYMBOL: b2PolygonShape.h<56:24> [b2PolygonShape.h <56:24 56:25>]
LOCAL_SYMBOL: b2PolygonShape.h<56:36> [b2PolygonShape.h <56:36 56:37>]
LOCAL_SYMBOL: b2PolygonShape.h<56:54> [b2PolygonShape.h <56:54 56:59>]
LOCAL_SYMBOL: b2PolygonShape.h<56:70> [b2PolygonShape.h <56:70 56:74>]
LOCAL_SYMBOL: b2PolygonShape.h<59:36> [b2PolygonShape.h <59:36 59:44>]
LOCAL_SYMBOL: b2PolygonShape.h<59:61> [b2PolygonShape.h <59:61 59:61>]
LOCAL_SYMBOL: b2PolygonShape.h<62:32> [b2PolygonShape.h <62:32 62:37>]
LOCAL_SYMBOL: b2PolygonShape.h<62:62> [b2PolygonShape.h <62:62 62:66>]
LOCAL_SYMBOL: b2PolygonShape.h<63:25> [b2PolygonShape.h <63:25 63:33>]
LOCAL_SYMBOL: b2PolygonShape.h<63:42> [b2PolygonShape.h <63:42 63:51>]
LOCAL_SYMBOL: b2PolygonShape.h<66:27> [b2PolygonShape.h <66:27 66:30>]
LOCAL_SYMBOL: b2PolygonShape.h<66:52> [b2PolygonShape.h <66:52 66:60>]
LOCAL_SYMBOL: b2PolygonShape.h<66:69> [b2PolygonShape.h <66:69 66:78>]
LOCAL_SYMBOL: b2PolygonShape.h<69:31> [b2PolygonShape.h <69:31 69:38>]
LOCAL_SYMBOL: b2PolygonShape.h<69:49> [b2PolygonShape.h <69:49 69:55>]
LOCAL_SYMBOL: b2PolygonShape.h<82:1> [b2PolygonShape.h <82:1 82:1>]
LOCAL_SYMBOL: b2PolygonShape.h<82:1> [b2PolygonShape.h <87:1 87:1>]
LOCAL_SYMBOL: b2PulleyJoint.h<113:33> [b2PulleyJoint.h <113:33 113:41>]
LOCAL_SYMBOL: b2PulleyJoint.h<118:40> [b2PulleyJoint.h <118:40 118:43>]
LOCAL_SYMBOL: b2PulleyJoint.h<120:51> [b2PulleyJoint.h <120:51 120:54>]
LOCAL_SYMBOL: b2PulleyJoint.h<121:52> [b2PulleyJoint.h <121:52 121:55>]
LOCAL_SYMBOL: b2PulleyJoint.h<122:52> [b2PulleyJoint.h <122:52 122:55>]
LOCAL_SYMBOL: b2PulleyJoint.h<29:1> [b2PulleyJoint.h <29:1 29:1>]
LOCAL_SYMBOL: b2PulleyJoint.h<29:1> [b2PulleyJoint.h <69:1 69:1>]
LOCAL_SYMBOL: b2PulleyJoint.h<31:2> [b2PulleyJoint.h <31:2 31:2>]
LOCAL_SYMBOL: b2PulleyJoint.h<31:2> [b2PulleyJoint.h <41:2 41:2>]
LOCAL_SYMBOL: b2PulleyJoint.h<44:26> [b2PulleyJoint.h <44:26 44:30>]
LOCAL_SYMBOL: b2PulleyJoint.h<44:41> [b2PulleyJoint.h <44:41 44:45>]
LOCAL_SYMBOL: b2PulleyJoint.h<45:20> [b2PulleyJoint.h <45:20 45:32>]
LOCAL_SYMBOL: b2PulleyJoint.h<45:49> [b2PulleyJoint.h <45:49 45:61>]
LOCAL_SYMBOL: b2PulleyJoint.h<46:20> [b2PulleyJoint.h <46:20 46:26>]
LOCAL_SYMBOL: b2PulleyJoint.h<46:43> [b2PulleyJoint.h <46:43 46:49>]
LOCAL_SYMBOL: b2PulleyJoint.h<47:14> [b2PulleyJoint.h <47:14 47:18>]
LOCAL_SYMBOL: b2PulleyJoint.h<80:1> [b2PulleyJoint.h <80:1 80:1>]
LOCAL_SYMBOL: b2PulleyJoint.h<80:1> [b2PulleyJoint.h <150:1 150:1>]
LOCAL_SYMBOL: b2PulleyJoint.h<85:34> [b2PulleyJoint.h <85:34 85:39>]
LOCAL_SYMBOL: b2PulleyJoint.h<86:36> [b2PulleyJoint.h <86:36 86:41>]
LOCAL_SYMBOL: b2Settings.h<135:21> [b2Settings.h <135:21 135:24>]
LOCAL_SYMBOL: b2Settings.h<138:19> [b2Settings.h <138:19 138:21>]
LOCAL_SYMBOL: b2Settings.h<141:24> [b2Settings.h <141:24 141:29>]
LOCAL_SYMBOL: b2Settings.h<146:1> [b2Settings.h <146:1 146:1>]
LOCAL_SYMBOL: b2Settings.h<146:1> [b2Settings.h <150:1 150:1>]
LOCAL_SYMBOL: b2Shape.h<100:1> [b2Shape.h <100:1 100:1>]
LOCAL_SYMBOL: b2Shape.h<100:1> [b2Shape.h <102:1 102:1>]
LOCAL_SYMBOL: b2Shape.h<28:1> [b2Shape.h <28:1 28:1>]
LOCAL_SYMBOL: b2Shape.h<28:1> [b2Shape.h <37:1 37:1>]
LOCAL_SYMBOL: b2Shape.h<43:1> [b2Shape.h <43:1 43:1>]
LOCAL_SYMBOL: b2Shape.h<43:1> [b2Shape.h <97:1 97:1>]
LOCAL_SYMBOL: b2Shape.h<47:2> [b2Shape.h <47:2 47:2>]
LOCAL_SYMBOL: b2Shape.h<47:2> [b2Shape.h <53:2 53:2>]
LOCAL_SYMBOL: b2Shape.h<55:21> [b2Shape.h <55:21 55:21>]
LOCAL_SYMBOL: b2Shape.h<55:21> [b2Shape.h <55:22 55:22>]
LOCAL_SYMBOL: b2Shape.h<58:43> [b2Shape.h <58:43 58:51>]
LOCAL_SYMBOL: b2Shape.h<70:44> [b2Shape.h <70:44 70:45>]
LOCAL_SYMBOL: b2Shape.h<70:62> [b2Shape.h <70:62 70:62>]
LOCAL_SYMBOL: b2Shape.h<77:40> [b2Shape.h <77:40 77:45>]
LOCAL_SYMBOL: b2Shape.h<77:70> [b2Shape.h <77:70 77:74>]
LOCAL_SYMBOL: b2Shape.h<78:26> [b2Shape.h <78:26 78:34>]
LOCAL_SYMBOL: b2Shape.h<78:43> [b2Shape.h <78:43 78:52>]
LOCAL_SYMBOL: b2Shape.h<84:35> [b2Shape.h <84:35 84:38>]
LOCAL_SYMBOL: b2Shape.h<84:60> [b2Shape.h <84:60 84:61>]
LOCAL_SYMBOL: b2Shape.h<84:70> [b2Shape.h <84:70 84:79>]
LOCAL_SYMBOL: b2Shape.h<90:39> [b2Shape.h <90:39 90:46>]
LOCAL_SYMBOL: b2Shape.h<90:57> [b2Shape.h <90:57 90:63>]
LOCAL_SYMBOL: b2StackAllocator.h<28:1> [b2StackAllocator.h <28:1 28:1>]
LOCAL_SYMBOL: b2StackAllocator.h<28:1> [b2StackAllocator.h <32:1 32:1>]
LOCAL_SYMBOL: b2StackAllocator.h<38:1> [b2StackAllocator.h <38:1 38:1>]
LOCAL_SYMBOL: b2StackAllocator.h<38:1> [b2StackAllocator.h <58:1 58:1>]
LOCAL_SYMBOL: b2StackAllocator.h<43:23> [b2StackAllocator.h <43:23 43:26>]
LOCAL_SYMBOL: b2StackAllocator.h<44:18> [b2StackAllocator.h <44:18 44:18>]
LOCAL_SYMBOL: b2TimeOfImpact.h<27:1> [b2TimeOfImpact.h <27:1 27:1>]
LOCAL_SYMBOL: b2TimeOfImpact.h<27:1> [b2TimeOfImpact.h <33:1 33:1>]
LOCAL_SYMBOL: b2TimeOfImpact.h<37:1> [b2TimeOfImpact.h <37:1 37:1>]
LOCAL_SYMBOL: b2TimeOfImpact.h<37:1> [b2TimeOfImpact.h <49:1 49:1>]
LOCAL_SYMBOL: b2TimeOfImpact.h<39:2> [b2TimeOfImpact.h <39:2 39:2>]
LOCAL_SYMBOL: b2TimeOfImpact.h<39:2> [b2TimeOfImpact.h <45:2 45:2>]
LOCAL_SYMBOL: b2TimeOfImpact.h<56:34> [b2TimeOfImpact.h <56:34 56:39>]
LOCAL_SYMBOL: b2TimeOfImpact.h<56:60> [b2TimeOfImpact.h <56:60 56:64>]
LOCAL_SYMBOL: b2TimeStep.h<26:1> [b2TimeStep.h <26:1 26:1>]
LOCAL_SYMBOL: b2TimeStep.h<26:1> [b2TimeStep.h <35:1 35:1>]
LOCAL_SYMBOL: b2TimeStep.h<39:1> [b2TimeStep.h <39:1 39:1>]
LOCAL_SYMBOL: b2TimeStep.h<39:1> [b2TimeStep.h <46:1 46:1>]
LOCAL_SYMBOL: b2TimeStep.h<50:1> [b2TimeStep.h <50:1 50:1>]
LOCAL_SYMBOL: b2TimeStep.h<50:1> [b2TimeStep.h <53:1 53:1>]
LOCAL_SYMBOL: b2TimeStep.h<57:1> [b2TimeStep.h <57:1 57:1>]
LOCAL_SYMBOL: b2TimeStep.h<57:1> [b2TimeStep.h <60:1 60:1>]
LOCAL_SYMBOL: b2TimeStep.h<64:1> [b2TimeStep.h <64:1 64:1>]
LOCAL_SYMBOL: b2TimeStep.h<64:1> [b2TimeStep.h <68:1 68:1>]
LOCAL_SYMBOL: b2Timer.h<27:1> [b2Timer.h <27:1 27:1>]
LOCAL_SYMBOL: b2Timer.h<27:1> [b2Timer.h <48:1 48:1>]
LOCAL_SYMBOL: b2World.cpp<1000:14> [b2World.cpp <1000:14 1000:20>]
LOCAL_SYMBOL: b2World.cpp<1000:14> [b2World.cpp <1003:14 1003:20>]
LOCAL_SYMBOL: b2World.cpp<1000:14> [b2World.cpp <1009:35 1009:41>]
LOCAL_SYMBOL: b2World.cpp<1001:9> [b2World.cpp <1001:9 1001:13>]
LOCAL_SYMBOL: b2World.cpp<1001:9> [b2World.cpp <1003:47 1003:51>]
LOCAL_SYMBOL: b2World.cpp<1002:19> [b2World.cpp <1002:19 1002:24>]
LOCAL_SYMBOL: b2World.cpp<1002:19> [b2World.cpp <1003:32 1003:37>]
LOCAL_SYMBOL: b2World.cpp<1002:19> [b2World.cpp <1007:23 1007:28>]
LOCAL_SYMBOL: b2World.cpp<1002:19> [b2World.cpp <1009:51 1009:56>]
LOCAL_SYMBOL: b2World.cpp<1003:8> [b2World.cpp <1003:8 1003:10>]
LOCAL_SYMBOL: b2World.cpp<1003:8> [b2World.cpp <1005:7 1005:9>]
LOCAL_SYMBOL: b2World.cpp<1006:3> [b2World.cpp <1006:3 1006:3>]
LOCAL_SYMBOL: b2World.cpp<1006:3> [b2World.cpp <1010:3 1010:3>]
LOCAL_SYMBOL: b2World.cpp<1007:12> [b2World.cpp <1007:12 1007:19>]
LOCAL_SYMBOL: b2World.cpp<1007:12> [b2World.cpp <1008:27 1008:34>]
LOCAL_SYMBOL: b2World.cpp<1007:12> [b2World.cpp <1008:50 1008:57>]
LOCAL_SYMBOL: b2World.cpp<1007:12> [b2World.cpp <1009:66 1009:73>]
LOCAL_SYMBOL: b2World.cpp<1008:11> [b2World.cpp <1008:11 1008:15>]
LOCAL_SYMBOL: b2World.cpp<1008:11> [b2World.cpp <1009:44 1009:48>]
LOCAL_SYMBOL: b2World.cpp<1019:42> [b2World.cpp <1019:42 1019:49>]
LOCAL_SYMBOL: b2World.cpp<1019:42> [b2World.cpp <1023:21 1023:28>]
LOCAL_SYMBOL: b2World.cpp<1019:66> [b2World.cpp <1019:66 1019:71>]
LOCAL_SYMBOL: b2World.cpp<1019:66> [b2World.cpp <1026:13 1026:18>]
LOCAL_SYMBOL: b2World.cpp<1019:88> [b2World.cpp <1019:88 1019:93>]
LOCAL_SYMBOL: b2World.cpp<1019:88> [b2World.cpp <1027:13 1027:18>]
LOCAL_SYMBOL: b2World.cpp<1020:1> [b2World.cpp <1020:1 1020:1>]
LOCAL_SYMBOL: b2World.cpp<1020:1> [b2World.cpp <1029:1 1029:1>]
LOCAL_SYMBOL: b2World.cpp<1021:24> [b2World.cpp <1021:24 1021:30>]
LOCAL_SYMBOL: b2World.cpp<1021:24> [b2World.cpp <1022:2 1022:8>]
LOCAL_SYMBOL: b2World.cpp<1021:24> [b2World.cpp <1023:2 1023:8>]
LOCAL_SYMBOL: b2World.cpp<1021:24> [b2World.cpp <1028:41 1028:47>]
LOCAL_SYMBOL: b2World.cpp<1024:17> [b2World.cpp <1024:17 1024:21>]
LOCAL_SYMBOL: b2World.cpp<1024:17> [b2World.cpp <1025:2 1025:6>]
LOCAL_SYMBOL: b2World.cpp<1024:17> [b2World.cpp <1026:2 1026:6>]
LOCAL_SYMBOL: b2World.cpp<1024:17> [b2World.cpp <1027:2 1027:6>]
LOCAL_SYMBOL: b2World.cpp<1024:17> [b2World.cpp <1028:50 1028:54>]
LOCAL_SYMBOL: b2World.cpp<102:36> [b2World.cpp <102:36 102:44>]
LOCAL_SYMBOL: b2World.cpp<102:36> [b2World.cpp <104:16 104:24>]
LOCAL_SYMBOL: b2World.cpp<1031:36> [b2World.cpp <1031:36 1031:42>]
LOCAL_SYMBOL: b2World.cpp<1031:36> [b2World.cpp <1033:10 1033:16>]
LOCAL_SYMBOL: b2World.cpp<1031:36> [b2World.cpp <1037:44 1037:50>]
LOCAL_SYMBOL: b2World.cpp<1031:36> [b2World.cpp <1049:38 1049:44>]
LOCAL_SYMBOL: b2World.cpp<1031:36> [b2World.cpp <1058:41 1058:47>]
LOCAL_SYMBOL: b2World.cpp<1031:36> [b2World.cpp <1093:44 1093:50>]
LOCAL_SYMBOL: b2World.cpp<1031:64> [b2World.cpp <1031:64 1031:65>]
LOCAL_SYMBOL: b2World.cpp<1031:64> [b2World.cpp <1039:26 1039:27>]
LOCAL_SYMBOL: b2World.cpp<1031:64> [b2World.cpp <1041:24 1041:25>]
LOCAL_SYMBOL: b2World.cpp<1031:64> [b2World.cpp <1050:22 1050:23>]
LOCAL_SYMBOL: b2World.cpp<1031:64> [b2World.cpp <1051:22 1051:23>]
LOCAL_SYMBOL: b2World.cpp<1031:64> [b2World.cpp <1064:22 1064:23>]
LOCAL_SYMBOL: b2World.cpp<1031:64> [b2World.cpp <1069:23 1069:24>]
LOCAL_SYMBOL: b2World.cpp<1031:64> [b2World.cpp <1076:23 1076:24>]
LOCAL_SYMBOL: b2World.cpp<1031:64> [b2World.cpp <1084:23 1084:24>]
LOCAL_SYMBOL: b2World.cpp<1031:64> [b2World.cpp <1100:25 1100:26>]
LOCAL_SYMBOL: b2World.cpp<1031:83> [b2World.cpp <1031:83 1031:87>]
LOCAL_SYMBOL: b2World.cpp<1031:83> [b2World.cpp <1043:55 1043:59>]
LOCAL_SYMBOL: b2World.cpp<1031:83> [b2World.cpp <1052:37 1052:41>]
LOCAL_SYMBOL: b2World.cpp<1031:83> [b2World.cpp <1062:31 1062:35>]
LOCAL_SYMBOL: b2World.cpp<1031:83> [b2World.cpp <1062:48 1062:52>]
LOCAL_SYMBOL: b2World.cpp<1031:83> [b2World.cpp <1062:65 1062:69>]
LOCAL_SYMBOL: b2World.cpp<1031:83> [b2World.cpp <1062:74 1062:78>]
LOCAL_SYMBOL: b2World.cpp<1031:83> [b2World.cpp <1065:37 1065:41>]
LOCAL_SYMBOL: b2World.cpp<1031:83> [b2World.cpp <1077:38 1077:42>]
LOCAL_SYMBOL: b2World.cpp<1031:83> [b2World.cpp <1078:38 1078:42>]
LOCAL_SYMBOL: b2World.cpp<1031:83> [b2World.cpp <1103:57 1103:61>]
LOCAL_SYMBOL: b2World.cpp<1032:1> [b2World.cpp <1032:1 1032:1>]
LOCAL_SYMBOL: b2World.cpp<1032:1> [b2World.cpp <1110:1 1110:1>]
LOCAL_SYMBOL: b2World.cpp<1034:2> [b2World.cpp <1034:2 1034:2>]
LOCAL_SYMBOL: b2World.cpp<1034:2> [b2World.cpp <1109:2 1109:2>]
LOCAL_SYMBOL: b2World.cpp<1036:3> [b2World.cpp <1036:3 1036:3>]
LOCAL_SYMBOL: b2World.cpp<1036:3> [b2World.cpp <1044:3 1044:3>]
LOCAL_SYMBOL: b2World.cpp<1037:19> [b2World.cpp <1037:19 1037:24>]
LOCAL_SYMBOL: b2World.cpp<1037:19> [b2World.cpp <1039:30 1039:35>]
LOCAL_SYMBOL: b2World.cpp<1037:19> [b2World.cpp <1040:21 1040:26>]
LOCAL_SYMBOL: b2World.cpp<1039:11> [b2World.cpp <1039:11 1039:16>]
LOCAL_SYMBOL: b2World.cpp<1039:11> [b2World.cpp <1043:33 1043:38>]
LOCAL_SYMBOL: b2World.cpp<103:1> [b2World.cpp <103:1 103:1>]
LOCAL_SYMBOL: b2World.cpp<103:1> [b2World.cpp <105:1 105:1>]
LOCAL_SYMBOL: b2World.cpp<1040:12> [b2World.cpp <1040:12 1040:17>]
LOCAL_SYMBOL: b2World.cpp<1040:12> [b2World.cpp <1043:41 1043:46>]
LOCAL_SYMBOL: b2World.cpp<1041:11> [b2World.cpp <1041:11 1041:14>]
LOCAL_SYMBOL: b2World.cpp<1041:11> [b2World.cpp <1043:49 1043:52>]
LOCAL_SYMBOL: b2World.cpp<1048:3> [b2World.cpp <1048:3 1048:3>]
LOCAL_SYMBOL: b2World.cpp<1048:3> [b2World.cpp <1053:3 1053:3>]
LOCAL_SYMBOL: b2World.cpp<1049:17> [b2World.cpp <1049:17 1049:20>]
LOCAL_SYMBOL: b2World.cpp<1049:17> [b2World.cpp <1050:26 1050:29>]
LOCAL_SYMBOL: b2World.cpp<1049:17> [b2World.cpp <1051:26 1051:29>]
LOCAL_SYMBOL: b2World.cpp<1050:11> [b2World.cpp <1050:11 1050:12>]
LOCAL_SYMBOL: b2World.cpp<1050:11> [b2World.cpp <1052:29 1052:30>]
LOCAL_SYMBOL: b2World.cpp<1051:11> [b2World.cpp <1051:11 1051:12>]
LOCAL_SYMBOL: b2World.cpp<1051:11> [b2World.cpp <1052:33 1052:34>]
LOCAL_SYMBOL: b2World.cpp<1057:3> [b2World.cpp <1057:3 1057:3>]
LOCAL_SYMBOL: b2World.cpp<1057:3> [b2World.cpp <1088:3 1088:3>]
LOCAL_SYMBOL: b2World.cpp<1058:18> [b2World.cpp <1058:18 1058:22>]
LOCAL_SYMBOL: b2World.cpp<1058:18> [b2World.cpp <1059:18 1059:22>]
LOCAL_SYMBOL: b2World.cpp<1058:18> [b2World.cpp <1060:29 1060:33>]
LOCAL_SYMBOL: b2World.cpp<1058:18> [b2World.cpp <1067:8 1067:12>]
LOCAL_SYMBOL: b2World.cpp<1058:18> [b2World.cpp <1069:27 1069:31>]
LOCAL_SYMBOL: b2World.cpp<1058:18> [b2World.cpp <1082:8 1082:12>]
LOCAL_SYMBOL: b2World.cpp<1058:18> [b2World.cpp <1084:27 1084:31>]
LOCAL_SYMBOL: b2World.cpp<1059:10> [b2World.cpp <1059:10 1059:14>]
LOCAL_SYMBOL: b2World.cpp<1059:10> [b2World.cpp <1074:26 1074:30>]
LOCAL_SYMBOL: b2World.cpp<1060:18> [b2World.cpp <1060:18 1060:25>]
LOCAL_SYMBOL: b2World.cpp<1060:18> [b2World.cpp <1064:26 1064:33>]
LOCAL_SYMBOL: b2World.cpp<1060:18> [b2World.cpp <1076:27 1076:34>]
LOCAL_SYMBOL: b2World.cpp<1062:12> [b2World.cpp <1062:12 1062:21>]
LOCAL_SYMBOL: b2World.cpp<1062:12> [b2World.cpp <1070:38 1070:47>]
LOCAL_SYMBOL: b2World.cpp<1062:12> [b2World.cpp <1071:39 1071:48>]
LOCAL_SYMBOL: b2World.cpp<1062:12> [b2World.cpp <1085:38 1085:47>]
LOCAL_SYMBOL: b2World.cpp<1062:12> [b2World.cpp <1086:39 1086:48>]
LOCAL_SYMBOL: b2World.cpp<1064:11> [b2World.cpp <1064:11 1064:12>]
LOCAL_SYMBOL: b2World.cpp<1064:11> [b2World.cpp <1065:27 1065:28>]
LOCAL_SYMBOL: b2World.cpp<1064:11> [b2World.cpp <1070:34 1070:35>]
LOCAL_SYMBOL: b2World.cpp<1064:11> [b2World.cpp <1077:30 1077:31>]
LOCAL_SYMBOL: b2World.cpp<1064:11> [b2World.cpp <1079:5 1079:6>]
LOCAL_SYMBOL: b2World.cpp<1064:11> [b2World.cpp <1085:30 1085:31>]
LOCAL_SYMBOL: b2World.cpp<1068:4> [b2World.cpp <1068:4 1068:4>]
LOCAL_SYMBOL: b2World.cpp<1068:4> [b2World.cpp <1072:4 1072:4>]
LOCAL_SYMBOL: b2World.cpp<1069:12> [b2World.cpp <1069:12 1069:13>]
LOCAL_SYMBOL: b2World.cpp<1069:12> [b2World.cpp <1070:30 1070:31>]
LOCAL_SYMBOL: b2World.cpp<1069:12> [b2World.cpp <1071:29 1071:30>]
LOCAL_SYMBOL: b2World.cpp<1074:15> [b2World.cpp <1074:15 1074:15>]
LOCAL_SYMBOL: b2World.cpp<1074:15> [b2World.cpp <1074:22 1074:22>]
LOCAL_SYMBOL: b2World.cpp<1074:15> [b2World.cpp <1074:35 1074:35>]
LOCAL_SYMBOL: b2World.cpp<1074:15> [b2World.cpp <1076:36 1076:36>]
LOCAL_SYMBOL: b2World.cpp<1075:4> [b2World.cpp <1075:4 1075:4>]
LOCAL_SYMBOL: b2World.cpp<1075:4> [b2World.cpp <1080:4 1080:4>]
LOCAL_SYMBOL: b2World.cpp<1076:12> [b2World.cpp <1076:12 1076:13>]
LOCAL_SYMBOL: b2World.cpp<1076:12> [b2World.cpp <1077:34 1077:35>]
LOCAL_SYMBOL: b2World.cpp<1076:12> [b2World.cpp <1078:28 1078:29>]
LOCAL_SYMBOL: b2World.cpp<1076:12> [b2World.cpp <1079:10 1079:11>]
LOCAL_SYMBOL: b2World.cpp<107:46> [b2World.cpp <107:46 107:48>]
LOCAL_SYMBOL: b2World.cpp<107:46> [b2World.cpp <116:31 116:33>]
LOCAL_SYMBOL: b2World.cpp<1083:4> [b2World.cpp <1083:4 1083:4>]
LOCAL_SYMBOL: b2World.cpp<1083:4> [b2World.cpp <1087:4 1087:4>]
LOCAL_SYMBOL: b2World.cpp<1084:12> [b2World.cpp <1084:12 1084:13>]
LOCAL_SYMBOL: b2World.cpp<1084:12> [b2World.cpp <1085:34 1085:35>]
LOCAL_SYMBOL: b2World.cpp<1084:12> [b2World.cpp <1086:29 1086:30>]
LOCAL_SYMBOL: b2World.cpp<108:1> [b2World.cpp <108:1 108:1>]
LOCAL_SYMBOL: b2World.cpp<108:1> [b2World.cpp <129:1 129:1>]
LOCAL_SYMBOL: b2World.cpp<1092:3> [b2World.cpp <1092:3 1092:3>]
LOCAL_SYMBOL: b2World.cpp<1092:3> [b2World.cpp <1104:3 1104:3>]
LOCAL_SYMBOL: b2World.cpp<1093:20> [b2World.cpp <1093:20 1093:23>]
LOCAL_SYMBOL: b2World.cpp<1093:20> [b2World.cpp <1094:24 1094:27>]
LOCAL_SYMBOL: b2World.cpp<1093:20> [b2World.cpp <1100:29 1100:32>]
LOCAL_SYMBOL: b2World.cpp<1094:10> [b2World.cpp <1094:10 1094:20>]
LOCAL_SYMBOL: b2World.cpp<1094:10> [b2World.cpp <1095:13 1095:23>]
LOCAL_SYMBOL: b2World.cpp<1094:10> [b2World.cpp <1098:26 1098:36>]
LOCAL_SYMBOL: b2World.cpp<1094:10> [b2World.cpp <1103:44 1103:54>]
LOCAL_SYMBOL: b2World.cpp<1096:11> [b2World.cpp <1096:11 1096:18>]
LOCAL_SYMBOL: b2World.cpp<1096:11> [b2World.cpp <1100:5 1100:12>]
LOCAL_SYMBOL: b2World.cpp<1096:11> [b2World.cpp <1103:34 1103:41>]
LOCAL_SYMBOL: b2World.cpp<1098:15> [b2World.cpp <1098:15 1098:15>]
LOCAL_SYMBOL: b2World.cpp<1098:15> [b2World.cpp <1098:22 1098:22>]
LOCAL_SYMBOL: b2World.cpp<1098:15> [b2World.cpp <1098:41 1098:41>]
LOCAL_SYMBOL: b2World.cpp<1098:15> [b2World.cpp <1100:14 1100:14>]
LOCAL_SYMBOL: b2World.cpp<1098:15> [b2World.cpp <1100:46 1100:46>]
LOCAL_SYMBOL: b2World.cpp<1099:4> [b2World.cpp <1099:4 1099:4>]
LOCAL_SYMBOL: b2World.cpp<1099:4> [b2World.cpp <1101:4 1101:4>]
LOCAL_SYMBOL: b2World.cpp<1112:34> [b2World.cpp <1112:34 1112:38>]
LOCAL_SYMBOL: b2World.cpp<1112:34> [b2World.cpp <1114:18 1114:22>]
LOCAL_SYMBOL: b2World.cpp<1112:34> [b2World.cpp <1115:18 1115:22>]
LOCAL_SYMBOL: b2World.cpp<1112:34> [b2World.cpp <1120:14 1120:18>]
LOCAL_SYMBOL: b2World.cpp<1112:34> [b2World.cpp <1121:14 1121:18>]
LOCAL_SYMBOL: b2World.cpp<1112:34> [b2World.cpp <1125:10 1125:14>]
LOCAL_SYMBOL: b2World.cpp<1112:34> [b2World.cpp <1133:44 1133:48>]
LOCAL_SYMBOL: b2World.cpp<1113:1> [b2World.cpp <1113:1 1113:1>]
LOCAL_SYMBOL: b2World.cpp<1113:1> [b2World.cpp <1151:1 1151:1>]
LOCAL_SYMBOL: b2World.cpp<1114:10> [b2World.cpp <1114:10 1114:14>]
LOCAL_SYMBOL: b2World.cpp<1114:10> [b2World.cpp <1116:27 1116:31>]
LOCAL_SYMBOL: b2World.cpp<1115:10> [b2World.cpp <1115:10 1115:14>]
LOCAL_SYMBOL: b2World.cpp<1115:10> [b2World.cpp <1117:27 1117:31>]
LOCAL_SYMBOL: b2World.cpp<1116:21> [b2World.cpp <1116:21 1116:23>]
LOCAL_SYMBOL: b2World.cpp<1116:21> [b2World.cpp <1118:14 1118:16>]
LOCAL_SYMBOL: b2World.cpp<1117:21> [b2World.cpp <1117:21 1117:23>]
LOCAL_SYMBOL: b2World.cpp<1117:21> [b2World.cpp <1119:14 1119:16>]
LOCAL_SYMBOL: b2World.cpp<1118:9> [b2World.cpp <1118:9 1118:10>]
LOCAL_SYMBOL: b2World.cpp<1118:9> [b2World.cpp <1147:28 1147:29>]
LOCAL_SYMBOL: b2World.cpp<1119:9> [b2World.cpp <1119:9 1119:10>]
LOCAL_SYMBOL: b2World.cpp<1119:9> [b2World.cpp <1149:28 1149:29>]
LOCAL_SYMBOL: b2World.cpp<111:2> [b2World.cpp <111:2 111:2>]
LOCAL_SYMBOL: b2World.cpp<111:2> [b2World.cpp <113:2 113:2>]
LOCAL_SYMBOL: b2World.cpp<1120:9> [b2World.cpp <1120:9 1120:10>]
LOCAL_SYMBOL: b2World.cpp<1120:9> [b2World.cpp <1128:28 1128:29>]
LOCAL_SYMBOL: b2World.cpp<1120:9> [b2World.cpp <1136:33 1136:34>]
LOCAL_SYMBOL: b2World.cpp<1120:9> [b2World.cpp <1147:32 1147:33>]
LOCAL_SYMBOL: b2World.cpp<1120:9> [b2World.cpp <1148:28 1148:29>]
LOCAL_SYMBOL: b2World.cpp<1121:9> [b2World.cpp <1121:9 1121:10>]
LOCAL_SYMBOL: b2World.cpp<1121:9> [b2World.cpp <1128:32 1128:33>]
LOCAL_SYMBOL: b2World.cpp<1121:9> [b2World.cpp <1137:33 1137:34>]
LOCAL_SYMBOL: b2World.cpp<1121:9> [b2World.cpp <1148:32 1148:33>]
LOCAL_SYMBOL: b2World.cpp<1121:9> [b2World.cpp <1149:32 1149:33>]
LOCAL_SYMBOL: b2World.cpp<1123:10> [b2World.cpp <1123:10 1123:14>]
LOCAL_SYMBOL: b2World.cpp<1123:10> [b2World.cpp <1128:36 1128:40>]
LOCAL_SYMBOL: b2World.cpp<1123:10> [b2World.cpp <1136:37 1136:41>]
LOCAL_SYMBOL: b2World.cpp<1123:10> [b2World.cpp <1137:37 1137:41>]
LOCAL_SYMBOL: b2World.cpp<1123:10> [b2World.cpp <1138:37 1138:41>]
LOCAL_SYMBOL: b2World.cpp<1123:10> [b2World.cpp <1147:36 1147:40>]
LOCAL_SYMBOL: b2World.cpp<1123:10> [b2World.cpp <1148:36 1148:40>]
LOCAL_SYMBOL: b2World.cpp<1123:10> [b2World.cpp <1149:36 1149:40>]
LOCAL_SYMBOL: b2World.cpp<1126:2> [b2World.cpp <1126:2 1126:2>]
LOCAL_SYMBOL: b2World.cpp<1126:2> [b2World.cpp <1150:2 1150:2>]
LOCAL_SYMBOL: b2World.cpp<1132:3> [b2World.cpp <1132:3 1132:3>]
LOCAL_SYMBOL: b2World.cpp<1132:3> [b2World.cpp <1139:3 1139:3>]
LOCAL_SYMBOL: b2World.cpp<1133:19> [b2World.cpp <1133:19 1133:24>]
LOCAL_SYMBOL: b2World.cpp<1133:19> [b2World.cpp <1134:16 1134:21>]
LOCAL_SYMBOL: b2World.cpp<1133:19> [b2World.cpp <1135:16 1135:21>]
LOCAL_SYMBOL: b2World.cpp<1134:11> [b2World.cpp <1134:11 1134:12>]
LOCAL_SYMBOL: b2World.cpp<1134:11> [b2World.cpp <1136:29 1136:30>]
LOCAL_SYMBOL: b2World.cpp<1134:11> [b2World.cpp <1138:29 1138:30>]
LOCAL_SYMBOL: b2World.cpp<1135:11> [b2World.cpp <1135:11 1135:12>]
LOCAL_SYMBOL: b2World.cpp<1135:11> [b2World.cpp <1137:29 1137:30>]
LOCAL_SYMBOL: b2World.cpp<1135:11> [b2World.cpp <1138:33 1138:34>]
LOCAL_SYMBOL: b2World.cpp<1154:1> [b2World.cpp <1154:1 1154:1>]
LOCAL_SYMBOL: b2World.cpp<1154:1> [b2World.cpp <1255:1 1255:1>]
LOCAL_SYMBOL: b2World.cpp<1156:2> [b2World.cpp <1156:2 1156:2>]
LOCAL_SYMBOL: b2World.cpp<1156:2> [b2World.cpp <1158:2 1158:2>]
LOCAL_SYMBOL: b2World.cpp<115:8> [b2World.cpp <115:8 115:10>]
LOCAL_SYMBOL: b2World.cpp<115:8> [b2World.cpp <116:19 116:21>]
LOCAL_SYMBOL: b2World.cpp<1160:9> [b2World.cpp <1160:9 1160:13>]
LOCAL_SYMBOL: b2World.cpp<1160:9> [b2World.cpp <1162:6 1162:10>]
LOCAL_SYMBOL: b2World.cpp<1160:9> [b2World.cpp <1193:6 1193:10>]
LOCAL_SYMBOL: b2World.cpp<1160:9> [b2World.cpp <1201:6 1201:10>]
LOCAL_SYMBOL: b2World.cpp<1160:9> [b2World.cpp <1216:6 1216:10>]
LOCAL_SYMBOL: b2World.cpp<1160:9> [b2World.cpp <1246:6 1246:10>]
LOCAL_SYMBOL: b2World.cpp<1163:2> [b2World.cpp <1163:2 1163:2>]
LOCAL_SYMBOL: b2World.cpp<1163:2> [b2World.cpp <1191:2 1191:2>]
LOCAL_SYMBOL: b2World.cpp<1164:16> [b2World.cpp <1164:16 1164:16>]
LOCAL_SYMBOL: b2World.cpp<1164:16> [b2World.cpp <1164:32 1164:32>]
LOCAL_SYMBOL: b2World.cpp<1164:16> [b2World.cpp <1164:35 1164:35>]
LOCAL_SYMBOL: b2World.cpp<1164:16> [b2World.cpp <1164:39 1164:39>]
LOCAL_SYMBOL: b2World.cpp<1164:16> [b2World.cpp <1166:28 1166:28>]
LOCAL_SYMBOL: b2World.cpp<1164:16> [b2World.cpp <1167:24 1167:24>]
LOCAL_SYMBOL: b2World.cpp<1164:16> [b2World.cpp <1169:9 1169:9>]
LOCAL_SYMBOL: b2World.cpp<1164:16> [b2World.cpp <1173:14 1173:14>]
LOCAL_SYMBOL: b2World.cpp<1164:16> [b2World.cpp <1177:14 1177:14>]
LOCAL_SYMBOL: b2World.cpp<1164:16> [b2World.cpp <1181:14 1181:14>]
LOCAL_SYMBOL: b2World.cpp<1165:3> [b2World.cpp <1165:3 1165:3>]
LOCAL_SYMBOL: b2World.cpp<1165:3> [b2World.cpp <1190:3 1190:3>]
LOCAL_SYMBOL: b2World.cpp<1166:23> [b2World.cpp <1166:23 1166:24>]
LOCAL_SYMBOL: b2World.cpp<1166:23> [b2World.cpp <1171:19 1171:20>]
LOCAL_SYMBOL: b2World.cpp<1166:23> [b2World.cpp <1175:19 1175:20>]
LOCAL_SYMBOL: b2World.cpp<1166:23> [b2World.cpp <1179:19 1179:20>]
LOCAL_SYMBOL: b2World.cpp<1166:23> [b2World.cpp <1183:19 1183:20>]
LOCAL_SYMBOL: b2World.cpp<1166:23> [b2World.cpp <1187:19 1187:20>]
LOCAL_SYMBOL: b2World.cpp<1167:20> [b2World.cpp <1167:20 1167:20>]
LOCAL_SYMBOL: b2World.cpp<1167:20> [b2World.cpp <1167:45 1167:45>]
LOCAL_SYMBOL: b2World.cpp<1167:20> [b2World.cpp <1167:48 1167:48>]
LOCAL_SYMBOL: b2World.cpp<1167:20> [b2World.cpp <1167:52 1167:52>]
LOCAL_SYMBOL: b2World.cpp<1167:20> [b2World.cpp <1171:16 1171:16>]
LOCAL_SYMBOL: b2World.cpp<1167:20> [b2World.cpp <1175:16 1175:16>]
LOCAL_SYMBOL: b2World.cpp<1167:20> [b2World.cpp <1179:16 1179:16>]
LOCAL_SYMBOL: b2World.cpp<1167:20> [b2World.cpp <1183:16 1183:16>]
LOCAL_SYMBOL: b2World.cpp<1167:20> [b2World.cpp <1187:16 1187:16>]
LOCAL_SYMBOL: b2World.cpp<1168:4> [b2World.cpp <1168:4 1168:4>]
LOCAL_SYMBOL: b2World.cpp<1168:4> [b2World.cpp <1189:4 1189:4>]
LOCAL_SYMBOL: b2World.cpp<116:10> [b2World.cpp <116:10 116:10>]
LOCAL_SYMBOL: b2World.cpp<116:10> [b2World.cpp <119:2 119:2>]
LOCAL_SYMBOL: b2World.cpp<116:10> [b2World.cpp <120:2 120:2>]
LOCAL_SYMBOL: b2World.cpp<116:10> [b2World.cpp <123:24 123:24>]
LOCAL_SYMBOL: b2World.cpp<116:10> [b2World.cpp <125:15 125:15>]
LOCAL_SYMBOL: b2World.cpp<116:10> [b2World.cpp <128:9 128:9>]
LOCAL_SYMBOL: b2World.cpp<1170:5> [b2World.cpp <1170:5 1170:5>]
LOCAL_SYMBOL: b2World.cpp<1170:5> [b2World.cpp <1172:5 1172:5>]
LOCAL_SYMBOL: b2World.cpp<1174:5> [b2World.cpp <1174:5 1174:5>]
LOCAL_SYMBOL: b2World.cpp<1174:5> [b2World.cpp <1176:5 1176:5>]
LOCAL_SYMBOL: b2World.cpp<1178:5> [b2World.cpp <1178:5 1178:5>]
LOCAL_SYMBOL: b2World.cpp<1178:5> [b2World.cpp <1180:5 1180:5>]
LOCAL_SYMBOL: b2World.cpp<1182:5> [b2World.cpp <1182:5 1182:5>]
LOCAL_SYMBOL: b2World.cpp<1182:5> [b2World.cpp <1184:5 1184:5>]
LOCAL_SYMBOL: b2World.cpp<1186:5> [b2World.cpp <1186:5 1186:5>]
LOCAL_SYMBOL: b2World.cpp<1186:5> [b2World.cpp <1188:5 1188:5>]
LOCAL_SYMBOL: b2World.cpp<1194:2> [b2World.cpp <1194:2 1194:2>]
LOCAL_SYMBOL: b2World.cpp<1194:2> [b2World.cpp <1199:2 1199:2>]
LOCAL_SYMBOL: b2World.cpp<1195:17> [b2World.cpp <1195:17 1195:17>]
LOCAL_SYMBOL: b2World.cpp<1195:17> [b2World.cpp <1195:34 1195:34>]
LOCAL_SYMBOL: b2World.cpp<1195:17> [b2World.cpp <1195:37 1195:37>]
LOCAL_SYMBOL: b2World.cpp<1195:17> [b2World.cpp <1195:41 1195:41>]
LOCAL_SYMBOL: b2World.cpp<1195:17> [b2World.cpp <1197:14 1197:14>]
LOCAL_SYMBOL: b2World.cpp<1196:3> [b2World.cpp <1196:3 1196:3>]
LOCAL_SYMBOL: b2World.cpp<1196:3> [b2World.cpp <1198:3 1198:3>]
LOCAL_SYMBOL: b2World.cpp<1202:2> [b2World.cpp <1202:2 1202:2>]
LOCAL_SYMBOL: b2World.cpp<1202:2> [b2World.cpp <1214:2 1214:2>]
LOCAL_SYMBOL: b2World.cpp<1203:11> [b2World.cpp <1203:11 1203:15>]
LOCAL_SYMBOL: b2World.cpp<1204:19> [b2World.cpp <1204:19 1204:19>]
LOCAL_SYMBOL: b2World.cpp<1204:19> [b2World.cpp <1204:55 1204:55>]
LOCAL_SYMBOL: b2World.cpp<1204:19> [b2World.cpp <1204:58 1204:58>]
LOCAL_SYMBOL: b2World.cpp<1204:19> [b2World.cpp <1204:62 1204:62>]
LOCAL_SYMBOL: b2World.cpp<1205:3> [b2World.cpp <1205:3 1205:3>]
LOCAL_SYMBOL: b2World.cpp<1205:3> [b2World.cpp <1213:3 1213:3>]
LOCAL_SYMBOL: b2World.cpp<1217:2> [b2World.cpp <1217:2 1217:2>]
LOCAL_SYMBOL: b2World.cpp<1217:2> [b2World.cpp <1244:2 1244:2>]
LOCAL_SYMBOL: b2World.cpp<1218:11> [b2World.cpp <1218:11 1218:15>]
LOCAL_SYMBOL: b2World.cpp<1218:11> [b2World.cpp <1240:38 1240:42>]
LOCAL_SYMBOL: b2World.cpp<1219:17> [b2World.cpp <1219:17 1219:18>]
LOCAL_SYMBOL: b2World.cpp<1219:17> [b2World.cpp <1233:20 1233:21>]
LOCAL_SYMBOL: b2World.cpp<1221:16> [b2World.cpp <1221:16 1221:16>]
LOCAL_SYMBOL: b2World.cpp<1221:16> [b2World.cpp <1221:32 1221:32>]
LOCAL_SYMBOL: b2World.cpp<1221:16> [b2World.cpp <1221:35 1221:35>]
LOCAL_SYMBOL: b2World.cpp<1221:16> [b2World.cpp <1221:39 1221:39>]
LOCAL_SYMBOL: b2World.cpp<1221:16> [b2World.cpp <1223:8 1223:8>]
LOCAL_SYMBOL: b2World.cpp<1221:16> [b2World.cpp <1228:24 1228:24>]
LOCAL_SYMBOL: b2World.cpp<1222:3> [b2World.cpp <1222:3 1222:3>]
LOCAL_SYMBOL: b2World.cpp<1222:3> [b2World.cpp <1243:3 1243:3>]
LOCAL_SYMBOL: b2World.cpp<1224:4> [b2World.cpp <1224:4 1224:4>]
LOCAL_SYMBOL: b2World.cpp<1224:4> [b2World.cpp <1226:4 1226:4>]
LOCAL_SYMBOL: b2World.cpp<1228:20> [b2World.cpp <1228:20 1228:20>]
LOCAL_SYMBOL: b2World.cpp<1228:20> [b2World.cpp <1228:45 1228:45>]
LOCAL_SYMBOL: b2World.cpp<1228:20> [b2World.cpp <1228:48 1228:48>]
LOCAL_SYMBOL: b2World.cpp<1228:20> [b2World.cpp <1228:52 1228:52>]
LOCAL_SYMBOL: b2World.cpp<1228:20> [b2World.cpp <1230:27 1230:27>]
LOCAL_SYMBOL: b2World.cpp<1228:20> [b2World.cpp <1232:30 1232:30>]
LOCAL_SYMBOL: b2World.cpp<1229:4> [b2World.cpp <1229:4 1229:4>]
LOCAL_SYMBOL: b2World.cpp<1229:4> [b2World.cpp <1242:4 1242:4>]
LOCAL_SYMBOL: b2World.cpp<122:2> [b2World.cpp <122:2 122:2>]
LOCAL_SYMBOL: b2World.cpp<122:2> [b2World.cpp <124:2 124:2>]
LOCAL_SYMBOL: b2World.cpp<1230:16> [b2World.cpp <1230:16 1230:16>]
LOCAL_SYMBOL: b2World.cpp<1230:16> [b2World.cpp <1230:23 1230:23>]
LOCAL_SYMBOL: b2World.cpp<1230:16> [b2World.cpp <1230:46 1230:46>]
LOCAL_SYMBOL: b2World.cpp<1230:16> [b2World.cpp <1232:45 1232:45>]
LOCAL_SYMBOL: b2World.cpp<1231:5> [b2World.cpp <1231:5 1231:5>]
LOCAL_SYMBOL: b2World.cpp<1231:5> [b2World.cpp <1241:5 1241:5>]
LOCAL_SYMBOL: b2World.cpp<1232:22> [b2World.cpp <1232:22 1232:26>]
LOCAL_SYMBOL: b2World.cpp<1232:22> [b2World.cpp <1233:35 1233:39>]
LOCAL_SYMBOL: b2World.cpp<1233:13> [b2World.cpp <1233:13 1233:16>]
LOCAL_SYMBOL: b2World.cpp<1233:13> [b2World.cpp <1235:16 1235:19>]
LOCAL_SYMBOL: b2World.cpp<1233:13> [b2World.cpp <1235:35 1235:38>]
LOCAL_SYMBOL: b2World.cpp<1233:13> [b2World.cpp <1236:16 1236:19>]
LOCAL_SYMBOL: b2World.cpp<1233:13> [b2World.cpp <1236:35 1236:38>]
LOCAL_SYMBOL: b2World.cpp<1233:13> [b2World.cpp <1237:16 1237:19>]
LOCAL_SYMBOL: b2World.cpp<1233:13> [b2World.cpp <1237:35 1237:38>]
LOCAL_SYMBOL: b2World.cpp<1233:13> [b2World.cpp <1238:16 1238:19>]
LOCAL_SYMBOL: b2World.cpp<1233:13> [b2World.cpp <1238:35 1238:38>]
LOCAL_SYMBOL: b2World.cpp<1234:13> [b2World.cpp <1234:13 1234:14>]
LOCAL_SYMBOL: b2World.cpp<1234:13> [b2World.cpp <1235:6 1235:7>]
LOCAL_SYMBOL: b2World.cpp<1234:13> [b2World.cpp <1236:6 1236:7>]
LOCAL_SYMBOL: b2World.cpp<1234:13> [b2World.cpp <1237:6 1237:7>]
LOCAL_SYMBOL: b2World.cpp<1234:13> [b2World.cpp <1238:6 1238:7>]
LOCAL_SYMBOL: b2World.cpp<1234:13> [b2World.cpp <1240:31 1240:32>]
LOCAL_SYMBOL: b2World.cpp<1247:2> [b2World.cpp <1247:2 1247:2>]
LOCAL_SYMBOL: b2World.cpp<1247:2> [b2World.cpp <1254:2 1254:2>]
LOCAL_SYMBOL: b2World.cpp<1248:16> [b2World.cpp <1248:16 1248:16>]
LOCAL_SYMBOL: b2World.cpp<1248:16> [b2World.cpp <1248:32 1248:32>]
LOCAL_SYMBOL: b2World.cpp<1248:16> [b2World.cpp <1248:35 1248:35>]
LOCAL_SYMBOL: b2World.cpp<1248:16> [b2World.cpp <1248:39 1248:39>]
LOCAL_SYMBOL: b2World.cpp<1248:16> [b2World.cpp <1250:21 1250:21>]
LOCAL_SYMBOL: b2World.cpp<1248:16> [b2World.cpp <1251:11 1251:11>]
LOCAL_SYMBOL: b2World.cpp<1249:3> [b2World.cpp <1249:3 1249:3>]
LOCAL_SYMBOL: b2World.cpp<1249:3> [b2World.cpp <1253:3 1253:3>]
LOCAL_SYMBOL: b2World.cpp<1250:16> [b2World.cpp <1250:16 1250:17>]
LOCAL_SYMBOL: b2World.cpp<1250:16> [b2World.cpp <1251:4 1251:5>]
LOCAL_SYMBOL: b2World.cpp<1250:16> [b2World.cpp <1252:31 1252:32>]
LOCAL_SYMBOL: b2World.cpp<1258:1> [b2World.cpp <1258:1 1258:1>]
LOCAL_SYMBOL: b2World.cpp<1258:1> [b2World.cpp <1260:1 1260:1>]
LOCAL_SYMBOL: b2World.cpp<1263:1> [b2World.cpp <1263:1 1263:1>]
LOCAL_SYMBOL: b2World.cpp<1263:1> [b2World.cpp <1265:1 1265:1>]
LOCAL_SYMBOL: b2World.cpp<1268:1> [b2World.cpp <1268:1 1268:1>]
LOCAL_SYMBOL: b2World.cpp<1268:1> [b2World.cpp <1270:1 1270:1>]
LOCAL_SYMBOL: b2World.cpp<1273:1> [b2World.cpp <1273:1 1273:1>]
LOCAL_SYMBOL: b2World.cpp<1273:1> [b2World.cpp <1275:1 1275:1>]
LOCAL_SYMBOL: b2World.cpp<1277:41> [b2World.cpp <1277:41 1277:49>]
LOCAL_SYMBOL: b2World.cpp<1277:41> [b2World.cpp <1287:16 1287:24>]
LOCAL_SYMBOL: b2World.cpp<1277:41> [b2World.cpp <1288:20 1288:28>]
LOCAL_SYMBOL: b2World.cpp<1277:41> [b2World.cpp <1289:19 1289:27>]
LOCAL_SYMBOL: b2World.cpp<1277:41> [b2World.cpp <1294:18 1294:26>]
LOCAL_SYMBOL: b2World.cpp<1277:41> [b2World.cpp <1297:44 1297:52>]
LOCAL_SYMBOL: b2World.cpp<1278:1> [b2World.cpp <1278:1 1278:1>]
LOCAL_SYMBOL: b2World.cpp<1278:1> [b2World.cpp <1298:1 1298:1>]
LOCAL_SYMBOL: b2World.cpp<1281:2> [b2World.cpp <1281:2 1281:2>]
LOCAL_SYMBOL: b2World.cpp<1281:2> [b2World.cpp <1283:2 1283:2>]
LOCAL_SYMBOL: b2World.cpp<1285:15> [b2World.cpp <1285:15 1285:15>]
LOCAL_SYMBOL: b2World.cpp<1285:15> [b2World.cpp <1285:31 1285:31>]
LOCAL_SYMBOL: b2World.cpp<1285:15> [b2World.cpp <1285:34 1285:34>]
LOCAL_SYMBOL: b2World.cpp<1285:15> [b2World.cpp <1285:38 1285:38>]
LOCAL_SYMBOL: b2World.cpp<1285:15> [b2World.cpp <1287:3 1287:3>]
LOCAL_SYMBOL: b2World.cpp<1285:15> [b2World.cpp <1288:3 1288:3>]
LOCAL_SYMBOL: b2World.cpp<1285:15> [b2World.cpp <1289:3 1289:3>]
LOCAL_SYMBOL: b2World.cpp<1286:2> [b2World.cpp <1286:2 1286:2>]
LOCAL_SYMBOL: b2World.cpp<1286:2> [b2World.cpp <1290:2 1290:2>]
LOCAL_SYMBOL: b2World.cpp<1292:16> [b2World.cpp <1292:16 1292:16>]
LOCAL_SYMBOL: b2World.cpp<1292:16> [b2World.cpp <1292:33 1292:33>]
LOCAL_SYMBOL: b2World.cpp<1292:16> [b2World.cpp <1292:36 1292:36>]
LOCAL_SYMBOL: b2World.cpp<1292:16> [b2World.cpp <1292:40 1292:40>]
LOCAL_SYMBOL: b2World.cpp<1292:16> [b2World.cpp <1294:3 1294:3>]
LOCAL_SYMBOL: b2World.cpp<1293:2> [b2World.cpp <1293:2 1293:2>]
LOCAL_SYMBOL: b2World.cpp<1293:2> [b2World.cpp <1295:2 1295:2>]
LOCAL_SYMBOL: b2World.cpp<1301:1> [b2World.cpp <1301:1 1301:1>]
LOCAL_SYMBOL: b2World.cpp<1301:1> [b2World.cpp <1357:1 1357:1>]
LOCAL_SYMBOL: b2World.cpp<1303:2> [b2World.cpp <1303:2 1303:2>]
LOCAL_SYMBOL: b2World.cpp<1303:2> [b2World.cpp <1305:2 1305:2>]
LOCAL_SYMBOL: b2World.cpp<1312:8> [b2World.cpp <1312:8 1312:8>]
LOCAL_SYMBOL: b2World.cpp<1312:8> [b2World.cpp <1315:22 1315:22>]
LOCAL_SYMBOL: b2World.cpp<1312:8> [b2World.cpp <1317:5 1317:5>]
LOCAL_SYMBOL: b2World.cpp<1312:8> [b2World.cpp <1320:2 1320:2>]
LOCAL_SYMBOL: b2World.cpp<1312:8> [b2World.cpp <1323:16 1323:16>]
LOCAL_SYMBOL: b2World.cpp<1312:8> [b2World.cpp <1324:5 1324:5>]
LOCAL_SYMBOL: b2World.cpp<1313:15> [b2World.cpp <1313:15 1313:15>]
LOCAL_SYMBOL: b2World.cpp<1313:15> [b2World.cpp <1313:31 1313:31>]
LOCAL_SYMBOL: b2World.cpp<1313:15> [b2World.cpp <1313:34 1313:34>]
LOCAL_SYMBOL: b2World.cpp<1313:15> [b2World.cpp <1313:38 1313:38>]
LOCAL_SYMBOL: b2World.cpp<1313:15> [b2World.cpp <1315:3 1315:3>]
LOCAL_SYMBOL: b2World.cpp<1313:15> [b2World.cpp <1316:3 1316:3>]
LOCAL_SYMBOL: b2World.cpp<1314:2> [b2World.cpp <1314:2 1314:2>]
LOCAL_SYMBOL: b2World.cpp<1314:2> [b2World.cpp <1318:2 1318:2>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <131:35 131:35>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <141:20 141:20>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <154:3 154:3>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <156:2 156:2>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <159:22 159:22>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <166:2 166:2>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <169:17 169:17>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <185:3 185:3>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <186:3 186:3>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <188:2 188:2>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <189:2 189:2>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <192:6 192:6>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <194:3 194:3>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <194:23 194:23>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <197:6 197:6>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <199:3 199:3>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <199:23 199:23>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <202:6 202:6>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <204:16 204:16>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <208:2 208:2>]
LOCAL_SYMBOL: b2World.cpp<131:35> [b2World.cpp <209:24 209:24>]
LOCAL_SYMBOL: b2World.cpp<1321:16> [b2World.cpp <1321:16 1321:16>]
LOCAL_SYMBOL: b2World.cpp<1321:16> [b2World.cpp <1321:33 1321:33>]
LOCAL_SYMBOL: b2World.cpp<1321:16> [b2World.cpp <1321:36 1321:36>]
LOCAL_SYMBOL: b2World.cpp<1321:16> [b2World.cpp <1321:40 1321:40>]
LOCAL_SYMBOL: b2World.cpp<1321:16> [b2World.cpp <1323:3 1323:3>]
LOCAL_SYMBOL: b2World.cpp<1322:2> [b2World.cpp <1322:2 1322:2>]
LOCAL_SYMBOL: b2World.cpp<1322:2> [b2World.cpp <1325:2 1325:2>]
LOCAL_SYMBOL: b2World.cpp<1328:16> [b2World.cpp <1328:16 1328:16>]
LOCAL_SYMBOL: b2World.cpp<1328:16> [b2World.cpp <1328:33 1328:33>]
LOCAL_SYMBOL: b2World.cpp<1328:16> [b2World.cpp <1328:36 1328:36>]
LOCAL_SYMBOL: b2World.cpp<1328:16> [b2World.cpp <1328:40 1328:40>]
LOCAL_SYMBOL: b2World.cpp<1328:16> [b2World.cpp <1330:7 1330:7>]
LOCAL_SYMBOL: b2World.cpp<1328:16> [b2World.cpp <1336:3 1336:3>]
LOCAL_SYMBOL: b2World.cpp<1329:2> [b2World.cpp <1329:2 1329:2>]
LOCAL_SYMBOL: b2World.cpp<1329:2> [b2World.cpp <1338:2 1338:2>]
LOCAL_SYMBOL: b2World.cpp<132:1> [b2World.cpp <132:1 132:1>]
LOCAL_SYMBOL: b2World.cpp<132:1> [b2World.cpp <210:1 210:1>]
LOCAL_SYMBOL: b2World.cpp<1331:3> [b2World.cpp <1331:3 1331:3>]
LOCAL_SYMBOL: b2World.cpp<1331:3> [b2World.cpp <1333:3 1333:3>]
LOCAL_SYMBOL: b2World.cpp<1341:16> [b2World.cpp <1341:16 1341:16>]
LOCAL_SYMBOL: b2World.cpp<1341:16> [b2World.cpp <1341:33 1341:33>]
LOCAL_SYMBOL: b2World.cpp<1341:16> [b2World.cpp <1341:36 1341:36>]
LOCAL_SYMBOL: b2World.cpp<1341:16> [b2World.cpp <1341:40 1341:40>]
LOCAL_SYMBOL: b2World.cpp<1341:16> [b2World.cpp <1343:7 1343:7>]
LOCAL_SYMBOL: b2World.cpp<1341:16> [b2World.cpp <1349:3 1349:3>]
LOCAL_SYMBOL: b2World.cpp<1342:2> [b2World.cpp <1342:2 1342:2>]
LOCAL_SYMBOL: b2World.cpp<1342:2> [b2World.cpp <1351:2 1351:2>]
LOCAL_SYMBOL: b2World.cpp<1344:3> [b2World.cpp <1344:3 1344:3>]
LOCAL_SYMBOL: b2World.cpp<1344:3> [b2World.cpp <1346:3 1346:3>]
LOCAL_SYMBOL: b2World.cpp<136:2> [b2World.cpp <136:2 136:2>]
LOCAL_SYMBOL: b2World.cpp<136:2> [b2World.cpp <138:2 138:2>]
LOCAL_SYMBOL: b2World.cpp<141:15> [b2World.cpp <141:15 141:16>]
LOCAL_SYMBOL: b2World.cpp<141:15> [b2World.cpp <142:9 142:10>]
LOCAL_SYMBOL: b2World.cpp<141:15> [b2World.cpp <144:22 144:23>]
LOCAL_SYMBOL: b2World.cpp<141:15> [b2World.cpp <145:3 145:4>]
LOCAL_SYMBOL: b2World.cpp<141:15> [b2World.cpp <145:8 145:9>]
LOCAL_SYMBOL: b2World.cpp<141:15> [b2World.cpp <154:20 154:21>]
LOCAL_SYMBOL: b2World.cpp<143:2> [b2World.cpp <143:2 143:2>]
LOCAL_SYMBOL: b2World.cpp<143:2> [b2World.cpp <155:2 155:2>]
LOCAL_SYMBOL: b2World.cpp<144:16> [b2World.cpp <144:16 144:18>]
LOCAL_SYMBOL: b2World.cpp<144:16> [b2World.cpp <149:38 149:40>]
LOCAL_SYMBOL: b2World.cpp<144:16> [b2World.cpp <152:16 152:18>]
LOCAL_SYMBOL: b2World.cpp<148:3> [b2World.cpp <148:3 148:3>]
LOCAL_SYMBOL: b2World.cpp<148:3> [b2World.cpp <150:3 150:3>]
LOCAL_SYMBOL: b2World.cpp<159:17> [b2World.cpp <159:17 159:18>]
LOCAL_SYMBOL: b2World.cpp<159:17> [b2World.cpp <160:9 160:10>]
LOCAL_SYMBOL: b2World.cpp<159:17> [b2World.cpp <162:24 162:25>]
LOCAL_SYMBOL: b2World.cpp<159:17> [b2World.cpp <163:3 163:4>]
LOCAL_SYMBOL: b2World.cpp<159:17> [b2World.cpp <163:8 163:9>]
LOCAL_SYMBOL: b2World.cpp<161:2> [b2World.cpp <161:2 161:2>]
LOCAL_SYMBOL: b2World.cpp<161:2> [b2World.cpp <165:2 165:2>]
LOCAL_SYMBOL: b2World.cpp<162:18> [b2World.cpp <162:18 162:20>]
LOCAL_SYMBOL: b2World.cpp<162:18> [b2World.cpp <164:28 164:30>]
LOCAL_SYMBOL: b2World.cpp<169:13> [b2World.cpp <169:13 169:13>]
LOCAL_SYMBOL: b2World.cpp<169:13> [b2World.cpp <170:9 170:9>]
LOCAL_SYMBOL: b2World.cpp<169:13> [b2World.cpp <172:19 172:19>]
LOCAL_SYMBOL: b2World.cpp<169:13> [b2World.cpp <173:3 173:3>]
LOCAL_SYMBOL: b2World.cpp<169:13> [b2World.cpp <173:7 173:7>]
LOCAL_SYMBOL: b2World.cpp<169:13> [b2World.cpp <185:22 185:22>]
LOCAL_SYMBOL: b2World.cpp<171:2> [b2World.cpp <171:2 171:2>]
LOCAL_SYMBOL: b2World.cpp<171:2> [b2World.cpp <187:2 187:2>]
LOCAL_SYMBOL: b2World.cpp<172:14> [b2World.cpp <172:14 172:15>]
LOCAL_SYMBOL: b2World.cpp<172:14> [b2World.cpp <177:38 177:39>]
LOCAL_SYMBOL: b2World.cpp<172:14> [b2World.cpp <180:3 180:4>]
LOCAL_SYMBOL: b2World.cpp<172:14> [b2World.cpp <181:3 181:4>]
LOCAL_SYMBOL: b2World.cpp<172:14> [b2World.cpp <182:3 182:4>]
LOCAL_SYMBOL: b2World.cpp<172:14> [b2World.cpp <183:25 183:26>]
LOCAL_SYMBOL: b2World.cpp<176:3> [b2World.cpp <176:3 176:3>]
LOCAL_SYMBOL: b2World.cpp<176:3> [b2World.cpp <178:3 178:3>]
LOCAL_SYMBOL: b2World.cpp<193:2> [b2World.cpp <193:2 193:2>]
LOCAL_SYMBOL: b2World.cpp<193:2> [b2World.cpp <195:2 195:2>]
LOCAL_SYMBOL: b2World.cpp<198:2> [b2World.cpp <198:2 198:2>]
LOCAL_SYMBOL: b2World.cpp<198:2> [b2World.cpp <200:2 200:2>]
LOCAL_SYMBOL: b2World.cpp<203:2> [b2World.cpp <203:2 203:2>]
LOCAL_SYMBOL: b2World.cpp<203:2> [b2World.cpp <205:2 205:2>]
LOCAL_SYMBOL: b2World.cpp<212:49> [b2World.cpp <212:49 212:51>]
LOCAL_SYMBOL: b2World.cpp<212:49> [b2World.cpp <220:31 220:33>]
LOCAL_SYMBOL: b2World.cpp<212:49> [b2World.cpp <247:18 247:20>]
LOCAL_SYMBOL: b2World.cpp<212:49> [b2World.cpp <248:18 248:20>]
LOCAL_SYMBOL: b2World.cpp<212:49> [b2World.cpp <251:6 251:8>]
LOCAL_SYMBOL: b2World.cpp<213:1> [b2World.cpp <213:1 213:1>]
LOCAL_SYMBOL: b2World.cpp<213:1> [b2World.cpp <270:1 270:1>]
LOCAL_SYMBOL: b2World.cpp<216:2> [b2World.cpp <216:2 216:2>]
LOCAL_SYMBOL: b2World.cpp<216:2> [b2World.cpp <218:2 218:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <220:11 220:11>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <223:2 223:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <224:2 224:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <227:25 227:25>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <229:16 229:16>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <233:2 233:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <233:21 233:21>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <234:2 234:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <234:21 234:21>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <235:2 235:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <236:2 236:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <236:20 236:20>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <237:6 237:6>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <237:31 237:31>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <237:64 237:64>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <238:2 238:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <238:29 238:29>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <240:2 240:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <240:21 240:21>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <241:2 241:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <241:21 241:21>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <242:2 242:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <243:2 243:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <243:20 243:20>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <244:6 244:6>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <244:31 244:31>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <244:64 244:64>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <245:2 245:2>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <245:29 245:29>]
LOCAL_SYMBOL: b2World.cpp<220:11> [b2World.cpp <269:9 269:9>]
LOCAL_SYMBOL: b2World.cpp<226:2> [b2World.cpp <226:2 226:2>]
LOCAL_SYMBOL: b2World.cpp<226:2> [b2World.cpp <228:2 228:2>]
LOCAL_SYMBOL: b2World.cpp<247:10> [b2World.cpp <247:10 247:14>]
LOCAL_SYMBOL: b2World.cpp<247:10> [b2World.cpp <256:23 256:27>]
LOCAL_SYMBOL: b2World.cpp<248:10> [b2World.cpp <248:10 248:14>]
LOCAL_SYMBOL: b2World.cpp<248:10> [b2World.cpp <253:25 253:29>]
LOCAL_SYMBOL: b2World.cpp<252:2> [b2World.cpp <252:2 252:2>]
LOCAL_SYMBOL: b2World.cpp<252:2> [b2World.cpp <265:2 265:2>]
LOCAL_SYMBOL: b2World.cpp<253:18> [b2World.cpp <253:18 253:21>]
LOCAL_SYMBOL: b2World.cpp<253:18> [b2World.cpp <254:10 254:13>]
LOCAL_SYMBOL: b2World.cpp<253:18> [b2World.cpp <256:8 256:11>]
LOCAL_SYMBOL: b2World.cpp<253:18> [b2World.cpp <260:5 260:8>]
LOCAL_SYMBOL: b2World.cpp<253:18> [b2World.cpp <263:4 263:7>]
LOCAL_SYMBOL: b2World.cpp<253:18> [b2World.cpp <263:11 263:14>]
LOCAL_SYMBOL: b2World.cpp<255:3> [b2World.cpp <255:3 255:3>]
LOCAL_SYMBOL: b2World.cpp<255:3> [b2World.cpp <264:3 264:3>]
LOCAL_SYMBOL: b2World.cpp<257:4> [b2World.cpp <257:4 257:4>]
LOCAL_SYMBOL: b2World.cpp<257:4> [b2World.cpp <261:4 261:4>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <272:37 272:37>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <280:26 280:26>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <283:6 283:6>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <285:3 285:3>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <285:23 285:23>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <288:6 288:6>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <290:3 290:3>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <290:23 290:23>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <293:6 293:6>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <295:17 295:17>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <299:18 299:18>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <300:18 300:18>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <307:6 307:6>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <309:3 309:3>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <309:27 309:27>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <312:6 312:6>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <314:3 314:3>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <314:27 314:27>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <317:7 317:7>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <319:24 319:24>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <322:2 322:2>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <323:2 323:2>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <326:6 326:6>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <328:3 328:3>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <328:27 328:27>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <331:6 331:6>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <333:3 333:3>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <333:27 333:27>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <336:7 336:7>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <338:24 338:24>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <341:2 341:2>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <342:2 342:2>]
LOCAL_SYMBOL: b2World.cpp<272:37> [b2World.cpp <344:19 344:19>]
LOCAL_SYMBOL: b2World.cpp<273:1> [b2World.cpp <273:1 273:1>]
LOCAL_SYMBOL: b2World.cpp<273:1> [b2World.cpp <365:1 365:1>]
LOCAL_SYMBOL: b2World.cpp<276:2> [b2World.cpp <276:2 276:2>]
LOCAL_SYMBOL: b2World.cpp<276:2> [b2World.cpp <278:2 278:2>]
LOCAL_SYMBOL: b2World.cpp<280:7> [b2World.cpp <280:7 280:22>]
LOCAL_SYMBOL: b2World.cpp<280:7> [b2World.cpp <350:6 350:21>]
LOCAL_SYMBOL: b2World.cpp<284:2> [b2World.cpp <284:2 284:2>]
LOCAL_SYMBOL: b2World.cpp<284:2> [b2World.cpp <286:2 286:2>]
LOCAL_SYMBOL: b2World.cpp<289:2> [b2World.cpp <289:2 289:2>]
LOCAL_SYMBOL: b2World.cpp<289:2> [b2World.cpp <291:2 291:2>]
LOCAL_SYMBOL: b2World.cpp<294:2> [b2World.cpp <294:2 294:2>]
LOCAL_SYMBOL: b2World.cpp<294:2> [b2World.cpp <296:2 296:2>]
LOCAL_SYMBOL: b2World.cpp<299:10> [b2World.cpp <299:10 299:14>]
LOCAL_SYMBOL: b2World.cpp<299:10> [b2World.cpp <303:2 303:6>]
LOCAL_SYMBOL: b2World.cpp<299:10> [b2World.cpp <317:21 317:25>]
LOCAL_SYMBOL: b2World.cpp<299:10> [b2World.cpp <319:3 319:7>]
LOCAL_SYMBOL: b2World.cpp<299:10> [b2World.cpp <355:23 355:27>]
LOCAL_SYMBOL: b2World.cpp<300:10> [b2World.cpp <300:10 300:14>]
LOCAL_SYMBOL: b2World.cpp<300:10> [b2World.cpp <304:2 304:6>]
LOCAL_SYMBOL: b2World.cpp<300:10> [b2World.cpp <336:21 336:25>]
LOCAL_SYMBOL: b2World.cpp<300:10> [b2World.cpp <338:3 338:7>]
LOCAL_SYMBOL: b2World.cpp<300:10> [b2World.cpp <352:25 352:29>]
LOCAL_SYMBOL: b2World.cpp<308:2> [b2World.cpp <308:2 308:2>]
LOCAL_SYMBOL: b2World.cpp<308:2> [b2World.cpp <310:2 310:2>]
LOCAL_SYMBOL: b2World.cpp<313:2> [b2World.cpp <313:2 313:2>]
LOCAL_SYMBOL: b2World.cpp<313:2> [b2World.cpp <315:2 315:2>]
LOCAL_SYMBOL: b2World.cpp<318:2> [b2World.cpp <318:2 318:2>]
LOCAL_SYMBOL: b2World.cpp<318:2> [b2World.cpp <320:2 320:2>]
LOCAL_SYMBOL: b2World.cpp<327:2> [b2World.cpp <327:2 327:2>]
LOCAL_SYMBOL: b2World.cpp<327:2> [b2World.cpp <329:2 329:2>]
LOCAL_SYMBOL: b2World.cpp<332:2> [b2World.cpp <332:2 332:2>]
LOCAL_SYMBOL: b2World.cpp<332:2> [b2World.cpp <334:2 334:2>]
LOCAL_SYMBOL: b2World.cpp<337:2> [b2World.cpp <337:2 337:2>]
LOCAL_SYMBOL: b2World.cpp<337:2> [b2World.cpp <339:2 339:2>]
LOCAL_SYMBOL: b2World.cpp<351:2> [b2World.cpp <351:2 351:2>]
LOCAL_SYMBOL: b2World.cpp<351:2> [b2World.cpp <364:2 364:2>]
LOCAL_SYMBOL: b2World.cpp<352:18> [b2World.cpp <352:18 352:21>]
LOCAL_SYMBOL: b2World.cpp<352:18> [b2World.cpp <353:10 353:13>]
LOCAL_SYMBOL: b2World.cpp<352:18> [b2World.cpp <355:8 355:11>]
LOCAL_SYMBOL: b2World.cpp<352:18> [b2World.cpp <359:5 359:8>]
LOCAL_SYMBOL: b2World.cpp<352:18> [b2World.cpp <362:4 362:7>]
LOCAL_SYMBOL: b2World.cpp<352:18> [b2World.cpp <362:11 362:14>]
LOCAL_SYMBOL: b2World.cpp<354:3> [b2World.cpp <354:3 354:3>]
LOCAL_SYMBOL: b2World.cpp<354:3> [b2World.cpp <363:3 363:3>]
LOCAL_SYMBOL: b2World.cpp<356:4> [b2World.cpp <356:4 356:4>]
LOCAL_SYMBOL: b2World.cpp<356:4> [b2World.cpp <360:4 360:4>]
LOCAL_SYMBOL: b2World.cpp<368:37> [b2World.cpp <368:37 368:40>]
LOCAL_SYMBOL: b2World.cpp<368:37> [b2World.cpp <370:6 370:9>]
LOCAL_SYMBOL: b2World.cpp<368:37> [b2World.cpp <375:17 375:20>]
LOCAL_SYMBOL: b2World.cpp<369:1> [b2World.cpp <369:1 369:1>]
LOCAL_SYMBOL: b2World.cpp<369:1> [b2World.cpp <383:1 383:1>]
LOCAL_SYMBOL: b2World.cpp<371:2> [b2World.cpp <371:2 371:2>]
LOCAL_SYMBOL: b2World.cpp<371:2> [b2World.cpp <373:2 373:2>]
LOCAL_SYMBOL: b2World.cpp<377:2> [b2World.cpp <377:2 377:2>]
LOCAL_SYMBOL: b2World.cpp<377:2> [b2World.cpp <382:2 382:2>]
LOCAL_SYMBOL: b2World.cpp<378:16> [b2World.cpp <378:16 378:16>]
LOCAL_SYMBOL: b2World.cpp<378:16> [b2World.cpp <378:32 378:32>]
LOCAL_SYMBOL: b2World.cpp<378:16> [b2World.cpp <378:35 378:35>]
LOCAL_SYMBOL: b2World.cpp<378:16> [b2World.cpp <378:39 378:39>]
LOCAL_SYMBOL: b2World.cpp<378:16> [b2World.cpp <380:4 380:4>]
LOCAL_SYMBOL: b2World.cpp<379:3> [b2World.cpp <379:3 379:3>]
LOCAL_SYMBOL: b2World.cpp<379:3> [b2World.cpp <381:3 381:3>]
LOCAL_SYMBOL: b2World.cpp<37:32> [b2World.cpp <37:32 37:38>]
LOCAL_SYMBOL: b2World.cpp<37:32> [b2World.cpp <55:14 55:20>]
LOCAL_SYMBOL: b2World.cpp<386:39> [b2World.cpp <386:39 386:42>]
LOCAL_SYMBOL: b2World.cpp<386:39> [b2World.cpp <531:26 531:29>]
LOCAL_SYMBOL: b2World.cpp<387:1> [b2World.cpp <387:1 387:1>]
LOCAL_SYMBOL: b2World.cpp<387:1> [b2World.cpp <574:1 574:1>]
LOCAL_SYMBOL: b2World.cpp<38:1> [b2World.cpp <38:1 38:1>]
LOCAL_SYMBOL: b2World.cpp<38:1> [b2World.cpp <64:1 64:1>]
LOCAL_SYMBOL: b2World.cpp<393:11> [b2World.cpp <393:11 393:16>]
LOCAL_SYMBOL: b2World.cpp<393:11> [b2World.cpp <435:3 435:8>]
LOCAL_SYMBOL: b2World.cpp<393:11> [b2World.cpp <446:4 446:9>]
LOCAL_SYMBOL: b2World.cpp<393:11> [b2World.cpp <484:5 484:10>]
LOCAL_SYMBOL: b2World.cpp<393:11> [b2World.cpp <516:5 516:10>]
LOCAL_SYMBOL: b2World.cpp<393:11> [b2World.cpp <531:3 531:8>]
LOCAL_SYMBOL: b2World.cpp<393:11> [b2World.cpp <537:25 537:30>]
LOCAL_SYMBOL: b2World.cpp<393:11> [b2World.cpp <540:16 540:21>]
LOCAL_SYMBOL: b2World.cpp<400:15> [b2World.cpp <400:15 400:15>]
LOCAL_SYMBOL: b2World.cpp<400:15> [b2World.cpp <400:31 400:31>]
LOCAL_SYMBOL: b2World.cpp<400:15> [b2World.cpp <400:34 400:34>]
LOCAL_SYMBOL: b2World.cpp<400:15> [b2World.cpp <400:38 400:38>]
LOCAL_SYMBOL: b2World.cpp<400:15> [b2World.cpp <402:3 402:3>]
LOCAL_SYMBOL: b2World.cpp<401:2> [b2World.cpp <401:2 401:2>]
LOCAL_SYMBOL: b2World.cpp<401:2> [b2World.cpp <403:2 403:2>]
LOCAL_SYMBOL: b2World.cpp<404:18> [b2World.cpp <404:18 404:18>]
LOCAL_SYMBOL: b2World.cpp<404:18> [b2World.cpp <404:54 404:54>]
LOCAL_SYMBOL: b2World.cpp<404:18> [b2World.cpp <404:57 404:57>]
LOCAL_SYMBOL: b2World.cpp<404:18> [b2World.cpp <404:61 404:61>]
LOCAL_SYMBOL: b2World.cpp<404:18> [b2World.cpp <406:3 406:3>]
LOCAL_SYMBOL: b2World.cpp<405:2> [b2World.cpp <405:2 405:2>]
LOCAL_SYMBOL: b2World.cpp<405:2> [b2World.cpp <407:2 407:2>]
LOCAL_SYMBOL: b2World.cpp<408:16> [b2World.cpp <408:16 408:16>]
LOCAL_SYMBOL: b2World.cpp<408:16> [b2World.cpp <408:33 408:33>]
LOCAL_SYMBOL: b2World.cpp<408:16> [b2World.cpp <408:36 408:36>]
LOCAL_SYMBOL: b2World.cpp<408:16> [b2World.cpp <408:40 408:40>]
LOCAL_SYMBOL: b2World.cpp<408:16> [b2World.cpp <410:3 410:3>]
LOCAL_SYMBOL: b2World.cpp<409:2> [b2World.cpp <409:2 409:2>]
LOCAL_SYMBOL: b2World.cpp<409:2> [b2World.cpp <411:2 411:2>]
LOCAL_SYMBOL: b2World.cpp<414:8> [b2World.cpp <414:8 414:16>]
LOCAL_SYMBOL: b2World.cpp<414:8> [b2World.cpp <415:55 415:63>]
LOCAL_SYMBOL: b2World.cpp<414:8> [b2World.cpp <495:27 495:35>]
LOCAL_SYMBOL: b2World.cpp<414:8> [b2World.cpp <524:27 524:35>]
LOCAL_SYMBOL: b2World.cpp<415:11> [b2World.cpp <415:11 415:15>]
LOCAL_SYMBOL: b2World.cpp<415:11> [b2World.cpp <437:3 437:7>]
LOCAL_SYMBOL: b2World.cpp<415:11> [b2World.cpp <444:16 444:20>]
LOCAL_SYMBOL: b2World.cpp<415:11> [b2World.cpp <496:5 496:9>]
LOCAL_SYMBOL: b2World.cpp<415:11> [b2World.cpp <525:5 525:9>]
LOCAL_SYMBOL: b2World.cpp<415:11> [b2World.cpp <548:24 548:28>]
LOCAL_SYMBOL: b2World.cpp<416:15> [b2World.cpp <416:15 416:18>]
LOCAL_SYMBOL: b2World.cpp<416:15> [b2World.cpp <416:34 416:37>]
LOCAL_SYMBOL: b2World.cpp<416:15> [b2World.cpp <416:40 416:43>]
LOCAL_SYMBOL: b2World.cpp<416:15> [b2World.cpp <416:47 416:50>]
LOCAL_SYMBOL: b2World.cpp<416:15> [b2World.cpp <418:7 418:10>]
LOCAL_SYMBOL: b2World.cpp<416:15> [b2World.cpp <423:7 423:10>]
LOCAL_SYMBOL: b2World.cpp<416:15> [b2World.cpp <423:35 423:38>]
LOCAL_SYMBOL: b2World.cpp<416:15> [b2World.cpp <429:7 429:10>]
LOCAL_SYMBOL: b2World.cpp<416:15> [b2World.cpp <437:25 437:28>]
LOCAL_SYMBOL: b2World.cpp<416:15> [b2World.cpp <438:3 438:6>]
LOCAL_SYMBOL: b2World.cpp<417:2> [b2World.cpp <417:2 417:2>]
LOCAL_SYMBOL: b2World.cpp<417:2> [b2World.cpp <546:2 546:2>]
LOCAL_SYMBOL: b2World.cpp<419:3> [b2World.cpp <419:3 419:3>]
LOCAL_SYMBOL: b2World.cpp<419:3> [b2World.cpp <421:3 421:3>]
LOCAL_SYMBOL: b2World.cpp<424:3> [b2World.cpp <424:3 424:3>]
LOCAL_SYMBOL: b2World.cpp<424:3> [b2World.cpp <426:3 426:3>]
LOCAL_SYMBOL: b2World.cpp<430:3> [b2World.cpp <430:3 430:3>]
LOCAL_SYMBOL: b2World.cpp<430:3> [b2World.cpp <432:3 432:3>]
LOCAL_SYMBOL: b2World.cpp<436:9> [b2World.cpp <436:9 436:18>]
LOCAL_SYMBOL: b2World.cpp<436:9> [b2World.cpp <437:9 437:18>]
LOCAL_SYMBOL: b2World.cpp<436:9> [b2World.cpp <441:10 441:19>]
LOCAL_SYMBOL: b2World.cpp<436:9> [b2World.cpp <444:24 444:33>]
LOCAL_SYMBOL: b2World.cpp<436:9> [b2World.cpp <495:14 495:23>]
LOCAL_SYMBOL: b2World.cpp<436:9> [b2World.cpp <496:11 496:20>]
LOCAL_SYMBOL: b2World.cpp<436:9> [b2World.cpp <524:14 524:23>]
LOCAL_SYMBOL: b2World.cpp<436:9> [b2World.cpp <525:11 525:20>]
LOCAL_SYMBOL: b2World.cpp<442:3> [b2World.cpp <442:3 442:3>]
LOCAL_SYMBOL: b2World.cpp<442:3> [b2World.cpp <528:3 528:3>]
LOCAL_SYMBOL: b2World.cpp<444:12> [b2World.cpp <444:12 444:12>]
LOCAL_SYMBOL: b2World.cpp<444:12> [b2World.cpp <445:13 445:13>]
LOCAL_SYMBOL: b2World.cpp<444:12> [b2World.cpp <446:15 446:15>]
LOCAL_SYMBOL: b2World.cpp<444:12> [b2World.cpp <449:4 449:4>]
LOCAL_SYMBOL: b2World.cpp<444:12> [b2World.cpp <453:8 453:8>]
LOCAL_SYMBOL: b2World.cpp<444:12> [b2World.cpp <459:29 459:29>]
LOCAL_SYMBOL: b2World.cpp<444:12> [b2World.cpp <501:27 501:27>]
LOCAL_SYMBOL: b2World.cpp<454:4> [b2World.cpp <454:4 454:4>]
LOCAL_SYMBOL: b2World.cpp<454:4> [b2World.cpp <456:4 456:4>]
LOCAL_SYMBOL: b2World.cpp<459:24> [b2World.cpp <459:24 459:25>]
LOCAL_SYMBOL: b2World.cpp<459:24> [b2World.cpp <459:47 459:48>]
LOCAL_SYMBOL: b2World.cpp<459:24> [b2World.cpp <459:51 459:52>]
LOCAL_SYMBOL: b2World.cpp<459:24> [b2World.cpp <459:56 459:57>]
LOCAL_SYMBOL: b2World.cpp<459:24> [b2World.cpp <461:26 461:27>]
LOCAL_SYMBOL: b2World.cpp<459:24> [b2World.cpp <487:21 487:22>]
LOCAL_SYMBOL: b2World.cpp<460:4> [b2World.cpp <460:4 460:4>]
LOCAL_SYMBOL: b2World.cpp<460:4> [b2World.cpp <498:4 498:4>]
LOCAL_SYMBOL: b2World.cpp<461:16> [b2World.cpp <461:16 461:22>]
LOCAL_SYMBOL: b2World.cpp<461:16> [b2World.cpp <464:9 464:15>]
LOCAL_SYMBOL: b2World.cpp<461:16> [b2World.cpp <470:9 470:15>]
LOCAL_SYMBOL: b2World.cpp<461:16> [b2World.cpp <471:6 471:12>]
LOCAL_SYMBOL: b2World.cpp<461:16> [b2World.cpp <477:20 477:26>]
LOCAL_SYMBOL: b2World.cpp<461:16> [b2World.cpp <478:20 478:26>]
LOCAL_SYMBOL: b2World.cpp<461:16> [b2World.cpp <484:16 484:22>]
LOCAL_SYMBOL: b2World.cpp<461:16> [b2World.cpp <485:5 485:11>]
LOCAL_SYMBOL: b2World.cpp<465:5> [b2World.cpp <465:5 465:5>]
LOCAL_SYMBOL: b2World.cpp<465:5> [b2World.cpp <467:5 467:5>]
LOCAL_SYMBOL: b2World.cpp<472:5> [b2World.cpp <472:5 472:5>]
LOCAL_SYMBOL: b2World.cpp<472:5> [b2World.cpp <474:5 474:5>]
LOCAL_SYMBOL: b2World.cpp<477:10> [b2World.cpp <477:10 477:16>]
LOCAL_SYMBOL: b2World.cpp<477:10> [b2World.cpp <479:9 479:15>]
LOCAL_SYMBOL: b2World.cpp<478:10> [b2World.cpp <478:10 478:16>]
LOCAL_SYMBOL: b2World.cpp<478:10> [b2World.cpp <479:20 479:26>]
LOCAL_SYMBOL: b2World.cpp<480:5> [b2World.cpp <480:5 480:5>]
LOCAL_SYMBOL: b2World.cpp<480:5> [b2World.cpp <482:5 482:5>]
LOCAL_SYMBOL: b2World.cpp<487:13> [b2World.cpp <487:13 487:17>]
LOCAL_SYMBOL: b2World.cpp<487:13> [b2World.cpp <490:9 490:13>]
LOCAL_SYMBOL: b2World.cpp<487:13> [b2World.cpp <496:27 496:31>]
LOCAL_SYMBOL: b2World.cpp<487:13> [b2World.cpp <497:5 497:9>]
LOCAL_SYMBOL: b2World.cpp<491:5> [b2World.cpp <491:5 491:5>]
LOCAL_SYMBOL: b2World.cpp<491:5> [b2World.cpp <493:5 493:5>]
LOCAL_SYMBOL: b2World.cpp<501:22> [b2World.cpp <501:22 501:23>]
LOCAL_SYMBOL: b2World.cpp<501:22> [b2World.cpp <501:43 501:44>]
LOCAL_SYMBOL: b2World.cpp<501:22> [b2World.cpp <501:47 501:48>]
LOCAL_SYMBOL: b2World.cpp<501:22> [b2World.cpp <501:52 501:53>]
LOCAL_SYMBOL: b2World.cpp<501:22> [b2World.cpp <503:9 503:10>]
LOCAL_SYMBOL: b2World.cpp<501:22> [b2World.cpp <508:21 508:22>]
LOCAL_SYMBOL: b2World.cpp<501:22> [b2World.cpp <516:16 516:17>]
LOCAL_SYMBOL: b2World.cpp<501:22> [b2World.cpp <517:5 517:6>]
LOCAL_SYMBOL: b2World.cpp<502:4> [b2World.cpp <502:4 502:4>]
LOCAL_SYMBOL: b2World.cpp<502:4> [b2World.cpp <527:4 527:4>]
LOCAL_SYMBOL: b2World.cpp<504:5> [b2World.cpp <504:5 504:5>]
LOCAL_SYMBOL: b2World.cpp<504:5> [b2World.cpp <506:5 506:5>]
LOCAL_SYMBOL: b2World.cpp<508:13> [b2World.cpp <508:13 508:17>]
LOCAL_SYMBOL: b2World.cpp<508:13> [b2World.cpp <511:9 511:13>]
LOCAL_SYMBOL: b2World.cpp<508:13> [b2World.cpp <519:9 519:13>]
LOCAL_SYMBOL: b2World.cpp<508:13> [b2World.cpp <525:27 525:31>]
LOCAL_SYMBOL: b2World.cpp<508:13> [b2World.cpp <526:5 526:9>]
LOCAL_SYMBOL: b2World.cpp<512:5> [b2World.cpp <512:5 512:5>]
LOCAL_SYMBOL: b2World.cpp<512:5> [b2World.cpp <514:5 514:5>]
LOCAL_SYMBOL: b2World.cpp<520:5> [b2World.cpp <520:5 520:5>]
LOCAL_SYMBOL: b2World.cpp<520:5> [b2World.cpp <522:5 522:5>]
LOCAL_SYMBOL: b2World.cpp<530:13> [b2World.cpp <530:13 530:19>]
LOCAL_SYMBOL: b2World.cpp<530:13> [b2World.cpp <531:17 531:23>]
LOCAL_SYMBOL: b2World.cpp<530:13> [b2World.cpp <532:26 532:32>]
LOCAL_SYMBOL: b2World.cpp<530:13> [b2World.cpp <533:30 533:36>]
LOCAL_SYMBOL: b2World.cpp<530:13> [b2World.cpp <534:30 534:36>]
LOCAL_SYMBOL: b2World.cpp<537:14> [b2World.cpp <537:14 537:14>]
LOCAL_SYMBOL: b2World.cpp<537:14> [b2World.cpp <537:21 537:21>]
LOCAL_SYMBOL: b2World.cpp<537:14> [b2World.cpp <537:47 537:47>]
LOCAL_SYMBOL: b2World.cpp<537:14> [b2World.cpp <540:32 540:32>]
LOCAL_SYMBOL: b2World.cpp<538:3> [b2World.cpp <538:3 538:3>]
LOCAL_SYMBOL: b2World.cpp<538:3> [b2World.cpp <545:3 545:3>]
LOCAL_SYMBOL: b2World.cpp<540:12> [b2World.cpp <540:12 540:12>]
LOCAL_SYMBOL: b2World.cpp<540:12> [b2World.cpp <541:8 541:8>]
LOCAL_SYMBOL: b2World.cpp<540:12> [b2World.cpp <543:5 543:5>]
LOCAL_SYMBOL: b2World.cpp<542:4> [b2World.cpp <542:4 542:4>]
LOCAL_SYMBOL: b2World.cpp<542:4> [b2World.cpp <544:4 544:4>]
LOCAL_SYMBOL: b2World.cpp<550:2> [b2World.cpp <550:2 550:2>]
LOCAL_SYMBOL: b2World.cpp<550:2> [b2World.cpp <573:2 573:2>]
LOCAL_SYMBOL: b2World.cpp<551:11> [b2World.cpp <551:11 551:15>]
LOCAL_SYMBOL: b2World.cpp<551:11> [b2World.cpp <572:26 572:30>]
LOCAL_SYMBOL: b2World.cpp<553:16> [b2World.cpp <553:16 553:16>]
LOCAL_SYMBOL: b2World.cpp<553:16> [b2World.cpp <553:32 553:32>]
LOCAL_SYMBOL: b2World.cpp<553:16> [b2World.cpp <553:35 553:35>]
LOCAL_SYMBOL: b2World.cpp<553:16> [b2World.cpp <553:39 553:39>]
LOCAL_SYMBOL: b2World.cpp<553:16> [b2World.cpp <556:9 556:9>]
LOCAL_SYMBOL: b2World.cpp<553:16> [b2World.cpp <561:8 561:8>]
LOCAL_SYMBOL: b2World.cpp<553:16> [b2World.cpp <567:4 567:4>]
LOCAL_SYMBOL: b2World.cpp<554:3> [b2World.cpp <554:3 554:3>]
LOCAL_SYMBOL: b2World.cpp<554:3> [b2World.cpp <568:3 568:3>]
LOCAL_SYMBOL: b2World.cpp<557:4> [b2World.cpp <557:4 557:4>]
LOCAL_SYMBOL: b2World.cpp<557:4> [b2World.cpp <559:4 559:4>]
LOCAL_SYMBOL: b2World.cpp<562:4> [b2World.cpp <562:4 562:4>]
LOCAL_SYMBOL: b2World.cpp<562:4> [b2World.cpp <564:4 564:4>]
LOCAL_SYMBOL: b2World.cpp<577:42> [b2World.cpp <577:42 577:45>]
LOCAL_SYMBOL: b2World.cpp<577:42> [b2World.cpp <857:36 857:39>]
LOCAL_SYMBOL: b2World.cpp<577:42> [b2World.cpp <861:32 861:35>]
LOCAL_SYMBOL: b2World.cpp<578:1> [b2World.cpp <578:1 578:1>]
LOCAL_SYMBOL: b2World.cpp<578:1> [b2World.cpp <895:1 895:1>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <579:11 579:16>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <755:3 755:8>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <756:3 756:8>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <757:3 757:8>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <758:3 758:8>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <773:10 773:15>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <773:32 773:37>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <778:10 778:15>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <778:35 778:40>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <835:6 835:11>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <851:6 851:11>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <863:3 863:8>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <866:25 866:30>]
LOCAL_SYMBOL: b2World.cpp<579:11> [b2World.cpp <868:19 868:24>]
LOCAL_SYMBOL: b2World.cpp<582:2> [b2World.cpp <582:2 582:2>]
LOCAL_SYMBOL: b2World.cpp<582:2> [b2World.cpp <596:2 596:2>]
LOCAL_SYMBOL: b2World.cpp<583:16> [b2World.cpp <583:16 583:16>]
LOCAL_SYMBOL: b2World.cpp<583:16> [b2World.cpp <583:32 583:32>]
LOCAL_SYMBOL: b2World.cpp<583:16> [b2World.cpp <583:35 583:35>]
LOCAL_SYMBOL: b2World.cpp<583:16> [b2World.cpp <583:39 583:39>]
LOCAL_SYMBOL: b2World.cpp<583:16> [b2World.cpp <585:4 585:4>]
LOCAL_SYMBOL: b2World.cpp<583:16> [b2World.cpp <586:4 586:4>]
LOCAL_SYMBOL: b2World.cpp<584:3> [b2World.cpp <584:3 584:3>]
LOCAL_SYMBOL: b2World.cpp<584:3> [b2World.cpp <587:3 587:3>]
LOCAL_SYMBOL: b2World.cpp<589:19> [b2World.cpp <589:19 589:19>]
LOCAL_SYMBOL: b2World.cpp<589:19> [b2World.cpp <589:55 589:55>]
LOCAL_SYMBOL: b2World.cpp<589:19> [b2World.cpp <589:58 589:58>]
LOCAL_SYMBOL: b2World.cpp<589:19> [b2World.cpp <589:62 589:62>]
LOCAL_SYMBOL: b2World.cpp<589:19> [b2World.cpp <592:4 592:4>]
LOCAL_SYMBOL: b2World.cpp<589:19> [b2World.cpp <593:4 593:4>]
LOCAL_SYMBOL: b2World.cpp<589:19> [b2World.cpp <594:4 594:4>]
LOCAL_SYMBOL: b2World.cpp<590:3> [b2World.cpp <590:3 590:3>]
LOCAL_SYMBOL: b2World.cpp<590:3> [b2World.cpp <595:3 595:3>]
LOCAL_SYMBOL: b2World.cpp<600:2> [b2World.cpp <600:2 600:2>]
LOCAL_SYMBOL: b2World.cpp<600:2> [b2World.cpp <894:2 894:2>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <602:14 602:23>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <710:5 710:14>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <715:7 715:16>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <723:19 723:28>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <724:19 724:28>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <735:3 735:12>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <736:3 736:12>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <737:5 737:14>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <740:7 740:16>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <740:43 740:52>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <743:4 743:13>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <758:14 758:23>]
LOCAL_SYMBOL: b2World.cpp<602:14> [b2World.cpp <762:3 762:12>]
LOCAL_SYMBOL: b2World.cpp<603:11> [b2World.cpp <603:11 603:18>]
LOCAL_SYMBOL: b2World.cpp<603:11> [b2World.cpp <707:16 707:23>]
LOCAL_SYMBOL: b2World.cpp<603:11> [b2World.cpp <711:5 711:12>]
LOCAL_SYMBOL: b2World.cpp<603:11> [b2World.cpp <715:60 715:67>]
LOCAL_SYMBOL: b2World.cpp<603:11> [b2World.cpp <731:15 731:22>]
LOCAL_SYMBOL: b2World.cpp<603:11> [b2World.cpp <732:15 732:22>]
LOCAL_SYMBOL: b2World.cpp<603:11> [b2World.cpp <811:22 811:29>]
LOCAL_SYMBOL: b2World.cpp<603:11> [b2World.cpp <857:24 857:31>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <605:19 605:19>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <605:55 605:55>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <605:58 605:58>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <605:62 605:62>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <608:8 608:8>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <614:8 614:8>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <620:8 620:8>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <623:13 623:13>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <627:21 627:21>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <628:21 628:21>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <678:20 678:20>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <679:20 679:20>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <703:5 703:5>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <704:5 704:5>]
LOCAL_SYMBOL: b2World.cpp<605:19> [b2World.cpp <710:18 710:18>]
LOCAL_SYMBOL: b2World.cpp<606:3> [b2World.cpp <606:3 606:3>]
LOCAL_SYMBOL: b2World.cpp<606:3> [b2World.cpp <713:3 713:3>]
LOCAL_SYMBOL: b2World.cpp<609:4> [b2World.cpp <609:4 609:4>]
LOCAL_SYMBOL: b2World.cpp<609:4> [b2World.cpp <611:4 611:4>]
LOCAL_SYMBOL: b2World.cpp<615:4> [b2World.cpp <615:4 615:4>]
LOCAL_SYMBOL: b2World.cpp<615:4> [b2World.cpp <617:4 617:4>]
LOCAL_SYMBOL: b2World.cpp<619:12> [b2World.cpp <619:12 619:16>]
LOCAL_SYMBOL: b2World.cpp<619:12> [b2World.cpp <623:5 623:9>]
LOCAL_SYMBOL: b2World.cpp<619:12> [b2World.cpp <696:6 696:10>]
LOCAL_SYMBOL: b2World.cpp<619:12> [b2World.cpp <700:6 700:10>]
LOCAL_SYMBOL: b2World.cpp<619:12> [b2World.cpp <703:16 703:20>]
LOCAL_SYMBOL: b2World.cpp<619:12> [b2World.cpp <707:8 707:12>]
LOCAL_SYMBOL: b2World.cpp<619:12> [b2World.cpp <711:16 711:20>]
LOCAL_SYMBOL: b2World.cpp<621:4> [b2World.cpp <621:4 621:4>]
LOCAL_SYMBOL: b2World.cpp<621:4> [b2World.cpp <624:4 624:4>]
LOCAL_SYMBOL: b2World.cpp<626:4> [b2World.cpp <626:4 626:4>]
LOCAL_SYMBOL: b2World.cpp<626:4> [b2World.cpp <705:4 705:4>]
LOCAL_SYMBOL: b2World.cpp<627:16> [b2World.cpp <627:16 627:17>]
LOCAL_SYMBOL: b2World.cpp<627:16> [b2World.cpp <631:9 631:10>]
LOCAL_SYMBOL: b2World.cpp<627:16> [b2World.cpp <636:18 636:19>]
LOCAL_SYMBOL: b2World.cpp<627:16> [b2World.cpp <683:22 683:23>]
LOCAL_SYMBOL: b2World.cpp<628:16> [b2World.cpp <628:16 628:17>]
LOCAL_SYMBOL: b2World.cpp<628:16> [b2World.cpp <631:27 631:28>]
LOCAL_SYMBOL: b2World.cpp<628:16> [b2World.cpp <637:18 637:19>]
LOCAL_SYMBOL: b2World.cpp<628:16> [b2World.cpp <684:22 684:23>]
LOCAL_SYMBOL: b2World.cpp<632:5> [b2World.cpp <632:5 632:5>]
LOCAL_SYMBOL: b2World.cpp<632:5> [b2World.cpp <634:5 634:5>]
LOCAL_SYMBOL: b2World.cpp<636:13> [b2World.cpp <636:13 636:14>]
LOCAL_SYMBOL: b2World.cpp<636:13> [b2World.cpp <639:24 639:25>]
LOCAL_SYMBOL: b2World.cpp<636:13> [b2World.cpp <643:20 643:21>]
LOCAL_SYMBOL: b2World.cpp<636:13> [b2World.cpp <652:21 652:22>]
LOCAL_SYMBOL: b2World.cpp<636:13> [b2World.cpp <663:22 663:23>]
LOCAL_SYMBOL: b2World.cpp<636:13> [b2World.cpp <665:9 665:10>]
LOCAL_SYMBOL: b2World.cpp<636:13> [b2World.cpp <668:6 668:7>]
LOCAL_SYMBOL: b2World.cpp<636:13> [b2World.cpp <670:35 670:36>]
LOCAL_SYMBOL: b2World.cpp<636:13> [b2World.cpp <672:15 672:16>]
LOCAL_SYMBOL: b2World.cpp<636:13> [b2World.cpp <685:20 685:21>]
LOCAL_SYMBOL: b2World.cpp<637:13> [b2World.cpp <637:13 637:14>]
LOCAL_SYMBOL: b2World.cpp<637:13> [b2World.cpp <640:24 640:25>]
LOCAL_SYMBOL: b2World.cpp<637:13> [b2World.cpp <644:20 644:21>]
LOCAL_SYMBOL: b2World.cpp<637:13> [b2World.cpp <653:21 653:22>]
LOCAL_SYMBOL: b2World.cpp<637:13> [b2World.cpp <665:30 665:31>]
LOCAL_SYMBOL: b2World.cpp<637:13> [b2World.cpp <667:15 667:16>]
LOCAL_SYMBOL: b2World.cpp<637:13> [b2World.cpp <670:14 670:15>]
LOCAL_SYMBOL: b2World.cpp<637:13> [b2World.cpp <673:6 673:7>]
LOCAL_SYMBOL: b2World.cpp<637:13> [b2World.cpp <686:20 686:21>]
LOCAL_SYMBOL: b2World.cpp<639:16> [b2World.cpp <639:16 639:20>]
LOCAL_SYMBOL: b2World.cpp<639:16> [b2World.cpp <641:14 641:18>]
LOCAL_SYMBOL: b2World.cpp<639:16> [b2World.cpp <643:37 643:41>]
LOCAL_SYMBOL: b2World.cpp<639:16> [b2World.cpp <652:39 652:43>]
LOCAL_SYMBOL: b2World.cpp<640:16> [b2World.cpp <640:16 640:20>]
LOCAL_SYMBOL: b2World.cpp<640:16> [b2World.cpp <641:41 641:45>]
LOCAL_SYMBOL: b2World.cpp<640:16> [b2World.cpp <644:37 644:41>]
LOCAL_SYMBOL: b2World.cpp<640:16> [b2World.cpp <653:39 653:43>]
LOCAL_SYMBOL: b2World.cpp<643:10> [b2World.cpp <643:10 643:16>]
LOCAL_SYMBOL: b2World.cpp<643:10> [b2World.cpp <647:9 647:15>]
LOCAL_SYMBOL: b2World.cpp<644:10> [b2World.cpp <644:10 644:16>]
LOCAL_SYMBOL: b2World.cpp<644:10> [b2World.cpp <647:29 647:35>]
LOCAL_SYMBOL: b2World.cpp<648:5> [b2World.cpp <648:5 648:5>]
LOCAL_SYMBOL: b2World.cpp<648:5> [b2World.cpp <650:5 650:5>]
LOCAL_SYMBOL: b2World.cpp<652:10> [b2World.cpp <652:10 652:17>]
LOCAL_SYMBOL: b2World.cpp<652:10> [b2World.cpp <656:9 656:16>]
LOCAL_SYMBOL: b2World.cpp<653:10> [b2World.cpp <653:10 653:17>]
LOCAL_SYMBOL: b2World.cpp<653:10> [b2World.cpp <656:30 656:37>]
LOCAL_SYMBOL: b2World.cpp<657:5> [b2World.cpp <657:5 657:5>]
LOCAL_SYMBOL: b2World.cpp<657:5> [b2World.cpp <659:5 659:5>]
LOCAL_SYMBOL: b2World.cpp<663:13> [b2World.cpp <663:13 663:18>]
LOCAL_SYMBOL: b2World.cpp<663:13> [b2World.cpp <667:6 667:11>]
LOCAL_SYMBOL: b2World.cpp<663:13> [b2World.cpp <668:26 668:31>]
LOCAL_SYMBOL: b2World.cpp<663:13> [b2World.cpp <672:6 672:11>]
LOCAL_SYMBOL: b2World.cpp<663:13> [b2World.cpp <673:26 673:31>]
LOCAL_SYMBOL: b2World.cpp<663:13> [b2World.cpp <676:14 676:19>]
LOCAL_SYMBOL: b2World.cpp<663:13> [b2World.cpp <696:20 696:25>]
LOCAL_SYMBOL: b2World.cpp<663:13> [b2World.cpp <696:37 696:42>]
LOCAL_SYMBOL: b2World.cpp<666:5> [b2World.cpp <666:5 666:5>]
LOCAL_SYMBOL: b2World.cpp<666:5> [b2World.cpp <669:5 669:5>]
LOCAL_SYMBOL: b2World.cpp<671:5> [b2World.cpp <671:5 671:5>]
LOCAL_SYMBOL: b2World.cpp<671:5> [b2World.cpp <674:5 674:5>]
LOCAL_SYMBOL: b2World.cpp<678:11> [b2World.cpp <678:11 678:16>]
LOCAL_SYMBOL: b2World.cpp<678:11> [b2World.cpp <683:38 683:43>]
LOCAL_SYMBOL: b2World.cpp<679:11> [b2World.cpp <679:11 679:16>]
LOCAL_SYMBOL: b2World.cpp<679:11> [b2World.cpp <684:38 684:43>]
LOCAL_SYMBOL: b2World.cpp<67:1> [b2World.cpp <67:1 67:1>]
LOCAL_SYMBOL: b2World.cpp<67:1> [b2World.cpp <85:1 85:1>]
LOCAL_SYMBOL: b2World.cpp<682:16> [b2World.cpp <682:16 682:20>]
LOCAL_SYMBOL: b2World.cpp<682:16> [b2World.cpp <683:5 683:9>]
LOCAL_SYMBOL: b2World.cpp<682:16> [b2World.cpp <684:5 684:9>]
LOCAL_SYMBOL: b2World.cpp<682:16> [b2World.cpp <685:5 685:9>]
LOCAL_SYMBOL: b2World.cpp<682:16> [b2World.cpp <686:5 686:9>]
LOCAL_SYMBOL: b2World.cpp<682:16> [b2World.cpp <687:5 687:9>]
LOCAL_SYMBOL: b2World.cpp<682:16> [b2World.cpp <690:30 690:34>]
LOCAL_SYMBOL: b2World.cpp<689:17> [b2World.cpp <689:17 689:22>]
LOCAL_SYMBOL: b2World.cpp<689:17> [b2World.cpp <690:21 690:26>]
LOCAL_SYMBOL: b2World.cpp<689:17> [b2World.cpp <693:20 693:25>]
LOCAL_SYMBOL: b2World.cpp<689:17> [b2World.cpp <694:9 694:14>]
LOCAL_SYMBOL: b2World.cpp<693:13> [b2World.cpp <693:13 693:16>]
LOCAL_SYMBOL: b2World.cpp<693:13> [b2World.cpp <696:47 696:50>]
LOCAL_SYMBOL: b2World.cpp<695:5> [b2World.cpp <695:5 695:5>]
LOCAL_SYMBOL: b2World.cpp<695:5> [b2World.cpp <697:5 697:5>]
LOCAL_SYMBOL: b2World.cpp<699:5> [b2World.cpp <699:5 699:5>]
LOCAL_SYMBOL: b2World.cpp<699:5> [b2World.cpp <701:5 701:5>]
LOCAL_SYMBOL: b2World.cpp<69:10> [b2World.cpp <69:10 69:10>]
LOCAL_SYMBOL: b2World.cpp<69:10> [b2World.cpp <70:9 70:9>]
LOCAL_SYMBOL: b2World.cpp<69:10> [b2World.cpp <72:19 72:19>]
LOCAL_SYMBOL: b2World.cpp<69:10> [b2World.cpp <74:18 74:18>]
LOCAL_SYMBOL: b2World.cpp<69:10> [b2World.cpp <83:3 83:3>]
LOCAL_SYMBOL: b2World.cpp<708:4> [b2World.cpp <708:4 708:4>]
LOCAL_SYMBOL: b2World.cpp<708:4> [b2World.cpp <712:4 712:4>]
LOCAL_SYMBOL: b2World.cpp<716:3> [b2World.cpp <716:3 716:3>]
LOCAL_SYMBOL: b2World.cpp<716:3> [b2World.cpp <720:3 720:3>]
LOCAL_SYMBOL: b2World.cpp<71:2> [b2World.cpp <71:2 71:2>]
LOCAL_SYMBOL: b2World.cpp<71:2> [b2World.cpp <84:2 84:2>]
LOCAL_SYMBOL: b2World.cpp<723:14> [b2World.cpp <723:14 723:15>]
LOCAL_SYMBOL: b2World.cpp<723:14> [b2World.cpp <725:16 725:17>]
LOCAL_SYMBOL: b2World.cpp<724:14> [b2World.cpp <724:14 724:15>]
LOCAL_SYMBOL: b2World.cpp<724:14> [b2World.cpp <726:16 726:17>]
LOCAL_SYMBOL: b2World.cpp<725:11> [b2World.cpp <725:11 725:12>]
LOCAL_SYMBOL: b2World.cpp<725:11> [b2World.cpp <728:21 728:22>]
LOCAL_SYMBOL: b2World.cpp<725:11> [b2World.cpp <731:3 731:4>]
LOCAL_SYMBOL: b2World.cpp<725:11> [b2World.cpp <744:4 744:5>]
LOCAL_SYMBOL: b2World.cpp<725:11> [b2World.cpp <746:4 746:5>]
LOCAL_SYMBOL: b2World.cpp<725:11> [b2World.cpp <751:3 751:4>]
LOCAL_SYMBOL: b2World.cpp<725:11> [b2World.cpp <756:14 756:15>]
LOCAL_SYMBOL: b2World.cpp<725:11> [b2World.cpp <760:3 760:4>]
LOCAL_SYMBOL: b2World.cpp<725:11> [b2World.cpp <765:24 765:25>]
LOCAL_SYMBOL: b2World.cpp<725:11> [b2World.cpp <863:28 863:29>]
LOCAL_SYMBOL: b2World.cpp<726:11> [b2World.cpp <726:11 726:12>]
LOCAL_SYMBOL: b2World.cpp<726:11> [b2World.cpp <729:21 729:22>]
LOCAL_SYMBOL: b2World.cpp<726:11> [b2World.cpp <732:3 732:4>]
LOCAL_SYMBOL: b2World.cpp<726:11> [b2World.cpp <745:4 745:5>]
LOCAL_SYMBOL: b2World.cpp<726:11> [b2World.cpp <747:4 747:5>]
LOCAL_SYMBOL: b2World.cpp<726:11> [b2World.cpp <752:3 752:4>]
LOCAL_SYMBOL: b2World.cpp<726:11> [b2World.cpp <757:14 757:15>]
LOCAL_SYMBOL: b2World.cpp<726:11> [b2World.cpp <761:3 761:4>]
LOCAL_SYMBOL: b2World.cpp<726:11> [b2World.cpp <765:28 765:29>]
LOCAL_SYMBOL: b2World.cpp<726:11> [b2World.cpp <863:47 863:48>]
LOCAL_SYMBOL: b2World.cpp<728:11> [b2World.cpp <728:11 728:17>]
LOCAL_SYMBOL: b2World.cpp<728:11> [b2World.cpp <744:18 744:24>]
LOCAL_SYMBOL: b2World.cpp<729:11> [b2World.cpp <729:11 729:17>]
LOCAL_SYMBOL: b2World.cpp<729:11> [b2World.cpp <745:18 745:24>]
LOCAL_SYMBOL: b2World.cpp<72:11> [b2World.cpp <72:11 72:15>]
LOCAL_SYMBOL: b2World.cpp<72:11> [b2World.cpp <83:7 83:11>]
LOCAL_SYMBOL: b2World.cpp<741:3> [b2World.cpp <741:3 741:3>]
LOCAL_SYMBOL: b2World.cpp<741:3> [b2World.cpp <749:3 749:3>]
LOCAL_SYMBOL: b2World.cpp<74:14> [b2World.cpp <74:14 74:14>]
LOCAL_SYMBOL: b2World.cpp<74:14> [b2World.cpp <75:10 75:10>]
LOCAL_SYMBOL: b2World.cpp<74:14> [b2World.cpp <77:23 77:23>]
LOCAL_SYMBOL: b2World.cpp<74:14> [b2World.cpp <78:4 78:4>]
LOCAL_SYMBOL: b2World.cpp<74:14> [b2World.cpp <79:4 79:4>]
LOCAL_SYMBOL: b2World.cpp<74:14> [b2World.cpp <80:4 80:4>]
LOCAL_SYMBOL: b2World.cpp<765:11> [b2World.cpp <765:11 765:16>]
LOCAL_SYMBOL: b2World.cpp<765:11> [b2World.cpp <768:19 768:24>]
LOCAL_SYMBOL: b2World.cpp<765:23> [b2World.cpp <765:23 765:23>]
LOCAL_SYMBOL: b2World.cpp<765:23> [b2World.cpp <765:30 765:30>]
LOCAL_SYMBOL: b2World.cpp<766:14> [b2World.cpp <766:14 766:14>]
LOCAL_SYMBOL: b2World.cpp<766:14> [b2World.cpp <766:21 766:21>]
LOCAL_SYMBOL: b2World.cpp<766:14> [b2World.cpp <766:30 766:30>]
LOCAL_SYMBOL: b2World.cpp<766:14> [b2World.cpp <768:26 768:26>]
LOCAL_SYMBOL: b2World.cpp<767:3> [b2World.cpp <767:3 767:3>]
LOCAL_SYMBOL: b2World.cpp<767:3> [b2World.cpp <854:3 854:3>]
LOCAL_SYMBOL: b2World.cpp<768:12> [b2World.cpp <768:12 768:15>]
LOCAL_SYMBOL: b2World.cpp<768:12> [b2World.cpp <769:8 769:11>]
LOCAL_SYMBOL: b2World.cpp<768:12> [b2World.cpp <771:30 771:33>]
LOCAL_SYMBOL: b2World.cpp<768:12> [b2World.cpp <794:7 794:10>]
LOCAL_SYMBOL: b2World.cpp<76:3> [b2World.cpp <76:3 76:3>]
LOCAL_SYMBOL: b2World.cpp<76:3> [b2World.cpp <81:3 81:3>]
LOCAL_SYMBOL: b2World.cpp<770:4> [b2World.cpp <770:4 770:4>]
LOCAL_SYMBOL: b2World.cpp<770:4> [b2World.cpp <853:4 853:4>]
LOCAL_SYMBOL: b2World.cpp<771:25> [b2World.cpp <771:25 771:26>]
LOCAL_SYMBOL: b2World.cpp<771:25> [b2World.cpp <771:51 771:52>]
LOCAL_SYMBOL: b2World.cpp<771:25> [b2World.cpp <771:55 771:56>]
LOCAL_SYMBOL: b2World.cpp<771:25> [b2World.cpp <771:60 771:61>]
LOCAL_SYMBOL: b2World.cpp<771:25> [b2World.cpp <783:27 783:28>]
LOCAL_SYMBOL: b2World.cpp<771:25> [b2World.cpp <792:22 792:23>]
LOCAL_SYMBOL: b2World.cpp<772:5> [b2World.cpp <772:5 772:5>]
LOCAL_SYMBOL: b2World.cpp<772:5> [b2World.cpp <852:5 852:5>]
LOCAL_SYMBOL: b2World.cpp<774:6> [b2World.cpp <774:6 774:6>]
LOCAL_SYMBOL: b2World.cpp<774:6> [b2World.cpp <776:6 776:6>]
LOCAL_SYMBOL: b2World.cpp<779:6> [b2World.cpp <779:6 779:6>]
LOCAL_SYMBOL: b2World.cpp<779:6> [b2World.cpp <781:6 781:6>]
LOCAL_SYMBOL: b2World.cpp<77:15> [b2World.cpp <77:15 77:19>]
LOCAL_SYMBOL: b2World.cpp<77:15> [b2World.cpp <80:8 80:12>]
LOCAL_SYMBOL: b2World.cpp<783:17> [b2World.cpp <783:17 783:23>]
LOCAL_SYMBOL: b2World.cpp<783:17> [b2World.cpp <786:10 786:16>]
LOCAL_SYMBOL: b2World.cpp<783:17> [b2World.cpp <800:21 800:27>]
LOCAL_SYMBOL: b2World.cpp<783:17> [b2World.cpp <801:21 801:27>]
LOCAL_SYMBOL: b2World.cpp<783:17> [b2World.cpp <815:6 815:12>]
LOCAL_SYMBOL: b2World.cpp<783:17> [b2World.cpp <818:10 818:16>]
LOCAL_SYMBOL: b2World.cpp<783:17> [b2World.cpp <826:10 826:16>]
LOCAL_SYMBOL: b2World.cpp<783:17> [b2World.cpp <834:6 834:12>]
LOCAL_SYMBOL: b2World.cpp<783:17> [b2World.cpp <835:17 835:23>]
LOCAL_SYMBOL: b2World.cpp<787:6> [b2World.cpp <787:6 787:6>]
LOCAL_SYMBOL: b2World.cpp<787:6> [b2World.cpp <789:6 789:6>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <792:14 792:18>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <793:10 793:14>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <794:36 794:40>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <808:23 808:27>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <809:11 809:15>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <811:7 811:11>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <820:7 820:11>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <821:7 821:11>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <828:7 828:11>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <829:7 829:11>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <838:10 838:14>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <844:6 844:10>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <846:10 846:14>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <848:7 848:11>]
LOCAL_SYMBOL: b2World.cpp<792:14> [b2World.cpp <851:17 851:21>]
LOCAL_SYMBOL: b2World.cpp<795:6> [b2World.cpp <795:6 795:6>]
LOCAL_SYMBOL: b2World.cpp<795:6> [b2World.cpp <797:6 797:6>]
LOCAL_SYMBOL: b2World.cpp<800:11> [b2World.cpp <800:11 800:17>]
LOCAL_SYMBOL: b2World.cpp<800:11> [b2World.cpp <802:10 802:16>]
LOCAL_SYMBOL: b2World.cpp<801:11> [b2World.cpp <801:11 801:17>]
LOCAL_SYMBOL: b2World.cpp<801:11> [b2World.cpp <802:21 802:27>]
LOCAL_SYMBOL: b2World.cpp<803:6> [b2World.cpp <803:6 803:6>]
LOCAL_SYMBOL: b2World.cpp<803:6> [b2World.cpp <805:6 805:6>]
LOCAL_SYMBOL: b2World.cpp<808:14> [b2World.cpp <808:14 808:19>]
LOCAL_SYMBOL: b2World.cpp<808:14> [b2World.cpp <820:24 820:29>]
LOCAL_SYMBOL: b2World.cpp<808:14> [b2World.cpp <828:24 828:29>]
LOCAL_SYMBOL: b2World.cpp<810:6> [b2World.cpp <810:6 810:6>]
LOCAL_SYMBOL: b2World.cpp<810:6> [b2World.cpp <812:6 812:6>]
LOCAL_SYMBOL: b2World.cpp<819:6> [b2World.cpp <819:6 819:6>]
LOCAL_SYMBOL: b2World.cpp<819:6> [b2World.cpp <823:6 823:6>]
LOCAL_SYMBOL: b2World.cpp<827:6> [b2World.cpp <827:6 827:6>]
LOCAL_SYMBOL: b2World.cpp<827:6> [b2World.cpp <831:6 831:6>]
LOCAL_SYMBOL: b2World.cpp<839:6> [b2World.cpp <839:6 839:6>]
LOCAL_SYMBOL: b2World.cpp<839:6> [b2World.cpp <841:6 841:6>]
LOCAL_SYMBOL: b2World.cpp<847:6> [b2World.cpp <847:6 847:6>]
LOCAL_SYMBOL: b2World.cpp<847:6> [b2World.cpp <849:6 849:6>]
LOCAL_SYMBOL: b2World.cpp<856:14> [b2World.cpp <856:14 856:20>]
LOCAL_SYMBOL: b2World.cpp<856:14> [b2World.cpp <857:3 857:9>]
LOCAL_SYMBOL: b2World.cpp<856:14> [b2World.cpp <858:3 858:9>]
LOCAL_SYMBOL: b2World.cpp<856:14> [b2World.cpp <858:27 858:33>]
LOCAL_SYMBOL: b2World.cpp<856:14> [b2World.cpp <859:3 859:9>]
LOCAL_SYMBOL: b2World.cpp<856:14> [b2World.cpp <860:3 860:9>]
LOCAL_SYMBOL: b2World.cpp<856:14> [b2World.cpp <861:3 861:9>]
LOCAL_SYMBOL: b2World.cpp<856:14> [b2World.cpp <862:3 862:9>]
LOCAL_SYMBOL: b2World.cpp<856:14> [b2World.cpp <863:19 863:25>]
LOCAL_SYMBOL: b2World.cpp<866:14> [b2World.cpp <866:14 866:14>]
LOCAL_SYMBOL: b2World.cpp<866:14> [b2World.cpp <866:21 866:21>]
LOCAL_SYMBOL: b2World.cpp<866:14> [b2World.cpp <866:47 866:47>]
LOCAL_SYMBOL: b2World.cpp<866:14> [b2World.cpp <868:35 868:35>]
LOCAL_SYMBOL: b2World.cpp<867:3> [b2World.cpp <867:3 867:3>]
LOCAL_SYMBOL: b2World.cpp<867:3> [b2World.cpp <883:3 883:3>]
LOCAL_SYMBOL: b2World.cpp<868:12> [b2World.cpp <868:12 868:15>]
LOCAL_SYMBOL: b2World.cpp<868:12> [b2World.cpp <869:4 869:7>]
LOCAL_SYMBOL: b2World.cpp<868:12> [b2World.cpp <871:8 871:11>]
LOCAL_SYMBOL: b2World.cpp<868:12> [b2World.cpp <876:4 876:7>]
LOCAL_SYMBOL: b2World.cpp<868:12> [b2World.cpp <879:29 879:32>]
LOCAL_SYMBOL: b2World.cpp<872:4> [b2World.cpp <872:4 872:4>]
LOCAL_SYMBOL: b2World.cpp<872:4> [b2World.cpp <874:4 874:4>]
LOCAL_SYMBOL: b2World.cpp<879:24> [b2World.cpp <879:24 879:25>]
LOCAL_SYMBOL: b2World.cpp<879:24> [b2World.cpp <879:50 879:51>]
LOCAL_SYMBOL: b2World.cpp<879:24> [b2World.cpp <879:54 879:55>]
LOCAL_SYMBOL: b2World.cpp<879:24> [b2World.cpp <879:59 879:60>]
LOCAL_SYMBOL: b2World.cpp<879:24> [b2World.cpp <881:5 881:6>]
LOCAL_SYMBOL: b2World.cpp<87:61> [b2World.cpp <87:61 87:68>]
LOCAL_SYMBOL: b2World.cpp<87:61> [b2World.cpp <89:26 89:33>]
LOCAL_SYMBOL: b2World.cpp<880:4> [b2World.cpp <880:4 880:4>]
LOCAL_SYMBOL: b2World.cpp<880:4> [b2World.cpp <882:4 882:4>]
LOCAL_SYMBOL: b2World.cpp<88:1> [b2World.cpp <88:1 88:1>]
LOCAL_SYMBOL: b2World.cpp<88:1> [b2World.cpp <90:1 90:1>]
LOCAL_SYMBOL: b2World.cpp<890:3> [b2World.cpp <890:3 890:3>]
LOCAL_SYMBOL: b2World.cpp<890:3> [b2World.cpp <893:3 893:3>]
LOCAL_SYMBOL: b2World.cpp<897:28> [b2World.cpp <897:28 897:29>]
LOCAL_SYMBOL: b2World.cpp<897:28> [b2World.cpp <911:12 911:13>]
LOCAL_SYMBOL: b2World.cpp<897:28> [b2World.cpp <914:6 914:7>]
LOCAL_SYMBOL: b2World.cpp<897:28> [b2World.cpp <916:24 916:25>]
LOCAL_SYMBOL: b2World.cpp<897:28> [b2World.cpp <923:29 923:30>]
LOCAL_SYMBOL: b2World.cpp<897:38> [b2World.cpp <897:38 897:55>]
LOCAL_SYMBOL: b2World.cpp<897:38> [b2World.cpp <912:28 912:45>]
LOCAL_SYMBOL: b2World.cpp<897:64> [b2World.cpp <897:64 897:81>]
LOCAL_SYMBOL: b2World.cpp<897:64> [b2World.cpp <913:28 913:45>]
LOCAL_SYMBOL: b2World.cpp<898:1> [b2World.cpp <898:1 898:1>]
LOCAL_SYMBOL: b2World.cpp<898:1> [b2World.cpp <963:1 963:1>]
LOCAL_SYMBOL: b2World.cpp<899:10> [b2World.cpp <899:10 899:18>]
LOCAL_SYMBOL: b2World.cpp<899:10> [b2World.cpp <962:19 962:27>]
LOCAL_SYMBOL: b2World.cpp<903:2> [b2World.cpp <903:2 903:2>]
LOCAL_SYMBOL: b2World.cpp<903:2> [b2World.cpp <906:2 906:2>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <910:13 910:16>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <911:2 911:5>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <912:2 912:5>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <913:2 913:5>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <916:3 916:6>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <920:3 920:6>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <923:2 923:5>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <925:2 925:5>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <935:24 935:27>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <938:9 938:12>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <943:29 943:32>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <946:12 946:15>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <950:6 950:9>]
LOCAL_SYMBOL: b2World.cpp<910:13> [b2World.cpp <952:15 952:18>]
LOCAL_SYMBOL: b2World.cpp<915:2> [b2World.cpp <915:2 915:2>]
LOCAL_SYMBOL: b2World.cpp<915:2> [b2World.cpp <917:2 917:2>]
LOCAL_SYMBOL: b2World.cpp<919:2> [b2World.cpp <919:2 919:2>]
LOCAL_SYMBOL: b2World.cpp<919:2> [b2World.cpp <921:2 921:2>]
LOCAL_SYMBOL: b2World.cpp<928:2> [b2World.cpp <928:2 928:2>]
LOCAL_SYMBOL: b2World.cpp<928:2> [b2World.cpp <932:2 932:2>]
LOCAL_SYMBOL: b2World.cpp<929:11> [b2World.cpp <929:11 929:15>]
LOCAL_SYMBOL: b2World.cpp<929:11> [b2World.cpp <931:23 931:27>]
LOCAL_SYMBOL: b2World.cpp<92:49> [b2World.cpp <92:49 92:54>]
LOCAL_SYMBOL: b2World.cpp<92:49> [b2World.cpp <94:37 94:42>]
LOCAL_SYMBOL: b2World.cpp<936:2> [b2World.cpp <936:2 936:2>]
LOCAL_SYMBOL: b2World.cpp<936:2> [b2World.cpp <940:2 940:2>]
LOCAL_SYMBOL: b2World.cpp<937:11> [b2World.cpp <937:11 937:15>]
LOCAL_SYMBOL: b2World.cpp<937:11> [b2World.cpp <939:21 939:25>]
LOCAL_SYMBOL: b2World.cpp<93:1> [b2World.cpp <93:1 93:1>]
LOCAL_SYMBOL: b2World.cpp<93:1> [b2World.cpp <95:1 95:1>]
LOCAL_SYMBOL: b2World.cpp<944:2> [b2World.cpp <944:2 944:2>]
LOCAL_SYMBOL: b2World.cpp<944:2> [b2World.cpp <948:2 948:2>]
LOCAL_SYMBOL: b2World.cpp<945:11> [b2World.cpp <945:11 945:15>]
LOCAL_SYMBOL: b2World.cpp<945:11> [b2World.cpp <947:24 947:28>]
LOCAL_SYMBOL: b2World.cpp<951:2> [b2World.cpp <951:2 951:2>]
LOCAL_SYMBOL: b2World.cpp<951:2> [b2World.cpp <953:2 953:2>]
LOCAL_SYMBOL: b2World.cpp<956:2> [b2World.cpp <956:2 956:2>]
LOCAL_SYMBOL: b2World.cpp<956:2> [b2World.cpp <958:2 958:2>]
LOCAL_SYMBOL: b2World.cpp<966:1> [b2World.cpp <966:1 966:1>]
LOCAL_SYMBOL: b2World.cpp<966:1> [b2World.cpp <972:1 972:1>]
LOCAL_SYMBOL: b2World.cpp<967:15> [b2World.cpp <967:15 967:18>]
LOCAL_SYMBOL: b2World.cpp<967:15> [b2World.cpp <967:34 967:37>]
LOCAL_SYMBOL: b2World.cpp<967:15> [b2World.cpp <967:40 967:43>]
LOCAL_SYMBOL: b2World.cpp<967:15> [b2World.cpp <967:47 967:50>]
LOCAL_SYMBOL: b2World.cpp<967:15> [b2World.cpp <969:3 969:6>]
LOCAL_SYMBOL: b2World.cpp<967:15> [b2World.cpp <970:3 970:6>]
LOCAL_SYMBOL: b2World.cpp<968:2> [b2World.cpp <968:2 968:2>]
LOCAL_SYMBOL: b2World.cpp<968:2> [b2World.cpp <971:2 971:2>]
LOCAL_SYMBOL: b2World.cpp<975:1> [b2World.cpp <975:1 975:1>]
LOCAL_SYMBOL: b2World.cpp<975:1> [b2World.cpp <984:1 984:1>]
LOCAL_SYMBOL: b2World.cpp<976:27> [b2World.cpp <976:27 976:33>]
LOCAL_SYMBOL: b2World.cpp<976:27> [b2World.cpp <978:68 978:74>]
LOCAL_SYMBOL: b2World.cpp<977:2> [b2World.cpp <977:2 977:2>]
LOCAL_SYMBOL: b2World.cpp<977:2> [b2World.cpp <980:2 980:2>]
LOCAL_SYMBOL: b2World.cpp<978:19> [b2World.cpp <978:19 978:23>]
LOCAL_SYMBOL: b2World.cpp<978:19> [b2World.cpp <979:34 979:38>]
LOCAL_SYMBOL: b2World.cpp<97:53> [b2World.cpp <97:53 97:60>]
LOCAL_SYMBOL: b2World.cpp<97:53> [b2World.cpp <99:39 99:46>]
LOCAL_SYMBOL: b2World.cpp<986:42> [b2World.cpp <986:42 986:49>]
LOCAL_SYMBOL: b2World.cpp<986:42> [b2World.cpp <990:21 990:28>]
LOCAL_SYMBOL: b2World.cpp<986:66> [b2World.cpp <986:66 986:69>]
LOCAL_SYMBOL: b2World.cpp<986:66> [b2World.cpp <991:48 991:51>]
LOCAL_SYMBOL: b2World.cpp<987:1> [b2World.cpp <987:1 987:1>]
LOCAL_SYMBOL: b2World.cpp<987:1> [b2World.cpp <992:1 992:1>]
LOCAL_SYMBOL: b2World.cpp<988:22> [b2World.cpp <988:22 988:28>]
LOCAL_SYMBOL: b2World.cpp<988:22> [b2World.cpp <989:2 989:8>]
LOCAL_SYMBOL: b2World.cpp<988:22> [b2World.cpp <990:2 990:8>]
LOCAL_SYMBOL: b2World.cpp<988:22> [b2World.cpp <991:39 991:45>]
LOCAL_SYMBOL: b2World.cpp<98:1> [b2World.cpp <98:1 98:1>]
LOCAL_SYMBOL: b2World.cpp<98:1> [b2World.cpp <100:1 100:1>]
LOCAL_SYMBOL: b2World.cpp<995:1> [b2World.cpp <995:1 995:1>]
LOCAL_SYMBOL: b2World.cpp<995:1> [b2World.cpp <1017:1 1017:1>]
LOCAL_SYMBOL: b2World.cpp<996:48> [b2World.cpp <996:48 996:52>]
LOCAL_SYMBOL: b2World.cpp<996:48> [b2World.cpp <1003:40 1003:44>]
LOCAL_SYMBOL: b2World.cpp<996:48> [b2World.cpp <1008:39 1008:43>]
LOCAL_SYMBOL: b2World.cpp<996:48> [b2World.cpp <1008:61 1008:65>]
LOCAL_SYMBOL: b2World.cpp<996:48> [b2World.cpp <1012:10 1012:14>]
LOCAL_SYMBOL: b2World.cpp<996:61> [b2World.cpp <996:61 996:67>]
LOCAL_SYMBOL: b2World.cpp<996:61> [b2World.cpp <998:44 998:50>]
LOCAL_SYMBOL: b2World.cpp<997:2> [b2World.cpp <997:2 997:2>]
LOCAL_SYMBOL: b2World.cpp<997:2> [b2World.cpp <1013:2 1013:2>]
LOCAL_SYMBOL: b2World.cpp<998:9> [b2World.cpp <998:9 998:16>]
LOCAL_SYMBOL: b2World.cpp<998:9> [b2World.cpp <999:44 999:51>]
LOCAL_SYMBOL: b2World.cpp<999:19> [b2World.cpp <999:19 999:23>]
LOCAL_SYMBOL: b2World.cpp<999:19> [b2World.cpp <1000:24 1000:28>]
LOCAL_SYMBOL: b2World.cpp<999:19> [b2World.cpp <1001:17 1001:21>]
LOCAL_SYMBOL: b2World.h<114:34> [b2World.h <114:34 114:41>]
LOCAL_SYMBOL: b2World.h<114:58> [b2World.h <114:58 114:61>]
LOCAL_SYMBOL: b2World.h<122:34> [b2World.h <122:34 122:41>]
LOCAL_SYMBOL: b2World.h<122:58> [b2World.h <122:58 122:63>]
LOCAL_SYMBOL: b2World.h<122:80> [b2World.h <122:80 122:85>]
LOCAL_SYMBOL: b2World.h<145:29> [b2World.h <145:29 145:32>]
LOCAL_SYMBOL: b2World.h<146:32> [b2World.h <146:32 146:32>]
LOCAL_SYMBOL: b2World.h<146:32> [b2World.h <146:55 146:55>]
LOCAL_SYMBOL: b2World.h<149:28> [b2World.h <149:28 149:31>]
LOCAL_SYMBOL: b2World.h<149:28> [b2World.h <149:53 149:56>]
LOCAL_SYMBOL: b2World.h<149:34> [b2World.h <149:34 149:34>]
LOCAL_SYMBOL: b2World.h<149:34> [b2World.h <149:59 149:59>]
LOCAL_SYMBOL: b2World.h<150:31> [b2World.h <150:31 150:31>]
LOCAL_SYMBOL: b2World.h<150:31> [b2World.h <150:56 150:56>]
LOCAL_SYMBOL: b2World.h<153:33> [b2World.h <153:33 153:36>]
LOCAL_SYMBOL: b2World.h<153:33> [b2World.h <153:63 153:66>]
LOCAL_SYMBOL: b2World.h<153:39> [b2World.h <153:39 153:39>]
LOCAL_SYMBOL: b2World.h<153:39> [b2World.h <153:69 153:69>]
LOCAL_SYMBOL: b2World.h<154:36> [b2World.h <154:36 154:36>]
LOCAL_SYMBOL: b2World.h<154:36> [b2World.h <154:66 154:66>]
LOCAL_SYMBOL: b2World.h<157:27> [b2World.h <157:27 157:30>]
LOCAL_SYMBOL: b2World.h<157:27> [b2World.h <157:51 157:54>]
LOCAL_SYMBOL: b2World.h<157:33> [b2World.h <157:33 157:33>]
LOCAL_SYMBOL: b2World.h<157:33> [b2World.h <157:57 157:57>]
LOCAL_SYMBOL: b2World.h<158:30> [b2World.h <158:30 158:30>]
LOCAL_SYMBOL: b2World.h<158:30> [b2World.h <158:54 158:54>]
LOCAL_SYMBOL: b2World.h<183:32> [b2World.h <183:32 183:38>]
LOCAL_SYMBOL: b2World.h<192:31> [b2World.h <192:31 192:34>]
LOCAL_SYMBOL: b2World.h<200:33> [b2World.h <200:33 200:41>]
LOCAL_SYMBOL: b2World.h<216:2> [b2World.h <216:2 216:2>]
LOCAL_SYMBOL: b2World.h<216:2> [b2World.h <220:2 220:2>]
LOCAL_SYMBOL: b2World.h<227:31> [b2World.h <227:31 227:34>]
LOCAL_SYMBOL: b2World.h<228:34> [b2World.h <228:34 228:37>]
LOCAL_SYMBOL: b2World.h<230:26> [b2World.h <230:26 230:30>]
LOCAL_SYMBOL: b2World.h<231:28> [b2World.h <231:28 231:32>]
LOCAL_SYMBOL: b2World.h<231:54> [b2World.h <231:54 231:55>]
LOCAL_SYMBOL: b2World.h<231:73> [b2World.h <231:73 231:77>]
LOCAL_SYMBOL: b2World.h<267:1> [b2World.h <267:1 267:1>]
LOCAL_SYMBOL: b2World.h<267:1> [b2World.h <269:1 269:1>]
LOCAL_SYMBOL: b2World.h<272:1> [b2World.h <272:1 272:1>]
LOCAL_SYMBOL: b2World.h<272:1> [b2World.h <274:1 274:1>]
LOCAL_SYMBOL: b2World.h<277:1> [b2World.h <277:1 277:1>]
LOCAL_SYMBOL: b2World.h<277:1> [b2World.h <279:1 279:1>]
LOCAL_SYMBOL: b2World.h<282:1> [b2World.h <282:1 282:1>]
LOCAL_SYMBOL: b2World.h<282:1> [b2World.h <284:1 284:1>]
LOCAL_SYMBOL: b2World.h<287:1> [b2World.h <287:1 287:1>]
LOCAL_SYMBOL: b2World.h<287:1> [b2World.h <289:1 289:1>]
LOCAL_SYMBOL: b2World.h<292:1> [b2World.h <292:1 292:1>]
LOCAL_SYMBOL: b2World.h<292:1> [b2World.h <294:1 294:1>]
LOCAL_SYMBOL: b2World.h<297:1> [b2World.h <297:1 297:1>]
LOCAL_SYMBOL: b2World.h<297:1> [b2World.h <299:1 299:1>]
LOCAL_SYMBOL: b2World.h<302:1> [b2World.h <302:1 302:1>]
LOCAL_SYMBOL: b2World.h<302:1> [b2World.h <304:1 304:1>]
LOCAL_SYMBOL: b2World.h<307:1> [b2World.h <307:1 307:1>]
LOCAL_SYMBOL: b2World.h<307:1> [b2World.h <309:1 309:1>]
LOCAL_SYMBOL: b2World.h<311:47> [b2World.h <311:47 311:53>]
LOCAL_SYMBOL: b2World.h<311:47> [b2World.h <313:14 313:20>]
LOCAL_SYMBOL: b2World.h<312:1> [b2World.h <312:1 312:1>]
LOCAL_SYMBOL: b2World.h<312:1> [b2World.h <314:1 314:1>]
LOCAL_SYMBOL: b2World.h<317:1> [b2World.h <317:1 317:1>]
LOCAL_SYMBOL: b2World.h<317:1> [b2World.h <319:1 319:1>]
LOCAL_SYMBOL: b2World.h<322:1> [b2World.h <322:1 322:1>]
LOCAL_SYMBOL: b2World.h<322:1> [b2World.h <324:1 324:1>]
LOCAL_SYMBOL: b2World.h<326:46> [b2World.h <326:46 326:49>]
LOCAL_SYMBOL: b2World.h<326:46> [b2World.h <328:6 328:9>]
LOCAL_SYMBOL: b2World.h<327:1> [b2World.h <327:1 327:1>]
LOCAL_SYMBOL: b2World.h<327:1> [b2World.h <336:1 336:1>]
LOCAL_SYMBOL: b2World.h<329:2> [b2World.h <329:2 329:2>]
LOCAL_SYMBOL: b2World.h<329:2> [b2World.h <331:2 331:2>]
LOCAL_SYMBOL: b2World.h<333:2> [b2World.h <333:2 333:2>]
LOCAL_SYMBOL: b2World.h<333:2> [b2World.h <335:2 335:2>]
LOCAL_SYMBOL: b2World.h<340:1> [b2World.h <340:1 340:1>]
LOCAL_SYMBOL: b2World.h<340:1> [b2World.h <342:1 342:1>]
LOCAL_SYMBOL: b2World.h<345:1> [b2World.h <345:1 345:1>]
LOCAL_SYMBOL: b2World.h<345:1> [b2World.h <347:1 347:1>]
LOCAL_SYMBOL: b2World.h<350:1> [b2World.h <350:1 350:1>]
LOCAL_SYMBOL: b2World.h<350:1> [b2World.h <352:1 352:1>]
LOCAL_SYMBOL: b2World.h<42:1> [b2World.h <42:1 42:1>]
LOCAL_SYMBOL: b2World.h<42:1> [b2World.h <264:1 264:1>]
LOCAL_SYMBOL: b2World.h<46:24> [b2World.h <46:24 46:30>]
LOCAL_SYMBOL: b2World.h<53:53> [b2World.h <53:53 53:60>]
LOCAL_SYMBOL: b2World.h<58:41> [b2World.h <58:41 58:46>]
LOCAL_SYMBOL: b2World.h<62:45> [b2World.h <62:45 62:52>]
LOCAL_SYMBOL: b2World.h<67:28> [b2World.h <67:28 67:36>]
LOCAL_SYMBOL: b2World.h<72:38> [b2World.h <72:38 72:40>]
LOCAL_SYMBOL: b2World.h<78:27> [b2World.h <78:27 78:30>]
LOCAL_SYMBOL: b2World.h<83:41> [b2World.h <83:41 83:43>]
LOCAL_SYMBOL: b2World.h<87:29> [b2World.h <87:29 87:33>]
LOCAL_SYMBOL: b2World.h<94:21> [b2World.h <94:21 94:28>]
LOCAL_SYMBOL: b2World.h<95:11> [b2World.h <95:11 95:28>]
LOCAL_SYMBOL: b2World.h<96:11> [b2World.h <96:11 96:28>]
LOCAL_SYMBOL: b2WorldCallbacks.h<102:35> [b2WorldCallbacks.h <102:35 102:41>]
LOCAL_SYMBOL: b2WorldCallbacks.h<102:35> [b2WorldCallbacks.h <104:15 104:21>]
LOCAL_SYMBOL: b2WorldCallbacks.h<102:62> [b2WorldCallbacks.h <102:62 102:72>]
LOCAL_SYMBOL: b2WorldCallbacks.h<102:62> [b2WorldCallbacks.h <105:15 105:25>]
LOCAL_SYMBOL: b2WorldCallbacks.h<103:2> [b2WorldCallbacks.h <103:2 103:2>]
LOCAL_SYMBOL: b2WorldCallbacks.h<103:2> [b2WorldCallbacks.h <106:2 106:2>]
LOCAL_SYMBOL: b2WorldCallbacks.h<114:36> [b2WorldCallbacks.h <114:36 114:42>]
LOCAL_SYMBOL: b2WorldCallbacks.h<114:36> [b2WorldCallbacks.h <116:15 116:21>]
LOCAL_SYMBOL: b2WorldCallbacks.h<114:69> [b2WorldCallbacks.h <114:69 114:75>]
LOCAL_SYMBOL: b2WorldCallbacks.h<114:69> [b2WorldCallbacks.h <117:15 117:21>]
LOCAL_SYMBOL: b2WorldCallbacks.h<115:2> [b2WorldCallbacks.h <115:2 115:2>]
LOCAL_SYMBOL: b2WorldCallbacks.h<115:2> [b2WorldCallbacks.h <118:2 118:2>]
LOCAL_SYMBOL: b2WorldCallbacks.h<124:1> [b2WorldCallbacks.h <124:1 124:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<124:1> [b2WorldCallbacks.h <131:1 131:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<126:29> [b2WorldCallbacks.h <126:29 126:29>]
LOCAL_SYMBOL: b2WorldCallbacks.h<126:29> [b2WorldCallbacks.h <126:30 126:30>]
LOCAL_SYMBOL: b2WorldCallbacks.h<130:40> [b2WorldCallbacks.h <130:40 130:46>]
LOCAL_SYMBOL: b2WorldCallbacks.h<136:1> [b2WorldCallbacks.h <136:1 136:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<136:1> [b2WorldCallbacks.h <153:1 153:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<138:31> [b2WorldCallbacks.h <138:31 138:31>]
LOCAL_SYMBOL: b2WorldCallbacks.h<138:31> [b2WorldCallbacks.h <138:32 138:32>]
LOCAL_SYMBOL: b2WorldCallbacks.h<151:44> [b2WorldCallbacks.h <151:44 151:50>]
LOCAL_SYMBOL: b2WorldCallbacks.h<151:67> [b2WorldCallbacks.h <151:67 151:71>]
LOCAL_SYMBOL: b2WorldCallbacks.h<152:24> [b2WorldCallbacks.h <152:24 152:29>]
LOCAL_SYMBOL: b2WorldCallbacks.h<152:40> [b2WorldCallbacks.h <152:40 152:47>]
LOCAL_SYMBOL: b2WorldCallbacks.h<37:1> [b2WorldCallbacks.h <37:1 37:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<37:1> [b2WorldCallbacks.h <48:1 48:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<39:35> [b2WorldCallbacks.h <39:35 39:35>]
LOCAL_SYMBOL: b2WorldCallbacks.h<39:35> [b2WorldCallbacks.h <39:36 39:36>]
LOCAL_SYMBOL: b2WorldCallbacks.h<43:35> [b2WorldCallbacks.h <43:35 43:39>]
LOCAL_SYMBOL: b2WorldCallbacks.h<47:37> [b2WorldCallbacks.h <47:37 47:43>]
LOCAL_SYMBOL: b2WorldCallbacks.h<53:1> [b2WorldCallbacks.h <53:1 53:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<53:1> [b2WorldCallbacks.h <60:1 60:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<55:29> [b2WorldCallbacks.h <55:29 55:29>]
LOCAL_SYMBOL: b2WorldCallbacks.h<55:29> [b2WorldCallbacks.h <55:30 55:30>]
LOCAL_SYMBOL: b2WorldCallbacks.h<59:40> [b2WorldCallbacks.h <59:40 59:47>]
LOCAL_SYMBOL: b2WorldCallbacks.h<59:61> [b2WorldCallbacks.h <59:61 59:68>]
LOCAL_SYMBOL: b2WorldCallbacks.h<66:1> [b2WorldCallbacks.h <66:1 66:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<66:1> [b2WorldCallbacks.h <70:1 70:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<82:1> [b2WorldCallbacks.h <82:1 82:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<82:1> [b2WorldCallbacks.h <119:1 119:1>]
LOCAL_SYMBOL: b2WorldCallbacks.h<84:31> [b2WorldCallbacks.h <84:31 84:31>]
LOCAL_SYMBOL: b2WorldCallbacks.h<84:31> [b2WorldCallbacks.h <84:32 84:32>]
LOCAL_SYMBOL: b2WorldCallbacks.h<87:39> [b2WorldCallbacks.h <87:39 87:45>]
LOCAL_SYMBOL: b2WorldCallbacks.h<87:39> [b2WorldCallbacks.h <87:62 87:68>]
LOCAL_SYMBOL: b2WorldCallbacks.h<87:48> [b2WorldCallbacks.h <87:48 87:48>]
LOCAL_SYMBOL: b2WorldCallbacks.h<87:48> [b2WorldCallbacks.h <87:72 87:72>]
LOCAL_SYMBOL: b2WorldCallbacks.h<90:37> [b2WorldCallbacks.h <90:37 90:43>]
LOCAL_SYMBOL: b2WorldCallbacks.h<90:37> [b2WorldCallbacks.h <90:60 90:66>]
LOCAL_SYMBOL: b2WorldCallbacks.h<90:46> [b2WorldCallbacks.h <90:46 90:46>]
LOCAL_SYMBOL: b2WorldCallbacks.h<90:46> [b2WorldCallbacks.h <90:70 90:70>]
COMMENT: comment [b2World.cpp <1:1 17:3>]
COMMENT: comment [b2World.cpp <68:2 68:40>]
COMMENT: comment [b2World.cpp <118:2 118:37>]
COMMENT: comment [b2World.cpp <140:2 140:32>]
COMMENT: comment [b2World.cpp <158:2 158:34>]
COMMENT: comment [b2World.cpp <168:2 168:69>]
COMMENT: comment [b2World.cpp <191:2 191:28>]
COMMENT: comment [b2World.cpp <222:2 222:31>]
COMMENT: comment [b2World.cpp <232:2 232:48>]
COMMENT: comment [b2World.cpp <250:2 250:76>]
COMMENT: comment [b2World.cpp <258:5 258:74>]
COMMENT: comment [b2World.cpp <259:5 259:23>]
COMMENT: comment [b2World.cpp <267:2 267:52>]
COMMENT: comment [b2World.cpp <282:2 282:40>]
COMMENT: comment [b2World.cpp <298:2 298:34>]
COMMENT: comment [b2World.cpp <302:2 302:30>]
COMMENT: comment [b2World.cpp <306:2 306:24>]
COMMENT: comment [b2World.cpp <325:2 325:23>]
COMMENT: comment [b2World.cpp <349:2 349:76>]
COMMENT: comment [b2World.cpp <357:5 357:74>]
COMMENT: comment [b2World.cpp <358:5 358:23>]
COMMENT: comment [b2World.cpp <367:1 367:3>]
COMMENT: comment [b2World.cpp <385:1 385:77>]
COMMENT: comment [b2World.cpp <392:2 392:40>]
COMMENT: comment [b2World.cpp <399:2 399:32>]
COMMENT: comment [b2World.cpp <413:2 413:42>]
COMMENT: comment [b2World.cpp <428:3 428:43>]
COMMENT: comment [b2World.cpp <434:3 434:29>]
COMMENT: comment [b2World.cpp <440:3 440:65>]
COMMENT: comment [b2World.cpp <443:4 443:65>]
COMMENT: comment [b2World.cpp <448:4 448:67>]
COMMENT: comment [b2World.cpp <451:4 451:53>]
COMMENT: comment [b2World.cpp <452:4 452:46>]
COMMENT: comment [b2World.cpp <458:4 458:50>]
COMMENT: comment [b2World.cpp <463:5 463:57>]
COMMENT: comment [b2World.cpp <469:5 469:43>]
COMMENT: comment [b2World.cpp <476:5 476:21>]
COMMENT: comment [b2World.cpp <489:5 489:56>]
COMMENT: comment [b2World.cpp <500:4 500:46>]
COMMENT: comment [b2World.cpp <510:5 510:59>]
COMMENT: comment [b2World.cpp <536:3 536:25>]
COMMENT: comment [b2World.cpp <539:4 539:59>]
COMMENT: comment [b2World.cpp <552:3 552:58>]
COMMENT: comment [b2World.cpp <555:4 555:59>]
COMMENT: comment [b2World.cpp <566:4 566:41>]
COMMENT: comment [b2World.cpp <570:3 570:28>]
COMMENT: comment [b2World.cpp <576:1 576:37>]
COMMENT: comment [b2World.cpp <591:4 591:21>]
COMMENT: comment [b2World.cpp <598:2 598:36>]
COMMENT: comment [b2World.cpp <601:3 601:25>]
COMMENT: comment [b2World.cpp <607:4 607:32>]
COMMENT: comment [b2World.cpp <613:4 613:38>]
COMMENT: comment [b2World.cpp <622:5 622:44>]
COMMENT: comment [b2World.cpp <630:5 630:26>]
COMMENT: comment [b2World.cpp <646:5 646:69>]
COMMENT: comment [b2World.cpp <655:5 655:48>]
COMMENT: comment [b2World.cpp <661:5 661:41>]
COMMENT: comment [b2World.cpp <662:5 662:51>]
COMMENT: comment [b2World.cpp <681:5 681:58>]
COMMENT: comment [b2World.cpp <692:5 692:62>]
COMMENT: comment [b2World.cpp <709:5 709:45>]
COMMENT: comment [b2World.cpp <717:4 717:32>]
COMMENT: comment [b2World.cpp <722:3 722:36>]
COMMENT: comment [b2World.cpp <734:3 734:57>]
COMMENT: comment [b2World.cpp <739:3 739:27>]
COMMENT: comment [b2World.cpp <742:4 742:26>]
COMMENT: comment [b2World.cpp <754:3 754:22>]
COMMENT: comment [b2World.cpp <764:3 764:38>]
COMMENT: comment [b2World.cpp <785:6 785:59>]
COMMENT: comment [b2World.cpp <791:6 791:54>]
COMMENT: comment [b2World.cpp <799:6 799:22>]
COMMENT: comment [b2World.cpp <807:6 807:49>]
COMMENT: comment [b2World.cpp <814:6 814:34>]
COMMENT: comment [b2World.cpp <817:6 817:46>]
COMMENT: comment [b2World.cpp <825:6 825:34>]
COMMENT: comment [b2World.cpp <833:6 833:38>]
COMMENT: comment [b2World.cpp <837:6 837:61>]
COMMENT: comment [b2World.cpp <843:6 843:42>]
COMMENT: comment [b2World.cpp <865:3 865:61>]
COMMENT: comment [b2World.cpp <878:4 878:58>]
COMMENT: comment [b2World.cpp <885:3 885:89>]
COMMENT: comment [b2World.cpp <886:3 886:43>]
COMMENT: comment [b2World.cpp <901:2 901:66>]
COMMENT: comment [b2World.cpp <927:2 927:64>]
COMMENT: comment [b2World.cpp <934:2 934:79>]
COMMENT: comment [b2World.cpp <942:2 942:23>]
COMMENT: comment [b2World.cpp <1143:3 1143:21>]
COMMENT: comment [b2World.cpp <1206:4 1206:45>]
COMMENT: comment [b2World.cpp <1207:4 1207:45>]
COMMENT: comment [b2World.cpp <1209:4 1209:50>]
COMMENT: comment [b2World.cpp <1210:4 1210:50>]
COMMENT: comment [b2World.cpp <1212:4 1212:46>]
COMMENT: comment [b2World.cpp <1327:2 1327:44>]
COMMENT: comment [b2World.cpp <1340:2 1340:45>]
COMMENT: comment [b2World.h <1:1 17:3>]
COMMENT: comment [b2World.h <38:1 38:70>]
COMMENT: comment [b2World.h <39:1 39:71>]
COMMENT: comment [b2World.h <40:1 40:27>]
COMMENT: comment [b2World.h <44:2 44:31>]
COMMENT: comment [b2World.h <45:2 45:46>]
COMMENT: comment [b2World.h <48:2 48:93>]
COMMENT: comment [b2World.h <51:2 51:76>]
COMMENT: comment [b2World.h <52:2 52:22>]
COMMENT: comment [b2World.h <55:2 55:75>]
COMMENT: comment [b2World.h <56:2 56:78>]
COMMENT: comment [b2World.h <57:2 57:45>]
COMMENT: comment [b2World.h <60:2 60:78>]
COMMENT: comment [b2World.h <61:2 61:22>]
COMMENT: comment [b2World.h <64:2 64:79>]
COMMENT: comment [b2World.h <65:2 65:79>]
COMMENT: comment [b2World.h <66:2 66:38>]
COMMENT: comment [b2World.h <69:2 69:76>]
COMMENT: comment [b2World.h <70:2 70:18>]
COMMENT: comment [b2World.h <71:2 71:56>]
COMMENT: comment [b2World.h <74:2 74:77>]
COMMENT: comment [b2World.h <75:2 75:60>]
COMMENT: comment [b2World.h <76:2 76:75>]
COMMENT: comment [b2World.h <77:2 77:56>]
COMMENT: comment [b2World.h <80:2 80:81>]
COMMENT: comment [b2World.h <81:2 81:74>]
COMMENT: comment [b2World.h <82:2 82:56>]
COMMENT: comment [b2World.h <85:2 85:78>]
COMMENT: comment [b2World.h <86:2 86:56>]
COMMENT: comment [b2World.h <89:2 89:71>]
COMMENT: comment [b2World.h <90:2 90:30>]
COMMENT: comment [b2World.h <91:2 91:75>]
COMMENT: comment [b2World.h <92:2 92:67>]
COMMENT: comment [b2World.h <93:2 93:67>]
COMMENT: comment [b2World.h <98:2 98:97>]
COMMENT: comment [b2World.h <99:2 99:94>]
COMMENT: comment [b2World.h <100:2 100:101>]
COMMENT: comment [b2World.h <101:2 101:58>]
COMMENT: comment [b2World.h <102:2 102:93>]
COMMENT: comment [b2World.h <103:2 103:81>]
COMMENT: comment [b2World.h <104:2 104:29>]
COMMENT: comment [b2World.h <107:2 107:90>]
COMMENT: comment [b2World.h <110:2 110:67>]
COMMENT: comment [b2World.h <111:2 111:20>]
COMMENT: comment [b2World.h <112:2 112:56>]
COMMENT: comment [b2World.h <113:2 113:32>]
COMMENT: comment [b2World.h <116:2 116:79>]
COMMENT: comment [b2World.h <117:2 117:73>]
COMMENT: comment [b2World.h <118:2 118:66>]
COMMENT: comment [b2World.h <119:2 119:56>]
COMMENT: comment [b2World.h <120:2 120:42>]
COMMENT: comment [b2World.h <121:2 121:40>]
COMMENT: comment [b2World.h <124:2 124:81>]
COMMENT: comment [b2World.h <125:2 125:84>]
COMMENT: comment [b2World.h <126:2 126:46>]
COMMENT: comment [b2World.h <130:2 130:84>]
COMMENT: comment [b2World.h <131:2 131:86>]
COMMENT: comment [b2World.h <132:2 132:47>]
COMMENT: comment [b2World.h <136:2 136:90>]
COMMENT: comment [b2World.h <137:2 137:90>]
COMMENT: comment [b2World.h <138:2 138:49>]
COMMENT: comment [b2World.h <139:2 139:79>]
COMMENT: comment [b2World.h <140:2 140:54>]
COMMENT: comment [b2World.h <144:2 144:27>]
COMMENT: comment [b2World.h <148:2 148:48>]
COMMENT: comment [b2World.h <152:2 152:53>]
COMMENT: comment [b2World.h <156:2 156:68>]
COMMENT: comment [b2World.h <160:2 160:44>]
COMMENT: comment [b2World.h <163:2 163:31>]
COMMENT: comment [b2World.h <166:2 166:31>]
COMMENT: comment [b2World.h <169:2 169:74>]
COMMENT: comment [b2World.h <172:2 172:41>]
COMMENT: comment [b2World.h <175:2 175:42>]
COMMENT: comment [b2World.h <178:2 178:73>]
COMMENT: comment [b2World.h <179:2 179:23>]
COMMENT: comment [b2World.h <182:2 182:39>]
COMMENT: comment [b2World.h <185:2 185:36>]
COMMENT: comment [b2World.h <188:2 188:57>]
COMMENT: comment [b2World.h <191:2 191:76>]
COMMENT: comment [b2World.h <194:2 194:83>]
COMMENT: comment [b2World.h <197:2 197:54>]
COMMENT: comment [b2World.h <198:2 198:54>]
COMMENT: comment [b2World.h <199:2 199:68>]
COMMENT: comment [b2World.h <202:2 202:42>]
COMMENT: comment [b2World.h <205:2 205:30>]
COMMENT: comment [b2World.h <208:2 208:39>]
COMMENT: comment [b2World.h <209:2 209:60>]
COMMENT: comment [b2World.h <214:2 214:12>]
COMMENT: comment [b2World.h <252:2 252:51>]
COMMENT: comment [b2World.h <253:2 253:34>]
COMMENT: comment [b2World.h <256:2 256:40>]
COMMENT: comment [b2World.h <338:1 338:82>]
COMMENT: comment [b2Math.h <1:1 17:3>]
COMMENT: comment [b2Math.h <25:1 25:91>]
COMMENT: comment [b2Math.h <32:1 32:56>]
COMMENT: comment [b2Math.h <52:1 52:24>]
COMMENT: comment [b2Math.h <55:2 55:57>]
COMMENT: comment [b2Math.h <58:2 58:34>]
COMMENT: comment [b2Math.h <61:2 61:35>]
COMMENT: comment [b2Math.h <64:2 64:52>]
COMMENT: comment [b2Math.h <67:2 67:25>]
COMMENT: comment [b2Math.h <70:2 70:36>]
COMMENT: comment [b2Math.h <76:2 76:34>]
COMMENT: comment [b2Math.h <82:2 82:34>]
COMMENT: comment [b2Math.h <88:2 88:41>]
COMMENT: comment [b2Math.h <94:2 94:39>]
COMMENT: comment [b2Math.h <100:2 100:47>]
COMMENT: comment [b2Math.h <106:2 106:66>]
COMMENT: comment [b2Math.h <107:2 107:35>]
COMMENT: comment [b2Math.h <113:2 113:65>]
COMMENT: comment [b2Math.h <128:2 128:50>]
COMMENT: comment [b2Math.h <134:2 134:77>]
COMMENT: comment [b2Math.h <143:1 143:40>]
COMMENT: comment [b2Math.h <146:2 146:57>]
COMMENT: comment [b2Math.h <149:2 149:34>]
COMMENT: comment [b2Math.h <152:2 152:35>]
COMMENT: comment [b2Math.h <155:2 155:52>]
COMMENT: comment [b2Math.h <158:2 158:25>]
COMMENT: comment [b2Math.h <161:2 161:34>]
COMMENT: comment [b2Math.h <167:2 167:41>]
COMMENT: comment [b2Math.h <173:2 173:39>]
COMMENT: comment [b2Math.h <182:1 182:51>]
COMMENT: comment [b2Math.h <185:2 185:61>]
COMMENT: comment [b2Math.h <188:2 188:42>]
COMMENT: comment [b2Math.h <195:2 195:42>]
COMMENT: comment [b2Math.h <202:2 202:43>]
COMMENT: comment [b2Math.h <209:2 209:38>]
COMMENT: comment [b2Math.h <216:2 216:35>]
COMMENT: comment [b2Math.h <237:2 237:73>]
COMMENT: comment [b2Math.h <238:2 238:51>]
COMMENT: comment [b2Math.h <256:1 256:51>]
COMMENT: comment [b2Math.h <259:2 259:61>]
COMMENT: comment [b2Math.h <262:2 262:42>]
COMMENT: comment [b2Math.h <270:2 270:35>]
COMMENT: comment [b2Math.h <278:2 278:73>]
COMMENT: comment [b2Math.h <279:2 279:51>]
COMMENT: comment [b2Math.h <282:2 282:73>]
COMMENT: comment [b2Math.h <283:2 283:72>]
COMMENT: comment [b2Math.h <284:2 284:29>]
COMMENT: comment [b2Math.h <287:2 287:49>]
COMMENT: comment [b2Math.h <288:2 288:42>]
COMMENT: comment [b2Math.h <291:2 291:59>]
COMMENT: comment [b2Math.h <292:2 292:42>]
COMMENT: comment [b2Math.h <298:1 298:13>]
COMMENT: comment [b2Math.h <303:2 303:41>]
COMMENT: comment [b2Math.h <306:3 306:25>]
COMMENT: comment [b2Math.h <311:2 311:36>]
COMMENT: comment [b2Math.h <314:3 314:25>]
COMMENT: comment [b2Math.h <319:2 319:34>]
COMMENT: comment [b2Math.h <326:2 326:30>]
COMMENT: comment [b2Math.h <332:2 332:20>]
COMMENT: comment [b2Math.h <338:2 338:20>]
COMMENT: comment [b2Math.h <344:2 344:21>]
COMMENT: comment [b2Math.h <348:1 348:75>]
COMMENT: comment [b2Math.h <349:1 349:50>]
COMMENT: comment [b2Math.h <352:2 352:43>]
COMMENT: comment [b2Math.h <355:2 355:56>]
COMMENT: comment [b2Math.h <358:2 358:41>]
COMMENT: comment [b2Math.h <365:2 365:47>]
COMMENT: comment [b2Math.h <376:1 376:67>]
COMMENT: comment [b2Math.h <377:1 377:66>]
COMMENT: comment [b2Math.h <378:1 378:70>]
COMMENT: comment [b2Math.h <379:1 379:53>]
COMMENT: comment [b2Math.h <382:2 382:56>]
COMMENT: comment [b2Math.h <383:2 383:65>]
COMMENT: comment [b2Math.h <386:2 386:62>]
COMMENT: comment [b2Math.h <387:2 387:40>]
COMMENT: comment [b2Math.h <390:2 390:27>]
COMMENT: comment [b2Math.h <393:22 393:56>]
COMMENT: comment [b2Math.h <394:17 394:44>]
COMMENT: comment [b2Math.h <395:18 395:35>]
COMMENT: comment [b2Math.h <397:2 397:58>]
COMMENT: comment [b2Math.h <398:2 398:44>]
COMMENT: comment [b2Math.h <402:1 402:20>]
COMMENT: comment [b2Math.h <405:1 405:44>]
COMMENT: comment [b2Math.h <411:1 411:76>]
COMMENT: comment [b2Math.h <417:1 417:76>]
COMMENT: comment [b2Math.h <418:1 418:14>]
COMMENT: comment [b2Math.h <424:1 424:76>]
COMMENT: comment [b2Math.h <425:1 425:14>]
COMMENT: comment [b2Math.h <431:1 431:72>]
COMMENT: comment [b2Math.h <432:1 432:63>]
COMMENT: comment [b2Math.h <438:1 438:82>]
COMMENT: comment [b2Math.h <439:1 439:83>]
COMMENT: comment [b2Math.h <445:1 445:36>]
COMMENT: comment [b2Math.h <451:1 451:41>]
COMMENT: comment [b2Math.h <489:1 489:36>]
COMMENT: comment [b2Math.h <495:1 495:41>]
COMMENT: comment [b2Math.h <501:1 501:44>]
COMMENT: comment [b2Math.h <507:1 507:46>]
COMMENT: comment [b2Math.h <518:1 518:9>]
COMMENT: comment [b2Math.h <524:1 524:11>]
COMMENT: comment [b2Math.h <532:1 532:38>]
COMMENT: comment [b2Math.h <538:1 538:38>]
COMMENT: comment [b2Math.h <544:1 544:34>]
COMMENT: comment [b2Math.h <547:2 547:53>]
COMMENT: comment [b2Math.h <548:2 548:53>]
COMMENT: comment [b2Math.h <549:2 549:26>]
COMMENT: comment [b2Math.h <550:2 550:26>]
COMMENT: comment [b2Math.h <557:1 557:45>]
COMMENT: comment [b2Math.h <560:2 560:53>]
COMMENT: comment [b2Math.h <561:2 561:53>]
COMMENT: comment [b2Math.h <562:2 562:26>]
COMMENT: comment [b2Math.h <563:2 563:26>]
COMMENT: comment [b2Math.h <570:1 570:20>]
COMMENT: comment [b2Math.h <576:1 576:28>]
COMMENT: comment [b2Math.h <600:1 600:41>]
COMMENT: comment [b2Math.h <601:1 601:49>]
COMMENT: comment [b2Math.h <610:1 610:38>]
COMMENT: comment [b2Math.h <611:1 611:45>]
COMMENT: comment [b2Math.h <676:1 676:29>]
COMMENT: comment [b2Math.h <677:1 677:100>]
COMMENT: comment [b2Math.h <678:1 678:103>]
COMMENT: comment [b2Math.h <679:1 679:99>]
COMMENT: comment [b2Math.h <680:1 680:45>]
COMMENT: comment [b2Math.h <703:2 703:20>]
COMMENT: comment [b2Math.h <716:1 716:59>]
COMMENT: comment [b2Settings.h <1:1 17:3>]
COMMENT: comment [b2Settings.h <46:1 46:10>]
COMMENT: comment [b2Settings.h <47:1 47:75>]
COMMENT: comment [b2Settings.h <48:1 48:4>]
COMMENT: comment [b2Settings.h <50:1 50:13>]
COMMENT: comment [b2Settings.h <52:1 52:71>]
COMMENT: comment [b2Settings.h <53:1 53:27>]
COMMENT: comment [b2Settings.h <56:1 56:76>]
COMMENT: comment [b2Settings.h <57:1 57:70>]
COMMENT: comment [b2Settings.h <60:1 60:74>]
COMMENT: comment [b2Settings.h <61:1 61:68>]
COMMENT: comment [b2Settings.h <62:1 62:23>]
COMMENT: comment [b2Settings.h <65:1 65:78>]
COMMENT: comment [b2Settings.h <66:1 66:59>]
COMMENT: comment [b2Settings.h <67:1 67:40>]
COMMENT: comment [b2Settings.h <70:1 70:79>]
COMMENT: comment [b2Settings.h <71:1 71:70>]
COMMENT: comment [b2Settings.h <74:1 74:78>]
COMMENT: comment [b2Settings.h <75:1 75:70>]
COMMENT: comment [b2Settings.h <78:1 78:83>]
COMMENT: comment [b2Settings.h <79:1 79:91>]
COMMENT: comment [b2Settings.h <80:1 80:64>]
COMMENT: comment [b2Settings.h <83:1 83:78>]
COMMENT: comment [b2Settings.h <87:1 87:12>]
COMMENT: comment [b2Settings.h <89:1 89:68>]
COMMENT: comment [b2Settings.h <92:1 92:86>]
COMMENT: comment [b2Settings.h <93:1 93:64>]
COMMENT: comment [b2Settings.h <96:1 96:88>]
COMMENT: comment [b2Settings.h <97:1 97:23>]
COMMENT: comment [b2Settings.h <100:1 100:89>]
COMMENT: comment [b2Settings.h <101:1 101:23>]
COMMENT: comment [b2Settings.h <104:1 104:80>]
COMMENT: comment [b2Settings.h <105:1 105:70>]
COMMENT: comment [b2Settings.h <109:1 109:81>]
COMMENT: comment [b2Settings.h <110:1 110:70>]
COMMENT: comment [b2Settings.h <114:1 114:88>]
COMMENT: comment [b2Settings.h <115:1 115:89>]
COMMENT: comment [b2Settings.h <116:1 116:18>]
COMMENT: comment [b2Settings.h <121:1 121:9>]
COMMENT: comment [b2Settings.h <123:1 123:67>]
COMMENT: comment [b2Settings.h <126:1 126:72>]
COMMENT: comment [b2Settings.h <129:1 129:73>]
COMMENT: comment [b2Settings.h <132:1 132:21>]
COMMENT: comment [b2Settings.h <134:1 134:62>]
COMMENT: comment [b2Settings.h <137:1 137:71>]
COMMENT: comment [b2Settings.h <140:1 140:22>]
COMMENT: comment [b2Settings.h <143:1 143:30>]
COMMENT: comment [b2Settings.h <144:1 144:57>]
COMMENT: comment [b2Settings.h <147:16 147:40>]
COMMENT: comment [b2Settings.h <148:16 148:40>]
COMMENT: comment [b2Settings.h <149:19 149:33>]
COMMENT: comment [b2Settings.h <152:1 152:21>]
COMMENT: comment [b2BlockAllocator.h <1:1 17:3>]
COMMENT: comment [b2BlockAllocator.h <32:1 32:63>]
COMMENT: comment [b2BlockAllocator.h <33:1 33:54>]
COMMENT: comment [b2BlockAllocator.h <34:1 34:72>]
COMMENT: comment [b2BlockAllocator.h <41:2 41:88>]
COMMENT: comment [b2BlockAllocator.h <44:2 44:83>]
COMMENT: comment [b2StackAllocator.h <1:1 17:3>]
COMMENT: comment [b2StackAllocator.h <24:40 24:47>]
COMMENT: comment [b2StackAllocator.h <34:1 34:65>]
COMMENT: comment [b2StackAllocator.h <35:1 35:59>]
COMMENT: comment [b2StackAllocator.h <36:1 36:58>]
COMMENT: comment [b2ContactManager.h <1:1 17:3>]
COMMENT: comment [b2ContactManager.h <29:1 29:24>]
COMMENT: comment [b2ContactManager.h <35:2 35:26>]
COMMENT: comment [b2BroadPhase.h <1:1 17:3>]
COMMENT: comment [b2BroadPhase.h <33:1 33:93>]
COMMENT: comment [b2BroadPhase.h <34:1 34:90>]
COMMENT: comment [b2BroadPhase.h <35:1 35:85>]
COMMENT: comment [b2BroadPhase.h <48:2 48:71>]
COMMENT: comment [b2BroadPhase.h <49:2 49:28>]
COMMENT: comment [b2BroadPhase.h <52:2 52:66>]
COMMENT: comment [b2BroadPhase.h <55:2 55:70>]
COMMENT: comment [b2BroadPhase.h <56:2 56:73>]
COMMENT: comment [b2BroadPhase.h <59:2 59:84>]
COMMENT: comment [b2BroadPhase.h <62:2 62:35>]
COMMENT: comment [b2BroadPhase.h <65:2 65:71>]
COMMENT: comment [b2BroadPhase.h <68:2 68:32>]
COMMENT: comment [b2BroadPhase.h <71:2 71:32>]
COMMENT: comment [b2BroadPhase.h <74:2 74:80>]
COMMENT: comment [b2BroadPhase.h <78:2 78:63>]
COMMENT: comment [b2BroadPhase.h <79:2 79:63>]
COMMENT: comment [b2BroadPhase.h <83:2 83:75>]
COMMENT: comment [b2BroadPhase.h <84:2 84:78>]
COMMENT: comment [b2BroadPhase.h <85:2 85:82>]
COMMENT: comment [b2BroadPhase.h <86:2 86:83>]
COMMENT: comment [b2BroadPhase.h <87:2 87:36>]
COMMENT: comment [b2BroadPhase.h <88:2 88:100>]
COMMENT: comment [b2BroadPhase.h <89:2 89:92>]
COMMENT: comment [b2BroadPhase.h <93:2 93:42>]
COMMENT: comment [b2BroadPhase.h <96:2 96:43>]
COMMENT: comment [b2BroadPhase.h <99:2 99:50>]
COMMENT: comment [b2BroadPhase.h <102:2 102:54>]
COMMENT: comment [b2BroadPhase.h <103:2 103:49>]
COMMENT: comment [b2BroadPhase.h <104:2 104:68>]
COMMENT: comment [b2BroadPhase.h <131:1 131:32>]
COMMENT: comment [b2BroadPhase.h <187:2 187:22>]
COMMENT: comment [b2BroadPhase.h <190:2 190:49>]
COMMENT: comment [b2BroadPhase.h <199:3 199:57>]
COMMENT: comment [b2BroadPhase.h <200:3 200:58>]
COMMENT: comment [b2BroadPhase.h <203:3 203:56>]
COMMENT: comment [b2BroadPhase.h <207:2 207:22>]
COMMENT: comment [b2BroadPhase.h <210:2 210:47>]
COMMENT: comment [b2BroadPhase.h <213:2 213:39>]
COMMENT: comment [b2BroadPhase.h <224:3 224:31>]
COMMENT: comment [b2BroadPhase.h <236:2 236:35>]
COMMENT: comment [b2BroadPhase.h <237:2 237:24>]
COMMENT: comment [b2Collision.h <1:1 17:3>]
COMMENT: comment [b2Collision.h <25:1 25:10>]
COMMENT: comment [b2Collision.h <26:1 26:73>]
COMMENT: comment [b2Collision.h <27:1 27:30>]
COMMENT: comment [b2Collision.h <36:1 36:58>]
COMMENT: comment [b2Collision.h <37:1 37:34>]
COMMENT: comment [b2Collision.h <46:17 46:45>]
COMMENT: comment [b2Collision.h <47:17 47:45>]
COMMENT: comment [b2Collision.h <48:16 48:47>]
COMMENT: comment [b2Collision.h <49:16 49:47>]
COMMENT: comment [b2Collision.h <52:1 52:45>]
COMMENT: comment [b2Collision.h <56:18 56:59>]
COMMENT: comment [b2Collision.h <59:1 59:63>]
COMMENT: comment [b2Collision.h <60:1 60:68>]
COMMENT: comment [b2Collision.h <61:1 61:27>]
COMMENT: comment [b2Collision.h <62:1 62:56>]
COMMENT: comment [b2Collision.h <63:1 63:44>]
COMMENT: comment [b2Collision.h <64:1 64:72>]
COMMENT: comment [b2Collision.h <65:1 65:41>]
COMMENT: comment [b2Collision.h <66:1 66:69>]
COMMENT: comment [b2Collision.h <67:1 67:65>]
COMMENT: comment [b2Collision.h <68:1 68:75>]
COMMENT: comment [b2Collision.h <71:22 71:57>]
COMMENT: comment [b2Collision.h <72:25 72:57>]
COMMENT: comment [b2Collision.h <73:26 73:51>]
COMMENT: comment [b2Collision.h <74:20 74:79>]
COMMENT: comment [b2Collision.h <77:1 77:47>]
COMMENT: comment [b2Collision.h <78:1 78:46>]
COMMENT: comment [b2Collision.h <79:1 79:42>]
COMMENT: comment [b2Collision.h <80:1 80:47>]
COMMENT: comment [b2Collision.h <81:1 81:56>]
COMMENT: comment [b2Collision.h <82:1 82:44>]
COMMENT: comment [b2Collision.h <83:1 83:34>]
COMMENT: comment [b2Collision.h <84:1 84:34>]
COMMENT: comment [b2Collision.h <85:1 85:38>]
COMMENT: comment [b2Collision.h <86:1 86:25>]
COMMENT: comment [b2Collision.h <87:1 87:37>]
COMMENT: comment [b2Collision.h <88:1 88:37>]
COMMENT: comment [b2Collision.h <89:1 89:66>]
COMMENT: comment [b2Collision.h <90:1 90:68>]
COMMENT: comment [b2Collision.h <91:1 91:67>]
COMMENT: comment [b2Collision.h <92:1 92:69>]
COMMENT: comment [b2Collision.h <102:48 102:74>]
COMMENT: comment [b2Collision.h <103:29 103:60>]
COMMENT: comment [b2Collision.h <104:28 104:63>]
COMMENT: comment [b2Collision.h <106:27 106:61>]
COMMENT: comment [b2Collision.h <109:1 109:69>]
COMMENT: comment [b2Collision.h <112:2 112:66>]
COMMENT: comment [b2Collision.h <113:2 113:69>]
COMMENT: comment [b2Collision.h <114:2 114:69>]
COMMENT: comment [b2Collision.h <115:2 115:34>]
COMMENT: comment [b2Collision.h <120:24 120:62>]
COMMENT: comment [b2Collision.h <121:40 121:88>]
COMMENT: comment [b2Collision.h <122:45 122:95>]
COMMENT: comment [b2Collision.h <125:1 125:62>]
COMMENT: comment [b2Collision.h <128:17 128:42>]
COMMENT: comment [b2Collision.h <129:16 129:50>]
COMMENT: comment [b2Collision.h <130:19 130:57>]
COMMENT: comment [b2Collision.h <131:18 131:54>]
COMMENT: comment [b2Collision.h <134:1 134:102>]
COMMENT: comment [b2Collision.h <135:1 135:95>]
COMMENT: comment [b2Collision.h <139:1 139:42>]
COMMENT: comment [b2Collision.h <146:1 146:82>]
COMMENT: comment [b2Collision.h <153:1 153:85>]
COMMENT: comment [b2Collision.h <154:1 154:30>]
COMMENT: comment [b2Collision.h <161:1 161:34>]
COMMENT: comment [b2Collision.h <164:2 164:40>]
COMMENT: comment [b2Collision.h <167:2 167:33>]
COMMENT: comment [b2Collision.h <173:2 173:48>]
COMMENT: comment [b2Collision.h <179:2 179:30>]
COMMENT: comment [b2Collision.h <187:2 187:36>]
COMMENT: comment [b2Collision.h <194:2 194:38>]
COMMENT: comment [b2Collision.h <201:2 201:47>]
COMMENT: comment [b2Collision.h <214:21 214:42>]
COMMENT: comment [b2Collision.h <215:21 215:42>]
COMMENT: comment [b2Collision.h <218:1 218:56>]
COMMENT: comment [b2Collision.h <223:1 223:67>]
COMMENT: comment [b2Collision.h <228:1 228:57>]
COMMENT: comment [b2Collision.h <233:1 233:65>]
COMMENT: comment [b2Collision.h <238:1 238:65>]
COMMENT: comment [b2Collision.h <243:1 243:36>]
COMMENT: comment [b2Collision.h <247:1 247:45>]
COMMENT: comment [b2Collision.h <252:1 252:80>]
COMMENT: comment [b2DynamicTree.h <1:1 17:3>]
COMMENT: comment [b2DynamicTree.h <27:1 27:81>]
COMMENT: comment [b2DynamicTree.h <35:2 35:19>]
COMMENT: comment [b2DynamicTree.h <49:2 49:29>]
COMMENT: comment [b2DynamicTree.h <53:1 53:77>]
COMMENT: comment [b2DynamicTree.h <54:1 54:64>]
COMMENT: comment [b2DynamicTree.h <55:1 55:68>]
COMMENT: comment [b2DynamicTree.h <56:1 56:75>]
COMMENT: comment [b2DynamicTree.h <57:1 57:84>]
COMMENT: comment [b2DynamicTree.h <58:1 58:70>]
COMMENT: comment [b2DynamicTree.h <59:1 59:4>]
COMMENT: comment [b2DynamicTree.h <60:1 60:83>]
COMMENT: comment [b2DynamicTree.h <64:2 64:54>]
COMMENT: comment [b2DynamicTree.h <67:2 67:46>]
COMMENT: comment [b2DynamicTree.h <70:2 70:74>]
COMMENT: comment [b2DynamicTree.h <73:2 73:57>]
COMMENT: comment [b2DynamicTree.h <76:2 76:92>]
COMMENT: comment [b2DynamicTree.h <77:2 77:72>]
COMMENT: comment [b2DynamicTree.h <78:2 78:39>]
COMMENT: comment [b2DynamicTree.h <79:2 79:48>]
COMMENT: comment [b2DynamicTree.h <82:2 82:26>]
COMMENT: comment [b2DynamicTree.h <83:2 83:60>]
COMMENT: comment [b2DynamicTree.h <86:2 86:35>]
COMMENT: comment [b2DynamicTree.h <89:2 89:63>]
COMMENT: comment [b2DynamicTree.h <90:2 90:63>]
COMMENT: comment [b2DynamicTree.h <94:2 94:75>]
COMMENT: comment [b2DynamicTree.h <95:2 95:78>]
COMMENT: comment [b2DynamicTree.h <96:2 96:82>]
COMMENT: comment [b2DynamicTree.h <97:2 97:83>]
COMMENT: comment [b2DynamicTree.h <98:2 98:36>]
COMMENT: comment [b2DynamicTree.h <99:2 99:100>]
COMMENT: comment [b2DynamicTree.h <100:2 100:92>]
COMMENT: comment [b2DynamicTree.h <104:2 104:38>]
COMMENT: comment [b2DynamicTree.h <107:2 107:71>]
COMMENT: comment [b2DynamicTree.h <108:2 108:19>]
COMMENT: comment [b2DynamicTree.h <111:2 111:83>]
COMMENT: comment [b2DynamicTree.h <112:2 112:46>]
COMMENT: comment [b2DynamicTree.h <115:2 115:66>]
COMMENT: comment [b2DynamicTree.h <118:2 118:57>]
COMMENT: comment [b2DynamicTree.h <121:2 121:54>]
COMMENT: comment [b2DynamicTree.h <122:2 122:49>]
COMMENT: comment [b2DynamicTree.h <123:2 123:68>]
COMMENT: comment [b2DynamicTree.h <150:2 150:71>]
COMMENT: comment [b2DynamicTree.h <212:2 212:39>]
COMMENT: comment [b2DynamicTree.h <216:2 216:45>]
COMMENT: comment [b2DynamicTree.h <217:2 217:35>]
COMMENT: comment [b2DynamicTree.h <221:2 221:42>]
COMMENT: comment [b2DynamicTree.h <247:3 247:46>]
COMMENT: comment [b2DynamicTree.h <248:3 248:36>]
COMMENT: comment [b2DynamicTree.h <268:5 268:47>]
COMMENT: comment [b2DynamicTree.h <274:5 274:36>]
COMMENT: comment [b2GrowableStack.h <1:1 17:3>]
COMMENT: comment [b2GrowableStack.h <24:1 24:65>]
COMMENT: comment [b2GrowableStack.h <25:1 25:69>]
COMMENT: comment [b2GrowableStack.h <26:1 26:39>]
COMMENT: comment [b2WorldCallbacks.h <1:1 17:3>]
COMMENT: comment [b2WorldCallbacks.h <33:1 33:60>]
COMMENT: comment [b2WorldCallbacks.h <34:1 34:59>]
COMMENT: comment [b2WorldCallbacks.h <35:1 35:55>]
COMMENT: comment [b2WorldCallbacks.h <41:2 41:56>]
COMMENT: comment [b2WorldCallbacks.h <42:2 42:55>]
COMMENT: comment [b2WorldCallbacks.h <45:2 45:58>]
COMMENT: comment [b2WorldCallbacks.h <46:2 46:44>]
COMMENT: comment [b2WorldCallbacks.h <50:1 50:91>]
COMMENT: comment [b2WorldCallbacks.h <51:1 51:64>]
COMMENT: comment [b2WorldCallbacks.h <57:2 57:87>]
COMMENT: comment [b2WorldCallbacks.h <58:2 58:91>]
COMMENT: comment [b2WorldCallbacks.h <62:1 62:80>]
COMMENT: comment [b2WorldCallbacks.h <63:1 63:75>]
COMMENT: comment [b2WorldCallbacks.h <64:1 64:63>]
COMMENT: comment [b2WorldCallbacks.h <72:1 72:83>]
COMMENT: comment [b2WorldCallbacks.h <73:1 73:75>]
COMMENT: comment [b2WorldCallbacks.h <74:1 74:78>]
COMMENT: comment [b2WorldCallbacks.h <75:1 75:68>]
COMMENT: comment [b2WorldCallbacks.h <76:1 76:78>]
COMMENT: comment [b2WorldCallbacks.h <77:1 77:22>]
COMMENT: comment [b2WorldCallbacks.h <78:1 78:76>]
COMMENT: comment [b2WorldCallbacks.h <79:1 79:34>]
COMMENT: comment [b2WorldCallbacks.h <80:1 80:78>]
COMMENT: comment [b2WorldCallbacks.h <86:2 86:46>]
COMMENT: comment [b2WorldCallbacks.h <89:2 89:46>]
COMMENT: comment [b2WorldCallbacks.h <92:2 92:77>]
COMMENT: comment [b2WorldCallbacks.h <93:2 93:82>]
COMMENT: comment [b2WorldCallbacks.h <94:2 94:46>]
COMMENT: comment [b2WorldCallbacks.h <95:2 95:76>]
COMMENT: comment [b2WorldCallbacks.h <96:2 96:49>]
COMMENT: comment [b2WorldCallbacks.h <97:2 97:74>]
COMMENT: comment [b2WorldCallbacks.h <98:2 98:43>]
COMMENT: comment [b2WorldCallbacks.h <99:2 99:73>]
COMMENT: comment [b2WorldCallbacks.h <100:2 100:78>]
COMMENT: comment [b2WorldCallbacks.h <101:2 101:20>]
COMMENT: comment [b2WorldCallbacks.h <108:2 108:82>]
COMMENT: comment [b2WorldCallbacks.h <109:2 109:30>]
COMMENT: comment [b2WorldCallbacks.h <110:2 110:87>]
COMMENT: comment [b2WorldCallbacks.h <111:2 111:90>]
COMMENT: comment [b2WorldCallbacks.h <112:2 112:35>]
COMMENT: comment [b2WorldCallbacks.h <113:2 113:81>]
COMMENT: comment [b2WorldCallbacks.h <121:1 121:37>]
COMMENT: comment [b2WorldCallbacks.h <122:1 122:23>]
COMMENT: comment [b2WorldCallbacks.h <128:2 128:54>]
COMMENT: comment [b2WorldCallbacks.h <129:2 129:43>]
COMMENT: comment [b2WorldCallbacks.h <133:1 133:34>]
COMMENT: comment [b2WorldCallbacks.h <134:1 134:25>]
COMMENT: comment [b2WorldCallbacks.h <140:2 140:78>]
COMMENT: comment [b2WorldCallbacks.h <141:2 141:36>]
COMMENT: comment [b2WorldCallbacks.h <142:2 142:49>]
COMMENT: comment [b2WorldCallbacks.h <143:2 143:38>]
COMMENT: comment [b2WorldCallbacks.h <144:2 144:49>]
COMMENT: comment [b2WorldCallbacks.h <145:2 145:47>]
COMMENT: comment [b2WorldCallbacks.h <146:2 146:47>]
COMMENT: comment [b2WorldCallbacks.h <147:2 147:52>]
COMMENT: comment [b2WorldCallbacks.h <148:2 148:66>]
COMMENT: comment [b2WorldCallbacks.h <149:2 149:72>]
COMMENT: comment [b2WorldCallbacks.h <150:2 150:32>]
COMMENT: comment [b2TimeStep.h <1:1 17:3>]
COMMENT: comment [b2TimeStep.h <24:1 24:47>]
COMMENT: comment [b2TimeStep.h <37:1 37:35>]
COMMENT: comment [b2TimeStep.h <40:16 40:28>]
COMMENT: comment [b2TimeStep.h <41:19 41:55>]
COMMENT: comment [b2TimeStep.h <42:19 42:34>]
COMMENT: comment [b2TimeStep.h <48:1 48:35>]
COMMENT: comment [b2TimeStep.h <55:1 55:35>]
COMMENT: comment [b2TimeStep.h <62:1 62:16>]
COMMENT: comment [b2Body.h <1:1 17:3>]
COMMENT: comment [b2Body.h <35:1 35:19>]
COMMENT: comment [b2Body.h <36:1 36:60>]
COMMENT: comment [b2Body.h <37:1 37:73>]
COMMENT: comment [b2Body.h <38:1 38:84>]
COMMENT: comment [b2Body.h <45:2 45:14>]
COMMENT: comment [b2Body.h <46:2 46:18>]
COMMENT: comment [b2Body.h <49:1 49:75>]
COMMENT: comment [b2Body.h <50:1 50:91>]
COMMENT: comment [b2Body.h <53:2 53:63>]
COMMENT: comment [b2Body.h <72:2 72:51>]
COMMENT: comment [b2Body.h <73:2 73:75>]
COMMENT: comment [b2Body.h <76:2 76:73>]
COMMENT: comment [b2Body.h <77:2 77:53>]
COMMENT: comment [b2Body.h <80:2 80:45>]
COMMENT: comment [b2Body.h <83:2 83:69>]
COMMENT: comment [b2Body.h <86:2 86:39>]
COMMENT: comment [b2Body.h <89:2 89:80>]
COMMENT: comment [b2Body.h <90:2 90:77>]
COMMENT: comment [b2Body.h <91:2 91:52>]
COMMENT: comment [b2Body.h <92:2 92:22>]
COMMENT: comment [b2Body.h <95:2 95:82>]
COMMENT: comment [b2Body.h <96:2 96:77>]
COMMENT: comment [b2Body.h <97:2 97:52>]
COMMENT: comment [b2Body.h <98:2 98:22>]
COMMENT: comment [b2Body.h <101:2 101:77>]
COMMENT: comment [b2Body.h <102:2 102:31>]
COMMENT: comment [b2Body.h <105:2 105:47>]
COMMENT: comment [b2Body.h <108:2 108:73>]
COMMENT: comment [b2Body.h <111:2 111:80>]
COMMENT: comment [b2Body.h <112:2 112:84>]
COMMENT: comment [b2Body.h <113:2 113:85>]
COMMENT: comment [b2Body.h <114:2 114:85>]
COMMENT: comment [b2Body.h <117:2 117:38>]
COMMENT: comment [b2Body.h <120:2 120:55>]
COMMENT: comment [b2Body.h <123:2 123:45>]
COMMENT: comment [b2Body.h <127:1 127:61>]
COMMENT: comment [b2Body.h <131:2 131:81>]
COMMENT: comment [b2Body.h <132:2 132:81>]
COMMENT: comment [b2Body.h <133:2 133:36>]
COMMENT: comment [b2Body.h <134:2 134:91>]
COMMENT: comment [b2Body.h <135:2 135:56>]
COMMENT: comment [b2Body.h <136:2 136:40>]
COMMENT: comment [b2Body.h <137:2 137:56>]
COMMENT: comment [b2Body.h <140:2 140:64>]
COMMENT: comment [b2Body.h <141:2 141:84>]
COMMENT: comment [b2Body.h <142:2 142:58>]
COMMENT: comment [b2Body.h <143:2 143:91>]
COMMENT: comment [b2Body.h <144:2 144:42>]
COMMENT: comment [b2Body.h <145:2 145:71>]
COMMENT: comment [b2Body.h <146:2 146:56>]
COMMENT: comment [b2Body.h <149:2 149:74>]
COMMENT: comment [b2Body.h <150:2 150:67>]
COMMENT: comment [b2Body.h <151:2 151:78>]
COMMENT: comment [b2Body.h <152:2 152:35>]
COMMENT: comment [b2Body.h <153:2 153:90>]
COMMENT: comment [b2Body.h <154:2 154:47>]
COMMENT: comment [b2Body.h <155:2 155:56>]
COMMENT: comment [b2Body.h <158:2 158:57>]
COMMENT: comment [b2Body.h <159:2 159:70>]
COMMENT: comment [b2Body.h <160:2 160:67>]
COMMENT: comment [b2Body.h <161:2 161:68>]
COMMENT: comment [b2Body.h <162:2 162:49>]
COMMENT: comment [b2Body.h <165:2 165:51>]
COMMENT: comment [b2Body.h <166:2 166:55>]
COMMENT: comment [b2Body.h <169:2 169:41>]
COMMENT: comment [b2Body.h <170:2 170:54>]
COMMENT: comment [b2Body.h <173:2 173:31>]
COMMENT: comment [b2Body.h <174:2 174:58>]
COMMENT: comment [b2Body.h <177:2 177:51>]
COMMENT: comment [b2Body.h <180:2 180:51>]
COMMENT: comment [b2Body.h <183:2 183:52>]
COMMENT: comment [b2Body.h <184:2 184:61>]
COMMENT: comment [b2Body.h <187:2 187:52>]
COMMENT: comment [b2Body.h <188:2 188:56>]
COMMENT: comment [b2Body.h <191:2 191:31>]
COMMENT: comment [b2Body.h <192:2 192:62>]
COMMENT: comment [b2Body.h <195:2 195:31>]
COMMENT: comment [b2Body.h <196:2 196:53>]
COMMENT: comment [b2Body.h <199:2 199:57>]
COMMENT: comment [b2Body.h <200:2 200:66>]
COMMENT: comment [b2Body.h <201:2 201:58>]
COMMENT: comment [b2Body.h <202:2 202:66>]
COMMENT: comment [b2Body.h <203:2 203:66>]
COMMENT: comment [b2Body.h <204:2 204:39>]
COMMENT: comment [b2Body.h <207:2 207:66>]
COMMENT: comment [b2Body.h <208:2 208:66>]
COMMENT: comment [b2Body.h <209:2 209:39>]
COMMENT: comment [b2Body.h <212:2 212:55>]
COMMENT: comment [b2Body.h <213:2 213:66>]
COMMENT: comment [b2Body.h <214:2 214:73>]
COMMENT: comment [b2Body.h <215:2 215:39>]
COMMENT: comment [b2Body.h <218:2 218:74>]
COMMENT: comment [b2Body.h <219:2 219:71>]
COMMENT: comment [b2Body.h <220:2 220:59>]
COMMENT: comment [b2Body.h <221:2 221:78>]
COMMENT: comment [b2Body.h <222:2 222:66>]
COMMENT: comment [b2Body.h <223:2 223:39>]
COMMENT: comment [b2Body.h <226:2 226:85>]
COMMENT: comment [b2Body.h <227:2 227:78>]
COMMENT: comment [b2Body.h <228:2 228:39>]
COMMENT: comment [b2Body.h <231:2 231:31>]
COMMENT: comment [b2Body.h <232:2 232:61>]
COMMENT: comment [b2Body.h <233:2 233:39>]
COMMENT: comment [b2Body.h <236:2 236:37>]
COMMENT: comment [b2Body.h <237:2 237:50>]
COMMENT: comment [b2Body.h <240:2 240:68>]
COMMENT: comment [b2Body.h <241:2 241:56>]
COMMENT: comment [b2Body.h <244:2 244:36>]
COMMENT: comment [b2Body.h <245:2 245:75>]
COMMENT: comment [b2Body.h <248:2 248:78>]
COMMENT: comment [b2Body.h <249:2 249:57>]
COMMENT: comment [b2Body.h <250:2 250:72>]
COMMENT: comment [b2Body.h <251:2 251:60>]
COMMENT: comment [b2Body.h <252:2 252:42>]
COMMENT: comment [b2Body.h <255:2 255:88>]
COMMENT: comment [b2Body.h <256:2 256:88>]
COMMENT: comment [b2Body.h <257:2 257:52>]
COMMENT: comment [b2Body.h <260:2 260:71>]
COMMENT: comment [b2Body.h <261:2 261:84>]
COMMENT: comment [b2Body.h <262:2 262:60>]
COMMENT: comment [b2Body.h <265:2 265:72>]
COMMENT: comment [b2Body.h <266:2 266:52>]
COMMENT: comment [b2Body.h <267:2 267:61>]
COMMENT: comment [b2Body.h <270:2 270:75>]
COMMENT: comment [b2Body.h <271:2 271:42>]
COMMENT: comment [b2Body.h <272:2 272:74>]
COMMENT: comment [b2Body.h <275:2 275:47>]
COMMENT: comment [b2Body.h <276:2 276:43>]
COMMENT: comment [b2Body.h <277:2 277:45>]
COMMENT: comment [b2Body.h <280:2 280:75>]
COMMENT: comment [b2Body.h <281:2 281:42>]
COMMENT: comment [b2Body.h <282:2 282:44>]
COMMENT: comment [b2Body.h <285:2 285:46>]
COMMENT: comment [b2Body.h <286:2 286:42>]
COMMENT: comment [b2Body.h <287:2 287:44>]
COMMENT: comment [b2Body.h <290:2 290:41>]
COMMENT: comment [b2Body.h <293:2 293:41>]
COMMENT: comment [b2Body.h <296:2 296:42>]
COMMENT: comment [b2Body.h <299:2 299:42>]
COMMENT: comment [b2Body.h <302:2 302:40>]
COMMENT: comment [b2Body.h <305:2 305:40>]
COMMENT: comment [b2Body.h <308:2 308:70>]
COMMENT: comment [b2Body.h <311:2 311:32>]
COMMENT: comment [b2Body.h <314:2 314:83>]
COMMENT: comment [b2Body.h <317:2 317:76>]
COMMENT: comment [b2Body.h <320:2 320:73>]
COMMENT: comment [b2Body.h <321:2 321:25>]
COMMENT: comment [b2Body.h <324:2 324:35>]
COMMENT: comment [b2Body.h <327:2 327:63>]
COMMENT: comment [b2Body.h <328:2 328:19>]
COMMENT: comment [b2Body.h <329:2 329:73>]
COMMENT: comment [b2Body.h <332:2 332:42>]
COMMENT: comment [b2Body.h <333:2 333:40>]
COMMENT: comment [b2Body.h <336:2 336:63>]
COMMENT: comment [b2Body.h <337:2 337:56>]
COMMENT: comment [b2Body.h <338:2 338:67>]
COMMENT: comment [b2Body.h <339:2 339:18>]
COMMENT: comment [b2Body.h <340:2 340:68>]
COMMENT: comment [b2Body.h <341:2 341:57>]
COMMENT: comment [b2Body.h <342:2 342:68>]
COMMENT: comment [b2Body.h <343:2 343:63>]
COMMENT: comment [b2Body.h <344:2 344:67>]
COMMENT: comment [b2Body.h <345:2 345:59>]
COMMENT: comment [b2Body.h <346:2 346:67>]
COMMENT: comment [b2Body.h <347:2 347:69>]
COMMENT: comment [b2Body.h <348:2 348:23>]
COMMENT: comment [b2Body.h <351:2 351:39>]
COMMENT: comment [b2Body.h <354:2 354:64>]
COMMENT: comment [b2Body.h <355:2 355:18>]
COMMENT: comment [b2Body.h <358:2 358:41>]
COMMENT: comment [b2Body.h <361:2 361:57>]
COMMENT: comment [b2Body.h <365:2 365:55>]
COMMENT: comment [b2Body.h <369:2 369:57>]
COMMENT: comment [b2Body.h <370:2 370:65>]
COMMENT: comment [b2Body.h <371:2 371:62>]
COMMENT: comment [b2Body.h <375:2 375:49>]
COMMENT: comment [b2Body.h <379:2 379:73>]
COMMENT: comment [b2Body.h <382:2 382:74>]
COMMENT: comment [b2Body.h <385:2 385:40>]
COMMENT: comment [b2Body.h <389:2 389:34>]
COMMENT: comment [b2Body.h <412:2 412:12>]
COMMENT: comment [b2Body.h <430:2 430:61>]
COMMENT: comment [b2Body.h <431:2 431:56>]
COMMENT: comment [b2Body.h <442:21 442:49>]
COMMENT: comment [b2Body.h <443:20 443:47>]
COMMENT: comment [b2Body.h <463:2 463:49>]
COMMENT: comment [b2Body.h <752:2 752:54>]
COMMENT: comment [b2Body.h <772:2 772:53>]
COMMENT: comment [b2Body.h <791:2 791:53>]
COMMENT: comment [b2Body.h <810:2 810:54>]
COMMENT: comment [b2Body.h <830:2 830:54>]
COMMENT: comment [b2Body.h <849:2 849:54>]
COMMENT: comment [b2Body.h <864:2 864:69>]
COMMENT: comment [b2Shape.h <1:1 17:3>]
COMMENT: comment [b2Shape.h <26:1 26:51>]
COMMENT: comment [b2Shape.h <29:2 29:50>]
COMMENT: comment [b2Shape.h <32:2 32:74>]
COMMENT: comment [b2Shape.h <35:2 35:65>]
COMMENT: comment [b2Shape.h <39:1 39:86>]
COMMENT: comment [b2Shape.h <40:1 40:85>]
COMMENT: comment [b2Shape.h <41:1 41:67>]
COMMENT: comment [b2Shape.h <57:2 57:60>]
COMMENT: comment [b2Shape.h <60:2 60:86>]
COMMENT: comment [b2Shape.h <61:2 61:29>]
COMMENT: comment [b2Shape.h <64:2 64:41>]
COMMENT: comment [b2Shape.h <67:2 67:84>]
COMMENT: comment [b2Shape.h <68:2 68:42>]
COMMENT: comment [b2Shape.h <69:2 69:44>]
COMMENT: comment [b2Shape.h <72:2 72:39>]
COMMENT: comment [b2Shape.h <73:2 73:41>]
COMMENT: comment [b2Shape.h <74:2 74:49>]
COMMENT: comment [b2Shape.h <75:2 75:64>]
COMMENT: comment [b2Shape.h <76:2 76:45>]
COMMENT: comment [b2Shape.h <80:2 80:92>]
COMMENT: comment [b2Shape.h <81:2 81:47>]
COMMENT: comment [b2Shape.h <82:2 82:49>]
COMMENT: comment [b2Shape.h <83:2 83:39>]
COMMENT: comment [b2Shape.h <86:2 86:81>]
COMMENT: comment [b2Shape.h <87:2 87:60>]
COMMENT: comment [b2Shape.h <88:2 88:59>]
COMMENT: comment [b2Shape.h <89:2 89:64>]
COMMENT: comment [b2Shape.h <94:2 94:100>]
COMMENT: comment [b2Shape.h <95:2 95:30>]
COMMENT: comment [b2Fixture.h <1:1 17:3>]
COMMENT: comment [b2Fixture.h <31:1 31:39>]
COMMENT: comment [b2Fixture.h <41:2 41:71>]
COMMENT: comment [b2Fixture.h <44:2 44:67>]
COMMENT: comment [b2Fixture.h <45:2 45:39>]
COMMENT: comment [b2Fixture.h <48:2 48:83>]
COMMENT: comment [b2Fixture.h <49:2 49:81>]
COMMENT: comment [b2Fixture.h <50:2 50:50>]
COMMENT: comment [b2Fixture.h <54:1 54:76>]
COMMENT: comment [b2Fixture.h <55:1 55:75>]
COMMENT: comment [b2Fixture.h <58:2 58:65>]
COMMENT: comment [b2Fixture.h <69:2 69:67>]
COMMENT: comment [b2Fixture.h <70:2 70:40>]
COMMENT: comment [b2Fixture.h <73:2 73:58>]
COMMENT: comment [b2Fixture.h <76:2 76:59>]
COMMENT: comment [b2Fixture.h <79:2 79:62>]
COMMENT: comment [b2Fixture.h <82:2 82:37>]
COMMENT: comment [b2Fixture.h <85:2 85:81>]
COMMENT: comment [b2Fixture.h <86:2 86:15>]
COMMENT: comment [b2Fixture.h <89:2 89:29>]
COMMENT: comment [b2Fixture.h <93:1 93:74>]
COMMENT: comment [b2Fixture.h <102:1 102:85>]
COMMENT: comment [b2Fixture.h <103:1 103:88>]
COMMENT: comment [b2Fixture.h <104:1 104:46>]
COMMENT: comment [b2Fixture.h <105:1 105:52>]
COMMENT: comment [b2Fixture.h <106:1 106:40>]
COMMENT: comment [b2Fixture.h <110:2 110:91>]
COMMENT: comment [b2Fixture.h <111:2 111:29>]
COMMENT: comment [b2Fixture.h <114:2 114:92>]
COMMENT: comment [b2Fixture.h <115:2 115:83>]
COMMENT: comment [b2Fixture.h <116:2 116:63>]
COMMENT: comment [b2Fixture.h <120:2 120:38>]
COMMENT: comment [b2Fixture.h <123:2 123:43>]
COMMENT: comment [b2Fixture.h <124:2 124:48>]
COMMENT: comment [b2Fixture.h <127:2 127:87>]
COMMENT: comment [b2Fixture.h <128:2 128:55>]
COMMENT: comment [b2Fixture.h <129:2 129:40>]
COMMENT: comment [b2Fixture.h <132:2 132:37>]
COMMENT: comment [b2Fixture.h <135:2 135:114>]
COMMENT: comment [b2Fixture.h <138:2 138:90>]
COMMENT: comment [b2Fixture.h <139:2 139:30>]
COMMENT: comment [b2Fixture.h <143:2 143:61>]
COMMENT: comment [b2Fixture.h <144:2 144:29>]
COMMENT: comment [b2Fixture.h <148:2 148:80>]
COMMENT: comment [b2Fixture.h <149:2 149:43>]
COMMENT: comment [b2Fixture.h <152:2 152:74>]
COMMENT: comment [b2Fixture.h <155:2 155:51>]
COMMENT: comment [b2Fixture.h <156:2 156:44>]
COMMENT: comment [b2Fixture.h <159:2 159:36>]
COMMENT: comment [b2Fixture.h <160:2 160:41>]
COMMENT: comment [b2Fixture.h <161:2 161:49>]
COMMENT: comment [b2Fixture.h <164:2 164:83>]
COMMENT: comment [b2Fixture.h <165:2 165:83>]
COMMENT: comment [b2Fixture.h <166:2 166:23>]
COMMENT: comment [b2Fixture.h <169:2 169:84>]
COMMENT: comment [b2Fixture.h <170:2 170:81>]
COMMENT: comment [b2Fixture.h <173:2 173:38>]
COMMENT: comment [b2Fixture.h <176:2 176:38>]
COMMENT: comment [b2Fixture.h <179:2 179:77>]
COMMENT: comment [b2Fixture.h <180:2 180:24>]
COMMENT: comment [b2Fixture.h <183:2 183:41>]
COMMENT: comment [b2Fixture.h <186:2 186:83>]
COMMENT: comment [b2Fixture.h <187:2 187:24>]
COMMENT: comment [b2Fixture.h <190:2 190:68>]
COMMENT: comment [b2Fixture.h <191:2 191:70>]
COMMENT: comment [b2Fixture.h <192:2 192:25>]
COMMENT: comment [b2Fixture.h <195:2 195:40>]
COMMENT: comment [b2Fixture.h <207:2 207:88>]
COMMENT: comment [b2Fixture.h <208:2 208:89>]
COMMENT: comment [b2Fixture.h <212:2 212:48>]
COMMENT: comment [b2Island.h <1:1 17:3>]
COMMENT: comment [b2Island.h <33:1 33:31>]
COMMENT: comment [b2PulleyJoint.h <1:1 17:3>]
COMMENT: comment [b2PulleyJoint.h <26:1 26:63>]
COMMENT: comment [b2PulleyJoint.h <27:1 27:56>]
COMMENT: comment [b2PulleyJoint.h <43:2 43:94>]
COMMENT: comment [b2PulleyJoint.h <49:2 49:75>]
COMMENT: comment [b2PulleyJoint.h <52:2 52:76>]
COMMENT: comment [b2PulleyJoint.h <55:2 55:56>]
COMMENT: comment [b2PulleyJoint.h <58:2 58:56>]
COMMENT: comment [b2PulleyJoint.h <61:2 61:63>]
COMMENT: comment [b2PulleyJoint.h <64:2 64:63>]
COMMENT: comment [b2PulleyJoint.h <67:2 67:60>]
COMMENT: comment [b2PulleyJoint.h <71:1 71:77>]
COMMENT: comment [b2PulleyJoint.h <72:1 72:43>]
COMMENT: comment [b2PulleyJoint.h <73:1 73:42>]
COMMENT: comment [b2PulleyJoint.h <74:1 74:55>]
COMMENT: comment [b2PulleyJoint.h <75:1 75:77>]
COMMENT: comment [b2PulleyJoint.h <76:1 76:79>]
COMMENT: comment [b2PulleyJoint.h <77:1 77:75>]
COMMENT: comment [b2PulleyJoint.h <78:1 78:17>]
COMMENT: comment [b2PulleyJoint.h <88:2 88:34>]
COMMENT: comment [b2PulleyJoint.h <91:2 91:35>]
COMMENT: comment [b2PulleyJoint.h <94:2 94:62>]
COMMENT: comment [b2PulleyJoint.h <97:2 97:62>]
COMMENT: comment [b2PulleyJoint.h <100:2 100:27>]
COMMENT: comment [b2PulleyJoint.h <103:2 103:62>]
COMMENT: comment [b2PulleyJoint.h <106:2 106:62>]
COMMENT: comment [b2PulleyJoint.h <109:2 109:25>]
COMMENT: comment [b2PulleyJoint.h <112:2 112:36>]
COMMENT: comment [b2PulleyJoint.h <129:2 129:18>]
COMMENT: comment [b2PulleyJoint.h <136:2 136:16>]
COMMENT: comment [b2Joint.h <1:1 17:3>]
COMMENT: comment [b2Joint.h <60:1 60:63>]
COMMENT: comment [b2Joint.h <61:1 61:62>]
COMMENT: comment [b2Joint.h <62:1 62:61>]
COMMENT: comment [b2Joint.h <63:1 63:63>]
COMMENT: comment [b2Joint.h <64:1 64:39>]
COMMENT: comment [b2Joint.h <67:19 67:73>]
COMMENT: comment [b2Joint.h <68:20 68:34>]
COMMENT: comment [b2Joint.h <69:22 69:75>]
COMMENT: comment [b2Joint.h <70:22 70:71>]
COMMENT: comment [b2Joint.h <73:1 73:52>]
COMMENT: comment [b2Joint.h <85:2 85:67>]
COMMENT: comment [b2Joint.h <88:2 88:66>]
COMMENT: comment [b2Joint.h <91:2 91:30>]
COMMENT: comment [b2Joint.h <94:2 94:31>]
COMMENT: comment [b2Joint.h <97:2 97:66>]
COMMENT: comment [b2Joint.h <101:1 101:79>]
COMMENT: comment [b2Joint.h <102:1 102:66>]
COMMENT: comment [b2Joint.h <107:2 107:41>]
COMMENT: comment [b2Joint.h <110:2 110:48>]
COMMENT: comment [b2Joint.h <113:2 113:49>]
COMMENT: comment [b2Joint.h <116:2 116:57>]
COMMENT: comment [b2Joint.h <119:2 119:57>]
COMMENT: comment [b2Joint.h <122:2 122:69>]
COMMENT: comment [b2Joint.h <125:2 125:46>]
COMMENT: comment [b2Joint.h <128:2 128:46>]
COMMENT: comment [b2Joint.h <132:2 132:32>]
COMMENT: comment [b2Joint.h <135:2 135:32>]
COMMENT: comment [b2Joint.h <138:2 138:65>]
COMMENT: comment [b2Joint.h <141:2 141:28>]
COMMENT: comment [b2Joint.h <142:2 142:75>]
COMMENT: comment [b2Joint.h <143:2 143:67>]
COMMENT: comment [b2Joint.h <146:2 146:38>]
COMMENT: comment [b2Joint.h <149:2 149:66>]
COMMENT: comment [b2Joint.h <167:2 167:67>]
COMMENT: comment [b2Contact.h <1:1 17:3>]
COMMENT: comment [b2Contact.h <35:1 35:92>]
COMMENT: comment [b2Contact.h <36:1 36:41>]
COMMENT: comment [b2Contact.h <42:1 42:95>]
COMMENT: comment [b2Contact.h <43:1 43:50>]
COMMENT: comment [b2Contact.h <61:1 61:67>]
COMMENT: comment [b2Contact.h <62:1 62:66>]
COMMENT: comment [b2Contact.h <63:1 63:63>]
COMMENT: comment [b2Contact.h <64:1 64:67>]
COMMENT: comment [b2Contact.h <65:1 65:39>]
COMMENT: comment [b2Contact.h <68:19 68:73>]
COMMENT: comment [b2Contact.h <69:23 69:39>]
COMMENT: comment [b2Contact.h <70:23 70:80>]
COMMENT: comment [b2Contact.h <71:23 71:76>]
COMMENT: comment [b2Contact.h <74:1 74:88>]
COMMENT: comment [b2Contact.h <75:1 75:87>]
COMMENT: comment [b2Contact.h <76:1 76:32>]
COMMENT: comment [b2Contact.h <81:2 81:84>]
COMMENT: comment [b2Contact.h <82:2 82:25>]
COMMENT: comment [b2Contact.h <86:2 86:29>]
COMMENT: comment [b2Contact.h <89:2 89:31>]
COMMENT: comment [b2Contact.h <92:2 92:72>]
COMMENT: comment [b2Contact.h <93:2 93:68>]
COMMENT: comment [b2Contact.h <94:2 94:55>]
COMMENT: comment [b2Contact.h <97:2 97:37>]
COMMENT: comment [b2Contact.h <100:2 100:55>]
COMMENT: comment [b2Contact.h <104:2 104:36>]
COMMENT: comment [b2Contact.h <108:2 108:50>]
COMMENT: comment [b2Contact.h <111:2 111:36>]
COMMENT: comment [b2Contact.h <115:2 115:50>]
COMMENT: comment [b2Contact.h <118:2 118:94>]
COMMENT: comment [b2Contact.h <119:2 119:45>]
COMMENT: comment [b2Contact.h <122:2 122:23>]
COMMENT: comment [b2Contact.h <125:2 125:54>]
COMMENT: comment [b2Contact.h <128:2 128:97>]
COMMENT: comment [b2Contact.h <129:2 129:48>]
COMMENT: comment [b2Contact.h <132:2 132:26>]
COMMENT: comment [b2Contact.h <135:2 135:49>]
COMMENT: comment [b2Contact.h <138:2 138:87>]
COMMENT: comment [b2Contact.h <141:2 141:58>]
COMMENT: comment [b2Contact.h <144:2 144:66>]
COMMENT: comment [b2Contact.h <154:2 154:28>]
COMMENT: comment [b2Contact.h <157:3 157:60>]
COMMENT: comment [b2Contact.h <160:3 160:39>]
COMMENT: comment [b2Contact.h <163:3 163:44>]
COMMENT: comment [b2Contact.h <166:3 166:72>]
COMMENT: comment [b2Contact.h <169:3 169:41>]
COMMENT: comment [b2Contact.h <172:3 172:43>]
COMMENT: comment [b2Contact.h <176:2 176:79>]
COMMENT: comment [b2Contact.h <197:2 197:34>]
COMMENT: comment [b2Contact.h <201:2 201:33>]
COMMENT: comment [b2ContactSolver.h <1:1 17:3>]
COMMENT: comment [b2CircleShape.h <1:1 17:3>]
COMMENT: comment [b2CircleShape.h <24:1 24:20>]
COMMENT: comment [b2CircleShape.h <30:2 30:24>]
COMMENT: comment [b2CircleShape.h <33:2 33:33>]
COMMENT: comment [b2CircleShape.h <36:2 36:24>]
COMMENT: comment [b2CircleShape.h <39:2 39:24>]
COMMENT: comment [b2CircleShape.h <43:2 43:31>]
COMMENT: comment [b2CircleShape.h <46:2 46:31>]
COMMENT: comment [b2CircleShape.h <49:2 49:14>]
COMMENT: comment [b2EdgeShape.h <1:1 17:3>]
COMMENT: comment [b2EdgeShape.h <24:1 24:75>]
COMMENT: comment [b2EdgeShape.h <25:1 25:73>]
COMMENT: comment [b2EdgeShape.h <26:1 26:29>]
COMMENT: comment [b2EdgeShape.h <32:2 32:35>]
COMMENT: comment [b2EdgeShape.h <35:2 35:24>]
COMMENT: comment [b2EdgeShape.h <38:2 38:33>]
COMMENT: comment [b2EdgeShape.h <41:2 41:29>]
COMMENT: comment [b2EdgeShape.h <44:2 44:24>]
COMMENT: comment [b2EdgeShape.h <48:2 48:31>]
COMMENT: comment [b2EdgeShape.h <51:2 51:31>]
COMMENT: comment [b2EdgeShape.h <54:2 54:33>]
COMMENT: comment [b2EdgeShape.h <57:2 57:70>]
COMMENT: comment [b2ChainShape.h <1:1 17:3>]
COMMENT: comment [b2ChainShape.h <26:1 26:60>]
COMMENT: comment [b2ChainShape.h <27:1 27:84>]
COMMENT: comment [b2ChainShape.h <28:1 28:46>]
COMMENT: comment [b2ChainShape.h <29:1 29:72>]
COMMENT: comment [b2ChainShape.h <30:1 30:66>]
COMMENT: comment [b2ChainShape.h <31:1 31:82>]
COMMENT: comment [b2ChainShape.h <37:2 37:53>]
COMMENT: comment [b2ChainShape.h <40:2 40:21>]
COMMENT: comment [b2ChainShape.h <43:2 43:61>]
COMMENT: comment [b2ChainShape.h <44:2 44:60>]
COMMENT: comment [b2ChainShape.h <45:2 45:35>]
COMMENT: comment [b2ChainShape.h <48:2 48:48>]
COMMENT: comment [b2ChainShape.h <49:2 49:60>]
COMMENT: comment [b2ChainShape.h <50:2 50:35>]
COMMENT: comment [b2ChainShape.h <53:2 53:72>]
COMMENT: comment [b2ChainShape.h <54:2 54:32>]
COMMENT: comment [b2ChainShape.h <57:2 57:70>]
COMMENT: comment [b2ChainShape.h <58:2 58:32>]
COMMENT: comment [b2ChainShape.h <61:2 61:59>]
COMMENT: comment [b2ChainShape.h <64:2 64:33>]
COMMENT: comment [b2ChainShape.h <67:2 67:23>]
COMMENT: comment [b2ChainShape.h <70:2 70:31>]
COMMENT: comment [b2ChainShape.h <71:2 71:29>]
COMMENT: comment [b2ChainShape.h <74:2 74:24>]
COMMENT: comment [b2ChainShape.h <78:2 78:31>]
COMMENT: comment [b2ChainShape.h <81:2 81:28>]
COMMENT: comment [b2ChainShape.h <82:2 82:31>]
COMMENT: comment [b2ChainShape.h <85:2 85:40>]
COMMENT: comment [b2ChainShape.h <88:2 88:23>]
COMMENT: comment [b2PolygonShape.h <1:1 17:3>]
COMMENT: comment [b2PolygonShape.h <24:1 24:75>]
COMMENT: comment [b2PolygonShape.h <25:1 25:27>]
COMMENT: comment [b2PolygonShape.h <26:1 26:79>]
COMMENT: comment [b2PolygonShape.h <27:1 27:74>]
COMMENT: comment [b2PolygonShape.h <33:2 33:24>]
COMMENT: comment [b2PolygonShape.h <36:2 36:33>]
COMMENT: comment [b2PolygonShape.h <39:2 39:64>]
COMMENT: comment [b2PolygonShape.h <40:2 40:64>]
COMMENT: comment [b2PolygonShape.h <41:2 41:79>]
COMMENT: comment [b2PolygonShape.h <42:2 42:77>]
COMMENT: comment [b2PolygonShape.h <43:2 43:41>]
COMMENT: comment [b2PolygonShape.h <46:2 46:83>]
COMMENT: comment [b2PolygonShape.h <47:2 47:31>]
COMMENT: comment [b2PolygonShape.h <48:2 48:32>]
COMMENT: comment [b2PolygonShape.h <51:2 51:50>]
COMMENT: comment [b2PolygonShape.h <52:2 52:31>]
COMMENT: comment [b2PolygonShape.h <53:2 53:32>]
COMMENT: comment [b2PolygonShape.h <54:2 54:63>]
COMMENT: comment [b2PolygonShape.h <55:2 55:64>]
COMMENT: comment [b2PolygonShape.h <58:2 58:29>]
COMMENT: comment [b2PolygonShape.h <61:2 61:24>]
COMMENT: comment [b2PolygonShape.h <65:2 65:31>]
COMMENT: comment [b2PolygonShape.h <68:2 68:31>]
COMMENT: comment [b2PolygonShape.h <71:2 71:66>]
COMMENT: comment [b2PolygonShape.h <72:2 72:28>]
COMMENT: comment [b2TimeOfImpact.h <1:1 17:3>]
COMMENT: comment [b2TimeOfImpact.h <25:1 25:40>]
COMMENT: comment [b2TimeOfImpact.h <32:17 32:52>]
COMMENT: comment [b2TimeOfImpact.h <35:1 35:41>]
COMMENT: comment [b2TimeOfImpact.h <51:1 51:88>]
COMMENT: comment [b2TimeOfImpact.h <52:1 52:99>]
COMMENT: comment [b2TimeOfImpact.h <53:1 53:92>]
COMMENT: comment [b2TimeOfImpact.h <54:1 54:11>]
COMMENT: comment [b2TimeOfImpact.h <55:1 55:88>]
COMMENT: comment [b2Distance.h <2:1 18:3>]
COMMENT: comment [b2Distance.h <27:1 27:51>]
COMMENT: comment [b2Distance.h <28:1 28:31>]
COMMENT: comment [b2Distance.h <33:2 33:59>]
COMMENT: comment [b2Distance.h <34:2 34:53>]
COMMENT: comment [b2Distance.h <37:2 37:61>]
COMMENT: comment [b2Distance.h <40:2 40:55>]
COMMENT: comment [b2Distance.h <43:2 43:27>]
COMMENT: comment [b2Distance.h <46:2 46:48>]
COMMENT: comment [b2Distance.h <55:1 55:35>]
COMMENT: comment [b2Distance.h <56:1 56:37>]
COMMENT: comment [b2Distance.h <59:19 59:38>]
COMMENT: comment [b2Distance.h <61:19 61:43>]
COMMENT: comment [b2Distance.h <62:19 62:43>]
COMMENT: comment [b2Distance.h <65:1 65:26>]
COMMENT: comment [b2Distance.h <66:1 66:46>]
COMMENT: comment [b2Distance.h <67:1 67:30>]
COMMENT: comment [b2Distance.h <77:1 77:27>]
COMMENT: comment [b2Distance.h <80:18 80:46>]
COMMENT: comment [b2Distance.h <81:18 81:46>]
COMMENT: comment [b2Distance.h <83:20 83:54>]
COMMENT: comment [b2Distance.h <86:1 86:80>]
COMMENT: comment [b2Distance.h <87:1 87:83>]
COMMENT: comment [b2Distance.h <88:1 88:56>]
COMMENT: comment [b2Distance.h <94:1 94:75>]
COMMENT: comment [b2Draw.h <1:1 17:3>]
COMMENT: comment [b2Draw.h <24:1 24:61>]
COMMENT: comment [b2Draw.h <41:1 41:89>]
COMMENT: comment [b2Draw.h <42:1 42:27>]
COMMENT: comment [b2Draw.h <52:27 52:43>]
COMMENT: comment [b2Draw.h <53:27 53:54>]
COMMENT: comment [b2Draw.h <54:26 54:63>]
COMMENT: comment [b2Draw.h <55:26 55:53>]
COMMENT: comment [b2Draw.h <56:31 56:61>]
COMMENT: comment [b2Draw.h <59:2 59:28>]
COMMENT: comment [b2Draw.h <62:2 62:28>]
COMMENT: comment [b2Draw.h <65:2 65:40>]
COMMENT: comment [b2Draw.h <68:2 68:41>]
COMMENT: comment [b2Draw.h <71:2 71:50>]
COMMENT: comment [b2Draw.h <74:2 74:56>]
COMMENT: comment [b2Draw.h <77:2 77:20>]
COMMENT: comment [b2Draw.h <80:2 80:26>]
COMMENT: comment [b2Draw.h <83:2 83:26>]
COMMENT: comment [b2Draw.h <86:2 86:53>]
COMMENT: comment [b2Draw.h <87:2 87:28>]
COMMENT: comment [b2Draw.h <90:2 90:19>]
COMMENT: comment [b2Timer.h <1:1 17:3>]
COMMENT: comment [b2Timer.h <24:1 24:65>]
COMMENT: comment [b2Timer.h <25:1 25:32>]
COMMENT: comment [b2Timer.h <30:2 30:17>]
COMMENT: comment [b2Timer.h <33:2 33:22>]
COMMENT: comment [b2Timer.h <36:2 36:56>]
