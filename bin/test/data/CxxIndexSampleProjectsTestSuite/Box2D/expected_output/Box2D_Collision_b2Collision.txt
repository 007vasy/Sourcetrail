FILE: b2Collision.cpp
COMMENT: comment [b2Collision.cpp <1:1 17:3>]
REFERENCE_MACRO_USAGE b2Collision.cpp -> b2_epsilon [b2Collision.cpp <38:44 38:53>]
REFERENCE_MACRO_USAGE b2Settings.h -> FLT_EPSILON [b2Settings.h <43:21 43:31>]
REFERENCE_MACRO_USAGE b2Collision.cpp -> b2_epsilon [b2Collision.cpp <38:57 38:66>]
COMMENT: comment [b2Collision.cpp <81:4 81:40>]
REFERENCE_MACRO_USAGE b2Collision.cpp -> b2_maxManifoldPoints [b2Collision.cpp <88:43 88:62>]
REFERENCE_MACRO_USAGE b2Collision.cpp -> b2_maxManifoldPoints [b2Collision.cpp <88:86 88:105>]
REFERENCE_MACRO_USAGE b2Collision.cpp -> b2_maxManifoldPoints [b2Collision.cpp <91:24 91:43>]
COMMENT: comment [b2Collision.cpp <97:2 97:33>]
COMMENT: comment [b2Collision.cpp <114:2 114:30>]
COMMENT: comment [b2Collision.cpp <132:1 132:45>]
REFERENCE_MACRO_USAGE b2Collision.cpp -> b2_maxFloat [b2Collision.cpp <135:18 135:28>]
REFERENCE_MACRO_USAGE b2Settings.h -> FLT_MAX [b2Settings.h <42:22 42:28>]
REFERENCE_MACRO_USAGE b2Collision.cpp -> b2_maxFloat [b2Collision.cpp <136:17 136:27>]
REFERENCE_MACRO_USAGE b2Collision.cpp -> b2_epsilon [b2Collision.cpp <146:17 146:26>]
COMMENT: comment [b2Collision.cpp <148:4 148:16>]
COMMENT: comment [b2Collision.cpp <160:4 160:33>]
COMMENT: comment [b2Collision.cpp <169:4 169:22>]
COMMENT: comment [b2Collision.cpp <177:4 177:24>]
COMMENT: comment [b2Collision.cpp <187:2 187:39>]
COMMENT: comment [b2Collision.cpp <188:2 188:52>]
COMMENT: comment [b2Collision.cpp <194:2 194:18>]
COMMENT: comment [b2Collision.cpp <200:1 200:32>]
COMMENT: comment [b2Collision.cpp <204:2 204:32>]
COMMENT: comment [b2Collision.cpp <207:2 207:53>]
COMMENT: comment [b2Collision.cpp <211:2 211:39>]
COMMENT: comment [b2Collision.cpp <215:2 215:54>]
COMMENT: comment [b2Collision.cpp <218:3 218:47>]
COMMENT: comment [b2Collision.cpp <222:3 222:31>]
REFERENCE_MACRO_USAGE b2Collision.cpp -> b2_epsilon [b2Collision.cpp <251:35 251:44>]
SYMBOL_METHOD public void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) [b2Collision.cpp <22:1 <22:23 22:32> 86:1>]
SYMBOL_STRUCT b2WorldManifold
QUALIFIER: b2WorldManifold [b2Collision.cpp <22:6 22:20>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> void [b2Collision.cpp <22:1 22:4>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <22:52 22:59>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Manifold [b2Collision.cpp <22:40 22:49>]
LOCAL_SYMBOL: b2Collision.cpp<23:28> [b2Collision.cpp <23:28 23:30>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Transform [b2Collision.cpp <23:15 23:25>]
LOCAL_SYMBOL: b2Collision.cpp<23:41> [b2Collision.cpp <23:41 23:47>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [b2Collision.cpp <23:33 23:39>]
LOCAL_SYMBOL: b2Collision.cpp<24:28> [b2Collision.cpp <24:28 24:30>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Transform [b2Collision.cpp <24:15 24:25>]
LOCAL_SYMBOL: b2Collision.cpp<24:41> [b2Collision.cpp <24:41 24:47>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [b2Collision.cpp <24:33 24:39>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> int32 b2Manifold::pointCount [b2Collision.cpp <26:16 26:25>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <26:6 26:13>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Manifold::Type b2Manifold::type [b2Collision.cpp <31:20 31:23>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <31:10 31:17>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Manifold::Type::e_circles [b2Collision.cpp <33:19 33:27>]
SYMBOL_STRUCT b2Manifold
QUALIFIER: b2Manifold [b2Collision.cpp <33:7 33:16>]
SYMBOL_FUNCTION void b2Vec2::Set(float32, float32)
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> void b2Vec2::Set(float32, float32) [b2Collision.cpp <35:11 35:13>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <35:4 35:9>]
LOCAL_SYMBOL: b2Collision.cpp<36:11> [b2Collision.cpp <36:11 36:16>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <36:4 36:9>]
SYMBOL_FUNCTION b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &)
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Collision.cpp <36:20 36:24>]
LOCAL_SYMBOL: b2Collision.cpp<23:28> [b2Collision.cpp <36:26 36:28>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Manifold::localPoint [b2Collision.cpp <36:41 36:50>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <36:31 36:38>]
LOCAL_SYMBOL: b2Collision.cpp<37:11> [b2Collision.cpp <37:11 37:16>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <37:4 37:9>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Collision.cpp <37:20 37:24>]
LOCAL_SYMBOL: b2Collision.cpp<24:28> [b2Collision.cpp <37:26 37:28>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2ManifoldPoint::localPoint [b2Collision.cpp <37:51 37:60>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2ManifoldPoint [] b2Manifold::points [b2Collision.cpp <37:41 37:46>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <37:31 37:38>]
SYMBOL_FUNCTION float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 b2DistanceSquared(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <38:8 38:24>]
LOCAL_SYMBOL: b2Collision.cpp<36:11> [b2Collision.cpp <38:26 38:31>]
LOCAL_SYMBOL: b2Collision.cpp<37:11> [b2Collision.cpp <38:34 38:39>]
SYMBOL_FUNCTION b2Vec2 & b2Vec2::operator=(b2Vec2 &)
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2Collision.cpp <40:12 40:12>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <40:5 40:10>]
SYMBOL_FUNCTION b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <40:21 40:21>]
LOCAL_SYMBOL: b2Collision.cpp<37:11> [b2Collision.cpp <40:14 40:19>]
LOCAL_SYMBOL: b2Collision.cpp<36:11> [b2Collision.cpp <40:23 40:28>]
SYMBOL_FUNCTION float32 b2Vec2::Normalize()
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 b2Vec2::Normalize() [b2Collision.cpp <41:12 41:20>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <41:5 41:10>]
LOCAL_SYMBOL: b2Collision.cpp<44:11> [b2Collision.cpp <44:11 44:12>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <44:4 44:9>]
SYMBOL_FUNCTION b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <44:23 44:23>]
LOCAL_SYMBOL: b2Collision.cpp<36:11> [b2Collision.cpp <44:16 44:21>]
SYMBOL_FUNCTION b2Vec2 operator*(float32, const b2Vec2 &)
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.cpp <44:33 44:33>]
LOCAL_SYMBOL: b2Collision.cpp<23:41> [b2Collision.cpp <44:25 44:31>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <44:35 44:40>]
LOCAL_SYMBOL: b2Collision.cpp<45:11> [b2Collision.cpp <45:11 45:12>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <45:4 45:9>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <45:23 45:23>]
LOCAL_SYMBOL: b2Collision.cpp<37:11> [b2Collision.cpp <45:16 45:21>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.cpp <45:33 45:33>]
LOCAL_SYMBOL: b2Collision.cpp<24:41> [b2Collision.cpp <45:25 45:31>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <45:35 45:40>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2Collision.cpp <46:14 46:14>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [] b2WorldManifold::points [b2Collision.cpp <46:4 46:9>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.cpp <46:21 46:21>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <46:27 46:27>]
LOCAL_SYMBOL: b2Collision.cpp<44:11> [b2Collision.cpp <46:24 46:25>]
LOCAL_SYMBOL: b2Collision.cpp<45:11> [b2Collision.cpp <46:29 46:30>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [] b2WorldManifold::separations [b2Collision.cpp <47:4 47:14>]
SYMBOL_FUNCTION float32 b2Dot(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <47:21 47:25>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <47:30 47:30>]
LOCAL_SYMBOL: b2Collision.cpp<45:11> [b2Collision.cpp <47:27 47:28>]
LOCAL_SYMBOL: b2Collision.cpp<44:11> [b2Collision.cpp <47:32 47:33>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <47:36 47:41>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Manifold::Type::e_faceA [b2Collision.cpp <51:19 51:25>]
QUALIFIER: b2Manifold [b2Collision.cpp <51:7 51:16>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2Collision.cpp <53:11 53:11>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <53:4 53:9>]
SYMBOL_FUNCTION b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &)
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Collision.cpp <53:13 53:17>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Rot b2Transform::q [b2Collision.cpp <53:23 53:23>]
LOCAL_SYMBOL: b2Collision.cpp<23:28> [b2Collision.cpp <53:19 53:21>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Manifold::localNormal [b2Collision.cpp <53:36 53:46>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <53:26 53:33>]
LOCAL_SYMBOL: b2Collision.cpp<54:11> [b2Collision.cpp <54:11 54:20>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <54:4 54:9>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Collision.cpp <54:24 54:28>]
LOCAL_SYMBOL: b2Collision.cpp<23:28> [b2Collision.cpp <54:30 54:32>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Manifold::localPoint [b2Collision.cpp <54:45 54:54>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <54:35 54:42>]
LOCAL_SYMBOL: b2Collision.cpp<56:15> [b2Collision.cpp <56:15 56:15>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> int32 [b2Collision.cpp <56:9 56:13>]
LOCAL_SYMBOL: b2Collision.cpp<56:15> [b2Collision.cpp <56:22 56:22>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> int32 b2Manifold::pointCount [b2Collision.cpp <56:36 56:45>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <56:26 56:33>]
LOCAL_SYMBOL: b2Collision.cpp<56:15> [b2Collision.cpp <56:50 56:50>]
LOCAL_SYMBOL: b2Collision.cpp<58:12> [b2Collision.cpp <58:12 58:20>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <58:5 58:10>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Collision.cpp <58:24 58:28>]
LOCAL_SYMBOL: b2Collision.cpp<24:28> [b2Collision.cpp <58:30 58:32>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2ManifoldPoint::localPoint [b2Collision.cpp <58:55 58:64>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2ManifoldPoint [] b2Manifold::points [b2Collision.cpp <58:45 58:50>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <58:35 58:42>]
LOCAL_SYMBOL: b2Collision.cpp<56:15> [b2Collision.cpp <58:52 58:52>]
LOCAL_SYMBOL: b2Collision.cpp<59:12> [b2Collision.cpp <59:12 59:13>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <59:5 59:10>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <59:27 59:27>]
LOCAL_SYMBOL: b2Collision.cpp<58:12> [b2Collision.cpp <59:17 59:25>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.cpp <59:79 59:79>]
LOCAL_SYMBOL: b2Collision.cpp<23:41> [b2Collision.cpp <59:30 59:36>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <59:40 59:44>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <59:56 59:56>]
LOCAL_SYMBOL: b2Collision.cpp<58:12> [b2Collision.cpp <59:46 59:54>]
LOCAL_SYMBOL: b2Collision.cpp<54:11> [b2Collision.cpp <59:58 59:67>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <59:70 59:75>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <59:81 59:86>]
LOCAL_SYMBOL: b2Collision.cpp<60:12> [b2Collision.cpp <60:12 60:13>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <60:5 60:10>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <60:27 60:27>]
LOCAL_SYMBOL: b2Collision.cpp<58:12> [b2Collision.cpp <60:17 60:25>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.cpp <60:37 60:37>]
LOCAL_SYMBOL: b2Collision.cpp<24:41> [b2Collision.cpp <60:29 60:35>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <60:39 60:44>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2Collision.cpp <61:15 61:15>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [] b2WorldManifold::points [b2Collision.cpp <61:5 61:10>]
LOCAL_SYMBOL: b2Collision.cpp<56:15> [b2Collision.cpp <61:12 61:12>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.cpp <61:22 61:22>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <61:28 61:28>]
LOCAL_SYMBOL: b2Collision.cpp<59:12> [b2Collision.cpp <61:25 61:26>]
LOCAL_SYMBOL: b2Collision.cpp<60:12> [b2Collision.cpp <61:30 61:31>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [] b2WorldManifold::separations [b2Collision.cpp <62:5 62:15>]
LOCAL_SYMBOL: b2Collision.cpp<56:15> [b2Collision.cpp <62:17 62:17>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <62:22 62:26>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <62:31 62:31>]
LOCAL_SYMBOL: b2Collision.cpp<60:12> [b2Collision.cpp <62:28 62:29>]
LOCAL_SYMBOL: b2Collision.cpp<59:12> [b2Collision.cpp <62:33 62:34>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <62:37 62:42>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Manifold::Type::e_faceB [b2Collision.cpp <67:19 67:25>]
QUALIFIER: b2Manifold [b2Collision.cpp <67:7 67:16>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2Collision.cpp <69:11 69:11>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <69:4 69:9>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2Collision.cpp <69:13 69:17>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Rot b2Transform::q [b2Collision.cpp <69:23 69:23>]
LOCAL_SYMBOL: b2Collision.cpp<24:28> [b2Collision.cpp <69:19 69:21>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Manifold::localNormal [b2Collision.cpp <69:36 69:46>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <69:26 69:33>]
LOCAL_SYMBOL: b2Collision.cpp<70:11> [b2Collision.cpp <70:11 70:20>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <70:4 70:9>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Collision.cpp <70:24 70:28>]
LOCAL_SYMBOL: b2Collision.cpp<24:28> [b2Collision.cpp <70:30 70:32>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Manifold::localPoint [b2Collision.cpp <70:45 70:54>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <70:35 70:42>]
LOCAL_SYMBOL: b2Collision.cpp<72:15> [b2Collision.cpp <72:15 72:15>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> int32 [b2Collision.cpp <72:9 72:13>]
LOCAL_SYMBOL: b2Collision.cpp<72:15> [b2Collision.cpp <72:22 72:22>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> int32 b2Manifold::pointCount [b2Collision.cpp <72:36 72:45>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <72:26 72:33>]
LOCAL_SYMBOL: b2Collision.cpp<72:15> [b2Collision.cpp <72:50 72:50>]
LOCAL_SYMBOL: b2Collision.cpp<74:12> [b2Collision.cpp <74:12 74:20>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <74:5 74:10>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2Collision.cpp <74:24 74:28>]
LOCAL_SYMBOL: b2Collision.cpp<23:28> [b2Collision.cpp <74:30 74:32>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2ManifoldPoint::localPoint [b2Collision.cpp <74:55 74:64>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2ManifoldPoint [] b2Manifold::points [b2Collision.cpp <74:45 74:50>]
LOCAL_SYMBOL: b2Collision.cpp<22:52> [b2Collision.cpp <74:35 74:42>]
LOCAL_SYMBOL: b2Collision.cpp<72:15> [b2Collision.cpp <74:52 74:52>]
LOCAL_SYMBOL: b2Collision.cpp<75:12> [b2Collision.cpp <75:12 75:13>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <75:5 75:10>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <75:27 75:27>]
LOCAL_SYMBOL: b2Collision.cpp<74:12> [b2Collision.cpp <75:17 75:25>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.cpp <75:79 75:79>]
LOCAL_SYMBOL: b2Collision.cpp<24:41> [b2Collision.cpp <75:30 75:36>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <75:40 75:44>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <75:56 75:56>]
LOCAL_SYMBOL: b2Collision.cpp<74:12> [b2Collision.cpp <75:46 75:54>]
LOCAL_SYMBOL: b2Collision.cpp<70:11> [b2Collision.cpp <75:58 75:67>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <75:70 75:75>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <75:81 75:86>]
LOCAL_SYMBOL: b2Collision.cpp<76:12> [b2Collision.cpp <76:12 76:13>]
REFERENCE_TYPE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [b2Collision.cpp <76:5 76:10>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <76:27 76:27>]
LOCAL_SYMBOL: b2Collision.cpp<74:12> [b2Collision.cpp <76:17 76:25>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.cpp <76:37 76:37>]
LOCAL_SYMBOL: b2Collision.cpp<23:41> [b2Collision.cpp <76:29 76:35>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <76:39 76:44>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2Collision.cpp <77:15 77:15>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 [] b2WorldManifold::points [b2Collision.cpp <77:5 77:10>]
LOCAL_SYMBOL: b2Collision.cpp<72:15> [b2Collision.cpp <77:12 77:12>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.cpp <77:22 77:22>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <77:28 77:28>]
LOCAL_SYMBOL: b2Collision.cpp<76:12> [b2Collision.cpp <77:25 77:26>]
LOCAL_SYMBOL: b2Collision.cpp<75:12> [b2Collision.cpp <77:30 77:31>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 [] b2WorldManifold::separations [b2Collision.cpp <78:5 78:15>]
LOCAL_SYMBOL: b2Collision.cpp<72:15> [b2Collision.cpp <78:17 78:17>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <78:22 78:26>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <78:31 78:31>]
LOCAL_SYMBOL: b2Collision.cpp<76:12> [b2Collision.cpp <78:28 78:29>]
LOCAL_SYMBOL: b2Collision.cpp<75:12> [b2Collision.cpp <78:33 78:34>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <78:37 78:42>]
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2Collision.cpp <82:11 82:11>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <82:4 82:9>]
SYMBOL_FUNCTION b2Vec2 b2Vec2::operator-() const
REFERENCE_CALL void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2Vec2::operator-() const [b2Collision.cpp <82:13 82:13>]
REFERENCE_USAGE void b2WorldManifold::Initialize(const b2Manifold *, const b2Transform &, float32, const b2Transform &, float32) -> b2Vec2 b2WorldManifold::normal [b2Collision.cpp <82:14 82:19>]
SYMBOL_FUNCTION void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) [b2Collision.cpp <88:1 <88:6 88:21> 130:1>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> void [b2Collision.cpp <88:1 88:4>]
LOCAL_SYMBOL: b2Collision.cpp<88:36> [b2Collision.cpp <88:36 88:41>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState [b2Collision.cpp <88:23 88:34>]
LOCAL_SYMBOL: b2Collision.cpp<88:79> [b2Collision.cpp <88:79 88:84>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState [b2Collision.cpp <88:66 88:77>]
LOCAL_SYMBOL: b2Collision.cpp<89:26> [b2Collision.cpp <89:26 89:34>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2Manifold [b2Collision.cpp <89:14 89:23>]
LOCAL_SYMBOL: b2Collision.cpp<89:55> [b2Collision.cpp <89:55 89:63>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2Manifold [b2Collision.cpp <89:43 89:52>]
LOCAL_SYMBOL: b2Collision.cpp<91:13> [b2Collision.cpp <91:13 91:13>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> int32 [b2Collision.cpp <91:7 91:11>]
LOCAL_SYMBOL: b2Collision.cpp<91:13> [b2Collision.cpp <91:20 91:20>]
LOCAL_SYMBOL: b2Collision.cpp<91:13> [b2Collision.cpp <91:48 91:48>]
LOCAL_SYMBOL: b2Collision.cpp<88:36> [b2Collision.cpp <93:3 93:8>]
LOCAL_SYMBOL: b2Collision.cpp<91:13> [b2Collision.cpp <93:10 93:10>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState::b2_nullState [b2Collision.cpp <93:15 93:26>]
LOCAL_SYMBOL: b2Collision.cpp<88:79> [b2Collision.cpp <94:3 94:8>]
LOCAL_SYMBOL: b2Collision.cpp<91:13> [b2Collision.cpp <94:10 94:10>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState::b2_nullState [b2Collision.cpp <94:15 94:26>]
LOCAL_SYMBOL: b2Collision.cpp<98:13> [b2Collision.cpp <98:13 98:13>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> int32 [b2Collision.cpp <98:7 98:11>]
LOCAL_SYMBOL: b2Collision.cpp<98:13> [b2Collision.cpp <98:20 98:20>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> int32 b2Manifold::pointCount [b2Collision.cpp <98:35 98:44>]
LOCAL_SYMBOL: b2Collision.cpp<89:26> [b2Collision.cpp <98:24 98:32>]
LOCAL_SYMBOL: b2Collision.cpp<98:13> [b2Collision.cpp <98:49 98:49>]
LOCAL_SYMBOL: b2Collision.cpp<100:15> [b2Collision.cpp <100:15 100:16>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2ContactID [b2Collision.cpp <100:3 100:13>]
SYMBOL_FUNCTION void b2ContactID::b2ContactID(const b2ContactID &)
REFERENCE_CALL void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> void b2ContactID::b2ContactID(const b2ContactID &) [b2Collision.cpp <100:41 100:42>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2ContactID b2ManifoldPoint::id [b2Collision.cpp <100:41 100:42>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2ManifoldPoint [] b2Manifold::points [b2Collision.cpp <100:31 100:36>]
LOCAL_SYMBOL: b2Collision.cpp<89:26> [b2Collision.cpp <100:20 100:28>]
LOCAL_SYMBOL: b2Collision.cpp<98:13> [b2Collision.cpp <100:38 100:38>]
LOCAL_SYMBOL: b2Collision.cpp<88:36> [b2Collision.cpp <102:3 102:8>]
LOCAL_SYMBOL: b2Collision.cpp<98:13> [b2Collision.cpp <102:10 102:10>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState::b2_removeState [b2Collision.cpp <102:15 102:28>]
LOCAL_SYMBOL: b2Collision.cpp<104:14> [b2Collision.cpp <104:14 104:14>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> int32 [b2Collision.cpp <104:8 104:12>]
LOCAL_SYMBOL: b2Collision.cpp<104:14> [b2Collision.cpp <104:21 104:21>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> int32 b2Manifold::pointCount [b2Collision.cpp <104:36 104:45>]
LOCAL_SYMBOL: b2Collision.cpp<89:55> [b2Collision.cpp <104:25 104:33>]
LOCAL_SYMBOL: b2Collision.cpp<104:14> [b2Collision.cpp <104:50 104:50>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> uint32 b2ContactID::key [b2Collision.cpp <106:32 106:34>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2ContactID b2ManifoldPoint::id [b2Collision.cpp <106:29 106:30>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2ManifoldPoint [] b2Manifold::points [b2Collision.cpp <106:19 106:24>]
LOCAL_SYMBOL: b2Collision.cpp<89:55> [b2Collision.cpp <106:8 106:16>]
LOCAL_SYMBOL: b2Collision.cpp<104:14> [b2Collision.cpp <106:26 106:26>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> uint32 b2ContactID::key [b2Collision.cpp <106:42 106:44>]
LOCAL_SYMBOL: b2Collision.cpp<100:15> [b2Collision.cpp <106:39 106:40>]
LOCAL_SYMBOL: b2Collision.cpp<88:36> [b2Collision.cpp <108:5 108:10>]
LOCAL_SYMBOL: b2Collision.cpp<98:13> [b2Collision.cpp <108:12 108:12>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState::b2_persistState [b2Collision.cpp <108:17 108:31>]
LOCAL_SYMBOL: b2Collision.cpp<115:13> [b2Collision.cpp <115:13 115:13>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> int32 [b2Collision.cpp <115:7 115:11>]
LOCAL_SYMBOL: b2Collision.cpp<115:13> [b2Collision.cpp <115:20 115:20>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> int32 b2Manifold::pointCount [b2Collision.cpp <115:35 115:44>]
LOCAL_SYMBOL: b2Collision.cpp<89:55> [b2Collision.cpp <115:24 115:32>]
LOCAL_SYMBOL: b2Collision.cpp<115:13> [b2Collision.cpp <115:49 115:49>]
LOCAL_SYMBOL: b2Collision.cpp<117:15> [b2Collision.cpp <117:15 117:16>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2ContactID [b2Collision.cpp <117:3 117:13>]
REFERENCE_CALL void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> void b2ContactID::b2ContactID(const b2ContactID &) [b2Collision.cpp <117:41 117:42>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2ContactID b2ManifoldPoint::id [b2Collision.cpp <117:41 117:42>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2ManifoldPoint [] b2Manifold::points [b2Collision.cpp <117:31 117:36>]
LOCAL_SYMBOL: b2Collision.cpp<89:55> [b2Collision.cpp <117:20 117:28>]
LOCAL_SYMBOL: b2Collision.cpp<115:13> [b2Collision.cpp <117:38 117:38>]
LOCAL_SYMBOL: b2Collision.cpp<88:79> [b2Collision.cpp <119:3 119:8>]
LOCAL_SYMBOL: b2Collision.cpp<115:13> [b2Collision.cpp <119:10 119:10>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState::b2_addState [b2Collision.cpp <119:15 119:25>]
LOCAL_SYMBOL: b2Collision.cpp<121:14> [b2Collision.cpp <121:14 121:14>]
REFERENCE_TYPE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> int32 [b2Collision.cpp <121:8 121:12>]
LOCAL_SYMBOL: b2Collision.cpp<121:14> [b2Collision.cpp <121:21 121:21>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> int32 b2Manifold::pointCount [b2Collision.cpp <121:36 121:45>]
LOCAL_SYMBOL: b2Collision.cpp<89:26> [b2Collision.cpp <121:25 121:33>]
LOCAL_SYMBOL: b2Collision.cpp<121:14> [b2Collision.cpp <121:50 121:50>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> uint32 b2ContactID::key [b2Collision.cpp <123:32 123:34>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2ContactID b2ManifoldPoint::id [b2Collision.cpp <123:29 123:30>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2ManifoldPoint [] b2Manifold::points [b2Collision.cpp <123:19 123:24>]
LOCAL_SYMBOL: b2Collision.cpp<89:26> [b2Collision.cpp <123:8 123:16>]
LOCAL_SYMBOL: b2Collision.cpp<121:14> [b2Collision.cpp <123:26 123:26>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> uint32 b2ContactID::key [b2Collision.cpp <123:42 123:44>]
LOCAL_SYMBOL: b2Collision.cpp<117:15> [b2Collision.cpp <123:39 123:40>]
LOCAL_SYMBOL: b2Collision.cpp<88:79> [b2Collision.cpp <125:5 125:10>]
LOCAL_SYMBOL: b2Collision.cpp<115:13> [b2Collision.cpp <125:12 125:12>]
REFERENCE_USAGE void b2GetPointStates(b2PointState [], b2PointState [], const b2Manifold *, const b2Manifold *) -> b2PointState::b2_persistState [b2Collision.cpp <125:17 125:31>]
SYMBOL_METHOD public bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const [b2Collision.cpp <133:1 <133:14 133:20> 198:1>]
SYMBOL_STRUCT b2AABB
QUALIFIER: b2AABB [b2Collision.cpp <133:6 133:11>]
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> bool [b2Collision.cpp <133:1 133:4>]
LOCAL_SYMBOL: b2Collision.cpp<133:39> [b2Collision.cpp <133:39 133:44>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2RayCastOutput [b2Collision.cpp <133:22 133:36>]
LOCAL_SYMBOL: b2Collision.cpp<133:69> [b2Collision.cpp <133:69 133:73>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2RayCastInput [b2Collision.cpp <133:53 133:66>]
LOCAL_SYMBOL: b2Collision.cpp<135:10> [b2Collision.cpp <135:10 135:13>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 [b2Collision.cpp <135:2 135:8>]
LOCAL_SYMBOL: b2Collision.cpp<136:10> [b2Collision.cpp <136:10 136:13>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 [b2Collision.cpp <136:2 136:8>]
LOCAL_SYMBOL: b2Collision.cpp<138:9> [b2Collision.cpp <138:9 138:9>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 [b2Collision.cpp <138:2 138:7>]
SYMBOL_FUNCTION void b2Vec2::b2Vec2(const b2Vec2 &)
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Collision.cpp <138:19 138:20>]
REFERENCE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2Collision.cpp <138:19 138:20>]
LOCAL_SYMBOL: b2Collision.cpp<133:69> [b2Collision.cpp <138:13 138:17>]
LOCAL_SYMBOL: b2Collision.cpp<139:9> [b2Collision.cpp <139:9 139:9>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 [b2Collision.cpp <139:2 139:7>]
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <139:22 139:22>]
REFERENCE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p2 [b2Collision.cpp <139:19 139:20>]
LOCAL_SYMBOL: b2Collision.cpp<133:69> [b2Collision.cpp <139:13 139:17>]
REFERENCE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 b2RayCastInput::p1 [b2Collision.cpp <139:30 139:31>]
LOCAL_SYMBOL: b2Collision.cpp<133:69> [b2Collision.cpp <139:24 139:28>]
LOCAL_SYMBOL: b2Collision.cpp<140:9> [b2Collision.cpp <140:9 140:12>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 [b2Collision.cpp <140:2 140:7>]
SYMBOL_FUNCTION b2Vec2 b2Abs(const b2Vec2 &)
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 b2Abs(const b2Vec2 &) [b2Collision.cpp <140:16 140:20>]
LOCAL_SYMBOL: b2Collision.cpp<139:9> [b2Collision.cpp <140:22 140:22>]
LOCAL_SYMBOL: b2Collision.cpp<142:9> [b2Collision.cpp <142:9 142:14>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 [b2Collision.cpp <142:2 142:7>]
SYMBOL_FUNCTION void b2Vec2::b2Vec2()
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> void b2Vec2::b2Vec2() [b2Collision.cpp <142:9 142:14>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <144:13 144:13>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> int32 [b2Collision.cpp <144:7 144:11>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <144:20 144:20>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <144:29 144:29>]
SYMBOL_FUNCTION float32 & b2Vec2::operator()(int32)
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 & b2Vec2::operator()(int32) [b2Collision.cpp <146:11 146:11>]
LOCAL_SYMBOL: b2Collision.cpp<140:9> [b2Collision.cpp <146:7 146:10>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <146:12 146:12>]
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 & b2Vec2::operator()(int32) [b2Collision.cpp <149:9 149:9>]
LOCAL_SYMBOL: b2Collision.cpp<138:9> [b2Collision.cpp <149:8 149:8>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <149:10 149:10>]
SYMBOL_FUNCTION float32 b2Vec2::operator()(int32) const
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 b2Vec2::operator()(int32) const [b2Collision.cpp <149:25 149:25>]
REFERENCE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.cpp <149:15 149:24>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <149:26 149:26>]
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 b2Vec2::operator()(int32) const [b2Collision.cpp <149:42 149:42>]
REFERENCE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 b2AABB::upperBound [b2Collision.cpp <149:32 149:41>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <149:43 149:43>]
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 & b2Vec2::operator()(int32) [b2Collision.cpp <149:49 149:49>]
LOCAL_SYMBOL: b2Collision.cpp<138:9> [b2Collision.cpp <149:48 149:48>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <149:50 149:50>]
LOCAL_SYMBOL: b2Collision.cpp<156:12> [b2Collision.cpp <156:12 156:16>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 [b2Collision.cpp <156:4 156:10>]
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 & b2Vec2::operator()(int32) [b2Collision.cpp <156:28 156:28>]
LOCAL_SYMBOL: b2Collision.cpp<139:9> [b2Collision.cpp <156:27 156:27>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <156:29 156:29>]
LOCAL_SYMBOL: b2Collision.cpp<157:12> [b2Collision.cpp <157:12 157:13>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 [b2Collision.cpp <157:4 157:10>]
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 b2Vec2::operator()(int32) const [b2Collision.cpp <157:28 157:28>]
REFERENCE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 b2AABB::lowerBound [b2Collision.cpp <157:18 157:27>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <157:29 157:29>]
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 & b2Vec2::operator()(int32) [b2Collision.cpp <157:35 157:35>]
LOCAL_SYMBOL: b2Collision.cpp<138:9> [b2Collision.cpp <157:34 157:34>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <157:36 157:36>]
LOCAL_SYMBOL: b2Collision.cpp<156:12> [b2Collision.cpp <157:42 157:46>]
LOCAL_SYMBOL: b2Collision.cpp<158:12> [b2Collision.cpp <158:12 158:13>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 [b2Collision.cpp <158:4 158:10>]
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 b2Vec2::operator()(int32) const [b2Collision.cpp <158:28 158:28>]
REFERENCE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 b2AABB::upperBound [b2Collision.cpp <158:18 158:27>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <158:29 158:29>]
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 & b2Vec2::operator()(int32) [b2Collision.cpp <158:35 158:35>]
LOCAL_SYMBOL: b2Collision.cpp<138:9> [b2Collision.cpp <158:34 158:34>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <158:36 158:36>]
LOCAL_SYMBOL: b2Collision.cpp<156:12> [b2Collision.cpp <158:42 158:46>]
LOCAL_SYMBOL: b2Collision.cpp<161:12> [b2Collision.cpp <161:12 161:12>]
REFERENCE_TYPE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 [b2Collision.cpp <161:4 161:10>]
LOCAL_SYMBOL: b2Collision.cpp<157:12> [b2Collision.cpp <163:8 163:9>]
LOCAL_SYMBOL: b2Collision.cpp<158:12> [b2Collision.cpp <163:13 163:14>]
SYMBOL_FUNCTION void b2Swap<float>(float &, float &)
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> void b2Swap<float>(float &, float &) [b2Collision.cpp <165:5 165:10>]
LOCAL_SYMBOL: b2Collision.cpp<157:12> [b2Collision.cpp <165:12 165:13>]
LOCAL_SYMBOL: b2Collision.cpp<158:12> [b2Collision.cpp <165:16 165:17>]
LOCAL_SYMBOL: b2Collision.cpp<161:12> [b2Collision.cpp <166:5 166:5>]
LOCAL_SYMBOL: b2Collision.cpp<157:12> [b2Collision.cpp <170:8 170:9>]
LOCAL_SYMBOL: b2Collision.cpp<135:10> [b2Collision.cpp <170:13 170:16>]
SYMBOL_FUNCTION void b2Vec2::SetZero()
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> void b2Vec2::SetZero() [b2Collision.cpp <172:12 172:18>]
LOCAL_SYMBOL: b2Collision.cpp<142:9> [b2Collision.cpp <172:5 172:10>]
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 & b2Vec2::operator()(int32) [b2Collision.cpp <173:11 173:11>]
LOCAL_SYMBOL: b2Collision.cpp<142:9> [b2Collision.cpp <173:5 173:10>]
LOCAL_SYMBOL: b2Collision.cpp<144:13> [b2Collision.cpp <173:12 173:12>]
LOCAL_SYMBOL: b2Collision.cpp<161:12> [b2Collision.cpp <173:17 173:17>]
LOCAL_SYMBOL: b2Collision.cpp<135:10> [b2Collision.cpp <174:5 174:8>]
LOCAL_SYMBOL: b2Collision.cpp<157:12> [b2Collision.cpp <174:12 174:13>]
LOCAL_SYMBOL: b2Collision.cpp<136:10> [b2Collision.cpp <178:4 178:7>]
SYMBOL_FUNCTION float b2Min<float>(float, float)
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float b2Min<float>(float, float) [b2Collision.cpp <178:11 178:15>]
LOCAL_SYMBOL: b2Collision.cpp<136:10> [b2Collision.cpp <178:17 178:20>]
LOCAL_SYMBOL: b2Collision.cpp<158:12> [b2Collision.cpp <178:23 178:24>]
LOCAL_SYMBOL: b2Collision.cpp<135:10> [b2Collision.cpp <180:8 180:11>]
LOCAL_SYMBOL: b2Collision.cpp<136:10> [b2Collision.cpp <180:15 180:18>]
LOCAL_SYMBOL: b2Collision.cpp<135:10> [b2Collision.cpp <189:6 189:9>]
REFERENCE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 b2RayCastInput::maxFraction [b2Collision.cpp <189:27 189:37>]
LOCAL_SYMBOL: b2Collision.cpp<133:69> [b2Collision.cpp <189:21 189:25>]
LOCAL_SYMBOL: b2Collision.cpp<135:10> [b2Collision.cpp <189:41 189:44>]
REFERENCE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> float32 b2RayCastOutput::fraction [b2Collision.cpp <195:10 195:17>]
LOCAL_SYMBOL: b2Collision.cpp<133:39> [b2Collision.cpp <195:2 195:7>]
LOCAL_SYMBOL: b2Collision.cpp<135:10> [b2Collision.cpp <195:21 195:24>]
SYMBOL_FUNCTION b2Vec2 & b2Vec2::operator=(const b2Vec2 &)
REFERENCE_CALL bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Collision.cpp <196:17 196:17>]
REFERENCE_USAGE bool b2AABB::RayCast(b2RayCastOutput *, const b2RayCastInput &) const -> b2Vec2 b2RayCastOutput::normal [b2Collision.cpp <196:10 196:15>]
LOCAL_SYMBOL: b2Collision.cpp<133:39> [b2Collision.cpp <196:2 196:7>]
LOCAL_SYMBOL: b2Collision.cpp<142:9> [b2Collision.cpp <196:19 196:24>]
SYMBOL_FUNCTION int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) [b2Collision.cpp <201:1 <201:7 201:25> 231:1>]
REFERENCE_TYPE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> int32 [b2Collision.cpp <201:1 201:5>]
LOCAL_SYMBOL: b2Collision.cpp<201:40> [b2Collision.cpp <201:40 201:43>]
REFERENCE_TYPE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex [b2Collision.cpp <201:27 201:38>]
LOCAL_SYMBOL: b2Collision.cpp<201:68> [b2Collision.cpp <201:68 201:70>]
REFERENCE_TYPE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex [b2Collision.cpp <201:55 201:66>]
LOCAL_SYMBOL: b2Collision.cpp<202:21> [b2Collision.cpp <202:21 202:26>]
REFERENCE_TYPE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 [b2Collision.cpp <202:13 202:18>]
LOCAL_SYMBOL: b2Collision.cpp<202:37> [b2Collision.cpp <202:37 202:42>]
REFERENCE_TYPE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> float32 [b2Collision.cpp <202:29 202:35>]
LOCAL_SYMBOL: b2Collision.cpp<202:51> [b2Collision.cpp <202:51 202:62>]
REFERENCE_TYPE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> int32 [b2Collision.cpp <202:45 202:49>]
LOCAL_SYMBOL: b2Collision.cpp<205:8> [b2Collision.cpp <205:8 205:13>]
REFERENCE_TYPE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> int32 [b2Collision.cpp <205:2 205:6>]
LOCAL_SYMBOL: b2Collision.cpp<208:10> [b2Collision.cpp <208:10 208:18>]
REFERENCE_TYPE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> float32 [b2Collision.cpp <208:2 208:8>]
REFERENCE_CALL int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <208:22 208:26>]
LOCAL_SYMBOL: b2Collision.cpp<202:21> [b2Collision.cpp <208:28 208:33>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 b2ClipVertex::v [b2Collision.cpp <208:43 208:43>]
LOCAL_SYMBOL: b2Collision.cpp<201:68> [b2Collision.cpp <208:36 208:38>]
LOCAL_SYMBOL: b2Collision.cpp<202:37> [b2Collision.cpp <208:48 208:53>]
LOCAL_SYMBOL: b2Collision.cpp<209:10> [b2Collision.cpp <209:10 209:18>]
REFERENCE_TYPE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> float32 [b2Collision.cpp <209:2 209:8>]
REFERENCE_CALL int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <209:22 209:26>]
LOCAL_SYMBOL: b2Collision.cpp<202:21> [b2Collision.cpp <209:28 209:33>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 b2ClipVertex::v [b2Collision.cpp <209:43 209:43>]
LOCAL_SYMBOL: b2Collision.cpp<201:68> [b2Collision.cpp <209:36 209:38>]
LOCAL_SYMBOL: b2Collision.cpp<202:37> [b2Collision.cpp <209:48 209:53>]
LOCAL_SYMBOL: b2Collision.cpp<208:10> [b2Collision.cpp <212:6 212:14>]
SYMBOL_FUNCTION b2ClipVertex & b2ClipVertex::operator=(const b2ClipVertex &)
REFERENCE_CALL int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex & b2ClipVertex::operator=(const b2ClipVertex &) [b2Collision.cpp <212:40 212:40>]
LOCAL_SYMBOL: b2Collision.cpp<201:40> [b2Collision.cpp <212:25 212:28>]
LOCAL_SYMBOL: b2Collision.cpp<205:8> [b2Collision.cpp <212:30 212:35>]
LOCAL_SYMBOL: b2Collision.cpp<201:68> [b2Collision.cpp <212:42 212:44>]
LOCAL_SYMBOL: b2Collision.cpp<209:10> [b2Collision.cpp <213:6 213:14>]
REFERENCE_CALL int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ClipVertex & b2ClipVertex::operator=(const b2ClipVertex &) [b2Collision.cpp <213:40 213:40>]
LOCAL_SYMBOL: b2Collision.cpp<201:40> [b2Collision.cpp <213:25 213:28>]
LOCAL_SYMBOL: b2Collision.cpp<205:8> [b2Collision.cpp <213:30 213:35>]
LOCAL_SYMBOL: b2Collision.cpp<201:68> [b2Collision.cpp <213:42 213:44>]
LOCAL_SYMBOL: b2Collision.cpp<208:10> [b2Collision.cpp <216:6 216:14>]
LOCAL_SYMBOL: b2Collision.cpp<209:10> [b2Collision.cpp <216:18 216:26>]
LOCAL_SYMBOL: b2Collision.cpp<219:11> [b2Collision.cpp <219:11 219:16>]
REFERENCE_TYPE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> float32 [b2Collision.cpp <219:3 219:9>]
LOCAL_SYMBOL: b2Collision.cpp<208:10> [b2Collision.cpp <219:20 219:28>]
LOCAL_SYMBOL: b2Collision.cpp<208:10> [b2Collision.cpp <219:33 219:41>]
LOCAL_SYMBOL: b2Collision.cpp<209:10> [b2Collision.cpp <219:45 219:53>]
REFERENCE_CALL int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2Collision.cpp <220:18 220:18>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 b2ClipVertex::v [b2Collision.cpp <220:16 220:16>]
LOCAL_SYMBOL: b2Collision.cpp<201:40> [b2Collision.cpp <220:3 220:6>]
LOCAL_SYMBOL: b2Collision.cpp<205:8> [b2Collision.cpp <220:8 220:13>]
REFERENCE_CALL int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <220:29 220:29>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 b2ClipVertex::v [b2Collision.cpp <220:27 220:27>]
LOCAL_SYMBOL: b2Collision.cpp<201:68> [b2Collision.cpp <220:20 220:22>]
REFERENCE_CALL int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Collision.cpp <220:38 220:38>]
LOCAL_SYMBOL: b2Collision.cpp<219:11> [b2Collision.cpp <220:31 220:36>]
REFERENCE_CALL int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2Collision.cpp <220:50 220:50>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 b2ClipVertex::v [b2Collision.cpp <220:48 220:48>]
LOCAL_SYMBOL: b2Collision.cpp<201:68> [b2Collision.cpp <220:41 220:43>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2Vec2 b2ClipVertex::v [b2Collision.cpp <220:59 220:59>]
LOCAL_SYMBOL: b2Collision.cpp<201:68> [b2Collision.cpp <220:52 220:54>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> uint8 b2ContactFeature::indexA [b2Collision.cpp <223:22 223:27>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactFeature b2ContactID::cf [b2Collision.cpp <223:19 223:20>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactID b2ClipVertex::id [b2Collision.cpp <223:16 223:17>]
LOCAL_SYMBOL: b2Collision.cpp<201:40> [b2Collision.cpp <223:3 223:6>]
LOCAL_SYMBOL: b2Collision.cpp<205:8> [b2Collision.cpp <223:8 223:13>]
REFERENCE_TYPE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> uint8 [b2Collision.cpp <223:43 223:47>]
LOCAL_SYMBOL: b2Collision.cpp<202:51> [b2Collision.cpp <223:50 223:61>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> uint8 b2ContactFeature::indexB [b2Collision.cpp <224:22 224:27>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactFeature b2ContactID::cf [b2Collision.cpp <224:19 224:20>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactID b2ClipVertex::id [b2Collision.cpp <224:16 224:17>]
LOCAL_SYMBOL: b2Collision.cpp<201:40> [b2Collision.cpp <224:3 224:6>]
LOCAL_SYMBOL: b2Collision.cpp<205:8> [b2Collision.cpp <224:8 224:13>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> uint8 b2ContactFeature::indexB [b2Collision.cpp <224:44 224:49>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactFeature b2ContactID::cf [b2Collision.cpp <224:41 224:42>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactID b2ClipVertex::id [b2Collision.cpp <224:38 224:39>]
LOCAL_SYMBOL: b2Collision.cpp<201:68> [b2Collision.cpp <224:31 224:33>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> uint8 b2ContactFeature::typeA [b2Collision.cpp <225:22 225:26>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactFeature b2ContactID::cf [b2Collision.cpp <225:19 225:20>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactID b2ClipVertex::id [b2Collision.cpp <225:16 225:17>]
LOCAL_SYMBOL: b2Collision.cpp<201:40> [b2Collision.cpp <225:3 225:6>]
LOCAL_SYMBOL: b2Collision.cpp<205:8> [b2Collision.cpp <225:8 225:13>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactFeature::Type::e_vertex [b2Collision.cpp <225:48 225:55>]
SYMBOL_STRUCT b2ContactFeature
QUALIFIER: b2ContactFeature [b2Collision.cpp <225:30 225:45>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> uint8 b2ContactFeature::typeB [b2Collision.cpp <226:22 226:26>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactFeature b2ContactID::cf [b2Collision.cpp <226:19 226:20>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactID b2ClipVertex::id [b2Collision.cpp <226:16 226:17>]
LOCAL_SYMBOL: b2Collision.cpp<201:40> [b2Collision.cpp <226:3 226:6>]
LOCAL_SYMBOL: b2Collision.cpp<205:8> [b2Collision.cpp <226:8 226:13>]
REFERENCE_USAGE int32 b2ClipSegmentToLine(b2ClipVertex [], const b2ClipVertex [] const, const b2Vec2 &, float32, int32) -> b2ContactFeature::Type::e_face [b2Collision.cpp <226:48 226:53>]
QUALIFIER: b2ContactFeature [b2Collision.cpp <226:30 226:45>]
LOCAL_SYMBOL: b2Collision.cpp<205:8> [b2Collision.cpp <227:5 227:10>]
LOCAL_SYMBOL: b2Collision.cpp<205:8> [b2Collision.cpp <230:9 230:14>]
SYMBOL_FUNCTION bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) [b2Collision.cpp <233:1 <233:6 233:18> 252:1>]
REFERENCE_TYPE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> bool [b2Collision.cpp <233:1 233:4>]
LOCAL_SYMBOL: b2Collision.cpp<233:36> [b2Collision.cpp <233:36 233:41>]
REFERENCE_TYPE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Shape [b2Collision.cpp <233:27 233:33>]
LOCAL_SYMBOL: b2Collision.cpp<233:50> [b2Collision.cpp <233:50 233:55>]
REFERENCE_TYPE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> int32 [b2Collision.cpp <233:44 233:48>]
LOCAL_SYMBOL: b2Collision.cpp<234:21> [b2Collision.cpp <234:21 234:26>]
REFERENCE_TYPE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Shape [b2Collision.cpp <234:12 234:18>]
LOCAL_SYMBOL: b2Collision.cpp<234:35> [b2Collision.cpp <234:35 234:40>]
REFERENCE_TYPE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> int32 [b2Collision.cpp <234:29 234:33>]
LOCAL_SYMBOL: b2Collision.cpp<235:25> [b2Collision.cpp <235:25 235:27>]
REFERENCE_TYPE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform [b2Collision.cpp <235:12 235:22>]
LOCAL_SYMBOL: b2Collision.cpp<235:49> [b2Collision.cpp <235:49 235:51>]
REFERENCE_TYPE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform [b2Collision.cpp <235:36 235:46>]
LOCAL_SYMBOL: b2Collision.cpp<237:18> [b2Collision.cpp <237:18 237:22>]
REFERENCE_TYPE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2DistanceInput [b2Collision.cpp <237:2 237:16>]
SYMBOL_FUNCTION void b2DistanceInput::b2DistanceInput()
REFERENCE_CALL bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> void b2DistanceInput::b2DistanceInput() [b2Collision.cpp <237:18 237:22>]
SYMBOL_FUNCTION void b2DistanceProxy::Set(const b2Shape *, int32)
REFERENCE_CALL bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> void b2DistanceProxy::Set(const b2Shape *, int32) [b2Collision.cpp <238:15 238:17>]
REFERENCE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2DistanceProxy b2DistanceInput::proxyA [b2Collision.cpp <238:8 238:13>]
LOCAL_SYMBOL: b2Collision.cpp<237:18> [b2Collision.cpp <238:2 238:6>]
LOCAL_SYMBOL: b2Collision.cpp<233:36> [b2Collision.cpp <238:19 238:24>]
LOCAL_SYMBOL: b2Collision.cpp<233:50> [b2Collision.cpp <238:27 238:32>]
REFERENCE_CALL bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> void b2DistanceProxy::Set(const b2Shape *, int32) [b2Collision.cpp <239:15 239:17>]
REFERENCE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2DistanceProxy b2DistanceInput::proxyB [b2Collision.cpp <239:8 239:13>]
LOCAL_SYMBOL: b2Collision.cpp<237:18> [b2Collision.cpp <239:2 239:6>]
LOCAL_SYMBOL: b2Collision.cpp<234:21> [b2Collision.cpp <239:19 239:24>]
LOCAL_SYMBOL: b2Collision.cpp<234:35> [b2Collision.cpp <239:27 239:32>]
SYMBOL_FUNCTION b2Transform & b2Transform::operator=(const b2Transform &)
REFERENCE_CALL bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform & b2Transform::operator=(const b2Transform &) [b2Collision.cpp <240:19 240:19>]
REFERENCE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform b2DistanceInput::transformA [b2Collision.cpp <240:8 240:17>]
LOCAL_SYMBOL: b2Collision.cpp<237:18> [b2Collision.cpp <240:2 240:6>]
LOCAL_SYMBOL: b2Collision.cpp<235:25> [b2Collision.cpp <240:21 240:23>]
REFERENCE_CALL bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform & b2Transform::operator=(const b2Transform &) [b2Collision.cpp <241:19 241:19>]
REFERENCE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2Transform b2DistanceInput::transformB [b2Collision.cpp <241:8 241:17>]
LOCAL_SYMBOL: b2Collision.cpp<237:18> [b2Collision.cpp <241:2 241:6>]
LOCAL_SYMBOL: b2Collision.cpp<235:49> [b2Collision.cpp <241:21 241:23>]
REFERENCE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> bool b2DistanceInput::useRadii [b2Collision.cpp <242:8 242:15>]
LOCAL_SYMBOL: b2Collision.cpp<237:18> [b2Collision.cpp <242:2 242:6>]
LOCAL_SYMBOL: b2Collision.cpp<244:17> [b2Collision.cpp <244:17 244:21>]
REFERENCE_TYPE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2SimplexCache [b2Collision.cpp <244:2 244:15>]
SYMBOL_FUNCTION void b2SimplexCache::b2SimplexCache()
REFERENCE_CALL bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> void b2SimplexCache::b2SimplexCache() [b2Collision.cpp <244:17 244:21>]
REFERENCE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> uint16 b2SimplexCache::count [b2Collision.cpp <245:8 245:12>]
LOCAL_SYMBOL: b2Collision.cpp<244:17> [b2Collision.cpp <245:2 245:6>]
LOCAL_SYMBOL: b2Collision.cpp<247:19> [b2Collision.cpp <247:19 247:24>]
REFERENCE_TYPE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> b2DistanceOutput [b2Collision.cpp <247:2 247:17>]
SYMBOL_FUNCTION void b2DistanceOutput::b2DistanceOutput()
REFERENCE_CALL bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> void b2DistanceOutput::b2DistanceOutput() [b2Collision.cpp <247:19 247:24>]
SYMBOL_FUNCTION void b2Distance(b2DistanceOutput *, b2SimplexCache *, const b2DistanceInput *)
REFERENCE_CALL bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> void b2Distance(b2DistanceOutput *, b2SimplexCache *, const b2DistanceInput *) [b2Collision.cpp <249:2 249:11>]
LOCAL_SYMBOL: b2Collision.cpp<247:19> [b2Collision.cpp <249:14 249:19>]
LOCAL_SYMBOL: b2Collision.cpp<244:17> [b2Collision.cpp <249:23 249:27>]
LOCAL_SYMBOL: b2Collision.cpp<237:18> [b2Collision.cpp <249:31 249:35>]
REFERENCE_USAGE bool b2TestOverlap(const b2Shape *, int32, const b2Shape *, int32, const b2Transform &, const b2Transform &) -> float32 b2DistanceOutput::distance [b2Collision.cpp <251:16 251:23>]
LOCAL_SYMBOL: b2Collision.cpp<247:19> [b2Collision.cpp <251:9 251:14>]
