FILE: b2BlockAllocator.cpp
COMMENT: comment [b2BlockAllocator.cpp <1:1 17:3>]
REFERENCE_INCLUDE b2BlockAllocator.cpp -> b2BlockAllocator.h [b2BlockAllocator.cpp <19:10 19:42>]
FILE: b2BlockAllocator.h
COMMENT: comment [b2BlockAllocator.h <1:1 17:3>]
REFERENCE_MACRO_USAGE b2BlockAllocator.h -> B2_BLOCK_ALLOCATOR_H [b2BlockAllocator.h <19:9 19:28>]
SYMBOL_MACRO B2_BLOCK_ALLOCATOR_H [b2BlockAllocator.h <20:9 <20:9 20:28> 20:8>]
REFERENCE_INCLUDE b2BlockAllocator.h -> b2Settings.h [b2BlockAllocator.h <22:10 22:36>]
FILE: b2Settings.h
COMMENT: comment [b2Settings.h <1:1 17:3>]
REFERENCE_MACRO_USAGE b2Settings.h -> B2_SETTINGS_H [b2Settings.h <19:9 19:21>]
SYMBOL_MACRO B2_SETTINGS_H [b2Settings.h <20:9 <20:9 20:21> 20:8>]
REFERENCE_MACRO_USAGE b2Settings.h -> NDEBUG [b2Settings.h <26:14 26:19>]
SYMBOL_MACRO b2DEBUG [b2Settings.h <27:10 <27:10 27:16> 27:9>]
SYMBOL_MACRO B2_NOT_USED [b2Settings.h <30:9 <30:9 30:19> 30:33>]
SYMBOL_MACRO b2Assert [b2Settings.h <31:9 <31:9 31:16> 31:28>]
SYMBOL_MACRO b2_maxFloat [b2Settings.h <42:9 <42:9 42:19> 42:21>]
SYMBOL_MACRO b2_epsilon [b2Settings.h <43:9 <43:9 43:18> 43:20>]
SYMBOL_MACRO b2_pi [b2Settings.h <44:9 <44:9 44:13> 44:16>]
COMMENT: comment [b2Settings.h <46:1 46:10>]
COMMENT: comment [b2Settings.h <47:1 47:75>]
COMMENT: comment [b2Settings.h <48:1 48:4>]
COMMENT: comment [b2Settings.h <50:1 50:13>]
COMMENT: comment [b2Settings.h <52:1 52:71>]
COMMENT: comment [b2Settings.h <53:1 53:27>]
SYMBOL_MACRO b2_maxManifoldPoints [b2Settings.h <54:9 <54:9 54:28> 54:29>]
COMMENT: comment [b2Settings.h <56:1 56:76>]
COMMENT: comment [b2Settings.h <57:1 57:70>]
SYMBOL_MACRO b2_maxPolygonVertices [b2Settings.h <58:9 <58:9 58:29> 58:30>]
COMMENT: comment [b2Settings.h <60:1 60:74>]
COMMENT: comment [b2Settings.h <61:1 61:68>]
COMMENT: comment [b2Settings.h <62:1 62:23>]
SYMBOL_MACRO b2_aabbExtension [b2Settings.h <63:9 <63:9 63:24> 63:26>]
COMMENT: comment [b2Settings.h <65:1 65:78>]
COMMENT: comment [b2Settings.h <66:1 66:59>]
COMMENT: comment [b2Settings.h <67:1 67:40>]
SYMBOL_MACRO b2_aabbMultiplier [b2Settings.h <68:9 <68:9 68:25> 68:27>]
COMMENT: comment [b2Settings.h <70:1 70:79>]
COMMENT: comment [b2Settings.h <71:1 71:70>]
SYMBOL_MACRO b2_linearSlop [b2Settings.h <72:9 <72:9 72:21> 72:24>]
COMMENT: comment [b2Settings.h <74:1 74:78>]
COMMENT: comment [b2Settings.h <75:1 75:70>]
SYMBOL_MACRO b2_angularSlop [b2Settings.h <76:9 <76:9 76:22> 76:47>]
COMMENT: comment [b2Settings.h <78:1 78:83>]
COMMENT: comment [b2Settings.h <79:1 79:91>]
COMMENT: comment [b2Settings.h <80:1 80:64>]
SYMBOL_MACRO b2_polygonRadius [b2Settings.h <81:9 <81:9 81:24> 81:47>]
COMMENT: comment [b2Settings.h <83:1 83:78>]
SYMBOL_MACRO b2_maxSubSteps [b2Settings.h <84:9 <84:9 84:22> 84:25>]
COMMENT: comment [b2Settings.h <87:1 87:12>]
COMMENT: comment [b2Settings.h <89:1 89:68>]
SYMBOL_MACRO b2_maxTOIContacts [b2Settings.h <90:9 <90:9 90:25> 90:28>]
COMMENT: comment [b2Settings.h <92:1 92:86>]
COMMENT: comment [b2Settings.h <93:1 93:64>]
SYMBOL_MACRO b2_velocityThreshold [b2Settings.h <94:9 <94:9 94:28> 94:30>]
COMMENT: comment [b2Settings.h <96:1 96:88>]
COMMENT: comment [b2Settings.h <97:1 97:23>]
SYMBOL_MACRO b2_maxLinearCorrection [b2Settings.h <98:9 <98:9 98:30> 98:32>]
COMMENT: comment [b2Settings.h <100:1 100:89>]
COMMENT: comment [b2Settings.h <101:1 101:23>]
SYMBOL_MACRO b2_maxAngularCorrection [b2Settings.h <102:9 <102:9 102:31> 102:55>]
COMMENT: comment [b2Settings.h <104:1 104:80>]
COMMENT: comment [b2Settings.h <105:1 105:70>]
SYMBOL_MACRO b2_maxTranslation [b2Settings.h <106:9 <106:9 106:25> 106:28>]
SYMBOL_MACRO b2_maxTranslationSquared [b2Settings.h <107:9 <107:9 107:32> 107:71>]
COMMENT: comment [b2Settings.h <109:1 109:81>]
COMMENT: comment [b2Settings.h <110:1 110:70>]
SYMBOL_MACRO b2_maxRotation [b2Settings.h <111:9 <111:9 111:22> 111:39>]
SYMBOL_MACRO b2_maxRotationSquared [b2Settings.h <112:9 <112:9 112:29> 112:63>]
COMMENT: comment [b2Settings.h <114:1 114:88>]
COMMENT: comment [b2Settings.h <115:1 115:89>]
COMMENT: comment [b2Settings.h <116:1 116:18>]
SYMBOL_MACRO b2_baumgarte [b2Settings.h <117:9 <117:9 117:20> 117:24>]
SYMBOL_MACRO b2_toiBaugarte [b2Settings.h <118:9 <118:9 118:22> 118:26>]
COMMENT: comment [b2Settings.h <121:1 121:9>]
COMMENT: comment [b2Settings.h <123:1 123:67>]
SYMBOL_MACRO b2_timeToSleep [b2Settings.h <124:9 <124:9 124:22> 124:26>]
COMMENT: comment [b2Settings.h <126:1 126:72>]
SYMBOL_MACRO b2_linearSleepTolerance [b2Settings.h <127:9 <127:9 127:31> 127:33>]
COMMENT: comment [b2Settings.h <129:1 129:73>]
SYMBOL_MACRO b2_angularSleepTolerance [b2Settings.h <130:9 <130:9 130:32> 130:55>]
COMMENT: comment [b2Settings.h <132:1 132:21>]
COMMENT: comment [b2Settings.h <134:1 134:62>]
COMMENT: comment [b2Settings.h <137:1 137:71>]
COMMENT: comment [b2Settings.h <140:1 140:22>]
COMMENT: comment [b2Settings.h <143:1 143:30>]
COMMENT: comment [b2Settings.h <144:1 144:57>]
COMMENT: comment [b2Settings.h <147:16 147:40>]
COMMENT: comment [b2Settings.h <148:16 148:40>]
COMMENT: comment [b2Settings.h <149:19 149:33>]
COMMENT: comment [b2Settings.h <152:1 152:21>]
COMMENT: comment [b2BlockAllocator.h <32:1 32:63>]
COMMENT: comment [b2BlockAllocator.h <33:1 33:54>]
COMMENT: comment [b2BlockAllocator.h <34:1 34:72>]
COMMENT: comment [b2BlockAllocator.h <41:2 41:88>]
COMMENT: comment [b2BlockAllocator.h <44:2 44:83>]
COMMENT: comment [b2BlockAllocator.cpp <26:7 26:11>]
COMMENT: comment [b2BlockAllocator.cpp <27:7 27:11>]
COMMENT: comment [b2BlockAllocator.cpp <28:7 28:11>]
COMMENT: comment [b2BlockAllocator.cpp <29:7 29:11>]
COMMENT: comment [b2BlockAllocator.cpp <30:7 30:11>]
COMMENT: comment [b2BlockAllocator.cpp <31:7 31:11>]
COMMENT: comment [b2BlockAllocator.cpp <32:7 32:11>]
COMMENT: comment [b2BlockAllocator.cpp <33:7 33:11>]
COMMENT: comment [b2BlockAllocator.cpp <34:7 34:11>]
COMMENT: comment [b2BlockAllocator.cpp <35:7 35:11>]
COMMENT: comment [b2BlockAllocator.cpp <36:7 36:12>]
COMMENT: comment [b2BlockAllocator.cpp <37:7 37:12>]
COMMENT: comment [b2BlockAllocator.cpp <38:7 38:12>]
COMMENT: comment [b2BlockAllocator.cpp <39:7 39:12>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <57:2 57:9>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> UCHAR_MAX [b2BlockAllocator.cpp <57:27 57:35>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <71:4 71:11>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <102:2 102:9>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <110:2 110:9>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> _DEBUG [b2BlockAllocator.cpp <132:13 132:18>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <138:3 138:10>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <162:2 162:9>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <171:2 171:9>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> _DEBUG [b2BlockAllocator.cpp <173:8 173:13>]
SYMBOL_TYPEDEF int8 [b2Settings.h <33:21 33:24>]
SYMBOL_BUILTIN_TYPE signed char
REFERENCE_TYPE_USAGE int8 -> signed char [b2Settings.h <33:9 33:14>]
SYMBOL_TYPEDEF int16 [b2Settings.h <34:22 34:26>]
SYMBOL_BUILTIN_TYPE short
REFERENCE_TYPE_USAGE int16 -> short [b2Settings.h <34:9 34:14>]
SYMBOL_TYPEDEF int32 [b2Settings.h <35:20 35:24>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE int32 -> int [b2Settings.h <35:9 35:14>]
SYMBOL_TYPEDEF uint8 [b2Settings.h <36:23 36:27>]
SYMBOL_BUILTIN_TYPE unsigned char
REFERENCE_TYPE_USAGE uint8 -> unsigned char [b2Settings.h <36:9 36:16>]
SYMBOL_TYPEDEF uint16 [b2Settings.h <37:24 37:29>]
SYMBOL_BUILTIN_TYPE unsigned short
REFERENCE_TYPE_USAGE uint16 -> unsigned short [b2Settings.h <37:9 37:16>]
SYMBOL_TYPEDEF uint32 [b2Settings.h <38:22 38:27>]
SYMBOL_BUILTIN_TYPE unsigned int
REFERENCE_TYPE_USAGE uint32 -> unsigned int [b2Settings.h <38:9 38:16>]
SYMBOL_TYPEDEF float32 [b2Settings.h <39:15 39:21>]
SYMBOL_BUILTIN_TYPE float
REFERENCE_TYPE_USAGE float32 -> float [b2Settings.h <39:9 39:13>]
SYMBOL_TYPEDEF float64 [b2Settings.h <40:16 40:22>]
SYMBOL_BUILTIN_TYPE double
REFERENCE_TYPE_USAGE float64 -> double [b2Settings.h <40:9 40:14>]
SYMBOL_FUNCTION void * b2Alloc(int32) [b2Settings.h <135:7 135:13>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void * b2Alloc(int32) -> void [b2Settings.h <135:1 135:4>]
LOCAL_SYMBOL: b2Settings.h<135:21> [b2Settings.h <135:21 135:24>]
REFERENCE_TYPE_USAGE void * b2Alloc(int32) -> int32 [b2Settings.h <135:15 135:19>]
SYMBOL_FUNCTION void b2Free(void *) [b2Settings.h <138:6 138:11>]
REFERENCE_TYPE_USAGE void b2Free(void *) -> void [b2Settings.h <138:1 138:4>]
LOCAL_SYMBOL: b2Settings.h<138:19> [b2Settings.h <138:19 138:21>]
REFERENCE_TYPE_USAGE void b2Free(void *) -> void [b2Settings.h <138:13 138:16>]
SYMBOL_FUNCTION void b2Log(const char *) [b2Settings.h <141:6 141:10>]
REFERENCE_TYPE_USAGE void b2Log(const char *) -> void [b2Settings.h <141:1 141:4>]
LOCAL_SYMBOL: b2Settings.h<141:24> [b2Settings.h <141:24 141:29>]
SYMBOL_BUILTIN_TYPE char
REFERENCE_TYPE_USAGE void b2Log(const char *) -> char [b2Settings.h <141:18 141:21>]
SYMBOL_STRUCT b2Version [b2Settings.h <145:1 <145:8 145:16> 150:1>]
SYMBOL_FIELD public int32 b2Version::major [b2Settings.h <147:8 147:12>]
REFERENCE_TYPE_USAGE int32 b2Version::major -> int32 [b2Settings.h <147:2 147:6>]
SYMBOL_FIELD public int32 b2Version::minor [b2Settings.h <148:8 148:12>]
REFERENCE_TYPE_USAGE int32 b2Version::minor -> int32 [b2Settings.h <148:2 148:6>]
SYMBOL_FIELD public int32 b2Version::revision [b2Settings.h <149:8 149:15>]
REFERENCE_TYPE_USAGE int32 b2Version::revision -> int32 [b2Settings.h <149:2 149:6>]
SYMBOL_GLOBAL_VARIABLE b2Version b2_version [b2Settings.h <153:18 153:27>]
REFERENCE_TYPE_USAGE b2Version b2_version -> b2Version [b2Settings.h <153:8 153:16>]
SYMBOL_GLOBAL_VARIABLE const int32 b2_chunkSize [b2BlockAllocator.h <24:13 24:24>]
REFERENCE_TYPE_USAGE const int32 b2_chunkSize -> int32 [b2BlockAllocator.h <24:7 24:11>]
SYMBOL_GLOBAL_VARIABLE const int32 b2_maxBlockSize [b2BlockAllocator.h <25:13 25:27>]
REFERENCE_TYPE_USAGE const int32 b2_maxBlockSize -> int32 [b2BlockAllocator.h <25:7 25:11>]
SYMBOL_GLOBAL_VARIABLE const int32 b2_blockSizes [b2BlockAllocator.h <26:13 26:25>]
REFERENCE_TYPE_USAGE const int32 b2_blockSizes -> int32 [b2BlockAllocator.h <26:7 26:11>]
SYMBOL_GLOBAL_VARIABLE const int32 b2_chunkArrayIncrement [b2BlockAllocator.h <27:13 27:34>]
REFERENCE_TYPE_USAGE const int32 b2_chunkArrayIncrement -> int32 [b2BlockAllocator.h <27:7 27:11>]
SYMBOL_STRUCT b2Block [b2BlockAllocator.h <29:8 29:14>]
SYMBOL_STRUCT b2Chunk [b2BlockAllocator.h <30:8 30:14>]
SYMBOL_CLASS b2BlockAllocator [b2BlockAllocator.h <35:1 <35:7 35:22> 60:1>]
SYMBOL_METHOD public void b2BlockAllocator::b2BlockAllocator() [b2BlockAllocator.h <38:2 38:17>]
SYMBOL_METHOD public void b2BlockAllocator::~b2BlockAllocator() [b2BlockAllocator.h <39:2 39:18>]
SYMBOL_METHOD public void * b2BlockAllocator::Allocate(int32) [b2BlockAllocator.h <42:8 42:15>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> void [b2BlockAllocator.h <42:2 42:5>]
LOCAL_SYMBOL: b2BlockAllocator.h<42:23> [b2BlockAllocator.h <42:23 42:26>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.h <42:17 42:21>]
SYMBOL_METHOD public void b2BlockAllocator::Free(void *, int32) [b2BlockAllocator.h <45:7 45:10>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.h <45:2 45:5>]
LOCAL_SYMBOL: b2BlockAllocator.h<45:18> [b2BlockAllocator.h <45:18 45:18>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.h <45:12 45:15>]
LOCAL_SYMBOL: b2BlockAllocator.h<45:27> [b2BlockAllocator.h <45:27 45:30>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> int32 [b2BlockAllocator.h <45:21 45:25>]
SYMBOL_METHOD public void b2BlockAllocator::Clear() [b2BlockAllocator.h <47:7 47:11>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Clear() -> void [b2BlockAllocator.h <47:2 47:5>]
SYMBOL_FIELD private b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.h <51:11 51:18>]
REFERENCE_TYPE_USAGE b2Chunk * b2BlockAllocator::m_chunks -> b2Chunk [b2BlockAllocator.h <51:2 51:8>]
SYMBOL_FIELD private int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.h <52:8 52:19>]
REFERENCE_TYPE_USAGE int32 b2BlockAllocator::m_chunkCount -> int32 [b2BlockAllocator.h <52:2 52:6>]
SYMBOL_FIELD private int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.h <53:8 53:19>]
REFERENCE_TYPE_USAGE int32 b2BlockAllocator::m_chunkSpace -> int32 [b2BlockAllocator.h <53:2 53:6>]
SYMBOL_FIELD private b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.h <55:11 55:21>]
REFERENCE_TYPE_USAGE b2Block * [] b2BlockAllocator::m_freeLists -> b2Block [b2BlockAllocator.h <55:2 55:8>]
REFERENCE_USAGE b2Block * [] b2BlockAllocator::m_freeLists -> const int32 b2_blockSizes [b2BlockAllocator.h <55:23 55:35>]
SYMBOL_FIELD private static int32 [] b2BlockAllocator::s_blockSizes [b2BlockAllocator.h <57:15 57:26>]
REFERENCE_TYPE_USAGE static int32 [] b2BlockAllocator::s_blockSizes -> int32 [b2BlockAllocator.h <57:9 57:13>]
REFERENCE_USAGE static int32 [] b2BlockAllocator::s_blockSizes -> const int32 b2_blockSizes [b2BlockAllocator.h <57:28 57:40>]
SYMBOL_FIELD private static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.h <58:15 58:31>]
REFERENCE_TYPE_USAGE static uint8 [] b2BlockAllocator::s_blockSizeLookup -> uint8 [b2BlockAllocator.h <58:9 58:13>]
REFERENCE_USAGE static uint8 [] b2BlockAllocator::s_blockSizeLookup -> const int32 b2_maxBlockSize [b2BlockAllocator.h <58:33 58:47>]
SYMBOL_FIELD private static bool b2BlockAllocator::s_blockSizeLookupInitialized [b2BlockAllocator.h <59:14 59:41>]
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE static bool b2BlockAllocator::s_blockSizeLookupInitialized -> bool [b2BlockAllocator.h <59:9 59:12>]
SYMBOL_METHOD public void b2BlockAllocator::b2BlockAllocator(const b2BlockAllocator &) [b2BlockAllocator.h <35:7 35:22>]
SYMBOL_FIELD private static int32 [] b2BlockAllocator::s_blockSizes [b2BlockAllocator.cpp <24:25 24:36>]
SYMBOL_CLASS b2BlockAllocator
QUALIFIER: b2BlockAllocator [b2BlockAllocator.cpp <24:7 24:22>]
REFERENCE_TYPE_USAGE static int32 [] b2BlockAllocator::s_blockSizes -> int32 [b2BlockAllocator.cpp <24:1 24:5>]
REFERENCE_USAGE static int32 [] b2BlockAllocator::s_blockSizes -> const int32 b2_blockSizes [b2BlockAllocator.cpp <24:38 24:50>]
SYMBOL_FIELD private static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.cpp <41:25 41:41>]
QUALIFIER: b2BlockAllocator [b2BlockAllocator.cpp <41:7 41:22>]
REFERENCE_TYPE_USAGE static uint8 [] b2BlockAllocator::s_blockSizeLookup -> uint8 [b2BlockAllocator.cpp <41:1 41:5>]
REFERENCE_USAGE static uint8 [] b2BlockAllocator::s_blockSizeLookup -> const int32 b2_maxBlockSize [b2BlockAllocator.cpp <41:43 41:57>]
SYMBOL_FIELD private static bool b2BlockAllocator::s_blockSizeLookupInitialized [b2BlockAllocator.cpp <42:24 42:51>]
QUALIFIER: b2BlockAllocator [b2BlockAllocator.cpp <42:6 42:21>]
REFERENCE_TYPE_USAGE static bool b2BlockAllocator::s_blockSizeLookupInitialized -> bool [b2BlockAllocator.cpp <42:1 42:4>]
SYMBOL_STRUCT b2Chunk [b2BlockAllocator.cpp <44:1 <44:8 44:14> 48:1>]
SYMBOL_FIELD public int32 b2Chunk::blockSize [b2BlockAllocator.cpp <46:8 46:16>]
REFERENCE_TYPE_USAGE int32 b2Chunk::blockSize -> int32 [b2BlockAllocator.cpp <46:2 46:6>]
SYMBOL_FIELD public b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <47:11 47:16>]
REFERENCE_TYPE_USAGE b2Block * b2Chunk::blocks -> b2Block [b2BlockAllocator.cpp <47:2 47:8>]
SYMBOL_STRUCT b2Block [b2BlockAllocator.cpp <50:1 <50:8 50:14> 53:1>]
SYMBOL_FIELD public b2Block * b2Block::next [b2BlockAllocator.cpp <52:11 52:14>]
REFERENCE_TYPE_USAGE b2Block * b2Block::next -> b2Block [b2BlockAllocator.cpp <52:2 52:8>]
SYMBOL_METHOD public void b2BlockAllocator::b2BlockAllocator() [b2BlockAllocator.cpp <55:1 <55:19 55:34> 85:1>]
QUALIFIER: b2BlockAllocator [b2BlockAllocator.cpp <55:1 55:16>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> void [b2BlockAllocator.cpp <57:2 57:9>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> const int32 b2_blockSizes [b2BlockAllocator.cpp <57:11 57:23>]
SYMBOL_FUNCTION void _wassert(const wchar_t *, const wchar_t *, unsigned int)
REFERENCE_CALL void b2BlockAllocator::b2BlockAllocator() -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2BlockAllocator.cpp <57:2 57:9>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> unsigned int [b2BlockAllocator.cpp <57:2 57:9>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <59:2 59:13>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> const int32 b2_chunkArrayIncrement [b2BlockAllocator.cpp <59:17 59:38>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <60:2 60:13>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <61:2 61:9>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Chunk [b2BlockAllocator.cpp <61:14 61:20>]
SYMBOL_FUNCTION void * b2Alloc(int32)
REFERENCE_CALL void b2BlockAllocator::b2BlockAllocator() -> void * b2Alloc(int32) [b2BlockAllocator.cpp <61:23 61:29>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <61:31 61:42>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Chunk [b2BlockAllocator.cpp <61:53 61:59>]
SYMBOL_FUNCTION void * memset(void *, int, size_t)
REFERENCE_CALL void b2BlockAllocator::b2BlockAllocator() -> void * memset(void *, int, size_t) [b2BlockAllocator.cpp <63:2 63:7>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <63:9 63:16>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <63:22 63:33>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Chunk [b2BlockAllocator.cpp <63:44 63:50>]
REFERENCE_CALL void b2BlockAllocator::b2BlockAllocator() -> void * memset(void *, int, size_t) [b2BlockAllocator.cpp <64:2 64:7>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <64:9 64:19>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <64:32 64:42>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> static bool b2BlockAllocator::s_blockSizeLookupInitialized [b2BlockAllocator.cpp <66:6 66:33>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <68:9 68:9>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 [b2BlockAllocator.cpp <68:3 68:7>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <69:14 69:14>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 [b2BlockAllocator.cpp <69:8 69:12>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <69:21 69:21>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> const int32 b2_maxBlockSize [b2BlockAllocator.cpp <69:26 69:40>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <69:45 69:45>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> void [b2BlockAllocator.cpp <71:4 71:11>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <71:13 71:13>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> const int32 b2_blockSizes [b2BlockAllocator.cpp <71:17 71:29>]
REFERENCE_CALL void b2BlockAllocator::b2BlockAllocator() -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2BlockAllocator.cpp <71:4 71:11>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> unsigned int [b2BlockAllocator.cpp <71:4 71:11>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <72:8 72:8>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> static int32 [] b2BlockAllocator::s_blockSizes [b2BlockAllocator.cpp <72:13 72:24>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <72:26 72:26>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.cpp <74:5 74:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <74:23 74:23>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> uint8 [b2BlockAllocator.cpp <74:29 74:33>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <74:35 74:35>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <78:7 78:7>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.cpp <79:5 79:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <79:23 79:23>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> uint8 [b2BlockAllocator.cpp <79:29 79:33>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <79:35 79:35>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> static bool b2BlockAllocator::s_blockSizeLookupInitialized [b2BlockAllocator.cpp <83:3 83:30>]
SYMBOL_METHOD public void b2BlockAllocator::~b2BlockAllocator() [b2BlockAllocator.cpp <87:1 <87:19 87:35> 95:1>]
QUALIFIER: b2BlockAllocator [b2BlockAllocator.cpp <87:1 87:16>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<89:13> [b2BlockAllocator.cpp <89:13 89:13>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::~b2BlockAllocator() -> int32 [b2BlockAllocator.cpp <89:7 89:11>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<89:13> [b2BlockAllocator.cpp <89:20 89:20>]
REFERENCE_USAGE void b2BlockAllocator::~b2BlockAllocator() -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <89:24 89:35>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<89:13> [b2BlockAllocator.cpp <89:40 89:40>]
SYMBOL_FUNCTION void b2Free(void *)
REFERENCE_CALL void b2BlockAllocator::~b2BlockAllocator() -> void b2Free(void *) [b2BlockAllocator.cpp <91:3 91:8>]
REFERENCE_USAGE void b2BlockAllocator::~b2BlockAllocator() -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <91:22 91:27>]
REFERENCE_USAGE void b2BlockAllocator::~b2BlockAllocator() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <91:10 91:17>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<89:13> [b2BlockAllocator.cpp <91:19 91:19>]
REFERENCE_CALL void b2BlockAllocator::~b2BlockAllocator() -> void b2Free(void *) [b2BlockAllocator.cpp <94:2 94:7>]
REFERENCE_USAGE void b2BlockAllocator::~b2BlockAllocator() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <94:9 94:16>]
SYMBOL_METHOD public void * b2BlockAllocator::Allocate(int32) [b2BlockAllocator.cpp <97:1 <97:25 97:32> 153:1>]
QUALIFIER: b2BlockAllocator [b2BlockAllocator.cpp <97:7 97:22>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> void [b2BlockAllocator.cpp <97:1 97:4>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <97:40 97:43>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.cpp <97:34 97:38>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <99:6 99:9>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> void [b2BlockAllocator.cpp <102:2 102:9>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <102:15 102:18>]
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2BlockAllocator.cpp <102:2 102:9>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> unsigned int [b2BlockAllocator.cpp <102:2 102:9>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <104:6 104:9>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_maxBlockSize [b2BlockAllocator.cpp <104:13 104:27>]
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void * b2Alloc(int32) [b2BlockAllocator.cpp <106:10 106:16>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <106:18 106:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <109:8 109:12>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.cpp <109:2 109:6>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.cpp <109:16 109:32>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <109:34 109:37>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> void [b2BlockAllocator.cpp <110:2 110:9>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <110:16 110:20>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <110:25 110:29>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_blockSizes [b2BlockAllocator.cpp <110:33 110:45>]
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2BlockAllocator.cpp <110:2 110:9>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> unsigned int [b2BlockAllocator.cpp <110:2 110:9>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <112:6 112:16>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <112:18 112:22>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<114:12> [b2BlockAllocator.cpp <114:12 114:16>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <114:3 114:9>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <114:20 114:30>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <114:32 114:36>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <115:3 115:13>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <115:15 115:19>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Block::next [b2BlockAllocator.cpp <115:31 115:34>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<114:12> [b2BlockAllocator.cpp <115:24 115:28>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<114:12> [b2BlockAllocator.cpp <116:10 116:14>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <120:7 120:18>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <120:23 120:34>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<122:13> [b2BlockAllocator.cpp <122:13 122:21>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <122:4 122:10>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <122:25 122:32>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <123:4 123:15>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_chunkArrayIncrement [b2BlockAllocator.cpp <123:20 123:41>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <124:4 124:11>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <124:16 124:22>]
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void * b2Alloc(int32) [b2BlockAllocator.cpp <124:25 124:31>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <124:33 124:44>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <124:55 124:61>]
SYMBOL_FUNCTION void * memcpy(void *, const void *, size_t)
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void * memcpy(void *, const void *, size_t) [b2BlockAllocator.cpp <125:4 125:9>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <125:11 125:18>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<122:13> [b2BlockAllocator.cpp <125:21 125:29>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <125:32 125:43>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <125:54 125:60>]
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void * memset(void *, int, size_t) [b2BlockAllocator.cpp <126:4 126:9>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <126:11 126:18>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <126:22 126:33>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_chunkArrayIncrement [b2BlockAllocator.cpp <126:39 126:60>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <126:71 126:77>]
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void b2Free(void *) [b2BlockAllocator.cpp <127:4 127:9>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<122:13> [b2BlockAllocator.cpp <127:11 127:19>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <130:12 130:16>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <130:3 130:9>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <130:20 130:27>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <130:31 130:42>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <131:10 131:15>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <131:3 131:7>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <131:20 131:26>]
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void * b2Alloc(int32) [b2BlockAllocator.cpp <131:29 131:35>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_chunkSize [b2BlockAllocator.cpp <131:37 131:48>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <135:9 135:17>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.cpp <135:3 135:7>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> static int32 [] b2BlockAllocator::s_blockSizes [b2BlockAllocator.cpp <135:21 135:32>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <135:34 135:38>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2Chunk::blockSize [b2BlockAllocator.cpp <136:10 136:18>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <136:3 136:7>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <136:22 136:30>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<137:9> [b2BlockAllocator.cpp <137:9 137:18>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.cpp <137:3 137:7>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_chunkSize [b2BlockAllocator.cpp <137:22 137:33>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <137:37 137:45>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> void [b2BlockAllocator.cpp <138:3 138:10>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<137:9> [b2BlockAllocator.cpp <138:12 138:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <138:25 138:33>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_chunkSize [b2BlockAllocator.cpp <138:38 138:49>]
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2BlockAllocator.cpp <138:3 138:10>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> unsigned int [b2BlockAllocator.cpp <138:3 138:10>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<139:14> [b2BlockAllocator.cpp <139:14 139:14>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.cpp <139:8 139:12>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<139:14> [b2BlockAllocator.cpp <139:21 139:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<137:9> [b2BlockAllocator.cpp <139:25 139:34>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<139:14> [b2BlockAllocator.cpp <139:43 139:43>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<141:13> [b2BlockAllocator.cpp <141:13 141:17>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <141:4 141:10>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <141:22 141:28>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int8 [b2BlockAllocator.cpp <141:33 141:36>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <141:46 141:51>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <141:39 141:43>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <141:55 141:63>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<139:14> [b2BlockAllocator.cpp <141:67 141:67>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<142:13> [b2BlockAllocator.cpp <142:13 142:16>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <142:4 142:10>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <142:21 142:27>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int8 [b2BlockAllocator.cpp <142:32 142:35>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <142:45 142:50>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <142:38 142:42>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <142:54 142:62>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<139:14> [b2BlockAllocator.cpp <142:67 142:67>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Block::next [b2BlockAllocator.cpp <143:11 143:14>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<141:13> [b2BlockAllocator.cpp <143:4 143:8>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<142:13> [b2BlockAllocator.cpp <143:18 143:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<145:12> [b2BlockAllocator.cpp <145:12 145:15>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <145:3 145:9>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <145:20 145:26>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int8 [b2BlockAllocator.cpp <145:31 145:34>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <145:44 145:49>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <145:37 145:41>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <145:53 145:61>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<137:9> [b2BlockAllocator.cpp <145:66 145:75>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Block::next [b2BlockAllocator.cpp <146:9 146:12>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<145:12> [b2BlockAllocator.cpp <146:3 146:6>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <148:3 148:13>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <148:15 148:19>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Block::next [b2BlockAllocator.cpp <148:39 148:42>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <148:31 148:36>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <148:24 148:28>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <149:5 149:16>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <151:17 151:22>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <151:10 151:14>]
SYMBOL_METHOD public void b2BlockAllocator::Free(void *, int32) [b2BlockAllocator.cpp <155:1 <155:24 155:27> 202:1>]
QUALIFIER: b2BlockAllocator [b2BlockAllocator.cpp <155:6 155:21>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.cpp <155:1 155:4>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:35> [b2BlockAllocator.cpp <155:35 155:35>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.cpp <155:29 155:32>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:44> [b2BlockAllocator.cpp <155:44 155:47>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> int32 [b2BlockAllocator.cpp <155:38 155:42>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:44> [b2BlockAllocator.cpp <157:6 157:9>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.cpp <162:2 162:9>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:44> [b2BlockAllocator.cpp <162:15 162:18>]
REFERENCE_CALL void b2BlockAllocator::Free(void *, int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2BlockAllocator.cpp <162:2 162:9>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> unsigned int [b2BlockAllocator.cpp <162:2 162:9>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:44> [b2BlockAllocator.cpp <164:6 164:9>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> const int32 b2_maxBlockSize [b2BlockAllocator.cpp <164:13 164:27>]
REFERENCE_CALL void b2BlockAllocator::Free(void *, int32) -> void b2Free(void *) [b2BlockAllocator.cpp <166:3 166:8>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:35> [b2BlockAllocator.cpp <166:10 166:10>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<170:8> [b2BlockAllocator.cpp <170:8 170:12>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> int32 [b2BlockAllocator.cpp <170:2 170:6>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.cpp <170:16 170:32>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:44> [b2BlockAllocator.cpp <170:34 170:37>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.cpp <171:2 171:9>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<170:8> [b2BlockAllocator.cpp <171:16 171:20>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<170:8> [b2BlockAllocator.cpp <171:25 171:29>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> const int32 b2_blockSizes [b2BlockAllocator.cpp <171:33 171:45>]
REFERENCE_CALL void b2BlockAllocator::Free(void *, int32) -> void _wassert(const wchar_t *, const wchar_t *, unsigned int) [b2BlockAllocator.cpp <171:2 171:9>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> unsigned int [b2BlockAllocator.cpp <171:2 171:9>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<199:11> [b2BlockAllocator.cpp <199:11 199:15>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> b2Block [b2BlockAllocator.cpp <199:2 199:8>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> b2Block [b2BlockAllocator.cpp <199:20 199:26>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:35> [b2BlockAllocator.cpp <199:29 199:29>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> b2Block * b2Block::next [b2BlockAllocator.cpp <200:9 200:12>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<199:11> [b2BlockAllocator.cpp <200:2 200:6>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <200:16 200:26>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<170:8> [b2BlockAllocator.cpp <200:28 200:32>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <201:2 201:12>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<170:8> [b2BlockAllocator.cpp <201:14 201:18>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<199:11> [b2BlockAllocator.cpp <201:23 201:27>]
SYMBOL_METHOD public void b2BlockAllocator::Clear() [b2BlockAllocator.cpp <204:1 <204:24 204:28> 215:1>]
QUALIFIER: b2BlockAllocator [b2BlockAllocator.cpp <204:6 204:21>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Clear() -> void [b2BlockAllocator.cpp <204:1 204:4>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<206:13> [b2BlockAllocator.cpp <206:13 206:13>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Clear() -> int32 [b2BlockAllocator.cpp <206:7 206:11>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<206:13> [b2BlockAllocator.cpp <206:20 206:20>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <206:24 206:35>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<206:13> [b2BlockAllocator.cpp <206:40 206:40>]
REFERENCE_CALL void b2BlockAllocator::Clear() -> void b2Free(void *) [b2BlockAllocator.cpp <208:3 208:8>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <208:22 208:27>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <208:10 208:17>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<206:13> [b2BlockAllocator.cpp <208:19 208:19>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <211:2 211:13>]
REFERENCE_CALL void b2BlockAllocator::Clear() -> void * memset(void *, int, size_t) [b2BlockAllocator.cpp <212:2 212:7>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <212:9 212:16>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <212:22 212:33>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Clear() -> b2Chunk [b2BlockAllocator.cpp <212:44 212:50>]
REFERENCE_CALL void b2BlockAllocator::Clear() -> void * memset(void *, int, size_t) [b2BlockAllocator.cpp <214:2 214:7>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <214:9 214:19>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <214:32 214:42>]
