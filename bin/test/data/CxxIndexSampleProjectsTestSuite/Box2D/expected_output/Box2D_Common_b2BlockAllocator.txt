FILE: b2BlockAllocator.cpp
FILE: b2BlockAllocator.cpp
COMMENT: comment [b2BlockAllocator.cpp <1:1 17:3>]
FILE: b2BlockAllocator.cpp
FILE: b2BlockAllocator.cpp
FILE: b2BlockAllocator.cpp
COMMENT: comment [b2BlockAllocator.cpp <26:7 26:11>]
COMMENT: comment [b2BlockAllocator.cpp <27:7 27:11>]
COMMENT: comment [b2BlockAllocator.cpp <28:7 28:11>]
COMMENT: comment [b2BlockAllocator.cpp <29:7 29:11>]
COMMENT: comment [b2BlockAllocator.cpp <30:7 30:11>]
COMMENT: comment [b2BlockAllocator.cpp <31:7 31:11>]
COMMENT: comment [b2BlockAllocator.cpp <32:7 32:11>]
COMMENT: comment [b2BlockAllocator.cpp <33:7 33:11>]
COMMENT: comment [b2BlockAllocator.cpp <34:7 34:11>]
COMMENT: comment [b2BlockAllocator.cpp <35:7 35:11>]
COMMENT: comment [b2BlockAllocator.cpp <36:7 36:12>]
COMMENT: comment [b2BlockAllocator.cpp <37:7 37:12>]
COMMENT: comment [b2BlockAllocator.cpp <38:7 38:12>]
COMMENT: comment [b2BlockAllocator.cpp <39:7 39:12>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <57:2 57:9>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> UCHAR_MAX [b2BlockAllocator.cpp <57:27 57:35>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:23 34:31>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:47 34:55>]
REFERENCE_MACRO_USAGE assert.h -> __FILE__ [assert.h <34:57 34:64>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> __LINE__ [assert.h <34:79 34:86>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <71:4 71:11>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:23 34:31>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:47 34:55>]
REFERENCE_MACRO_USAGE assert.h -> __FILE__ [assert.h <34:57 34:64>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> __LINE__ [assert.h <34:79 34:86>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <102:2 102:9>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:23 34:31>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:47 34:55>]
REFERENCE_MACRO_USAGE assert.h -> __FILE__ [assert.h <34:57 34:64>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> __LINE__ [assert.h <34:79 34:86>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <110:2 110:9>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:23 34:31>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:47 34:55>]
REFERENCE_MACRO_USAGE assert.h -> __FILE__ [assert.h <34:57 34:64>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> __LINE__ [assert.h <34:79 34:86>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> _DEBUG [b2BlockAllocator.cpp <132:13 132:18>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <138:3 138:10>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:23 34:31>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:47 34:55>]
REFERENCE_MACRO_USAGE assert.h -> __FILE__ [assert.h <34:57 34:64>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> __LINE__ [assert.h <34:79 34:86>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <162:2 162:9>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:23 34:31>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:47 34:55>]
REFERENCE_MACRO_USAGE assert.h -> __FILE__ [assert.h <34:57 34:64>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> __LINE__ [assert.h <34:79 34:86>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> b2Assert [b2BlockAllocator.cpp <171:2 171:9>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:23 34:31>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:47 34:55>]
REFERENCE_MACRO_USAGE assert.h -> __FILE__ [assert.h <34:57 34:64>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> __LINE__ [assert.h <34:79 34:86>]
REFERENCE_MACRO_USAGE b2BlockAllocator.cpp -> _DEBUG [b2BlockAllocator.cpp <173:8 173:13>]
SYMBOL_FIELD private static int32 [] b2BlockAllocator::s_blockSizes [b2BlockAllocator.cpp <24:25 24:36>]
SYMBOL_CLASS b2BlockAllocator
REFERENCE_TYPE_USAGE static int32 [] b2BlockAllocator::s_blockSizes -> int32 [b2BlockAllocator.cpp <24:1 24:5>]
REFERENCE_USAGE static int32 [] b2BlockAllocator::s_blockSizes -> const int32 b2_blockSizes [b2BlockAllocator.cpp <24:38 24:50>]
SYMBOL_FIELD private static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.cpp <41:25 41:41>]
SYMBOL_CLASS b2BlockAllocator
REFERENCE_TYPE_USAGE static uint8 [] b2BlockAllocator::s_blockSizeLookup -> uint8 [b2BlockAllocator.cpp <41:1 41:5>]
REFERENCE_USAGE static uint8 [] b2BlockAllocator::s_blockSizeLookup -> const int32 b2_maxBlockSize [b2BlockAllocator.cpp <41:43 41:57>]
SYMBOL_FIELD private static bool b2BlockAllocator::s_blockSizeLookupInitialized [b2BlockAllocator.cpp <42:24 42:51>]
SYMBOL_CLASS b2BlockAllocator
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE static bool b2BlockAllocator::s_blockSizeLookupInitialized -> bool [b2BlockAllocator.cpp <42:1 42:4>]
SYMBOL_STRUCT b2Chunk [b2BlockAllocator.cpp <44:1 <44:8 44:14> 48:1>]
SYMBOL_FIELD public int32 b2Chunk::blockSize [b2BlockAllocator.cpp <46:8 46:16>]
REFERENCE_TYPE_USAGE int32 b2Chunk::blockSize -> int32 [b2BlockAllocator.cpp <46:2 46:6>]
SYMBOL_FIELD public b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <47:11 47:16>]
REFERENCE_TYPE_USAGE b2Block * b2Chunk::blocks -> b2Block [b2BlockAllocator.cpp <47:2 47:8>]
SYMBOL_STRUCT b2Block [b2BlockAllocator.cpp <50:1 <50:8 50:14> 53:1>]
SYMBOL_FIELD public b2Block * b2Block::next [b2BlockAllocator.cpp <52:11 52:14>]
REFERENCE_TYPE_USAGE b2Block * b2Block::next -> b2Block [b2BlockAllocator.cpp <52:2 52:8>]
SYMBOL_METHOD public void b2BlockAllocator::b2BlockAllocator() [b2BlockAllocator.cpp <55:1 <55:19 55:34> 85:1>]
SYMBOL_CLASS b2BlockAllocator
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> const int32 b2_blockSizes [b2BlockAllocator.cpp <57:11 57:23>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <59:2 59:13>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> const int32 b2_chunkArrayIncrement [b2BlockAllocator.cpp <59:17 59:38>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <60:2 60:13>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <61:2 61:9>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Chunk [b2BlockAllocator.cpp <61:14 61:20>]
SYMBOL_FUNCTION void * b2Alloc(int32)
REFERENCE_CALL void b2BlockAllocator::b2BlockAllocator() -> void * b2Alloc(int32) [b2BlockAllocator.cpp <61:23 61:29>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <61:31 61:42>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Chunk [b2BlockAllocator.cpp <61:53 61:59>]
SYMBOL_FUNCTION void * memset(void *, int, size_t)
REFERENCE_CALL void b2BlockAllocator::b2BlockAllocator() -> void * memset(void *, int, size_t) [b2BlockAllocator.cpp <63:2 63:7>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <63:9 63:16>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <63:22 63:33>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Chunk [b2BlockAllocator.cpp <63:44 63:50>]
SYMBOL_FUNCTION void * memset(void *, int, size_t)
REFERENCE_CALL void b2BlockAllocator::b2BlockAllocator() -> void * memset(void *, int, size_t) [b2BlockAllocator.cpp <64:2 64:7>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <64:9 64:19>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <64:32 64:42>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> static bool b2BlockAllocator::s_blockSizeLookupInitialized [b2BlockAllocator.cpp <66:6 66:33>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <68:9 68:9>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 [b2BlockAllocator.cpp <68:3 68:7>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <69:14 69:14>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> int32 [b2BlockAllocator.cpp <69:8 69:12>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <69:21 69:21>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> const int32 b2_maxBlockSize [b2BlockAllocator.cpp <69:26 69:40>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <69:45 69:45>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <71:13 71:13>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> const int32 b2_blockSizes [b2BlockAllocator.cpp <71:17 71:29>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <72:8 72:8>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> static int32 [] b2BlockAllocator::s_blockSizes [b2BlockAllocator.cpp <72:13 72:24>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <72:26 72:26>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.cpp <74:5 74:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <74:23 74:23>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> uint8 [b2BlockAllocator.cpp <74:29 74:33>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <74:35 74:35>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <78:7 78:7>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.cpp <79:5 79:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<69:14> [b2BlockAllocator.cpp <79:23 79:23>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::b2BlockAllocator() -> uint8 [b2BlockAllocator.cpp <79:29 79:33>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<68:9> [b2BlockAllocator.cpp <79:35 79:35>]
REFERENCE_USAGE void b2BlockAllocator::b2BlockAllocator() -> static bool b2BlockAllocator::s_blockSizeLookupInitialized [b2BlockAllocator.cpp <83:3 83:30>]
SYMBOL_METHOD public void b2BlockAllocator::~b2BlockAllocator() [b2BlockAllocator.cpp <87:1 <87:19 87:35> 95:1>]
SYMBOL_CLASS b2BlockAllocator
LOCAL_SYMBOL: b2BlockAllocator.cpp<89:13> [b2BlockAllocator.cpp <89:13 89:13>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::~b2BlockAllocator() -> int32 [b2BlockAllocator.cpp <89:7 89:11>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<89:13> [b2BlockAllocator.cpp <89:20 89:20>]
REFERENCE_USAGE void b2BlockAllocator::~b2BlockAllocator() -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <89:24 89:35>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<89:13> [b2BlockAllocator.cpp <89:40 89:40>]
SYMBOL_FUNCTION void b2Free(void *)
REFERENCE_CALL void b2BlockAllocator::~b2BlockAllocator() -> void b2Free(void *) [b2BlockAllocator.cpp <91:3 91:8>]
REFERENCE_USAGE void b2BlockAllocator::~b2BlockAllocator() -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <91:22 91:27>]
REFERENCE_USAGE void b2BlockAllocator::~b2BlockAllocator() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <91:10 91:17>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<89:13> [b2BlockAllocator.cpp <91:19 91:19>]
SYMBOL_FUNCTION void b2Free(void *)
REFERENCE_CALL void b2BlockAllocator::~b2BlockAllocator() -> void b2Free(void *) [b2BlockAllocator.cpp <94:2 94:7>]
REFERENCE_USAGE void b2BlockAllocator::~b2BlockAllocator() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <94:9 94:16>]
SYMBOL_METHOD public void * b2BlockAllocator::Allocate(int32) [b2BlockAllocator.cpp <97:1 <97:25 97:32> 153:1>]
SYMBOL_CLASS b2BlockAllocator
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> void [b2BlockAllocator.cpp <97:1 97:4>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <97:40 97:43>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.cpp <97:34 97:38>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <99:6 99:9>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <102:15 102:18>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <104:6 104:9>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_maxBlockSize [b2BlockAllocator.cpp <104:13 104:27>]
SYMBOL_FUNCTION void * b2Alloc(int32)
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void * b2Alloc(int32) [b2BlockAllocator.cpp <106:10 106:16>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <106:18 106:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <109:8 109:12>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.cpp <109:2 109:6>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.cpp <109:16 109:32>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<97:40> [b2BlockAllocator.cpp <109:34 109:37>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <110:16 110:20>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <110:25 110:29>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_blockSizes [b2BlockAllocator.cpp <110:33 110:45>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <112:6 112:16>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <112:18 112:22>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<114:12> [b2BlockAllocator.cpp <114:12 114:16>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <114:3 114:9>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <114:20 114:30>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <114:32 114:36>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <115:3 115:13>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <115:15 115:19>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Block::next [b2BlockAllocator.cpp <115:31 115:34>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<114:12> [b2BlockAllocator.cpp <115:24 115:28>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<114:12> [b2BlockAllocator.cpp <116:10 116:14>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <120:7 120:18>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <120:23 120:34>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<122:13> [b2BlockAllocator.cpp <122:13 122:21>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <122:4 122:10>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <122:25 122:32>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <123:4 123:15>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_chunkArrayIncrement [b2BlockAllocator.cpp <123:20 123:41>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <124:4 124:11>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <124:16 124:22>]
SYMBOL_FUNCTION void * b2Alloc(int32)
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void * b2Alloc(int32) [b2BlockAllocator.cpp <124:25 124:31>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <124:33 124:44>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <124:55 124:61>]
SYMBOL_FUNCTION void * memcpy(void *, const void *, size_t)
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void * memcpy(void *, const void *, size_t) [b2BlockAllocator.cpp <125:4 125:9>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <125:11 125:18>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<122:13> [b2BlockAllocator.cpp <125:21 125:29>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <125:32 125:43>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <125:54 125:60>]
SYMBOL_FUNCTION void * memset(void *, int, size_t)
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void * memset(void *, int, size_t) [b2BlockAllocator.cpp <126:4 126:9>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <126:11 126:18>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <126:22 126:33>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_chunkArrayIncrement [b2BlockAllocator.cpp <126:39 126:60>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <126:71 126:77>]
SYMBOL_FUNCTION void b2Free(void *)
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void b2Free(void *) [b2BlockAllocator.cpp <127:4 127:9>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<122:13> [b2BlockAllocator.cpp <127:11 127:19>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <130:12 130:16>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk [b2BlockAllocator.cpp <130:3 130:9>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <130:20 130:27>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <130:31 130:42>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <131:10 131:15>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <131:3 131:7>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <131:20 131:26>]
SYMBOL_FUNCTION void * b2Alloc(int32)
REFERENCE_CALL void * b2BlockAllocator::Allocate(int32) -> void * b2Alloc(int32) [b2BlockAllocator.cpp <131:29 131:35>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_chunkSize [b2BlockAllocator.cpp <131:37 131:48>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <135:9 135:17>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.cpp <135:3 135:7>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> static int32 [] b2BlockAllocator::s_blockSizes [b2BlockAllocator.cpp <135:21 135:32>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <135:34 135:38>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2Chunk::blockSize [b2BlockAllocator.cpp <136:10 136:18>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <136:3 136:7>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <136:22 136:30>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<137:9> [b2BlockAllocator.cpp <137:9 137:18>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.cpp <137:3 137:7>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_chunkSize [b2BlockAllocator.cpp <137:22 137:33>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <137:37 137:45>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<137:9> [b2BlockAllocator.cpp <138:12 138:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <138:25 138:33>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> const int32 b2_chunkSize [b2BlockAllocator.cpp <138:38 138:49>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<139:14> [b2BlockAllocator.cpp <139:14 139:14>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 [b2BlockAllocator.cpp <139:8 139:12>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<139:14> [b2BlockAllocator.cpp <139:21 139:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<137:9> [b2BlockAllocator.cpp <139:25 139:34>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<139:14> [b2BlockAllocator.cpp <139:43 139:43>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<141:13> [b2BlockAllocator.cpp <141:13 141:17>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <141:4 141:10>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <141:22 141:28>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int8 [b2BlockAllocator.cpp <141:33 141:36>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <141:46 141:51>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <141:39 141:43>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <141:55 141:63>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<139:14> [b2BlockAllocator.cpp <141:67 141:67>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<142:13> [b2BlockAllocator.cpp <142:13 142:16>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <142:4 142:10>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <142:21 142:27>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int8 [b2BlockAllocator.cpp <142:32 142:35>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <142:45 142:50>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <142:38 142:42>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <142:54 142:62>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<139:14> [b2BlockAllocator.cpp <142:67 142:67>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Block::next [b2BlockAllocator.cpp <143:11 143:14>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<141:13> [b2BlockAllocator.cpp <143:4 143:8>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<142:13> [b2BlockAllocator.cpp <143:18 143:21>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<145:12> [b2BlockAllocator.cpp <145:12 145:15>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <145:3 145:9>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block [b2BlockAllocator.cpp <145:20 145:26>]
REFERENCE_TYPE_USAGE void * b2BlockAllocator::Allocate(int32) -> int8 [b2BlockAllocator.cpp <145:31 145:34>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <145:44 145:49>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <145:37 145:41>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<135:9> [b2BlockAllocator.cpp <145:53 145:61>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<137:9> [b2BlockAllocator.cpp <145:66 145:75>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Block::next [b2BlockAllocator.cpp <146:9 146:12>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<145:12> [b2BlockAllocator.cpp <146:3 146:6>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <148:3 148:13>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<109:8> [b2BlockAllocator.cpp <148:15 148:19>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Block::next [b2BlockAllocator.cpp <148:39 148:42>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <148:31 148:36>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <148:24 148:28>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <149:5 149:16>]
REFERENCE_USAGE void * b2BlockAllocator::Allocate(int32) -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <151:17 151:22>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<130:12> [b2BlockAllocator.cpp <151:10 151:14>]
SYMBOL_METHOD public void b2BlockAllocator::Free(void *, int32) [b2BlockAllocator.cpp <155:1 <155:24 155:27> 202:1>]
SYMBOL_CLASS b2BlockAllocator
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.cpp <155:1 155:4>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:35> [b2BlockAllocator.cpp <155:35 155:35>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> void [b2BlockAllocator.cpp <155:29 155:32>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:44> [b2BlockAllocator.cpp <155:44 155:47>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> int32 [b2BlockAllocator.cpp <155:38 155:42>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:44> [b2BlockAllocator.cpp <157:6 157:9>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:44> [b2BlockAllocator.cpp <162:15 162:18>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:44> [b2BlockAllocator.cpp <164:6 164:9>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> const int32 b2_maxBlockSize [b2BlockAllocator.cpp <164:13 164:27>]
SYMBOL_FUNCTION void b2Free(void *)
REFERENCE_CALL void b2BlockAllocator::Free(void *, int32) -> void b2Free(void *) [b2BlockAllocator.cpp <166:3 166:8>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:35> [b2BlockAllocator.cpp <166:10 166:10>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<170:8> [b2BlockAllocator.cpp <170:8 170:12>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> int32 [b2BlockAllocator.cpp <170:2 170:6>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> static uint8 [] b2BlockAllocator::s_blockSizeLookup [b2BlockAllocator.cpp <170:16 170:32>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:44> [b2BlockAllocator.cpp <170:34 170:37>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<170:8> [b2BlockAllocator.cpp <171:16 171:20>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<170:8> [b2BlockAllocator.cpp <171:25 171:29>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> const int32 b2_blockSizes [b2BlockAllocator.cpp <171:33 171:45>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<199:11> [b2BlockAllocator.cpp <199:11 199:15>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> b2Block [b2BlockAllocator.cpp <199:2 199:8>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Free(void *, int32) -> b2Block [b2BlockAllocator.cpp <199:20 199:26>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<155:35> [b2BlockAllocator.cpp <199:29 199:29>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> b2Block * b2Block::next [b2BlockAllocator.cpp <200:9 200:12>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<199:11> [b2BlockAllocator.cpp <200:2 200:6>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <200:16 200:26>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<170:8> [b2BlockAllocator.cpp <200:28 200:32>]
REFERENCE_USAGE void b2BlockAllocator::Free(void *, int32) -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <201:2 201:12>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<170:8> [b2BlockAllocator.cpp <201:14 201:18>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<199:11> [b2BlockAllocator.cpp <201:23 201:27>]
SYMBOL_METHOD public void b2BlockAllocator::Clear() [b2BlockAllocator.cpp <204:1 <204:24 204:28> 215:1>]
SYMBOL_CLASS b2BlockAllocator
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b2BlockAllocator::Clear() -> void [b2BlockAllocator.cpp <204:1 204:4>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<206:13> [b2BlockAllocator.cpp <206:13 206:13>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Clear() -> int32 [b2BlockAllocator.cpp <206:7 206:11>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<206:13> [b2BlockAllocator.cpp <206:20 206:20>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <206:24 206:35>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<206:13> [b2BlockAllocator.cpp <206:40 206:40>]
SYMBOL_FUNCTION void b2Free(void *)
REFERENCE_CALL void b2BlockAllocator::Clear() -> void b2Free(void *) [b2BlockAllocator.cpp <208:3 208:8>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> b2Block * b2Chunk::blocks [b2BlockAllocator.cpp <208:22 208:27>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <208:10 208:17>]
LOCAL_SYMBOL: b2BlockAllocator.cpp<206:13> [b2BlockAllocator.cpp <208:19 208:19>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> int32 b2BlockAllocator::m_chunkCount [b2BlockAllocator.cpp <211:2 211:13>]
SYMBOL_FUNCTION void * memset(void *, int, size_t)
REFERENCE_CALL void b2BlockAllocator::Clear() -> void * memset(void *, int, size_t) [b2BlockAllocator.cpp <212:2 212:7>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> b2Chunk * b2BlockAllocator::m_chunks [b2BlockAllocator.cpp <212:9 212:16>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> int32 b2BlockAllocator::m_chunkSpace [b2BlockAllocator.cpp <212:22 212:33>]
REFERENCE_TYPE_USAGE void b2BlockAllocator::Clear() -> b2Chunk [b2BlockAllocator.cpp <212:44 212:50>]
SYMBOL_FUNCTION void * memset(void *, int, size_t)
REFERENCE_CALL void b2BlockAllocator::Clear() -> void * memset(void *, int, size_t) [b2BlockAllocator.cpp <214:2 214:7>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <214:9 214:19>]
REFERENCE_USAGE void b2BlockAllocator::Clear() -> b2Block * [] b2BlockAllocator::m_freeLists [b2BlockAllocator.cpp <214:32 214:42>]
