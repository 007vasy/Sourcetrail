FILE: b2Timer.cpp
COMMENT: comment [b2Timer.cpp <1:1 17:3>]
REFERENCE_INCLUDE b2Timer.cpp -> C:/sourcetrail/sourcetrail/bin/test/data/CxxIndexSampleProjectsTestSuite/Box2D/src/Box2D/Common/b2Timer.h [b2Timer.cpp <19:10 19:33>]
FILE: b2Timer.h
COMMENT: comment [b2Timer.h <1:1 17:3>]
REFERENCE_MACRO_USAGE b2Timer.h -> B2_TIMER_H [b2Timer.h <19:9 19:18>]
SYMBOL_MACRO B2_TIMER_H [b2Timer.h <20:9 <20:9 20:18> 20:8>]
REFERENCE_INCLUDE b2Timer.h -> C:/sourcetrail/sourcetrail/bin/test/data/CxxIndexSampleProjectsTestSuite/Box2D/src/Box2D/Common/b2Settings.h [b2Timer.h <22:10 22:36>]
FILE: b2Settings.h
COMMENT: comment [b2Settings.h <1:1 17:3>]
REFERENCE_MACRO_USAGE b2Settings.h -> B2_SETTINGS_H [b2Settings.h <19:9 19:21>]
SYMBOL_MACRO B2_SETTINGS_H [b2Settings.h <20:9 <20:9 20:21> 20:8>]
REFERENCE_MACRO_USAGE b2Settings.h -> NDEBUG [b2Settings.h <26:14 26:19>]
SYMBOL_MACRO b2DEBUG [b2Settings.h <27:10 <27:10 27:16> 27:9>]
SYMBOL_MACRO B2_NOT_USED [b2Settings.h <30:9 <30:9 30:19> 30:33>]
SYMBOL_MACRO b2Assert [b2Settings.h <31:9 <31:9 31:16> 31:28>]
SYMBOL_MACRO b2_maxFloat [b2Settings.h <42:9 <42:9 42:19> 42:21>]
SYMBOL_MACRO b2_epsilon [b2Settings.h <43:9 <43:9 43:18> 43:20>]
SYMBOL_MACRO b2_pi [b2Settings.h <44:9 <44:9 44:13> 44:16>]
COMMENT: comment [b2Settings.h <46:1 46:10>]
COMMENT: comment [b2Settings.h <47:1 47:75>]
COMMENT: comment [b2Settings.h <48:1 48:4>]
COMMENT: comment [b2Settings.h <50:1 50:13>]
COMMENT: comment [b2Settings.h <52:1 52:71>]
COMMENT: comment [b2Settings.h <53:1 53:27>]
SYMBOL_MACRO b2_maxManifoldPoints [b2Settings.h <54:9 <54:9 54:28> 54:29>]
COMMENT: comment [b2Settings.h <56:1 56:76>]
COMMENT: comment [b2Settings.h <57:1 57:70>]
SYMBOL_MACRO b2_maxPolygonVertices [b2Settings.h <58:9 <58:9 58:29> 58:30>]
COMMENT: comment [b2Settings.h <60:1 60:74>]
COMMENT: comment [b2Settings.h <61:1 61:68>]
COMMENT: comment [b2Settings.h <62:1 62:23>]
SYMBOL_MACRO b2_aabbExtension [b2Settings.h <63:9 <63:9 63:24> 63:26>]
COMMENT: comment [b2Settings.h <65:1 65:78>]
COMMENT: comment [b2Settings.h <66:1 66:59>]
COMMENT: comment [b2Settings.h <67:1 67:40>]
SYMBOL_MACRO b2_aabbMultiplier [b2Settings.h <68:9 <68:9 68:25> 68:27>]
COMMENT: comment [b2Settings.h <70:1 70:79>]
COMMENT: comment [b2Settings.h <71:1 71:70>]
SYMBOL_MACRO b2_linearSlop [b2Settings.h <72:9 <72:9 72:21> 72:24>]
COMMENT: comment [b2Settings.h <74:1 74:78>]
COMMENT: comment [b2Settings.h <75:1 75:70>]
SYMBOL_MACRO b2_angularSlop [b2Settings.h <76:9 <76:9 76:22> 76:47>]
COMMENT: comment [b2Settings.h <78:1 78:83>]
COMMENT: comment [b2Settings.h <79:1 79:91>]
COMMENT: comment [b2Settings.h <80:1 80:64>]
SYMBOL_MACRO b2_polygonRadius [b2Settings.h <81:9 <81:9 81:24> 81:47>]
COMMENT: comment [b2Settings.h <83:1 83:78>]
SYMBOL_MACRO b2_maxSubSteps [b2Settings.h <84:9 <84:9 84:22> 84:25>]
COMMENT: comment [b2Settings.h <87:1 87:12>]
COMMENT: comment [b2Settings.h <89:1 89:68>]
SYMBOL_MACRO b2_maxTOIContacts [b2Settings.h <90:9 <90:9 90:25> 90:28>]
COMMENT: comment [b2Settings.h <92:1 92:86>]
COMMENT: comment [b2Settings.h <93:1 93:64>]
SYMBOL_MACRO b2_velocityThreshold [b2Settings.h <94:9 <94:9 94:28> 94:30>]
COMMENT: comment [b2Settings.h <96:1 96:88>]
COMMENT: comment [b2Settings.h <97:1 97:23>]
SYMBOL_MACRO b2_maxLinearCorrection [b2Settings.h <98:9 <98:9 98:30> 98:32>]
COMMENT: comment [b2Settings.h <100:1 100:89>]
COMMENT: comment [b2Settings.h <101:1 101:23>]
SYMBOL_MACRO b2_maxAngularCorrection [b2Settings.h <102:9 <102:9 102:31> 102:55>]
COMMENT: comment [b2Settings.h <104:1 104:80>]
COMMENT: comment [b2Settings.h <105:1 105:70>]
SYMBOL_MACRO b2_maxTranslation [b2Settings.h <106:9 <106:9 106:25> 106:28>]
SYMBOL_MACRO b2_maxTranslationSquared [b2Settings.h <107:9 <107:9 107:32> 107:71>]
COMMENT: comment [b2Settings.h <109:1 109:81>]
COMMENT: comment [b2Settings.h <110:1 110:70>]
SYMBOL_MACRO b2_maxRotation [b2Settings.h <111:9 <111:9 111:22> 111:39>]
SYMBOL_MACRO b2_maxRotationSquared [b2Settings.h <112:9 <112:9 112:29> 112:63>]
COMMENT: comment [b2Settings.h <114:1 114:88>]
COMMENT: comment [b2Settings.h <115:1 115:89>]
COMMENT: comment [b2Settings.h <116:1 116:18>]
SYMBOL_MACRO b2_baumgarte [b2Settings.h <117:9 <117:9 117:20> 117:24>]
SYMBOL_MACRO b2_toiBaugarte [b2Settings.h <118:9 <118:9 118:22> 118:26>]
COMMENT: comment [b2Settings.h <121:1 121:9>]
COMMENT: comment [b2Settings.h <123:1 123:67>]
SYMBOL_MACRO b2_timeToSleep [b2Settings.h <124:9 <124:9 124:22> 124:26>]
COMMENT: comment [b2Settings.h <126:1 126:72>]
SYMBOL_MACRO b2_linearSleepTolerance [b2Settings.h <127:9 <127:9 127:31> 127:33>]
COMMENT: comment [b2Settings.h <129:1 129:73>]
SYMBOL_MACRO b2_angularSleepTolerance [b2Settings.h <130:9 <130:9 130:32> 130:55>]
COMMENT: comment [b2Settings.h <132:1 132:21>]
COMMENT: comment [b2Settings.h <134:1 134:62>]
COMMENT: comment [b2Settings.h <137:1 137:71>]
COMMENT: comment [b2Settings.h <140:1 140:22>]
COMMENT: comment [b2Settings.h <143:1 143:30>]
COMMENT: comment [b2Settings.h <144:1 144:57>]
COMMENT: comment [b2Settings.h <147:16 147:40>]
COMMENT: comment [b2Settings.h <148:16 148:40>]
COMMENT: comment [b2Settings.h <149:19 149:33>]
COMMENT: comment [b2Settings.h <152:1 152:21>]
COMMENT: comment [b2Timer.h <24:1 24:65>]
COMMENT: comment [b2Timer.h <25:1 25:32>]
COMMENT: comment [b2Timer.h <30:2 30:17>]
COMMENT: comment [b2Timer.h <33:2 33:22>]
COMMENT: comment [b2Timer.h <36:2 36:56>]
REFERENCE_MACRO_USAGE b2Timer.h -> _WIN32 [b2Timer.h <41:13 41:18>]
REFERENCE_MACRO_USAGE b2Timer.cpp -> _WIN32 [b2Timer.cpp <21:13 21:18>]
REFERENCE_MACRO_USAGE b2Timer.cpp -> WIN32_LEAN_AND_MEAN [b2Timer.cpp <25:9 25:27>]
SYMBOL_MACRO WIN32_LEAN_AND_MEAN [b2Timer.cpp <26:9 <26:9 26:27> 26:8>]
SYMBOL_TYPEDEF int8 [b2Settings.h <33:21 33:24>]
SYMBOL_BUILTIN_TYPE signed char
REFERENCE_TYPE_USAGE int8 -> signed char [b2Settings.h <33:9 33:14>]
SYMBOL_TYPEDEF int16 [b2Settings.h <34:22 34:26>]
SYMBOL_BUILTIN_TYPE short
REFERENCE_TYPE_USAGE int16 -> short [b2Settings.h <34:9 34:14>]
SYMBOL_TYPEDEF int32 [b2Settings.h <35:20 35:24>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE int32 -> int [b2Settings.h <35:9 35:14>]
SYMBOL_TYPEDEF uint8 [b2Settings.h <36:23 36:27>]
SYMBOL_BUILTIN_TYPE unsigned char
REFERENCE_TYPE_USAGE uint8 -> unsigned char [b2Settings.h <36:9 36:16>]
SYMBOL_TYPEDEF uint16 [b2Settings.h <37:24 37:29>]
SYMBOL_BUILTIN_TYPE unsigned short
REFERENCE_TYPE_USAGE uint16 -> unsigned short [b2Settings.h <37:9 37:16>]
SYMBOL_TYPEDEF uint32 [b2Settings.h <38:22 38:27>]
SYMBOL_BUILTIN_TYPE unsigned int
REFERENCE_TYPE_USAGE uint32 -> unsigned int [b2Settings.h <38:9 38:16>]
SYMBOL_TYPEDEF float32 [b2Settings.h <39:15 39:21>]
SYMBOL_BUILTIN_TYPE float
REFERENCE_TYPE_USAGE float32 -> float [b2Settings.h <39:9 39:13>]
SYMBOL_TYPEDEF float64 [b2Settings.h <40:16 40:22>]
SYMBOL_BUILTIN_TYPE double
REFERENCE_TYPE_USAGE float64 -> double [b2Settings.h <40:9 40:14>]
SYMBOL_FUNCTION void * b2Alloc(int32) [b2Settings.h <135:7 135:13>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void * b2Alloc(int32) -> void [b2Settings.h <135:1 135:4>]
LOCAL_SYMBOL: b2Settings.h<135:21> [b2Settings.h <135:21 135:24>]
REFERENCE_TYPE_USAGE void * b2Alloc(int32) -> int32 [b2Settings.h <135:15 135:19>]
SYMBOL_FUNCTION void b2Free(void *) [b2Settings.h <138:6 138:11>]
REFERENCE_TYPE_USAGE void b2Free(void *) -> void [b2Settings.h <138:1 138:4>]
LOCAL_SYMBOL: b2Settings.h<138:19> [b2Settings.h <138:19 138:21>]
REFERENCE_TYPE_USAGE void b2Free(void *) -> void [b2Settings.h <138:13 138:16>]
SYMBOL_FUNCTION void b2Log(const char *) [b2Settings.h <141:6 141:10>]
REFERENCE_TYPE_USAGE void b2Log(const char *) -> void [b2Settings.h <141:1 141:4>]
LOCAL_SYMBOL: b2Settings.h<141:24> [b2Settings.h <141:24 141:29>]
SYMBOL_BUILTIN_TYPE char
REFERENCE_TYPE_USAGE void b2Log(const char *) -> char [b2Settings.h <141:18 141:21>]
SYMBOL_STRUCT b2Version [b2Settings.h <145:1 <145:8 145:16> 150:1>]
SYMBOL_FIELD public int32 b2Version::major [b2Settings.h <147:8 147:12>]
REFERENCE_TYPE_USAGE int32 b2Version::major -> int32 [b2Settings.h <147:2 147:6>]
SYMBOL_FIELD public int32 b2Version::minor [b2Settings.h <148:8 148:12>]
REFERENCE_TYPE_USAGE int32 b2Version::minor -> int32 [b2Settings.h <148:2 148:6>]
SYMBOL_FIELD public int32 b2Version::revision [b2Settings.h <149:8 149:15>]
REFERENCE_TYPE_USAGE int32 b2Version::revision -> int32 [b2Settings.h <149:2 149:6>]
SYMBOL_GLOBAL_VARIABLE b2Version b2_version [b2Settings.h <153:18 153:27>]
REFERENCE_TYPE_USAGE b2Version b2_version -> b2Version [b2Settings.h <153:8 153:16>]
SYMBOL_CLASS b2Timer [b2Timer.h <26:1 <26:7 26:13> 48:1>]
SYMBOL_METHOD public void b2Timer::b2Timer() [b2Timer.h <31:2 31:8>]
SYMBOL_METHOD public void b2Timer::Reset() [b2Timer.h <34:7 34:11>]
REFERENCE_TYPE_USAGE void b2Timer::Reset() -> void [b2Timer.h <34:2 34:5>]
SYMBOL_METHOD public float32 b2Timer::GetMilliseconds() const [b2Timer.h <37:10 37:24>]
REFERENCE_TYPE_USAGE float32 b2Timer::GetMilliseconds() const -> float32 [b2Timer.h <37:2 37:8>]
SYMBOL_FIELD private float64 b2Timer::m_start [b2Timer.h <42:10 42:16>]
REFERENCE_TYPE_USAGE float64 b2Timer::m_start -> float64 [b2Timer.h <42:2 42:8>]
SYMBOL_FIELD private static float64 b2Timer::s_invFrequency [b2Timer.h <43:17 43:30>]
REFERENCE_TYPE_USAGE static float64 b2Timer::s_invFrequency -> float64 [b2Timer.h <43:9 43:15>]
SYMBOL_METHOD public void b2Timer::b2Timer(const b2Timer &) [b2Timer.h <26:7 26:13>]
SYMBOL_METHOD public void b2Timer::b2Timer(b2Timer &&) [b2Timer.h <26:7 26:13>]
SYMBOL_FIELD private static float64 b2Timer::s_invFrequency [b2Timer.cpp <23:18 23:31>]
SYMBOL_CLASS b2Timer
QUALIFIER: b2Timer [b2Timer.cpp <23:9 23:15>]
REFERENCE_TYPE_USAGE static float64 b2Timer::s_invFrequency -> float64 [b2Timer.cpp <23:1 23:7>]
SYMBOL_METHOD public void b2Timer::b2Timer() [b2Timer.cpp <31:1 <31:10 31:16> 47:1>]
QUALIFIER: b2Timer [b2Timer.cpp <31:1 31:7>]
LOCAL_SYMBOL: b2Timer.cpp<33:16> [b2Timer.cpp <33:16 33:27>]
REFERENCE_TYPE_USAGE void b2Timer::b2Timer() -> LARGE_INTEGER [b2Timer.cpp <33:2 33:14>]
SYMBOL_FUNCTION void _LARGE_INTEGER::_LARGE_INTEGER()
REFERENCE_CALL void b2Timer::b2Timer() -> void _LARGE_INTEGER::_LARGE_INTEGER() [b2Timer.cpp <33:16 33:27>]
REFERENCE_USAGE void b2Timer::b2Timer() -> static float64 b2Timer::s_invFrequency [b2Timer.cpp <35:6 35:19>]
SYMBOL_FUNCTION BOOL QueryPerformanceFrequency(LARGE_INTEGER *)
REFERENCE_CALL void b2Timer::b2Timer() -> BOOL QueryPerformanceFrequency(LARGE_INTEGER *) [b2Timer.cpp <37:3 37:27>]
LOCAL_SYMBOL: b2Timer.cpp<33:16> [b2Timer.cpp <37:30 37:41>]
REFERENCE_USAGE void b2Timer::b2Timer() -> static float64 b2Timer::s_invFrequency [b2Timer.cpp <38:3 38:16>]
REFERENCE_TYPE_USAGE void b2Timer::b2Timer() -> float64 [b2Timer.cpp <38:20 38:26>]
REFERENCE_USAGE void b2Timer::b2Timer() -> LONGLONG _LARGE_INTEGER::QuadPart [b2Timer.cpp <38:41 38:48>]
LOCAL_SYMBOL: b2Timer.cpp<33:16> [b2Timer.cpp <38:28 38:39>]
REFERENCE_USAGE void b2Timer::b2Timer() -> static float64 b2Timer::s_invFrequency [b2Timer.cpp <39:7 39:20>]
REFERENCE_USAGE void b2Timer::b2Timer() -> static float64 b2Timer::s_invFrequency [b2Timer.cpp <41:4 41:17>]
REFERENCE_USAGE void b2Timer::b2Timer() -> static float64 b2Timer::s_invFrequency [b2Timer.cpp <41:31 41:44>]
SYMBOL_FUNCTION BOOL QueryPerformanceCounter(LARGE_INTEGER *)
REFERENCE_CALL void b2Timer::b2Timer() -> BOOL QueryPerformanceCounter(LARGE_INTEGER *) [b2Timer.cpp <45:2 45:24>]
LOCAL_SYMBOL: b2Timer.cpp<33:16> [b2Timer.cpp <45:27 45:38>]
REFERENCE_USAGE void b2Timer::b2Timer() -> float64 b2Timer::m_start [b2Timer.cpp <46:2 46:8>]
REFERENCE_TYPE_USAGE void b2Timer::b2Timer() -> float64 [b2Timer.cpp <46:12 46:18>]
REFERENCE_USAGE void b2Timer::b2Timer() -> LONGLONG _LARGE_INTEGER::QuadPart [b2Timer.cpp <46:33 46:40>]
LOCAL_SYMBOL: b2Timer.cpp<33:16> [b2Timer.cpp <46:20 46:31>]
SYMBOL_METHOD public void b2Timer::Reset() [b2Timer.cpp <49:1 <49:15 49:19> 54:1>]
QUALIFIER: b2Timer [b2Timer.cpp <49:6 49:12>]
REFERENCE_TYPE_USAGE void b2Timer::Reset() -> void [b2Timer.cpp <49:1 49:4>]
LOCAL_SYMBOL: b2Timer.cpp<51:16> [b2Timer.cpp <51:16 51:27>]
REFERENCE_TYPE_USAGE void b2Timer::Reset() -> LARGE_INTEGER [b2Timer.cpp <51:2 51:14>]
REFERENCE_CALL void b2Timer::Reset() -> void _LARGE_INTEGER::_LARGE_INTEGER() [b2Timer.cpp <51:16 51:27>]
REFERENCE_CALL void b2Timer::Reset() -> BOOL QueryPerformanceCounter(LARGE_INTEGER *) [b2Timer.cpp <52:2 52:24>]
LOCAL_SYMBOL: b2Timer.cpp<51:16> [b2Timer.cpp <52:27 52:38>]
REFERENCE_USAGE void b2Timer::Reset() -> float64 b2Timer::m_start [b2Timer.cpp <53:2 53:8>]
REFERENCE_TYPE_USAGE void b2Timer::Reset() -> float64 [b2Timer.cpp <53:12 53:18>]
REFERENCE_USAGE void b2Timer::Reset() -> LONGLONG _LARGE_INTEGER::QuadPart [b2Timer.cpp <53:33 53:40>]
LOCAL_SYMBOL: b2Timer.cpp<51:16> [b2Timer.cpp <53:20 53:31>]
SYMBOL_METHOD public float32 b2Timer::GetMilliseconds() const [b2Timer.cpp <56:1 <56:18 56:32> 63:1>]
QUALIFIER: b2Timer [b2Timer.cpp <56:9 56:15>]
REFERENCE_TYPE_USAGE float32 b2Timer::GetMilliseconds() const -> float32 [b2Timer.cpp <56:1 56:7>]
LOCAL_SYMBOL: b2Timer.cpp<58:16> [b2Timer.cpp <58:16 58:27>]
REFERENCE_TYPE_USAGE float32 b2Timer::GetMilliseconds() const -> LARGE_INTEGER [b2Timer.cpp <58:2 58:14>]
REFERENCE_CALL float32 b2Timer::GetMilliseconds() const -> void _LARGE_INTEGER::_LARGE_INTEGER() [b2Timer.cpp <58:16 58:27>]
REFERENCE_CALL float32 b2Timer::GetMilliseconds() const -> BOOL QueryPerformanceCounter(LARGE_INTEGER *) [b2Timer.cpp <59:2 59:24>]
LOCAL_SYMBOL: b2Timer.cpp<58:16> [b2Timer.cpp <59:27 59:38>]
LOCAL_SYMBOL: b2Timer.cpp<60:10> [b2Timer.cpp <60:10 60:14>]
REFERENCE_TYPE_USAGE float32 b2Timer::GetMilliseconds() const -> float64 [b2Timer.cpp <60:2 60:8>]
REFERENCE_TYPE_USAGE float32 b2Timer::GetMilliseconds() const -> float64 [b2Timer.cpp <60:18 60:24>]
REFERENCE_USAGE float32 b2Timer::GetMilliseconds() const -> LONGLONG _LARGE_INTEGER::QuadPart [b2Timer.cpp <60:39 60:46>]
LOCAL_SYMBOL: b2Timer.cpp<58:16> [b2Timer.cpp <60:26 60:37>]
LOCAL_SYMBOL: b2Timer.cpp<61:10> [b2Timer.cpp <61:10 61:11>]
REFERENCE_TYPE_USAGE float32 b2Timer::GetMilliseconds() const -> float32 [b2Timer.cpp <61:2 61:8>]
REFERENCE_TYPE_USAGE float32 b2Timer::GetMilliseconds() const -> float32 [b2Timer.cpp <61:15 61:21>]
REFERENCE_USAGE float32 b2Timer::GetMilliseconds() const -> static float64 b2Timer::s_invFrequency [b2Timer.cpp <61:23 61:36>]
LOCAL_SYMBOL: b2Timer.cpp<60:10> [b2Timer.cpp <61:41 61:45>]
REFERENCE_USAGE float32 b2Timer::GetMilliseconds() const -> float64 b2Timer::m_start [b2Timer.cpp <61:49 61:55>]
LOCAL_SYMBOL: b2Timer.cpp<61:10> [b2Timer.cpp <62:9 62:10>]
