FILE: b2Island.cpp
COMMENT: comment [b2Island.cpp <1:1 17:3>]
COMMENT: comment [b2Island.cpp <30:1 107:3>]
COMMENT: comment [b2Island.cpp <109:1 123:3>]
COMMENT: comment [b2Island.cpp <125:1 146:3>]
COMMENT: comment [b2Island.cpp <175:2 175:61>]
COMMENT: comment [b2Island.cpp <189:2 189:71>]
COMMENT: comment [b2Island.cpp <199:3 199:47>]
COMMENT: comment [b2Island.cpp <205:4 205:28>]
COMMENT: comment [b2Island.cpp <209:4 209:21>]
COMMENT: comment [b2Island.cpp <210:4 210:29>]
COMMENT: comment [b2Island.cpp <211:4 211:40>]
COMMENT: comment [b2Island.cpp <212:4 212:106>]
COMMENT: comment [b2Island.cpp <213:4 213:29>]
COMMENT: comment [b2Island.cpp <214:4 214:26>]
COMMENT: comment [b2Island.cpp <215:4 215:33>]
COMMENT: comment [b2Island.cpp <228:2 228:16>]
COMMENT: comment [b2Island.cpp <234:2 234:37>]
COMMENT: comment [b2Island.cpp <258:2 258:31>]
COMMENT: comment [b2Island.cpp <270:2 270:37>]
COMMENT: comment [b2Island.cpp <274:2 274:24>]
COMMENT: comment [b2Island.cpp <282:3 282:32>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_maxTranslationSquared [b2Island.cpp <284:41 284:64>]
REFERENCE_MACRO_USAGE b2Settings.h -> b2_maxTranslation [b2Settings.h <107:35 107:51>]
REFERENCE_MACRO_USAGE b2Settings.h -> b2_maxTranslation [b2Settings.h <107:55 107:71>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_maxTranslation [b2Island.cpp <286:20 286:36>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_maxRotationSquared [b2Island.cpp <291:29 291:49>]
REFERENCE_MACRO_USAGE b2Settings.h -> b2_maxRotation [b2Settings.h <112:33 112:46>]
REFERENCE_MACRO_USAGE b2Settings.h -> b2_pi [b2Settings.h <111:35 111:39>]
REFERENCE_MACRO_USAGE b2Settings.h -> b2_maxRotation [b2Settings.h <112:50 112:63>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_maxRotation [b2Island.cpp <293:20 293:33>]
COMMENT: comment [b2Island.cpp <297:3 297:15>]
COMMENT: comment [b2Island.cpp <307:2 307:31>]
COMMENT: comment [b2Island.cpp <323:4 323:51>]
COMMENT: comment [b2Island.cpp <329:2 329:42>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_maxFloat [b2Island.cpp <346:26 346:36>]
REFERENCE_MACRO_USAGE b2Settings.h -> FLT_MAX [b2Settings.h <42:22 42:28>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_linearSleepTolerance [b2Island.cpp <348:29 348:51>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_linearSleepTolerance [b2Island.cpp <348:55 348:77>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_angularSleepTolerance [b2Island.cpp <349:29 349:52>]
REFERENCE_MACRO_USAGE b2Settings.h -> b2_pi [b2Settings.h <130:51 130:55>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_angularSleepTolerance [b2Island.cpp <349:56 349:79>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_timeToSleep [b2Island.cpp <373:23 373:36>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2Assert [b2Island.cpp <386:2 386:9>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:23 34:31>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:47 34:55>]
REFERENCE_MACRO_USAGE assert.h -> __FILE__ [assert.h <34:57 34:64>]
REFERENCE_MACRO_USAGE assert.h -> __LINE__ [assert.h <34:79 34:86>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2Assert [b2Island.cpp <387:2 387:9>]
COMMENT: comment [b2Island.cpp <389:2 389:31>]
COMMENT: comment [b2Island.cpp <408:2 408:32>]
COMMENT: comment [b2Island.cpp <451:2 451:37>]
COMMENT: comment [b2Island.cpp <457:2 457:59>]
COMMENT: comment [b2Island.cpp <458:2 458:59>]
COMMENT: comment [b2Island.cpp <461:2 461:32>]
COMMENT: comment [b2Island.cpp <467:2 467:57>]
COMMENT: comment [b2Island.cpp <468:2 468:37>]
COMMENT: comment [b2Island.cpp <472:2 472:24>]
COMMENT: comment [b2Island.cpp <480:3 480:32>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_maxTranslationSquared [b2Island.cpp <482:41 482:64>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_maxTranslation [b2Island.cpp <484:20 484:36>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_maxRotationSquared [b2Island.cpp <489:29 489:49>]
REFERENCE_MACRO_USAGE b2Island.cpp -> b2_maxRotation [b2Island.cpp <491:20 491:33>]
COMMENT: comment [b2Island.cpp <495:3 495:15>]
COMMENT: comment [b2Island.cpp <504:3 504:17>]
SYMBOL_METHOD public void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) [b2Island.cpp <148:1 <148:11 148:18> 171:1>]
SYMBOL_CLASS b2Island
QUALIFIER: b2Island [b2Island.cpp <148:1 148:8>]
LOCAL_SYMBOL: b2Island.cpp<149:8> [b2Island.cpp <149:8 149:19>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 [b2Island.cpp <149:2 149:6>]
LOCAL_SYMBOL: b2Island.cpp<150:8> [b2Island.cpp <150:8 150:22>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 [b2Island.cpp <150:2 150:6>]
LOCAL_SYMBOL: b2Island.cpp<151:8> [b2Island.cpp <151:8 151:20>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 [b2Island.cpp <151:2 151:6>]
LOCAL_SYMBOL: b2Island.cpp<152:20> [b2Island.cpp <152:20 152:28>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2StackAllocator [b2Island.cpp <152:2 152:17>]
LOCAL_SYMBOL: b2Island.cpp<153:21> [b2Island.cpp <153:21 153:28>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2ContactListener [b2Island.cpp <153:2 153:18>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 b2Island::m_bodyCapacity [b2Island.cpp <155:2 155:15>]
LOCAL_SYMBOL: b2Island.cpp<149:8> [b2Island.cpp <155:19 155:30>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 b2Island::m_contactCapacity [b2Island.cpp <156:2 156:18>]
LOCAL_SYMBOL: b2Island.cpp<150:8> [b2Island.cpp <156:22 156:36>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 b2Island::m_jointCapacity [b2Island.cpp <157:2 157:16>]
LOCAL_SYMBOL: b2Island.cpp<151:8> [b2Island.cpp <157:21 157:33>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 b2Island::m_bodyCount [b2Island.cpp <158:2 158:12>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 b2Island::m_contactCount [b2Island.cpp <159:2 159:15>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 b2Island::m_jointCount [b2Island.cpp <160:2 160:13>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <162:2 162:12>]
LOCAL_SYMBOL: b2Island.cpp<152:20> [b2Island.cpp <162:16 162:24>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2ContactListener * b2Island::m_listener [b2Island.cpp <163:2 163:11>]
LOCAL_SYMBOL: b2Island.cpp<153:21> [b2Island.cpp <163:15 163:22>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Body * * b2Island::m_bodies [b2Island.cpp <165:2 165:9>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Body [b2Island.cpp <165:14 165:19>]
SYMBOL_FUNCTION void * b2StackAllocator::Allocate(int32)
REFERENCE_CALL void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> void * b2StackAllocator::Allocate(int32) [b2Island.cpp <165:36 165:43>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <165:23 165:33>]
LOCAL_SYMBOL: b2Island.cpp<149:8> [b2Island.cpp <165:45 165:56>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Body [b2Island.cpp <165:67 165:72>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Contact * * b2Island::m_contacts [b2Island.cpp <166:2 166:11>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Contact [b2Island.cpp <166:16 166:24>]
REFERENCE_CALL void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> void * b2StackAllocator::Allocate(int32) [b2Island.cpp <166:41 166:48>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <166:28 166:38>]
LOCAL_SYMBOL: b2Island.cpp<150:8> [b2Island.cpp <166:50 166:64>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Contact [b2Island.cpp <166:76 166:84>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Joint * * b2Island::m_joints [b2Island.cpp <167:2 167:9>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Joint [b2Island.cpp <167:14 167:20>]
REFERENCE_CALL void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> void * b2StackAllocator::Allocate(int32) [b2Island.cpp <167:37 167:44>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <167:24 167:34>]
LOCAL_SYMBOL: b2Island.cpp<151:8> [b2Island.cpp <167:46 167:58>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Joint [b2Island.cpp <167:69 167:75>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <169:2 169:13>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Velocity [b2Island.cpp <169:18 169:27>]
REFERENCE_CALL void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> void * b2StackAllocator::Allocate(int32) [b2Island.cpp <169:43 169:50>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <169:30 169:40>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 b2Island::m_bodyCapacity [b2Island.cpp <169:52 169:65>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Velocity [b2Island.cpp <169:76 169:85>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Position * b2Island::m_positions [b2Island.cpp <170:2 170:12>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Position [b2Island.cpp <170:17 170:26>]
REFERENCE_CALL void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> void * b2StackAllocator::Allocate(int32) [b2Island.cpp <170:42 170:49>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <170:29 170:39>]
REFERENCE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> int32 b2Island::m_bodyCapacity [b2Island.cpp <170:51 170:64>]
REFERENCE_TYPE_USAGE void b2Island::b2Island(int32, int32, int32, b2StackAllocator *, b2ContactListener *) -> b2Position [b2Island.cpp <170:75 170:84>]
SYMBOL_METHOD public void b2Island::~b2Island() [b2Island.cpp <173:1 <173:11 173:19> 181:1>]
QUALIFIER: b2Island [b2Island.cpp <173:1 173:8>]
SYMBOL_FUNCTION void b2StackAllocator::Free(void *)
REFERENCE_CALL void b2Island::~b2Island() -> void b2StackAllocator::Free(void *) [b2Island.cpp <176:15 176:18>]
REFERENCE_USAGE void b2Island::~b2Island() -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <176:2 176:12>]
REFERENCE_USAGE void b2Island::~b2Island() -> b2Position * b2Island::m_positions [b2Island.cpp <176:20 176:30>]
REFERENCE_CALL void b2Island::~b2Island() -> void b2StackAllocator::Free(void *) [b2Island.cpp <177:15 177:18>]
REFERENCE_USAGE void b2Island::~b2Island() -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <177:2 177:12>]
REFERENCE_USAGE void b2Island::~b2Island() -> b2Velocity * b2Island::m_velocities [b2Island.cpp <177:20 177:31>]
REFERENCE_CALL void b2Island::~b2Island() -> void b2StackAllocator::Free(void *) [b2Island.cpp <178:15 178:18>]
REFERENCE_USAGE void b2Island::~b2Island() -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <178:2 178:12>]
REFERENCE_USAGE void b2Island::~b2Island() -> b2Joint * * b2Island::m_joints [b2Island.cpp <178:20 178:27>]
REFERENCE_CALL void b2Island::~b2Island() -> void b2StackAllocator::Free(void *) [b2Island.cpp <179:15 179:18>]
REFERENCE_USAGE void b2Island::~b2Island() -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <179:2 179:12>]
REFERENCE_USAGE void b2Island::~b2Island() -> b2Contact * * b2Island::m_contacts [b2Island.cpp <179:20 179:29>]
REFERENCE_CALL void b2Island::~b2Island() -> void b2StackAllocator::Free(void *) [b2Island.cpp <180:15 180:18>]
REFERENCE_USAGE void b2Island::~b2Island() -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <180:2 180:12>]
REFERENCE_USAGE void b2Island::~b2Island() -> b2Body * * b2Island::m_bodies [b2Island.cpp <180:20 180:27>]
SYMBOL_METHOD public void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) [b2Island.cpp <183:1 <183:16 183:20> 382:1>]
QUALIFIER: b2Island [b2Island.cpp <183:6 183:13>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void [b2Island.cpp <183:1 183:4>]
LOCAL_SYMBOL: b2Island.cpp<183:33> [b2Island.cpp <183:33 183:39>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Profile [b2Island.cpp <183:22 183:30>]
LOCAL_SYMBOL: b2Island.cpp<183:60> [b2Island.cpp <183:60 183:63>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2TimeStep [b2Island.cpp <183:48 183:57>]
LOCAL_SYMBOL: b2Island.cpp<183:80> [b2Island.cpp <183:80 183:86>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 [b2Island.cpp <183:72 183:77>]
LOCAL_SYMBOL: b2Island.cpp<183:94> [b2Island.cpp <183:94 183:103>]
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> bool [b2Island.cpp <183:89 183:92>]
LOCAL_SYMBOL: b2Island.cpp<185:10> [b2Island.cpp <185:10 185:14>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Timer [b2Island.cpp <185:2 185:8>]
SYMBOL_FUNCTION void b2Timer::b2Timer()
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Timer::b2Timer() [b2Island.cpp <185:10 185:14>]
LOCAL_SYMBOL: b2Island.cpp<187:10> [b2Island.cpp <187:10 187:10>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 [b2Island.cpp <187:2 187:8>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2TimeStep::dt [b2Island.cpp <187:19 187:20>]
LOCAL_SYMBOL: b2Island.cpp<183:60> [b2Island.cpp <187:14 187:17>]
LOCAL_SYMBOL: b2Island.cpp<190:13> [b2Island.cpp <190:13 190:13>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 [b2Island.cpp <190:7 190:11>]
LOCAL_SYMBOL: b2Island.cpp<190:13> [b2Island.cpp <190:20 190:20>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2Island::m_bodyCount [b2Island.cpp <190:24 190:34>]
LOCAL_SYMBOL: b2Island.cpp<190:13> [b2Island.cpp <190:39 190:39>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <192:11 192:11>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Body [b2Island.cpp <192:3 192:8>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Body * * b2Island::m_bodies [b2Island.cpp <192:15 192:22>]
LOCAL_SYMBOL: b2Island.cpp<190:13> [b2Island.cpp <192:24 192:24>]
LOCAL_SYMBOL: b2Island.cpp<194:10> [b2Island.cpp <194:10 194:10>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 [b2Island.cpp <194:3 194:8>]
SYMBOL_FUNCTION void b2Vec2::b2Vec2(const b2Vec2 &)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Island.cpp <194:25 194:25>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Sweep::c [b2Island.cpp <194:25 194:25>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Island.cpp <194:17 194:23>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <194:14 194:14>]
LOCAL_SYMBOL: b2Island.cpp<195:11> [b2Island.cpp <195:11 195:11>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 [b2Island.cpp <195:3 195:9>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Sweep::a [b2Island.cpp <195:26 195:26>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Island.cpp <195:18 195:24>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <195:15 195:15>]
LOCAL_SYMBOL: b2Island.cpp<196:10> [b2Island.cpp <196:10 196:10>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 [b2Island.cpp <196:3 196:8>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Island.cpp <196:17 196:32>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Body::m_linearVelocity [b2Island.cpp <196:17 196:32>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <196:14 196:14>]
LOCAL_SYMBOL: b2Island.cpp<197:11> [b2Island.cpp <197:11 197:11>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 [b2Island.cpp <197:3 197:9>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_angularVelocity [b2Island.cpp <197:18 197:34>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <197:15 197:15>]
SYMBOL_FUNCTION b2Vec2 & b2Vec2::operator=(const b2Vec2 &)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <200:17 200:17>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Sweep::c0 [b2Island.cpp <200:14 200:15>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Island.cpp <200:6 200:12>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <200:3 200:3>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Sweep::c [b2Island.cpp <200:30 200:30>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Island.cpp <200:22 200:28>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <200:19 200:19>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Sweep::a0 [b2Island.cpp <201:14 201:15>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Island.cpp <201:6 201:12>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <201:3 201:3>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Sweep::a [b2Island.cpp <201:30 201:30>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Island.cpp <201:22 201:28>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <201:19 201:19>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2BodyType b2Body::m_type [b2Island.cpp <203:10 203:15>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <203:7 203:7>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2BodyType::b2_dynamicBody [b2Island.cpp <203:20 203:33>]
SYMBOL_FUNCTION void b2Vec2::operator+=(const b2Vec2 &)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Island.cpp <206:6 206:7>]
LOCAL_SYMBOL: b2Island.cpp<196:10> [b2Island.cpp <206:4 206:4>]
SYMBOL_FUNCTION b2Vec2 operator*(float32, const b2Vec2 &)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Island.cpp <206:11 206:11>]
LOCAL_SYMBOL: b2Island.cpp<187:10> [b2Island.cpp <206:9 206:9>]
SYMBOL_FUNCTION b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2Island.cpp <206:42 206:42>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Island.cpp <206:32 206:32>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_gravityScale [b2Island.cpp <206:17 206:30>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <206:14 206:14>]
LOCAL_SYMBOL: b2Island.cpp<183:80> [b2Island.cpp <206:34 206:40>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Island.cpp <206:57 206:57>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_invMass [b2Island.cpp <206:47 206:55>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <206:44 206:44>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Body::m_force [b2Island.cpp <206:62 206:68>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <206:59 206:59>]
LOCAL_SYMBOL: b2Island.cpp<197:11> [b2Island.cpp <207:4 207:4>]
LOCAL_SYMBOL: b2Island.cpp<187:10> [b2Island.cpp <207:9 207:9>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_invI [b2Island.cpp <207:16 207:21>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <207:13 207:13>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_torque [b2Island.cpp <207:28 207:35>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <207:25 207:25>]
SYMBOL_FUNCTION void b2Vec2::operator*=(float32)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Vec2::operator*=(float32) [b2Island.cpp <216:6 216:7>]
LOCAL_SYMBOL: b2Island.cpp<196:10> [b2Island.cpp <216:4 216:4>]
LOCAL_SYMBOL: b2Island.cpp<187:10> [b2Island.cpp <216:24 216:24>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_linearDamping [b2Island.cpp <216:31 216:45>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <216:28 216:28>]
LOCAL_SYMBOL: b2Island.cpp<197:11> [b2Island.cpp <217:4 217:4>]
LOCAL_SYMBOL: b2Island.cpp<187:10> [b2Island.cpp <217:24 217:24>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_angularDamping [b2Island.cpp <217:31 217:46>]
LOCAL_SYMBOL: b2Island.cpp<192:11> [b2Island.cpp <217:28 217:28>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <220:20 220:20>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Position::c [b2Island.cpp <220:18 220:18>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2Island::m_positions [b2Island.cpp <220:3 220:13>]
LOCAL_SYMBOL: b2Island.cpp<190:13> [b2Island.cpp <220:15 220:15>]
LOCAL_SYMBOL: b2Island.cpp<194:10> [b2Island.cpp <220:22 220:22>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Position::a [b2Island.cpp <221:18 221:18>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2Island::m_positions [b2Island.cpp <221:3 221:13>]
LOCAL_SYMBOL: b2Island.cpp<190:13> [b2Island.cpp <221:15 221:15>]
LOCAL_SYMBOL: b2Island.cpp<195:11> [b2Island.cpp <221:22 221:22>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <222:21 222:21>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Velocity::v [b2Island.cpp <222:19 222:19>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <222:3 222:14>]
LOCAL_SYMBOL: b2Island.cpp<190:13> [b2Island.cpp <222:16 222:16>]
LOCAL_SYMBOL: b2Island.cpp<196:10> [b2Island.cpp <222:23 222:23>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Velocity::w [b2Island.cpp <223:19 223:19>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <223:3 223:14>]
LOCAL_SYMBOL: b2Island.cpp<190:13> [b2Island.cpp <223:16 223:16>]
LOCAL_SYMBOL: b2Island.cpp<197:11> [b2Island.cpp <223:23 223:23>]
SYMBOL_FUNCTION void b2Timer::Reset()
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Timer::Reset() [b2Island.cpp <226:8 226:12>]
LOCAL_SYMBOL: b2Island.cpp<185:10> [b2Island.cpp <226:2 226:6>]
LOCAL_SYMBOL: b2Island.cpp<229:15> [b2Island.cpp <229:15 229:24>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2SolverData [b2Island.cpp <229:2 229:13>]
SYMBOL_FUNCTION void b2SolverData::b2SolverData()
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2SolverData::b2SolverData() [b2Island.cpp <229:15 229:24>]
SYMBOL_FUNCTION b2TimeStep & b2TimeStep::operator=(const b2TimeStep &)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2TimeStep & b2TimeStep::operator=(const b2TimeStep &) [b2Island.cpp <230:18 230:18>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2TimeStep b2SolverData::step [b2Island.cpp <230:13 230:16>]
LOCAL_SYMBOL: b2Island.cpp<229:15> [b2Island.cpp <230:2 230:11>]
LOCAL_SYMBOL: b2Island.cpp<183:60> [b2Island.cpp <230:20 230:23>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2SolverData::positions [b2Island.cpp <231:13 231:21>]
LOCAL_SYMBOL: b2Island.cpp<229:15> [b2Island.cpp <231:2 231:11>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2Island::m_positions [b2Island.cpp <231:25 231:35>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2SolverData::velocities [b2Island.cpp <232:13 232:22>]
LOCAL_SYMBOL: b2Island.cpp<229:15> [b2Island.cpp <232:2 232:11>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <232:26 232:37>]
LOCAL_SYMBOL: b2Island.cpp<235:21> [b2Island.cpp <235:21 235:36>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2ContactSolverDef [b2Island.cpp <235:2 235:19>]
SYMBOL_FUNCTION void b2ContactSolverDef::b2ContactSolverDef()
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2ContactSolverDef::b2ContactSolverDef() [b2Island.cpp <235:21 235:36>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2TimeStep & b2TimeStep::operator=(const b2TimeStep &) [b2Island.cpp <236:24 236:24>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2TimeStep b2ContactSolverDef::step [b2Island.cpp <236:19 236:22>]
LOCAL_SYMBOL: b2Island.cpp<235:21> [b2Island.cpp <236:2 236:17>]
LOCAL_SYMBOL: b2Island.cpp<183:60> [b2Island.cpp <236:26 236:29>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Contact * * b2ContactSolverDef::contacts [b2Island.cpp <237:19 237:26>]
LOCAL_SYMBOL: b2Island.cpp<235:21> [b2Island.cpp <237:2 237:17>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Contact * * b2Island::m_contacts [b2Island.cpp <237:30 237:39>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2ContactSolverDef::count [b2Island.cpp <238:19 238:23>]
LOCAL_SYMBOL: b2Island.cpp<235:21> [b2Island.cpp <238:2 238:17>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2Island::m_contactCount [b2Island.cpp <238:27 238:40>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2ContactSolverDef::positions [b2Island.cpp <239:19 239:27>]
LOCAL_SYMBOL: b2Island.cpp<235:21> [b2Island.cpp <239:2 239:17>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2Island::m_positions [b2Island.cpp <239:31 239:41>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2ContactSolverDef::velocities [b2Island.cpp <240:19 240:28>]
LOCAL_SYMBOL: b2Island.cpp<235:21> [b2Island.cpp <240:2 240:17>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <240:32 240:43>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2StackAllocator * b2ContactSolverDef::allocator [b2Island.cpp <241:19 241:27>]
LOCAL_SYMBOL: b2Island.cpp<235:21> [b2Island.cpp <241:2 241:17>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <241:31 241:41>]
LOCAL_SYMBOL: b2Island.cpp<243:18> [b2Island.cpp <243:18 243:30>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2ContactSolver [b2Island.cpp <243:2 243:16>]
SYMBOL_FUNCTION void b2ContactSolver::b2ContactSolver(b2ContactSolverDef *)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2ContactSolver::b2ContactSolver(b2ContactSolverDef *) [b2Island.cpp <243:18 243:30>]
LOCAL_SYMBOL: b2Island.cpp<235:21> [b2Island.cpp <243:33 243:48>]
SYMBOL_FUNCTION void b2ContactSolver::InitializeVelocityConstraints()
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2ContactSolver::InitializeVelocityConstraints() [b2Island.cpp <244:16 244:44>]
LOCAL_SYMBOL: b2Island.cpp<243:18> [b2Island.cpp <244:2 244:14>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> bool b2TimeStep::warmStarting [b2Island.cpp <246:11 246:22>]
LOCAL_SYMBOL: b2Island.cpp<183:60> [b2Island.cpp <246:6 246:9>]
SYMBOL_FUNCTION void b2ContactSolver::WarmStart()
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2ContactSolver::WarmStart() [b2Island.cpp <248:17 248:25>]
LOCAL_SYMBOL: b2Island.cpp<243:18> [b2Island.cpp <248:3 248:15>]
LOCAL_SYMBOL: b2Island.cpp<251:13> [b2Island.cpp <251:13 251:13>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 [b2Island.cpp <251:7 251:11>]
LOCAL_SYMBOL: b2Island.cpp<251:13> [b2Island.cpp <251:20 251:20>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2Island::m_jointCount [b2Island.cpp <251:24 251:35>]
LOCAL_SYMBOL: b2Island.cpp<251:13> [b2Island.cpp <251:40 251:40>]
SYMBOL_FUNCTION void b2Joint::InitVelocityConstraints(const b2SolverData &)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Joint::InitVelocityConstraints(const b2SolverData &) [b2Island.cpp <253:16 253:38>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Joint * * b2Island::m_joints [b2Island.cpp <253:3 253:10>]
LOCAL_SYMBOL: b2Island.cpp<251:13> [b2Island.cpp <253:12 253:12>]
LOCAL_SYMBOL: b2Island.cpp<229:15> [b2Island.cpp <253:40 253:49>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Profile::solveInit [b2Island.cpp <256:11 256:19>]
LOCAL_SYMBOL: b2Island.cpp<183:33> [b2Island.cpp <256:2 256:8>]
SYMBOL_FUNCTION float32 b2Timer::GetMilliseconds() const
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Timer::GetMilliseconds() const [b2Island.cpp <256:29 256:43>]
LOCAL_SYMBOL: b2Island.cpp<185:10> [b2Island.cpp <256:23 256:27>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Timer::Reset() [b2Island.cpp <259:8 259:12>]
LOCAL_SYMBOL: b2Island.cpp<185:10> [b2Island.cpp <259:2 259:6>]
LOCAL_SYMBOL: b2Island.cpp<260:13> [b2Island.cpp <260:13 260:13>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 [b2Island.cpp <260:7 260:11>]
LOCAL_SYMBOL: b2Island.cpp<260:13> [b2Island.cpp <260:20 260:20>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2TimeStep::velocityIterations [b2Island.cpp <260:29 260:46>]
LOCAL_SYMBOL: b2Island.cpp<183:60> [b2Island.cpp <260:24 260:27>]
LOCAL_SYMBOL: b2Island.cpp<260:13> [b2Island.cpp <260:51 260:51>]
LOCAL_SYMBOL: b2Island.cpp<262:14> [b2Island.cpp <262:14 262:14>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 [b2Island.cpp <262:8 262:12>]
LOCAL_SYMBOL: b2Island.cpp<262:14> [b2Island.cpp <262:21 262:21>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2Island::m_jointCount [b2Island.cpp <262:25 262:36>]
LOCAL_SYMBOL: b2Island.cpp<262:14> [b2Island.cpp <262:41 262:41>]
SYMBOL_FUNCTION void b2Joint::SolveVelocityConstraints(const b2SolverData &)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Joint::SolveVelocityConstraints(const b2SolverData &) [b2Island.cpp <264:17 264:40>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Joint * * b2Island::m_joints [b2Island.cpp <264:4 264:11>]
LOCAL_SYMBOL: b2Island.cpp<262:14> [b2Island.cpp <264:13 264:13>]
LOCAL_SYMBOL: b2Island.cpp<229:15> [b2Island.cpp <264:42 264:51>]
SYMBOL_FUNCTION void b2ContactSolver::SolveVelocityConstraints()
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2ContactSolver::SolveVelocityConstraints() [b2Island.cpp <267:17 267:40>]
LOCAL_SYMBOL: b2Island.cpp<243:18> [b2Island.cpp <267:3 267:15>]
SYMBOL_FUNCTION void b2ContactSolver::StoreImpulses()
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2ContactSolver::StoreImpulses() [b2Island.cpp <271:16 271:28>]
LOCAL_SYMBOL: b2Island.cpp<243:18> [b2Island.cpp <271:2 271:14>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Profile::solveVelocity [b2Island.cpp <272:11 272:23>]
LOCAL_SYMBOL: b2Island.cpp<183:33> [b2Island.cpp <272:2 272:8>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Timer::GetMilliseconds() const [b2Island.cpp <272:33 272:47>]
LOCAL_SYMBOL: b2Island.cpp<185:10> [b2Island.cpp <272:27 272:31>]
LOCAL_SYMBOL: b2Island.cpp<275:13> [b2Island.cpp <275:13 275:13>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 [b2Island.cpp <275:7 275:11>]
LOCAL_SYMBOL: b2Island.cpp<275:13> [b2Island.cpp <275:20 275:20>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2Island::m_bodyCount [b2Island.cpp <275:24 275:34>]
LOCAL_SYMBOL: b2Island.cpp<275:13> [b2Island.cpp <275:39 275:39>]
LOCAL_SYMBOL: b2Island.cpp<277:10> [b2Island.cpp <277:10 277:10>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 [b2Island.cpp <277:3 277:8>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Island.cpp <277:29 277:29>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Position::c [b2Island.cpp <277:29 277:29>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2Island::m_positions [b2Island.cpp <277:14 277:24>]
LOCAL_SYMBOL: b2Island.cpp<275:13> [b2Island.cpp <277:26 277:26>]
LOCAL_SYMBOL: b2Island.cpp<278:11> [b2Island.cpp <278:11 278:11>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 [b2Island.cpp <278:3 278:9>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Position::a [b2Island.cpp <278:30 278:30>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2Island::m_positions [b2Island.cpp <278:15 278:25>]
LOCAL_SYMBOL: b2Island.cpp<275:13> [b2Island.cpp <278:27 278:27>]
LOCAL_SYMBOL: b2Island.cpp<279:10> [b2Island.cpp <279:10 279:10>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 [b2Island.cpp <279:3 279:8>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Island.cpp <279:30 279:30>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Velocity::v [b2Island.cpp <279:30 279:30>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <279:14 279:25>]
LOCAL_SYMBOL: b2Island.cpp<275:13> [b2Island.cpp <279:27 279:27>]
LOCAL_SYMBOL: b2Island.cpp<280:11> [b2Island.cpp <280:11 280:11>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 [b2Island.cpp <280:3 280:9>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Velocity::w [b2Island.cpp <280:31 280:31>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <280:15 280:26>]
LOCAL_SYMBOL: b2Island.cpp<275:13> [b2Island.cpp <280:28 280:28>]
LOCAL_SYMBOL: b2Island.cpp<283:10> [b2Island.cpp <283:10 283:20>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 [b2Island.cpp <283:3 283:8>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Island.cpp <283:26 283:26>]
LOCAL_SYMBOL: b2Island.cpp<187:10> [b2Island.cpp <283:24 283:24>]
LOCAL_SYMBOL: b2Island.cpp<279:10> [b2Island.cpp <283:28 283:28>]
SYMBOL_FUNCTION float32 b2Dot(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Island.cpp <284:7 284:11>]
LOCAL_SYMBOL: b2Island.cpp<283:10> [b2Island.cpp <284:13 284:23>]
LOCAL_SYMBOL: b2Island.cpp<283:10> [b2Island.cpp <284:26 284:36>]
LOCAL_SYMBOL: b2Island.cpp<286:12> [b2Island.cpp <286:12 286:16>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 [b2Island.cpp <286:4 286:10>]
SYMBOL_FUNCTION float32 b2Vec2::Length() const
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Vec2::Length() const [b2Island.cpp <286:52 286:57>]
LOCAL_SYMBOL: b2Island.cpp<283:10> [b2Island.cpp <286:40 286:50>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Vec2::operator*=(float32) [b2Island.cpp <287:6 287:7>]
LOCAL_SYMBOL: b2Island.cpp<279:10> [b2Island.cpp <287:4 287:4>]
LOCAL_SYMBOL: b2Island.cpp<286:12> [b2Island.cpp <287:9 287:13>]
LOCAL_SYMBOL: b2Island.cpp<290:11> [b2Island.cpp <290:11 290:18>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 [b2Island.cpp <290:3 290:9>]
LOCAL_SYMBOL: b2Island.cpp<187:10> [b2Island.cpp <290:22 290:22>]
LOCAL_SYMBOL: b2Island.cpp<280:11> [b2Island.cpp <290:26 290:26>]
LOCAL_SYMBOL: b2Island.cpp<290:11> [b2Island.cpp <291:7 291:14>]
LOCAL_SYMBOL: b2Island.cpp<290:11> [b2Island.cpp <291:18 291:25>]
LOCAL_SYMBOL: b2Island.cpp<293:12> [b2Island.cpp <293:12 293:16>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 [b2Island.cpp <293:4 293:10>]
SYMBOL_FUNCTION float b2Abs<float>(float)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float b2Abs<float>(float) [b2Island.cpp <293:37 293:41>]
LOCAL_SYMBOL: b2Island.cpp<290:11> [b2Island.cpp <293:43 293:50>]
LOCAL_SYMBOL: b2Island.cpp<280:11> [b2Island.cpp <294:4 294:4>]
LOCAL_SYMBOL: b2Island.cpp<293:12> [b2Island.cpp <294:9 294:13>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Island.cpp <298:5 298:6>]
LOCAL_SYMBOL: b2Island.cpp<277:10> [b2Island.cpp <298:3 298:3>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Island.cpp <298:10 298:10>]
LOCAL_SYMBOL: b2Island.cpp<187:10> [b2Island.cpp <298:8 298:8>]
LOCAL_SYMBOL: b2Island.cpp<279:10> [b2Island.cpp <298:12 298:12>]
LOCAL_SYMBOL: b2Island.cpp<278:11> [b2Island.cpp <299:3 299:3>]
LOCAL_SYMBOL: b2Island.cpp<187:10> [b2Island.cpp <299:8 299:8>]
LOCAL_SYMBOL: b2Island.cpp<280:11> [b2Island.cpp <299:12 299:12>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <301:20 301:20>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Position::c [b2Island.cpp <301:18 301:18>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2Island::m_positions [b2Island.cpp <301:3 301:13>]
LOCAL_SYMBOL: b2Island.cpp<275:13> [b2Island.cpp <301:15 301:15>]
LOCAL_SYMBOL: b2Island.cpp<277:10> [b2Island.cpp <301:22 301:22>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Position::a [b2Island.cpp <302:18 302:18>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2Island::m_positions [b2Island.cpp <302:3 302:13>]
LOCAL_SYMBOL: b2Island.cpp<275:13> [b2Island.cpp <302:15 302:15>]
LOCAL_SYMBOL: b2Island.cpp<278:11> [b2Island.cpp <302:22 302:22>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <303:21 303:21>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Velocity::v [b2Island.cpp <303:19 303:19>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <303:3 303:14>]
LOCAL_SYMBOL: b2Island.cpp<275:13> [b2Island.cpp <303:16 303:16>]
LOCAL_SYMBOL: b2Island.cpp<279:10> [b2Island.cpp <303:23 303:23>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Velocity::w [b2Island.cpp <304:19 304:19>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <304:3 304:14>]
LOCAL_SYMBOL: b2Island.cpp<275:13> [b2Island.cpp <304:16 304:16>]
LOCAL_SYMBOL: b2Island.cpp<280:11> [b2Island.cpp <304:23 304:23>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Timer::Reset() [b2Island.cpp <308:8 308:12>]
LOCAL_SYMBOL: b2Island.cpp<185:10> [b2Island.cpp <308:2 308:6>]
LOCAL_SYMBOL: b2Island.cpp<309:7> [b2Island.cpp <309:7 309:20>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> bool [b2Island.cpp <309:2 309:5>]
LOCAL_SYMBOL: b2Island.cpp<310:13> [b2Island.cpp <310:13 310:13>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 [b2Island.cpp <310:7 310:11>]
LOCAL_SYMBOL: b2Island.cpp<310:13> [b2Island.cpp <310:20 310:20>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2TimeStep::positionIterations [b2Island.cpp <310:29 310:46>]
LOCAL_SYMBOL: b2Island.cpp<183:60> [b2Island.cpp <310:24 310:27>]
LOCAL_SYMBOL: b2Island.cpp<310:13> [b2Island.cpp <310:51 310:51>]
LOCAL_SYMBOL: b2Island.cpp<312:8> [b2Island.cpp <312:8 312:19>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> bool [b2Island.cpp <312:3 312:6>]
SYMBOL_FUNCTION bool b2ContactSolver::SolvePositionConstraints()
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> bool b2ContactSolver::SolvePositionConstraints() [b2Island.cpp <312:37 312:60>]
LOCAL_SYMBOL: b2Island.cpp<243:18> [b2Island.cpp <312:23 312:35>]
LOCAL_SYMBOL: b2Island.cpp<314:8> [b2Island.cpp <314:8 314:17>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> bool [b2Island.cpp <314:3 314:6>]
LOCAL_SYMBOL: b2Island.cpp<315:14> [b2Island.cpp <315:14 315:14>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 [b2Island.cpp <315:8 315:12>]
LOCAL_SYMBOL: b2Island.cpp<315:14> [b2Island.cpp <315:21 315:21>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2Island::m_jointCount [b2Island.cpp <315:25 315:36>]
LOCAL_SYMBOL: b2Island.cpp<315:14> [b2Island.cpp <315:41 315:41>]
LOCAL_SYMBOL: b2Island.cpp<317:9> [b2Island.cpp <317:9 317:17>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> bool [b2Island.cpp <317:4 317:7>]
SYMBOL_FUNCTION bool b2Joint::SolvePositionConstraints(const b2SolverData &)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> bool b2Joint::SolvePositionConstraints(const b2SolverData &) [b2Island.cpp <317:34 317:57>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Joint * * b2Island::m_joints [b2Island.cpp <317:21 317:28>]
LOCAL_SYMBOL: b2Island.cpp<315:14> [b2Island.cpp <317:30 317:30>]
LOCAL_SYMBOL: b2Island.cpp<229:15> [b2Island.cpp <317:59 317:68>]
LOCAL_SYMBOL: b2Island.cpp<314:8> [b2Island.cpp <318:4 318:13>]
LOCAL_SYMBOL: b2Island.cpp<314:8> [b2Island.cpp <318:17 318:26>]
LOCAL_SYMBOL: b2Island.cpp<317:9> [b2Island.cpp <318:31 318:39>]
LOCAL_SYMBOL: b2Island.cpp<312:8> [b2Island.cpp <321:7 321:18>]
LOCAL_SYMBOL: b2Island.cpp<314:8> [b2Island.cpp <321:23 321:32>]
LOCAL_SYMBOL: b2Island.cpp<309:7> [b2Island.cpp <324:4 324:17>]
LOCAL_SYMBOL: b2Island.cpp<330:13> [b2Island.cpp <330:13 330:13>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 [b2Island.cpp <330:7 330:11>]
LOCAL_SYMBOL: b2Island.cpp<330:13> [b2Island.cpp <330:20 330:20>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2Island::m_bodyCount [b2Island.cpp <330:24 330:34>]
LOCAL_SYMBOL: b2Island.cpp<330:13> [b2Island.cpp <330:39 330:39>]
LOCAL_SYMBOL: b2Island.cpp<332:11> [b2Island.cpp <332:11 332:14>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Body [b2Island.cpp <332:3 332:8>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Body * * b2Island::m_bodies [b2Island.cpp <332:18 332:25>]
LOCAL_SYMBOL: b2Island.cpp<330:13> [b2Island.cpp <332:27 332:27>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <333:19 333:19>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Sweep::c [b2Island.cpp <333:17 333:17>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Island.cpp <333:9 333:15>]
LOCAL_SYMBOL: b2Island.cpp<332:11> [b2Island.cpp <333:3 333:6>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Position::c [b2Island.cpp <333:36 333:36>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2Island::m_positions [b2Island.cpp <333:21 333:31>]
LOCAL_SYMBOL: b2Island.cpp<330:13> [b2Island.cpp <333:33 333:33>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Sweep::a [b2Island.cpp <334:17 334:17>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Sweep b2Body::m_sweep [b2Island.cpp <334:9 334:15>]
LOCAL_SYMBOL: b2Island.cpp<332:11> [b2Island.cpp <334:3 334:6>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Position::a [b2Island.cpp <334:36 334:36>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Position * b2Island::m_positions [b2Island.cpp <334:21 334:31>]
LOCAL_SYMBOL: b2Island.cpp<330:13> [b2Island.cpp <334:33 334:33>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <335:26 335:26>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Body::m_linearVelocity [b2Island.cpp <335:9 335:24>]
LOCAL_SYMBOL: b2Island.cpp<332:11> [b2Island.cpp <335:3 335:6>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Velocity::v [b2Island.cpp <335:44 335:44>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <335:28 335:39>]
LOCAL_SYMBOL: b2Island.cpp<330:13> [b2Island.cpp <335:41 335:41>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_angularVelocity [b2Island.cpp <336:9 336:25>]
LOCAL_SYMBOL: b2Island.cpp<332:11> [b2Island.cpp <336:3 336:6>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Velocity::w [b2Island.cpp <336:45 336:45>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <336:29 336:40>]
LOCAL_SYMBOL: b2Island.cpp<330:13> [b2Island.cpp <336:42 336:42>]
SYMBOL_FUNCTION void b2Body::SynchronizeTransform()
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Body::SynchronizeTransform() [b2Island.cpp <337:9 337:28>]
LOCAL_SYMBOL: b2Island.cpp<332:11> [b2Island.cpp <337:3 337:6>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Profile::solvePosition [b2Island.cpp <340:11 340:23>]
LOCAL_SYMBOL: b2Island.cpp<183:33> [b2Island.cpp <340:2 340:8>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Timer::GetMilliseconds() const [b2Island.cpp <340:33 340:47>]
LOCAL_SYMBOL: b2Island.cpp<185:10> [b2Island.cpp <340:27 340:31>]
SYMBOL_FUNCTION void b2Island::Report(const b2ContactVelocityConstraint *)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Island::Report(const b2ContactVelocityConstraint *) [b2Island.cpp <342:2 342:7>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2ContactVelocityConstraint * b2ContactSolver::m_velocityConstraints [b2Island.cpp <342:23 342:43>]
LOCAL_SYMBOL: b2Island.cpp<243:18> [b2Island.cpp <342:9 342:21>]
LOCAL_SYMBOL: b2Island.cpp<183:94> [b2Island.cpp <344:6 344:15>]
LOCAL_SYMBOL: b2Island.cpp<346:11> [b2Island.cpp <346:11 346:22>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 [b2Island.cpp <346:3 346:9>]
LOCAL_SYMBOL: b2Island.cpp<348:17> [b2Island.cpp <348:17 348:25>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 [b2Island.cpp <348:9 348:15>]
LOCAL_SYMBOL: b2Island.cpp<349:17> [b2Island.cpp <349:17 349:25>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 [b2Island.cpp <349:9 349:15>]
LOCAL_SYMBOL: b2Island.cpp<351:14> [b2Island.cpp <351:14 351:14>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 [b2Island.cpp <351:8 351:12>]
LOCAL_SYMBOL: b2Island.cpp<351:14> [b2Island.cpp <351:21 351:21>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2Island::m_bodyCount [b2Island.cpp <351:25 351:35>]
LOCAL_SYMBOL: b2Island.cpp<351:14> [b2Island.cpp <351:40 351:40>]
LOCAL_SYMBOL: b2Island.cpp<353:12> [b2Island.cpp <353:12 353:12>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Body [b2Island.cpp <353:4 353:9>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Body * * b2Island::m_bodies [b2Island.cpp <353:16 353:23>]
LOCAL_SYMBOL: b2Island.cpp<351:14> [b2Island.cpp <353:25 353:25>]
SYMBOL_FUNCTION b2BodyType b2Body::GetType() const
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2BodyType b2Body::GetType() const [b2Island.cpp <354:11 354:17>]
LOCAL_SYMBOL: b2Island.cpp<353:12> [b2Island.cpp <354:8 354:8>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2BodyType::b2_staticBody [b2Island.cpp <354:24 354:36>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> uint16 b2Body::m_flags [b2Island.cpp <359:12 359:18>]
LOCAL_SYMBOL: b2Island.cpp<353:12> [b2Island.cpp <359:9 359:9>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Body::anonymous enum (b2Body.h<413:2>)::e_autoSleepFlag [b2Island.cpp <359:30 359:44>]
SYMBOL_CLASS b2Body
QUALIFIER: b2Body [b2Island.cpp <359:22 359:27>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_angularVelocity [b2Island.cpp <360:8 360:24>]
LOCAL_SYMBOL: b2Island.cpp<353:12> [b2Island.cpp <360:5 360:5>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_angularVelocity [b2Island.cpp <360:31 360:47>]
LOCAL_SYMBOL: b2Island.cpp<353:12> [b2Island.cpp <360:28 360:28>]
LOCAL_SYMBOL: b2Island.cpp<349:17> [b2Island.cpp <360:51 360:59>]
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Island.cpp <361:5 361:9>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Body::m_linearVelocity [b2Island.cpp <361:14 361:29>]
LOCAL_SYMBOL: b2Island.cpp<353:12> [b2Island.cpp <361:11 361:11>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Vec2 b2Body::m_linearVelocity [b2Island.cpp <361:35 361:50>]
LOCAL_SYMBOL: b2Island.cpp<353:12> [b2Island.cpp <361:32 361:32>]
LOCAL_SYMBOL: b2Island.cpp<348:17> [b2Island.cpp <361:55 361:63>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_sleepTime [b2Island.cpp <363:8 363:18>]
LOCAL_SYMBOL: b2Island.cpp<353:12> [b2Island.cpp <363:5 363:5>]
LOCAL_SYMBOL: b2Island.cpp<346:11> [b2Island.cpp <364:5 364:16>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_sleepTime [b2Island.cpp <368:8 368:18>]
LOCAL_SYMBOL: b2Island.cpp<353:12> [b2Island.cpp <368:5 368:5>]
LOCAL_SYMBOL: b2Island.cpp<187:10> [b2Island.cpp <368:23 368:23>]
LOCAL_SYMBOL: b2Island.cpp<346:11> [b2Island.cpp <369:5 369:16>]
SYMBOL_FUNCTION float b2Min<float>(float, float)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float b2Min<float>(float, float) [b2Island.cpp <369:20 369:24>]
LOCAL_SYMBOL: b2Island.cpp<346:11> [b2Island.cpp <369:26 369:37>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> float32 b2Body::m_sleepTime [b2Island.cpp <369:43 369:53>]
LOCAL_SYMBOL: b2Island.cpp<353:12> [b2Island.cpp <369:40 369:40>]
LOCAL_SYMBOL: b2Island.cpp<346:11> [b2Island.cpp <373:7 373:18>]
LOCAL_SYMBOL: b2Island.cpp<309:7> [b2Island.cpp <373:41 373:54>]
LOCAL_SYMBOL: b2Island.cpp<375:15> [b2Island.cpp <375:15 375:15>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 [b2Island.cpp <375:9 375:13>]
LOCAL_SYMBOL: b2Island.cpp<375:15> [b2Island.cpp <375:22 375:22>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> int32 b2Island::m_bodyCount [b2Island.cpp <375:26 375:36>]
LOCAL_SYMBOL: b2Island.cpp<375:15> [b2Island.cpp <375:41 375:41>]
LOCAL_SYMBOL: b2Island.cpp<377:13> [b2Island.cpp <377:13 377:13>]
REFERENCE_TYPE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Body [b2Island.cpp <377:5 377:10>]
REFERENCE_USAGE void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> b2Body * * b2Island::m_bodies [b2Island.cpp <377:17 377:24>]
LOCAL_SYMBOL: b2Island.cpp<375:15> [b2Island.cpp <377:26 377:26>]
SYMBOL_FUNCTION void b2Body::SetAwake(bool)
REFERENCE_CALL void b2Island::Solve(b2Profile *, const b2TimeStep &, const b2Vec2 &, bool) -> void b2Body::SetAwake(bool) [b2Island.cpp <378:8 378:15>]
LOCAL_SYMBOL: b2Island.cpp<377:13> [b2Island.cpp <378:5 378:5>]
SYMBOL_METHOD public void b2Island::SolveTOI(const b2TimeStep &, int32, int32) [b2Island.cpp <384:1 <384:16 384:23> 514:1>]
QUALIFIER: b2Island [b2Island.cpp <384:6 384:13>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void [b2Island.cpp <384:1 384:4>]
LOCAL_SYMBOL: b2Island.cpp<384:43> [b2Island.cpp <384:43 384:49>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2TimeStep [b2Island.cpp <384:31 384:40>]
LOCAL_SYMBOL: b2Island.cpp<384:58> [b2Island.cpp <384:58 384:66>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 [b2Island.cpp <384:52 384:56>]
LOCAL_SYMBOL: b2Island.cpp<384:75> [b2Island.cpp <384:75 384:83>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 [b2Island.cpp <384:69 384:73>]
LOCAL_SYMBOL: b2Island.cpp<384:58> [b2Island.cpp <386:11 386:19>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 b2Island::m_bodyCount [b2Island.cpp <386:23 386:33>]
LOCAL_SYMBOL: b2Island.cpp<384:75> [b2Island.cpp <387:11 387:19>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 b2Island::m_bodyCount [b2Island.cpp <387:23 387:33>]
LOCAL_SYMBOL: b2Island.cpp<390:13> [b2Island.cpp <390:13 390:13>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 [b2Island.cpp <390:7 390:11>]
LOCAL_SYMBOL: b2Island.cpp<390:13> [b2Island.cpp <390:20 390:20>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 b2Island::m_bodyCount [b2Island.cpp <390:24 390:34>]
LOCAL_SYMBOL: b2Island.cpp<390:13> [b2Island.cpp <390:39 390:39>]
LOCAL_SYMBOL: b2Island.cpp<392:11> [b2Island.cpp <392:11 392:11>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Body [b2Island.cpp <392:3 392:8>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Body * * b2Island::m_bodies [b2Island.cpp <392:15 392:22>]
LOCAL_SYMBOL: b2Island.cpp<390:13> [b2Island.cpp <392:24 392:24>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <393:20 393:20>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Position::c [b2Island.cpp <393:18 393:18>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2Island::m_positions [b2Island.cpp <393:3 393:13>]
LOCAL_SYMBOL: b2Island.cpp<390:13> [b2Island.cpp <393:15 393:15>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Sweep::c [b2Island.cpp <393:33 393:33>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Sweep b2Body::m_sweep [b2Island.cpp <393:25 393:31>]
LOCAL_SYMBOL: b2Island.cpp<392:11> [b2Island.cpp <393:22 393:22>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Position::a [b2Island.cpp <394:18 394:18>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2Island::m_positions [b2Island.cpp <394:3 394:13>]
LOCAL_SYMBOL: b2Island.cpp<390:13> [b2Island.cpp <394:15 394:15>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Sweep::a [b2Island.cpp <394:33 394:33>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Sweep b2Body::m_sweep [b2Island.cpp <394:25 394:31>]
LOCAL_SYMBOL: b2Island.cpp<392:11> [b2Island.cpp <394:22 394:22>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <395:21 395:21>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Velocity::v [b2Island.cpp <395:19 395:19>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <395:3 395:14>]
LOCAL_SYMBOL: b2Island.cpp<390:13> [b2Island.cpp <395:16 395:16>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Body::m_linearVelocity [b2Island.cpp <395:26 395:41>]
LOCAL_SYMBOL: b2Island.cpp<392:11> [b2Island.cpp <395:23 395:23>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Velocity::w [b2Island.cpp <396:19 396:19>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <396:3 396:14>]
LOCAL_SYMBOL: b2Island.cpp<390:13> [b2Island.cpp <396:16 396:16>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Body::m_angularVelocity [b2Island.cpp <396:26 396:42>]
LOCAL_SYMBOL: b2Island.cpp<392:11> [b2Island.cpp <396:23 396:23>]
LOCAL_SYMBOL: b2Island.cpp<399:21> [b2Island.cpp <399:21 399:36>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2ContactSolverDef [b2Island.cpp <399:2 399:19>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void b2ContactSolverDef::b2ContactSolverDef() [b2Island.cpp <399:21 399:36>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Contact * * b2ContactSolverDef::contacts [b2Island.cpp <400:19 400:26>]
LOCAL_SYMBOL: b2Island.cpp<399:21> [b2Island.cpp <400:2 400:17>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Contact * * b2Island::m_contacts [b2Island.cpp <400:30 400:39>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 b2ContactSolverDef::count [b2Island.cpp <401:19 401:23>]
LOCAL_SYMBOL: b2Island.cpp<399:21> [b2Island.cpp <401:2 401:17>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 b2Island::m_contactCount [b2Island.cpp <401:27 401:40>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2StackAllocator * b2ContactSolverDef::allocator [b2Island.cpp <402:19 402:27>]
LOCAL_SYMBOL: b2Island.cpp<399:21> [b2Island.cpp <402:2 402:17>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2StackAllocator * b2Island::m_allocator [b2Island.cpp <402:31 402:41>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2TimeStep & b2TimeStep::operator=(const b2TimeStep &) [b2Island.cpp <403:24 403:24>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2TimeStep b2ContactSolverDef::step [b2Island.cpp <403:19 403:22>]
LOCAL_SYMBOL: b2Island.cpp<399:21> [b2Island.cpp <403:2 403:17>]
LOCAL_SYMBOL: b2Island.cpp<384:43> [b2Island.cpp <403:26 403:32>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2ContactSolverDef::positions [b2Island.cpp <404:19 404:27>]
LOCAL_SYMBOL: b2Island.cpp<399:21> [b2Island.cpp <404:2 404:17>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2Island::m_positions [b2Island.cpp <404:31 404:41>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Velocity * b2ContactSolverDef::velocities [b2Island.cpp <405:19 405:28>]
LOCAL_SYMBOL: b2Island.cpp<399:21> [b2Island.cpp <405:2 405:17>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <405:32 405:43>]
LOCAL_SYMBOL: b2Island.cpp<406:18> [b2Island.cpp <406:18 406:30>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2ContactSolver [b2Island.cpp <406:2 406:16>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void b2ContactSolver::b2ContactSolver(b2ContactSolverDef *) [b2Island.cpp <406:18 406:30>]
LOCAL_SYMBOL: b2Island.cpp<399:21> [b2Island.cpp <406:33 406:48>]
LOCAL_SYMBOL: b2Island.cpp<409:13> [b2Island.cpp <409:13 409:13>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 [b2Island.cpp <409:7 409:11>]
LOCAL_SYMBOL: b2Island.cpp<409:13> [b2Island.cpp <409:20 409:20>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 b2TimeStep::positionIterations [b2Island.cpp <409:32 409:49>]
LOCAL_SYMBOL: b2Island.cpp<384:43> [b2Island.cpp <409:24 409:30>]
LOCAL_SYMBOL: b2Island.cpp<409:13> [b2Island.cpp <409:54 409:54>]
LOCAL_SYMBOL: b2Island.cpp<411:8> [b2Island.cpp <411:8 411:19>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> bool [b2Island.cpp <411:3 411:6>]
SYMBOL_FUNCTION bool b2ContactSolver::SolveTOIPositionConstraints(int32, int32)
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> bool b2ContactSolver::SolveTOIPositionConstraints(int32, int32) [b2Island.cpp <411:37 411:63>]
LOCAL_SYMBOL: b2Island.cpp<406:18> [b2Island.cpp <411:23 411:35>]
LOCAL_SYMBOL: b2Island.cpp<384:58> [b2Island.cpp <411:65 411:73>]
LOCAL_SYMBOL: b2Island.cpp<384:75> [b2Island.cpp <411:76 411:84>]
LOCAL_SYMBOL: b2Island.cpp<411:8> [b2Island.cpp <412:7 412:18>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <452:34 452:34>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Sweep::c0 [b2Island.cpp <452:31 452:32>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Sweep b2Body::m_sweep [b2Island.cpp <452:23 452:29>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Body * * b2Island::m_bodies [b2Island.cpp <452:2 452:9>]
LOCAL_SYMBOL: b2Island.cpp<384:58> [b2Island.cpp <452:11 452:19>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Position::c [b2Island.cpp <452:59 452:59>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2Island::m_positions [b2Island.cpp <452:36 452:46>]
LOCAL_SYMBOL: b2Island.cpp<384:58> [b2Island.cpp <452:48 452:56>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Sweep::a0 [b2Island.cpp <453:31 453:32>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Sweep b2Body::m_sweep [b2Island.cpp <453:23 453:29>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Body * * b2Island::m_bodies [b2Island.cpp <453:2 453:9>]
LOCAL_SYMBOL: b2Island.cpp<384:58> [b2Island.cpp <453:11 453:19>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Position::a [b2Island.cpp <453:59 453:59>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2Island::m_positions [b2Island.cpp <453:36 453:46>]
LOCAL_SYMBOL: b2Island.cpp<384:58> [b2Island.cpp <453:48 453:56>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <454:34 454:34>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Sweep::c0 [b2Island.cpp <454:31 454:32>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Sweep b2Body::m_sweep [b2Island.cpp <454:23 454:29>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Body * * b2Island::m_bodies [b2Island.cpp <454:2 454:9>]
LOCAL_SYMBOL: b2Island.cpp<384:75> [b2Island.cpp <454:11 454:19>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Position::c [b2Island.cpp <454:59 454:59>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2Island::m_positions [b2Island.cpp <454:36 454:46>]
LOCAL_SYMBOL: b2Island.cpp<384:75> [b2Island.cpp <454:48 454:56>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Sweep::a0 [b2Island.cpp <455:31 455:32>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Sweep b2Body::m_sweep [b2Island.cpp <455:23 455:29>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Body * * b2Island::m_bodies [b2Island.cpp <455:2 455:9>]
LOCAL_SYMBOL: b2Island.cpp<384:75> [b2Island.cpp <455:11 455:19>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Position::a [b2Island.cpp <455:59 455:59>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2Island::m_positions [b2Island.cpp <455:36 455:46>]
LOCAL_SYMBOL: b2Island.cpp<384:75> [b2Island.cpp <455:48 455:56>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void b2ContactSolver::InitializeVelocityConstraints() [b2Island.cpp <459:16 459:44>]
LOCAL_SYMBOL: b2Island.cpp<406:18> [b2Island.cpp <459:2 459:14>]
LOCAL_SYMBOL: b2Island.cpp<462:13> [b2Island.cpp <462:13 462:13>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 [b2Island.cpp <462:7 462:11>]
LOCAL_SYMBOL: b2Island.cpp<462:13> [b2Island.cpp <462:20 462:20>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 b2TimeStep::velocityIterations [b2Island.cpp <462:32 462:49>]
LOCAL_SYMBOL: b2Island.cpp<384:43> [b2Island.cpp <462:24 462:30>]
LOCAL_SYMBOL: b2Island.cpp<462:13> [b2Island.cpp <462:54 462:54>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void b2ContactSolver::SolveVelocityConstraints() [b2Island.cpp <464:17 464:40>]
LOCAL_SYMBOL: b2Island.cpp<406:18> [b2Island.cpp <464:3 464:15>]
LOCAL_SYMBOL: b2Island.cpp<470:10> [b2Island.cpp <470:10 470:10>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 [b2Island.cpp <470:2 470:8>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2TimeStep::dt [b2Island.cpp <470:22 470:23>]
LOCAL_SYMBOL: b2Island.cpp<384:43> [b2Island.cpp <470:14 470:20>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <473:13 473:13>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 [b2Island.cpp <473:7 473:11>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <473:20 473:20>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> int32 b2Island::m_bodyCount [b2Island.cpp <473:24 473:34>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <473:39 473:39>]
LOCAL_SYMBOL: b2Island.cpp<475:10> [b2Island.cpp <475:10 475:10>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 [b2Island.cpp <475:3 475:8>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Island.cpp <475:29 475:29>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Position::c [b2Island.cpp <475:29 475:29>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2Island::m_positions [b2Island.cpp <475:14 475:24>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <475:26 475:26>]
LOCAL_SYMBOL: b2Island.cpp<476:11> [b2Island.cpp <476:11 476:11>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 [b2Island.cpp <476:3 476:9>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Position::a [b2Island.cpp <476:30 476:30>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2Island::m_positions [b2Island.cpp <476:15 476:25>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <476:27 476:27>]
LOCAL_SYMBOL: b2Island.cpp<477:10> [b2Island.cpp <477:10 477:10>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 [b2Island.cpp <477:3 477:8>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2Island.cpp <477:30 477:30>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Velocity::v [b2Island.cpp <477:30 477:30>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <477:14 477:25>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <477:27 477:27>]
LOCAL_SYMBOL: b2Island.cpp<478:11> [b2Island.cpp <478:11 478:11>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 [b2Island.cpp <478:3 478:9>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Velocity::w [b2Island.cpp <478:31 478:31>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <478:15 478:26>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <478:28 478:28>]
LOCAL_SYMBOL: b2Island.cpp<481:10> [b2Island.cpp <481:10 481:20>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 [b2Island.cpp <481:3 481:8>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Island.cpp <481:26 481:26>]
LOCAL_SYMBOL: b2Island.cpp<470:10> [b2Island.cpp <481:24 481:24>]
LOCAL_SYMBOL: b2Island.cpp<477:10> [b2Island.cpp <481:28 481:28>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2Island.cpp <482:7 482:11>]
LOCAL_SYMBOL: b2Island.cpp<481:10> [b2Island.cpp <482:13 482:23>]
LOCAL_SYMBOL: b2Island.cpp<481:10> [b2Island.cpp <482:26 482:36>]
LOCAL_SYMBOL: b2Island.cpp<484:12> [b2Island.cpp <484:12 484:16>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 [b2Island.cpp <484:4 484:10>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Vec2::Length() const [b2Island.cpp <484:52 484:57>]
LOCAL_SYMBOL: b2Island.cpp<481:10> [b2Island.cpp <484:40 484:50>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void b2Vec2::operator*=(float32) [b2Island.cpp <485:6 485:7>]
LOCAL_SYMBOL: b2Island.cpp<477:10> [b2Island.cpp <485:4 485:4>]
LOCAL_SYMBOL: b2Island.cpp<484:12> [b2Island.cpp <485:9 485:13>]
LOCAL_SYMBOL: b2Island.cpp<488:11> [b2Island.cpp <488:11 488:18>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 [b2Island.cpp <488:3 488:9>]
LOCAL_SYMBOL: b2Island.cpp<470:10> [b2Island.cpp <488:22 488:22>]
LOCAL_SYMBOL: b2Island.cpp<478:11> [b2Island.cpp <488:26 488:26>]
LOCAL_SYMBOL: b2Island.cpp<488:11> [b2Island.cpp <489:7 489:14>]
LOCAL_SYMBOL: b2Island.cpp<488:11> [b2Island.cpp <489:18 489:25>]
LOCAL_SYMBOL: b2Island.cpp<491:12> [b2Island.cpp <491:12 491:16>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 [b2Island.cpp <491:4 491:10>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float b2Abs<float>(float) [b2Island.cpp <491:37 491:41>]
LOCAL_SYMBOL: b2Island.cpp<488:11> [b2Island.cpp <491:43 491:50>]
LOCAL_SYMBOL: b2Island.cpp<478:11> [b2Island.cpp <492:4 492:4>]
LOCAL_SYMBOL: b2Island.cpp<491:12> [b2Island.cpp <492:9 492:13>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void b2Vec2::operator+=(const b2Vec2 &) [b2Island.cpp <496:5 496:6>]
LOCAL_SYMBOL: b2Island.cpp<475:10> [b2Island.cpp <496:3 496:3>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2Island.cpp <496:10 496:10>]
LOCAL_SYMBOL: b2Island.cpp<470:10> [b2Island.cpp <496:8 496:8>]
LOCAL_SYMBOL: b2Island.cpp<477:10> [b2Island.cpp <496:12 496:12>]
LOCAL_SYMBOL: b2Island.cpp<476:11> [b2Island.cpp <497:3 497:3>]
LOCAL_SYMBOL: b2Island.cpp<470:10> [b2Island.cpp <497:8 497:8>]
LOCAL_SYMBOL: b2Island.cpp<478:11> [b2Island.cpp <497:12 497:12>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <499:20 499:20>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Position::c [b2Island.cpp <499:18 499:18>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2Island::m_positions [b2Island.cpp <499:3 499:13>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <499:15 499:15>]
LOCAL_SYMBOL: b2Island.cpp<475:10> [b2Island.cpp <499:22 499:22>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Position::a [b2Island.cpp <500:18 500:18>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Position * b2Island::m_positions [b2Island.cpp <500:3 500:13>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <500:15 500:15>]
LOCAL_SYMBOL: b2Island.cpp<476:11> [b2Island.cpp <500:22 500:22>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <501:21 501:21>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Velocity::v [b2Island.cpp <501:19 501:19>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <501:3 501:14>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <501:16 501:16>]
LOCAL_SYMBOL: b2Island.cpp<477:10> [b2Island.cpp <501:23 501:23>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Velocity::w [b2Island.cpp <502:19 502:19>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Velocity * b2Island::m_velocities [b2Island.cpp <502:3 502:14>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <502:16 502:16>]
LOCAL_SYMBOL: b2Island.cpp<478:11> [b2Island.cpp <502:23 502:23>]
LOCAL_SYMBOL: b2Island.cpp<505:11> [b2Island.cpp <505:11 505:14>]
REFERENCE_TYPE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Body [b2Island.cpp <505:3 505:8>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Body * * b2Island::m_bodies [b2Island.cpp <505:18 505:25>]
LOCAL_SYMBOL: b2Island.cpp<473:13> [b2Island.cpp <505:27 505:27>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <506:19 506:19>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Sweep::c [b2Island.cpp <506:17 506:17>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Sweep b2Body::m_sweep [b2Island.cpp <506:9 506:15>]
LOCAL_SYMBOL: b2Island.cpp<505:11> [b2Island.cpp <506:3 506:6>]
LOCAL_SYMBOL: b2Island.cpp<475:10> [b2Island.cpp <506:21 506:21>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Sweep::a [b2Island.cpp <507:17 507:17>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Sweep b2Body::m_sweep [b2Island.cpp <507:9 507:15>]
LOCAL_SYMBOL: b2Island.cpp<505:11> [b2Island.cpp <507:3 507:6>]
LOCAL_SYMBOL: b2Island.cpp<476:11> [b2Island.cpp <507:21 507:21>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2Island.cpp <508:26 508:26>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2Vec2 b2Body::m_linearVelocity [b2Island.cpp <508:9 508:24>]
LOCAL_SYMBOL: b2Island.cpp<505:11> [b2Island.cpp <508:3 508:6>]
LOCAL_SYMBOL: b2Island.cpp<477:10> [b2Island.cpp <508:28 508:28>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> float32 b2Body::m_angularVelocity [b2Island.cpp <509:9 509:25>]
LOCAL_SYMBOL: b2Island.cpp<505:11> [b2Island.cpp <509:3 509:6>]
LOCAL_SYMBOL: b2Island.cpp<478:11> [b2Island.cpp <509:29 509:29>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void b2Body::SynchronizeTransform() [b2Island.cpp <510:9 510:28>]
LOCAL_SYMBOL: b2Island.cpp<505:11> [b2Island.cpp <510:3 510:6>]
REFERENCE_CALL void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> void b2Island::Report(const b2ContactVelocityConstraint *) [b2Island.cpp <513:2 513:7>]
REFERENCE_USAGE void b2Island::SolveTOI(const b2TimeStep &, int32, int32) -> b2ContactVelocityConstraint * b2ContactSolver::m_velocityConstraints [b2Island.cpp <513:23 513:43>]
LOCAL_SYMBOL: b2Island.cpp<406:18> [b2Island.cpp <513:9 513:21>]
SYMBOL_METHOD public void b2Island::Report(const b2ContactVelocityConstraint *) [b2Island.cpp <516:1 <516:16 516:21> 539:1>]
QUALIFIER: b2Island [b2Island.cpp <516:6 516:13>]
REFERENCE_TYPE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> void [b2Island.cpp <516:1 516:4>]
LOCAL_SYMBOL: b2Island.cpp<516:58> [b2Island.cpp <516:58 516:68>]
REFERENCE_TYPE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> b2ContactVelocityConstraint [b2Island.cpp <516:29 516:55>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> b2ContactListener * b2Island::m_listener [b2Island.cpp <518:6 518:15>]
LOCAL_SYMBOL: b2Island.cpp<523:13> [b2Island.cpp <523:13 523:13>]
REFERENCE_TYPE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> int32 [b2Island.cpp <523:7 523:11>]
LOCAL_SYMBOL: b2Island.cpp<523:13> [b2Island.cpp <523:20 523:20>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> int32 b2Island::m_contactCount [b2Island.cpp <523:24 523:37>]
LOCAL_SYMBOL: b2Island.cpp<523:13> [b2Island.cpp <523:42 523:42>]
LOCAL_SYMBOL: b2Island.cpp<525:14> [b2Island.cpp <525:14 525:14>]
REFERENCE_TYPE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> b2Contact [b2Island.cpp <525:3 525:11>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> b2Contact * * b2Island::m_contacts [b2Island.cpp <525:18 525:27>]
LOCAL_SYMBOL: b2Island.cpp<523:13> [b2Island.cpp <525:29 525:29>]
LOCAL_SYMBOL: b2Island.cpp<527:38> [b2Island.cpp <527:38 527:39>]
REFERENCE_TYPE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> b2ContactVelocityConstraint [b2Island.cpp <527:9 527:35>]
LOCAL_SYMBOL: b2Island.cpp<516:58> [b2Island.cpp <527:43 527:53>]
LOCAL_SYMBOL: b2Island.cpp<523:13> [b2Island.cpp <527:57 527:57>]
LOCAL_SYMBOL: b2Island.cpp<529:20> [b2Island.cpp <529:20 529:26>]
REFERENCE_TYPE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> b2ContactImpulse [b2Island.cpp <529:3 529:18>]
SYMBOL_FUNCTION void b2ContactImpulse::b2ContactImpulse()
REFERENCE_CALL void b2Island::Report(const b2ContactVelocityConstraint *) -> void b2ContactImpulse::b2ContactImpulse() [b2Island.cpp <529:20 529:26>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> int32 b2ContactImpulse::count [b2Island.cpp <530:11 530:15>]
LOCAL_SYMBOL: b2Island.cpp<529:20> [b2Island.cpp <530:3 530:9>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> int32 b2ContactVelocityConstraint::pointCount [b2Island.cpp <530:23 530:32>]
LOCAL_SYMBOL: b2Island.cpp<527:38> [b2Island.cpp <530:19 530:20>]
LOCAL_SYMBOL: b2Island.cpp<531:14> [b2Island.cpp <531:14 531:14>]
REFERENCE_TYPE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> int32 [b2Island.cpp <531:8 531:12>]
LOCAL_SYMBOL: b2Island.cpp<531:14> [b2Island.cpp <531:21 531:21>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> int32 b2ContactVelocityConstraint::pointCount [b2Island.cpp <531:29 531:38>]
LOCAL_SYMBOL: b2Island.cpp<527:38> [b2Island.cpp <531:25 531:26>]
LOCAL_SYMBOL: b2Island.cpp<531:14> [b2Island.cpp <531:43 531:43>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> float32 [] b2ContactImpulse::normalImpulses [b2Island.cpp <533:12 533:25>]
LOCAL_SYMBOL: b2Island.cpp<529:20> [b2Island.cpp <533:4 533:10>]
LOCAL_SYMBOL: b2Island.cpp<531:14> [b2Island.cpp <533:27 533:27>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> float32 b2VelocityConstraintPoint::normalImpulse [b2Island.cpp <533:46 533:58>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> b2VelocityConstraintPoint [] b2ContactVelocityConstraint::points [b2Island.cpp <533:36 533:41>]
LOCAL_SYMBOL: b2Island.cpp<527:38> [b2Island.cpp <533:32 533:33>]
LOCAL_SYMBOL: b2Island.cpp<531:14> [b2Island.cpp <533:43 533:43>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> float32 [] b2ContactImpulse::tangentImpulses [b2Island.cpp <534:12 534:26>]
LOCAL_SYMBOL: b2Island.cpp<529:20> [b2Island.cpp <534:4 534:10>]
LOCAL_SYMBOL: b2Island.cpp<531:14> [b2Island.cpp <534:28 534:28>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> float32 b2VelocityConstraintPoint::tangentImpulse [b2Island.cpp <534:47 534:60>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> b2VelocityConstraintPoint [] b2ContactVelocityConstraint::points [b2Island.cpp <534:37 534:42>]
LOCAL_SYMBOL: b2Island.cpp<527:38> [b2Island.cpp <534:33 534:34>]
LOCAL_SYMBOL: b2Island.cpp<531:14> [b2Island.cpp <534:44 534:44>]
SYMBOL_FUNCTION void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *)
REFERENCE_CALL void b2Island::Report(const b2ContactVelocityConstraint *) -> void b2ContactListener::PostSolve(b2Contact *, const b2ContactImpulse *) [b2Island.cpp <537:15 537:23>]
REFERENCE_USAGE void b2Island::Report(const b2ContactVelocityConstraint *) -> b2ContactListener * b2Island::m_listener [b2Island.cpp <537:3 537:12>]
LOCAL_SYMBOL: b2Island.cpp<525:14> [b2Island.cpp <537:25 537:25>]
LOCAL_SYMBOL: b2Island.cpp<529:20> [b2Island.cpp <537:29 537:35>]
