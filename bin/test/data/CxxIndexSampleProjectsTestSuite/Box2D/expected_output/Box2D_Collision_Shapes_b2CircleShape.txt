FILE: b2CircleShape.cpp
COMMENT: comment [b2CircleShape.cpp <1:1 17:3>]
COMMENT: comment [b2CircleShape.cpp <42:1 42:77>]
COMMENT: comment [b2CircleShape.cpp <43:1 43:22>]
COMMENT: comment [b2CircleShape.cpp <44:1 44:17>]
COMMENT: comment [b2CircleShape.cpp <45:1 45:20>]
REFERENCE_MACRO_USAGE b2CircleShape.cpp -> B2_NOT_USED [b2CircleShape.cpp <49:2 49:12>]
COMMENT: comment [b2CircleShape.cpp <55:2 55:30>]
COMMENT: comment [b2CircleShape.cpp <61:2 61:55>]
REFERENCE_MACRO_USAGE b2CircleShape.cpp -> b2_epsilon [b2CircleShape.cpp <62:27 62:36>]
REFERENCE_MACRO_USAGE b2Settings.h -> FLT_EPSILON [b2Settings.h <43:21 43:31>]
COMMENT: comment [b2CircleShape.cpp <67:2 67:64>]
REFERENCE_MACRO_USAGE b2CircleShape.cpp -> b2Sqrt [b2CircleShape.cpp <68:20 68:25>]
COMMENT: comment [b2CircleShape.cpp <70:2 70:46>]
REFERENCE_MACRO_USAGE b2CircleShape.cpp -> B2_NOT_USED [b2CircleShape.cpp <85:2 85:12>]
REFERENCE_MACRO_USAGE b2CircleShape.cpp -> b2_pi [b2CircleShape.cpp <94:29 94:33>]
COMMENT: comment [b2CircleShape.cpp <97:2 97:35>]
SYMBOL_METHOD public b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const [b2CircleShape.cpp <22:1 <22:25 22:29> 28:1>]
SYMBOL_FUNCTION b2Shape * b2Shape::Clone(b2BlockAllocator *) const
REFERENCE_OVERRIDE b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2CircleShape.cpp <22:25 22:29>]
SYMBOL_CLASS b2CircleShape
QUALIFIER: b2CircleShape [b2CircleShape.cpp <22:10 22:22>]
REFERENCE_TYPE_USAGE b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2Shape [b2CircleShape.cpp <22:1 22:7>]
LOCAL_SYMBOL: b2CircleShape.cpp<22:49> [b2CircleShape.cpp <22:49 22:57>]
REFERENCE_TYPE_USAGE b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2CircleShape.cpp <22:31 22:46>]
LOCAL_SYMBOL: b2CircleShape.cpp<24:8> [b2CircleShape.cpp <24:8 24:10>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> void [b2CircleShape.cpp <24:2 24:5>]
SYMBOL_FUNCTION void * b2BlockAllocator::Allocate(int32)
REFERENCE_CALL b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> void * b2BlockAllocator::Allocate(int32) [b2CircleShape.cpp <24:25 24:32>]
LOCAL_SYMBOL: b2CircleShape.cpp<22:49> [b2CircleShape.cpp <24:14 24:22>]
REFERENCE_TYPE_USAGE b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2CircleShape [b2CircleShape.cpp <24:41 24:53>]
LOCAL_SYMBOL: b2CircleShape.cpp<25:17> [b2CircleShape.cpp <25:17 25:21>]
REFERENCE_TYPE_USAGE b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2CircleShape [b2CircleShape.cpp <25:2 25:14>]
REFERENCE_TYPE_USAGE b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2CircleShape [b2CircleShape.cpp <25:35 25:47>]
SYMBOL_FUNCTION void b2CircleShape::b2CircleShape()
REFERENCE_CALL b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> void b2CircleShape::b2CircleShape() [b2CircleShape.cpp <25:35 25:47>]
LOCAL_SYMBOL: b2CircleShape.cpp<24:8> [b2CircleShape.cpp <25:30 25:32>]
SYMBOL_FUNCTION b2CircleShape & b2CircleShape::operator=(const b2CircleShape &)
REFERENCE_CALL b2Shape * b2CircleShape::Clone(b2BlockAllocator *) const -> b2CircleShape & b2CircleShape::operator=(const b2CircleShape &) [b2CircleShape.cpp <26:9 26:9>]
LOCAL_SYMBOL: b2CircleShape.cpp<25:17> [b2CircleShape.cpp <26:3 26:7>]
LOCAL_SYMBOL: b2CircleShape.cpp<25:17> [b2CircleShape.cpp <27:9 27:13>]
SYMBOL_METHOD public int32 b2CircleShape::GetChildCount() const [b2CircleShape.cpp <30:1 <30:22 30:34> 33:1>]
SYMBOL_FUNCTION int32 b2Shape::GetChildCount() const
REFERENCE_OVERRIDE int32 b2CircleShape::GetChildCount() const -> int32 b2Shape::GetChildCount() const [b2CircleShape.cpp <30:22 30:34>]
QUALIFIER: b2CircleShape [b2CircleShape.cpp <30:7 30:19>]
REFERENCE_TYPE_USAGE int32 b2CircleShape::GetChildCount() const -> int32 [b2CircleShape.cpp <30:1 30:5>]
SYMBOL_METHOD public bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2CircleShape.cpp <35:1 <35:21 35:29> 40:1>]
SYMBOL_FUNCTION bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const
REFERENCE_OVERRIDE bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2CircleShape.cpp <35:21 35:29>]
QUALIFIER: b2CircleShape [b2CircleShape.cpp <35:6 35:18>]
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2CircleShape.cpp <35:1 35:4>]
LOCAL_SYMBOL: b2CircleShape.cpp<35:50> [b2CircleShape.cpp <35:50 35:58>]
REFERENCE_TYPE_USAGE bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2CircleShape.cpp <35:37 35:47>]
LOCAL_SYMBOL: b2CircleShape.cpp<35:75> [b2CircleShape.cpp <35:75 35:75>]
REFERENCE_TYPE_USAGE bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2CircleShape.cpp <35:67 35:72>]
LOCAL_SYMBOL: b2CircleShape.cpp<37:9> [b2CircleShape.cpp <37:9 37:14>]
REFERENCE_TYPE_USAGE bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2CircleShape.cpp <37:2 37:7>]
SYMBOL_FUNCTION b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <37:30 37:30>]
REFERENCE_USAGE bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 b2Transform::p [b2CircleShape.cpp <37:28 37:28>]
LOCAL_SYMBOL: b2CircleShape.cpp<35:50> [b2CircleShape.cpp <37:18 37:26>]
SYMBOL_FUNCTION b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &)
REFERENCE_CALL bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2CircleShape.cpp <37:32 37:36>]
REFERENCE_USAGE bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Rot b2Transform::q [b2CircleShape.cpp <37:48 37:48>]
LOCAL_SYMBOL: b2CircleShape.cpp<35:50> [b2CircleShape.cpp <37:38 37:46>]
REFERENCE_USAGE bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 b2CircleShape::m_p [b2CircleShape.cpp <37:51 37:53>]
LOCAL_SYMBOL: b2CircleShape.cpp<38:9> [b2CircleShape.cpp <38:9 38:9>]
REFERENCE_TYPE_USAGE bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2CircleShape.cpp <38:2 38:7>]
SYMBOL_FUNCTION b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <38:15 38:15>]
LOCAL_SYMBOL: b2CircleShape.cpp<35:75> [b2CircleShape.cpp <38:13 38:13>]
LOCAL_SYMBOL: b2CircleShape.cpp<37:9> [b2CircleShape.cpp <38:17 38:22>]
SYMBOL_FUNCTION float32 b2Dot(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <39:9 39:13>]
LOCAL_SYMBOL: b2CircleShape.cpp<38:9> [b2CircleShape.cpp <39:15 39:15>]
LOCAL_SYMBOL: b2CircleShape.cpp<38:9> [b2CircleShape.cpp <39:18 39:18>]
REFERENCE_USAGE bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <39:24 39:31>]
REFERENCE_USAGE bool b2CircleShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <39:35 39:42>]
SYMBOL_METHOD public bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2CircleShape.cpp <46:1 <46:21 46:27> 81:1>]
SYMBOL_FUNCTION bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const
REFERENCE_OVERRIDE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2CircleShape.cpp <46:21 46:27>]
QUALIFIER: b2CircleShape [b2CircleShape.cpp <46:6 46:18>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2CircleShape.cpp <46:1 46:4>]
LOCAL_SYMBOL: b2CircleShape.cpp<46:46> [b2CircleShape.cpp <46:46 46:51>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2CircleShape.cpp <46:29 46:43>]
LOCAL_SYMBOL: b2CircleShape.cpp<46:76> [b2CircleShape.cpp <46:76 46:80>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2CircleShape.cpp <46:60 46:73>]
LOCAL_SYMBOL: b2CircleShape.cpp<47:27> [b2CircleShape.cpp <47:27 47:35>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2CircleShape.cpp <47:14 47:24>]
LOCAL_SYMBOL: b2CircleShape.cpp<47:44> [b2CircleShape.cpp <47:44 47:53>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2CircleShape.cpp <47:38 47:42>]
LOCAL_SYMBOL: b2CircleShape.cpp<47:44> [b2CircleShape.cpp <49:14 49:23>]
LOCAL_SYMBOL: b2CircleShape.cpp<51:9> [b2CircleShape.cpp <51:9 51:16>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2CircleShape.cpp <51:2 51:7>]
REFERENCE_CALL bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <51:32 51:32>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2Transform::p [b2CircleShape.cpp <51:30 51:30>]
LOCAL_SYMBOL: b2CircleShape.cpp<47:27> [b2CircleShape.cpp <51:20 51:28>]
REFERENCE_CALL bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2CircleShape.cpp <51:34 51:38>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Rot b2Transform::q [b2CircleShape.cpp <51:50 51:50>]
LOCAL_SYMBOL: b2CircleShape.cpp<47:27> [b2CircleShape.cpp <51:40 51:48>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2CircleShape::m_p [b2CircleShape.cpp <51:53 51:55>]
LOCAL_SYMBOL: b2CircleShape.cpp<52:9> [b2CircleShape.cpp <52:9 52:9>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2CircleShape.cpp <52:2 52:7>]
REFERENCE_CALL bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <52:22 52:22>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2RayCastInput::p1 [b2CircleShape.cpp <52:19 52:20>]
LOCAL_SYMBOL: b2CircleShape.cpp<46:76> [b2CircleShape.cpp <52:13 52:17>]
LOCAL_SYMBOL: b2CircleShape.cpp<51:9> [b2CircleShape.cpp <52:24 52:31>]
LOCAL_SYMBOL: b2CircleShape.cpp<53:10> [b2CircleShape.cpp <53:10 53:10>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 [b2CircleShape.cpp <53:2 53:8>]
REFERENCE_CALL bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <53:14 53:18>]
LOCAL_SYMBOL: b2CircleShape.cpp<52:9> [b2CircleShape.cpp <53:20 53:20>]
LOCAL_SYMBOL: b2CircleShape.cpp<52:9> [b2CircleShape.cpp <53:23 53:23>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <53:28 53:35>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <53:39 53:46>]
LOCAL_SYMBOL: b2CircleShape.cpp<56:9> [b2CircleShape.cpp <56:9 56:9>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2CircleShape.cpp <56:2 56:7>]
REFERENCE_CALL bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <56:22 56:22>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2RayCastInput::p2 [b2CircleShape.cpp <56:19 56:20>]
LOCAL_SYMBOL: b2CircleShape.cpp<46:76> [b2CircleShape.cpp <56:13 56:17>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2RayCastInput::p1 [b2CircleShape.cpp <56:30 56:31>]
LOCAL_SYMBOL: b2CircleShape.cpp<46:76> [b2CircleShape.cpp <56:24 56:28>]
LOCAL_SYMBOL: b2CircleShape.cpp<57:10> [b2CircleShape.cpp <57:10 57:10>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 [b2CircleShape.cpp <57:2 57:8>]
REFERENCE_CALL bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <57:15 57:19>]
LOCAL_SYMBOL: b2CircleShape.cpp<52:9> [b2CircleShape.cpp <57:21 57:21>]
LOCAL_SYMBOL: b2CircleShape.cpp<56:9> [b2CircleShape.cpp <57:24 57:24>]
LOCAL_SYMBOL: b2CircleShape.cpp<58:10> [b2CircleShape.cpp <58:10 58:11>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 [b2CircleShape.cpp <58:2 58:8>]
REFERENCE_CALL bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <58:15 58:19>]
LOCAL_SYMBOL: b2CircleShape.cpp<56:9> [b2CircleShape.cpp <58:21 58:21>]
LOCAL_SYMBOL: b2CircleShape.cpp<56:9> [b2CircleShape.cpp <58:24 58:24>]
LOCAL_SYMBOL: b2CircleShape.cpp<59:10> [b2CircleShape.cpp <59:10 59:14>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 [b2CircleShape.cpp <59:2 59:8>]
LOCAL_SYMBOL: b2CircleShape.cpp<57:10> [b2CircleShape.cpp <59:18 59:18>]
LOCAL_SYMBOL: b2CircleShape.cpp<57:10> [b2CircleShape.cpp <59:22 59:22>]
LOCAL_SYMBOL: b2CircleShape.cpp<58:10> [b2CircleShape.cpp <59:26 59:27>]
LOCAL_SYMBOL: b2CircleShape.cpp<53:10> [b2CircleShape.cpp <59:31 59:31>]
LOCAL_SYMBOL: b2CircleShape.cpp<59:10> [b2CircleShape.cpp <62:6 62:10>]
LOCAL_SYMBOL: b2CircleShape.cpp<58:10> [b2CircleShape.cpp <62:22 62:23>]
LOCAL_SYMBOL: b2CircleShape.cpp<68:10> [b2CircleShape.cpp <68:10 68:10>]
REFERENCE_TYPE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 [b2CircleShape.cpp <68:2 68:8>]
LOCAL_SYMBOL: b2CircleShape.cpp<57:10> [b2CircleShape.cpp <68:16 68:16>]
LOCAL_SYMBOL: b2CircleShape.cpp<59:10> [b2CircleShape.cpp <68:27 68:31>]
LOCAL_SYMBOL: b2CircleShape.cpp<68:10> [b2CircleShape.cpp <71:14 71:14>]
LOCAL_SYMBOL: b2CircleShape.cpp<68:10> [b2CircleShape.cpp <71:19 71:19>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2RayCastInput::maxFraction [b2CircleShape.cpp <71:30 71:40>]
LOCAL_SYMBOL: b2CircleShape.cpp<46:76> [b2CircleShape.cpp <71:24 71:28>]
LOCAL_SYMBOL: b2CircleShape.cpp<58:10> [b2CircleShape.cpp <71:44 71:45>]
LOCAL_SYMBOL: b2CircleShape.cpp<68:10> [b2CircleShape.cpp <73:3 73:3>]
LOCAL_SYMBOL: b2CircleShape.cpp<58:10> [b2CircleShape.cpp <73:8 73:9>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2RayCastOutput::fraction [b2CircleShape.cpp <74:11 74:18>]
LOCAL_SYMBOL: b2CircleShape.cpp<46:46> [b2CircleShape.cpp <74:3 74:8>]
LOCAL_SYMBOL: b2CircleShape.cpp<68:10> [b2CircleShape.cpp <74:22 74:22>]
SYMBOL_FUNCTION b2Vec2 & b2Vec2::operator=(b2Vec2 &)
REFERENCE_CALL bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2CircleShape.cpp <75:18 75:18>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2RayCastOutput::normal [b2CircleShape.cpp <75:11 75:16>]
LOCAL_SYMBOL: b2CircleShape.cpp<46:46> [b2CircleShape.cpp <75:3 75:8>]
REFERENCE_CALL bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <75:22 75:22>]
LOCAL_SYMBOL: b2CircleShape.cpp<52:9> [b2CircleShape.cpp <75:20 75:20>]
SYMBOL_FUNCTION b2Vec2 operator*(float32, const b2Vec2 &)
REFERENCE_CALL bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2CircleShape.cpp <75:26 75:26>]
LOCAL_SYMBOL: b2CircleShape.cpp<68:10> [b2CircleShape.cpp <75:24 75:24>]
LOCAL_SYMBOL: b2CircleShape.cpp<56:9> [b2CircleShape.cpp <75:28 75:28>]
SYMBOL_FUNCTION float32 b2Vec2::Normalize()
REFERENCE_CALL bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Vec2::Normalize() [b2CircleShape.cpp <76:18 76:26>]
REFERENCE_USAGE bool b2CircleShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2RayCastOutput::normal [b2CircleShape.cpp <76:11 76:16>]
LOCAL_SYMBOL: b2CircleShape.cpp<46:46> [b2CircleShape.cpp <76:3 76:8>]
SYMBOL_METHOD public void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2CircleShape.cpp <83:1 <83:21 83:31> 90:1>]
SYMBOL_FUNCTION void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const
REFERENCE_OVERRIDE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2CircleShape.cpp <83:21 83:31>]
QUALIFIER: b2CircleShape [b2CircleShape.cpp <83:6 83:18>]
REFERENCE_TYPE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2CircleShape.cpp <83:1 83:4>]
LOCAL_SYMBOL: b2CircleShape.cpp<83:41> [b2CircleShape.cpp <83:41 83:44>]
REFERENCE_TYPE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2CircleShape.cpp <83:33 83:38>]
LOCAL_SYMBOL: b2CircleShape.cpp<83:66> [b2CircleShape.cpp <83:66 83:74>]
REFERENCE_TYPE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2CircleShape.cpp <83:53 83:63>]
LOCAL_SYMBOL: b2CircleShape.cpp<83:83> [b2CircleShape.cpp <83:83 83:92>]
REFERENCE_TYPE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2CircleShape.cpp <83:77 83:81>]
LOCAL_SYMBOL: b2CircleShape.cpp<83:83> [b2CircleShape.cpp <85:14 85:23>]
LOCAL_SYMBOL: b2CircleShape.cpp<87:9> [b2CircleShape.cpp <87:9 87:9>]
REFERENCE_TYPE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 [b2CircleShape.cpp <87:2 87:7>]
REFERENCE_CALL void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <87:25 87:25>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2Transform::p [b2CircleShape.cpp <87:23 87:23>]
LOCAL_SYMBOL: b2CircleShape.cpp<83:66> [b2CircleShape.cpp <87:13 87:21>]
REFERENCE_CALL void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2CircleShape.cpp <87:27 87:31>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Rot b2Transform::q [b2CircleShape.cpp <87:43 87:43>]
LOCAL_SYMBOL: b2CircleShape.cpp<83:66> [b2CircleShape.cpp <87:33 87:41>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2CircleShape::m_p [b2CircleShape.cpp <87:46 87:48>]
SYMBOL_FUNCTION void b2Vec2::Set(float32, float32)
REFERENCE_CALL void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Vec2::Set(float32, float32) [b2CircleShape.cpp <88:19 88:21>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2AABB::lowerBound [b2CircleShape.cpp <88:8 88:17>]
LOCAL_SYMBOL: b2CircleShape.cpp<83:41> [b2CircleShape.cpp <88:2 88:5>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> float32 b2Vec2::x [b2CircleShape.cpp <88:25 88:25>]
LOCAL_SYMBOL: b2CircleShape.cpp<87:9> [b2CircleShape.cpp <88:23 88:23>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <88:29 88:36>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> float32 b2Vec2::y [b2CircleShape.cpp <88:41 88:41>]
LOCAL_SYMBOL: b2CircleShape.cpp<87:9> [b2CircleShape.cpp <88:39 88:39>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <88:45 88:52>]
REFERENCE_CALL void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Vec2::Set(float32, float32) [b2CircleShape.cpp <89:19 89:21>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2AABB::upperBound [b2CircleShape.cpp <89:8 89:17>]
LOCAL_SYMBOL: b2CircleShape.cpp<83:41> [b2CircleShape.cpp <89:2 89:5>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> float32 b2Vec2::x [b2CircleShape.cpp <89:25 89:25>]
LOCAL_SYMBOL: b2CircleShape.cpp<87:9> [b2CircleShape.cpp <89:23 89:23>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <89:29 89:36>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> float32 b2Vec2::y [b2CircleShape.cpp <89:41 89:41>]
LOCAL_SYMBOL: b2CircleShape.cpp<87:9> [b2CircleShape.cpp <89:39 89:39>]
REFERENCE_USAGE void b2CircleShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <89:45 89:52>]
SYMBOL_METHOD public void b2CircleShape::ComputeMass(b2MassData *, float32) const [b2CircleShape.cpp <92:1 <92:21 92:31> 99:1>]
SYMBOL_FUNCTION void b2Shape::ComputeMass(b2MassData *, float32) const
REFERENCE_OVERRIDE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> void b2Shape::ComputeMass(b2MassData *, float32) const [b2CircleShape.cpp <92:21 92:31>]
QUALIFIER: b2CircleShape [b2CircleShape.cpp <92:6 92:18>]
REFERENCE_TYPE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> void [b2CircleShape.cpp <92:1 92:4>]
LOCAL_SYMBOL: b2CircleShape.cpp<92:45> [b2CircleShape.cpp <92:45 92:52>]
REFERENCE_TYPE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2CircleShape.cpp <92:33 92:42>]
LOCAL_SYMBOL: b2CircleShape.cpp<92:63> [b2CircleShape.cpp <92:63 92:69>]
REFERENCE_TYPE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> float32 [b2CircleShape.cpp <92:55 92:61>]
REFERENCE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> float32 b2MassData::mass [b2CircleShape.cpp <94:12 94:15>]
LOCAL_SYMBOL: b2CircleShape.cpp<92:45> [b2CircleShape.cpp <94:2 94:9>]
LOCAL_SYMBOL: b2CircleShape.cpp<92:63> [b2CircleShape.cpp <94:19 94:25>]
REFERENCE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <94:37 94:44>]
REFERENCE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <94:48 94:55>]
SYMBOL_FUNCTION b2Vec2 & b2Vec2::operator=(const b2Vec2 &)
REFERENCE_CALL void b2CircleShape::ComputeMass(b2MassData *, float32) const -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2CircleShape.cpp <95:19 95:19>]
REFERENCE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> b2Vec2 b2MassData::center [b2CircleShape.cpp <95:12 95:17>]
LOCAL_SYMBOL: b2CircleShape.cpp<92:45> [b2CircleShape.cpp <95:2 95:9>]
REFERENCE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> b2Vec2 b2CircleShape::m_p [b2CircleShape.cpp <95:21 95:23>]
REFERENCE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> float32 b2MassData::I [b2CircleShape.cpp <98:12 98:12>]
LOCAL_SYMBOL: b2CircleShape.cpp<92:45> [b2CircleShape.cpp <98:2 98:9>]
REFERENCE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> float32 b2MassData::mass [b2CircleShape.cpp <98:26 98:29>]
LOCAL_SYMBOL: b2CircleShape.cpp<92:45> [b2CircleShape.cpp <98:16 98:23>]
REFERENCE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <98:41 98:48>]
REFERENCE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> float32 b2Shape::m_radius [b2CircleShape.cpp <98:52 98:59>]
REFERENCE_CALL void b2CircleShape::ComputeMass(b2MassData *, float32) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2CircleShape.cpp <98:63 98:67>]
REFERENCE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> b2Vec2 b2CircleShape::m_p [b2CircleShape.cpp <98:69 98:71>]
REFERENCE_USAGE void b2CircleShape::ComputeMass(b2MassData *, float32) const -> b2Vec2 b2CircleShape::m_p [b2CircleShape.cpp <98:74 98:76>]
