FILE: b2MotorJoint.cpp
COMMENT: comment [b2MotorJoint.cpp <1:1 17:3>]
COMMENT: comment [b2MotorJoint.cpp <23:1 23:29>]
COMMENT: comment [b2MotorJoint.cpp <24:1 24:18>]
COMMENT: comment [b2MotorJoint.cpp <25:1 25:50>]
COMMENT: comment [b2MotorJoint.cpp <26:1 26:32>]
COMMENT: comment [b2MotorJoint.cpp <27:1 27:18>]
COMMENT: comment [b2MotorJoint.cpp <28:1 28:44>]
COMMENT: comment [b2MotorJoint.cpp <30:1 30:20>]
COMMENT: comment [b2MotorJoint.cpp <31:1 31:18>]
COMMENT: comment [b2MotorJoint.cpp <32:1 32:22>]
COMMENT: comment [b2MotorJoint.cpp <33:1 33:21>]
COMMENT: comment [b2MotorJoint.cpp <84:2 84:39>]
COMMENT: comment [b2MotorJoint.cpp <88:2 88:32>]
COMMENT: comment [b2MotorJoint.cpp <89:2 89:32>]
COMMENT: comment [b2MotorJoint.cpp <90:2 90:23>]
COMMENT: comment [b2MotorJoint.cpp <92:2 92:11>]
COMMENT: comment [b2MotorJoint.cpp <93:2 93:85>]
COMMENT: comment [b2MotorJoint.cpp <94:2 94:85>]
COMMENT: comment [b2MotorJoint.cpp <95:2 95:85>]
COMMENT: comment [b2MotorJoint.cpp <119:3 119:53>]
COMMENT: comment [b2MotorJoint.cpp <154:2 154:27>]
COMMENT: comment [b2MotorJoint.cpp <168:2 168:26>]
REFERENCE_MACRO_USAGE b2MotorJoint.cpp -> B2_NOT_USED [b2MotorJoint.cpp <201:2 201:12>]
REFERENCE_MACRO_USAGE b2MotorJoint.cpp -> b2Assert [b2MotorJoint.cpp <228:2 228:9>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:23 34:31>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:47 34:55>]
REFERENCE_MACRO_USAGE assert.h -> __FILE__ [assert.h <34:57 34:64>]
REFERENCE_MACRO_USAGE assert.h -> __LINE__ [assert.h <34:79 34:86>]
REFERENCE_MACRO_USAGE b2MotorJoint.cpp -> b2Assert [b2MotorJoint.cpp <239:2 239:9>]
REFERENCE_MACRO_USAGE b2MotorJoint.cpp -> b2Assert [b2MotorJoint.cpp <250:2 250:9>]
SYMBOL_METHOD public void b2MotorJointDef::Initialize(b2Body *, b2Body *) [b2MotorJoint.cpp <35:1 <35:23 35:32> 45:1>]
SYMBOL_STRUCT b2MotorJointDef
QUALIFIER: b2MotorJointDef [b2MotorJoint.cpp <35:6 35:20>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> void [b2MotorJoint.cpp <35:1 35:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<35:42> [b2MotorJoint.cpp <35:42 35:43>]
REFERENCE_TYPE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Body [b2MotorJoint.cpp <35:34 35:39>]
LOCAL_SYMBOL: b2MotorJoint.cpp<35:54> [b2MotorJoint.cpp <35:54 35:55>]
REFERENCE_TYPE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Body [b2MotorJoint.cpp <35:46 35:51>]
REFERENCE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Body * b2JointDef::bodyA [b2MotorJoint.cpp <37:2 37:6>]
LOCAL_SYMBOL: b2MotorJoint.cpp<35:42> [b2MotorJoint.cpp <37:10 37:11>]
REFERENCE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Body * b2JointDef::bodyB [b2MotorJoint.cpp <38:2 38:6>]
LOCAL_SYMBOL: b2MotorJoint.cpp<35:54> [b2MotorJoint.cpp <38:10 38:11>]
LOCAL_SYMBOL: b2MotorJoint.cpp<39:9> [b2MotorJoint.cpp <39:9 39:10>]
REFERENCE_TYPE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Vec2 [b2MotorJoint.cpp <39:2 39:7>]
SYMBOL_FUNCTION void b2Vec2::b2Vec2(const b2Vec2 &)
REFERENCE_CALL void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2MotorJoint.cpp <39:33 39:33>]
SYMBOL_FUNCTION const b2Vec2 & b2Body::GetPosition() const
REFERENCE_CALL void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> const b2Vec2 & b2Body::GetPosition() const [b2MotorJoint.cpp <39:21 39:31>]
REFERENCE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Body * b2JointDef::bodyB [b2MotorJoint.cpp <39:14 39:18>]
SYMBOL_FUNCTION b2Vec2 & b2Vec2::operator=(b2Vec2 &&)
REFERENCE_CALL void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2MotorJoint.cpp <40:15 40:15>]
REFERENCE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Vec2 b2MotorJointDef::linearOffset [b2MotorJoint.cpp <40:2 40:13>]
SYMBOL_FUNCTION b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const
REFERENCE_CALL void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Vec2 b2Body::GetLocalPoint(const b2Vec2 &) const [b2MotorJoint.cpp <40:24 40:36>]
REFERENCE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Body * b2JointDef::bodyA [b2MotorJoint.cpp <40:17 40:21>]
LOCAL_SYMBOL: b2MotorJoint.cpp<39:9> [b2MotorJoint.cpp <40:38 40:39>]
LOCAL_SYMBOL: b2MotorJoint.cpp<42:10> [b2MotorJoint.cpp <42:10 42:15>]
REFERENCE_TYPE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> float32 [b2MotorJoint.cpp <42:2 42:8>]
SYMBOL_FUNCTION float32 b2Body::GetAngle() const
REFERENCE_CALL void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> float32 b2Body::GetAngle() const [b2MotorJoint.cpp <42:26 42:33>]
REFERENCE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Body * b2JointDef::bodyA [b2MotorJoint.cpp <42:19 42:23>]
LOCAL_SYMBOL: b2MotorJoint.cpp<43:10> [b2MotorJoint.cpp <43:10 43:15>]
REFERENCE_TYPE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> float32 [b2MotorJoint.cpp <43:2 43:8>]
REFERENCE_CALL void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> float32 b2Body::GetAngle() const [b2MotorJoint.cpp <43:26 43:33>]
REFERENCE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> b2Body * b2JointDef::bodyB [b2MotorJoint.cpp <43:19 43:23>]
REFERENCE_USAGE void b2MotorJointDef::Initialize(b2Body *, b2Body *) -> float32 b2MotorJointDef::angularOffset [b2MotorJoint.cpp <44:2 44:14>]
LOCAL_SYMBOL: b2MotorJoint.cpp<43:10> [b2MotorJoint.cpp <44:18 44:23>]
LOCAL_SYMBOL: b2MotorJoint.cpp<42:10> [b2MotorJoint.cpp <44:27 44:32>]
SYMBOL_METHOD protected void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) [b2MotorJoint.cpp <47:1 <47:15 47:26> 59:1>]
SYMBOL_CLASS b2MotorJoint
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <47:1 47:12>]
LOCAL_SYMBOL: b2MotorJoint.cpp<47:51> [b2MotorJoint.cpp <47:51 47:53>]
REFERENCE_TYPE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2MotorJointDef [b2MotorJoint.cpp <47:34 47:48>]
REFERENCE_TYPE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Joint [b2MotorJoint.cpp <48:3 48:9>]
SYMBOL_FUNCTION void b2Joint::b2Joint(const b2JointDef *)
REFERENCE_CALL void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> void b2Joint::b2Joint(const b2JointDef *) [b2MotorJoint.cpp <48:3 48:9>]
LOCAL_SYMBOL: b2MotorJoint.cpp<47:51> [b2MotorJoint.cpp <48:11 48:13>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Vec2 b2MotorJoint::m_linearOffset [b2MotorJoint.cpp <47:15 47:26>]
SYMBOL_FUNCTION void b2Vec2::b2Vec2()
REFERENCE_CALL void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> void b2Vec2::b2Vec2() [b2MotorJoint.cpp <47:15 47:26>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <47:15 47:26>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <47:15 47:26>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <47:15 47:26>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Vec2 b2MotorJoint::m_localCenterA [b2MotorJoint.cpp <47:15 47:26>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Vec2 b2MotorJoint::m_localCenterB [b2MotorJoint.cpp <47:15 47:26>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Vec2 b2MotorJoint::m_linearError [b2MotorJoint.cpp <47:15 47:26>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Mat22 b2MotorJoint::m_linearMass [b2MotorJoint.cpp <47:15 47:26>]
SYMBOL_FUNCTION void b2Mat22::b2Mat22()
REFERENCE_CALL void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> void b2Mat22::b2Mat22() [b2MotorJoint.cpp <47:15 47:26>]
SYMBOL_FUNCTION b2Vec2 & b2Vec2::operator=(const b2Vec2 &)
REFERENCE_CALL void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2MotorJoint.cpp <50:17 50:17>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Vec2 b2MotorJoint::m_linearOffset [b2MotorJoint.cpp <50:2 50:15>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Vec2 b2MotorJointDef::linearOffset [b2MotorJoint.cpp <50:24 50:35>]
LOCAL_SYMBOL: b2MotorJoint.cpp<47:51> [b2MotorJoint.cpp <50:19 50:21>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> float32 b2MotorJoint::m_angularOffset [b2MotorJoint.cpp <51:2 51:16>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> float32 b2MotorJointDef::angularOffset [b2MotorJoint.cpp <51:25 51:37>]
LOCAL_SYMBOL: b2MotorJoint.cpp<47:51> [b2MotorJoint.cpp <51:20 51:22>]
SYMBOL_FUNCTION void b2Vec2::SetZero()
REFERENCE_CALL void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> void b2Vec2::SetZero() [b2MotorJoint.cpp <53:18 53:24>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <53:2 53:16>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> float32 b2MotorJoint::m_angularImpulse [b2MotorJoint.cpp <54:2 54:17>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> float32 b2MotorJoint::m_maxForce [b2MotorJoint.cpp <56:2 56:11>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> float32 b2MotorJointDef::maxForce [b2MotorJoint.cpp <56:20 56:27>]
LOCAL_SYMBOL: b2MotorJoint.cpp<47:51> [b2MotorJoint.cpp <56:15 56:17>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> float32 b2MotorJoint::m_maxTorque [b2MotorJoint.cpp <57:2 57:12>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> float32 b2MotorJointDef::maxTorque [b2MotorJoint.cpp <57:21 57:29>]
LOCAL_SYMBOL: b2MotorJoint.cpp<47:51> [b2MotorJoint.cpp <57:16 57:18>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> float32 b2MotorJoint::m_correctionFactor [b2MotorJoint.cpp <58:2 58:19>]
REFERENCE_USAGE void b2MotorJoint::b2MotorJoint(const b2MotorJointDef *) -> float32 b2MotorJointDef::correctionFactor [b2MotorJoint.cpp <58:28 58:43>]
LOCAL_SYMBOL: b2MotorJoint.cpp<47:51> [b2MotorJoint.cpp <58:23 58:25>]
SYMBOL_METHOD protected void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) [b2MotorJoint.cpp <61:1 <61:20 61:42> 139:1>]
SYMBOL_FUNCTION void b2Joint::InitVelocityConstraints(const b2SolverData &)
REFERENCE_OVERRIDE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Joint::InitVelocityConstraints(const b2SolverData &) [b2MotorJoint.cpp <61:20 61:42>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <61:6 61:17>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void [b2MotorJoint.cpp <61:1 61:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <61:64 61:67>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2SolverData [b2MotorJoint.cpp <61:50 61:61>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexA [b2MotorJoint.cpp <63:2 63:9>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2Body::m_islandIndex [b2MotorJoint.cpp <63:22 63:34>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Body * b2Joint::m_bodyA [b2MotorJoint.cpp <63:13 63:19>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexB [b2MotorJoint.cpp <64:2 64:9>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2Body::m_islandIndex [b2MotorJoint.cpp <64:22 64:34>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Body * b2Joint::m_bodyB [b2MotorJoint.cpp <64:13 64:19>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2MotorJoint.cpp <65:17 65:17>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_localCenterA [b2MotorJoint.cpp <65:2 65:15>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Sweep::localCenter [b2MotorJoint.cpp <65:36 65:46>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Sweep b2Body::m_sweep [b2MotorJoint.cpp <65:28 65:34>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Body * b2Joint::m_bodyA [b2MotorJoint.cpp <65:19 65:25>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2MotorJoint.cpp <66:17 66:17>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_localCenterB [b2MotorJoint.cpp <66:2 66:15>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Sweep::localCenter [b2MotorJoint.cpp <66:36 66:46>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Sweep b2Body::m_sweep [b2MotorJoint.cpp <66:28 66:34>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Body * b2Joint::m_bodyB [b2MotorJoint.cpp <66:19 66:25>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invMassA [b2MotorJoint.cpp <67:2 67:11>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Body::m_invMass [b2MotorJoint.cpp <67:24 67:32>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Body * b2Joint::m_bodyA [b2MotorJoint.cpp <67:15 67:21>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invMassB [b2MotorJoint.cpp <68:2 68:11>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Body::m_invMass [b2MotorJoint.cpp <68:24 68:32>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Body * b2Joint::m_bodyB [b2MotorJoint.cpp <68:15 68:21>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invIA [b2MotorJoint.cpp <69:2 69:8>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Body::m_invI [b2MotorJoint.cpp <69:21 69:26>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Body * b2Joint::m_bodyA [b2MotorJoint.cpp <69:12 69:18>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invIB [b2MotorJoint.cpp <70:2 70:8>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Body::m_invI [b2MotorJoint.cpp <70:21 70:26>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Body * b2Joint::m_bodyB [b2MotorJoint.cpp <70:12 70:18>]
LOCAL_SYMBOL: b2MotorJoint.cpp<72:9> [b2MotorJoint.cpp <72:9 72:10>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 [b2MotorJoint.cpp <72:2 72:7>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2MotorJoint.cpp <72:39 72:39>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Position::c [b2MotorJoint.cpp <72:39 72:39>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Position * b2SolverData::positions [b2MotorJoint.cpp <72:19 72:27>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <72:14 72:17>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexA [b2MotorJoint.cpp <72:29 72:36>]
LOCAL_SYMBOL: b2MotorJoint.cpp<73:10> [b2MotorJoint.cpp <73:10 73:11>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <73:2 73:8>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Position::a [b2MotorJoint.cpp <73:40 73:40>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Position * b2SolverData::positions [b2MotorJoint.cpp <73:20 73:28>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <73:15 73:18>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexA [b2MotorJoint.cpp <73:30 73:37>]
LOCAL_SYMBOL: b2MotorJoint.cpp<74:9> [b2MotorJoint.cpp <74:9 74:10>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 [b2MotorJoint.cpp <74:2 74:7>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2MotorJoint.cpp <74:40 74:40>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Velocity::v [b2MotorJoint.cpp <74:40 74:40>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <74:19 74:28>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <74:14 74:17>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexA [b2MotorJoint.cpp <74:30 74:37>]
LOCAL_SYMBOL: b2MotorJoint.cpp<75:10> [b2MotorJoint.cpp <75:10 75:11>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <75:2 75:8>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Velocity::w [b2MotorJoint.cpp <75:41 75:41>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <75:20 75:29>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <75:15 75:18>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexA [b2MotorJoint.cpp <75:31 75:38>]
LOCAL_SYMBOL: b2MotorJoint.cpp<77:9> [b2MotorJoint.cpp <77:9 77:10>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 [b2MotorJoint.cpp <77:2 77:7>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2MotorJoint.cpp <77:39 77:39>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Position::c [b2MotorJoint.cpp <77:39 77:39>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Position * b2SolverData::positions [b2MotorJoint.cpp <77:19 77:27>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <77:14 77:17>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexB [b2MotorJoint.cpp <77:29 77:36>]
LOCAL_SYMBOL: b2MotorJoint.cpp<78:10> [b2MotorJoint.cpp <78:10 78:11>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <78:2 78:8>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Position::a [b2MotorJoint.cpp <78:40 78:40>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Position * b2SolverData::positions [b2MotorJoint.cpp <78:20 78:28>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <78:15 78:18>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexB [b2MotorJoint.cpp <78:30 78:37>]
LOCAL_SYMBOL: b2MotorJoint.cpp<79:9> [b2MotorJoint.cpp <79:9 79:10>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 [b2MotorJoint.cpp <79:2 79:7>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2MotorJoint.cpp <79:40 79:40>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Velocity::v [b2MotorJoint.cpp <79:40 79:40>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <79:19 79:28>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <79:14 79:17>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexB [b2MotorJoint.cpp <79:30 79:37>]
LOCAL_SYMBOL: b2MotorJoint.cpp<80:10> [b2MotorJoint.cpp <80:10 80:11>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <80:2 80:8>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Velocity::w [b2MotorJoint.cpp <80:41 80:41>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <80:20 80:29>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <80:15 80:18>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexB [b2MotorJoint.cpp <80:31 80:38>]
LOCAL_SYMBOL: b2MotorJoint.cpp<82:8> [b2MotorJoint.cpp <82:8 82:9>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Rot [b2MotorJoint.cpp <82:2 82:6>]
SYMBOL_FUNCTION void b2Rot::b2Rot(float32)
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Rot::b2Rot(float32) [b2MotorJoint.cpp <82:8 82:9>]
LOCAL_SYMBOL: b2MotorJoint.cpp<73:10> [b2MotorJoint.cpp <82:11 82:12>]
LOCAL_SYMBOL: b2MotorJoint.cpp<82:16> [b2MotorJoint.cpp <82:16 82:17>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Rot::b2Rot(float32) [b2MotorJoint.cpp <82:16 82:17>]
LOCAL_SYMBOL: b2MotorJoint.cpp<78:10> [b2MotorJoint.cpp <82:19 82:20>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2MotorJoint.cpp <85:7 85:7>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <85:2 85:5>]
SYMBOL_FUNCTION b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &)
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2MotorJoint.cpp <85:9 85:13>]
LOCAL_SYMBOL: b2MotorJoint.cpp<82:8> [b2MotorJoint.cpp <85:15 85:16>]
SYMBOL_FUNCTION b2Vec2 b2Vec2::operator-() const
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Vec2::operator-() const [b2MotorJoint.cpp <85:19 85:19>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_localCenterA [b2MotorJoint.cpp <85:20 85:33>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2MotorJoint.cpp <86:7 86:7>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <86:2 86:5>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2MotorJoint.cpp <86:9 86:13>]
LOCAL_SYMBOL: b2MotorJoint.cpp<82:16> [b2MotorJoint.cpp <86:15 86:16>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Vec2::operator-() const [b2MotorJoint.cpp <86:19 86:19>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_localCenterB [b2MotorJoint.cpp <86:20 86:33>]
LOCAL_SYMBOL: b2MotorJoint.cpp<97:10> [b2MotorJoint.cpp <97:10 97:11>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <97:2 97:8>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invMassA [b2MotorJoint.cpp <97:15 97:24>]
LOCAL_SYMBOL: b2MotorJoint.cpp<97:27> [b2MotorJoint.cpp <97:27 97:28>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invMassB [b2MotorJoint.cpp <97:32 97:41>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:10> [b2MotorJoint.cpp <98:10 98:11>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <98:2 98:8>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invIA [b2MotorJoint.cpp <98:15 98:21>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:24> [b2MotorJoint.cpp <98:24 98:25>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invIB [b2MotorJoint.cpp <98:29 98:35>]
LOCAL_SYMBOL: b2MotorJoint.cpp<100:10> [b2MotorJoint.cpp <100:10 100:10>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Mat22 [b2MotorJoint.cpp <100:2 100:8>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Mat22::b2Mat22() [b2MotorJoint.cpp <100:10 100:10>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::x [b2MotorJoint.cpp <101:7 101:7>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Mat22::ex [b2MotorJoint.cpp <101:4 101:5>]
LOCAL_SYMBOL: b2MotorJoint.cpp<100:10> [b2MotorJoint.cpp <101:2 101:2>]
LOCAL_SYMBOL: b2MotorJoint.cpp<97:10> [b2MotorJoint.cpp <101:11 101:12>]
LOCAL_SYMBOL: b2MotorJoint.cpp<97:27> [b2MotorJoint.cpp <101:16 101:17>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:10> [b2MotorJoint.cpp <101:21 101:22>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::y [b2MotorJoint.cpp <101:31 101:31>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <101:26 101:29>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::y [b2MotorJoint.cpp <101:40 101:40>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <101:35 101:38>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:24> [b2MotorJoint.cpp <101:44 101:45>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::y [b2MotorJoint.cpp <101:54 101:54>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <101:49 101:52>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::y [b2MotorJoint.cpp <101:63 101:63>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <101:58 101:61>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::y [b2MotorJoint.cpp <102:7 102:7>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Mat22::ex [b2MotorJoint.cpp <102:4 102:5>]
LOCAL_SYMBOL: b2MotorJoint.cpp<100:10> [b2MotorJoint.cpp <102:2 102:2>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:10> [b2MotorJoint.cpp <102:12 102:13>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::x [b2MotorJoint.cpp <102:22 102:22>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <102:17 102:20>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::y [b2MotorJoint.cpp <102:31 102:31>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <102:26 102:29>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:24> [b2MotorJoint.cpp <102:35 102:36>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::x [b2MotorJoint.cpp <102:45 102:45>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <102:40 102:43>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::y [b2MotorJoint.cpp <102:54 102:54>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <102:49 102:52>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::x [b2MotorJoint.cpp <103:7 103:7>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Mat22::ey [b2MotorJoint.cpp <103:4 103:5>]
LOCAL_SYMBOL: b2MotorJoint.cpp<100:10> [b2MotorJoint.cpp <103:2 103:2>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::y [b2MotorJoint.cpp <103:16 103:16>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Mat22::ex [b2MotorJoint.cpp <103:13 103:14>]
LOCAL_SYMBOL: b2MotorJoint.cpp<100:10> [b2MotorJoint.cpp <103:11 103:11>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::y [b2MotorJoint.cpp <104:7 104:7>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Mat22::ey [b2MotorJoint.cpp <104:4 104:5>]
LOCAL_SYMBOL: b2MotorJoint.cpp<100:10> [b2MotorJoint.cpp <104:2 104:2>]
LOCAL_SYMBOL: b2MotorJoint.cpp<97:10> [b2MotorJoint.cpp <104:11 104:12>]
LOCAL_SYMBOL: b2MotorJoint.cpp<97:27> [b2MotorJoint.cpp <104:16 104:17>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:10> [b2MotorJoint.cpp <104:21 104:22>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::x [b2MotorJoint.cpp <104:31 104:31>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <104:26 104:29>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::x [b2MotorJoint.cpp <104:40 104:40>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <104:35 104:38>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:24> [b2MotorJoint.cpp <104:44 104:45>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::x [b2MotorJoint.cpp <104:54 104:54>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <104:49 104:52>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::x [b2MotorJoint.cpp <104:63 104:63>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <104:58 104:61>]
SYMBOL_FUNCTION b2Mat22 & b2Mat22::operator=(b2Mat22 &&)
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Mat22 & b2Mat22::operator=(b2Mat22 &&) [b2MotorJoint.cpp <106:15 106:15>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Mat22 b2MotorJoint::m_linearMass [b2MotorJoint.cpp <106:2 106:13>]
SYMBOL_FUNCTION b2Mat22 b2Mat22::GetInverse() const
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Mat22 b2Mat22::GetInverse() const [b2MotorJoint.cpp <106:19 106:28>]
LOCAL_SYMBOL: b2MotorJoint.cpp<100:10> [b2MotorJoint.cpp <106:17 106:17>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularMass [b2MotorJoint.cpp <108:2 108:14>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:10> [b2MotorJoint.cpp <108:18 108:19>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:24> [b2MotorJoint.cpp <108:23 108:24>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularMass [b2MotorJoint.cpp <109:6 109:18>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularMass [b2MotorJoint.cpp <111:3 111:15>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularMass [b2MotorJoint.cpp <111:26 111:38>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2MotorJoint.cpp <114:16 114:16>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearError [b2MotorJoint.cpp <114:2 114:14>]
SYMBOL_FUNCTION b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <114:40 114:40>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <114:33 114:33>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <114:28 114:28>]
SYMBOL_FUNCTION b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <114:21 114:21>]
LOCAL_SYMBOL: b2MotorJoint.cpp<77:9> [b2MotorJoint.cpp <114:18 114:19>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <114:23 114:26>]
LOCAL_SYMBOL: b2MotorJoint.cpp<72:9> [b2MotorJoint.cpp <114:30 114:31>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <114:35 114:38>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2MotorJoint.cpp <114:42 114:46>]
LOCAL_SYMBOL: b2MotorJoint.cpp<82:8> [b2MotorJoint.cpp <114:48 114:49>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearOffset [b2MotorJoint.cpp <114:52 114:65>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularError [b2MotorJoint.cpp <115:2 115:15>]
LOCAL_SYMBOL: b2MotorJoint.cpp<78:10> [b2MotorJoint.cpp <115:19 115:20>]
LOCAL_SYMBOL: b2MotorJoint.cpp<73:10> [b2MotorJoint.cpp <115:24 115:25>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularOffset [b2MotorJoint.cpp <115:29 115:43>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> bool b2TimeStep::warmStarting [b2MotorJoint.cpp <117:16 117:27>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2TimeStep b2SolverData::step [b2MotorJoint.cpp <117:11 117:14>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <117:6 117:9>]
SYMBOL_FUNCTION void b2Vec2::operator*=(float32)
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Vec2::operator*=(float32) [b2MotorJoint.cpp <120:19 120:20>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <120:3 120:17>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2TimeStep::dtRatio [b2MotorJoint.cpp <120:32 120:38>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2TimeStep b2SolverData::step [b2MotorJoint.cpp <120:27 120:30>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <120:22 120:25>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularImpulse [b2MotorJoint.cpp <121:3 121:18>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2TimeStep::dtRatio [b2MotorJoint.cpp <121:33 121:39>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2TimeStep b2SolverData::step [b2MotorJoint.cpp <121:28 121:31>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <121:23 121:26>]
LOCAL_SYMBOL: b2MotorJoint.cpp<123:10> [b2MotorJoint.cpp <123:10 123:10>]
REFERENCE_TYPE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 [b2MotorJoint.cpp <123:3 123:8>]
SYMBOL_FUNCTION void b2Vec2::b2Vec2(float32, float32)
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Vec2::b2Vec2(float32, float32) [b2MotorJoint.cpp <123:10 123:10>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::x [b2MotorJoint.cpp <123:28 123:28>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <123:12 123:26>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::y [b2MotorJoint.cpp <123:47 123:47>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <123:31 123:45>]
SYMBOL_FUNCTION void b2Vec2::operator-=(const b2Vec2 &)
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Vec2::operator-=(const b2Vec2 &) [b2MotorJoint.cpp <124:6 124:7>]
LOCAL_SYMBOL: b2MotorJoint.cpp<74:9> [b2MotorJoint.cpp <124:3 124:4>]
SYMBOL_FUNCTION b2Vec2 operator*(float32, const b2Vec2 &)
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2MotorJoint.cpp <124:12 124:12>]
LOCAL_SYMBOL: b2MotorJoint.cpp<97:10> [b2MotorJoint.cpp <124:9 124:10>]
LOCAL_SYMBOL: b2MotorJoint.cpp<123:10> [b2MotorJoint.cpp <124:14 124:14>]
LOCAL_SYMBOL: b2MotorJoint.cpp<75:10> [b2MotorJoint.cpp <125:3 125:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:10> [b2MotorJoint.cpp <125:9 125:10>]
SYMBOL_FUNCTION float32 b2Cross(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <125:15 125:21>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <125:23 125:26>]
LOCAL_SYMBOL: b2MotorJoint.cpp<123:10> [b2MotorJoint.cpp <125:29 125:29>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularImpulse [b2MotorJoint.cpp <125:34 125:49>]
SYMBOL_FUNCTION void b2Vec2::operator+=(const b2Vec2 &)
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Vec2::operator+=(const b2Vec2 &) [b2MotorJoint.cpp <126:6 126:7>]
LOCAL_SYMBOL: b2MotorJoint.cpp<79:9> [b2MotorJoint.cpp <126:3 126:4>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2MotorJoint.cpp <126:12 126:12>]
LOCAL_SYMBOL: b2MotorJoint.cpp<97:27> [b2MotorJoint.cpp <126:9 126:10>]
LOCAL_SYMBOL: b2MotorJoint.cpp<123:10> [b2MotorJoint.cpp <126:14 126:14>]
LOCAL_SYMBOL: b2MotorJoint.cpp<80:10> [b2MotorJoint.cpp <127:3 127:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<98:24> [b2MotorJoint.cpp <127:9 127:10>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <127:15 127:21>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <127:23 127:26>]
LOCAL_SYMBOL: b2MotorJoint.cpp<123:10> [b2MotorJoint.cpp <127:29 127:29>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularImpulse [b2MotorJoint.cpp <127:34 127:49>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> void b2Vec2::SetZero() [b2MotorJoint.cpp <131:19 131:25>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <131:3 131:17>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularImpulse [b2MotorJoint.cpp <132:3 132:18>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2MotorJoint.cpp <135:30 135:30>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Velocity::v [b2MotorJoint.cpp <135:28 135:28>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <135:7 135:16>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <135:2 135:5>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexA [b2MotorJoint.cpp <135:18 135:25>]
LOCAL_SYMBOL: b2MotorJoint.cpp<74:9> [b2MotorJoint.cpp <135:32 135:33>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Velocity::w [b2MotorJoint.cpp <136:28 136:28>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <136:7 136:16>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <136:2 136:5>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexA [b2MotorJoint.cpp <136:18 136:25>]
LOCAL_SYMBOL: b2MotorJoint.cpp<75:10> [b2MotorJoint.cpp <136:32 136:33>]
REFERENCE_CALL void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2MotorJoint.cpp <137:30 137:30>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Velocity::v [b2MotorJoint.cpp <137:28 137:28>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <137:7 137:16>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <137:2 137:5>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexB [b2MotorJoint.cpp <137:18 137:25>]
LOCAL_SYMBOL: b2MotorJoint.cpp<79:9> [b2MotorJoint.cpp <137:32 137:33>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> float32 b2Velocity::w [b2MotorJoint.cpp <138:28 138:28>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <138:7 138:16>]
LOCAL_SYMBOL: b2MotorJoint.cpp<61:64> [b2MotorJoint.cpp <138:2 138:5>]
REFERENCE_USAGE void b2MotorJoint::InitVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexB [b2MotorJoint.cpp <138:18 138:25>]
LOCAL_SYMBOL: b2MotorJoint.cpp<80:10> [b2MotorJoint.cpp <138:32 138:33>]
SYMBOL_METHOD protected void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) [b2MotorJoint.cpp <141:1 <141:20 141:43> 197:1>]
SYMBOL_FUNCTION void b2Joint::SolveVelocityConstraints(const b2SolverData &)
REFERENCE_OVERRIDE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> void b2Joint::SolveVelocityConstraints(const b2SolverData &) [b2MotorJoint.cpp <141:20 141:43>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <141:6 141:17>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> void [b2MotorJoint.cpp <141:1 141:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<141:65> [b2MotorJoint.cpp <141:65 141:68>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2SolverData [b2MotorJoint.cpp <141:51 141:62>]
LOCAL_SYMBOL: b2MotorJoint.cpp<143:9> [b2MotorJoint.cpp <143:9 143:10>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 [b2MotorJoint.cpp <143:2 143:7>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2MotorJoint.cpp <143:40 143:40>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Velocity::v [b2MotorJoint.cpp <143:40 143:40>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <143:19 143:28>]
LOCAL_SYMBOL: b2MotorJoint.cpp<141:65> [b2MotorJoint.cpp <143:14 143:17>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexA [b2MotorJoint.cpp <143:30 143:37>]
LOCAL_SYMBOL: b2MotorJoint.cpp<144:10> [b2MotorJoint.cpp <144:10 144:11>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <144:2 144:8>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2Velocity::w [b2MotorJoint.cpp <144:41 144:41>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <144:20 144:29>]
LOCAL_SYMBOL: b2MotorJoint.cpp<141:65> [b2MotorJoint.cpp <144:15 144:18>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexA [b2MotorJoint.cpp <144:31 144:38>]
LOCAL_SYMBOL: b2MotorJoint.cpp<145:9> [b2MotorJoint.cpp <145:9 145:10>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 [b2MotorJoint.cpp <145:2 145:7>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2MotorJoint.cpp <145:40 145:40>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Velocity::v [b2MotorJoint.cpp <145:40 145:40>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <145:19 145:28>]
LOCAL_SYMBOL: b2MotorJoint.cpp<141:65> [b2MotorJoint.cpp <145:14 145:17>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexB [b2MotorJoint.cpp <145:30 145:37>]
LOCAL_SYMBOL: b2MotorJoint.cpp<146:10> [b2MotorJoint.cpp <146:10 146:11>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <146:2 146:8>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2Velocity::w [b2MotorJoint.cpp <146:41 146:41>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <146:20 146:29>]
LOCAL_SYMBOL: b2MotorJoint.cpp<141:65> [b2MotorJoint.cpp <146:15 146:18>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexB [b2MotorJoint.cpp <146:31 146:38>]
LOCAL_SYMBOL: b2MotorJoint.cpp<148:10> [b2MotorJoint.cpp <148:10 148:11>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <148:2 148:8>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invMassA [b2MotorJoint.cpp <148:15 148:24>]
LOCAL_SYMBOL: b2MotorJoint.cpp<148:27> [b2MotorJoint.cpp <148:27 148:28>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invMassB [b2MotorJoint.cpp <148:32 148:41>]
LOCAL_SYMBOL: b2MotorJoint.cpp<149:10> [b2MotorJoint.cpp <149:10 149:11>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <149:2 149:8>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invIA [b2MotorJoint.cpp <149:15 149:21>]
LOCAL_SYMBOL: b2MotorJoint.cpp<149:24> [b2MotorJoint.cpp <149:24 149:25>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_invIB [b2MotorJoint.cpp <149:29 149:35>]
LOCAL_SYMBOL: b2MotorJoint.cpp<151:10> [b2MotorJoint.cpp <151:10 151:10>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <151:2 151:8>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2TimeStep::dt [b2MotorJoint.cpp <151:24 151:25>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2TimeStep b2SolverData::step [b2MotorJoint.cpp <151:19 151:22>]
LOCAL_SYMBOL: b2MotorJoint.cpp<141:65> [b2MotorJoint.cpp <151:14 151:17>]
LOCAL_SYMBOL: b2MotorJoint.cpp<152:10> [b2MotorJoint.cpp <152:10 152:14>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <152:2 152:8>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2TimeStep::inv_dt [b2MotorJoint.cpp <152:28 152:33>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2TimeStep b2SolverData::step [b2MotorJoint.cpp <152:23 152:26>]
LOCAL_SYMBOL: b2MotorJoint.cpp<141:65> [b2MotorJoint.cpp <152:18 152:21>]
LOCAL_SYMBOL: b2MotorJoint.cpp<156:11> [b2MotorJoint.cpp <156:11 156:14>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <156:3 156:9>]
LOCAL_SYMBOL: b2MotorJoint.cpp<146:10> [b2MotorJoint.cpp <156:18 156:19>]
LOCAL_SYMBOL: b2MotorJoint.cpp<144:10> [b2MotorJoint.cpp <156:23 156:24>]
LOCAL_SYMBOL: b2MotorJoint.cpp<152:10> [b2MotorJoint.cpp <156:28 156:32>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_correctionFactor [b2MotorJoint.cpp <156:36 156:53>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularError [b2MotorJoint.cpp <156:57 156:70>]
LOCAL_SYMBOL: b2MotorJoint.cpp<157:11> [b2MotorJoint.cpp <157:11 157:17>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <157:3 157:9>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularMass [b2MotorJoint.cpp <157:22 157:34>]
LOCAL_SYMBOL: b2MotorJoint.cpp<156:11> [b2MotorJoint.cpp <157:38 157:41>]
LOCAL_SYMBOL: b2MotorJoint.cpp<159:11> [b2MotorJoint.cpp <159:11 159:20>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <159:3 159:9>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularImpulse [b2MotorJoint.cpp <159:24 159:39>]
LOCAL_SYMBOL: b2MotorJoint.cpp<160:11> [b2MotorJoint.cpp <160:11 160:20>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <160:3 160:9>]
LOCAL_SYMBOL: b2MotorJoint.cpp<151:10> [b2MotorJoint.cpp <160:24 160:24>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_maxTorque [b2MotorJoint.cpp <160:28 160:38>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularImpulse [b2MotorJoint.cpp <161:3 161:18>]
SYMBOL_FUNCTION float b2Clamp<float>(float, float, float)
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float b2Clamp<float>(float, float, float) [b2MotorJoint.cpp <161:22 161:28>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularImpulse [b2MotorJoint.cpp <161:30 161:45>]
LOCAL_SYMBOL: b2MotorJoint.cpp<157:11> [b2MotorJoint.cpp <161:49 161:55>]
LOCAL_SYMBOL: b2MotorJoint.cpp<160:11> [b2MotorJoint.cpp <161:59 161:68>]
LOCAL_SYMBOL: b2MotorJoint.cpp<160:11> [b2MotorJoint.cpp <161:71 161:80>]
LOCAL_SYMBOL: b2MotorJoint.cpp<157:11> [b2MotorJoint.cpp <162:3 162:9>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_angularImpulse [b2MotorJoint.cpp <162:13 162:28>]
LOCAL_SYMBOL: b2MotorJoint.cpp<159:11> [b2MotorJoint.cpp <162:32 162:41>]
LOCAL_SYMBOL: b2MotorJoint.cpp<144:10> [b2MotorJoint.cpp <164:3 164:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<149:10> [b2MotorJoint.cpp <164:9 164:10>]
LOCAL_SYMBOL: b2MotorJoint.cpp<157:11> [b2MotorJoint.cpp <164:14 164:20>]
LOCAL_SYMBOL: b2MotorJoint.cpp<146:10> [b2MotorJoint.cpp <165:3 165:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<149:24> [b2MotorJoint.cpp <165:9 165:10>]
LOCAL_SYMBOL: b2MotorJoint.cpp<157:11> [b2MotorJoint.cpp <165:14 165:20>]
LOCAL_SYMBOL: b2MotorJoint.cpp<170:10> [b2MotorJoint.cpp <170:10 170:13>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 [b2MotorJoint.cpp <170:3 170:8>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <170:65 170:65>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <170:45 170:45>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <170:40 170:40>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <170:20 170:20>]
LOCAL_SYMBOL: b2MotorJoint.cpp<145:9> [b2MotorJoint.cpp <170:17 170:18>]
SYMBOL_FUNCTION b2Vec2 b2Cross(float32, const b2Vec2 &)
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Cross(float32, const b2Vec2 &) [b2MotorJoint.cpp <170:22 170:28>]
LOCAL_SYMBOL: b2MotorJoint.cpp<146:10> [b2MotorJoint.cpp <170:30 170:31>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <170:34 170:37>]
LOCAL_SYMBOL: b2MotorJoint.cpp<143:9> [b2MotorJoint.cpp <170:42 170:43>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Cross(float32, const b2Vec2 &) [b2MotorJoint.cpp <170:47 170:53>]
LOCAL_SYMBOL: b2MotorJoint.cpp<144:10> [b2MotorJoint.cpp <170:55 170:56>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <170:59 170:62>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2MotorJoint.cpp <170:94 170:94>]
LOCAL_SYMBOL: b2MotorJoint.cpp<152:10> [b2MotorJoint.cpp <170:67 170:71>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_correctionFactor [b2MotorJoint.cpp <170:75 170:92>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearError [b2MotorJoint.cpp <170:96 170:108>]
LOCAL_SYMBOL: b2MotorJoint.cpp<172:10> [b2MotorJoint.cpp <172:10 172:16>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 [b2MotorJoint.cpp <172:3 172:8>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Vec2::operator-() const [b2MotorJoint.cpp <172:20 172:20>]
SYMBOL_FUNCTION b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &)
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Mul(const b2Mat22 &, const b2Vec2 &) [b2MotorJoint.cpp <172:21 172:25>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Mat22 b2MotorJoint::m_linearMass [b2MotorJoint.cpp <172:27 172:38>]
LOCAL_SYMBOL: b2MotorJoint.cpp<170:10> [b2MotorJoint.cpp <172:41 172:44>]
LOCAL_SYMBOL: b2MotorJoint.cpp<173:10> [b2MotorJoint.cpp <173:10 173:19>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 [b2MotorJoint.cpp <173:3 173:8>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2MotorJoint.cpp <173:23 173:37>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <173:23 173:37>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> void b2Vec2::operator+=(const b2Vec2 &) [b2MotorJoint.cpp <174:19 174:20>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <174:3 174:17>]
LOCAL_SYMBOL: b2MotorJoint.cpp<172:10> [b2MotorJoint.cpp <174:22 174:28>]
LOCAL_SYMBOL: b2MotorJoint.cpp<176:11> [b2MotorJoint.cpp <176:11 176:20>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 [b2MotorJoint.cpp <176:3 176:9>]
LOCAL_SYMBOL: b2MotorJoint.cpp<151:10> [b2MotorJoint.cpp <176:24 176:24>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2MotorJoint::m_maxForce [b2MotorJoint.cpp <176:28 176:37>]
SYMBOL_FUNCTION float32 b2Vec2::LengthSquared() const
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::LengthSquared() const [b2MotorJoint.cpp <178:23 178:35>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <178:7 178:21>]
LOCAL_SYMBOL: b2MotorJoint.cpp<176:11> [b2MotorJoint.cpp <178:41 178:50>]
LOCAL_SYMBOL: b2MotorJoint.cpp<176:11> [b2MotorJoint.cpp <178:54 178:63>]
SYMBOL_FUNCTION float32 b2Vec2::Normalize()
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2Vec2::Normalize() [b2MotorJoint.cpp <180:20 180:28>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <180:4 180:18>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> void b2Vec2::operator*=(float32) [b2MotorJoint.cpp <181:20 181:21>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <181:4 181:18>]
LOCAL_SYMBOL: b2MotorJoint.cpp<176:11> [b2MotorJoint.cpp <181:23 181:32>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 & b2Vec2::operator=(b2Vec2 &&) [b2MotorJoint.cpp <184:11 184:11>]
LOCAL_SYMBOL: b2MotorJoint.cpp<172:10> [b2MotorJoint.cpp <184:3 184:9>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <184:29 184:29>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <184:13 184:27>]
LOCAL_SYMBOL: b2MotorJoint.cpp<173:10> [b2MotorJoint.cpp <184:31 184:40>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> void b2Vec2::operator-=(const b2Vec2 &) [b2MotorJoint.cpp <186:6 186:7>]
LOCAL_SYMBOL: b2MotorJoint.cpp<143:9> [b2MotorJoint.cpp <186:3 186:4>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2MotorJoint.cpp <186:12 186:12>]
LOCAL_SYMBOL: b2MotorJoint.cpp<148:10> [b2MotorJoint.cpp <186:9 186:10>]
LOCAL_SYMBOL: b2MotorJoint.cpp<172:10> [b2MotorJoint.cpp <186:14 186:20>]
LOCAL_SYMBOL: b2MotorJoint.cpp<144:10> [b2MotorJoint.cpp <187:3 187:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<149:10> [b2MotorJoint.cpp <187:9 187:10>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <187:14 187:20>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rA [b2MotorJoint.cpp <187:22 187:25>]
LOCAL_SYMBOL: b2MotorJoint.cpp<172:10> [b2MotorJoint.cpp <187:28 187:34>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> void b2Vec2::operator+=(const b2Vec2 &) [b2MotorJoint.cpp <189:6 189:7>]
LOCAL_SYMBOL: b2MotorJoint.cpp<145:9> [b2MotorJoint.cpp <189:3 189:4>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 operator*(float32, const b2Vec2 &) [b2MotorJoint.cpp <189:12 189:12>]
LOCAL_SYMBOL: b2MotorJoint.cpp<148:27> [b2MotorJoint.cpp <189:9 189:10>]
LOCAL_SYMBOL: b2MotorJoint.cpp<172:10> [b2MotorJoint.cpp <189:14 189:20>]
LOCAL_SYMBOL: b2MotorJoint.cpp<146:10> [b2MotorJoint.cpp <190:3 190:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<149:24> [b2MotorJoint.cpp <190:9 190:10>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2Cross(const b2Vec2 &, const b2Vec2 &) [b2MotorJoint.cpp <190:14 190:20>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2MotorJoint::m_rB [b2MotorJoint.cpp <190:22 190:25>]
LOCAL_SYMBOL: b2MotorJoint.cpp<172:10> [b2MotorJoint.cpp <190:28 190:34>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2MotorJoint.cpp <193:30 193:30>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Velocity::v [b2MotorJoint.cpp <193:28 193:28>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <193:7 193:16>]
LOCAL_SYMBOL: b2MotorJoint.cpp<141:65> [b2MotorJoint.cpp <193:2 193:5>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexA [b2MotorJoint.cpp <193:18 193:25>]
LOCAL_SYMBOL: b2MotorJoint.cpp<143:9> [b2MotorJoint.cpp <193:32 193:33>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2Velocity::w [b2MotorJoint.cpp <194:28 194:28>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <194:7 194:16>]
LOCAL_SYMBOL: b2MotorJoint.cpp<141:65> [b2MotorJoint.cpp <194:2 194:5>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexA [b2MotorJoint.cpp <194:18 194:25>]
LOCAL_SYMBOL: b2MotorJoint.cpp<144:10> [b2MotorJoint.cpp <194:32 194:33>]
REFERENCE_CALL void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2MotorJoint.cpp <195:30 195:30>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Vec2 b2Velocity::v [b2MotorJoint.cpp <195:28 195:28>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <195:7 195:16>]
LOCAL_SYMBOL: b2MotorJoint.cpp<141:65> [b2MotorJoint.cpp <195:2 195:5>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexB [b2MotorJoint.cpp <195:18 195:25>]
LOCAL_SYMBOL: b2MotorJoint.cpp<145:9> [b2MotorJoint.cpp <195:32 195:33>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> float32 b2Velocity::w [b2MotorJoint.cpp <196:28 196:28>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> b2Velocity * b2SolverData::velocities [b2MotorJoint.cpp <196:7 196:16>]
LOCAL_SYMBOL: b2MotorJoint.cpp<141:65> [b2MotorJoint.cpp <196:2 196:5>]
REFERENCE_USAGE void b2MotorJoint::SolveVelocityConstraints(const b2SolverData &) -> int32 b2MotorJoint::m_indexB [b2MotorJoint.cpp <196:18 196:25>]
LOCAL_SYMBOL: b2MotorJoint.cpp<146:10> [b2MotorJoint.cpp <196:32 196:33>]
SYMBOL_METHOD protected bool b2MotorJoint::SolvePositionConstraints(const b2SolverData &) [b2MotorJoint.cpp <199:1 <199:20 199:43> 204:1>]
SYMBOL_FUNCTION bool b2Joint::SolvePositionConstraints(const b2SolverData &)
REFERENCE_OVERRIDE bool b2MotorJoint::SolvePositionConstraints(const b2SolverData &) -> bool b2Joint::SolvePositionConstraints(const b2SolverData &) [b2MotorJoint.cpp <199:20 199:43>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <199:6 199:17>]
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE bool b2MotorJoint::SolvePositionConstraints(const b2SolverData &) -> bool [b2MotorJoint.cpp <199:1 199:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<199:65> [b2MotorJoint.cpp <199:65 199:68>]
REFERENCE_TYPE_USAGE bool b2MotorJoint::SolvePositionConstraints(const b2SolverData &) -> b2SolverData [b2MotorJoint.cpp <199:51 199:62>]
LOCAL_SYMBOL: b2MotorJoint.cpp<199:65> [b2MotorJoint.cpp <201:14 201:17>]
SYMBOL_METHOD public b2Vec2 b2MotorJoint::GetAnchorA() const [b2MotorJoint.cpp <206:1 <206:22 206:31> 209:1>]
SYMBOL_FUNCTION b2Vec2 b2Joint::GetAnchorA() const
REFERENCE_OVERRIDE b2Vec2 b2MotorJoint::GetAnchorA() const -> b2Vec2 b2Joint::GetAnchorA() const [b2MotorJoint.cpp <206:22 206:31>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <206:8 206:19>]
REFERENCE_TYPE_USAGE b2Vec2 b2MotorJoint::GetAnchorA() const -> b2Vec2 [b2MotorJoint.cpp <206:1 206:6>]
REFERENCE_CALL b2Vec2 b2MotorJoint::GetAnchorA() const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2MotorJoint.cpp <208:30 208:30>]
REFERENCE_CALL b2Vec2 b2MotorJoint::GetAnchorA() const -> const b2Vec2 & b2Body::GetPosition() const [b2MotorJoint.cpp <208:18 208:28>]
REFERENCE_USAGE b2Vec2 b2MotorJoint::GetAnchorA() const -> b2Body * b2Joint::m_bodyA [b2MotorJoint.cpp <208:9 208:15>]
SYMBOL_METHOD public b2Vec2 b2MotorJoint::GetAnchorB() const [b2MotorJoint.cpp <211:1 <211:22 211:31> 214:1>]
SYMBOL_FUNCTION b2Vec2 b2Joint::GetAnchorB() const
REFERENCE_OVERRIDE b2Vec2 b2MotorJoint::GetAnchorB() const -> b2Vec2 b2Joint::GetAnchorB() const [b2MotorJoint.cpp <211:22 211:31>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <211:8 211:19>]
REFERENCE_TYPE_USAGE b2Vec2 b2MotorJoint::GetAnchorB() const -> b2Vec2 [b2MotorJoint.cpp <211:1 211:6>]
REFERENCE_CALL b2Vec2 b2MotorJoint::GetAnchorB() const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2MotorJoint.cpp <213:30 213:30>]
REFERENCE_CALL b2Vec2 b2MotorJoint::GetAnchorB() const -> const b2Vec2 & b2Body::GetPosition() const [b2MotorJoint.cpp <213:18 213:28>]
REFERENCE_USAGE b2Vec2 b2MotorJoint::GetAnchorB() const -> b2Body * b2Joint::m_bodyB [b2MotorJoint.cpp <213:9 213:15>]
SYMBOL_METHOD public b2Vec2 b2MotorJoint::GetReactionForce(float32) const [b2MotorJoint.cpp <216:1 <216:22 216:37> 219:1>]
SYMBOL_FUNCTION b2Vec2 b2Joint::GetReactionForce(float32) const
REFERENCE_OVERRIDE b2Vec2 b2MotorJoint::GetReactionForce(float32) const -> b2Vec2 b2Joint::GetReactionForce(float32) const [b2MotorJoint.cpp <216:22 216:37>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <216:8 216:19>]
REFERENCE_TYPE_USAGE b2Vec2 b2MotorJoint::GetReactionForce(float32) const -> b2Vec2 [b2MotorJoint.cpp <216:1 216:6>]
LOCAL_SYMBOL: b2MotorJoint.cpp<216:47> [b2MotorJoint.cpp <216:47 216:52>]
REFERENCE_TYPE_USAGE b2Vec2 b2MotorJoint::GetReactionForce(float32) const -> float32 [b2MotorJoint.cpp <216:39 216:45>]
REFERENCE_CALL b2Vec2 b2MotorJoint::GetReactionForce(float32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2MotorJoint.cpp <218:16 218:16>]
LOCAL_SYMBOL: b2MotorJoint.cpp<216:47> [b2MotorJoint.cpp <218:9 218:14>]
REFERENCE_USAGE b2Vec2 b2MotorJoint::GetReactionForce(float32) const -> b2Vec2 b2MotorJoint::m_linearImpulse [b2MotorJoint.cpp <218:18 218:32>]
SYMBOL_METHOD public float32 b2MotorJoint::GetReactionTorque(float32) const [b2MotorJoint.cpp <221:1 <221:23 221:39> 224:1>]
SYMBOL_FUNCTION float32 b2Joint::GetReactionTorque(float32) const
REFERENCE_OVERRIDE float32 b2MotorJoint::GetReactionTorque(float32) const -> float32 b2Joint::GetReactionTorque(float32) const [b2MotorJoint.cpp <221:23 221:39>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <221:9 221:20>]
REFERENCE_TYPE_USAGE float32 b2MotorJoint::GetReactionTorque(float32) const -> float32 [b2MotorJoint.cpp <221:1 221:7>]
LOCAL_SYMBOL: b2MotorJoint.cpp<221:49> [b2MotorJoint.cpp <221:49 221:54>]
REFERENCE_TYPE_USAGE float32 b2MotorJoint::GetReactionTorque(float32) const -> float32 [b2MotorJoint.cpp <221:41 221:47>]
LOCAL_SYMBOL: b2MotorJoint.cpp<221:49> [b2MotorJoint.cpp <223:9 223:14>]
REFERENCE_USAGE float32 b2MotorJoint::GetReactionTorque(float32) const -> float32 b2MotorJoint::m_angularImpulse [b2MotorJoint.cpp <223:18 223:33>]
SYMBOL_METHOD public void b2MotorJoint::SetMaxForce(float32) [b2MotorJoint.cpp <226:1 <226:20 226:30> 230:1>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <226:6 226:17>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SetMaxForce(float32) -> void [b2MotorJoint.cpp <226:1 226:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<226:40> [b2MotorJoint.cpp <226:40 226:44>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SetMaxForce(float32) -> float32 [b2MotorJoint.cpp <226:32 226:38>]
SYMBOL_FUNCTION bool b2IsValid(float32)
REFERENCE_CALL void b2MotorJoint::SetMaxForce(float32) -> bool b2IsValid(float32) [b2MotorJoint.cpp <228:11 228:19>]
LOCAL_SYMBOL: b2MotorJoint.cpp<226:40> [b2MotorJoint.cpp <228:21 228:25>]
LOCAL_SYMBOL: b2MotorJoint.cpp<226:40> [b2MotorJoint.cpp <228:31 228:35>]
REFERENCE_USAGE void b2MotorJoint::SetMaxForce(float32) -> float32 b2MotorJoint::m_maxForce [b2MotorJoint.cpp <229:2 229:11>]
LOCAL_SYMBOL: b2MotorJoint.cpp<226:40> [b2MotorJoint.cpp <229:15 229:19>]
SYMBOL_METHOD public float32 b2MotorJoint::GetMaxForce() const [b2MotorJoint.cpp <232:1 <232:23 232:33> 235:1>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <232:9 232:20>]
REFERENCE_TYPE_USAGE float32 b2MotorJoint::GetMaxForce() const -> float32 [b2MotorJoint.cpp <232:1 232:7>]
REFERENCE_USAGE float32 b2MotorJoint::GetMaxForce() const -> float32 b2MotorJoint::m_maxForce [b2MotorJoint.cpp <234:9 234:18>]
SYMBOL_METHOD public void b2MotorJoint::SetMaxTorque(float32) [b2MotorJoint.cpp <237:1 <237:20 237:31> 241:1>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <237:6 237:17>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SetMaxTorque(float32) -> void [b2MotorJoint.cpp <237:1 237:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<237:41> [b2MotorJoint.cpp <237:41 237:46>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SetMaxTorque(float32) -> float32 [b2MotorJoint.cpp <237:33 237:39>]
REFERENCE_CALL void b2MotorJoint::SetMaxTorque(float32) -> bool b2IsValid(float32) [b2MotorJoint.cpp <239:11 239:19>]
LOCAL_SYMBOL: b2MotorJoint.cpp<237:41> [b2MotorJoint.cpp <239:21 239:26>]
LOCAL_SYMBOL: b2MotorJoint.cpp<237:41> [b2MotorJoint.cpp <239:32 239:37>]
REFERENCE_USAGE void b2MotorJoint::SetMaxTorque(float32) -> float32 b2MotorJoint::m_maxTorque [b2MotorJoint.cpp <240:2 240:12>]
LOCAL_SYMBOL: b2MotorJoint.cpp<237:41> [b2MotorJoint.cpp <240:16 240:21>]
SYMBOL_METHOD public float32 b2MotorJoint::GetMaxTorque() const [b2MotorJoint.cpp <243:1 <243:23 243:34> 246:1>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <243:9 243:20>]
REFERENCE_TYPE_USAGE float32 b2MotorJoint::GetMaxTorque() const -> float32 [b2MotorJoint.cpp <243:1 243:7>]
REFERENCE_USAGE float32 b2MotorJoint::GetMaxTorque() const -> float32 b2MotorJoint::m_maxTorque [b2MotorJoint.cpp <245:9 245:19>]
SYMBOL_METHOD public void b2MotorJoint::SetCorrectionFactor(float32) [b2MotorJoint.cpp <248:1 <248:20 248:38> 252:1>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <248:6 248:17>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SetCorrectionFactor(float32) -> void [b2MotorJoint.cpp <248:1 248:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<248:48> [b2MotorJoint.cpp <248:48 248:53>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SetCorrectionFactor(float32) -> float32 [b2MotorJoint.cpp <248:40 248:46>]
REFERENCE_CALL void b2MotorJoint::SetCorrectionFactor(float32) -> bool b2IsValid(float32) [b2MotorJoint.cpp <250:11 250:19>]
LOCAL_SYMBOL: b2MotorJoint.cpp<248:48> [b2MotorJoint.cpp <250:21 250:26>]
LOCAL_SYMBOL: b2MotorJoint.cpp<248:48> [b2MotorJoint.cpp <250:40 250:45>]
LOCAL_SYMBOL: b2MotorJoint.cpp<248:48> [b2MotorJoint.cpp <250:50 250:55>]
REFERENCE_USAGE void b2MotorJoint::SetCorrectionFactor(float32) -> float32 b2MotorJoint::m_correctionFactor [b2MotorJoint.cpp <251:2 251:19>]
LOCAL_SYMBOL: b2MotorJoint.cpp<248:48> [b2MotorJoint.cpp <251:23 251:28>]
SYMBOL_METHOD public float32 b2MotorJoint::GetCorrectionFactor() const [b2MotorJoint.cpp <254:1 <254:23 254:41> 257:1>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <254:9 254:20>]
REFERENCE_TYPE_USAGE float32 b2MotorJoint::GetCorrectionFactor() const -> float32 [b2MotorJoint.cpp <254:1 254:7>]
REFERENCE_USAGE float32 b2MotorJoint::GetCorrectionFactor() const -> float32 b2MotorJoint::m_correctionFactor [b2MotorJoint.cpp <256:9 256:26>]
SYMBOL_METHOD public void b2MotorJoint::SetLinearOffset(const b2Vec2 &) [b2MotorJoint.cpp <259:1 <259:20 259:34> 267:1>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <259:6 259:17>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> void [b2MotorJoint.cpp <259:1 259:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<259:50> [b2MotorJoint.cpp <259:50 259:61>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> b2Vec2 [b2MotorJoint.cpp <259:42 259:47>]
REFERENCE_USAGE void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> float32 b2Vec2::x [b2MotorJoint.cpp <261:19 261:19>]
LOCAL_SYMBOL: b2MotorJoint.cpp<259:50> [b2MotorJoint.cpp <261:6 261:17>]
REFERENCE_USAGE void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> float32 b2Vec2::x [b2MotorJoint.cpp <261:39 261:39>]
REFERENCE_USAGE void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> b2Vec2 b2MotorJoint::m_linearOffset [b2MotorJoint.cpp <261:24 261:37>]
REFERENCE_USAGE void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> float32 b2Vec2::y [b2MotorJoint.cpp <261:57 261:57>]
LOCAL_SYMBOL: b2MotorJoint.cpp<259:50> [b2MotorJoint.cpp <261:44 261:55>]
REFERENCE_USAGE void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> float32 b2Vec2::y [b2MotorJoint.cpp <261:77 261:77>]
REFERENCE_USAGE void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> b2Vec2 b2MotorJoint::m_linearOffset [b2MotorJoint.cpp <261:62 261:75>]
SYMBOL_FUNCTION void b2Body::SetAwake(bool)
REFERENCE_CALL void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> void b2Body::SetAwake(bool) [b2MotorJoint.cpp <263:12 263:19>]
REFERENCE_USAGE void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> b2Body * b2Joint::m_bodyA [b2MotorJoint.cpp <263:3 263:9>]
REFERENCE_CALL void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> void b2Body::SetAwake(bool) [b2MotorJoint.cpp <264:12 264:19>]
REFERENCE_USAGE void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> b2Body * b2Joint::m_bodyB [b2MotorJoint.cpp <264:3 264:9>]
REFERENCE_CALL void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2MotorJoint.cpp <265:18 265:18>]
REFERENCE_USAGE void b2MotorJoint::SetLinearOffset(const b2Vec2 &) -> b2Vec2 b2MotorJoint::m_linearOffset [b2MotorJoint.cpp <265:3 265:16>]
LOCAL_SYMBOL: b2MotorJoint.cpp<259:50> [b2MotorJoint.cpp <265:20 265:31>]
SYMBOL_METHOD public const b2Vec2 & b2MotorJoint::GetLinearOffset() const [b2MotorJoint.cpp <269:1 <269:29 269:43> 272:1>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <269:15 269:26>]
REFERENCE_TYPE_USAGE const b2Vec2 & b2MotorJoint::GetLinearOffset() const -> b2Vec2 [b2MotorJoint.cpp <269:7 269:12>]
REFERENCE_USAGE const b2Vec2 & b2MotorJoint::GetLinearOffset() const -> b2Vec2 b2MotorJoint::m_linearOffset [b2MotorJoint.cpp <271:9 271:22>]
SYMBOL_METHOD public void b2MotorJoint::SetAngularOffset(float32) [b2MotorJoint.cpp <274:1 <274:20 274:35> 282:1>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <274:6 274:17>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SetAngularOffset(float32) -> void [b2MotorJoint.cpp <274:1 274:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<274:45> [b2MotorJoint.cpp <274:45 274:57>]
REFERENCE_TYPE_USAGE void b2MotorJoint::SetAngularOffset(float32) -> float32 [b2MotorJoint.cpp <274:37 274:43>]
LOCAL_SYMBOL: b2MotorJoint.cpp<274:45> [b2MotorJoint.cpp <276:6 276:18>]
REFERENCE_USAGE void b2MotorJoint::SetAngularOffset(float32) -> float32 b2MotorJoint::m_angularOffset [b2MotorJoint.cpp <276:23 276:37>]
REFERENCE_CALL void b2MotorJoint::SetAngularOffset(float32) -> void b2Body::SetAwake(bool) [b2MotorJoint.cpp <278:12 278:19>]
REFERENCE_USAGE void b2MotorJoint::SetAngularOffset(float32) -> b2Body * b2Joint::m_bodyA [b2MotorJoint.cpp <278:3 278:9>]
REFERENCE_CALL void b2MotorJoint::SetAngularOffset(float32) -> void b2Body::SetAwake(bool) [b2MotorJoint.cpp <279:12 279:19>]
REFERENCE_USAGE void b2MotorJoint::SetAngularOffset(float32) -> b2Body * b2Joint::m_bodyB [b2MotorJoint.cpp <279:3 279:9>]
REFERENCE_USAGE void b2MotorJoint::SetAngularOffset(float32) -> float32 b2MotorJoint::m_angularOffset [b2MotorJoint.cpp <280:3 280:17>]
LOCAL_SYMBOL: b2MotorJoint.cpp<274:45> [b2MotorJoint.cpp <280:21 280:33>]
SYMBOL_METHOD public float32 b2MotorJoint::GetAngularOffset() const [b2MotorJoint.cpp <284:1 <284:23 284:38> 287:1>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <284:9 284:20>]
REFERENCE_TYPE_USAGE float32 b2MotorJoint::GetAngularOffset() const -> float32 [b2MotorJoint.cpp <284:1 284:7>]
REFERENCE_USAGE float32 b2MotorJoint::GetAngularOffset() const -> float32 b2MotorJoint::m_angularOffset [b2MotorJoint.cpp <286:9 286:23>]
SYMBOL_METHOD public void b2MotorJoint::Dump() [b2MotorJoint.cpp <289:1 <289:20 289:23> 304:1>]
SYMBOL_FUNCTION void b2Joint::Dump()
REFERENCE_OVERRIDE void b2MotorJoint::Dump() -> void b2Joint::Dump() [b2MotorJoint.cpp <289:20 289:23>]
QUALIFIER: b2MotorJoint [b2MotorJoint.cpp <289:6 289:17>]
REFERENCE_TYPE_USAGE void b2MotorJoint::Dump() -> void [b2MotorJoint.cpp <289:1 289:4>]
LOCAL_SYMBOL: b2MotorJoint.cpp<291:8> [b2MotorJoint.cpp <291:8 291:13>]
REFERENCE_TYPE_USAGE void b2MotorJoint::Dump() -> int32 [b2MotorJoint.cpp <291:2 291:6>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> int32 b2Body::m_islandIndex [b2MotorJoint.cpp <291:26 291:38>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> b2Body * b2Joint::m_bodyA [b2MotorJoint.cpp <291:17 291:23>]
LOCAL_SYMBOL: b2MotorJoint.cpp<292:8> [b2MotorJoint.cpp <292:8 292:13>]
REFERENCE_TYPE_USAGE void b2MotorJoint::Dump() -> int32 [b2MotorJoint.cpp <292:2 292:6>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> int32 b2Body::m_islandIndex [b2MotorJoint.cpp <292:26 292:38>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> b2Body * b2Joint::m_bodyB [b2MotorJoint.cpp <292:17 292:23>]
SYMBOL_FUNCTION void b2Log(const char *)
REFERENCE_CALL void b2MotorJoint::Dump() -> void b2Log(const char *) [b2MotorJoint.cpp <294:2 294:6>]
REFERENCE_CALL void b2MotorJoint::Dump() -> void b2Log(const char *) [b2MotorJoint.cpp <295:2 295:6>]
LOCAL_SYMBOL: b2MotorJoint.cpp<291:8> [b2MotorJoint.cpp <295:38 295:43>]
REFERENCE_CALL void b2MotorJoint::Dump() -> void b2Log(const char *) [b2MotorJoint.cpp <296:2 296:6>]
LOCAL_SYMBOL: b2MotorJoint.cpp<292:8> [b2MotorJoint.cpp <296:38 296:43>]
REFERENCE_CALL void b2MotorJoint::Dump() -> void b2Log(const char *) [b2MotorJoint.cpp <297:2 297:6>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> bool b2Joint::m_collideConnected [b2MotorJoint.cpp <297:47 297:64>]
REFERENCE_CALL void b2MotorJoint::Dump() -> void b2Log(const char *) [b2MotorJoint.cpp <298:2 298:6>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> float32 b2Vec2::x [b2MotorJoint.cpp <298:69 298:69>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> b2Vec2 b2MotorJoint::m_linearOffset [b2MotorJoint.cpp <298:54 298:67>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> float32 b2Vec2::y [b2MotorJoint.cpp <298:87 298:87>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> b2Vec2 b2MotorJoint::m_linearOffset [b2MotorJoint.cpp <298:72 298:85>]
REFERENCE_CALL void b2MotorJoint::Dump() -> void b2Log(const char *) [b2MotorJoint.cpp <299:2 299:6>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> float32 b2MotorJoint::m_angularOffset [b2MotorJoint.cpp <299:43 299:57>]
REFERENCE_CALL void b2MotorJoint::Dump() -> void b2Log(const char *) [b2MotorJoint.cpp <300:2 300:6>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> float32 b2MotorJoint::m_maxForce [b2MotorJoint.cpp <300:38 300:47>]
REFERENCE_CALL void b2MotorJoint::Dump() -> void b2Log(const char *) [b2MotorJoint.cpp <301:2 301:6>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> float32 b2MotorJoint::m_maxTorque [b2MotorJoint.cpp <301:39 301:49>]
REFERENCE_CALL void b2MotorJoint::Dump() -> void b2Log(const char *) [b2MotorJoint.cpp <302:2 302:6>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> float32 b2MotorJoint::m_correctionFactor [b2MotorJoint.cpp <302:46 302:63>]
REFERENCE_CALL void b2MotorJoint::Dump() -> void b2Log(const char *) [b2MotorJoint.cpp <303:2 303:6>]
REFERENCE_USAGE void b2MotorJoint::Dump() -> int32 b2Joint::m_index [b2MotorJoint.cpp <303:55 303:61>]
