FILE: b2CircleContact.cpp
COMMENT: comment [b2CircleContact.cpp <1:1 17:3>]
REFERENCE_MACRO_USAGE b2CircleContact.cpp -> b2Assert [b2CircleContact.cpp <43:2 43:9>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:23 34:31>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:47 34:55>]
REFERENCE_MACRO_USAGE assert.h -> __FILE__ [assert.h <34:57 34:64>]
REFERENCE_MACRO_USAGE assert.h -> __LINE__ [assert.h <34:79 34:86>]
REFERENCE_MACRO_USAGE b2CircleContact.cpp -> b2Assert [b2CircleContact.cpp <44:2 44:9>]
SYMBOL_METHOD public static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) [b2CircleContact.cpp <28:1 <28:29 28:34> 32:1>]
SYMBOL_CLASS b2CircleContact
QUALIFIER: b2CircleContact [b2CircleContact.cpp <28:12 28:26>]
REFERENCE_TYPE_USAGE static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Contact [b2CircleContact.cpp <28:1 28:9>]
LOCAL_SYMBOL: b2CircleContact.cpp<28:47> [b2CircleContact.cpp <28:47 28:54>]
REFERENCE_TYPE_USAGE static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Fixture [b2CircleContact.cpp <28:36 28:44>]
REFERENCE_TYPE_USAGE static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> int32 [b2CircleContact.cpp <28:57 28:61>]
LOCAL_SYMBOL: b2CircleContact.cpp<28:75> [b2CircleContact.cpp <28:75 28:82>]
REFERENCE_TYPE_USAGE static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Fixture [b2CircleContact.cpp <28:64 28:72>]
REFERENCE_TYPE_USAGE static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> int32 [b2CircleContact.cpp <28:85 28:89>]
LOCAL_SYMBOL: b2CircleContact.cpp<28:110> [b2CircleContact.cpp <28:110 28:118>]
REFERENCE_TYPE_USAGE static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2BlockAllocator [b2CircleContact.cpp <28:92 28:107>]
LOCAL_SYMBOL: b2CircleContact.cpp<30:8> [b2CircleContact.cpp <30:8 30:10>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> void [b2CircleContact.cpp <30:2 30:5>]
SYMBOL_FUNCTION void * b2BlockAllocator::Allocate(int32)
REFERENCE_CALL static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> void * b2BlockAllocator::Allocate(int32) [b2CircleContact.cpp <30:25 30:32>]
LOCAL_SYMBOL: b2CircleContact.cpp<28:110> [b2CircleContact.cpp <30:14 30:22>]
REFERENCE_TYPE_USAGE static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2CircleContact [b2CircleContact.cpp <30:41 30:55>]
REFERENCE_TYPE_USAGE static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2CircleContact [b2CircleContact.cpp <31:19 31:33>]
SYMBOL_FUNCTION void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *)
REFERENCE_CALL static b2Contact * b2CircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) [b2CircleContact.cpp <31:19 31:33>]
LOCAL_SYMBOL: b2CircleContact.cpp<28:47> [b2CircleContact.cpp <31:35 31:42>]
LOCAL_SYMBOL: b2CircleContact.cpp<28:75> [b2CircleContact.cpp <31:45 31:52>]
LOCAL_SYMBOL: b2CircleContact.cpp<30:8> [b2CircleContact.cpp <31:14 31:16>]
SYMBOL_METHOD public static void b2CircleContact::Destroy(b2Contact *, b2BlockAllocator *) [b2CircleContact.cpp <34:1 <34:23 34:29> 38:1>]
QUALIFIER: b2CircleContact [b2CircleContact.cpp <34:6 34:20>]
REFERENCE_TYPE_USAGE static void b2CircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> void [b2CircleContact.cpp <34:1 34:4>]
LOCAL_SYMBOL: b2CircleContact.cpp<34:42> [b2CircleContact.cpp <34:42 34:48>]
REFERENCE_TYPE_USAGE static void b2CircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> b2Contact [b2CircleContact.cpp <34:31 34:39>]
LOCAL_SYMBOL: b2CircleContact.cpp<34:69> [b2CircleContact.cpp <34:69 34:77>]
REFERENCE_TYPE_USAGE static void b2CircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> b2BlockAllocator [b2CircleContact.cpp <34:51 34:66>]
SYMBOL_FUNCTION void b2CircleContact::~b2CircleContact()
REFERENCE_CALL static void b2CircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> void b2CircleContact::~b2CircleContact() [b2CircleContact.cpp <36:31 36:31>]
REFERENCE_TYPE_USAGE static void b2CircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> b2CircleContact [b2CircleContact.cpp <36:4 36:18>]
LOCAL_SYMBOL: b2CircleContact.cpp<34:42> [b2CircleContact.cpp <36:21 36:27>]
SYMBOL_FUNCTION void b2BlockAllocator::Free(void *, int32)
REFERENCE_CALL static void b2CircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> void b2BlockAllocator::Free(void *, int32) [b2CircleContact.cpp <37:13 37:16>]
LOCAL_SYMBOL: b2CircleContact.cpp<34:69> [b2CircleContact.cpp <37:2 37:10>]
LOCAL_SYMBOL: b2CircleContact.cpp<34:42> [b2CircleContact.cpp <37:18 37:24>]
REFERENCE_TYPE_USAGE static void b2CircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> b2CircleContact [b2CircleContact.cpp <37:34 37:48>]
SYMBOL_METHOD public void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) [b2CircleContact.cpp <40:1 <40:18 40:32> 45:1>]
QUALIFIER: b2CircleContact [b2CircleContact.cpp <40:1 40:15>]
LOCAL_SYMBOL: b2CircleContact.cpp<40:45> [b2CircleContact.cpp <40:45 40:52>]
REFERENCE_TYPE_USAGE void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) -> b2Fixture [b2CircleContact.cpp <40:34 40:42>]
LOCAL_SYMBOL: b2CircleContact.cpp<40:66> [b2CircleContact.cpp <40:66 40:73>]
REFERENCE_TYPE_USAGE void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) -> b2Fixture [b2CircleContact.cpp <40:55 40:63>]
REFERENCE_TYPE_USAGE void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) -> b2Contact [b2CircleContact.cpp <41:4 41:12>]
SYMBOL_FUNCTION void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32)
REFERENCE_CALL void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) -> void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) [b2CircleContact.cpp <41:4 41:12>]
LOCAL_SYMBOL: b2CircleContact.cpp<40:45> [b2CircleContact.cpp <41:14 41:21>]
LOCAL_SYMBOL: b2CircleContact.cpp<40:66> [b2CircleContact.cpp <41:27 41:34>]
SYMBOL_FUNCTION b2Shape::Type b2Fixture::GetType() const
REFERENCE_CALL void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) -> b2Shape::Type b2Fixture::GetType() const [b2CircleContact.cpp <43:23 43:29>]
REFERENCE_USAGE void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) -> b2Fixture * b2Contact::m_fixtureA [b2CircleContact.cpp <43:11 43:20>]
REFERENCE_USAGE void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) -> b2Shape::Type::e_circle [b2CircleContact.cpp <43:45 43:52>]
SYMBOL_CLASS b2Shape
QUALIFIER: b2Shape [b2CircleContact.cpp <43:36 43:42>]
REFERENCE_CALL void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) -> b2Shape::Type b2Fixture::GetType() const [b2CircleContact.cpp <44:23 44:29>]
REFERENCE_USAGE void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) -> b2Fixture * b2Contact::m_fixtureB [b2CircleContact.cpp <44:11 44:20>]
REFERENCE_USAGE void b2CircleContact::b2CircleContact(b2Fixture *, b2Fixture *) -> b2Shape::Type::e_circle [b2CircleContact.cpp <44:45 44:52>]
QUALIFIER: b2Shape [b2CircleContact.cpp <44:36 44:42>]
SYMBOL_METHOD public void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) [b2CircleContact.cpp <47:1 <47:23 47:30> 52:1>]
SYMBOL_FUNCTION void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &)
REFERENCE_OVERRIDE void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) [b2CircleContact.cpp <47:23 47:30>]
QUALIFIER: b2CircleContact [b2CircleContact.cpp <47:6 47:20>]
REFERENCE_TYPE_USAGE void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> void [b2CircleContact.cpp <47:1 47:4>]
LOCAL_SYMBOL: b2CircleContact.cpp<47:44> [b2CircleContact.cpp <47:44 47:51>]
REFERENCE_TYPE_USAGE void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Manifold [b2CircleContact.cpp <47:32 47:41>]
LOCAL_SYMBOL: b2CircleContact.cpp<47:73> [b2CircleContact.cpp <47:73 47:75>]
REFERENCE_TYPE_USAGE void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Transform [b2CircleContact.cpp <47:60 47:70>]
LOCAL_SYMBOL: b2CircleContact.cpp<47:97> [b2CircleContact.cpp <47:97 47:99>]
REFERENCE_TYPE_USAGE void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Transform [b2CircleContact.cpp <47:84 47:94>]
SYMBOL_FUNCTION void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &)
REFERENCE_CALL void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> void b2CollideCircles(b2Manifold *, const b2CircleShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2CircleContact.cpp <49:2 49:17>]
LOCAL_SYMBOL: b2CircleContact.cpp<47:44> [b2CircleContact.cpp <49:19 49:26>]
REFERENCE_TYPE_USAGE void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2CircleShape [b2CircleContact.cpp <50:7 50:19>]
SYMBOL_FUNCTION b2Shape * b2Fixture::GetShape()
REFERENCE_CALL void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Shape * b2Fixture::GetShape() [b2CircleContact.cpp <50:34 50:41>]
REFERENCE_USAGE void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Fixture * b2Contact::m_fixtureA [b2CircleContact.cpp <50:22 50:31>]
LOCAL_SYMBOL: b2CircleContact.cpp<47:73> [b2CircleContact.cpp <50:46 50:48>]
REFERENCE_TYPE_USAGE void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2CircleShape [b2CircleContact.cpp <51:7 51:19>]
REFERENCE_CALL void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Shape * b2Fixture::GetShape() [b2CircleContact.cpp <51:34 51:41>]
REFERENCE_USAGE void b2CircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Fixture * b2Contact::m_fixtureB [b2CircleContact.cpp <51:22 51:31>]
LOCAL_SYMBOL: b2CircleContact.cpp<47:97> [b2CircleContact.cpp <51:46 51:48>]
