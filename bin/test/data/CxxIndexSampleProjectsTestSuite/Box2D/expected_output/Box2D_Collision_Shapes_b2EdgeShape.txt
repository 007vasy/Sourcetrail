FILE: b2EdgeShape.cpp
COMMENT: comment [b2EdgeShape.cpp <1:1 17:3>]
REFERENCE_MACRO_USAGE b2EdgeShape.cpp -> B2_NOT_USED [b2EdgeShape.cpp <45:2 45:12>]
REFERENCE_MACRO_USAGE b2EdgeShape.cpp -> B2_NOT_USED [b2EdgeShape.cpp <46:2 46:12>]
COMMENT: comment [b2EdgeShape.cpp <50:1 50:18>]
COMMENT: comment [b2EdgeShape.cpp <51:1 51:18>]
COMMENT: comment [b2EdgeShape.cpp <52:1 52:27>]
COMMENT: comment [b2EdgeShape.cpp <53:1 53:27>]
REFERENCE_MACRO_USAGE b2EdgeShape.cpp -> B2_NOT_USED [b2EdgeShape.cpp <57:2 57:12>]
COMMENT: comment [b2EdgeShape.cpp <59:2 59:52>]
COMMENT: comment [b2EdgeShape.cpp <70:2 70:19>]
COMMENT: comment [b2EdgeShape.cpp <71:2 71:28>]
COMMENT: comment [b2EdgeShape.cpp <72:2 72:50>]
COMMENT: comment [b2EdgeShape.cpp <89:2 89:19>]
COMMENT: comment [b2EdgeShape.cpp <90:2 90:35>]
REFERENCE_MACRO_USAGE b2EdgeShape.cpp -> B2_NOT_USED [b2EdgeShape.cpp <118:2 118:12>]
REFERENCE_MACRO_USAGE b2EdgeShape.cpp -> B2_NOT_USED [b2EdgeShape.cpp <133:2 133:12>]
SYMBOL_METHOD public void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <22:1 <22:19 22:21> 28:1>]
SYMBOL_CLASS b2EdgeShape
QUALIFIER: b2EdgeShape [b2EdgeShape.cpp <22:6 22:16>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> void [b2EdgeShape.cpp <22:1 22:4>]
LOCAL_SYMBOL: b2EdgeShape.cpp<22:37> [b2EdgeShape.cpp <22:37 22:38>]
REFERENCE_TYPE_USAGE void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2EdgeShape.cpp <22:29 22:34>]
LOCAL_SYMBOL: b2EdgeShape.cpp<22:55> [b2EdgeShape.cpp <22:55 22:56>]
REFERENCE_TYPE_USAGE void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 [b2EdgeShape.cpp <22:47 22:52>]
SYMBOL_FUNCTION b2Vec2 & b2Vec2::operator=(const b2Vec2 &)
REFERENCE_CALL void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2EdgeShape.cpp <24:12 24:12>]
REFERENCE_USAGE void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2EdgeShape::m_vertex1 [b2EdgeShape.cpp <24:2 24:10>]
LOCAL_SYMBOL: b2EdgeShape.cpp<22:37> [b2EdgeShape.cpp <24:14 24:15>]
REFERENCE_CALL void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 & b2Vec2::operator=(const b2Vec2 &) [b2EdgeShape.cpp <25:12 25:12>]
REFERENCE_USAGE void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> b2Vec2 b2EdgeShape::m_vertex2 [b2EdgeShape.cpp <25:2 25:10>]
LOCAL_SYMBOL: b2EdgeShape.cpp<22:55> [b2EdgeShape.cpp <25:14 25:15>]
REFERENCE_USAGE void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> bool b2EdgeShape::m_hasVertex0 [b2EdgeShape.cpp <26:2 26:13>]
REFERENCE_USAGE void b2EdgeShape::Set(const b2Vec2 &, const b2Vec2 &) -> bool b2EdgeShape::m_hasVertex3 [b2EdgeShape.cpp <27:2 27:13>]
SYMBOL_METHOD public b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const [b2EdgeShape.cpp <30:1 <30:23 30:27> 36:1>]
SYMBOL_FUNCTION b2Shape * b2Shape::Clone(b2BlockAllocator *) const
REFERENCE_OVERRIDE b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2Shape * b2Shape::Clone(b2BlockAllocator *) const [b2EdgeShape.cpp <30:23 30:27>]
QUALIFIER: b2EdgeShape [b2EdgeShape.cpp <30:10 30:20>]
REFERENCE_TYPE_USAGE b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2Shape [b2EdgeShape.cpp <30:1 30:7>]
LOCAL_SYMBOL: b2EdgeShape.cpp<30:47> [b2EdgeShape.cpp <30:47 30:55>]
REFERENCE_TYPE_USAGE b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2BlockAllocator [b2EdgeShape.cpp <30:29 30:44>]
LOCAL_SYMBOL: b2EdgeShape.cpp<32:8> [b2EdgeShape.cpp <32:8 32:10>]
REFERENCE_TYPE_USAGE b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> void [b2EdgeShape.cpp <32:2 32:5>]
SYMBOL_FUNCTION void * b2BlockAllocator::Allocate(int32)
REFERENCE_CALL b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> void * b2BlockAllocator::Allocate(int32) [b2EdgeShape.cpp <32:25 32:32>]
LOCAL_SYMBOL: b2EdgeShape.cpp<30:47> [b2EdgeShape.cpp <32:14 32:22>]
REFERENCE_TYPE_USAGE b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2EdgeShape [b2EdgeShape.cpp <32:41 32:51>]
LOCAL_SYMBOL: b2EdgeShape.cpp<33:15> [b2EdgeShape.cpp <33:15 33:19>]
REFERENCE_TYPE_USAGE b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2EdgeShape [b2EdgeShape.cpp <33:2 33:12>]
REFERENCE_TYPE_USAGE b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2EdgeShape [b2EdgeShape.cpp <33:33 33:43>]
SYMBOL_FUNCTION void b2EdgeShape::b2EdgeShape()
REFERENCE_CALL b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> void b2EdgeShape::b2EdgeShape() [b2EdgeShape.cpp <33:33 33:43>]
LOCAL_SYMBOL: b2EdgeShape.cpp<32:8> [b2EdgeShape.cpp <33:28 33:30>]
SYMBOL_FUNCTION b2EdgeShape & b2EdgeShape::operator=(const b2EdgeShape &)
REFERENCE_CALL b2Shape * b2EdgeShape::Clone(b2BlockAllocator *) const -> b2EdgeShape & b2EdgeShape::operator=(const b2EdgeShape &) [b2EdgeShape.cpp <34:9 34:9>]
LOCAL_SYMBOL: b2EdgeShape.cpp<33:15> [b2EdgeShape.cpp <34:3 34:7>]
LOCAL_SYMBOL: b2EdgeShape.cpp<33:15> [b2EdgeShape.cpp <35:9 35:13>]
SYMBOL_METHOD public int32 b2EdgeShape::GetChildCount() const [b2EdgeShape.cpp <38:1 <38:20 38:32> 41:1>]
SYMBOL_FUNCTION int32 b2Shape::GetChildCount() const
REFERENCE_OVERRIDE int32 b2EdgeShape::GetChildCount() const -> int32 b2Shape::GetChildCount() const [b2EdgeShape.cpp <38:20 38:32>]
QUALIFIER: b2EdgeShape [b2EdgeShape.cpp <38:7 38:17>]
REFERENCE_TYPE_USAGE int32 b2EdgeShape::GetChildCount() const -> int32 [b2EdgeShape.cpp <38:1 38:5>]
SYMBOL_METHOD public bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2EdgeShape.cpp <43:1 <43:19 43:27> 48:1>]
SYMBOL_FUNCTION bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const
REFERENCE_OVERRIDE bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool b2Shape::TestPoint(const b2Transform &, const b2Vec2 &) const [b2EdgeShape.cpp <43:19 43:27>]
QUALIFIER: b2EdgeShape [b2EdgeShape.cpp <43:6 43:16>]
SYMBOL_BUILTIN_TYPE bool
REFERENCE_TYPE_USAGE bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> bool [b2EdgeShape.cpp <43:1 43:4>]
LOCAL_SYMBOL: b2EdgeShape.cpp<43:48> [b2EdgeShape.cpp <43:48 43:49>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Transform [b2EdgeShape.cpp <43:35 43:45>]
LOCAL_SYMBOL: b2EdgeShape.cpp<43:66> [b2EdgeShape.cpp <43:66 43:66>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::TestPoint(const b2Transform &, const b2Vec2 &) const -> b2Vec2 [b2EdgeShape.cpp <43:58 43:63>]
LOCAL_SYMBOL: b2EdgeShape.cpp<43:48> [b2EdgeShape.cpp <45:14 45:15>]
LOCAL_SYMBOL: b2EdgeShape.cpp<43:66> [b2EdgeShape.cpp <46:14 46:14>]
SYMBOL_METHOD public bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2EdgeShape.cpp <54:1 <54:19 54:25> 114:1>]
SYMBOL_FUNCTION bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const
REFERENCE_OVERRIDE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool b2Shape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const [b2EdgeShape.cpp <54:19 54:25>]
QUALIFIER: b2EdgeShape [b2EdgeShape.cpp <54:6 54:16>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> bool [b2EdgeShape.cpp <54:1 54:4>]
LOCAL_SYMBOL: b2EdgeShape.cpp<54:44> [b2EdgeShape.cpp <54:44 54:49>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastOutput [b2EdgeShape.cpp <54:27 54:41>]
LOCAL_SYMBOL: b2EdgeShape.cpp<54:74> [b2EdgeShape.cpp <54:74 54:78>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2RayCastInput [b2EdgeShape.cpp <54:58 54:71>]
LOCAL_SYMBOL: b2EdgeShape.cpp<55:27> [b2EdgeShape.cpp <55:27 55:28>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Transform [b2EdgeShape.cpp <55:14 55:24>]
LOCAL_SYMBOL: b2EdgeShape.cpp<55:37> [b2EdgeShape.cpp <55:37 55:46>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> int32 [b2EdgeShape.cpp <55:31 55:35>]
LOCAL_SYMBOL: b2EdgeShape.cpp<55:37> [b2EdgeShape.cpp <57:14 57:23>]
LOCAL_SYMBOL: b2EdgeShape.cpp<60:9> [b2EdgeShape.cpp <60:9 60:10>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <60:2 60:7>]
SYMBOL_FUNCTION b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &)
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2EdgeShape.cpp <60:14 60:19>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Rot b2Transform::q [b2EdgeShape.cpp <60:24 60:24>]
LOCAL_SYMBOL: b2EdgeShape.cpp<55:27> [b2EdgeShape.cpp <60:21 60:22>]
SYMBOL_FUNCTION b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <60:36 60:36>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2RayCastInput::p1 [b2EdgeShape.cpp <60:33 60:34>]
LOCAL_SYMBOL: b2EdgeShape.cpp<54:74> [b2EdgeShape.cpp <60:27 60:31>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2Transform::p [b2EdgeShape.cpp <60:41 60:41>]
LOCAL_SYMBOL: b2EdgeShape.cpp<55:27> [b2EdgeShape.cpp <60:38 60:39>]
LOCAL_SYMBOL: b2EdgeShape.cpp<61:9> [b2EdgeShape.cpp <61:9 61:10>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <61:2 61:7>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2MulT(const b2Rot &, const b2Vec2 &) [b2EdgeShape.cpp <61:14 61:19>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Rot b2Transform::q [b2EdgeShape.cpp <61:24 61:24>]
LOCAL_SYMBOL: b2EdgeShape.cpp<55:27> [b2EdgeShape.cpp <61:21 61:22>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <61:36 61:36>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2RayCastInput::p2 [b2EdgeShape.cpp <61:33 61:34>]
LOCAL_SYMBOL: b2EdgeShape.cpp<54:74> [b2EdgeShape.cpp <61:27 61:31>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2Transform::p [b2EdgeShape.cpp <61:41 61:41>]
LOCAL_SYMBOL: b2EdgeShape.cpp<55:27> [b2EdgeShape.cpp <61:38 61:39>]
LOCAL_SYMBOL: b2EdgeShape.cpp<62:9> [b2EdgeShape.cpp <62:9 62:9>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <62:2 62:7>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <62:16 62:16>]
LOCAL_SYMBOL: b2EdgeShape.cpp<61:9> [b2EdgeShape.cpp <62:13 62:14>]
LOCAL_SYMBOL: b2EdgeShape.cpp<60:9> [b2EdgeShape.cpp <62:18 62:19>]
LOCAL_SYMBOL: b2EdgeShape.cpp<64:9> [b2EdgeShape.cpp <64:9 64:10>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <64:2 64:7>]
SYMBOL_FUNCTION void b2Vec2::b2Vec2(const b2Vec2 &)
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2EdgeShape.cpp <64:14 64:22>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2EdgeShape::m_vertex1 [b2EdgeShape.cpp <64:14 64:22>]
LOCAL_SYMBOL: b2EdgeShape.cpp<65:9> [b2EdgeShape.cpp <65:9 65:10>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <65:2 65:7>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> void b2Vec2::b2Vec2(const b2Vec2 &) [b2EdgeShape.cpp <65:14 65:22>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2EdgeShape::m_vertex2 [b2EdgeShape.cpp <65:14 65:22>]
LOCAL_SYMBOL: b2EdgeShape.cpp<66:9> [b2EdgeShape.cpp <66:9 66:9>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <66:2 66:7>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <66:16 66:16>]
LOCAL_SYMBOL: b2EdgeShape.cpp<65:9> [b2EdgeShape.cpp <66:13 66:14>]
LOCAL_SYMBOL: b2EdgeShape.cpp<64:9> [b2EdgeShape.cpp <66:18 66:19>]
LOCAL_SYMBOL: b2EdgeShape.cpp<67:9> [b2EdgeShape.cpp <67:9 67:14>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <67:2 67:7>]
SYMBOL_FUNCTION void b2Vec2::b2Vec2(float32, float32)
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> void b2Vec2::b2Vec2(float32, float32) [b2EdgeShape.cpp <67:9 67:14>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Vec2::y [b2EdgeShape.cpp <67:18 67:18>]
LOCAL_SYMBOL: b2EdgeShape.cpp<66:9> [b2EdgeShape.cpp <67:16 67:16>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Vec2::x [b2EdgeShape.cpp <67:24 67:24>]
LOCAL_SYMBOL: b2EdgeShape.cpp<66:9> [b2EdgeShape.cpp <67:22 67:22>]
SYMBOL_FUNCTION float32 b2Vec2::Normalize()
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Vec2::Normalize() [b2EdgeShape.cpp <68:9 68:17>]
LOCAL_SYMBOL: b2EdgeShape.cpp<67:9> [b2EdgeShape.cpp <68:2 68:7>]
LOCAL_SYMBOL: b2EdgeShape.cpp<73:10> [b2EdgeShape.cpp <73:10 73:18>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 [b2EdgeShape.cpp <73:2 73:8>]
SYMBOL_FUNCTION float32 b2Dot(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <73:22 73:26>]
LOCAL_SYMBOL: b2EdgeShape.cpp<67:9> [b2EdgeShape.cpp <73:28 73:33>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <73:39 73:39>]
LOCAL_SYMBOL: b2EdgeShape.cpp<64:9> [b2EdgeShape.cpp <73:36 73:37>]
LOCAL_SYMBOL: b2EdgeShape.cpp<60:9> [b2EdgeShape.cpp <73:41 73:42>]
LOCAL_SYMBOL: b2EdgeShape.cpp<74:10> [b2EdgeShape.cpp <74:10 74:20>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 [b2EdgeShape.cpp <74:2 74:8>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <74:24 74:28>]
LOCAL_SYMBOL: b2EdgeShape.cpp<67:9> [b2EdgeShape.cpp <74:30 74:35>]
LOCAL_SYMBOL: b2EdgeShape.cpp<62:9> [b2EdgeShape.cpp <74:38 74:38>]
LOCAL_SYMBOL: b2EdgeShape.cpp<74:10> [b2EdgeShape.cpp <76:6 76:16>]
LOCAL_SYMBOL: b2EdgeShape.cpp<81:10> [b2EdgeShape.cpp <81:10 81:10>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 [b2EdgeShape.cpp <81:2 81:8>]
LOCAL_SYMBOL: b2EdgeShape.cpp<73:10> [b2EdgeShape.cpp <81:14 81:22>]
LOCAL_SYMBOL: b2EdgeShape.cpp<74:10> [b2EdgeShape.cpp <81:26 81:36>]
LOCAL_SYMBOL: b2EdgeShape.cpp<81:10> [b2EdgeShape.cpp <82:6 82:6>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2RayCastInput::maxFraction [b2EdgeShape.cpp <82:24 82:34>]
LOCAL_SYMBOL: b2EdgeShape.cpp<54:74> [b2EdgeShape.cpp <82:18 82:22>]
LOCAL_SYMBOL: b2EdgeShape.cpp<81:10> [b2EdgeShape.cpp <82:38 82:38>]
LOCAL_SYMBOL: b2EdgeShape.cpp<87:9> [b2EdgeShape.cpp <87:9 87:9>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <87:2 87:7>]
SYMBOL_FUNCTION b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <87:16 87:16>]
LOCAL_SYMBOL: b2EdgeShape.cpp<60:9> [b2EdgeShape.cpp <87:13 87:14>]
SYMBOL_FUNCTION b2Vec2 operator*(float32, const b2Vec2 &)
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2EdgeShape.cpp <87:20 87:20>]
LOCAL_SYMBOL: b2EdgeShape.cpp<81:10> [b2EdgeShape.cpp <87:18 87:18>]
LOCAL_SYMBOL: b2EdgeShape.cpp<62:9> [b2EdgeShape.cpp <87:22 87:22>]
LOCAL_SYMBOL: b2EdgeShape.cpp<91:9> [b2EdgeShape.cpp <91:9 91:9>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <91:2 91:7>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <91:16 91:16>]
LOCAL_SYMBOL: b2EdgeShape.cpp<65:9> [b2EdgeShape.cpp <91:13 91:14>]
LOCAL_SYMBOL: b2EdgeShape.cpp<64:9> [b2EdgeShape.cpp <91:18 91:19>]
LOCAL_SYMBOL: b2EdgeShape.cpp<92:10> [b2EdgeShape.cpp <92:10 92:11>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 [b2EdgeShape.cpp <92:2 92:8>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <92:15 92:19>]
LOCAL_SYMBOL: b2EdgeShape.cpp<91:9> [b2EdgeShape.cpp <92:21 92:21>]
LOCAL_SYMBOL: b2EdgeShape.cpp<91:9> [b2EdgeShape.cpp <92:24 92:24>]
LOCAL_SYMBOL: b2EdgeShape.cpp<92:10> [b2EdgeShape.cpp <93:6 93:7>]
LOCAL_SYMBOL: b2EdgeShape.cpp<98:10> [b2EdgeShape.cpp <98:10 98:10>]
REFERENCE_TYPE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 [b2EdgeShape.cpp <98:2 98:8>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2Dot(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <98:14 98:18>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <98:22 98:22>]
LOCAL_SYMBOL: b2EdgeShape.cpp<87:9> [b2EdgeShape.cpp <98:20 98:20>]
LOCAL_SYMBOL: b2EdgeShape.cpp<64:9> [b2EdgeShape.cpp <98:24 98:25>]
LOCAL_SYMBOL: b2EdgeShape.cpp<91:9> [b2EdgeShape.cpp <98:28 98:28>]
LOCAL_SYMBOL: b2EdgeShape.cpp<92:10> [b2EdgeShape.cpp <98:33 98:34>]
LOCAL_SYMBOL: b2EdgeShape.cpp<98:10> [b2EdgeShape.cpp <99:6 99:6>]
LOCAL_SYMBOL: b2EdgeShape.cpp<98:10> [b2EdgeShape.cpp <99:25 99:25>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> float32 b2RayCastOutput::fraction [b2EdgeShape.cpp <104:10 104:17>]
LOCAL_SYMBOL: b2EdgeShape.cpp<54:44> [b2EdgeShape.cpp <104:2 104:7>]
LOCAL_SYMBOL: b2EdgeShape.cpp<81:10> [b2EdgeShape.cpp <104:21 104:21>]
LOCAL_SYMBOL: b2EdgeShape.cpp<73:10> [b2EdgeShape.cpp <105:6 105:14>]
SYMBOL_FUNCTION b2Vec2 & b2Vec2::operator=(b2Vec2 &)
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2EdgeShape.cpp <107:18 107:18>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2RayCastOutput::normal [b2EdgeShape.cpp <107:11 107:16>]
LOCAL_SYMBOL: b2EdgeShape.cpp<54:44> [b2EdgeShape.cpp <107:3 107:8>]
SYMBOL_FUNCTION b2Vec2 b2Vec2::operator-() const
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2Vec2::operator-() const [b2EdgeShape.cpp <107:20 107:20>]
SYMBOL_FUNCTION b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &)
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2EdgeShape.cpp <107:21 107:25>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Rot b2Transform::q [b2EdgeShape.cpp <107:30 107:30>]
LOCAL_SYMBOL: b2EdgeShape.cpp<55:27> [b2EdgeShape.cpp <107:27 107:28>]
LOCAL_SYMBOL: b2EdgeShape.cpp<67:9> [b2EdgeShape.cpp <107:33 107:38>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2EdgeShape.cpp <111:18 111:18>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2RayCastOutput::normal [b2EdgeShape.cpp <111:11 111:16>]
LOCAL_SYMBOL: b2EdgeShape.cpp<54:44> [b2EdgeShape.cpp <111:3 111:8>]
REFERENCE_CALL bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Vec2 b2Mul(const b2Rot &, const b2Vec2 &) [b2EdgeShape.cpp <111:20 111:24>]
REFERENCE_USAGE bool b2EdgeShape::RayCast(b2RayCastOutput *, const b2RayCastInput &, const b2Transform &, int32) const -> b2Rot b2Transform::q [b2EdgeShape.cpp <111:29 111:29>]
LOCAL_SYMBOL: b2EdgeShape.cpp<55:27> [b2EdgeShape.cpp <111:26 111:27>]
LOCAL_SYMBOL: b2EdgeShape.cpp<67:9> [b2EdgeShape.cpp <111:32 111:37>]
SYMBOL_METHOD public void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2EdgeShape.cpp <116:1 <116:19 116:29> 129:1>]
SYMBOL_FUNCTION void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const
REFERENCE_OVERRIDE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Shape::ComputeAABB(b2AABB *, const b2Transform &, int32) const [b2EdgeShape.cpp <116:19 116:29>]
QUALIFIER: b2EdgeShape [b2EdgeShape.cpp <116:6 116:16>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void [b2EdgeShape.cpp <116:1 116:4>]
LOCAL_SYMBOL: b2EdgeShape.cpp<116:39> [b2EdgeShape.cpp <116:39 116:42>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2AABB [b2EdgeShape.cpp <116:31 116:36>]
LOCAL_SYMBOL: b2EdgeShape.cpp<116:64> [b2EdgeShape.cpp <116:64 116:65>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Transform [b2EdgeShape.cpp <116:51 116:61>]
LOCAL_SYMBOL: b2EdgeShape.cpp<116:74> [b2EdgeShape.cpp <116:74 116:83>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> int32 [b2EdgeShape.cpp <116:68 116:72>]
LOCAL_SYMBOL: b2EdgeShape.cpp<116:74> [b2EdgeShape.cpp <118:14 118:23>]
LOCAL_SYMBOL: b2EdgeShape.cpp<120:9> [b2EdgeShape.cpp <120:9 120:10>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <120:2 120:7>]
SYMBOL_FUNCTION b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &)
REFERENCE_CALL void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2EdgeShape.cpp <120:14 120:18>]
LOCAL_SYMBOL: b2EdgeShape.cpp<116:64> [b2EdgeShape.cpp <120:20 120:21>]
REFERENCE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2EdgeShape::m_vertex1 [b2EdgeShape.cpp <120:24 120:32>]
LOCAL_SYMBOL: b2EdgeShape.cpp<121:9> [b2EdgeShape.cpp <121:9 121:10>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <121:2 121:7>]
REFERENCE_CALL void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2Mul(const b2Transform &, const b2Vec2 &) [b2EdgeShape.cpp <121:14 121:18>]
LOCAL_SYMBOL: b2EdgeShape.cpp<116:64> [b2EdgeShape.cpp <121:20 121:21>]
REFERENCE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2EdgeShape::m_vertex2 [b2EdgeShape.cpp <121:24 121:32>]
LOCAL_SYMBOL: b2EdgeShape.cpp<123:9> [b2EdgeShape.cpp <123:9 123:13>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <123:2 123:7>]
SYMBOL_FUNCTION b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2Min(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <123:17 123:21>]
LOCAL_SYMBOL: b2EdgeShape.cpp<120:9> [b2EdgeShape.cpp <123:23 123:24>]
LOCAL_SYMBOL: b2EdgeShape.cpp<121:9> [b2EdgeShape.cpp <123:27 123:28>]
LOCAL_SYMBOL: b2EdgeShape.cpp<124:9> [b2EdgeShape.cpp <124:9 124:13>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <124:2 124:7>]
SYMBOL_FUNCTION b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &)
REFERENCE_CALL void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2Max(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <124:17 124:21>]
LOCAL_SYMBOL: b2EdgeShape.cpp<120:9> [b2EdgeShape.cpp <124:23 124:24>]
LOCAL_SYMBOL: b2EdgeShape.cpp<121:9> [b2EdgeShape.cpp <124:27 124:28>]
LOCAL_SYMBOL: b2EdgeShape.cpp<126:9> [b2EdgeShape.cpp <126:9 126:9>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 [b2EdgeShape.cpp <126:2 126:7>]
REFERENCE_CALL void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> void b2Vec2::b2Vec2(float32, float32) [b2EdgeShape.cpp <126:9 126:9>]
REFERENCE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> float32 b2Shape::m_radius [b2EdgeShape.cpp <126:11 126:18>]
REFERENCE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> float32 b2Shape::m_radius [b2EdgeShape.cpp <126:21 126:28>]
REFERENCE_CALL void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2EdgeShape.cpp <127:19 127:19>]
REFERENCE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2AABB::lowerBound [b2EdgeShape.cpp <127:8 127:17>]
LOCAL_SYMBOL: b2EdgeShape.cpp<116:39> [b2EdgeShape.cpp <127:2 127:5>]
REFERENCE_CALL void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 operator-(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <127:27 127:27>]
LOCAL_SYMBOL: b2EdgeShape.cpp<123:9> [b2EdgeShape.cpp <127:21 127:25>]
LOCAL_SYMBOL: b2EdgeShape.cpp<126:9> [b2EdgeShape.cpp <127:29 127:29>]
REFERENCE_CALL void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2EdgeShape.cpp <128:19 128:19>]
REFERENCE_USAGE void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 b2AABB::upperBound [b2EdgeShape.cpp <128:8 128:17>]
LOCAL_SYMBOL: b2EdgeShape.cpp<116:39> [b2EdgeShape.cpp <128:2 128:5>]
REFERENCE_CALL void b2EdgeShape::ComputeAABB(b2AABB *, const b2Transform &, int32) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <128:27 128:27>]
LOCAL_SYMBOL: b2EdgeShape.cpp<124:9> [b2EdgeShape.cpp <128:21 128:25>]
LOCAL_SYMBOL: b2EdgeShape.cpp<126:9> [b2EdgeShape.cpp <128:29 128:29>]
SYMBOL_METHOD public void b2EdgeShape::ComputeMass(b2MassData *, float32) const [b2EdgeShape.cpp <131:1 <131:19 131:29> 138:1>]
SYMBOL_FUNCTION void b2Shape::ComputeMass(b2MassData *, float32) const
REFERENCE_OVERRIDE void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> void b2Shape::ComputeMass(b2MassData *, float32) const [b2EdgeShape.cpp <131:19 131:29>]
QUALIFIER: b2EdgeShape [b2EdgeShape.cpp <131:6 131:16>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> void [b2EdgeShape.cpp <131:1 131:4>]
LOCAL_SYMBOL: b2EdgeShape.cpp<131:43> [b2EdgeShape.cpp <131:43 131:50>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> b2MassData [b2EdgeShape.cpp <131:31 131:40>]
LOCAL_SYMBOL: b2EdgeShape.cpp<131:61> [b2EdgeShape.cpp <131:61 131:67>]
REFERENCE_TYPE_USAGE void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> float32 [b2EdgeShape.cpp <131:53 131:59>]
LOCAL_SYMBOL: b2EdgeShape.cpp<131:61> [b2EdgeShape.cpp <133:14 133:20>]
REFERENCE_USAGE void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> float32 b2MassData::mass [b2EdgeShape.cpp <135:12 135:15>]
LOCAL_SYMBOL: b2EdgeShape.cpp<131:43> [b2EdgeShape.cpp <135:2 135:9>]
REFERENCE_CALL void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> b2Vec2 & b2Vec2::operator=(b2Vec2 &) [b2EdgeShape.cpp <136:19 136:19>]
REFERENCE_USAGE void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> b2Vec2 b2MassData::center [b2EdgeShape.cpp <136:12 136:17>]
LOCAL_SYMBOL: b2EdgeShape.cpp<131:43> [b2EdgeShape.cpp <136:2 136:9>]
REFERENCE_CALL void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> b2Vec2 operator*(float32, const b2Vec2 &) [b2EdgeShape.cpp <136:26 136:26>]
REFERENCE_CALL void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> b2Vec2 operator+(const b2Vec2 &, const b2Vec2 &) [b2EdgeShape.cpp <136:39 136:39>]
REFERENCE_USAGE void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> b2Vec2 b2EdgeShape::m_vertex1 [b2EdgeShape.cpp <136:29 136:37>]
REFERENCE_USAGE void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> b2Vec2 b2EdgeShape::m_vertex2 [b2EdgeShape.cpp <136:41 136:49>]
REFERENCE_USAGE void b2EdgeShape::ComputeMass(b2MassData *, float32) const -> float32 b2MassData::I [b2EdgeShape.cpp <137:12 137:12>]
LOCAL_SYMBOL: b2EdgeShape.cpp<131:43> [b2EdgeShape.cpp <137:2 137:9>]
