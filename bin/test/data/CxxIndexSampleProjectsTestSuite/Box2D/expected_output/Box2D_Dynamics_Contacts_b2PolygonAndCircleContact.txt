FILE: b2PolygonAndCircleContact.cpp
COMMENT: comment [b2PolygonAndCircleContact.cpp <1:1 17:3>]
REFERENCE_MACRO_USAGE b2PolygonAndCircleContact.cpp -> b2Assert [b2PolygonAndCircleContact.cpp <40:2 40:9>]
REFERENCE_MACRO_USAGE b2Settings.h -> assert [b2Settings.h <31:21 31:26>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:23 34:31>]
REFERENCE_MACRO_USAGE vcruntime.h -> _CRT_WIDE_ [vcruntime.h <95:22 95:31>]
REFERENCE_MACRO_USAGE assert.h -> _CRT_WIDE [assert.h <34:47 34:55>]
REFERENCE_MACRO_USAGE assert.h -> __FILE__ [assert.h <34:57 34:64>]
REFERENCE_MACRO_USAGE assert.h -> __LINE__ [assert.h <34:79 34:86>]
REFERENCE_MACRO_USAGE b2PolygonAndCircleContact.cpp -> b2Assert [b2PolygonAndCircleContact.cpp <41:2 41:9>]
SYMBOL_METHOD public static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) [b2PolygonAndCircleContact.cpp <25:1 <25:39 25:44> 29:1>]
SYMBOL_CLASS b2PolygonAndCircleContact
QUALIFIER: b2PolygonAndCircleContact [b2PolygonAndCircleContact.cpp <25:12 25:36>]
REFERENCE_TYPE_USAGE static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Contact [b2PolygonAndCircleContact.cpp <25:1 25:9>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<25:57> [b2PolygonAndCircleContact.cpp <25:57 25:64>]
REFERENCE_TYPE_USAGE static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Fixture [b2PolygonAndCircleContact.cpp <25:46 25:54>]
REFERENCE_TYPE_USAGE static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> int32 [b2PolygonAndCircleContact.cpp <25:67 25:71>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<25:85> [b2PolygonAndCircleContact.cpp <25:85 25:92>]
REFERENCE_TYPE_USAGE static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2Fixture [b2PolygonAndCircleContact.cpp <25:74 25:82>]
REFERENCE_TYPE_USAGE static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> int32 [b2PolygonAndCircleContact.cpp <25:95 25:99>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<25:120> [b2PolygonAndCircleContact.cpp <25:120 25:128>]
REFERENCE_TYPE_USAGE static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2BlockAllocator [b2PolygonAndCircleContact.cpp <25:102 25:117>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<27:8> [b2PolygonAndCircleContact.cpp <27:8 27:10>]
SYMBOL_BUILTIN_TYPE void
REFERENCE_TYPE_USAGE static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> void [b2PolygonAndCircleContact.cpp <27:2 27:5>]
SYMBOL_FUNCTION void * b2BlockAllocator::Allocate(int32)
REFERENCE_CALL static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> void * b2BlockAllocator::Allocate(int32) [b2PolygonAndCircleContact.cpp <27:25 27:32>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<25:120> [b2PolygonAndCircleContact.cpp <27:14 27:22>]
REFERENCE_TYPE_USAGE static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2PolygonAndCircleContact [b2PolygonAndCircleContact.cpp <27:41 27:65>]
REFERENCE_TYPE_USAGE static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> b2PolygonAndCircleContact [b2PolygonAndCircleContact.cpp <28:19 28:43>]
SYMBOL_FUNCTION void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *)
REFERENCE_CALL static b2Contact * b2PolygonAndCircleContact::Create(b2Fixture *, int32, b2Fixture *, int32, b2BlockAllocator *) -> void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) [b2PolygonAndCircleContact.cpp <28:19 28:43>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<25:57> [b2PolygonAndCircleContact.cpp <28:45 28:52>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<25:85> [b2PolygonAndCircleContact.cpp <28:55 28:62>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<27:8> [b2PolygonAndCircleContact.cpp <28:14 28:16>]
SYMBOL_METHOD public static void b2PolygonAndCircleContact::Destroy(b2Contact *, b2BlockAllocator *) [b2PolygonAndCircleContact.cpp <31:1 <31:33 31:39> 35:1>]
QUALIFIER: b2PolygonAndCircleContact [b2PolygonAndCircleContact.cpp <31:6 31:30>]
REFERENCE_TYPE_USAGE static void b2PolygonAndCircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> void [b2PolygonAndCircleContact.cpp <31:1 31:4>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<31:52> [b2PolygonAndCircleContact.cpp <31:52 31:58>]
REFERENCE_TYPE_USAGE static void b2PolygonAndCircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> b2Contact [b2PolygonAndCircleContact.cpp <31:41 31:49>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<31:79> [b2PolygonAndCircleContact.cpp <31:79 31:87>]
REFERENCE_TYPE_USAGE static void b2PolygonAndCircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> b2BlockAllocator [b2PolygonAndCircleContact.cpp <31:61 31:76>]
SYMBOL_FUNCTION void b2PolygonAndCircleContact::~b2PolygonAndCircleContact()
REFERENCE_CALL static void b2PolygonAndCircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> void b2PolygonAndCircleContact::~b2PolygonAndCircleContact() [b2PolygonAndCircleContact.cpp <33:41 33:41>]
REFERENCE_TYPE_USAGE static void b2PolygonAndCircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> b2PolygonAndCircleContact [b2PolygonAndCircleContact.cpp <33:4 33:28>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<31:52> [b2PolygonAndCircleContact.cpp <33:31 33:37>]
SYMBOL_FUNCTION void b2BlockAllocator::Free(void *, int32)
REFERENCE_CALL static void b2PolygonAndCircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> void b2BlockAllocator::Free(void *, int32) [b2PolygonAndCircleContact.cpp <34:13 34:16>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<31:79> [b2PolygonAndCircleContact.cpp <34:2 34:10>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<31:52> [b2PolygonAndCircleContact.cpp <34:18 34:24>]
REFERENCE_TYPE_USAGE static void b2PolygonAndCircleContact::Destroy(b2Contact *, b2BlockAllocator *) -> b2PolygonAndCircleContact [b2PolygonAndCircleContact.cpp <34:34 34:58>]
SYMBOL_METHOD public void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) [b2PolygonAndCircleContact.cpp <37:1 <37:28 37:52> 42:1>]
QUALIFIER: b2PolygonAndCircleContact [b2PolygonAndCircleContact.cpp <37:1 37:25>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<37:65> [b2PolygonAndCircleContact.cpp <37:65 37:72>]
REFERENCE_TYPE_USAGE void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) -> b2Fixture [b2PolygonAndCircleContact.cpp <37:54 37:62>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<37:86> [b2PolygonAndCircleContact.cpp <37:86 37:93>]
REFERENCE_TYPE_USAGE void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) -> b2Fixture [b2PolygonAndCircleContact.cpp <37:75 37:83>]
REFERENCE_TYPE_USAGE void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) -> b2Contact [b2PolygonAndCircleContact.cpp <38:3 38:11>]
SYMBOL_FUNCTION void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32)
REFERENCE_CALL void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) -> void b2Contact::b2Contact(b2Fixture *, int32, b2Fixture *, int32) [b2PolygonAndCircleContact.cpp <38:3 38:11>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<37:65> [b2PolygonAndCircleContact.cpp <38:13 38:20>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<37:86> [b2PolygonAndCircleContact.cpp <38:26 38:33>]
SYMBOL_FUNCTION b2Shape::Type b2Fixture::GetType() const
REFERENCE_CALL void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) -> b2Shape::Type b2Fixture::GetType() const [b2PolygonAndCircleContact.cpp <40:23 40:29>]
REFERENCE_USAGE void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) -> b2Fixture * b2Contact::m_fixtureA [b2PolygonAndCircleContact.cpp <40:11 40:20>]
REFERENCE_USAGE void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) -> b2Shape::Type::e_polygon [b2PolygonAndCircleContact.cpp <40:45 40:53>]
SYMBOL_CLASS b2Shape
QUALIFIER: b2Shape [b2PolygonAndCircleContact.cpp <40:36 40:42>]
REFERENCE_CALL void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) -> b2Shape::Type b2Fixture::GetType() const [b2PolygonAndCircleContact.cpp <41:23 41:29>]
REFERENCE_USAGE void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) -> b2Fixture * b2Contact::m_fixtureB [b2PolygonAndCircleContact.cpp <41:11 41:20>]
REFERENCE_USAGE void b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture *, b2Fixture *) -> b2Shape::Type::e_circle [b2PolygonAndCircleContact.cpp <41:45 41:52>]
QUALIFIER: b2Shape [b2PolygonAndCircleContact.cpp <41:36 41:42>]
SYMBOL_METHOD public void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) [b2PolygonAndCircleContact.cpp <44:1 <44:33 44:40> 49:1>]
SYMBOL_FUNCTION void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &)
REFERENCE_OVERRIDE void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> void b2Contact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) [b2PolygonAndCircleContact.cpp <44:33 44:40>]
QUALIFIER: b2PolygonAndCircleContact [b2PolygonAndCircleContact.cpp <44:6 44:30>]
REFERENCE_TYPE_USAGE void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> void [b2PolygonAndCircleContact.cpp <44:1 44:4>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<44:54> [b2PolygonAndCircleContact.cpp <44:54 44:61>]
REFERENCE_TYPE_USAGE void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Manifold [b2PolygonAndCircleContact.cpp <44:42 44:51>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<44:83> [b2PolygonAndCircleContact.cpp <44:83 44:85>]
REFERENCE_TYPE_USAGE void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Transform [b2PolygonAndCircleContact.cpp <44:70 44:80>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<44:107> [b2PolygonAndCircleContact.cpp <44:107 44:109>]
REFERENCE_TYPE_USAGE void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Transform [b2PolygonAndCircleContact.cpp <44:94 44:104>]
SYMBOL_FUNCTION void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &)
REFERENCE_CALL void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> void b2CollidePolygonAndCircle(b2Manifold *, const b2PolygonShape *, const b2Transform &, const b2CircleShape *, const b2Transform &) [b2PolygonAndCircleContact.cpp <46:2 46:26>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<44:54> [b2PolygonAndCircleContact.cpp <46:29 46:36>]
REFERENCE_TYPE_USAGE void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2PolygonShape [b2PolygonAndCircleContact.cpp <47:10 47:23>]
SYMBOL_FUNCTION b2Shape * b2Fixture::GetShape()
REFERENCE_CALL void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Shape * b2Fixture::GetShape() [b2PolygonAndCircleContact.cpp <47:38 47:45>]
REFERENCE_USAGE void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Fixture * b2Contact::m_fixtureA [b2PolygonAndCircleContact.cpp <47:26 47:35>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<44:83> [b2PolygonAndCircleContact.cpp <47:50 47:52>]
REFERENCE_TYPE_USAGE void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2CircleShape [b2PolygonAndCircleContact.cpp <48:10 48:22>]
REFERENCE_CALL void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Shape * b2Fixture::GetShape() [b2PolygonAndCircleContact.cpp <48:37 48:44>]
REFERENCE_USAGE void b2PolygonAndCircleContact::Evaluate(b2Manifold *, const b2Transform &, const b2Transform &) -> b2Fixture * b2Contact::m_fixtureB [b2PolygonAndCircleContact.cpp <48:25 48:34>]
LOCAL_SYMBOL: b2PolygonAndCircleContact.cpp<44:107> [b2PolygonAndCircleContact.cpp <48:49 48:51>]
