FILE: LazyType.java
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.typesystem [ <1:50 1:59>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <1:44 1:48>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <3:43 3:47>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model
QUALIFIER: com.github.javaparser.symbolsolver [ <1:31 1:42>]
QUALIFIER: com.github.javaparser.symbolsolver [ <3:30 3:41>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver
QUALIFIER: com.github.javaparser [ <1:20 1:29>]
QUALIFIER: com.github.javaparser [ <3:19 3:28>]
SYMBOL_PACKAGE: com.github.javaparser
QUALIFIER: com.github [ <1:13 1:18>]
QUALIFIER: com.github [ <3:12 3:17>]
SYMBOL_PACKAGE: com.github
QUALIFIER: com [ <1:9 1:11>]
QUALIFIER: com [ <3:8 3:10>]
SYMBOL_PACKAGE: com
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations [ <3:49 3:60>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.declarations
QUALIFIER: java.util [ <5:13 5:16>]
QUALIFIER: java.util [ <6:13 6:16>]
SYMBOL_PACKAGE: java.util
QUALIFIER: java [ <5:8 5:11>]
QUALIFIER: java [ <6:8 6:11>]
SYMBOL_PACKAGE: java
QUALIFIER: java.util.function [ <6:18 6:25>]
SYMBOL_PACKAGE: java.util.function
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.LazyType [ <13:9 13:12>]
SYMBOL_CLASS: public com.github.javaparser.symbolsolver.model.typesystem.LazyType [ <8:1 <8:14 8:21> 117:1>]
SYMBOL_FIELD: private com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.concrete [ <9:18 9:25>]
SYMBOL_FIELD: private java.util.function.Function<java.lang.Void, com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.model.typesystem.LazyType.provider [ <10:34 10:41>]
SYMBOL_PACKAGE: java.lang
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.LazyType.LazyType(java.util.function.Function<java.lang.Void, com.github.javaparser.symbolsolver.model.typesystem.Type>) [ <12:5 <12:5 <12:12 12:19> 12:50> 14:5>]
SYMBOL_METHOD: private com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <16:5 <16:5 <16:18 16:24> 16:26> 21:5>]
SYMBOL_METHOD: java.util.function.Function<T, R>.R java.util.function.Function<T, R>.apply(java.util.function.Function<T, R>.T)
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isArray() [ <23:5 <23:5 <24:20 24:26> 24:28> 26:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray()
SYMBOL_BUILTIN_TYPE: boolean
SYMBOL_METHOD: public int com.github.javaparser.symbolsolver.model.typesystem.LazyType.arrayLevel() [ <28:5 <28:5 <29:16 29:25> 29:27> 31:5>]
SYMBOL_METHOD: int com.github.javaparser.symbolsolver.model.typesystem.Type.arrayLevel()
SYMBOL_BUILTIN_TYPE: int
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isPrimitive() [ <33:5 <33:5 <34:20 34:30> 34:32> 36:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isNull() [ <38:5 <38:5 <39:20 39:25> 39:27> 41:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isNull()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReference() [ <43:5 <43:5 <44:20 44:30> 44:32> 46:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReference()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReferenceType() [ <48:5 <48:5 <49:20 49:34> 49:36> 51:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isVoid() [ <53:5 <53:5 <54:20 54:25> 54:27> 56:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isVoid()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isTypeVariable() [ <58:5 <58:5 <59:20 59:33> 59:35> 61:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isTypeVariable()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isWildcard() [ <63:5 <63:5 <64:20 64:29> 64:31> 66:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isWildcard()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asArrayType() [ <68:5 <68:5 <69:22 69:32> 69:34> 71:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asReferenceType() [ <73:5 <73:5 <74:26 74:40> 74:42> 76:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeParameter() [ <78:5 <78:5 <79:37 79:51> 79:53> 81:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.TypeVariable com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeVariable() [ <83:5 <83:5 <84:25 84:38> 84:40> 86:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.TypeVariable com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeVariable()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asPrimitive() [ <88:5 <88:5 <89:26 89:36> 89:38> 91:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.Type.asPrimitive()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.LazyType.asWildcard() [ <93:5 <93:5 <94:21 94:30> 94:32> 96:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard()
SYMBOL_METHOD: public java.lang.String com.github.javaparser.symbolsolver.model.typesystem.LazyType.describe() [ <98:5 <98:5 <99:19 99:26> 99:28> 101:5>]
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.typesystem.Type.describe()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) [ <103:5 <103:5 <104:17 104:36> 104:131> 106:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <108:5 <108:5 <109:17 109:36> 109:80> 111:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <113:5 <113:5 <114:20 114:33> 114:45> 116:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
REFERENCE_IMPORT: LazyType.java -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <3:62 3:85>]
REFERENCE_IMPORT: LazyType.java -> java.util.Map<K, V> [ <5:18 5:20>]
REFERENCE_IMPORT: LazyType.java -> java.util.function.Function<T, R> [ <6:27 6:34>]
REFERENCE_INHERITANCE: com.github.javaparser.symbolsolver.model.typesystem.LazyType -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <8:34 8:37>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.concrete -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <9:13 9:16>]
REFERENCE_TYPE_ARGUMENT: java.util.function.Function<T, R> -> java.lang.Void [ <10:22 10:25>]
REFERENCE_TYPE_ARGUMENT: java.util.function.Function<T, R> -> java.lang.Void [ <12:30 12:33>]
REFERENCE_TYPE_ARGUMENT: java.util.function.Function<T, R> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <10:28 10:31>]
REFERENCE_TYPE_ARGUMENT: java.util.function.Function<T, R> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <12:36 12:39>]
REFERENCE_TYPE_USAGE: java.util.function.Function<java.lang.Void, com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.model.typesystem.LazyType.provider -> java.util.function.Function<T, R> [ <10:13 10:20>]
REFERENCE_TYPE_USAGE: java.util.function.Function<java.lang.Void, com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.model.typesystem.LazyType.provider -> java.lang.Void [ <10:22 10:25>]
REFERENCE_TYPE_USAGE: java.util.function.Function<java.lang.Void, com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.model.typesystem.LazyType.provider -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <10:28 10:31>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.LazyType.LazyType(java.util.function.Function<java.lang.Void, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.function.Function<T, R> [ <12:21 12:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.LazyType.LazyType(java.util.function.Function<java.lang.Void, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.lang.Void [ <12:30 12:33>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.LazyType.LazyType(java.util.function.Function<java.lang.Void, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <12:36 12:39>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.LazyType.LazyType(java.util.function.Function<java.lang.Void, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.function.Function<java.lang.Void, com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.model.typesystem.LazyType.provider [ <13:14 13:21>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <16:13 16:16>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.concrete [ <17:13 17:20>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.concrete [ <18:13 18:20>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.concrete [ <20:16 20:23>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() -> java.util.function.Function<T, R>.R java.util.function.Function<T, R>.apply(java.util.function.Function<T, R>.T) [ <18:33 18:37>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() -> java.util.function.Function<java.lang.Void, com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.model.typesystem.LazyType.provider [ <18:24 18:31>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isArray() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray() [ <24:20 24:26>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isArray() -> java.lang.Override [ <23:6 23:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isArray() -> boolean [ <24:12 24:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isArray() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray() [ <25:26 25:32>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isArray() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <25:16 25:22>]
REFERENCE_OVERRIDE: int com.github.javaparser.symbolsolver.model.typesystem.LazyType.arrayLevel() -> int com.github.javaparser.symbolsolver.model.typesystem.Type.arrayLevel() [ <29:16 29:25>]
REFERENCE_ANNOTATION_USAGE: int com.github.javaparser.symbolsolver.model.typesystem.LazyType.arrayLevel() -> java.lang.Override [ <28:6 28:13>]
REFERENCE_TYPE_USAGE: int com.github.javaparser.symbolsolver.model.typesystem.LazyType.arrayLevel() -> int [ <29:12 29:14>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.model.typesystem.LazyType.arrayLevel() -> int com.github.javaparser.symbolsolver.model.typesystem.Type.arrayLevel() [ <30:26 30:35>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.model.typesystem.LazyType.arrayLevel() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <30:16 30:22>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isPrimitive() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive() [ <34:20 34:30>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isPrimitive() -> java.lang.Override [ <33:6 33:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isPrimitive() -> boolean [ <34:12 34:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isPrimitive() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive() [ <35:26 35:36>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isPrimitive() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <35:16 35:22>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isNull() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isNull() [ <39:20 39:25>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isNull() -> java.lang.Override [ <38:6 38:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isNull() -> boolean [ <39:12 39:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isNull() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isNull() [ <40:26 40:31>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isNull() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <40:16 40:22>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReference() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReference() [ <44:20 44:30>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReference() -> java.lang.Override [ <43:6 43:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReference() -> boolean [ <44:12 44:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReference() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReference() [ <45:26 45:36>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReference() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <45:16 45:22>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReferenceType() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType() [ <49:20 49:34>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReferenceType() -> java.lang.Override [ <48:6 48:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReferenceType() -> boolean [ <49:12 49:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReferenceType() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType() [ <50:26 50:40>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isReferenceType() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <50:16 50:22>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isVoid() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isVoid() [ <54:20 54:25>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isVoid() -> java.lang.Override [ <53:6 53:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isVoid() -> boolean [ <54:12 54:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isVoid() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isVoid() [ <55:26 55:31>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isVoid() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <55:16 55:22>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isTypeVariable() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isTypeVariable() [ <59:20 59:33>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isTypeVariable() -> java.lang.Override [ <58:6 58:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isTypeVariable() -> boolean [ <59:12 59:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isTypeVariable() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isTypeVariable() [ <60:26 60:39>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isTypeVariable() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <60:16 60:22>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isWildcard() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isWildcard() [ <64:20 64:29>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isWildcard() -> java.lang.Override [ <63:6 63:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isWildcard() -> boolean [ <64:12 64:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isWildcard() -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray() [ <65:26 65:32>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isWildcard() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <65:16 65:22>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asArrayType() -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType() [ <69:22 69:32>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asArrayType() -> java.lang.Override [ <68:6 68:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asArrayType() -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType [ <69:12 69:20>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asArrayType() -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType() [ <70:26 70:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asArrayType() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <70:16 70:22>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asReferenceType() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ <74:26 74:40>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asReferenceType() -> java.lang.Override [ <73:6 73:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asReferenceType() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <74:12 74:24>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asReferenceType() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ <75:26 75:40>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asReferenceType() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <75:16 75:22>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeParameter() -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter() [ <79:37 79:51>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeParameter() -> java.lang.Override [ <78:6 78:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeParameter() -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <79:12 79:35>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeParameter() -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter() [ <80:26 80:40>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeParameter() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <80:16 80:22>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.TypeVariable com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeVariable() -> com.github.javaparser.symbolsolver.model.typesystem.TypeVariable com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeVariable() [ <84:25 84:38>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.TypeVariable com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeVariable() -> java.lang.Override [ <83:6 83:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.TypeVariable com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeVariable() -> com.github.javaparser.symbolsolver.model.typesystem.TypeVariable [ <84:12 84:23>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.TypeVariable com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeVariable() -> com.github.javaparser.symbolsolver.model.typesystem.TypeVariable com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeVariable() [ <85:26 85:39>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.TypeVariable com.github.javaparser.symbolsolver.model.typesystem.LazyType.asTypeVariable() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <85:16 85:22>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asPrimitive() -> com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.Type.asPrimitive() [ <89:26 89:36>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asPrimitive() -> java.lang.Override [ <88:6 88:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asPrimitive() -> com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType [ <89:12 89:24>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asPrimitive() -> com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.Type.asPrimitive() [ <90:26 90:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.LazyType.asPrimitive() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <90:16 90:22>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.LazyType.asWildcard() -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <94:21 94:30>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.LazyType.asWildcard() -> java.lang.Override [ <93:6 93:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.LazyType.asWildcard() -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard [ <94:12 94:19>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.LazyType.asWildcard() -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <95:26 95:35>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.LazyType.asWildcard() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <95:16 95:22>]
REFERENCE_OVERRIDE: java.lang.String com.github.javaparser.symbolsolver.model.typesystem.LazyType.describe() -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.Type.describe() [ <99:19 99:26>]
REFERENCE_ANNOTATION_USAGE: java.lang.String com.github.javaparser.symbolsolver.model.typesystem.LazyType.describe() -> java.lang.Override [ <98:6 98:13>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.model.typesystem.LazyType.describe() -> java.lang.String [ <99:12 99:17>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.model.typesystem.LazyType.describe() -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.Type.describe() [ <100:26 100:33>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.model.typesystem.LazyType.describe() -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <100:16 100:22>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) [ <104:17 104:36>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.lang.Override [ <103:6 103:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <104:12 104:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <104:67 104:70>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <104:112 104:115>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <104:38 104:61>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <104:86 104:109>]
REFERENCE_TYPE_ARGUMENT: java.util.Map<K, V> -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <104:86 104:109>]
REFERENCE_TYPE_ARGUMENT: java.util.Map<K, V> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <104:112 104:115>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.Map<K, V> [ <104:82 104:84>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) [ <105:26 105:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <105:16 105:22>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <109:17 109:36>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.Override [ <108:6 108:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <109:12 109:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <109:67 109:70>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <109:38 109:61>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <110:26 110:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <110:16 110:22>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <114:20 114:33>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.Override [ <113:6 113:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean [ <114:12 114:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <114:35 114:38>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <115:26 115:39>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.typesystem.LazyType.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType() [ <115:16 115:22>]
LOCAL_SYMBOL: LazyType.java<104:133> [ <104:133 104:133>]
LOCAL_SYMBOL: LazyType.java<104:133> [ <106:5 106:5>]
LOCAL_SYMBOL: LazyType.java<109:82> [ <109:82 109:82>]
LOCAL_SYMBOL: LazyType.java<109:82> [ <111:5 111:5>]
LOCAL_SYMBOL: LazyType.java<114:47> [ <114:47 114:47>]
LOCAL_SYMBOL: LazyType.java<114:47> [ <116:5 116:5>]
LOCAL_SYMBOL: LazyType.java<12:52> [ <12:52 12:52>]
LOCAL_SYMBOL: LazyType.java<12:52> [ <14:5 14:5>]
LOCAL_SYMBOL: LazyType.java<16:28> [ <16:28 16:28>]
LOCAL_SYMBOL: LazyType.java<16:28> [ <21:5 21:5>]
LOCAL_SYMBOL: LazyType.java<17:31> [ <17:31 17:31>]
LOCAL_SYMBOL: LazyType.java<17:31> [ <19:9 19:9>]
LOCAL_SYMBOL: LazyType.java<24:30> [ <24:30 24:30>]
LOCAL_SYMBOL: LazyType.java<24:30> [ <26:5 26:5>]
LOCAL_SYMBOL: LazyType.java<29:29> [ <29:29 29:29>]
LOCAL_SYMBOL: LazyType.java<29:29> [ <31:5 31:5>]
LOCAL_SYMBOL: LazyType.java<34:34> [ <34:34 34:34>]
LOCAL_SYMBOL: LazyType.java<34:34> [ <36:5 36:5>]
LOCAL_SYMBOL: LazyType.java<39:29> [ <39:29 39:29>]
LOCAL_SYMBOL: LazyType.java<39:29> [ <41:5 41:5>]
LOCAL_SYMBOL: LazyType.java<44:34> [ <44:34 44:34>]
LOCAL_SYMBOL: LazyType.java<44:34> [ <46:5 46:5>]
LOCAL_SYMBOL: LazyType.java<49:38> [ <49:38 49:38>]
LOCAL_SYMBOL: LazyType.java<49:38> [ <51:5 51:5>]
LOCAL_SYMBOL: LazyType.java<54:29> [ <54:29 54:29>]
LOCAL_SYMBOL: LazyType.java<54:29> [ <56:5 56:5>]
LOCAL_SYMBOL: LazyType.java<59:37> [ <59:37 59:37>]
LOCAL_SYMBOL: LazyType.java<59:37> [ <61:5 61:5>]
LOCAL_SYMBOL: LazyType.java<64:33> [ <64:33 64:33>]
LOCAL_SYMBOL: LazyType.java<64:33> [ <66:5 66:5>]
LOCAL_SYMBOL: LazyType.java<69:36> [ <69:36 69:36>]
LOCAL_SYMBOL: LazyType.java<69:36> [ <71:5 71:5>]
LOCAL_SYMBOL: LazyType.java<74:44> [ <74:44 74:44>]
LOCAL_SYMBOL: LazyType.java<74:44> [ <76:5 76:5>]
LOCAL_SYMBOL: LazyType.java<79:55> [ <79:55 79:55>]
LOCAL_SYMBOL: LazyType.java<79:55> [ <81:5 81:5>]
LOCAL_SYMBOL: LazyType.java<84:42> [ <84:42 84:42>]
LOCAL_SYMBOL: LazyType.java<84:42> [ <86:5 86:5>]
LOCAL_SYMBOL: LazyType.java<89:40> [ <89:40 89:40>]
LOCAL_SYMBOL: LazyType.java<89:40> [ <91:5 91:5>]
LOCAL_SYMBOL: LazyType.java<8:39> [ <8:39 8:39>]
LOCAL_SYMBOL: LazyType.java<8:39> [ <117:1 117:1>]
LOCAL_SYMBOL: LazyType.java<94:34> [ <94:34 94:34>]
LOCAL_SYMBOL: LazyType.java<94:34> [ <96:5 96:5>]
LOCAL_SYMBOL: LazyType.java<99:30> [ <99:30 99:30>]
LOCAL_SYMBOL: LazyType.java<99:30> [ <101:5 101:5>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.LazyType<0> [ <12:42 12:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.LazyType<0> [ <13:25 13:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.isAssignableBy<0> [ <114:40 114:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.isAssignableBy<0> [ <115:41 115:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables<0> [ <104:63 104:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables<0> [ <105:47 105:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables<0> [ <109:63 109:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables<0> [ <110:47 110:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables<1> [ <104:72 104:79>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables<1> [ <105:51 105:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables<1> [ <109:72 109:79>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables<1> [ <110:51 110:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables<2> [ <104:118 104:130>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.LazyType.replaceTypeVariables<2> [ <105:61 105:73>]
