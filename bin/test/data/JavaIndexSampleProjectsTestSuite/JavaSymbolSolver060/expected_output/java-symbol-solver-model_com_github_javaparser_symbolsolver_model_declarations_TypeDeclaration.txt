FILE: TypeDeclaration.java
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.declarations [ <17:50 17:61>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <17:44 17:48>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <19:43 19:47>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model
QUALIFIER: com.github.javaparser.symbolsolver [ <17:31 17:42>]
QUALIFIER: com.github.javaparser.symbolsolver [ <19:30 19:41>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver
QUALIFIER: com.github.javaparser [ <17:20 17:29>]
QUALIFIER: com.github.javaparser [ <19:19 19:28>]
SYMBOL_PACKAGE: com.github.javaparser
QUALIFIER: com.github [ <17:13 17:18>]
QUALIFIER: com.github [ <19:12 19:17>]
SYMBOL_PACKAGE: com.github
QUALIFIER: com [ <17:9 17:11>]
QUALIFIER: com [ <19:8 19:10>]
SYMBOL_PACKAGE: com
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ <19:49 19:58>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.resolution
QUALIFIER: java.util [ <21:13 21:16>]
QUALIFIER: java.util [ <22:13 22:16>]
SYMBOL_PACKAGE: java.util
QUALIFIER: java [ <21:8 21:11>]
QUALIFIER: java [ <22:8 22:11>]
SYMBOL_PACKAGE: java
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <40:86 40:89>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <49:17 49:20>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <59:16 59:19>]
SYMBOL_INTERFACE: public com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <30:1 <30:18 30:32> 171:1>]
SYMBOL_METHOD: default java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes() [ <39:1 <39:1 <39:43 39:55> 39:57> 41:5>]
SYMBOL_METHOD: java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)
SYMBOL_PACKAGE: java.lang
SYMBOL_METHOD: java.lang.String java.lang.Class<T>.getCanonicalName()
SYMBOL_METHOD: java.lang.Class<?> java.lang.Object.getClass()
SYMBOL_METHOD: default com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) [ <47:1 <47:1 <47:38 47:52> 47:65> 52:5>]
QUALIFIER: java.lang.String [ <116:49 116:54>]
QUALIFIER: java.lang.String [ <123:49 123:54>]
QUALIFIER: java.lang.String [ <130:49 130:54>]
QUALIFIER: java.lang.String [ <137:49 137:54>]
QUALIFIER: java.lang.String [ <141:49 141:54>]
QUALIFIER: java.lang.String [ <166:20 166:25>]
SYMBOL_METHOD: java.util.Optional<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.findFirst()
SYMBOL_METHOD: java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>)
SYMBOL_METHOD: java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream()
SYMBOL_METHOD: boolean java.lang.String.equals(java.lang.Object)
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
SYMBOL_METHOD: java.util.Optional<T>.T java.util.Optional<T>.orElseThrow<X>(java.util.function.Supplier<? extends X>)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.resolution.UnsolvedSymbolException.UnsolvedSymbolException(java.lang.String)
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType(java.lang.String) [ <58:1 <58:1 <58:21 58:35> 58:48> 60:5>]
SYMBOL_BUILTIN_TYPE: boolean
SYMBOL_METHOD: boolean java.util.stream.Stream<T>.anyMatch(java.util.function.Predicate<? super T>)
SYMBOL_METHOD: default java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType() [ <67:1 <67:1 <67:40 67:52> 67:54> 67:55>]
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isClass() [ <77:1 <77:1 <77:21 77:27> 77:29> 79:5>]
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isInterface() [ <84:1 <84:1 <84:21 84:31> 84:33> 86:5>]
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isEnum() [ <91:1 <91:1 <91:21 91:26> 91:28> 93:5>]
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isTypeParameter() [ <98:1 <98:1 <98:21 98:35> 98:37> 100:5>]
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isType() [ <102:5 <102:5 <103:21 103:26> 103:28> 105:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.Declaration.isType()
SYMBOL_METHOD: default com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asType() [ <107:5 <107:5 <108:29 108:34> 108:36> 110:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration com.github.javaparser.symbolsolver.model.declarations.Declaration.asType()
SYMBOL_METHOD: default com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asClass() [ <115:1 <115:1 <115:30 115:36> 115:38> 117:5>]
SYMBOL_METHOD: static java.lang.String java.lang.String.format(java.lang.String, java.lang.Object)
SYMBOL_METHOD: default com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asInterface() [ <122:1 <122:1 <122:34 122:44> 122:46> 124:5>]
SYMBOL_METHOD: default com.github.javaparser.symbolsolver.model.declarations.EnumDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asEnum() [ <129:1 <129:1 <129:29 129:34> 129:36> 131:5>]
SYMBOL_METHOD: default com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asTypeParameter() [ <136:1 <136:1 <136:38 136:52> 136:54> 138:5>]
SYMBOL_METHOD: default com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asReferenceType() [ <140:5 <140:5 <140:38 140:52> 140:54> 142:5>]
SYMBOL_METHOD: default java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getPackageName() [ <147:1 <147:1 <147:12 147:25> 147:27> 147:28>]
SYMBOL_METHOD: default java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getClassName() [ <152:1 <152:1 <152:12 152:23> 152:25> 152:26>]
SYMBOL_METHOD: default java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ <157:1 <157:1 <157:12 157:27> 157:29> 157:30>]
SYMBOL_METHOD: default java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId() [ <163:1 <163:1 <163:20 163:24> 163:26> 169:5>]
REFERENCE_IMPORT: TypeDeclaration.java -> com.github.javaparser.symbolsolver.model.resolution.UnsolvedSymbolException [ <19:60 19:82>]
REFERENCE_IMPORT: TypeDeclaration.java -> java.util.Optional<T> [ <21:18 21:25>]
REFERENCE_IMPORT: TypeDeclaration.java -> java.util.Set<E> [ <22:18 22:20>]
REFERENCE_INHERITANCE: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration -> com.github.javaparser.symbolsolver.model.declarations.Declaration [ <30:42 30:52>]
REFERENCE_TYPE_ARGUMENT: java.util.Set<E> -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <39:17 39:40>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes() -> java.util.Set<E> [ <39:13 39:15>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes() -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <39:17 39:40>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes() -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <40:19 40:47>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes() -> java.lang.UnsupportedOperationException [ <40:19 40:47>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes() -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <40:102 40:117>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes() -> java.lang.Class<?> java.lang.Object.getClass() [ <40:91 40:98>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <47:13 47:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <48:18 48:41>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> java.lang.String [ <47:54 47:59>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <48:18 48:41>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <67:14 67:37>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> java.util.Optional<T> [ <48:9 48:16>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> java.util.Optional<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.findFirst() [ <49:85 49:93>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <49:47 49:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <49:38 49:43>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes() [ <49:22 49:34>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> boolean java.lang.String.equals(java.lang.Object) [ <49:71 49:76>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName() [ <49:61 49:67>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> java.util.Optional<T>.T java.util.Optional<T>.orElseThrow<X>(java.util.function.Supplier<? extends X>) [ <50:21 50:31>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> com.github.javaparser.symbolsolver.model.resolution.UnsolvedSymbolException.UnsolvedSymbolException(java.lang.String) [ <51:21 51:43>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) -> com.github.javaparser.symbolsolver.model.resolution.UnsolvedSymbolException [ <51:21 51:43>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType(java.lang.String) -> boolean [ <58:13 58:19>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType(java.lang.String) -> java.lang.String [ <58:37 58:42>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType(java.lang.String) -> boolean java.util.stream.Stream<T>.anyMatch(java.util.function.Predicate<? super T>) [ <59:46 59:53>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType(java.lang.String) -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <59:37 59:42>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType(java.lang.String) -> java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes() [ <59:21 59:33>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType(java.lang.String) -> boolean java.lang.String.equals(java.lang.Object) [ <59:72 59:77>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType(java.lang.String) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName() [ <59:62 59:68>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType() -> java.util.Optional<T> [ <67:5 67:12>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType() -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <67:14 67:37>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isClass() -> boolean [ <77:13 77:19>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isInterface() -> boolean [ <84:13 84:19>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isEnum() -> boolean [ <91:13 91:19>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isTypeParameter() -> boolean [ <98:13 98:19>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isType() -> boolean com.github.javaparser.symbolsolver.model.declarations.Declaration.isType() [ <103:21 103:26>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isType() -> java.lang.Override [ <102:6 102:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isType() -> boolean [ <103:13 103:19>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asType() -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration com.github.javaparser.symbolsolver.model.declarations.Declaration.asType() [ <108:29 108:34>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asType() -> java.lang.Override [ <107:6 107:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asType() -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <108:13 108:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asClass() -> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration [ <115:13 115:28>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asClass() -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <116:19 116:47>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asClass() -> java.lang.UnsupportedOperationException [ <116:19 116:47>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asClass() -> static java.lang.String java.lang.String.format(java.lang.String, java.lang.Object) [ <116:56 116:61>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asInterface() -> com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration [ <122:13 122:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asInterface() -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <123:19 123:47>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asInterface() -> java.lang.UnsupportedOperationException [ <123:19 123:47>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asInterface() -> static java.lang.String java.lang.String.format(java.lang.String, java.lang.Object) [ <123:56 123:61>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.EnumDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asEnum() -> com.github.javaparser.symbolsolver.model.declarations.EnumDeclaration [ <129:13 129:27>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.EnumDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asEnum() -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <130:19 130:47>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.EnumDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asEnum() -> java.lang.UnsupportedOperationException [ <130:19 130:47>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.EnumDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asEnum() -> static java.lang.String java.lang.String.format(java.lang.String, java.lang.Object) [ <130:56 130:61>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asTypeParameter() -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <136:13 136:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asTypeParameter() -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <137:19 137:47>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asTypeParameter() -> java.lang.UnsupportedOperationException [ <137:19 137:47>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asTypeParameter() -> static java.lang.String java.lang.String.format(java.lang.String, java.lang.Object) [ <137:56 137:61>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asReferenceType() -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <140:13 140:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asReferenceType() -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <141:19 141:47>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asReferenceType() -> java.lang.UnsupportedOperationException [ <141:19 141:47>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asReferenceType() -> static java.lang.String java.lang.String.format(java.lang.String, java.lang.Object) [ <141:56 141:61>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getPackageName() -> java.lang.String [ <147:5 147:10>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getClassName() -> java.lang.String [ <152:5 152:10>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() -> java.lang.String [ <157:5 157:10>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId() -> java.lang.String [ <163:13 163:18>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId() -> java.lang.String [ <164:9 164:14>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ <164:24 164:39>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId() -> static java.lang.String java.lang.String.format(java.lang.String, java.lang.Object) [ <166:27 166:32>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName() [ <166:53 166:59>]
LOCAL_SYMBOL: TypeDeclaration.java<103:30> [ <103:30 103:30>]
LOCAL_SYMBOL: TypeDeclaration.java<103:30> [ <105:5 105:5>]
LOCAL_SYMBOL: TypeDeclaration.java<108:38> [ <108:38 108:38>]
LOCAL_SYMBOL: TypeDeclaration.java<108:38> [ <110:5 110:5>]
LOCAL_SYMBOL: TypeDeclaration.java<115:40> [ <115:40 115:40>]
LOCAL_SYMBOL: TypeDeclaration.java<115:40> [ <117:5 117:5>]
LOCAL_SYMBOL: TypeDeclaration.java<122:48> [ <122:48 122:48>]
LOCAL_SYMBOL: TypeDeclaration.java<122:48> [ <124:5 124:5>]
LOCAL_SYMBOL: TypeDeclaration.java<129:38> [ <129:38 129:38>]
LOCAL_SYMBOL: TypeDeclaration.java<129:38> [ <131:5 131:5>]
LOCAL_SYMBOL: TypeDeclaration.java<136:56> [ <136:56 136:56>]
LOCAL_SYMBOL: TypeDeclaration.java<136:56> [ <138:5 138:5>]
LOCAL_SYMBOL: TypeDeclaration.java<140:56> [ <140:56 140:56>]
LOCAL_SYMBOL: TypeDeclaration.java<140:56> [ <142:5 142:5>]
LOCAL_SYMBOL: TypeDeclaration.java<163:28> [ <163:28 163:28>]
LOCAL_SYMBOL: TypeDeclaration.java<163:28> [ <169:5 169:5>]
LOCAL_SYMBOL: TypeDeclaration.java<165:28> [ <165:28 165:28>]
LOCAL_SYMBOL: TypeDeclaration.java<165:28> [ <167:9 167:9>]
LOCAL_SYMBOL: TypeDeclaration.java<30:54> [ <30:54 30:54>]
LOCAL_SYMBOL: TypeDeclaration.java<30:54> [ <171:1 171:1>]
LOCAL_SYMBOL: TypeDeclaration.java<39:59> [ <39:59 39:59>]
LOCAL_SYMBOL: TypeDeclaration.java<39:59> [ <41:5 41:5>]
LOCAL_SYMBOL: TypeDeclaration.java<47:67> [ <47:67 47:67>]
LOCAL_SYMBOL: TypeDeclaration.java<47:67> [ <52:5 52:5>]
LOCAL_SYMBOL: TypeDeclaration.java<58:50> [ <58:50 58:50>]
LOCAL_SYMBOL: TypeDeclaration.java<58:50> [ <60:5 60:5>]
LOCAL_SYMBOL: TypeDeclaration.java<77:31> [ <77:31 77:31>]
LOCAL_SYMBOL: TypeDeclaration.java<77:31> [ <79:5 79:5>]
LOCAL_SYMBOL: TypeDeclaration.java<84:35> [ <84:35 84:35>]
LOCAL_SYMBOL: TypeDeclaration.java<84:35> [ <86:5 86:5>]
LOCAL_SYMBOL: TypeDeclaration.java<91:30> [ <91:30 91:30>]
LOCAL_SYMBOL: TypeDeclaration.java<91:30> [ <93:5 93:5>]
LOCAL_SYMBOL: TypeDeclaration.java<98:39> [ <98:39 98:39>]
LOCAL_SYMBOL: TypeDeclaration.java<98:39> [ <100:5 100:5>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId<0> [ <164:16 164:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId<0> [ <165:13 165:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId<0> [ <168:16 168:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType<0> [ <47:61 47:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType<0> [ <49:78 49:81>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType<0> [ <51:75 51:78>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType<1> [ <48:44 48:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType<1> [ <50:16 50:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType<0> [ <58:44 58:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType<0> [ <59:79 59:82>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<2> [ <59:55 59:55>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<2> [ <59:60 59:60>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<3> [ <49:54 49:54>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<3> [ <49:59 49:59>]
COMMENT: comment [ <1:1 15:3>]
COMMENT: comment [ <24:1 29:3>]
COMMENT: comment [ <32:5 32:7>]
COMMENT: comment [ <33:5 33:19>]
COMMENT: comment [ <34:5 34:7>]
COMMENT: comment [ <36:5 38:7>]
COMMENT: comment [ <43:5 46:7>]
COMMENT: comment [ <54:5 57:7>]
COMMENT: comment [ <62:5 66:7>]
COMMENT: comment [ <69:5 69:7>]
COMMENT: comment [ <70:5 70:12>]
COMMENT: comment [ <71:5 71:7>]
COMMENT: comment [ <73:5 76:7>]
COMMENT: comment [ <81:5 83:7>]
COMMENT: comment [ <88:5 90:7>]
COMMENT: comment [ <95:5 97:7>]
COMMENT: comment [ <112:5 114:7>]
COMMENT: comment [ <119:5 121:7>]
COMMENT: comment [ <126:5 128:7>]
COMMENT: comment [ <133:5 135:7>]
COMMENT: comment [ <144:5 146:7>]
COMMENT: comment [ <149:5 151:7>]
COMMENT: comment [ <154:5 156:7>]
COMMENT: comment [ <159:5 162:7>]
