FILE: ReflectionClassDeclaration.java
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel [ <31:43 31:57>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.reflectionmodel [ <17:44 17:58>]
QUALIFIER: com.github.javaparser.symbolsolver [ <17:31 17:42>]
QUALIFIER: com.github.javaparser.symbolsolver [ <20:30 20:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <21:30 21:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <22:30 22:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <23:30 23:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <24:30 24:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <25:30 25:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <26:30 26:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <27:30 27:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <28:30 28:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <29:30 29:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <30:30 30:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <31:30 31:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <32:30 32:41>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver
QUALIFIER: com.github.javaparser [ <17:20 17:29>]
QUALIFIER: com.github.javaparser [ <19:19 19:28>]
QUALIFIER: com.github.javaparser [ <20:19 20:28>]
QUALIFIER: com.github.javaparser [ <21:19 21:28>]
QUALIFIER: com.github.javaparser [ <22:19 22:28>]
QUALIFIER: com.github.javaparser [ <23:19 23:28>]
QUALIFIER: com.github.javaparser [ <24:19 24:28>]
QUALIFIER: com.github.javaparser [ <25:19 25:28>]
QUALIFIER: com.github.javaparser [ <26:19 26:28>]
QUALIFIER: com.github.javaparser [ <27:19 27:28>]
QUALIFIER: com.github.javaparser [ <28:19 28:28>]
QUALIFIER: com.github.javaparser [ <29:19 29:28>]
QUALIFIER: com.github.javaparser [ <30:19 30:28>]
QUALIFIER: com.github.javaparser [ <31:19 31:28>]
QUALIFIER: com.github.javaparser [ <32:19 32:28>]
SYMBOL_PACKAGE: com.github.javaparser
QUALIFIER: com.github [ <17:13 17:18>]
QUALIFIER: com.github [ <19:12 19:17>]
QUALIFIER: com.github [ <20:12 20:17>]
QUALIFIER: com.github [ <21:12 21:17>]
QUALIFIER: com.github [ <22:12 22:17>]
QUALIFIER: com.github [ <23:12 23:17>]
QUALIFIER: com.github [ <24:12 24:17>]
QUALIFIER: com.github [ <25:12 25:17>]
QUALIFIER: com.github [ <26:12 26:17>]
QUALIFIER: com.github [ <27:12 27:17>]
QUALIFIER: com.github [ <28:12 28:17>]
QUALIFIER: com.github [ <29:12 29:17>]
QUALIFIER: com.github [ <30:12 30:17>]
QUALIFIER: com.github [ <31:12 31:17>]
QUALIFIER: com.github [ <32:12 32:17>]
SYMBOL_PACKAGE: com.github
QUALIFIER: com [ <17:9 17:11>]
QUALIFIER: com [ <19:8 19:10>]
QUALIFIER: com [ <20:8 20:10>]
QUALIFIER: com [ <21:8 21:10>]
QUALIFIER: com [ <22:8 22:10>]
QUALIFIER: com [ <23:8 23:10>]
QUALIFIER: com [ <24:8 24:10>]
QUALIFIER: com [ <25:8 25:10>]
QUALIFIER: com [ <26:8 26:10>]
QUALIFIER: com [ <27:8 27:10>]
QUALIFIER: com [ <28:8 28:10>]
QUALIFIER: com [ <29:8 29:10>]
QUALIFIER: com [ <30:8 30:10>]
QUALIFIER: com [ <31:8 31:10>]
QUALIFIER: com [ <32:8 32:10>]
SYMBOL_PACKAGE: com
QUALIFIER: com.github.javaparser.ast [ <19:30 19:32>]
SYMBOL_PACKAGE: com.github.javaparser.ast
QUALIFIER: com.github.javaparser.symbolsolver.core.resolution [ <20:48 20:57>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.core.resolution
QUALIFIER: com.github.javaparser.symbolsolver.core [ <20:43 20:46>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.core
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel [ <21:43 21:57>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel [ <22:43 22:57>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.javaparsermodel
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.contexts.ContextHelper [ <186:41 186:53>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.contexts.ContextHelper [ <192:41 192:53>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.contexts [ <22:59 22:66>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.javaparsermodel.contexts
QUALIFIER: com.github.javaparser.symbolsolver.logic [ <23:43 23:47>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.logic
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.declarations
QUALIFIER: com.github.javaparser.symbolsolver.model [ <24:43 24:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <25:43 25:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <26:43 26:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <27:43 27:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <28:43 28:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <29:43 29:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <30:43 30:47>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model
QUALIFIER: com.github.javaparser.symbolsolver.model.methods [ <25:49 25:55>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.methods
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ <26:49 26:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ <27:49 27:58>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.resolution
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ <28:49 28:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ <29:49 29:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ <30:49 30:58>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.typesystem
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.comparators [ <31:59 31:69>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.reflectionmodel.comparators
QUALIFIER: com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic [ <145:54 145:74>]
QUALIFIER: com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic [ <151:54 151:74>]
QUALIFIER: com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic [ <156:16 156:36>]
QUALIFIER: com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic [ <197:37 197:57>]
QUALIFIER: com.github.javaparser.symbolsolver.resolution [ <32:43 32:52>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.resolution
QUALIFIER: java.lang [ <34:13 34:16>]
QUALIFIER: java.lang [ <35:13 35:16>]
QUALIFIER: java.lang [ <36:13 36:16>]
SYMBOL_PACKAGE: java.lang
QUALIFIER: java [ <34:8 34:11>]
QUALIFIER: java [ <35:8 35:11>]
QUALIFIER: java [ <36:8 36:11>]
QUALIFIER: java [ <37:8 37:11>]
QUALIFIER: java [ <38:8 38:11>]
QUALIFIER: java [ <39:8 39:11>]
SYMBOL_PACKAGE: java
QUALIFIER: java.lang.reflect [ <34:18 34:24>]
QUALIFIER: java.lang.reflect [ <35:18 35:24>]
QUALIFIER: java.lang.reflect [ <36:18 36:24>]
SYMBOL_PACKAGE: java.lang.reflect
QUALIFIER: java.lang.reflect.Modifier [ <136:77 136:84>]
QUALIFIER: java.util [ <38:13 38:16>]
QUALIFIER: java.util [ <39:13 39:16>]
SYMBOL_PACKAGE: java.util
QUALIFIER: java.util.function [ <38:18 38:25>]
SYMBOL_PACKAGE: java.util.function
QUALIFIER: java.util.stream.Collectors [ <138:77 138:86>]
QUALIFIER: java.util.stream.Collectors [ <173:151 173:160>]
QUALIFIER: java.util.stream.Collectors [ <331:26 331:35>]
QUALIFIER: java.util.stream [ <39:18 39:23>]
SYMBOL_PACKAGE: java.util.stream
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <74:9 74:12>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <75:9 75:12>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <76:9 76:12>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <209:13 209:16>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <314:57 314:60>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <329:30 329:33>]
SYMBOL_CLASS: public com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <44:1 <44:14 44:39> 343:1>]
SYMBOL_FIELD: private java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <50:22 50:26>]
SYMBOL_FIELD: private com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <51:24 51:33>]
SYMBOL_FIELD: private com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <52:36 52:57>]
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <58:5 <58:5 <58:12 58:37> 58:76> 77:5>]
SYMBOL_METHOD: java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)
SYMBOL_METHOD: boolean java.lang.Class<T>.isInterface()
SYMBOL_METHOD: boolean java.lang.Class<T>.isPrimitive()
SYMBOL_METHOD: boolean java.lang.Class<T>.isArray()
SYMBOL_METHOD: boolean java.lang.Class<T>.isEnum()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.ReflectionClassAdapter(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration)
SYMBOL_METHOD: public java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getDeclaredMethods() [ <83:5 <83:5 <84:35 84:52> 84:54> 86:5>]
SYMBOL_METHOD: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredMethods()
SYMBOL_METHOD: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getDeclaredMethods()
SYMBOL_METHOD: public java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAncestors() [ <88:5 <88:5 <89:32 89:43> 89:45> 91:5>]
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors()
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getAncestors()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) [ <93:5 <93:5 <94:20 94:25> 94:35> 103:5>]
SYMBOL_METHOD: boolean java.lang.Object.equals(java.lang.Object)
SYMBOL_BUILTIN_TYPE: boolean
SYMBOL_METHOD: java.lang.Class<?> java.lang.Object.getClass()
SYMBOL_METHOD: boolean java.lang.String.equals(java.lang.Object)
SYMBOL_METHOD: java.lang.String java.lang.Class<T>.getCanonicalName()
SYMBOL_METHOD: public int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hashCode() [ <105:5 <105:5 <106:16 106:23> 106:25> 108:5>]
SYMBOL_METHOD: int java.lang.Object.hashCode()
SYMBOL_BUILTIN_TYPE: int
SYMBOL_METHOD: public java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getPackageName() [ <111:5 <111:5 <112:19 112:32> 112:34> 117:5>]
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getPackageName()
SYMBOL_METHOD: java.lang.Package java.lang.Class<T>.getPackage()
SYMBOL_METHOD: java.lang.String java.lang.Package.getName()
SYMBOL_METHOD: public java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() [ <119:5 <119:5 <120:19 120:30> 120:32> 126:5>]
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getClassName()
SYMBOL_METHOD: java.lang.String java.lang.String.substring(int, int)
SYMBOL_METHOD: int java.lang.String.length()
SYMBOL_METHOD: public java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getQualifiedName() [ <128:5 <128:5 <129:19 129:34> 129:36> 131:5>]
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) [ <133:5 <133:5 <134:47 134:57> 134:117> 157:5>]
SYMBOL_METHOD: java.util.ArrayList<E>.ArrayList()
SYMBOL_METHOD: static boolean java.lang.reflect.Modifier.isStatic(int)
SYMBOL_METHOD: int java.lang.reflect.Method.getModifiers()
SYMBOL_METHOD: R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>)
SYMBOL_METHOD: java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.sorted(java.util.Comparator<? super T>)
SYMBOL_METHOD: java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>)
SYMBOL_METHOD: static java.util.stream.Stream<T> java.util.Arrays.stream<T>(T)
QUALIFIER: java.util.Arrays [ <137:30 137:35>]
QUALIFIER: java.util.Arrays [ <173:30 173:35>]
QUALIFIER: java.util.Arrays [ <329:16 329:21>]
SYMBOL_METHOD: java.lang.reflect.Method java.lang.Class<T>.getDeclaredMethods()
SYMBOL_METHOD: java.lang.String java.lang.reflect.Method.getName()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.comparators.MethodComparator.MethodComparator()
SYMBOL_METHOD: static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>()
SYMBOL_METHOD: boolean java.lang.reflect.Method.isBridge()
SYMBOL_METHOD: boolean java.lang.reflect.Method.isSynthetic()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclaration.ReflectionMethodDeclaration(java.lang.reflect.Method, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: boolean java.util.List<E>.add(java.util.List<E>.E)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getSuperClass() [ <292:5 <292:5 <293:30 293:42> 293:44> 295:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.solveMethodInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration()
SYMBOL_METHOD: public java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getInterfaces() [ <297:5 <297:5 <298:32 298:44> 298:46> 300:5>]
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration>, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: public java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.toString() [ <159:5 <159:5 <160:19 160:26> 160:28> 164:5>]
SYMBOL_METHOD: java.lang.String java.lang.Object.toString()
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getUsage(com.github.javaparser.ast.Node) [ <166:5 <166:5 <166:17 166:24> 166:35> 169:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: public java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) [ <171:5 <171:5 <171:34 171:51> 171:173> 199:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.methods.MethodUsage.MethodUsage(com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration)
SYMBOL_METHOD: int java.util.List<E>.size()
SYMBOL_METHOD: public java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getTypeParameters() [ <307:5 <307:5 <308:43 308:59> 308:61> 310:5>]
SYMBOL_METHOD: java.util.List<E>.E java.util.List<E>.get(int)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.methods.MethodUsage com.github.javaparser.symbolsolver.model.methods.MethodUsage.replaceTypeParameter(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: static java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.javaparsermodel.contexts.ContextHelper.solveMethodAsUsage(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>)
SYMBOL_METHOD: boolean java.util.Optional<T>.isPresent()
SYMBOL_METHOD: java.util.Optional<T>.T java.util.Optional<T>.get()
SYMBOL_METHOD: static java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.findMostApplicableUsage(java.util.List<com.github.javaparser.symbolsolver.model.methods.MethodUsage>, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <201:5 <201:5 <202:20 202:34> 202:66> 220:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration.isFunctionalInterface()
SYMBOL_METHOD: java.lang.Class<? super T> java.lang.Class<T>.getSuperclass()
SYMBOL_METHOD: java.lang.Class<?> java.lang.Class<T>.getInterfaces()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <222:5 <222:5 <223:20 223:33> 223:44> 225:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isTypeParameter() [ <227:5 <227:5 <228:20 228:34> 228:36> 230:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isTypeParameter()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getField(java.lang.String) [ <232:5 <232:5 <233:29 233:36> 233:49> 235:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getField(java.lang.String)
SYMBOL_METHOD: public java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAllFields() [ <237:5 <237:5 <238:35 238:46> 238:48> 240:5>]
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getAllFields()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <242:5 <242:5 <243:56 243:66> 243:102> 250:5>]
SYMBOL_METHOD: java.lang.reflect.Field java.lang.Class<T>.getFields()
SYMBOL_METHOD: java.lang.String java.lang.reflect.Field.getName()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.solved<S, S2>(S2)
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution.SymbolReference [ <246:24 246:38>]
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution.SymbolReference [ <249:16 249:30>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFieldDeclaration.ReflectionFieldDeclaration(java.lang.reflect.Field, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.unsolved<S, S2>(java.lang.Class<S2>)
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasDirectlyAnnotation(java.lang.String) [ <252:5 <252:5 <253:20 253:40> 253:62> 255:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.hasDirectlyAnnotation(java.lang.String)
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasField(java.lang.String) [ <257:5 <257:5 <258:20 258:27> 258:40> 260:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.hasField(java.lang.String)
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <262:5 <262:5 <263:20 263:33> 263:65> 265:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration)
SYMBOL_METHOD: public java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getName() [ <267:5 <267:5 <268:19 268:25> 268:27> 270:5>]
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
SYMBOL_METHOD: java.lang.String java.lang.Class<T>.getSimpleName()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isField() [ <272:5 <272:5 <273:20 273:26> 273:28> 275:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.Declaration.isField()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isParameter() [ <277:5 <277:5 <278:20 278:30> 278:32> 280:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.Declaration.isParameter()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isType() [ <282:5 <282:5 <283:20 283:25> 283:27> 285:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isType()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isClass() [ <287:5 <287:5 <288:20 288:26> 288:28> 290:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.isClass()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getSuperClass()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getSuperClass()
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getInterfaces()
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getInterfaces()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isInterface() [ <302:5 <302:5 <303:20 303:30> 303:32> 305:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isInterface()
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getTypeParameters()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.accessLevel() [ <312:5 <312:5 <313:24 313:34> 313:36> 315:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.model.declarations.HasAccessLevel.accessLevel()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int)
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory [ <314:16 314:32>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory [ <330:28 330:44>]
SYMBOL_METHOD: int java.lang.Class<T>.getModifiers()
SYMBOL_METHOD: public java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getConstructors() [ <317:5 <317:5 <318:41 318:55> 318:57> 320:5>]
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getConstructors()
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getConstructors()
SYMBOL_METHOD: public java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.containerType() [ <322:5 <322:5 <323:47 323:59> 323:61> 325:5>]
SYMBOL_METHOD: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType()
SYMBOL_METHOD: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.containerType()
SYMBOL_METHOD: public java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() [ <327:5 <327:5 <328:42 328:54> 328:56> 332:5>]
SYMBOL_METHOD: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes()
SYMBOL_METHOD: java.util.stream.Stream<R> java.util.stream.Stream<T>.map<R>(java.util.function.Function<? super T, ? extends R>)
SYMBOL_METHOD: java.lang.Class<?> java.lang.Class<T>.getDeclaredClasses()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: static java.util.stream.Collector<T, ?, java.util.Set<T>> java.util.stream.Collectors.toSet<T>()
SYMBOL_METHOD: protected com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.object() [ <338:5 <338:5 <339:29 339:34> 339:36> 341:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration.object()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.resolution.TypeSolver.solveType(java.lang.String)
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.ast.Node [ <19:34 19:37>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.core.resolution.Context [ <20:59 20:65>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder [ <21:59 21:87>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.javaparsermodel.contexts.ContextHelper [ <22:68 22:80>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration [ <23:49 23:72>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.model.declarations [ <24:49 24:60>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <25:57 25:67>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <26:60 26:74>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <27:60 27:69>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <28:60 28:72>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <29:60 29:76>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <30:60 30:63>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.reflectionmodel.comparators.MethodComparator [ <31:71 31:86>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic [ <32:54 32:74>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> java.lang.reflect.Field [ <34:26 34:30>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> java.lang.reflect.Method [ <35:26 35:31>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> java.lang.reflect.Modifier [ <36:26 36:33>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> java.util [ <37:13 37:16>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> java.util.function.Predicate<T> [ <38:27 38:35>]
REFERENCE_IMPORT: ReflectionClassDeclaration.java -> java.util.stream.Collectors [ <39:25 39:34>]
REFERENCE_INHERITANCE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration -> com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration [ <44:49 44:72>]
REFERENCE_TYPE_ARGUMENT: java.lang.Class<T> -> ? [ <50:19 50:19>]
REFERENCE_TYPE_ARGUMENT: java.lang.Class<T> -> ? [ <58:45 58:45>]
REFERENCE_TYPE_ARGUMENT: java.lang.Class<T> -> ? [ <213:20 213:20>]
REFERENCE_TYPE_USAGE: java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz -> java.lang.Class<T> [ <50:13 50:17>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <51:13 51:22>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter [ <52:13 52:34>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<T> [ <58:39 58:43>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <58:55 58:64>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) [ <60:23 60:46>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) [ <63:23 63:46>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) [ <66:23 66:46>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) [ <69:23 69:46>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) [ <72:23 72:46>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException [ <60:23 60:46>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException [ <63:23 63:46>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException [ <66:23 66:46>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException [ <69:23 69:46>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException [ <72:23 72:46>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.Class<T>.isInterface() [ <62:19 62:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.Class<T>.isPrimitive() [ <65:19 65:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.Class<T>.isArray() [ <68:19 68:25>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.Class<T>.isEnum() [ <71:19 71:24>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <74:14 74:18>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <75:14 75:23>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <76:14 76:35>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.ReflectionClassAdapter(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <76:43 76:64>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter [ <76:43 76:64>]
REFERENCE_OVERRIDE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getDeclaredMethods() -> java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredMethods() [ <84:35 84:52>]
REFERENCE_ANNOTATION_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getDeclaredMethods() -> java.lang.Override [ <83:6 83:13>]
REFERENCE_TYPE_ARGUMENT: java.util.Set<E> -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <84:16 84:32>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getDeclaredMethods() -> java.util.Set<E> [ <84:12 84:14>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getDeclaredMethods() -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <84:16 84:32>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getDeclaredMethods() -> java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getDeclaredMethods() [ <85:39 85:56>]
REFERENCE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getDeclaredMethods() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <85:16 85:37>]
REFERENCE_OVERRIDE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAncestors() -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors() [ <89:32 89:43>]
REFERENCE_ANNOTATION_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAncestors() -> java.lang.Override [ <88:6 88:13>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <89:17 89:29>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <298:17 298:29>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAncestors() -> java.util.List<E> [ <89:12 89:15>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAncestors() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <89:17 89:29>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAncestors() -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getAncestors() [ <90:39 90:50>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAncestors() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <90:16 90:37>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> boolean java.lang.Object.equals(java.lang.Object) [ <94:20 94:25>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> java.lang.Override [ <93:6 93:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> boolean [ <94:12 94:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> java.lang.Object [ <94:27 94:32>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> java.lang.Class<?> java.lang.Object.getClass() [ <96:26 96:33>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> java.lang.Class<?> java.lang.Object.getClass() [ <96:42 96:49>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <98:9 98:34>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <98:44 98:69>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> boolean java.lang.String.equals(java.lang.Object) [ <100:39 100:44>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <100:20 100:35>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <100:57 100:72>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <100:14 100:18>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals(java.lang.Object) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <100:51 100:55>]
REFERENCE_OVERRIDE: int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hashCode() -> int java.lang.Object.hashCode() [ <106:16 106:23>]
REFERENCE_ANNOTATION_USAGE: int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hashCode() -> java.lang.Override [ <105:6 105:13>]
REFERENCE_TYPE_USAGE: int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hashCode() -> int [ <106:12 106:14>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hashCode() -> int java.lang.Object.hashCode() [ <107:22 107:29>]
REFERENCE_USAGE: int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hashCode() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <107:16 107:20>]
REFERENCE_OVERRIDE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getPackageName() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getPackageName() [ <112:19 112:32>]
REFERENCE_ANNOTATION_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getPackageName() -> java.lang.Override [ <111:6 111:13>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getPackageName() -> java.lang.String [ <112:12 112:17>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getPackageName() -> java.lang.Package java.lang.Class<T>.getPackage() [ <113:19 113:28>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getPackageName() -> java.lang.Package java.lang.Class<T>.getPackage() [ <114:26 114:35>]
REFERENCE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getPackageName() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <113:13 113:17>]
REFERENCE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getPackageName() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <114:20 114:24>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getPackageName() -> java.lang.String java.lang.Package.getName() [ <114:39 114:45>]
REFERENCE_OVERRIDE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getClassName() [ <120:19 120:30>]
REFERENCE_ANNOTATION_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() -> java.lang.Override [ <119:6 119:13>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() -> java.lang.String [ <120:12 120:17>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() -> java.lang.String [ <121:9 121:14>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <121:38 121:53>]
REFERENCE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <121:32 121:36>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() -> java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getPackageName() [ <122:38 122:51>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() -> java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getPackageName() [ <123:44 123:57>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() -> java.lang.String java.lang.String.substring(int, int) [ <123:34 123:42>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() -> int java.lang.String.length() [ <123:61 123:66>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName() -> int java.lang.String.length() [ <123:89 123:94>]
REFERENCE_OVERRIDE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getQualifiedName() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ <129:19 129:34>]
REFERENCE_ANNOTATION_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getQualifiedName() -> java.lang.Override [ <128:6 128:13>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getQualifiedName() -> java.lang.String [ <129:12 129:17>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getQualifiedName() -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <130:22 130:37>]
REFERENCE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getQualifiedName() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <130:16 130:20>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.lang.Deprecated [ <133:6 133:15>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <134:28 134:44>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <145:29 145:45>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <151:29 151:45>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <134:12 134:26>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <145:13 145:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <151:13 151:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <134:28 134:44>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <135:14 135:30>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <140:13 140:29>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <145:29 145:45>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <151:29 151:45>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.lang.String [ <134:59 134:64>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <134:77 134:80>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <171:71 171:74>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <171:148 171:151>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.util.List<E> [ <134:72 134:75>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.util.List<E> [ <135:9 135:12>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <134:77 134:80>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> boolean [ <134:99 134:105>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <135:14 135:30>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.util.ArrayList<E>.ArrayList() [ <135:47 135:57>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.util.ArrayList<E> [ <135:47 135:55>]
REFERENCE_TYPE_ARGUMENT: java.util.function.Predicate<T> -> java.lang.reflect.Method [ <136:19 136:24>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.util.function.Predicate<T> [ <136:9 136:17>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.lang.reflect.Method [ <136:19 136:24>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.lang.reflect.Method [ <137:14 137:19>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> static boolean java.lang.reflect.Modifier.isStatic(int) [ <136:86 136:93>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> int java.lang.reflect.Method.getModifiers() [ <136:97 136:108>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>) [ <138:69 138:75>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.sorted(java.util.Comparator<? super T>) [ <138:38 138:43>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <137:72 137:77>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <137:112 137:117>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> static java.util.stream.Stream<T> java.util.Arrays.stream<T>(T) [ <137:37 137:42>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.lang.reflect.Method java.lang.Class<T>.getDeclaredMethods() [ <137:50 137:67>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <137:44 137:48>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> boolean java.lang.String.equals(java.lang.Object) [ <137:98 137:103>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.lang.String java.lang.reflect.Method.getName() [ <137:88 137:94>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.reflectionmodel.comparators.MethodComparator.MethodComparator() [ <138:49 138:64>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.reflectionmodel.comparators.MethodComparator [ <138:49 138:64>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>() [ <138:88 138:93>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> boolean java.lang.reflect.Method.isBridge() [ <139:24 139:31>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> boolean java.lang.reflect.Method.isSynthetic() [ <139:45 139:55>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclaration.ReflectionMethodDeclaration(java.lang.reflect.Method, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <140:55 140:81>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclaration [ <140:55 140:81>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <140:91 140:100>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <145:140 145:149>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <151:171 151:180>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <156:88 156:97>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> boolean java.util.List<E>.add(java.util.List<E>.E) [ <141:21 141:23>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> boolean java.util.List<E>.add(java.util.List<E>.E) [ <147:25 147:27>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> boolean java.util.List<E>.add(java.util.List<E>.E) [ <153:25 153:27>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getSuperClass() [ <143:13 143:25>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getSuperClass() [ <144:62 144:74>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration [ <144:13 144:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration [ <144:44 144:59>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration() [ <144:78 144:95>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration() [ <151:115 151:132>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.solveMethodInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <145:76 145:92>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.solveMethodInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <151:76 151:92>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved() [ <146:21 146:28>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved() [ <152:21 152:28>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <147:33 147:59>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <153:33 153:59>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <150:14 150:26>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getInterfaces() [ <150:51 150:63>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration>, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <156:38 156:55>]
REFERENCE_OVERRIDE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.toString() -> java.lang.String java.lang.Object.toString() [ <160:19 160:26>]
REFERENCE_ANNOTATION_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.toString() -> java.lang.Override [ <159:6 159:13>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.toString() -> java.lang.String [ <160:12 160:17>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.toString() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId() [ <162:28 162:32>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getUsage(com.github.javaparser.ast.Node) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <166:12 166:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getUsage(com.github.javaparser.ast.Node) -> com.github.javaparser.ast.Node [ <166:26 166:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getUsage(com.github.javaparser.ast.Node) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <168:20 168:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getUsage(com.github.javaparser.ast.Node) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <168:20 168:36>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getUsage(com.github.javaparser.ast.Node) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <168:44 168:53>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <171:21 171:31>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <186:22 186:32>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <192:22 192:32>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <197:18 197:28>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.Optional<T> [ <171:12 171:19>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.Optional<T> [ <186:13 186:20>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.Optional<T> [ <192:13 192:20>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.Optional<T> [ <197:9 197:16>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <171:21 171:31>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <172:14 172:24>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <176:13 176:23>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <176:43 176:53>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <186:22 186:32>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <192:22 192:32>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <197:18 197:28>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.lang.String [ <171:53 171:58>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<E> [ <171:66 171:69>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<E> [ <171:143 171:146>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<E> [ <172:9 172:12>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <171:71 171:74>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <171:148 171:151>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <179:17 179:20>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <171:93 171:102>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.core.resolution.Context [ <171:116 171:122>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <172:14 172:24>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.ArrayList<E>.ArrayList() [ <172:41 172:51>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.ArrayList<E> [ <172:41 172:49>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.lang.reflect.Method [ <173:14 173:19>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>) [ <173:143 173:149>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.sorted(java.util.Comparator<? super T>) [ <173:112 173:117>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <173:72 173:77>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> static java.util.stream.Stream<T> java.util.Arrays.stream<T>(T) [ <173:37 173:42>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.lang.reflect.Method java.lang.Class<T>.getDeclaredMethods() [ <173:50 173:67>]
REFERENCE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <173:44 173:48>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> boolean java.lang.String.equals(java.lang.Object) [ <173:98 173:103>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.lang.String java.lang.reflect.Method.getName() [ <173:88 173:94>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.reflectionmodel.comparators.MethodComparator.MethodComparator() [ <173:123 173:138>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.reflectionmodel.comparators.MethodComparator [ <173:123 173:138>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>() [ <173:162 173:167>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> boolean java.lang.reflect.Method.isBridge() [ <174:24 174:31>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> boolean java.lang.reflect.Method.isSynthetic() [ <174:45 174:55>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <175:13 175:29>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclaration.ReflectionMethodDeclaration(java.lang.reflect.Method, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <175:55 175:81>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclaration [ <175:55 175:81>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage.MethodUsage(com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration) [ <176:43 176:53>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> int [ <177:18 177:20>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> int java.util.List<E>.size() [ <177:53 177:56>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> int java.util.List<E>.size() [ <177:87 177:90>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getTypeParameters() [ <177:33 177:49>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getTypeParameters() [ <178:56 178:72>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <178:17 178:40>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<E>.E java.util.List<E>.get(int) [ <178:76 178:78>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<E>.E java.util.List<E>.get(int) [ <179:53 179:55>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage com.github.javaparser.symbolsolver.model.methods.MethodUsage.replaceTypeParameter(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <180:43 180:62>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> boolean java.util.List<E>.add(java.util.List<E>.E) [ <182:21 182:23>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> boolean java.util.List<E>.add(java.util.List<E>.E) [ <188:25 188:27>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> boolean java.util.List<E>.add(java.util.List<E>.E) [ <194:25 194:27>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getSuperClass() [ <184:13 184:25>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getSuperClass() [ <185:62 185:74>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration [ <185:13 185:28>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration [ <185:44 185:59>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration() [ <185:78 185:95>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration() [ <192:95 192:112>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> static java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.javaparsermodel.contexts.ContextHelper.solveMethodAsUsage(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) [ <186:55 186:72>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> static java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.javaparsermodel.contexts.ContextHelper.solveMethodAsUsage(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) [ <192:55 192:72>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> boolean java.util.Optional<T>.isPresent() [ <187:21 187:29>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> boolean java.util.Optional<T>.isPresent() [ <193:21 193:29>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <188:33 188:35>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <194:33 194:35>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <191:14 191:26>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getInterfaces() [ <191:51 191:63>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> static java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.findMostApplicableUsage(java.util.List<com.github.javaparser.symbolsolver.model.methods.MethodUsage>, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <197:59 197:81>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <202:20 202:34>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Override [ <201:6 201:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean [ <202:12 202:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <202:36 202:59>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder [ <203:30 203:58>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration.isFunctionalInterface() [ <204:20 204:40>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean java.lang.String.equals(java.lang.Object) [ <206:38 206:43>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ <206:19 206:34>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getQualifiedName() [ <206:45 206:60>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<? super T> java.lang.Class<T>.getSuperclass() [ <209:24 209:36>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<? super T> java.lang.Class<T>.getSuperclass() [ <210:57 210:69>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <209:18 209:22>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <210:51 210:55>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <213:35 213:39>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <210:86 210:100>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <210:24 210:49>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <210:24 210:49>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <210:74 210:83>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <214:63 214:72>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<T> [ <213:14 213:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<?> java.lang.Class<T>.getInterfaces() [ <213:41 213:53>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <214:75 214:89>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <214:21 214:50>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <214:21 214:50>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <223:20 223:33>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.Override [ <222:6 222:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean [ <223:12 223:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <223:35 223:38>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <224:39 224:52>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <224:16 224:37>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isTypeParameter() -> boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isTypeParameter() [ <228:20 228:34>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isTypeParameter() -> java.lang.Override [ <227:6 227:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isTypeParameter() -> boolean [ <228:12 228:18>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) [ <233:29 233:36>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getField(java.lang.String) -> java.lang.Override [ <232:6 232:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <233:12 233:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getField(java.lang.String) -> java.lang.String [ <233:38 233:43>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getField(java.lang.String) [ <234:39 234:46>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <234:16 234:37>]
REFERENCE_OVERRIDE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAllFields() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields() [ <238:35 238:46>]
REFERENCE_ANNOTATION_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAllFields() -> java.lang.Override [ <237:6 237:13>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <238:17 238:32>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAllFields() -> java.util.List<E> [ <238:12 238:15>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAllFields() -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <238:17 238:32>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAllFields() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getAllFields() [ <239:39 239:50>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getAllFields() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <239:16 239:37>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Deprecated [ <242:6 242:15>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> ? extends ValueDeclaration [ <243:28 243:53>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <243:12 243:26>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration [ <243:38 243:53>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration [ <249:41 249:56>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.String [ <243:68 243:73>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <243:81 243:90>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Field [ <244:14 244:18>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Field java.lang.Class<T>.getFields() [ <244:34 244:42>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <244:28 244:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.String.equals(java.lang.Object) [ <245:33 245:38>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.String java.lang.reflect.Field.getName() [ <245:23 245:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.solved<S, S2>(S2) [ <246:40 246:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFieldDeclaration.ReflectionFieldDeclaration(java.lang.reflect.Field, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <246:51 246:76>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFieldDeclaration [ <246:51 246:76>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.unsolved<S, S2>(java.lang.Class<S2>) [ <249:32 249:39>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasDirectlyAnnotation(java.lang.String) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String) [ <253:20 253:40>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasDirectlyAnnotation(java.lang.String) -> java.lang.Override [ <252:6 252:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasDirectlyAnnotation(java.lang.String) -> boolean [ <253:12 253:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasDirectlyAnnotation(java.lang.String) -> java.lang.String [ <253:42 253:47>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasDirectlyAnnotation(java.lang.String) -> boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.hasDirectlyAnnotation(java.lang.String) [ <254:39 254:59>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasDirectlyAnnotation(java.lang.String) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <254:16 254:37>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasField(java.lang.String) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) [ <258:20 258:27>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasField(java.lang.String) -> java.lang.Override [ <257:6 257:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasField(java.lang.String) -> boolean [ <258:12 258:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasField(java.lang.String) -> java.lang.String [ <258:29 258:34>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasField(java.lang.String) -> boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.hasField(java.lang.String) [ <259:39 259:46>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasField(java.lang.String) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <259:16 259:37>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <263:20 263:33>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Override [ <262:6 262:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean [ <263:12 263:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <263:35 263:58>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <264:16 264:29>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <264:35 264:51>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <264:35 264:51>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <264:60 264:69>]
REFERENCE_OVERRIDE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getName() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName() [ <268:19 268:25>]
REFERENCE_ANNOTATION_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getName() -> java.lang.Override [ <267:6 267:13>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getName() -> java.lang.String [ <268:12 268:17>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getName() -> java.lang.String java.lang.Class<T>.getSimpleName() [ <269:22 269:34>]
REFERENCE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getName() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <269:16 269:20>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isField() -> boolean com.github.javaparser.symbolsolver.model.declarations.Declaration.isField() [ <273:20 273:26>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isField() -> java.lang.Override [ <272:6 272:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isField() -> boolean [ <273:12 273:18>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isParameter() -> boolean com.github.javaparser.symbolsolver.model.declarations.Declaration.isParameter() [ <278:20 278:30>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isParameter() -> java.lang.Override [ <277:6 277:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isParameter() -> boolean [ <278:12 278:18>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isType() -> boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isType() [ <283:20 283:25>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isType() -> java.lang.Override [ <282:6 282:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isType() -> boolean [ <283:12 283:18>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isClass() -> boolean com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.isClass() [ <288:20 288:26>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isClass() -> java.lang.Override [ <287:6 287:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isClass() -> boolean [ <288:12 288:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isClass() -> boolean java.lang.Class<T>.isInterface() [ <289:23 289:33>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isClass() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <289:17 289:21>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getSuperClass() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getSuperClass() [ <293:30 293:42>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getSuperClass() -> java.lang.Override [ <292:6 292:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getSuperClass() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <293:12 293:28>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getSuperClass() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getSuperClass() [ <294:39 294:51>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getSuperClass() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <294:16 294:37>]
REFERENCE_OVERRIDE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getInterfaces() -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getInterfaces() [ <298:32 298:44>]
REFERENCE_ANNOTATION_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getInterfaces() -> java.lang.Override [ <297:6 297:13>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getInterfaces() -> java.util.List<E> [ <298:12 298:15>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getInterfaces() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <298:17 298:29>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getInterfaces() -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getInterfaces() [ <299:39 299:51>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getInterfaces() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <299:16 299:37>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isInterface() -> boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isInterface() [ <303:20 303:30>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isInterface() -> java.lang.Override [ <302:6 302:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isInterface() -> boolean [ <303:12 303:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isInterface() -> boolean java.lang.Class<T>.isInterface() [ <304:22 304:32>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isInterface() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <304:16 304:20>]
REFERENCE_OVERRIDE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getTypeParameters() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters() [ <308:43 308:59>]
REFERENCE_ANNOTATION_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getTypeParameters() -> java.lang.Override [ <307:6 307:13>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <308:17 308:40>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getTypeParameters() -> java.util.List<E> [ <308:12 308:15>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getTypeParameters() -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <308:17 308:40>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getTypeParameters() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getTypeParameters() [ <309:39 309:55>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getTypeParameters() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <309:16 309:37>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.accessLevel() -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.model.declarations.HasAccessLevel.accessLevel() [ <313:24 313:34>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.accessLevel() -> java.lang.Override [ <312:6 312:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.accessLevel() -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel [ <313:12 313:22>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.accessLevel() -> static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) [ <314:34 314:55>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.accessLevel() -> int java.lang.Class<T>.getModifiers() [ <314:68 314:79>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.accessLevel() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <314:62 314:66>]
REFERENCE_OVERRIDE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getConstructors() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getConstructors() [ <318:41 318:55>]
REFERENCE_ANNOTATION_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getConstructors() -> java.lang.Override [ <317:6 317:13>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ <318:17 318:38>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getConstructors() -> java.util.List<E> [ <318:12 318:15>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getConstructors() -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ <318:17 318:38>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getConstructors() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getConstructors() [ <319:39 319:53>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getConstructors() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <319:16 319:37>]
REFERENCE_OVERRIDE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.containerType() -> java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType() [ <323:47 323:59>]
REFERENCE_ANNOTATION_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.containerType() -> java.lang.Override [ <322:6 322:13>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <323:21 323:44>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.containerType() -> java.util.Optional<T> [ <323:12 323:19>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.containerType() -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <323:21 323:44>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.containerType() -> java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.containerType() [ <324:39 324:51>]
REFERENCE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.containerType() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.reflectionClassAdapter [ <324:16 324:37>]
REFERENCE_OVERRIDE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes() [ <328:42 328:54>]
REFERENCE_ANNOTATION_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> java.lang.Override [ <327:6 327:13>]
REFERENCE_TYPE_ARGUMENT: java.util.Set<E> -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <328:16 328:39>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> java.util.Set<E> [ <328:12 328:14>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <328:16 328:39>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>) [ <331:18 331:24>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> java.util.stream.Stream<R> java.util.stream.Stream<T>.map<R>(java.util.function.Function<? super T, ? extends R>) [ <330:18 330:20>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> static java.util.stream.Stream<T> java.util.Arrays.stream<T>(T) [ <329:23 329:28>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> java.lang.Class<?> java.lang.Class<T>.getDeclaredClasses() [ <329:41 329:58>]
REFERENCE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.clazz [ <329:35 329:39>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <330:46 330:63>]
REFERENCE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <330:69 330:78>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.internalTypes() -> static java.util.stream.Collector<T, ?, java.util.Set<T>> java.util.stream.Collectors.toSet<T>() [ <331:37 331:41>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.object() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.logic.AbstractClassDeclaration.object() [ <339:29 339:34>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.object() -> java.lang.Override [ <338:6 338:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.object() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <339:15 339:27>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.object() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <340:20 340:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.object() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <340:20 340:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.object() -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.resolution.TypeSolver.solveType(java.lang.String) [ <340:49 340:57>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.object() -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <340:38 340:47>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.object() -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.typeSolver [ <340:93 340:102>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.object() -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <340:72 340:87>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.object() -> java.lang.Object [ <340:59 340:64>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<106:27> [ <106:27 106:27>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<106:27> [ <108:5 108:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<112:36> [ <112:36 112:36>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<112:36> [ <117:5 117:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<113:41> [ <113:41 113:41>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<113:41> [ <115:9 115:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<120:34> [ <120:34 120:34>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<120:34> [ <126:5 126:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<122:64> [ <122:64 122:64>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<122:64> [ <124:9 124:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<129:38> [ <129:38 129:38>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<129:38> [ <131:5 131:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<134:119> [ <134:119 134:119>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<134:119> [ <157:5 157:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<138:99> [ <138:99 138:99>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<138:99> [ <142:9 142:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<143:38> [ <143:38 143:38>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<143:38> [ <149:9 149:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<146:33> [ <146:33 146:33>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<146:33> [ <148:13 148:13>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<150:68> [ <150:68 150:68>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<150:68> [ <155:9 155:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<152:33> [ <152:33 152:33>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<152:33> [ <154:13 154:13>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<160:30> [ <160:30 160:30>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<160:30> [ <164:5 164:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<166:37> [ <166:37 166:37>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<166:37> [ <169:5 169:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<171:175> [ <171:175 171:175>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<171:175> [ <199:5 199:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<173:173> [ <173:173 173:173>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<173:173> [ <183:9 183:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<177:100> [ <177:100 177:100>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<177:100> [ <181:13 181:13>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<184:38> [ <184:38 184:38>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<184:38> [ <190:9 190:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<187:34> [ <187:34 187:34>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<187:34> [ <189:13 189:13>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<191:68> [ <191:68 191:68>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<191:68> [ <196:9 196:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<193:34> [ <193:34 193:34>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<193:34> [ <195:13 195:13>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<202:68> [ <202:68 202:68>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<202:68> [ <220:5 220:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<203:61> [ <203:61 203:61>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<203:61> [ <205:9 205:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<206:66> [ <206:66 206:66>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<206:66> [ <208:9 208:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<210:110> [ <210:110 210:110>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<210:110> [ <212:9 212:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<213:58> [ <213:58 213:58>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<213:58> [ <217:9 217:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<214:99> [ <214:99 214:99>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<214:99> [ <216:13 216:13>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<223:46> [ <223:46 223:46>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<223:46> [ <225:5 225:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<228:38> [ <228:38 228:38>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<228:38> [ <230:5 230:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<233:51> [ <233:51 233:51>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<233:51> [ <235:5 235:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<238:50> [ <238:50 238:50>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<238:50> [ <240:5 240:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<243:104> [ <243:104 243:104>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<243:104> [ <250:5 250:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<244:47> [ <244:47 244:47>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<244:47> [ <248:9 248:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<245:47> [ <245:47 245:47>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<245:47> [ <247:13 247:13>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<253:64> [ <253:64 253:64>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<253:64> [ <255:5 255:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<258:42> [ <258:42 258:42>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<258:42> [ <260:5 260:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<263:67> [ <263:67 263:67>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<263:67> [ <265:5 265:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<268:29> [ <268:29 268:29>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<268:29> [ <270:5 270:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<273:30> [ <273:30 273:30>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<273:30> [ <275:5 275:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<278:34> [ <278:34 278:34>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<278:34> [ <280:5 280:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<283:29> [ <283:29 283:29>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<283:29> [ <285:5 285:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<288:30> [ <288:30 288:30>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<288:30> [ <290:5 290:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<293:46> [ <293:46 293:46>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<293:46> [ <295:5 295:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<298:48> [ <298:48 298:48>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<298:48> [ <300:5 300:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<303:34> [ <303:34 303:34>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<303:34> [ <305:5 305:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<308:63> [ <308:63 308:63>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<308:63> [ <310:5 310:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<313:38> [ <313:38 313:38>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<313:38> [ <315:5 315:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<318:59> [ <318:59 318:59>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<318:59> [ <320:5 320:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<323:63> [ <323:63 323:63>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<323:63> [ <325:5 325:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<328:58> [ <328:58 328:58>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<328:58> [ <332:5 332:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<339:38> [ <339:38 339:38>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<339:38> [ <341:5 341:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<44:74> [ <44:74 44:74>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<44:74> [ <343:1 343:1>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<58:78> [ <58:78 58:78>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<58:78> [ <77:5 77:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<59:28> [ <59:28 59:28>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<59:28> [ <61:9 61:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<62:34> [ <62:34 62:34>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<62:34> [ <64:9 64:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<65:34> [ <65:34 65:34>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<65:34> [ <67:9 67:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<68:30> [ <68:30 68:30>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<68:30> [ <70:9 70:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<71:29> [ <71:29 71:29>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<71:29> [ <73:9 73:9>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<84:56> [ <84:56 84:56>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<84:56> [ <86:5 86:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<89:47> [ <89:47 89:47>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<89:47> [ <91:5 91:5>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<94:37> [ <94:37 94:37>]
LOCAL_SYMBOL: ReflectionClassDeclaration.java<94:37> [ <103:5 103:5>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration<0> [ <58:48 58:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration<0> [ <59:13 59:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration<0> [ <62:13 62:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration<0> [ <65:13 65:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration<0> [ <68:13 68:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration<0> [ <71:13 71:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration<0> [ <74:22 74:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration<0> [ <76:66 76:70>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration<1> [ <58:66 58:75>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration<1> [ <75:27 75:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration<1> [ <76:73 76:82>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo<0> [ <202:61 202:65>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo<0> [ <203:13 203:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo<0> [ <206:13 206:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo<0> [ <210:102 210:106>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo<0> [ <214:91 214:95>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo<1> [ <213:23 213:31>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.canBeAssignedTo<1> [ <214:52 214:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals<0> [ <94:34 94:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals<0> [ <95:21 95:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals<0> [ <96:13 96:13>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals<0> [ <96:40 96:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals<0> [ <98:72 98:72>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals<1> [ <98:36 98:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.equals<1> [ <100:46 100:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName<0> [ <121:16 121:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName<0> [ <122:13 122:25>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName<0> [ <123:20 123:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getClassName<0> [ <123:75 123:87>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getField<0> [ <233:45 233:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getField<0> [ <234:48 234:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.getUsage<0> [ <166:31 166:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasDirectlyAnnotation<0> [ <253:49 253:61>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasDirectlyAnnotation<0> [ <254:61 254:73>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasField<0> [ <258:36 258:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.hasField<0> [ <259:48 259:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy<0> [ <223:40 223:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy<0> [ <224:54 224:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy<0> [ <263:60 263:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.isAssignableBy<0> [ <264:53 264:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<0> [ <134:66 134:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<0> [ <137:105 137:108>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<0> [ <145:106 145:109>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<0> [ <151:137 151:140>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<0> [ <156:66 156:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<10> [ <140:31 140:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<10> [ <141:25 141:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<11> [ <144:30 144:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<11> [ <145:94 145:103>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<12> [ <145:48 145:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<12> [ <146:17 146:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<12> [ <147:29 147:31>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<13> [ <150:28 150:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<13> [ <151:94 151:113>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<15> [ <151:48 151:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<15> [ <152:17 152:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<15> [ <153:29 153:31>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<1> [ <134:83 134:96>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<1> [ <145:112 145:125>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<1> [ <151:143 151:156>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<1> [ <156:72 156:85>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<2> [ <134:107 134:116>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<2> [ <136:48 136:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<2> [ <136:63 136:72>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<2> [ <145:128 145:137>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<2> [ <151:159 151:168>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<3> [ <135:33 135:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<3> [ <141:13 141:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<3> [ <147:17 147:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<3> [ <153:17 153:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<3> [ <156:57 156:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<4> [ <136:27 136:38>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<4> [ <137:119 137:130>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<6> [ <137:21 137:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<6> [ <139:17 139:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<6> [ <139:38 139:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod<6> [ <140:83 140:88>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<0> [ <171:60 171:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<0> [ <173:105 173:108>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<0> [ <186:86 186:89>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<0> [ <192:117 192:120>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<0> [ <197:92 197:95>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<10> [ <175:31 175:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<10> [ <176:55 176:71>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<11> [ <176:25 176:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<11> [ <180:17 180:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<11> [ <180:31 180:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<11> [ <182:25 182:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<12> [ <177:22 177:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<12> [ <177:29 177:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<12> [ <177:63 177:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<12> [ <177:95 177:95>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<12> [ <178:80 178:80>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<12> [ <179:57 179:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<13> [ <178:42 178:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<13> [ <180:64 180:74>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<14> [ <179:22 179:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<14> [ <180:77 180:84>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<15> [ <185:30 185:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<15> [ <186:74 186:83>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<16> [ <186:35 186:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<16> [ <187:17 187:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<16> [ <188:29 188:31>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<17> [ <191:28 191:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<17> [ <192:74 192:93>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<19> [ <192:35 192:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<19> [ <193:17 193:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<19> [ <194:29 194:31>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<1> [ <171:77 171:90>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<1> [ <186:92 186:105>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<1> [ <192:123 192:136>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<1> [ <197:98 197:111>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<20> [ <197:31 197:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<20> [ <198:16 198:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<2> [ <171:104 171:113>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<2> [ <175:91 175:100>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<2> [ <186:108 186:117>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<2> [ <192:139 192:148>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<2> [ <197:114 197:123>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<3> [ <171:124 171:140>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<3> [ <186:120 186:136>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<3> [ <192:151 192:167>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<4> [ <171:154 171:172>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<4> [ <177:67 177:85>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<4> [ <179:33 179:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<4> [ <186:139 186:157>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<4> [ <192:170 192:188>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<5> [ <172:27 172:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<5> [ <182:13 182:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<5> [ <188:17 188:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<5> [ <194:17 194:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<5> [ <197:83 197:89>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<6> [ <173:21 173:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<6> [ <174:17 174:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<6> [ <174:38 174:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethodAsUsage<6> [ <175:83 175:88>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol<0> [ <243:75 243:78>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol<0> [ <245:40 245:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol<1> [ <243:92 243:101>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol<1> [ <246:85 246:94>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol<2> [ <244:20 244:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol<2> [ <245:17 245:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveSymbol<2> [ <246:78 246:82>]
LOCAL_SYMBOL: java.util.function.Function<T, R>.apply<1> [ <330:22 330:23>]
LOCAL_SYMBOL: java.util.function.Function<T, R>.apply<1> [ <330:65 330:66>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<5> [ <136:42 136:42>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<5> [ <136:95 136:95>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<8> [ <137:80 137:80>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<8> [ <137:86 137:86>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<8> [ <173:80 173:80>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<8> [ <173:86 173:86>]
COMMENT: comment [ <1:1 15:3>]
COMMENT: comment [ <41:1 43:3>]
COMMENT: comment [ <46:5 46:7>]
COMMENT: comment [ <47:5 47:14>]
COMMENT: comment [ <48:5 48:7>]
COMMENT: comment [ <54:5 54:7>]
COMMENT: comment [ <55:5 55:20>]
COMMENT: comment [ <56:5 56:7>]
COMMENT: comment [ <79:5 79:7>]
COMMENT: comment [ <80:5 80:22>]
COMMENT: comment [ <81:5 81:7>]
COMMENT: comment [ <334:5 334:7>]
COMMENT: comment [ <335:5 335:25>]
COMMENT: comment [ <336:5 336:7>]
