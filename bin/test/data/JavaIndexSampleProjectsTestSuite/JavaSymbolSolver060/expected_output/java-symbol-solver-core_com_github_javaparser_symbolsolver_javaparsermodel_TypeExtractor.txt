FILE: TypeExtractor.java
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel [ <16:43 16:57>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.javaparsermodel [ <1:44 1:58>]
QUALIFIER: com.github.javaparser.symbolsolver [ <1:31 1:42>]
QUALIFIER: com.github.javaparser.symbolsolver [ <15:30 15:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <16:30 16:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <17:30 17:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <18:30 18:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <19:30 19:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <20:30 20:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <21:30 21:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <22:30 22:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <23:30 23:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <24:30 24:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <25:30 25:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <26:30 26:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <27:30 27:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <28:30 28:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <37:37 37:48>]
QUALIFIER: com.github.javaparser.symbolsolver [ <483:51 483:62>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver
QUALIFIER: com.github.javaparser [ <1:20 1:29>]
QUALIFIER: com.github.javaparser [ <3:19 3:28>]
QUALIFIER: com.github.javaparser [ <4:19 4:28>]
QUALIFIER: com.github.javaparser [ <5:19 5:28>]
QUALIFIER: com.github.javaparser [ <6:19 6:28>]
QUALIFIER: com.github.javaparser [ <7:19 7:28>]
QUALIFIER: com.github.javaparser [ <8:19 8:28>]
QUALIFIER: com.github.javaparser [ <9:19 9:28>]
QUALIFIER: com.github.javaparser [ <10:19 10:28>]
QUALIFIER: com.github.javaparser [ <11:19 11:28>]
QUALIFIER: com.github.javaparser [ <12:19 12:28>]
QUALIFIER: com.github.javaparser [ <13:19 13:28>]
QUALIFIER: com.github.javaparser [ <14:19 14:28>]
QUALIFIER: com.github.javaparser [ <15:19 15:28>]
QUALIFIER: com.github.javaparser [ <16:19 16:28>]
QUALIFIER: com.github.javaparser [ <17:19 17:28>]
QUALIFIER: com.github.javaparser [ <18:19 18:28>]
QUALIFIER: com.github.javaparser [ <19:19 19:28>]
QUALIFIER: com.github.javaparser [ <20:19 20:28>]
QUALIFIER: com.github.javaparser [ <21:19 21:28>]
QUALIFIER: com.github.javaparser [ <22:19 22:28>]
QUALIFIER: com.github.javaparser [ <23:19 23:28>]
QUALIFIER: com.github.javaparser [ <24:19 24:28>]
QUALIFIER: com.github.javaparser [ <25:19 25:28>]
QUALIFIER: com.github.javaparser [ <26:19 26:28>]
QUALIFIER: com.github.javaparser [ <27:19 27:28>]
QUALIFIER: com.github.javaparser [ <28:19 28:28>]
QUALIFIER: com.github.javaparser [ <37:26 37:35>]
QUALIFIER: com.github.javaparser [ <146:20 146:29>]
QUALIFIER: com.github.javaparser [ <483:40 483:49>]
SYMBOL_PACKAGE: com.github.javaparser
QUALIFIER: com.github [ <1:13 1:18>]
QUALIFIER: com.github [ <3:12 3:17>]
QUALIFIER: com.github [ <4:12 4:17>]
QUALIFIER: com.github [ <5:12 5:17>]
QUALIFIER: com.github [ <6:12 6:17>]
QUALIFIER: com.github [ <7:12 7:17>]
QUALIFIER: com.github [ <8:12 8:17>]
QUALIFIER: com.github [ <9:12 9:17>]
QUALIFIER: com.github [ <10:12 10:17>]
QUALIFIER: com.github [ <11:12 11:17>]
QUALIFIER: com.github [ <12:12 12:17>]
QUALIFIER: com.github [ <13:12 13:17>]
QUALIFIER: com.github [ <14:12 14:17>]
QUALIFIER: com.github [ <15:12 15:17>]
QUALIFIER: com.github [ <16:12 16:17>]
QUALIFIER: com.github [ <17:12 17:17>]
QUALIFIER: com.github [ <18:12 18:17>]
QUALIFIER: com.github [ <19:12 19:17>]
QUALIFIER: com.github [ <20:12 20:17>]
QUALIFIER: com.github [ <21:12 21:17>]
QUALIFIER: com.github [ <22:12 22:17>]
QUALIFIER: com.github [ <23:12 23:17>]
QUALIFIER: com.github [ <24:12 24:17>]
QUALIFIER: com.github [ <25:12 25:17>]
QUALIFIER: com.github [ <26:12 26:17>]
QUALIFIER: com.github [ <27:12 27:17>]
QUALIFIER: com.github [ <28:12 28:17>]
QUALIFIER: com.github [ <37:19 37:24>]
QUALIFIER: com.github [ <146:13 146:18>]
QUALIFIER: com.github [ <483:33 483:38>]
SYMBOL_PACKAGE: com.github
QUALIFIER: com [ <1:9 1:11>]
QUALIFIER: com [ <3:8 3:10>]
QUALIFIER: com [ <4:8 4:10>]
QUALIFIER: com [ <5:8 5:10>]
QUALIFIER: com [ <6:8 6:10>]
QUALIFIER: com [ <7:8 7:10>]
QUALIFIER: com [ <8:8 8:10>]
QUALIFIER: com [ <9:8 9:10>]
QUALIFIER: com [ <10:8 10:10>]
QUALIFIER: com [ <11:8 11:10>]
QUALIFIER: com [ <12:8 12:10>]
QUALIFIER: com [ <13:8 13:10>]
QUALIFIER: com [ <14:8 14:10>]
QUALIFIER: com [ <15:8 15:10>]
QUALIFIER: com [ <16:8 16:10>]
QUALIFIER: com [ <17:8 17:10>]
QUALIFIER: com [ <18:8 18:10>]
QUALIFIER: com [ <19:8 19:10>]
QUALIFIER: com [ <20:8 20:10>]
QUALIFIER: com [ <21:8 21:10>]
QUALIFIER: com [ <22:8 22:10>]
QUALIFIER: com [ <23:8 23:10>]
QUALIFIER: com [ <24:8 24:10>]
QUALIFIER: com [ <25:8 25:10>]
QUALIFIER: com [ <26:8 26:10>]
QUALIFIER: com [ <27:8 27:10>]
QUALIFIER: com [ <28:8 28:10>]
QUALIFIER: com [ <29:8 29:10>]
QUALIFIER: com [ <37:15 37:17>]
QUALIFIER: com [ <146:9 146:11>]
QUALIFIER: com [ <483:29 483:31>]
SYMBOL_PACKAGE: com
QUALIFIER: com.github.javaparser.ast [ <3:30 3:32>]
QUALIFIER: com.github.javaparser.ast [ <4:30 4:32>]
QUALIFIER: com.github.javaparser.ast [ <5:30 5:32>]
QUALIFIER: com.github.javaparser.ast [ <6:30 6:32>]
QUALIFIER: com.github.javaparser.ast [ <7:30 7:32>]
QUALIFIER: com.github.javaparser.ast [ <8:30 8:32>]
QUALIFIER: com.github.javaparser.ast [ <9:30 9:32>]
QUALIFIER: com.github.javaparser.ast [ <10:30 10:32>]
QUALIFIER: com.github.javaparser.ast [ <11:30 11:32>]
QUALIFIER: com.github.javaparser.ast [ <12:30 12:32>]
QUALIFIER: com.github.javaparser.ast [ <13:30 13:32>]
QUALIFIER: com.github.javaparser.ast [ <14:30 14:32>]
QUALIFIER: com.github.javaparser.ast [ <146:31 146:33>]
SYMBOL_PACKAGE: com.github.javaparser.ast
QUALIFIER: com.github.javaparser.ast.body [ <5:34 5:37>]
QUALIFIER: com.github.javaparser.ast.body [ <6:34 6:37>]
QUALIFIER: com.github.javaparser.ast.body [ <7:34 7:37>]
QUALIFIER: com.github.javaparser.ast.body [ <8:34 8:37>]
SYMBOL_PACKAGE: com.github.javaparser.ast.body
SYMBOL_PACKAGE: com.github.javaparser.ast.expr
QUALIFIER: com.github.javaparser.ast.stmt [ <10:34 10:37>]
QUALIFIER: com.github.javaparser.ast.stmt [ <11:34 11:37>]
QUALIFIER: com.github.javaparser.ast.stmt [ <12:34 12:37>]
QUALIFIER: com.github.javaparser.ast.stmt [ <13:34 13:37>]
SYMBOL_PACKAGE: com.github.javaparser.ast.stmt
QUALIFIER: com.github.javaparser.ast.type [ <14:34 14:37>]
QUALIFIER: com.github.javaparser.ast.type [ <146:35 146:38>]
SYMBOL_PACKAGE: com.github.javaparser.ast.type
QUALIFIER: com.github.javaparser.symbolsolver.core.resolution [ <15:48 15:57>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.core.resolution
QUALIFIER: com.github.javaparser.symbolsolver.core [ <15:43 15:46>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.core
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserSymbolDeclaration [ <362:23 362:49>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserSymbolDeclaration [ <482:23 482:49>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.declarations [ <16:59 16:70>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.javaparsermodel.declarations
QUALIFIER: com.github.javaparser.symbolsolver.logic.FunctionalInterfaceLogic [ <405:58 405:81>]
QUALIFIER: com.github.javaparser.symbolsolver.logic.FunctionalInterfaceLogic [ <499:58 499:81>]
QUALIFIER: com.github.javaparser.symbolsolver.logic [ <17:43 17:47>]
QUALIFIER: com.github.javaparser.symbolsolver.logic [ <18:43 18:47>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.logic
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations [ <483:70 483:81>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.declarations
QUALIFIER: com.github.javaparser.symbolsolver.model [ <19:43 19:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <20:43 20:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <21:43 21:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <22:43 22:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <23:43 23:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <24:43 24:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <483:64 483:68>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model
QUALIFIER: com.github.javaparser.symbolsolver.model.methods [ <20:49 20:55>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.methods
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ <21:49 21:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ <22:49 22:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ <23:49 23:58>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.resolution
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.typesystem
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider [ <409:71 409:86>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider [ <410:78 410:93>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider [ <507:82 507:97>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel [ <25:43 25:57>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel [ <26:43 26:57>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.reflectionmodel
QUALIFIER: com.github.javaparser.symbolsolver.resolution [ <27:43 27:52>]
QUALIFIER: com.github.javaparser.symbolsolver.resolution [ <28:43 28:52>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.resolution
QUALIFIER: com.github.javaparser.symbolsolver.resolution.typesolvers [ <28:54 28:64>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.resolution.typesolvers
QUALIFIER: com.google.common.collect [ <29:26 29:32>]
SYMBOL_PACKAGE: com.google.common.collect
QUALIFIER: com.google.common [ <29:19 29:24>]
SYMBOL_PACKAGE: com.google.common
QUALIFIER: com.google [ <29:12 29:17>]
SYMBOL_PACKAGE: com.google
QUALIFIER: java.util [ <31:13 31:16>]
QUALIFIER: java.util [ <32:13 32:16>]
QUALIFIER: java.util [ <33:13 33:16>]
QUALIFIER: java.util [ <34:13 34:16>]
QUALIFIER: java.util [ <35:13 35:16>]
SYMBOL_PACKAGE: java.util
QUALIFIER: java [ <31:8 31:11>]
QUALIFIER: java [ <32:8 32:11>]
QUALIFIER: java [ <33:8 33:11>]
QUALIFIER: java [ <34:8 34:11>]
QUALIFIER: java [ <35:8 35:11>]
SYMBOL_PACKAGE: java
QUALIFIER: java.util.logging [ <33:18 33:24>]
QUALIFIER: java.util.logging [ <34:18 34:24>]
QUALIFIER: java.util.logging [ <35:18 35:24>]
SYMBOL_PACKAGE: java.util.logging
QUALIFIER: java.util.logging.Level [ <44:25 44:29>]
QUALIFIER: java.util.logging.Level [ <46:33 46:37>]
QUALIFIER: java.util.logging.Logger [ <41:36 41:41>]
SYMBOL_METHOD: static com.github.javaparser.ast.Node com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
QUALIFIER: com.github.javaparser.symbolsolver.javaparser.Navigator [ <37:61 37:69>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparser [ <37:50 37:59>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.javaparser
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor [ <54:9 54:12>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor [ <55:9 55:12>]
SYMBOL_CLASS: public com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor [ <39:1 <39:14 39:26> 523:1>]
SYMBOL_FIELD: private static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger [ <41:27 41:32>]
SYMBOL_METHOD: static java.util.logging.Logger java.util.logging.Logger.getLogger(java.lang.String)
SYMBOL_METHOD: java.lang.String java.lang.Class<T>.getCanonicalName()
SYMBOL_PACKAGE: java.lang
SYMBOL_METHOD: void java.util.logging.Logger.setLevel(java.util.logging.Level)
SYMBOL_FIELD: static java.util.logging.Level java.util.logging.Level.INFO
SYMBOL_METHOD: java.util.logging.ConsoleHandler.ConsoleHandler()
SYMBOL_METHOD: void java.util.logging.Handler.setLevel(java.util.logging.Level)
SYMBOL_METHOD: void java.util.logging.Logger.addHandler(java.util.logging.Handler)
SYMBOL_FIELD: private com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <50:24 50:33>]
SYMBOL_FIELD: private com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <51:30 51:35>]
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.TypeExtractor(com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade) [ <53:5 <53:5 <53:12 53:24> 53:72> 56:5>]
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) [ <58:5 <58:5 <59:17 59:21> 59:68> 69:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsageVariableType(com.github.javaparser.ast.body.VariableDeclarator)
SYMBOL_METHOD: java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)
SYMBOL_METHOD: java.lang.Class<?> java.lang.Object.getClass()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) [ <71:5 <71:5 <72:17 72:21> 72:59> 77:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.type.Type com.github.javaparser.ast.body.Parameter.getType()
SYMBOL_METHOD: java.lang.IllegalStateException.IllegalStateException(java.lang.String)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.Node)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) [ <80:5 <80:5 <81:17 81:21> 81:65> 87:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean)
SYMBOL_METHOD: R com.github.javaparser.ast.visitor.Visitable.accept<R, A>(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)
SYMBOL_METHOD: com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.ArrayAccessExpr.getName()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) [ <89:5 <89:5 <90:17 90:21> 90:67> 96:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(com.github.javaparser.ast.type.Type, com.github.javaparser.symbolsolver.core.resolution.Context)
SYMBOL_METHOD: com.github.javaparser.ast.type.Type com.github.javaparser.ast.expr.ArrayCreationExpr.getElementType()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.core.resolution.Context com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory [ <91:65 91:81>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory [ <140:54 140:70>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory [ <183:71 183:87>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory [ <381:69 381:85>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory [ <399:31 399:47>]
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory [ <493:31 493:47>]
SYMBOL_BUILTIN_TYPE: int
SYMBOL_METHOD: int com.github.javaparser.ast.NodeList<N>.size()
SYMBOL_METHOD: com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel> com.github.javaparser.ast.expr.ArrayCreationExpr.getLevels()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean) [ <98:5 <98:5 <99:17 99:21> 99:70> 101:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Boolean) [ <103:5 <103:5 <104:17 104:21> 104:60> 106:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.AssignExpr.getTarget()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) [ <108:5 <108:5 <109:17 109:21> 109:60> 136:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.expr.BinaryExpr.Operator com.github.javaparser.ast.expr.BinaryExpr.getOperator()
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.PLUS
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.MINUS
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.DIVIDE
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.MULTIPLY
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getBinaryTypeConcrete(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean)
SYMBOL_METHOD: com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.BinaryExpr.getLeft()
SYMBOL_METHOD: com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.BinaryExpr.getRight()
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.LESS_EQUALS
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.LESS
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.GREATER
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.GREATER_EQUALS
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.EQUALS
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.NOT_EQUALS
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.OR
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.AND
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType [ <124:24 124:36>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType [ <228:16 228:28>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType [ <238:16 238:28>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType [ <243:16 243:28>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType [ <248:16 248:28>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType [ <254:20 254:32>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType [ <256:16 256:28>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType [ <261:16 261:28>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType [ <338:24 338:36>]
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.BOOLEAN
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.BINARY_AND
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.BINARY_OR
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.SIGNED_RIGHT_SHIFT
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.UNSIGNED_RIGHT_SHIFT
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.LEFT_SHIFT
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.REMAINDER
SYMBOL_FIELD: com.github.javaparser.ast.expr.BinaryExpr.Operator.XOR
SYMBOL_METHOD: java.lang.String java.lang.Enum<E>.name()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) [ <138:5 <138:5 <139:17 139:21> 139:58> 141:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.type.Type com.github.javaparser.ast.expr.CastExpr.getType()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) [ <143:5 <143:5 <144:17 144:21> 144:59> 149:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.type.Type com.github.javaparser.ast.expr.ClassExpr.getType()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <415:52 415:68>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: static com.google.common.collect.ImmutableList<E> com.google.common.collect.ImmutableList<E>.of<E>(E)
QUALIFIER: com.google.common.collect.ImmutableList [ <148:95 148:107>]
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Boolean) [ <151:5 <151:5 <152:17 152:21> 152:65> 154:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.ConditionalExpr.getThenExpr()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Boolean) [ <156:5 <156:5 <157:17 157:21> 157:62> 159:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.EnclosedExpr.getInner()
SYMBOL_METHOD: private com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) [ <165:1 <165:1 <165:18 165:39> 165:98> 175:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String)
SYMBOL_METHOD: java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId()
SYMBOL_METHOD: com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.FieldAccessExpr.getName()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType(java.lang.String)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException.UnsolvedSymbolException(java.lang.String)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) [ <177:5 <177:5 <178:17 178:21> 178:65> 224:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.FieldAccessExpr.getScope()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration> com.github.javaparser.symbolsolver.core.resolution.Context.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: java.lang.String com.github.javaparser.ast.Node.toString()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asReferenceType()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solve(com.github.javaparser.ast.expr.ThisExpr)
SYMBOL_METHOD: int java.lang.String.indexOf(int)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.resolution.TypeSolver.tryToSolveType(java.lang.String)
SYMBOL_METHOD: java.util.Optional<com.github.javaparser.symbolsolver.model.resolution.Value> com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(java.lang.String, com.github.javaparser.ast.Node)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.resolution.SymbolSolver.SymbolSolver(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.FieldAccessExpr.getField()
SYMBOL_METHOD: boolean java.util.Optional<T>.isPresent()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.resolution.Value.getType()
SYMBOL_METHOD: java.util.Optional<T>.T java.util.Optional<T>.get()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Boolean) [ <226:5 <226:5 <227:17 227:21> 227:64> 229:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Boolean)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) [ <231:5 <231:5 <232:17 232:21> 232:67> 234:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.resolution.TypeSolver.solveType(java.lang.String)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver.ReflectionTypeSolver()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Boolean) [ <236:5 <236:5 <237:17 237:21> 237:68> 239:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Boolean)
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.INT
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Boolean) [ <241:5 <241:5 <242:17 242:21> 242:65> 244:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Boolean)
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.LONG
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Boolean) [ <246:5 <246:5 <247:17 247:21> 247:65> 249:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Boolean)
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.CHAR
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) [ <251:5 <251:5 <252:17 252:21> 252:67> 257:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean)
SYMBOL_METHOD: boolean java.lang.String.endsWith(java.lang.String)
SYMBOL_METHOD: java.lang.String java.lang.String.toLowerCase()
SYMBOL_METHOD: java.lang.String com.github.javaparser.ast.expr.LiteralStringValueExpr.getValue()
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.FLOAT
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.DOUBLE
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Boolean) [ <259:5 <259:5 <260:17 260:21> 260:68> 262:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Boolean)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Boolean) [ <264:5 <264:5 <265:17 265:21> 265:65> 267:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Boolean)
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.NullType [ <266:16 266:23>]
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.model.typesystem.NullType com.github.javaparser.symbolsolver.model.typesystem.NullType.INSTANCE
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) [ <269:5 <269:5 <270:17 270:21> 270:64> 278:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean)
SYMBOL_METHOD: void java.util.logging.Logger.finest(java.lang.String)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.methods.MethodUsage com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(com.github.javaparser.ast.expr.MethodCallExpr)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.returnType()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) [ <280:5 <280:5 <281:17 281:21> 281:58> 289:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.NameExpr.getName()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException.UnsolvedSymbolException(java.lang.String, java.lang.String)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean) [ <291:5 <291:5 <292:17 292:21> 292:68> 295:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.type.ClassOrInterfaceType com.github.javaparser.ast.expr.ObjectCreationExpr.getType()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) [ <297:5 <297:5 <298:17 298:21> 298:58> 319:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean)
SYMBOL_METHOD: java.util.Optional<com.github.javaparser.ast.expr.Expression> com.github.javaparser.ast.expr.ThisExpr.getClassExpr()
SYMBOL_METHOD: java.util.Optional<N> com.github.javaparser.HasParentNode<T>.getAncestorOfType<N>(java.lang.Class<N>)
SYMBOL_METHOD: java.util.Optional<com.github.javaparser.ast.body.ClassOrInterfaceDeclaration> com.github.javaparser.ast.CompilationUnit.getClassByName(java.lang.String)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeDeclaration(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeDeclaration(com.github.javaparser.ast.body.TypeDeclaration<?>)
SYMBOL_METHOD: com.github.javaparser.ast.body.TypeDeclaration<?> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.findContainingTypeDecl(com.github.javaparser.ast.Node)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) [ <321:5 <321:5 <322:17 322:21> 322:59> 329:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getSuperClass()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) [ <331:5 <331:5 <332:17 332:21> 332:59> 347:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.expr.UnaryExpr.Operator com.github.javaparser.ast.expr.UnaryExpr.getOperator()
SYMBOL_FIELD: com.github.javaparser.ast.expr.UnaryExpr.Operator.MINUS
SYMBOL_FIELD: com.github.javaparser.ast.expr.UnaryExpr.Operator.PLUS
SYMBOL_METHOD: com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.UnaryExpr.getExpression()
SYMBOL_FIELD: com.github.javaparser.ast.expr.UnaryExpr.Operator.LOGICAL_COMPLEMENT
SYMBOL_FIELD: com.github.javaparser.ast.expr.UnaryExpr.Operator.POSTFIX_DECREMENT
SYMBOL_FIELD: com.github.javaparser.ast.expr.UnaryExpr.Operator.PREFIX_DECREMENT
SYMBOL_FIELD: com.github.javaparser.ast.expr.UnaryExpr.Operator.POSTFIX_INCREMENT
SYMBOL_FIELD: com.github.javaparser.ast.expr.UnaryExpr.Operator.PREFIX_INCREMENT
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) [ <349:5 <349:5 <350:17 350:21> 350:73> 355:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator> com.github.javaparser.ast.expr.VariableDeclarationExpr.getVariables()
SYMBOL_METHOD: java.lang.UnsupportedOperationException.UnsupportedOperationException()
SYMBOL_METHOD: com.github.javaparser.ast.NodeList<N>.N com.github.javaparser.ast.NodeList<N>.get(int)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) [ <358:5 <358:5 <359:17 359:21> 359:60> 476:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean)
SYMBOL_METHOD: static int com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserSymbolDeclaration.getParamPos(com.github.javaparser.ast.Node)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solve(com.github.javaparser.ast.expr.MethodCallExpr)
SYMBOL_METHOD: com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.MethodCallExpr.getName()
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int)
SYMBOL_METHOD: java.util.Optional<com.github.javaparser.ast.expr.Expression> com.github.javaparser.ast.expr.MethodCallExpr.getScope()
SYMBOL_BUILTIN_TYPE: boolean
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(com.github.javaparser.ast.Node)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParameterValueProvider.useThisTypeParametersOnTheGivenType(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveGenericTypes(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.core.resolution.Context, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: static java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.logic.FunctionalInterfaceLogic.getFunctionalMethod(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.logic.InferenceContext.InferenceContext(com.github.javaparser.symbolsolver.logic.ObjectProvider)
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider.INSTANCE
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.undeterminedParameters(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.declaringType()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration com.github.javaparser.symbolsolver.model.methods.MethodUsage.getDeclaration()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: com.github.javaparser.ast.stmt.Statement com.github.javaparser.ast.expr.LambdaExpr.getBody()
SYMBOL_METHOD: com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.stmt.ExpressionStmt.getExpression()
SYMBOL_METHOD: com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement> com.github.javaparser.ast.stmt.BlockStmt.getStatements()
SYMBOL_METHOD: java.util.List<N> com.github.javaparser.ast.Node.getNodesByType<N>(java.lang.Class<N>)
SYMBOL_METHOD: int java.util.List<E>.size()
SYMBOL_METHOD: java.util.Optional<T>.T java.util.Optional<T>.orElse(java.util.Optional<T>.T)
SYMBOL_METHOD: java.util.Optional<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.findFirst()
SYMBOL_METHOD: java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>)
SYMBOL_METHOD: java.util.stream.Stream<R> java.util.stream.Stream<T>.map<R>(java.util.function.Function<? super T, ? extends R>)
SYMBOL_METHOD: java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream()
SYMBOL_METHOD: java.util.Optional<com.github.javaparser.ast.expr.Expression> com.github.javaparser.ast.stmt.ReturnStmt.getExpression()
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.VoidType [ <438:44 438:51>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.VoidType [ <443:37 443:44>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.VoidType [ <446:36 446:43>]
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.VoidType.INSTANCE
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isVoid()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isNull()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) [ <478:5 <478:5 <479:17 479:21> 479:69> 520:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solve(com.github.javaparser.ast.expr.MethodCallExpr, boolean)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.getParamType(int)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.methods.MethodUsage com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.toMethodUsage(com.github.javaparser.ast.expr.MethodReferenceExpr)
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.CompilationUnit [ <3:34 3:48>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.NodeList<N> [ <4:34 4:41>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration [ <5:39 5:65>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.body.FieldDeclaration [ <6:39 6:54>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.body.Parameter [ <7:39 7:47>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.body.VariableDeclarator [ <8:39 8:56>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.expr [ <9:34 9:37>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.stmt.BlockStmt [ <10:39 10:47>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.stmt.ExpressionStmt [ <11:39 11:52>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.stmt.ReturnStmt [ <12:39 12:48>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.stmt.Statement [ <13:39 13:47>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.ast.type.UnknownType [ <14:39 14:49>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.core.resolution.Context [ <15:59 15:65>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserSymbolDeclaration [ <16:72 16:98>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.logic.FunctionalInterfaceLogic [ <17:49 17:72>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.logic.InferenceContext [ <18:49 18:64>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.model.declarations [ <19:49 19:60>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <20:57 20:67>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <21:60 21:74>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <22:60 22:69>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.model.resolution.Value [ <23:60 23:64>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.model.typesystem [ <24:49 24:58>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider [ <25:59 25:74>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <26:59 26:84>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.resolution.SymbolSolver [ <27:54 27:65>]
REFERENCE_IMPORT: TypeExtractor.java -> com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver [ <28:66 28:85>]
REFERENCE_IMPORT: TypeExtractor.java -> com.google.common.collect.ImmutableList<E> [ <29:34 29:46>]
REFERENCE_IMPORT: TypeExtractor.java -> java.util.List<E> [ <31:18 31:21>]
REFERENCE_IMPORT: TypeExtractor.java -> java.util.Optional<T> [ <32:18 32:25>]
REFERENCE_IMPORT: TypeExtractor.java -> java.util.logging.ConsoleHandler [ <33:26 33:39>]
REFERENCE_IMPORT: TypeExtractor.java -> java.util.logging.Level [ <34:26 34:30>]
REFERENCE_IMPORT: TypeExtractor.java -> java.util.logging.Logger [ <35:26 35:31>]
REFERENCE_IMPORT: TypeExtractor.java -> static com.github.javaparser.ast.Node com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node) [ <37:71 37:83>]
REFERENCE_INHERITANCE: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor -> com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter [ <39:36 39:56>]
REFERENCE_TYPE_USAGE: static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger -> java.util.logging.Logger [ <41:20 41:25>]
REFERENCE_CALL: static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger -> static java.util.logging.Logger java.util.logging.Logger.getLogger(java.lang.String) [ <41:43 41:51>]
REFERENCE_CALL: static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <41:73 41:88>]
REFERENCE_TYPE_USAGE: static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger -> com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor [ <41:53 41:65>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor -> void java.util.logging.Logger.setLevel(java.util.logging.Level) [ <44:16 44:23>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor -> static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger [ <44:9 44:14>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor -> static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger [ <47:9 47:14>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor -> static java.util.logging.Level java.util.logging.Level.INFO [ <44:31 44:34>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor -> static java.util.logging.Level java.util.logging.Level.INFO [ <46:39 46:42>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor -> java.util.logging.ConsoleHandler [ <45:9 45:22>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor -> java.util.logging.ConsoleHandler [ <45:45 45:58>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor -> java.util.logging.ConsoleHandler.ConsoleHandler() [ <45:45 45:58>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor -> void java.util.logging.Handler.setLevel(java.util.logging.Level) [ <46:24 46:31>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor -> void java.util.logging.Logger.addHandler(java.util.logging.Handler) [ <47:16 47:25>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <50:13 50:22>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade [ <51:13 51:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.TypeExtractor(com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <53:26 53:35>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.TypeExtractor(com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade [ <53:49 53:64>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.TypeExtractor(com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <54:14 54:23>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.TypeExtractor(com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <55:14 55:19>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) [ <59:17 59:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> java.lang.Override [ <58:6 58:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <59:12 59:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> com.github.javaparser.ast.body.VariableDeclarator [ <59:23 59:40>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> java.lang.Boolean [ <59:48 59:54>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> static com.github.javaparser.ast.Node com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node) [ <60:13 60:25>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> static com.github.javaparser.ast.Node com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node) [ <63:20 63:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> static com.github.javaparser.ast.Node com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node) [ <67:53 67:65>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> com.github.javaparser.ast.body.FieldDeclaration [ <60:44 60:59>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsageVariableType(com.github.javaparser.ast.body.VariableDeclarator) [ <62:27 62:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsageVariableType(com.github.javaparser.ast.body.VariableDeclarator) [ <65:27 65:52>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <62:20 62:25>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <65:20 65:25>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> com.github.javaparser.ast.expr.VariableDeclarationExpr [ <63:51 63:73>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <67:23 67:51>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> java.lang.UnsupportedOperationException [ <67:23 67:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <67:84 67:99>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Boolean) -> java.lang.Class<?> java.lang.Object.getClass() [ <67:73 67:80>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) [ <72:17 72:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> java.lang.Override [ <71:6 71:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <72:12 72:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> com.github.javaparser.ast.body.Parameter [ <72:23 72:31>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> java.lang.Boolean [ <72:39 72:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> com.github.javaparser.ast.type.Type com.github.javaparser.ast.body.Parameter.getType() [ <73:18 73:24>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> com.github.javaparser.ast.type.Type com.github.javaparser.ast.body.Parameter.getType() [ <76:43 76:49>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> com.github.javaparser.ast.type.UnknownType [ <73:39 73:49>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> java.lang.IllegalStateException.IllegalStateException(java.lang.String) [ <74:23 74:43>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> java.lang.IllegalStateException [ <74:23 74:43>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.Node) [ <76:23 76:36>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <76:16 76:21>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) [ <81:17 81:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) -> java.lang.Override [ <80:6 80:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <81:12 81:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <82:9 82:12>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.ArrayAccessExpr [ <81:23 81:37>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) -> java.lang.Boolean [ <81:45 81:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) -> R com.github.javaparser.ast.visitor.Visitable.accept<R, A>(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A) [ <82:46 82:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.ArrayAccessExpr.getName() [ <82:36 82:42>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray() [ <83:28 83:34>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType() [ <84:49 84:64>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType [ <84:22 84:30>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) [ <90:17 90:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> java.lang.Override [ <89:6 89:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <90:12 90:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <91:9 91:12>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.ArrayCreationExpr [ <90:23 90:39>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> java.lang.Boolean [ <90:47 90:53>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(com.github.javaparser.ast.type.Type, com.github.javaparser.symbolsolver.core.resolution.Context) [ <91:27 91:40>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <91:20 91:25>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> com.github.javaparser.ast.type.Type com.github.javaparser.ast.expr.ArrayCreationExpr.getElementType() [ <91:47 91:60>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.core.resolution.Context com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <91:83 91:92>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <91:100 91:109>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> int [ <92:14 92:16>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> int com.github.javaparser.ast.NodeList<N>.size() [ <92:46 92:49>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel> com.github.javaparser.ast.expr.ArrayCreationExpr.getLevels() [ <92:34 92:42>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <93:23 93:31>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType [ <93:23 93:31>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean) [ <99:17 99:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean) -> java.lang.Override [ <98:6 98:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <99:12 99:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.ArrayInitializerExpr [ <99:23 99:42>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean) -> java.lang.Boolean [ <99:50 99:56>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <100:19 100:47>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException [ <100:19 100:47>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean) -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <100:65 100:80>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Boolean) -> java.lang.Class<?> java.lang.Object.getClass() [ <100:54 100:61>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Boolean) [ <104:17 104:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Boolean) -> java.lang.Override [ <103:6 103:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <104:12 104:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.AssignExpr [ <104:23 104:32>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Boolean) -> java.lang.Boolean [ <104:40 104:46>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Boolean) -> R com.github.javaparser.ast.visitor.Visitable.accept<R, A>(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A) [ <105:33 105:38>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.AssignExpr.getTarget() [ <105:21 105:29>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) [ <109:17 109:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> java.lang.Override [ <108:6 108:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <109:12 109:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr [ <109:23 109:32>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> java.lang.Boolean [ <109:40 109:46>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator com.github.javaparser.ast.expr.BinaryExpr.getOperator() [ <110:22 110:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator com.github.javaparser.ast.expr.BinaryExpr.getOperator() [ <134:71 134:81>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.PLUS [ <111:18 111:21>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.MINUS [ <112:18 112:22>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.DIVIDE [ <113:18 113:23>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.MULTIPLY [ <114:18 114:25>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getBinaryTypeConcrete(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean) [ <115:31 115:51>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <115:24 115:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.BinaryExpr.getLeft() [ <115:58 115:64>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.BinaryExpr.getLeft() [ <132:29 132:35>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.BinaryExpr.getRight() [ <115:74 115:81>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.LESS_EQUALS [ <116:18 116:28>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.LESS [ <117:18 117:21>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.GREATER [ <118:18 118:24>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.GREATER_EQUALS [ <119:18 119:31>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.EQUALS [ <120:18 120:23>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.NOT_EQUALS [ <121:18 121:27>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.OR [ <122:18 122:19>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.AND [ <123:18 123:20>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.BOOLEAN [ <124:38 124:44>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.BINARY_AND [ <125:18 125:27>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.BINARY_OR [ <126:18 126:26>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.SIGNED_RIGHT_SHIFT [ <127:18 127:35>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.UNSIGNED_RIGHT_SHIFT [ <128:18 128:37>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.LEFT_SHIFT [ <129:18 129:27>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.REMAINDER [ <130:18 130:26>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BinaryExpr.Operator.XOR [ <131:18 131:20>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> R com.github.javaparser.ast.visitor.Visitable.accept<R, A>(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A) [ <132:39 132:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <134:27 134:55>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException [ <134:27 134:55>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Boolean) -> java.lang.String java.lang.Enum<E>.name() [ <134:85 134:88>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) [ <139:17 139:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) -> java.lang.Override [ <138:6 138:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <139:12 139:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.CastExpr [ <139:23 139:30>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) -> java.lang.Boolean [ <139:38 139:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(com.github.javaparser.ast.type.Type, com.github.javaparser.symbolsolver.core.resolution.Context) [ <140:23 140:36>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <140:16 140:21>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) -> com.github.javaparser.ast.type.Type com.github.javaparser.ast.expr.CastExpr.getType() [ <140:43 140:49>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.core.resolution.Context com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <140:72 140:81>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <140:89 140:98>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) [ <144:17 144:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> java.lang.Override [ <143:6 143:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <144:12 144:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <147:9 147:12>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.ClassExpr [ <144:23 144:31>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> java.lang.Boolean [ <144:39 144:45>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.ast.type.Type [ <146:40 146:43>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.ast.type.Type com.github.javaparser.ast.expr.ClassExpr.getType() [ <146:60 146:66>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.ast.type.Type com.github.javaparser.ast.expr.ClassExpr.getType() [ <147:60 147:66>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.Node) [ <147:31 147:44>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <147:24 147:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <148:20 148:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <148:20 148:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <148:42 148:67>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <148:42 148:67>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> java.lang.Class<T> [ <148:69 148:73>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <148:82 148:91>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <148:122 148:131>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Boolean) -> static com.google.common.collect.ImmutableList<E> com.google.common.collect.ImmutableList<E>.of<E>(E) [ <148:109 148:110>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Boolean) [ <152:17 152:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Boolean) -> java.lang.Override [ <151:6 151:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <152:12 152:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.ConditionalExpr [ <152:23 152:37>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Boolean) -> java.lang.Boolean [ <152:45 152:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Boolean) -> R com.github.javaparser.ast.visitor.Visitable.accept<R, A>(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A) [ <153:35 153:40>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.ConditionalExpr.getThenExpr() [ <153:21 153:31>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Boolean) [ <157:17 157:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Boolean) -> java.lang.Override [ <156:6 156:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <157:12 157:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.EnclosedExpr [ <157:23 157:34>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Boolean) -> java.lang.Boolean [ <157:42 157:48>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Boolean) -> R com.github.javaparser.ast.visitor.Visitable.accept<R, A>(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A) [ <158:32 158:37>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.EnclosedExpr.getInner() [ <158:21 158:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <165:13 165:16>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <165:41 165:64>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.ast.expr.FieldAccessExpr [ <165:78 165:92>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) [ <168:24 168:31>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <168:48 168:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <169:55 169:59>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <170:62 170:66>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <171:84 171:88>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <173:62 173:66>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.FieldAccessExpr.getName() [ <168:38 168:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.FieldAccessExpr.getName() [ <169:45 169:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.FieldAccessExpr.getName() [ <170:52 170:58>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.FieldAccessExpr.getName() [ <171:74 171:80>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.FieldAccessExpr.getName() [ <173:52 173:58>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType() [ <169:64 169:70>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) [ <169:31 169:38>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.hasInternalType(java.lang.String) [ <170:31 170:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <171:24 171:40>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <171:24 171:40>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getInternalType(java.lang.String) [ <171:53 171:67>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <171:94 171:103>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException.UnsolvedSymbolException(java.lang.String) [ <173:23 173:45>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) -> com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException [ <173:23 173:45>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) [ <178:17 178:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> java.lang.Override [ <177:6 177:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <178:12 178:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.FieldAccessExpr [ <178:23 178:37>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.FieldAccessExpr [ <181:44 181:58>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> java.lang.Boolean [ <178:45 178:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.FieldAccessExpr.getScope() [ <180:18 180:25>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.FieldAccessExpr.getScope() [ <181:22 181:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.FieldAccessExpr.getScope() [ <182:43 182:50>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.FieldAccessExpr.getScope() [ <189:25 189:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.FieldAccessExpr.getScope() [ <192:83 192:90>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.FieldAccessExpr.getScope() [ <201:25 201:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.FieldAccessExpr.getScope() [ <203:91 203:98>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.NameExpr [ <180:40 180:47>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression [ <182:13 182:22>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <183:29 183:43>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <192:29 192:43>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <381:45 381:59>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <183:13 183:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <192:13 192:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <203:13 203:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <214:13 214:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <183:29 183:43>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <192:29 192:43>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <195:17 195:31>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration> com.github.javaparser.symbolsolver.core.resolution.Context.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <183:118 183:126>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.core.resolution.Context com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <183:89 183:98>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <183:106 183:115>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <183:152 183:161>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <203:60 203:69>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <210:38 210:47>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <214:62 214:71>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <216:82 216:91>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.Node.toString() [ <183:140 183:147>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.Node.toString() [ <201:36 201:43>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.Node.toString() [ <203:102 203:109>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.Node.toString() [ <214:93 214:100>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved() [ <184:40 184:47>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved() [ <194:23 194:30>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved() [ <204:20 204:27>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved() [ <215:22 215:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) [ <186:24 186:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) [ <197:28 197:49>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.ast.expr.FieldAccessExpr) [ <205:24 205:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asReferenceType() [ <187:78 187:92>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asReferenceType() [ <197:76 197:90>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <187:48 187:74>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <195:66 195:92>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <205:50 205:76>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <216:51 216:77>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.ThisExpr [ <189:46 189:53>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.ThisExpr [ <192:68 192:75>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solve(com.github.javaparser.ast.expr.ThisExpr) [ <192:61 192:65>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <192:54 192:59>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <196:57 196:80>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <203:29 203:52>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <214:29 214:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> int java.lang.String.indexOf(int) [ <201:47 201:53>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <203:29 203:52>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <214:29 214:52>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <304:29 304:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.resolution.TypeSolver.tryToSolveType(java.lang.String) [ <203:71 203:84>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.resolution.TypeSolver.tryToSolveType(java.lang.String) [ <214:73 214:86>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.resolution.Value [ <208:18 208:22>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.resolution.Value [ <283:18 283:22>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> java.util.Optional<T> [ <208:9 208:16>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.Value [ <208:18 208:22>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> java.util.Optional<com.github.javaparser.symbolsolver.model.resolution.Value> com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(java.lang.String, com.github.javaparser.ast.Node) [ <210:50 210:67>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.resolution.SymbolSolver.SymbolSolver(com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <210:25 210:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.resolution.SymbolSolver [ <210:25 210:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <210:85 210:89>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <222:63 222:67>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.FieldAccessExpr.getField() [ <210:74 210:81>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.FieldAccessExpr.getField() [ <222:52 222:59>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException [ <211:18 211:40>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException [ <222:23 222:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <216:28 216:44>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <216:28 216:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> boolean java.util.Optional<T>.isPresent() [ <219:36 219:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.resolution.Value.getType() [ <220:32 220:38>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <220:26 220:28>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException.UnsolvedSymbolException(java.lang.String) [ <222:23 222:45>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Boolean) [ <227:17 227:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Boolean) -> java.lang.Override [ <226:6 226:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <227:12 227:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.InstanceOfExpr [ <227:23 227:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Boolean) -> java.lang.Boolean [ <227:44 227:50>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.BOOLEAN [ <228:30 228:36>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) [ <232:17 232:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) -> java.lang.Override [ <231:6 231:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <232:12 232:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.StringLiteralExpr [ <232:23 232:39>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) -> java.lang.Boolean [ <232:47 232:53>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <233:20 233:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <233:20 233:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.resolution.TypeSolver.solveType(java.lang.String) [ <233:65 233:73>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver.ReflectionTypeSolver() [ <233:42 233:61>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver [ <233:42 233:61>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <233:96 233:105>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Boolean) [ <237:17 237:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Boolean) -> java.lang.Override [ <236:6 236:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <237:12 237:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.IntegerLiteralExpr [ <237:23 237:40>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Boolean) -> java.lang.Boolean [ <237:48 237:54>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.INT [ <238:30 238:32>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Boolean) [ <242:17 242:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Boolean) -> java.lang.Override [ <241:6 241:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <242:12 242:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.LongLiteralExpr [ <242:23 242:37>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Boolean) -> java.lang.Boolean [ <242:45 242:51>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.LONG [ <243:30 243:33>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Boolean) [ <247:17 247:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Boolean) -> java.lang.Override [ <246:6 246:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <247:12 247:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.CharLiteralExpr [ <247:23 247:37>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Boolean) -> java.lang.Boolean [ <247:45 247:51>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.CHAR [ <248:30 248:33>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) [ <252:17 252:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) -> java.lang.Override [ <251:6 251:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <252:12 252:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.DoubleLiteralExpr [ <252:23 252:39>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) -> java.lang.Boolean [ <252:47 252:53>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) -> boolean java.lang.String.endsWith(java.lang.String) [ <253:43 253:50>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) -> java.lang.String java.lang.String.toLowerCase() [ <253:29 253:39>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.expr.LiteralStringValueExpr.getValue() [ <253:18 253:25>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.FLOAT [ <254:34 254:38>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.DOUBLE [ <256:30 256:35>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Boolean) [ <260:17 260:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Boolean) -> java.lang.Override [ <259:6 259:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <260:12 260:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.BooleanLiteralExpr [ <260:23 260:40>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Boolean) -> java.lang.Boolean [ <260:48 260:54>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.BOOLEAN [ <261:30 261:36>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Boolean) [ <265:17 265:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Boolean) -> java.lang.Override [ <264:6 264:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <265:12 265:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.NullLiteralExpr [ <265:23 265:37>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Boolean) -> java.lang.Boolean [ <265:45 265:51>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.NullType com.github.javaparser.symbolsolver.model.typesystem.NullType.INSTANCE [ <266:25 266:32>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) [ <270:17 270:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> java.lang.Override [ <269:6 269:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <270:12 270:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.MethodCallExpr [ <270:23 270:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> java.lang.Boolean [ <270:44 270:50>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> void java.util.logging.Logger.finest(java.lang.String) [ <271:16 271:21>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> void java.util.logging.Logger.finest(java.lang.String) [ <274:16 274:21>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> void java.util.logging.Logger.finest(java.lang.String) [ <275:16 275:21>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger [ <271:9 271:14>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger [ <274:9 274:14>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger [ <275:9 275:14>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <273:9 273:19>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(com.github.javaparser.ast.expr.MethodCallExpr) [ <273:34 273:51>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <273:27 273:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.returnType() [ <275:83 275:92>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.returnType() [ <276:20 276:29>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) [ <281:17 281:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> java.lang.Override [ <280:6 280:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <281:12 281:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.NameExpr [ <281:23 281:30>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> java.lang.Boolean [ <281:38 281:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> void java.util.logging.Logger.finest(java.lang.String) [ <282:16 282:21>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger [ <282:9 282:14>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> java.util.Optional<T> [ <283:9 283:16>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.Value [ <283:18 283:22>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> java.util.Optional<com.github.javaparser.symbolsolver.model.resolution.Value> com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(java.lang.String, com.github.javaparser.ast.Node) [ <283:62 283:79>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.resolution.SymbolSolver.SymbolSolver(com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <283:37 283:48>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.resolution.SymbolSolver [ <283:37 283:48>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <283:50 283:59>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <283:96 283:100>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <285:81 285:85>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.NameExpr.getName() [ <283:86 283:92>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.NameExpr.getName() [ <285:71 285:77>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> boolean java.util.Optional<T>.isPresent() [ <284:20 284:28>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException.UnsolvedSymbolException(java.lang.String, java.lang.String) [ <285:23 285:45>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException [ <285:23 285:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.resolution.Value.getType() [ <287:32 287:38>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Boolean) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <287:26 287:28>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean) [ <292:17 292:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean) -> java.lang.Override [ <291:6 291:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <292:12 292:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <293:9 293:12>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.ObjectCreationExpr [ <292:23 292:40>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean) -> java.lang.Boolean [ <292:48 292:54>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.Node) [ <293:28 293:41>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <293:21 293:26>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Boolean) -> com.github.javaparser.ast.type.ClassOrInterfaceType com.github.javaparser.ast.expr.ObjectCreationExpr.getType() [ <293:48 293:54>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) [ <298:17 298:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.lang.Override [ <297:6 297:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <298:12 298:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.ThisExpr [ <298:23 298:30>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.lang.Boolean [ <298:38 298:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> boolean java.util.Optional<T>.isPresent() [ <300:33 300:41>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> boolean java.util.Optional<T>.isPresent() [ <310:20 310:28>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> boolean java.util.Optional<T>.isPresent() [ <312:33 312:41>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.util.Optional<com.github.javaparser.ast.expr.Expression> com.github.javaparser.ast.expr.ThisExpr.getClassExpr() [ <300:18 300:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.util.Optional<com.github.javaparser.ast.expr.Expression> com.github.javaparser.ast.expr.ThisExpr.getClassExpr() [ <302:37 302:48>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.lang.String [ <302:13 302:18>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.Node.toString() [ <302:58 302:65>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <302:52 302:54>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <311:72 311:74>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <313:88 313:90>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <304:13 304:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <304:29 304:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.resolution.TypeSolver.tryToSolveType(java.lang.String) [ <304:74 304:87>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <304:63 304:72>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <306:82 306:91>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <313:96 313:105>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <318:102 318:111>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved() [ <305:23 305:30>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <306:28 306:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <313:32 313:48>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <318:20 318:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <306:28 306:44>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <313:32 313:48>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <318:20 318:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <306:52 306:78>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.ast.CompilationUnit [ <309:22 309:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.util.Optional<T> [ <309:13 309:20>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.util.Optional<T> [ <311:17 311:24>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.ast.CompilationUnit [ <309:22 309:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.ast.CompilationUnit [ <309:67 309:81>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.util.Optional<N> com.github.javaparser.HasParentNode<T>.getAncestorOfType<N>(java.lang.Class<N>) [ <309:49 309:65>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration [ <311:26 311:52>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration [ <311:26 311:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> java.util.Optional<com.github.javaparser.ast.body.ClassOrInterfaceDeclaration> com.github.javaparser.ast.CompilationUnit.getClassByName(java.lang.String) [ <311:78 311:91>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeDeclaration(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration) [ <313:57 313:74>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <313:50 313:55>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <318:38 318:43>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <318:64 318:69>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeDeclaration(com.github.javaparser.ast.body.TypeDeclaration<?>) [ <318:45 318:62>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Boolean) -> com.github.javaparser.ast.body.TypeDeclaration<?> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.findContainingTypeDecl(com.github.javaparser.ast.Node) [ <318:71 318:92>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) [ <322:17 322:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> java.lang.Override [ <321:6 321:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <322:12 322:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.SuperExpr [ <322:23 322:31>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> java.lang.Boolean [ <322:39 322:45>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <323:9 323:23>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeDeclaration(com.github.javaparser.ast.body.TypeDeclaration<?>) [ <323:45 323:62>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <323:38 323:43>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <323:64 323:69>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> com.github.javaparser.ast.body.TypeDeclaration<?> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.findContainingTypeDecl(com.github.javaparser.ast.Node) [ <323:71 323:92>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration [ <324:35 324:50>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration [ <325:22 325:37>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getSuperClass() [ <325:52 325:64>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <327:23 327:51>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException [ <327:23 327:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <327:69 327:84>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Boolean) -> java.lang.Class<?> java.lang.Object.getClass() [ <327:58 327:65>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) [ <332:17 332:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> java.lang.Override [ <331:6 331:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <332:12 332:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.UnaryExpr [ <332:23 332:31>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> java.lang.Boolean [ <332:39 332:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.UnaryExpr.Operator com.github.javaparser.ast.expr.UnaryExpr.getOperator() [ <333:22 333:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.UnaryExpr.Operator com.github.javaparser.ast.expr.UnaryExpr.getOperator() [ <345:62 345:72>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.UnaryExpr.Operator.MINUS [ <334:18 334:22>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.UnaryExpr.Operator.PLUS [ <335:18 335:21>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> R com.github.javaparser.ast.visitor.Visitable.accept<R, A>(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A) [ <336:45 336:50>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> R com.github.javaparser.ast.visitor.Visitable.accept<R, A>(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A) [ <343:45 343:50>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.UnaryExpr.getExpression() [ <336:29 336:41>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.expr.UnaryExpr.getExpression() [ <343:29 343:41>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.UnaryExpr.Operator.LOGICAL_COMPLEMENT [ <337:18 337:35>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.BOOLEAN [ <338:38 338:44>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.UnaryExpr.Operator.POSTFIX_DECREMENT [ <339:18 339:34>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.UnaryExpr.Operator.PREFIX_DECREMENT [ <340:18 340:33>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.UnaryExpr.Operator.POSTFIX_INCREMENT [ <341:18 341:34>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.UnaryExpr.Operator.PREFIX_INCREMENT [ <342:18 342:33>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <345:27 345:55>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException [ <345:27 345:55>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Boolean) -> java.lang.String java.lang.Enum<E>.name() [ <345:76 345:79>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) [ <350:17 350:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> java.lang.Override [ <349:6 349:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <350:12 350:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.VariableDeclarationExpr [ <350:23 350:45>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> java.lang.Boolean [ <350:53 350:59>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> int com.github.javaparser.ast.NodeList<N>.size() [ <351:33 351:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator> com.github.javaparser.ast.expr.VariableDeclarationExpr.getVariables() [ <351:18 351:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator> com.github.javaparser.ast.expr.VariableDeclarationExpr.getVariables() [ <354:55 354:66>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException.UnsupportedOperationException() [ <352:23 352:51>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException [ <352:23 352:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsageVariableType(com.github.javaparser.ast.body.VariableDeclarator) [ <354:23 354:48>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <354:16 354:21>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Boolean) -> com.github.javaparser.ast.NodeList<N>.N com.github.javaparser.ast.NodeList<N>.get(int) [ <354:70 354:72>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) [ <359:17 359:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.lang.Override [ <358:6 358:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <359:12 359:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <371:17 371:20>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <391:25 391:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <415:21 415:24>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <419:21 419:24>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <454:21 454:24>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <459:21 459:24>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.LambdaExpr [ <359:23 359:32>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.LambdaExpr [ <407:21 407:30>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.lang.Boolean [ <359:40 359:46>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.ast.Node com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node) [ <360:13 360:25>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.ast.Node com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node) [ <361:56 361:68>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.ast.Node com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node) [ <365:51 365:63>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.MethodCallExpr [ <360:44 360:57>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.MethodCallExpr [ <361:13 361:26>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.MethodCallExpr [ <361:40 361:53>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> int [ <362:13 362:15>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static int com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserSymbolDeclaration.getParamPos(com.github.javaparser.ast.Node) [ <362:51 362:61>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <363:29 363:45>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <483:29 483:99>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <363:13 363:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <381:29 381:43>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <363:29 363:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solve(com.github.javaparser.ast.expr.MethodCallExpr) [ <363:67 363:71>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <363:60 363:65>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <391:42 391:47>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <400:26 400:31>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <422:38 422:43>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <436:44 436:49>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved() [ <364:28 364:35>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved() [ <382:38 382:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException.UnsolvedSymbolException(java.lang.String, java.lang.String) [ <365:27 365:49>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException [ <365:27 365:49>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.Node.toString() [ <365:71 365:78>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <365:102 365:106>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <381:149 381:153>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.MethodCallExpr.getName() [ <365:92 365:98>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> void java.util.logging.Logger.finest(java.lang.String) [ <367:20 367:25>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger [ <367:13 367:18>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName() [ <367:95 367:101>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <367:65 367:91>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <371:41 371:67>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <471:34 471:60>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType() [ <371:85 371:91>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType() [ <471:78 471:84>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int) [ <371:71 371:78>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int) [ <471:64 471:71>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> boolean java.util.Optional<T>.isPresent() [ <373:41 373:49>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> boolean java.util.Optional<T>.isPresent() [ <406:38 406:46>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> boolean java.util.Optional<T>.isPresent() [ <435:48 435:56>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.Optional<com.github.javaparser.ast.expr.Expression> com.github.javaparser.ast.expr.MethodCallExpr.getScope() [ <373:30 373:37>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.Optional<com.github.javaparser.ast.expr.Expression> com.github.javaparser.ast.expr.MethodCallExpr.getScope() [ <374:49 374:56>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression [ <374:21 374:30>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression [ <434:42 434:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <374:60 374:62>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <415:110 415:112>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <436:70 436:72>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <454:56 454:58>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> boolean [ <377:21 377:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.NameExpr [ <378:42 378:49>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.NameExpr [ <379:25 379:32>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.NameExpr [ <379:46 379:53>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <381:45 381:59>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration> com.github.javaparser.symbolsolver.core.resolution.Context.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <381:120 381:128>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.core.resolution.Context com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <381:87 381:96>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.core.resolution.Context com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <399:49 399:58>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <381:108 381:117>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <381:158 381:167>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <399:66 399:75>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <400:64 400:73>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <415:150 415:159>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.NameExpr.getName() [ <381:139 381:145>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.lang.Exception [ <385:34 385:42>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(com.github.javaparser.ast.Node) [ <391:49 391:55>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(com.github.javaparser.ast.Node) [ <422:45 422:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(com.github.javaparser.ast.Node) [ <436:51 436:57>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType() [ <392:39 392:53>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParameterValueProvider.useThisTypeParametersOnTheGivenType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <393:66 393:100>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ <393:48 393:62>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.core.resolution.Context [ <399:17 399:23>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveGenericTypes(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.core.resolution.Context, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <400:33 400:49>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <405:26 405:36>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <499:26 499:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.Optional<T> [ <405:17 405:24>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.Optional<T> [ <434:33 434:40>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <405:26 405:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.logic.FunctionalInterfaceLogic.getFunctionalMethod(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <405:83 405:101>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.logic.InferenceContext [ <409:21 409:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.logic.InferenceContext [ <409:54 409:69>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.logic.InferenceContext [ <410:21 410:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.logic.InferenceContext [ <410:61 410:76>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.logic.InferenceContext.InferenceContext(com.github.javaparser.symbolsolver.logic.ObjectProvider) [ <409:54 409:69>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.logic.InferenceContext.InferenceContext(com.github.javaparser.symbolsolver.logic.ObjectProvider) [ <410:61 410:76>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider.INSTANCE [ <409:88 409:95>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider.INSTANCE [ <410:95 410:102>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.undeterminedParameters(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <415:70 415:91>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.declaringType() [ <415:133 415:145>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration com.github.javaparser.symbolsolver.model.methods.MethodUsage.getDeclaration() [ <415:116 415:129>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <417:31 417:37>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <457:38 457:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <464:35 464:41>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.Statement com.github.javaparser.ast.expr.LambdaExpr.getBody() [ <421:36 421:42>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.Statement com.github.javaparser.ast.expr.LambdaExpr.getBody() [ <422:81 422:87>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.Statement com.github.javaparser.ast.expr.LambdaExpr.getBody() [ <423:43 423:49>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.Statement com.github.javaparser.ast.expr.LambdaExpr.getBody() [ <424:70 424:76>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.ExpressionStmt [ <421:57 421:70>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.ExpressionStmt [ <422:55 422:68>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.Expression com.github.javaparser.ast.stmt.ExpressionStmt.getExpression() [ <422:92 422:104>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.BlockStmt [ <423:64 423:72>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.BlockStmt [ <424:25 424:33>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.BlockStmt [ <424:48 424:56>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.ast.NodeList<N> -> com.github.javaparser.ast.stmt.Statement [ <425:34 425:42>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.NodeList<N> [ <425:25 425:32>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.Statement [ <425:34 425:42>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement> com.github.javaparser.ast.stmt.BlockStmt.getStatements() [ <425:68 425:80>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.ast.stmt.ReturnStmt [ <428:30 428:39>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.List<E> [ <428:25 428:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.ReturnStmt [ <428:30 428:39>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.ast.stmt.ReturnStmt [ <428:81 428:90>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.List<N> com.github.javaparser.ast.Node.getNodesByType<N>(java.lang.Class<N>) [ <428:66 428:79>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> int java.util.List<E>.size() [ <430:41 430:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.Optional<T>.T java.util.Optional<T>.orElse(java.util.Optional<T>.T) [ <443:30 443:35>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.Optional<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.findFirst() [ <442:30 442:38>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <441:30 441:35>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.stream.Stream<R> java.util.stream.Stream<T>.map<R>(java.util.function.Function<? super T, ? extends R>) [ <433:30 433:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <432:54 432:59>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.ast.expr.Expression [ <434:42 434:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.util.Optional<com.github.javaparser.ast.expr.Expression> com.github.javaparser.ast.stmt.ReturnStmt.getExpression() [ <434:78 434:90>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.VoidType.INSTANCE [ <438:53 438:60>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.VoidType.INSTANCE [ <443:46 443:53>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.VoidType.INSTANCE [ <446:45 446:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isVoid() [ <441:58 441:63>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isNull() [ <441:73 441:78>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException.UnsupportedOperationException() [ <451:35 451:63>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException [ <451:35 451:63>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException [ <474:23 474:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.returnType() [ <454:62 454:71>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <459:70 459:76>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <465:44 465:50>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <459:95 459:103>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <465:62 465:70>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.VoidType [ <463:49 463:56>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <474:23 474:51>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.DefaultVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) [ <479:17 479:21>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> java.lang.Override [ <478:6 478:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <479:12 479:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <491:17 491:20>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <504:25 504:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <505:25 505:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.MethodReferenceExpr [ <479:23 479:41>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.MethodReferenceExpr [ <501:41 501:59>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.MethodReferenceExpr [ <502:25 502:43>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.MethodReferenceExpr [ <502:68 502:86>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> java.lang.Boolean [ <479:49 479:55>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> static com.github.javaparser.ast.Node com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node) [ <480:13 480:25>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> static com.github.javaparser.ast.Node com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node) [ <481:56 481:68>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> static com.github.javaparser.ast.Node com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node) [ <485:51 485:63>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.MethodCallExpr [ <480:44 480:57>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.MethodCallExpr [ <481:13 481:26>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.MethodCallExpr [ <481:40 481:53>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> int [ <482:13 482:15>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> static int com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserSymbolDeclaration.getParamPos(com.github.javaparser.ast.Node) [ <482:51 482:61>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <483:13 483:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <483:83 483:99>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solve(com.github.javaparser.ast.expr.MethodCallExpr, boolean) [ <483:121 483:125>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <483:114 483:119>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <490:37 490:42>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <494:26 494:31>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.facade [ <504:43 504:48>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved() [ <484:28 484:35>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException.UnsolvedSymbolException(java.lang.String, java.lang.String) [ <485:27 485:49>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.javaparsermodel.UnsolvedSymbolException [ <485:27 485:49>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.Node.toString() [ <485:71 485:78>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.ast.nodeTypes.NodeWithIdentifier<N>.getId() [ <485:102 485:106>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.ast.expr.SimpleName com.github.javaparser.ast.expr.MethodCallExpr.getName() [ <485:92 485:98>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> void java.util.logging.Logger.finest(java.lang.String) [ <487:20 487:25>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> static java.util.logging.Logger com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.logger [ <487:13 487:18>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName() [ <487:105 487:111>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <487:75 487:101>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.S com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.getCorrespondingDeclaration() [ <515:34 515:60>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <490:17 490:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <499:26 499:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(com.github.javaparser.ast.expr.MethodCallExpr) [ <490:44 490:61>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.getParamType(int) [ <491:37 491:48>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.core.resolution.Context [ <493:17 493:23>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.core.resolution.Context com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <493:49 493:58>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <493:66 493:75>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.typeSolver [ <494:64 494:73>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveGenericTypes(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.core.resolution.Context, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <494:33 494:49>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> java.util.Optional<T> [ <499:17 499:24>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> static java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.logic.FunctionalInterfaceLogic.getFunctionalMethod(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <499:83 499:101>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> boolean java.util.Optional<T>.isPresent() [ <500:38 500:46>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.returnType() [ <504:85 504:94>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.returnType() [ <505:66 505:75>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.toMethodUsage(com.github.javaparser.ast.expr.MethodReferenceExpr) [ <504:50 504:62>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <505:60 505:62>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.logic.InferenceContext [ <507:25 507:40>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.logic.InferenceContext [ <507:65 507:80>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.logic.InferenceContext.InferenceContext(com.github.javaparser.symbolsolver.logic.ObjectProvider) [ <507:65 507:80>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> static com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider.INSTANCE [ <507:99 507:106>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <508:42 508:48>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <509:51 509:57>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <509:76 509:84>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType() [ <515:78 515:84>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int) [ <515:64 515:71>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <518:23 518:51>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Boolean) -> java.lang.UnsupportedOperationException [ <518:23 518:51>]
LOCAL_SYMBOL: TypeExtractor.java<0> [ <45:24 45:37>]
LOCAL_SYMBOL: TypeExtractor.java<0> [ <46:9 46:22>]
LOCAL_SYMBOL: TypeExtractor.java<0> [ <47:27 47:40>]
LOCAL_SYMBOL: TypeExtractor.java<104:62> [ <104:62 104:62>]
LOCAL_SYMBOL: TypeExtractor.java<104:62> [ <106:5 106:5>]
LOCAL_SYMBOL: TypeExtractor.java<109:62> [ <109:62 109:62>]
LOCAL_SYMBOL: TypeExtractor.java<109:62> [ <136:5 136:5>]
LOCAL_SYMBOL: TypeExtractor.java<110:37> [ <110:37 110:37>]
LOCAL_SYMBOL: TypeExtractor.java<110:37> [ <135:9 135:9>]
LOCAL_SYMBOL: TypeExtractor.java<139:60> [ <139:60 139:60>]
LOCAL_SYMBOL: TypeExtractor.java<139:60> [ <141:5 141:5>]
LOCAL_SYMBOL: TypeExtractor.java<144:61> [ <144:61 144:61>]
LOCAL_SYMBOL: TypeExtractor.java<144:61> [ <149:5 149:5>]
LOCAL_SYMBOL: TypeExtractor.java<152:67> [ <152:67 152:67>]
LOCAL_SYMBOL: TypeExtractor.java<152:67> [ <154:5 154:5>]
LOCAL_SYMBOL: TypeExtractor.java<157:64> [ <157:64 157:64>]
LOCAL_SYMBOL: TypeExtractor.java<157:64> [ <159:5 159:5>]
LOCAL_SYMBOL: TypeExtractor.java<165:100> [ <165:100 165:100>]
LOCAL_SYMBOL: TypeExtractor.java<165:100> [ <175:5 175:5>]
LOCAL_SYMBOL: TypeExtractor.java<168:58> [ <168:58 168:58>]
LOCAL_SYMBOL: TypeExtractor.java<168:58> [ <170:9 170:9>]
LOCAL_SYMBOL: TypeExtractor.java<170:72> [ <170:72 170:72>]
LOCAL_SYMBOL: TypeExtractor.java<170:72> [ <172:9 172:9>]
LOCAL_SYMBOL: TypeExtractor.java<172:16> [ <172:16 172:16>]
LOCAL_SYMBOL: TypeExtractor.java<172:16> [ <174:9 174:9>]
LOCAL_SYMBOL: TypeExtractor.java<178:67> [ <178:67 178:67>]
LOCAL_SYMBOL: TypeExtractor.java<178:67> [ <224:5 224:5>]
LOCAL_SYMBOL: TypeExtractor.java<181:61> [ <181:61 181:61>]
LOCAL_SYMBOL: TypeExtractor.java<181:61> [ <189:9 189:9>]
LOCAL_SYMBOL: TypeExtractor.java<184:52> [ <184:52 184:52>]
LOCAL_SYMBOL: TypeExtractor.java<184:52> [ <188:13 188:13>]
LOCAL_SYMBOL: TypeExtractor.java<189:55> [ <189:55 189:55>]
LOCAL_SYMBOL: TypeExtractor.java<189:55> [ <201:9 201:9>]
LOCAL_SYMBOL: TypeExtractor.java<194:34> [ <194:34 194:34>]
LOCAL_SYMBOL: TypeExtractor.java<194:34> [ <199:13 199:13>]
LOCAL_SYMBOL: TypeExtractor.java<196:82> [ <196:82 196:82>]
LOCAL_SYMBOL: TypeExtractor.java<196:82> [ <198:17 198:17>]
LOCAL_SYMBOL: TypeExtractor.java<201:65> [ <201:65 201:65>]
LOCAL_SYMBOL: TypeExtractor.java<201:65> [ <207:9 207:9>]
LOCAL_SYMBOL: TypeExtractor.java<204:32> [ <204:32 204:32>]
LOCAL_SYMBOL: TypeExtractor.java<204:32> [ <206:13 206:13>]
LOCAL_SYMBOL: TypeExtractor.java<209:13> [ <209:13 209:13>]
LOCAL_SYMBOL: TypeExtractor.java<209:13> [ <211:9 211:9>]
LOCAL_SYMBOL: TypeExtractor.java<211:47> [ <211:47 211:47>]
LOCAL_SYMBOL: TypeExtractor.java<211:47> [ <218:9 218:9>]
LOCAL_SYMBOL: TypeExtractor.java<215:34> [ <215:34 215:34>]
LOCAL_SYMBOL: TypeExtractor.java<215:34> [ <217:13 217:13>]
LOCAL_SYMBOL: TypeExtractor.java<219:49> [ <219:49 219:49>]
LOCAL_SYMBOL: TypeExtractor.java<219:49> [ <221:9 221:9>]
LOCAL_SYMBOL: TypeExtractor.java<221:16> [ <221:16 221:16>]
LOCAL_SYMBOL: TypeExtractor.java<221:16> [ <223:9 223:9>]
LOCAL_SYMBOL: TypeExtractor.java<227:66> [ <227:66 227:66>]
LOCAL_SYMBOL: TypeExtractor.java<227:66> [ <229:5 229:5>]
LOCAL_SYMBOL: TypeExtractor.java<232:69> [ <232:69 232:69>]
LOCAL_SYMBOL: TypeExtractor.java<232:69> [ <234:5 234:5>]
LOCAL_SYMBOL: TypeExtractor.java<237:70> [ <237:70 237:70>]
LOCAL_SYMBOL: TypeExtractor.java<237:70> [ <239:5 239:5>]
LOCAL_SYMBOL: TypeExtractor.java<242:67> [ <242:67 242:67>]
LOCAL_SYMBOL: TypeExtractor.java<242:67> [ <244:5 244:5>]
LOCAL_SYMBOL: TypeExtractor.java<247:67> [ <247:67 247:67>]
LOCAL_SYMBOL: TypeExtractor.java<247:67> [ <249:5 249:5>]
LOCAL_SYMBOL: TypeExtractor.java<252:69> [ <252:69 252:69>]
LOCAL_SYMBOL: TypeExtractor.java<252:69> [ <257:5 257:5>]
LOCAL_SYMBOL: TypeExtractor.java<253:58> [ <253:58 253:58>]
LOCAL_SYMBOL: TypeExtractor.java<253:58> [ <255:9 255:9>]
LOCAL_SYMBOL: TypeExtractor.java<260:70> [ <260:70 260:70>]
LOCAL_SYMBOL: TypeExtractor.java<260:70> [ <262:5 262:5>]
LOCAL_SYMBOL: TypeExtractor.java<265:67> [ <265:67 265:67>]
LOCAL_SYMBOL: TypeExtractor.java<265:67> [ <267:5 267:5>]
LOCAL_SYMBOL: TypeExtractor.java<270:66> [ <270:66 270:66>]
LOCAL_SYMBOL: TypeExtractor.java<270:66> [ <278:5 278:5>]
LOCAL_SYMBOL: TypeExtractor.java<281:60> [ <281:60 281:60>]
LOCAL_SYMBOL: TypeExtractor.java<281:60> [ <289:5 289:5>]
LOCAL_SYMBOL: TypeExtractor.java<284:33> [ <284:33 284:33>]
LOCAL_SYMBOL: TypeExtractor.java<284:33> [ <286:9 286:9>]
LOCAL_SYMBOL: TypeExtractor.java<286:16> [ <286:16 286:16>]
LOCAL_SYMBOL: TypeExtractor.java<286:16> [ <288:9 288:9>]
LOCAL_SYMBOL: TypeExtractor.java<292:70> [ <292:70 292:70>]
LOCAL_SYMBOL: TypeExtractor.java<292:70> [ <295:5 295:5>]
LOCAL_SYMBOL: TypeExtractor.java<298:60> [ <298:60 298:60>]
LOCAL_SYMBOL: TypeExtractor.java<298:60> [ <319:5 319:5>]
LOCAL_SYMBOL: TypeExtractor.java<300:45> [ <300:45 300:45>]
LOCAL_SYMBOL: TypeExtractor.java<300:45> [ <317:9 317:9>]
LOCAL_SYMBOL: TypeExtractor.java<305:34> [ <305:34 305:34>]
LOCAL_SYMBOL: TypeExtractor.java<305:34> [ <307:13 307:13>]
LOCAL_SYMBOL: TypeExtractor.java<310:32> [ <310:32 310:32>]
LOCAL_SYMBOL: TypeExtractor.java<310:32> [ <315:13 315:13>]
LOCAL_SYMBOL: TypeExtractor.java<312:45> [ <312:45 312:45>]
LOCAL_SYMBOL: TypeExtractor.java<312:45> [ <314:17 314:17>]
LOCAL_SYMBOL: TypeExtractor.java<322:61> [ <322:61 322:61>]
LOCAL_SYMBOL: TypeExtractor.java<322:61> [ <329:5 329:5>]
LOCAL_SYMBOL: TypeExtractor.java<324:53> [ <324:53 324:53>]
LOCAL_SYMBOL: TypeExtractor.java<324:53> [ <326:9 326:9>]
LOCAL_SYMBOL: TypeExtractor.java<326:16> [ <326:16 326:16>]
LOCAL_SYMBOL: TypeExtractor.java<326:16> [ <328:9 328:9>]
LOCAL_SYMBOL: TypeExtractor.java<332:61> [ <332:61 332:61>]
LOCAL_SYMBOL: TypeExtractor.java<332:61> [ <347:5 347:5>]
LOCAL_SYMBOL: TypeExtractor.java<333:37> [ <333:37 333:37>]
LOCAL_SYMBOL: TypeExtractor.java<333:37> [ <346:9 346:9>]
LOCAL_SYMBOL: TypeExtractor.java<350:75> [ <350:75 350:75>]
LOCAL_SYMBOL: TypeExtractor.java<350:75> [ <355:5 355:5>]
LOCAL_SYMBOL: TypeExtractor.java<351:46> [ <351:46 351:46>]
LOCAL_SYMBOL: TypeExtractor.java<351:46> [ <353:9 353:9>]
LOCAL_SYMBOL: TypeExtractor.java<359:62> [ <359:62 359:62>]
LOCAL_SYMBOL: TypeExtractor.java<359:62> [ <476:5 476:5>]
LOCAL_SYMBOL: TypeExtractor.java<360:60> [ <360:60 360:60>]
LOCAL_SYMBOL: TypeExtractor.java<360:60> [ <473:9 473:9>]
LOCAL_SYMBOL: TypeExtractor.java<364:40> [ <364:40 364:40>]
LOCAL_SYMBOL: TypeExtractor.java<364:40> [ <366:13 366:13>]
LOCAL_SYMBOL: TypeExtractor.java<368:31> [ <368:31 368:31>]
LOCAL_SYMBOL: TypeExtractor.java<368:31> [ <470:13 470:13>]
LOCAL_SYMBOL: TypeExtractor.java<373:54> [ <373:54 373:54>]
LOCAL_SYMBOL: TypeExtractor.java<373:54> [ <396:17 396:17>]
LOCAL_SYMBOL: TypeExtractor.java<378:52> [ <378:52 378:52>]
LOCAL_SYMBOL: TypeExtractor.java<378:52> [ <388:21 388:21>]
LOCAL_SYMBOL: TypeExtractor.java<380:29> [ <380:29 380:29>]
LOCAL_SYMBOL: TypeExtractor.java<380:29> [ <385:25 385:25>]
LOCAL_SYMBOL: TypeExtractor.java<382:49> [ <382:49 382:49>]
LOCAL_SYMBOL: TypeExtractor.java<382:49> [ <384:29 384:29>]
LOCAL_SYMBOL: TypeExtractor.java<385:47> [ <385:47 385:47>]
LOCAL_SYMBOL: TypeExtractor.java<385:47> [ <387:25 387:25>]
LOCAL_SYMBOL: TypeExtractor.java<390:38> [ <390:38 390:38>]
LOCAL_SYMBOL: TypeExtractor.java<390:38> [ <395:21 395:21>]
LOCAL_SYMBOL: TypeExtractor.java<392:58> [ <392:58 392:58>]
LOCAL_SYMBOL: TypeExtractor.java<392:58> [ <394:25 394:25>]
LOCAL_SYMBOL: TypeExtractor.java<39:58> [ <39:58 39:58>]
LOCAL_SYMBOL: TypeExtractor.java<39:58> [ <523:1 523:1>]
LOCAL_SYMBOL: TypeExtractor.java<406:51> [ <406:51 406:51>]
LOCAL_SYMBOL: TypeExtractor.java<406:51> [ <467:17 467:17>]
LOCAL_SYMBOL: TypeExtractor.java<421:73> [ <421:73 421:73>]
LOCAL_SYMBOL: TypeExtractor.java<421:73> [ <423:21 423:21>]
LOCAL_SYMBOL: TypeExtractor.java<423:75> [ <423:75 423:75>]
LOCAL_SYMBOL: TypeExtractor.java<423:75> [ <450:21 450:21>]
LOCAL_SYMBOL: TypeExtractor.java<430:52> [ <430:52 430:52>]
LOCAL_SYMBOL: TypeExtractor.java<430:52> [ <445:25 445:25>]
LOCAL_SYMBOL: TypeExtractor.java<433:48> [ <433:48 433:48>]
LOCAL_SYMBOL: TypeExtractor.java<433:48> [ <440:29 440:29>]
LOCAL_SYMBOL: TypeExtractor.java<435:60> [ <435:60 435:60>]
LOCAL_SYMBOL: TypeExtractor.java<435:60> [ <437:33 437:33>]
LOCAL_SYMBOL: TypeExtractor.java<437:39> [ <437:39 437:39>]
LOCAL_SYMBOL: TypeExtractor.java<437:39> [ <439:33 439:33>]
LOCAL_SYMBOL: TypeExtractor.java<43:12> [ <43:12 43:12>]
LOCAL_SYMBOL: TypeExtractor.java<43:12> [ <48:5 48:5>]
LOCAL_SYMBOL: TypeExtractor.java<445:32> [ <445:32 445:32>]
LOCAL_SYMBOL: TypeExtractor.java<445:32> [ <447:25 447:25>]
LOCAL_SYMBOL: TypeExtractor.java<450:28> [ <450:28 450:28>]
LOCAL_SYMBOL: TypeExtractor.java<450:28> [ <452:21 452:21>]
LOCAL_SYMBOL: TypeExtractor.java<463:59> [ <463:59 463:59>]
LOCAL_SYMBOL: TypeExtractor.java<463:59> [ <466:21 466:21>]
LOCAL_SYMBOL: TypeExtractor.java<470:20> [ <470:20 470:20>]
LOCAL_SYMBOL: TypeExtractor.java<470:20> [ <472:13 472:13>]
LOCAL_SYMBOL: TypeExtractor.java<473:16> [ <473:16 473:16>]
LOCAL_SYMBOL: TypeExtractor.java<473:16> [ <475:9 475:9>]
LOCAL_SYMBOL: TypeExtractor.java<479:71> [ <479:71 479:71>]
LOCAL_SYMBOL: TypeExtractor.java<479:71> [ <520:5 520:5>]
LOCAL_SYMBOL: TypeExtractor.java<480:60> [ <480:60 480:60>]
LOCAL_SYMBOL: TypeExtractor.java<480:60> [ <517:9 517:9>]
LOCAL_SYMBOL: TypeExtractor.java<484:40> [ <484:40 484:40>]
LOCAL_SYMBOL: TypeExtractor.java<484:40> [ <486:13 486:13>]
LOCAL_SYMBOL: TypeExtractor.java<489:31> [ <489:31 489:31>]
LOCAL_SYMBOL: TypeExtractor.java<489:31> [ <514:13 514:13>]
LOCAL_SYMBOL: TypeExtractor.java<500:51> [ <500:51 500:51>]
LOCAL_SYMBOL: TypeExtractor.java<500:51> [ <511:17 511:17>]
LOCAL_SYMBOL: TypeExtractor.java<501:62> [ <501:62 501:62>]
LOCAL_SYMBOL: TypeExtractor.java<501:62> [ <510:21 510:21>]
LOCAL_SYMBOL: TypeExtractor.java<514:20> [ <514:20 514:20>]
LOCAL_SYMBOL: TypeExtractor.java<514:20> [ <516:13 516:13>]
LOCAL_SYMBOL: TypeExtractor.java<517:16> [ <517:16 517:16>]
LOCAL_SYMBOL: TypeExtractor.java<517:16> [ <519:9 519:9>]
LOCAL_SYMBOL: TypeExtractor.java<53:74> [ <53:74 53:74>]
LOCAL_SYMBOL: TypeExtractor.java<53:74> [ <56:5 56:5>]
LOCAL_SYMBOL: TypeExtractor.java<59:70> [ <59:70 59:70>]
LOCAL_SYMBOL: TypeExtractor.java<59:70> [ <69:5 69:5>]
LOCAL_SYMBOL: TypeExtractor.java<60:62> [ <60:62 60:62>]
LOCAL_SYMBOL: TypeExtractor.java<60:62> [ <63:9 63:9>]
LOCAL_SYMBOL: TypeExtractor.java<63:76> [ <63:76 63:76>]
LOCAL_SYMBOL: TypeExtractor.java<63:76> [ <66:9 66:9>]
LOCAL_SYMBOL: TypeExtractor.java<66:16> [ <66:16 66:16>]
LOCAL_SYMBOL: TypeExtractor.java<66:16> [ <68:9 68:9>]
LOCAL_SYMBOL: TypeExtractor.java<72:61> [ <72:61 72:61>]
LOCAL_SYMBOL: TypeExtractor.java<72:61> [ <77:5 77:5>]
LOCAL_SYMBOL: TypeExtractor.java<73:52> [ <73:52 73:52>]
LOCAL_SYMBOL: TypeExtractor.java<73:52> [ <75:9 75:9>]
LOCAL_SYMBOL: TypeExtractor.java<81:67> [ <81:67 81:67>]
LOCAL_SYMBOL: TypeExtractor.java<81:67> [ <87:5 87:5>]
LOCAL_SYMBOL: TypeExtractor.java<83:39> [ <83:39 83:39>]
LOCAL_SYMBOL: TypeExtractor.java<83:39> [ <85:9 85:9>]
LOCAL_SYMBOL: TypeExtractor.java<90:69> [ <90:69 90:69>]
LOCAL_SYMBOL: TypeExtractor.java<90:69> [ <96:5 96:5>]
LOCAL_SYMBOL: TypeExtractor.java<92:59> [ <92:59 92:59>]
LOCAL_SYMBOL: TypeExtractor.java<92:59> [ <94:9 94:9>]
LOCAL_SYMBOL: TypeExtractor.java<99:72> [ <99:72 99:72>]
LOCAL_SYMBOL: TypeExtractor.java<99:72> [ <101:5 101:5>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.TypeExtractor<0> [ <53:37 53:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.TypeExtractor<0> [ <54:27 54:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.TypeExtractor<1> [ <53:66 53:71>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.TypeExtractor<1> [ <55:23 55:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType<0> [ <165:66 165:75>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType<0> [ <168:13 168:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType<0> [ <169:20 169:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType<0> [ <170:20 170:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType<0> [ <171:42 171:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType<1> [ <165:94 165:97>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType<1> [ <168:33 168:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType<1> [ <169:40 169:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType<1> [ <170:47 170:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType<1> [ <171:69 171:72>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.solveDotExpressionType<1> [ <173:47 173:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <59:42 59:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <60:27 60:30>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <62:54 62:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <63:34 63:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <65:54 65:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <67:67 67:70>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <72:33 72:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <73:13 73:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <74:78 74:81>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <76:38 76:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <76:54 76:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <81:39 81:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <82:31 82:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <90:41 90:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <91:42 91:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <91:94 91:97>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <92:29 92:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <99:44 99:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <100:49 100:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <104:34 104:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <105:16 105:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <109:34 109:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <110:17 110:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <115:53 115:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <115:69 115:72>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <132:24 132:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <134:66 134:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <139:32 139:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <140:38 140:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <140:83 140:86>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <144:33 144:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <146:55 146:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <147:55 147:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <152:39 152:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <153:16 153:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <157:36 157:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <158:16 158:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <178:39 178:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <180:13 180:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <181:17 181:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <182:38 182:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <183:100 183:103>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <187:97 187:100>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <189:20 189:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <192:78 192:81>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <197:95 197:98>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <201:20 201:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <203:86 203:89>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <205:81 205:84>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <210:69 210:72>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <210:94 210:97>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <214:88 214:91>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <222:47 222:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <227:38 227:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <232:41 232:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <237:42 237:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <242:39 242:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <247:39 247:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <252:41 252:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <253:13 253:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <260:42 260:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <265:39 265:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <270:38 270:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <271:51 271:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <273:53 273:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <274:51 274:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <275:51 275:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <281:32 281:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <282:49 282:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <283:81 283:84>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <283:105 283:108>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <285:60 285:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <285:66 285:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <292:42 292:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <293:43 293:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <293:59 293:62>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <298:32 298:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <300:13 300:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <302:32 302:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <309:44 309:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <318:94 318:97>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <322:33 322:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <323:94 323:97>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <327:53 327:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <332:33 332:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <333:17 333:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <336:24 336:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <343:24 343:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <345:57 345:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <350:47 350:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <351:13 351:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <354:50 354:53>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <359:34 359:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <360:27 360:30>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <361:70 361:73>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <362:63 362:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <365:65 365:68>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <399:60 399:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <407:45 407:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <479:43 479:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <480:27 480:30>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <481:70 481:73>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <482:63 482:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <485:65 485:68>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <493:60 493:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <501:25 501:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<0> [ <502:89 502:92>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<10> [ <385:44 385:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<10> [ <504:30 504:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<10> [ <508:62 508:71>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<11> [ <391:30 391:38>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<11> [ <392:29 392:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<11> [ <393:38 393:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<11> [ <505:30 505:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<11> [ <508:50 508:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<12> [ <399:25 399:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<12> [ <400:59 400:61>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<12> [ <507:42 507:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<12> [ <508:25 508:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<12> [ <509:34 509:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<12> [ <509:59 509:74>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<13> [ <405:39 405:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<13> [ <406:21 406:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<13> [ <415:93 415:108>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<13> [ <454:39 454:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<14> [ <407:32 407:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<14> [ <421:25 421:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<14> [ <422:70 422:79>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<14> [ <423:32 423:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<14> [ <424:59 424:68>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<15> [ <409:38 409:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<15> [ <417:21 417:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<15> [ <464:25 464:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<15> [ <465:34 465:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<15> [ <465:52 465:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<16> [ <410:38 410:53>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<16> [ <457:21 457:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<16> [ <459:53 459:68>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<16> [ <459:78 459:93>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<17> [ <415:26 415:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<17> [ <417:47 417:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<17> [ <459:105 459:127>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<18> [ <419:26 419:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<18> [ <422:25 422:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<18> [ <432:29 432:38>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<18> [ <457:58 457:67>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<19> [ <424:35 424:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<19> [ <425:58 425:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<19> [ <428:56 428:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <59:56 59:67>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <72:47 72:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <81:53 81:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <82:59 82:70>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <90:55 90:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <99:58 99:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <104:48 104:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <105:46 105:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <109:48 109:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <115:86 115:97>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <132:52 132:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <139:46 139:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <144:47 144:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <152:53 152:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <153:48 153:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <157:50 157:61>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <158:45 158:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <178:53 178:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <227:52 227:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <232:55 232:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <237:56 237:67>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <242:53 242:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <247:53 247:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <252:55 252:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <260:56 260:67>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <265:53 265:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <270:52 270:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <281:46 281:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <292:56 292:67>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <298:46 298:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <322:47 322:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <332:47 332:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <336:58 336:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <343:58 343:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <350:61 350:72>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <359:48 359:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <368:17 368:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <479:57 479:68>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<1> [ <489:17 489:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<20> [ <425:45 425:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<21> [ <428:42 428:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<21> [ <430:29 430:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<21> [ <432:42 432:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<28> [ <454:26 454:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<28> [ <457:46 457:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<28> [ <463:27 463:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<29> [ <459:26 459:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<29> [ <464:51 464:74>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <82:14 82:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <83:13 83:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <84:33 84:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <86:16 86:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <91:14 91:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <93:13 93:15>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <93:33 93:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <95:16 95:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <146:45 146:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <147:46 147:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <182:24 182:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <183:128 183:138>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <273:21 273:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <274:76 274:78>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <275:79 275:81>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <276:16 276:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <283:25 283:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <284:14 284:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <287:20 287:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <293:14 293:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <294:16 294:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <302:20 302:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <304:89 304:97>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <311:93 311:101>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <323:25 323:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <324:13 324:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <325:40 325:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <361:28 361:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <363:73 363:80>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <365:83 365:90>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <373:21 373:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <374:40 374:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <481:28 481:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <483:127 483:134>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <485:83 485:90>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<2> [ <490:63 490:70>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <92:18 92:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <92:25 92:25>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <92:54 92:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <147:14 147:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <148:112 148:118>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <183:46 183:67>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <184:17 184:38>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <187:25 187:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <304:55 304:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <305:17 305:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <306:46 306:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <362:17 362:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <371:80 371:82>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <471:73 471:75>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <482:17 482:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <491:50 491:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<3> [ <515:73 515:75>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <192:46 192:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <194:17 194:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <195:60 195:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <309:39 309:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <310:17 310:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <311:69 311:70>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <363:48 363:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <364:18 364:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <367:55 367:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <371:31 371:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <471:24 471:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <483:102 483:110>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <484:18 484:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <487:65 487:73>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<4> [ <515:24 515:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <195:33 195:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <196:21 196:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <197:51 197:74>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <311:55 311:65>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <312:21 312:31>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <313:76 313:86>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <371:22 371:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <393:29 393:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <393:102 393:107>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <400:17 400:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <400:51 400:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <405:103 405:108>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <417:39 417:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <464:43 464:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <465:25 465:30>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <465:72 465:77>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <469:24 469:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <490:29 490:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<5> [ <491:31 491:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <203:55 203:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <204:17 204:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <205:47 205:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <374:32 374:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <378:25 378:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <379:56 379:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <391:57 391:61>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <491:22 491:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <494:17 494:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <494:51 494:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <499:103 499:108>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <509:25 509:30>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <509:86 509:91>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<6> [ <513:24 513:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<7> [ <208:25 208:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<7> [ <210:13 210:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<7> [ <219:13 219:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<7> [ <219:30 219:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<7> [ <220:20 220:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<7> [ <377:29 377:38>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<7> [ <383:33 383:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<7> [ <390:26 390:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<7> [ <493:25 493:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<7> [ <494:59 494:61>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<8> [ <211:42 211:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<8> [ <379:34 379:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<8> [ <381:98 381:105>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<8> [ <381:130 381:137>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<8> [ <499:39 499:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<8> [ <500:21 500:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<8> [ <505:43 505:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<9> [ <214:55 214:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<9> [ <215:17 215:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<9> [ <216:46 216:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<9> [ <381:62 381:65>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<9> [ <382:33 382:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<9> [ <502:45 502:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit<9> [ <504:64 504:82>]
LOCAL_SYMBOL: java.util.function.Function<T, R>.apply<24> [ <433:34 433:43>]
LOCAL_SYMBOL: java.util.function.Function<T, R>.apply<24> [ <434:67 434:76>]
LOCAL_SYMBOL: java.util.function.Function<T, R>.apply<25> [ <434:54 434:63>]
LOCAL_SYMBOL: java.util.function.Function<T, R>.apply<25> [ <435:37 435:46>]
LOCAL_SYMBOL: java.util.function.Function<T, R>.apply<25> [ <436:59 436:68>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<27> [ <441:37 441:37>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<27> [ <441:42 441:42>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<27> [ <441:56 441:56>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<27> [ <441:71 441:71>]
COMMENT: comment [ <61:1 61:83>]
COMMENT: comment [ <64:1 64:97>]
COMMENT: comment [ <145:9 145:89>]
COMMENT: comment [ <161:5 164:7>]
COMMENT: comment [ <166:9 166:75>]
COMMENT: comment [ <167:9 167:64>]
COMMENT: comment [ <179:9 179:58>]
COMMENT: comment [ <185:17 185:82>]
COMMENT: comment [ <190:13 190:86>]
COMMENT: comment [ <191:13 191:38>]
COMMENT: comment [ <193:13 193:71>]
COMMENT: comment [ <202:13 202:47>]
COMMENT: comment [ <212:13 212:85>]
COMMENT: comment [ <213:13 213:76>]
COMMENT: comment [ <272:9 272:33>]
COMMENT: comment [ <277:9 277:52>]
COMMENT: comment [ <299:9 299:60>]
COMMENT: comment [ <301:13 301:33>]
COMMENT: comment [ <303:13 303:52>]
COMMENT: comment [ <308:13 308:61>]
COMMENT: comment [ <370:17 370:91>]
COMMENT: comment [ <376:21 376:92>]
COMMENT: comment [ <398:17 398:56>]
COMMENT: comment [ <402:17 402:111>]
COMMENT: comment [ <403:17 403:114>]
COMMENT: comment [ <404:17 404:25>]
COMMENT: comment [ <412:21 412:50>]
COMMENT: comment [ <413:21 413:71>]
COMMENT: comment [ <414:21 414:49>]
COMMENT: comment [ <427:25 427:76>]
COMMENT: comment [ <456:21 456:77>]
COMMENT: comment [ <458:21 458:54>]
COMMENT: comment [ <461:21 461:67>]
COMMENT: comment [ <462:21 462:62>]
COMMENT: comment [ <488:13 488:101>]
COMMENT: comment [ <492:17 492:56>]
COMMENT: comment [ <496:17 496:111>]
COMMENT: comment [ <497:17 497:114>]
COMMENT: comment [ <498:17 498:25>]
