FILE: InferenceContext.java
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.logic [ <17:44 17:48>]
QUALIFIER: com.github.javaparser.symbolsolver [ <17:31 17:42>]
QUALIFIER: com.github.javaparser.symbolsolver [ <19:30 19:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <20:30 20:41>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver
QUALIFIER: com.github.javaparser [ <17:20 17:29>]
QUALIFIER: com.github.javaparser [ <19:19 19:28>]
QUALIFIER: com.github.javaparser [ <20:19 20:28>]
SYMBOL_PACKAGE: com.github.javaparser
QUALIFIER: com.github [ <17:13 17:18>]
QUALIFIER: com.github [ <19:12 19:17>]
QUALIFIER: com.github [ <20:12 20:17>]
SYMBOL_PACKAGE: com.github
QUALIFIER: com [ <17:9 17:11>]
QUALIFIER: com [ <19:8 19:10>]
QUALIFIER: com [ <20:8 20:10>]
SYMBOL_PACKAGE: com
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations [ <19:49 19:60>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.declarations
QUALIFIER: com.github.javaparser.symbolsolver.model [ <19:43 19:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <20:43 20:47>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.typesystem
QUALIFIER: java.util [ <22:13 22:16>]
QUALIFIER: java.util [ <23:13 23:16>]
QUALIFIER: java.util [ <24:13 24:16>]
QUALIFIER: java.util [ <25:13 25:16>]
QUALIFIER: java.util [ <26:13 26:16>]
SYMBOL_PACKAGE: java.util
QUALIFIER: java [ <22:8 22:11>]
QUALIFIER: java [ <23:8 23:11>]
QUALIFIER: java [ <24:8 24:11>]
QUALIFIER: java [ <25:8 25:11>]
QUALIFIER: java [ <26:8 26:11>]
SYMBOL_PACKAGE: java
QUALIFIER: java.util.stream.Collectors [ <76:146 76:155>]
QUALIFIER: java.util.stream.Collectors [ <80:148 80:157>]
QUALIFIER: java.util.stream [ <26:18 26:23>]
SYMBOL_PACKAGE: java.util.stream
QUALIFIER: com.github.javaparser.symbolsolver.logic.InferenceContext [ <38:9 38:12>]
SYMBOL_CLASS: public com.github.javaparser.symbolsolver.logic.InferenceContext [ <31:1 <31:14 31:29> 209:1>]
SYMBOL_FIELD: private int com.github.javaparser.symbolsolver.logic.InferenceContext.nextInferenceVariableId [ <33:17 33:39>]
SYMBOL_BUILTIN_TYPE: int
SYMBOL_FIELD: private com.github.javaparser.symbolsolver.logic.ObjectProvider com.github.javaparser.symbolsolver.logic.InferenceContext.objectProvider [ <34:28 34:41>]
SYMBOL_FIELD: private java.util.List<com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypes [ <35:41 35:62>]
SYMBOL_METHOD: java.util.ArrayList<E>.ArrayList()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.logic.InferenceContext.InferenceContext(com.github.javaparser.symbolsolver.logic.ObjectProvider) [ <37:5 <37:5 <37:12 37:27> 37:58> 39:5>]
SYMBOL_FIELD: private java.util.Map<java.lang.String, com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeMap [ <41:48 41:71>]
SYMBOL_PACKAGE: java.lang
SYMBOL_METHOD: java.util.HashMap<K, V>.HashMap()
SYMBOL_METHOD: private com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) [ <43:5 <43:5 <43:35 43:60> 43:89> 51:5>]
SYMBOL_METHOD: boolean java.util.Map<K, V>.containsKey(java.lang.Object)
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.logic.InferenceVariableType.InferenceVariableType(int, com.github.javaparser.symbolsolver.logic.ObjectProvider)
SYMBOL_METHOD: boolean java.util.List<E>.add(java.util.List<E>.E)
SYMBOL_METHOD: void com.github.javaparser.symbolsolver.logic.InferenceVariableType.setCorrespondingTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration)
SYMBOL_METHOD: java.util.Map<K, V>.V java.util.Map<K, V>.put(java.util.Map<K, V>.K, java.util.Map<K, V>.V)
SYMBOL_METHOD: java.util.Map<K, V>.V java.util.Map<K, V>.get(java.lang.Object)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <57:1 <57:1 <57:17 57:23> 57:49> 62:5>]
SYMBOL_METHOD: private com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <161:5 <161:5 <161:18 161:40> 161:51> 185:5>]
SYMBOL_METHOD: private void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <68:5 <68:5 <68:18 68:39> 68:73> 159:5>]
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <64:5 <64:5 <64:17 64:25> 64:38> 66:5>]
SYMBOL_BUILTIN_TYPE: void
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
SYMBOL_METHOD: boolean java.lang.String.equals(java.lang.Object)
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getAllAncestors()
SYMBOL_METHOD: R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>)
SYMBOL_METHOD: java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>)
SYMBOL_METHOD: java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream()
SYMBOL_METHOD: static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>()
SYMBOL_METHOD: boolean java.util.List<E>.isEmpty()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.logic.ConfilictingGenericTypesException.ConfilictingGenericTypesException(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: java.util.List<E>.E java.util.List<E>.get(int)
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.isRawType()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive()
SYMBOL_METHOD: void com.github.javaparser.symbolsolver.logic.InferenceVariableType.registerEquivalentType(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isNull()
SYMBOL_METHOD: boolean java.lang.Object.equals(java.lang.Object)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isWildcard()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isBounded()
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.Wildcard [ <164:24 164:31>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.Wildcard [ <166:24 166:31>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.Wildcard [ <199:24 199:31>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.Wildcard [ <201:24 201:31>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isSuper()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isExtends()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isConstraint()
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType [ <179:20 179:39>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType com.github.javaparser.symbolsolver.model.typesystem.Type.asConstraintType()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType.getBound()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.logic.ObjectProvider.byName(java.lang.String)
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.getBoxTypeQName()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.Type.asPrimitive()
SYMBOL_METHOD: java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.typesystem.Type.describe()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.extendsBound(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.superBound(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isTypeVariable()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.transformTypeParameters(com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isVoid()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType.bound(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <187:5 <187:5 <187:17 187:23> 187:34> 208:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceVariableType.equivalentType()
REFERENCE_IMPORT: InferenceContext.java -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <19:62 19:85>]
REFERENCE_IMPORT: InferenceContext.java -> com.github.javaparser.symbolsolver.model.typesystem [ <20:49 20:58>]
REFERENCE_IMPORT: InferenceContext.java -> java.util.ArrayList<E> [ <22:18 22:26>]
REFERENCE_IMPORT: InferenceContext.java -> java.util.HashMap<K, V> [ <23:18 23:24>]
REFERENCE_IMPORT: InferenceContext.java -> java.util.List<E> [ <24:18 24:21>]
REFERENCE_IMPORT: InferenceContext.java -> java.util.Map<K, V> [ <25:18 25:20>]
REFERENCE_IMPORT: InferenceContext.java -> java.util.stream.Collectors [ <26:25 26:34>]
REFERENCE_TYPE_USAGE: int com.github.javaparser.symbolsolver.logic.InferenceContext.nextInferenceVariableId -> int [ <33:13 33:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.logic.ObjectProvider com.github.javaparser.symbolsolver.logic.InferenceContext.objectProvider -> com.github.javaparser.symbolsolver.logic.ObjectProvider [ <34:13 34:26>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <35:18 35:38>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypes -> java.util.List<E> [ <35:13 35:16>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypes -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <35:18 35:38>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypes -> java.util.ArrayList<E>.ArrayList() [ <35:70 35:80>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypes -> java.util.ArrayList<E> [ <35:70 35:78>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceContext.InferenceContext(com.github.javaparser.symbolsolver.logic.ObjectProvider) -> com.github.javaparser.symbolsolver.logic.ObjectProvider [ <37:29 37:42>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceContext.InferenceContext(com.github.javaparser.symbolsolver.logic.ObjectProvider) -> com.github.javaparser.symbolsolver.logic.ObjectProvider com.github.javaparser.symbolsolver.logic.InferenceContext.objectProvider [ <38:14 38:27>]
REFERENCE_TYPE_ARGUMENT: java.util.Map<K, V> -> java.lang.String [ <41:17 41:22>]
REFERENCE_TYPE_ARGUMENT: java.util.Map<K, V> -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <41:25 41:45>]
REFERENCE_TYPE_USAGE: java.util.Map<java.lang.String, com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeMap -> java.util.Map<K, V> [ <41:13 41:15>]
REFERENCE_TYPE_USAGE: java.util.Map<java.lang.String, com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeMap -> java.lang.String [ <41:17 41:22>]
REFERENCE_TYPE_USAGE: java.util.Map<java.lang.String, com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeMap -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <41:25 41:45>]
REFERENCE_CALL: java.util.Map<java.lang.String, com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeMap -> java.util.HashMap<K, V>.HashMap() [ <41:79 41:87>]
REFERENCE_TYPE_USAGE: java.util.Map<java.lang.String, com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeMap -> java.util.HashMap<K, V> [ <41:79 41:85>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <43:13 43:33>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <45:13 45:33>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <45:63 45:83>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <43:62 43:85>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> boolean java.util.Map<K, V>.containsKey(java.lang.Object) [ <44:39 44:49>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> java.util.Map<java.lang.String, com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeMap [ <44:14 44:37>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> java.util.Map<java.lang.String, com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeMap [ <48:13 48:36>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> java.util.Map<java.lang.String, com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeMap [ <50:16 50:39>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName() [ <44:54 44:60>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName() [ <48:45 48:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName() [ <50:48 50:54>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType.InferenceVariableType(int, com.github.javaparser.symbolsolver.logic.ObjectProvider) [ <45:63 45:83>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> int com.github.javaparser.symbolsolver.logic.InferenceContext.nextInferenceVariableId [ <45:85 45:107>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> com.github.javaparser.symbolsolver.logic.ObjectProvider com.github.javaparser.symbolsolver.logic.InferenceContext.objectProvider [ <45:112 45:125>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> boolean java.util.List<E>.add(java.util.List<E>.E) [ <46:36 46:38>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> java.util.List<com.github.javaparser.symbolsolver.logic.InferenceVariableType> com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypes [ <46:13 46:34>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> void com.github.javaparser.symbolsolver.logic.InferenceVariableType.setCorrespondingTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) [ <47:35 47:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> java.util.Map<K, V>.V java.util.Map<K, V>.put(java.util.Map<K, V>.K, java.util.Map<K, V>.V) [ <48:38 48:40>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) -> java.util.Map<K, V>.V java.util.Map<K, V>.get(java.lang.Object) [ <50:41 50:43>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <57:12 57:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <57:25 57:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <57:38 57:41>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <58:18 58:40>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <59:18 59:40>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <60:9 60:30>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <64:12 64:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <64:27 64:30>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <65:16 65:38>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void [ <68:13 68:16>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <68:41 68:44>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <68:58 68:61>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <76:22 76:25>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <80:26 80:29>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <96:30 96:33>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType() [ <69:24 69:38>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType() [ <69:56 69:70>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType() [ <134:28 134:42>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <70:13 70:25>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <71:13 71:25>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <74:22 74:34>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <140:39 140:51>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ <70:62 70:76>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ <71:62 71:76>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ <87:72 87:86>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.lang.String.equals(java.lang.Object) [ <73:59 73:64>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.lang.String.equals(java.lang.Object) [ <76:108 76:113>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.lang.String.equals(java.lang.Object) [ <80:110 80:115>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.lang.String.equals(java.lang.Object) [ <90:58 90:63>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName() [ <73:40 73:55>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName() [ <73:88 73:103>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName() [ <75:75 75:90>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName() [ <76:89 76:104>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName() [ <79:79 79:94>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName() [ <80:91 80:106>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName() [ <90:39 90:54>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName() [ <90:87 90:102>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <74:22 74:34>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<E> [ <74:17 74:20>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<E> [ <76:17 76:20>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<E> [ <80:21 80:24>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getAllAncestors() [ <74:71 74:85>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getAllAncestors() [ <78:55 78:69>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String [ <75:23 75:28>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String [ <79:27 79:32>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <76:22 76:25>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <80:26 80:29>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>) [ <76:138 76:144>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>) [ <80:140 80:146>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <76:73 76:78>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <80:77 80:82>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <76:64 76:69>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <80:68 80:73>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>() [ <76:157 76:162>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>() [ <80:159 80:164>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.util.List<E>.isEmpty() [ <77:45 77:51>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.util.List<E>.isEmpty() [ <81:49 81:55>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.util.List<E>.isEmpty() [ <91:67 91:73>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.ConfilictingGenericTypesException.ConfilictingGenericTypesException(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <82:35 82:67>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.ConfilictingGenericTypesException [ <82:35 82:67>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<E>.E java.util.List<E>.get(int) [ <87:65 87:67>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<E>.E java.util.List<E>.get(int) [ <97:118 97:120>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues() [ <91:44 91:63>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues() [ <96:79 96:98>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues() [ <97:95 97:114>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.isRawType() [ <92:47 92:55>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> int [ <95:25 95:27>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <97:29 97:50>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <113:13 113:34>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <136:21 136:42>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <154:17 154:38>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <103:42 103:62>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <104:15 104:35>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <105:39 105:59>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <106:19 106:39>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <116:40 116:60>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <117:19 117:39>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <118:73 118:93>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <119:23 119:43>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <125:94 125:114>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <127:27 127:47>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <129:27 129:47>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <139:42 139:62>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <141:19 141:39>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <142:46 142:66>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <143:19 143:39>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <147:54 147:74>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <148:19 148:39>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive() [ <103:79 103:89>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive() [ <150:31 150:41>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive() [ <151:28 151:38>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceVariableType.registerEquivalentType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <104:50 104:71>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceVariableType.registerEquivalentType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <106:54 106:75>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceVariableType.registerEquivalentType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <117:54 117:75>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceVariableType.registerEquivalentType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <119:88 119:109>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceVariableType.registerEquivalentType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <127:92 127:113>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceVariableType.registerEquivalentType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <129:92 129:113>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceVariableType.registerEquivalentType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <141:54 141:75>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceVariableType.registerEquivalentType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <143:54 143:75>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> void com.github.javaparser.symbolsolver.logic.InferenceVariableType.registerEquivalentType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <148:69 148:90>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isNull() [ <108:31 108:36>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.lang.Object.equals(java.lang.Object) [ <110:31 110:36>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray() [ <112:31 112:37>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray() [ <112:55 112:61>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType() [ <113:61 113:76>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType() [ <113:106 113:121>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType() [ <113:47 113:57>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType() [ <113:92 113:102>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isWildcard() [ <114:31 114:40>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isWildcard() [ <122:28 122:37>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isBounded() [ <116:90 116:98>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isBounded() [ <125:36 125:44>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isBounded() [ <135:45 135:53>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <116:77 116:86>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <117:88 117:97>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <118:32 118:41>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <119:57 119:66>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <123:54 123:63>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <124:54 124:63>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <127:61 127:70>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <129:61 129:70>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <135:32 135:41>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <136:55 136:64>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <117:101 117:114>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <118:45 118:58>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <119:70 119:83>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <125:66 125:79>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <127:74 127:87>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <127:130 127:143>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <129:74 129:87>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <129:130 129:143>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <136:68 136:81>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard [ <123:17 123:24>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard [ <124:17 124:24>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isSuper() [ <126:40 126:46>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isSuper() [ <126:68 126:74>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isExtends() [ <128:47 128:55>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isExtends() [ <128:77 128:85>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isConstraint() [ <145:31 145:42>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType [ <146:13 146:32>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType com.github.javaparser.symbolsolver.model.typesystem.Type.asConstraintType() [ <146:62 146:77>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType.getBound() [ <147:32 147:39>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType.getBound() [ <148:57 148:64>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.logic.ObjectProvider.byName(java.lang.String) [ <154:67 154:72>]
REFERENCE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.ObjectProvider com.github.javaparser.symbolsolver.logic.InferenceContext.objectProvider [ <154:52 154:65>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.getBoxTypeQName() [ <154:99 154:113>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType com.github.javaparser.symbolsolver.model.typesystem.Type.asPrimitive() [ <154:85 154:95>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <157:23 157:51>]
REFERENCE_TYPE_USAGE: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.UnsupportedOperationException [ <157:23 157:51>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.Type.describe() [ <157:64 157:71>]
REFERENCE_CALL: void com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.Type.describe() [ <157:94 157:101>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <161:13 161:16>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <161:42 161:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isWildcard() [ <162:18 162:27>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isExtends() [ <163:35 163:43>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <163:22 163:31>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <164:75 164:84>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <165:29 165:38>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <166:73 166:82>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.extendsBound(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <164:33 164:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <164:46 164:68>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <166:44 166:66>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <173:73 173:95>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <175:34 175:56>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <179:47 179:69>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <164:88 164:101>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <166:86 166:99>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isSuper() [ <165:42 165:48>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.superBound(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <166:33 166:42>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isTypeVariable() [ <170:25 170:38>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) [ <171:20 171:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter() [ <171:52 171:66>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType() [ <172:25 172:39>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.transformTypeParameters(com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer) [ <173:43 173:65>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ <173:25 173:39>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray() [ <174:25 174:31>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <175:24 175:32>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType [ <175:24 175:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType() [ <175:77 175:92>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType() [ <175:63 175:73>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isNull() [ <176:25 176:30>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive() [ <176:42 176:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isVoid() [ <176:64 176:69>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isConstraint() [ <178:25 178:36>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> static com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType.bound(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <179:41 179:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType.getBound() [ <179:95 179:102>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.LambdaConstraintType com.github.javaparser.symbolsolver.model.typesystem.Type.asConstraintType() [ <179:76 179:91>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <180:36 180:56>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <183:23 183:51>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.UnsupportedOperationException [ <183:23 183:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables(com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.Type.describe() [ <183:58 183:65>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <187:12 187:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <187:25 187:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <188:29 188:49>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <189:13 189:33>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.logic.InferenceVariableType [ <189:60 189:80>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceVariableType.equivalentType() [ <190:42 190:55>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType() [ <191:25 191:39>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.transformTypeParameters(com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer) [ <192:43 192:65>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ <192:25 192:39>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <192:73 192:79>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <196:34 196:40>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <199:46 199:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <201:44 201:50>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isNull() [ <193:25 193:30>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive() [ <193:42 193:52>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isVoid() [ <193:64 193:69>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray() [ <195:25 195:31>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <196:24 196:32>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType [ <196:24 196:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType() [ <196:61 196:76>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType() [ <196:47 196:57>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isWildcard() [ <197:25 197:34>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isExtends() [ <198:35 198:43>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <198:22 198:31>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <199:59 199:68>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <200:29 200:38>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard() [ <201:57 201:66>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.extendsBound(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <199:33 199:44>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <199:72 199:85>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType() [ <201:70 201:83>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isSuper() [ <200:42 200:48>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.superBound(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <201:33 201:42>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <206:23 206:51>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.UnsupportedOperationException [ <206:23 206:51>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.Type.describe() [ <206:58 206:65>]
LOCAL_SYMBOL: InferenceContext.java<103:94> [ <103:94 103:94>]
LOCAL_SYMBOL: InferenceContext.java<103:94> [ <108:9 108:9>]
LOCAL_SYMBOL: InferenceContext.java<105:62> [ <105:62 105:62>]
LOCAL_SYMBOL: InferenceContext.java<105:62> [ <107:13 107:13>]
LOCAL_SYMBOL: InferenceContext.java<108:41> [ <108:41 108:41>]
LOCAL_SYMBOL: InferenceContext.java<108:41> [ <110:9 110:9>]
LOCAL_SYMBOL: InferenceContext.java<110:51> [ <110:51 110:51>]
LOCAL_SYMBOL: InferenceContext.java<110:51> [ <112:9 112:9>]
LOCAL_SYMBOL: InferenceContext.java<112:66> [ <112:66 112:66>]
LOCAL_SYMBOL: InferenceContext.java<112:66> [ <114:9 114:9>]
LOCAL_SYMBOL: InferenceContext.java<114:45> [ <114:45 114:45>]
LOCAL_SYMBOL: InferenceContext.java<114:45> [ <139:9 139:9>]
LOCAL_SYMBOL: InferenceContext.java<116:103> [ <116:103 116:103>]
LOCAL_SYMBOL: InferenceContext.java<116:103> [ <121:13 121:13>]
LOCAL_SYMBOL: InferenceContext.java<118:96> [ <118:96 118:96>]
LOCAL_SYMBOL: InferenceContext.java<118:96> [ <120:17 120:17>]
LOCAL_SYMBOL: InferenceContext.java<122:42> [ <122:42 122:42>]
LOCAL_SYMBOL: InferenceContext.java<122:42> [ <132:13 132:13>]
LOCAL_SYMBOL: InferenceContext.java<125:117> [ <125:117 125:117>]
LOCAL_SYMBOL: InferenceContext.java<125:117> [ <131:17 131:17>]
LOCAL_SYMBOL: InferenceContext.java<126:79> [ <126:79 126:79>]
LOCAL_SYMBOL: InferenceContext.java<126:79> [ <128:21 128:21>]
LOCAL_SYMBOL: InferenceContext.java<128:90> [ <128:90 128:90>]
LOCAL_SYMBOL: InferenceContext.java<128:90> [ <130:21 130:21>]
LOCAL_SYMBOL: InferenceContext.java<134:46> [ <134:46 134:46>]
LOCAL_SYMBOL: InferenceContext.java<134:46> [ <138:13 138:13>]
LOCAL_SYMBOL: InferenceContext.java<135:57> [ <135:57 135:57>]
LOCAL_SYMBOL: InferenceContext.java<135:57> [ <137:17 137:17>]
LOCAL_SYMBOL: InferenceContext.java<139:64> [ <139:64 139:64>]
LOCAL_SYMBOL: InferenceContext.java<139:64> [ <145:9 145:9>]
LOCAL_SYMBOL: InferenceContext.java<140:53> [ <140:53 140:53>]
LOCAL_SYMBOL: InferenceContext.java<140:53> [ <142:13 142:13>]
LOCAL_SYMBOL: InferenceContext.java<142:68> [ <142:68 142:68>]
LOCAL_SYMBOL: InferenceContext.java<142:68> [ <144:13 144:13>]
LOCAL_SYMBOL: InferenceContext.java<145:46> [ <145:46 145:46>]
LOCAL_SYMBOL: InferenceContext.java<145:46> [ <150:9 150:9>]
LOCAL_SYMBOL: InferenceContext.java<147:76> [ <147:76 147:76>]
LOCAL_SYMBOL: InferenceContext.java<147:76> [ <149:13 149:13>]
LOCAL_SYMBOL: InferenceContext.java<150:46> [ <150:46 150:46>]
LOCAL_SYMBOL: InferenceContext.java<150:46> [ <156:9 156:9>]
LOCAL_SYMBOL: InferenceContext.java<151:43> [ <151:43 151:43>]
LOCAL_SYMBOL: InferenceContext.java<151:43> [ <153:13 153:13>]
LOCAL_SYMBOL: InferenceContext.java<153:20> [ <153:20 153:20>]
LOCAL_SYMBOL: InferenceContext.java<153:20> [ <155:13 155:13>]
LOCAL_SYMBOL: InferenceContext.java<156:16> [ <156:16 156:16>]
LOCAL_SYMBOL: InferenceContext.java<156:16> [ <158:9 158:9>]
LOCAL_SYMBOL: InferenceContext.java<161:53> [ <161:53 161:53>]
LOCAL_SYMBOL: InferenceContext.java<161:53> [ <185:5 185:5>]
LOCAL_SYMBOL: InferenceContext.java<162:32> [ <162:32 162:32>]
LOCAL_SYMBOL: InferenceContext.java<162:32> [ <170:9 170:9>]
LOCAL_SYMBOL: InferenceContext.java<163:48> [ <163:48 163:48>]
LOCAL_SYMBOL: InferenceContext.java<163:48> [ <165:13 165:13>]
LOCAL_SYMBOL: InferenceContext.java<165:53> [ <165:53 165:53>]
LOCAL_SYMBOL: InferenceContext.java<165:53> [ <167:13 167:13>]
LOCAL_SYMBOL: InferenceContext.java<167:20> [ <167:20 167:20>]
LOCAL_SYMBOL: InferenceContext.java<167:20> [ <169:13 169:13>]
LOCAL_SYMBOL: InferenceContext.java<170:43> [ <170:43 170:43>]
LOCAL_SYMBOL: InferenceContext.java<170:43> [ <172:9 172:9>]
LOCAL_SYMBOL: InferenceContext.java<172:44> [ <172:44 172:44>]
LOCAL_SYMBOL: InferenceContext.java<172:44> [ <174:9 174:9>]
LOCAL_SYMBOL: InferenceContext.java<174:36> [ <174:36 174:36>]
LOCAL_SYMBOL: InferenceContext.java<174:36> [ <176:9 176:9>]
LOCAL_SYMBOL: InferenceContext.java<176:74> [ <176:74 176:74>]
LOCAL_SYMBOL: InferenceContext.java<176:74> [ <178:9 178:9>]
LOCAL_SYMBOL: InferenceContext.java<178:40> [ <178:40 178:40>]
LOCAL_SYMBOL: InferenceContext.java<178:40> [ <180:9 180:9>]
LOCAL_SYMBOL: InferenceContext.java<180:59> [ <180:59 180:59>]
LOCAL_SYMBOL: InferenceContext.java<180:59> [ <182:9 182:9>]
LOCAL_SYMBOL: InferenceContext.java<182:16> [ <182:16 182:16>]
LOCAL_SYMBOL: InferenceContext.java<182:16> [ <184:9 184:9>]
LOCAL_SYMBOL: InferenceContext.java<187:36> [ <187:36 187:36>]
LOCAL_SYMBOL: InferenceContext.java<187:36> [ <208:5 208:5>]
LOCAL_SYMBOL: InferenceContext.java<188:52> [ <188:52 188:52>]
LOCAL_SYMBOL: InferenceContext.java<188:52> [ <191:9 191:9>]
LOCAL_SYMBOL: InferenceContext.java<191:44> [ <191:44 191:44>]
LOCAL_SYMBOL: InferenceContext.java<191:44> [ <193:9 193:9>]
LOCAL_SYMBOL: InferenceContext.java<193:74> [ <193:74 193:74>]
LOCAL_SYMBOL: InferenceContext.java<193:74> [ <195:9 195:9>]
LOCAL_SYMBOL: InferenceContext.java<195:36> [ <195:36 195:36>]
LOCAL_SYMBOL: InferenceContext.java<195:36> [ <197:9 197:9>]
LOCAL_SYMBOL: InferenceContext.java<197:39> [ <197:39 197:39>]
LOCAL_SYMBOL: InferenceContext.java<197:39> [ <205:9 205:9>]
LOCAL_SYMBOL: InferenceContext.java<198:48> [ <198:48 198:48>]
LOCAL_SYMBOL: InferenceContext.java<198:48> [ <200:13 200:13>]
LOCAL_SYMBOL: InferenceContext.java<200:53> [ <200:53 200:53>]
LOCAL_SYMBOL: InferenceContext.java<200:53> [ <202:13 202:13>]
LOCAL_SYMBOL: InferenceContext.java<202:20> [ <202:20 202:20>]
LOCAL_SYMBOL: InferenceContext.java<202:20> [ <204:13 204:13>]
LOCAL_SYMBOL: InferenceContext.java<205:16> [ <205:16 205:16>]
LOCAL_SYMBOL: InferenceContext.java<205:16> [ <207:9 207:9>]
LOCAL_SYMBOL: InferenceContext.java<31:31> [ <31:31 31:31>]
LOCAL_SYMBOL: InferenceContext.java<31:31> [ <209:1 209:1>]
LOCAL_SYMBOL: InferenceContext.java<37:60> [ <37:60 37:60>]
LOCAL_SYMBOL: InferenceContext.java<37:60> [ <39:5 39:5>]
LOCAL_SYMBOL: InferenceContext.java<43:91> [ <43:91 43:91>]
LOCAL_SYMBOL: InferenceContext.java<43:91> [ <51:5 51:5>]
LOCAL_SYMBOL: InferenceContext.java<44:66> [ <44:66 44:66>]
LOCAL_SYMBOL: InferenceContext.java<44:66> [ <49:9 49:9>]
LOCAL_SYMBOL: InferenceContext.java<57:51> [ <57:51 57:51>]
LOCAL_SYMBOL: InferenceContext.java<57:51> [ <62:5 62:5>]
LOCAL_SYMBOL: InferenceContext.java<64:40> [ <64:40 64:40>]
LOCAL_SYMBOL: InferenceContext.java<64:40> [ <66:5 66:5>]
LOCAL_SYMBOL: InferenceContext.java<68:75> [ <68:75 68:75>]
LOCAL_SYMBOL: InferenceContext.java<68:75> [ <159:5 159:5>]
LOCAL_SYMBOL: InferenceContext.java<69:75> [ <69:75 69:75>]
LOCAL_SYMBOL: InferenceContext.java<69:75> [ <103:9 103:9>]
LOCAL_SYMBOL: InferenceContext.java<73:109> [ <73:109 73:109>]
LOCAL_SYMBOL: InferenceContext.java<73:109> [ <88:13 88:13>]
LOCAL_SYMBOL: InferenceContext.java<77:56> [ <77:56 77:56>]
LOCAL_SYMBOL: InferenceContext.java<77:56> [ <86:17 86:17>]
LOCAL_SYMBOL: InferenceContext.java<81:59> [ <81:59 81:59>]
LOCAL_SYMBOL: InferenceContext.java<81:59> [ <83:21 83:21>]
LOCAL_SYMBOL: InferenceContext.java<90:108> [ <90:108 90:108>]
LOCAL_SYMBOL: InferenceContext.java<90:108> [ <102:13 102:13>]
LOCAL_SYMBOL: InferenceContext.java<91:78> [ <91:78 91:78>]
LOCAL_SYMBOL: InferenceContext.java<91:78> [ <101:17 101:17>]
LOCAL_SYMBOL: InferenceContext.java<92:60> [ <92:60 92:60>]
LOCAL_SYMBOL: InferenceContext.java<92:60> [ <94:21 94:21>]
LOCAL_SYMBOL: InferenceContext.java<94:28> [ <94:28 94:28>]
LOCAL_SYMBOL: InferenceContext.java<94:28> [ <100:21 100:21>]
LOCAL_SYMBOL: InferenceContext.java<96:103> [ <96:103 96:103>]
LOCAL_SYMBOL: InferenceContext.java<96:103> [ <99:25 99:25>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.InferenceContext<0> [ <37:44 37:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.InferenceContext<0> [ <38:31 38:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.addPair<0> [ <57:30 57:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.addPair<0> [ <58:9 58:14>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.addPair<0> [ <58:42 58:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.addPair<0> [ <60:32 60:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.addPair<0> [ <61:16 61:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.addPair<1> [ <57:43 57:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.addPair<1> [ <59:9 59:14>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.addPair<1> [ <59:42 59:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.addPair<1> [ <60:40 60:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle<0> [ <64:32 64:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle<0> [ <65:40 65:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp<0> [ <43:87 43:88>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp<0> [ <44:51 44:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp<0> [ <47:54 47:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp<0> [ <48:42 48:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp<0> [ <50:45 50:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp<1> [ <45:35 45:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp<1> [ <46:40 46:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp<1> [ <47:13 47:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.inferenceVariableTypeForTp<1> [ <48:56 48:76>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <161:47 161:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <162:13 162:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <163:17 163:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <164:70 164:73>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <165:24 165:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <166:68 166:71>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <168:24 168:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <170:20 170:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <171:47 171:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <172:20 172:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <173:20 173:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <174:20 174:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <175:58 175:61>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <176:20 176:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <176:37 176:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <176:59 176:62>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <177:20 177:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <178:20 178:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <179:71 179:74>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <180:20 180:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <181:20 181:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.placeInferenceVariables<0> [ <183:53 183:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <68:46 68:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <69:13 69:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <70:51 70:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <82:69 82:78>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <103:20 103:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <104:38 104:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <106:77 106:86>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <110:38 110:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <112:44 112:53>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <113:36 113:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <114:20 114:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <116:66 116:75>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <117:77 117:86>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <118:21 118:30>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <119:46 119:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <123:43 123:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <127:50 127:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <129:50 129:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <135:21 135:30>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <136:44 136:53>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <140:17 140:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <141:77 141:86>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <142:24 142:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <143:77 143:86>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <148:92 148:101>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <151:17 151:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <154:40 154:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<0> [ <157:53 157:62>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<10> [ <80:32 80:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<10> [ <81:25 81:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<10> [ <84:47 84:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<13> [ <95:29 95:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<13> [ <97:122 97:122>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<13> [ <98:29 98:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<14> [ <96:35 96:53>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<14> [ <97:52 97:70>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<16> [ <123:26 123:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<16> [ <125:21 125:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<16> [ <125:51 125:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<16> [ <126:25 126:38>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<16> [ <128:32 128:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<17> [ <124:26 124:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<17> [ <126:53 126:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<17> [ <127:115 127:128>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<17> [ <128:62 128:75>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<17> [ <129:115 129:128>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<18> [ <146:34 146:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<18> [ <147:17 147:30>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<18> [ <148:42 148:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <68:63 68:72>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <69:45 69:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <71:51 71:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <82:81 82:90>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <103:68 103:77>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <104:73 104:82>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <105:17 105:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <106:42 106:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <108:20 108:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <110:20 110:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <112:20 112:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <113:81 113:90>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <116:18 116:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <117:42 117:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <119:111 119:120>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <122:17 122:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <124:43 124:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <134:17 134:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <136:86 136:95>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <139:20 139:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <141:42 141:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <143:42 143:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <145:20 145:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <146:51 146:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <150:20 150:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <154:74 154:83>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<1> [ <157:83 157:92>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<2> [ <70:27 70:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<2> [ <73:18 73:38>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<2> [ <75:53 75:73>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<2> [ <78:33 78:53>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<2> [ <90:17 90:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<2> [ <91:22 91:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<2> [ <96:57 96:77>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<3> [ <71:27 71:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<3> [ <73:66 73:86>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<3> [ <74:49 74:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<3> [ <79:57 79:77>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<3> [ <87:17 87:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<3> [ <90:65 90:85>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<3> [ <92:25 92:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<3> [ <97:73 97:93>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<4> [ <74:37 74:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<4> [ <76:54 76:62>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<4> [ <78:21 78:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<4> [ <80:58 80:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<5> [ <75:30 75:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<5> [ <76:115 76:134>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<6> [ <76:28 76:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<6> [ <77:21 77:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<6> [ <84:21 84:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<6> [ <87:41 87:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<9> [ <79:34 79:53>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.registerCorrespondance<9> [ <80:117 80:136>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <187:30 187:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <188:13 188:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <189:83 189:86>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <191:20 191:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <192:20 192:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <193:20 193:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <193:37 193:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <193:59 193:62>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <194:20 194:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <195:20 195:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <196:42 196:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <197:20 197:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <198:17 198:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <199:54 199:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <200:24 200:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <201:52 201:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <203:24 203:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<0> [ <206:53 206:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<1> [ <189:35 189:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.logic.InferenceContext.resolve<1> [ <190:20 190:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer.transform<2> [ <173:67 173:68>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer.transform<2> [ <173:97 173:98>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer.transform<3> [ <192:67 192:68>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer.transform<3> [ <192:81 192:82>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<12> [ <80:84 80:84>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<12> [ <80:89 80:89>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<8> [ <76:81 76:81>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<8> [ <76:87 76:87>]
COMMENT: comment [ <1:1 15:3>]
COMMENT: comment [ <28:1 30:3>]
COMMENT: comment [ <53:5 56:7>]
COMMENT: comment [ <93:25 93:40>]
COMMENT: comment [ <109:13 109:28>]
COMMENT: comment [ <111:13 111:28>]
COMMENT: comment [ <115:13 115:28>]
COMMENT: comment [ <152:17 152:32>]
