FILE: ConstructorResolutionLogic.java
SYMBOL_PACKAGE com.github.javaparser.symbolsolver.resolution [ConstructorResolutionLogic.java <15:44 15:53>]
SYMBOL_PACKAGE com.github.javaparser.symbolsolver
SYMBOL_PACKAGE com.github.javaparser
SYMBOL_PACKAGE com.github
SYMBOL_PACKAGE com
QUALIFIER: com.github.javaparser.symbolsolver [ConstructorResolutionLogic.java <15:31 15:42>]
QUALIFIER: com.github.javaparser [ConstructorResolutionLogic.java <15:20 15:29>]
QUALIFIER: com.github [ConstructorResolutionLogic.java <15:13 15:18>]
QUALIFIER: com [ConstructorResolutionLogic.java <15:9 15:11>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <17:62 17:83>]
SYMBOL_PACKAGE com.github.javaparser.symbolsolver.model.declarations
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations [ConstructorResolutionLogic.java <17:49 17:60>]
SYMBOL_PACKAGE com.github.javaparser.symbolsolver.model
QUALIFIER: com.github.javaparser.symbolsolver.model [ConstructorResolutionLogic.java <17:43 17:47>]
QUALIFIER: com.github.javaparser.symbolsolver [ConstructorResolutionLogic.java <17:30 17:41>]
QUALIFIER: com.github.javaparser [ConstructorResolutionLogic.java <17:19 17:28>]
QUALIFIER: com.github [ConstructorResolutionLogic.java <17:12 17:17>]
QUALIFIER: com [ConstructorResolutionLogic.java <17:8 17:10>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> com.github.javaparser.symbolsolver.model.declarations.MethodAmbiguityException [ConstructorResolutionLogic.java <18:62 18:85>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations [ConstructorResolutionLogic.java <18:49 18:60>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ConstructorResolutionLogic.java <18:43 18:47>]
QUALIFIER: com.github.javaparser.symbolsolver [ConstructorResolutionLogic.java <18:30 18:41>]
QUALIFIER: com.github.javaparser [ConstructorResolutionLogic.java <18:19 18:28>]
QUALIFIER: com.github [ConstructorResolutionLogic.java <18:12 18:17>]
QUALIFIER: com [ConstructorResolutionLogic.java <18:8 18:10>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ConstructorResolutionLogic.java <19:62 19:85>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations [ConstructorResolutionLogic.java <19:49 19:60>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ConstructorResolutionLogic.java <19:43 19:47>]
QUALIFIER: com.github.javaparser.symbolsolver [ConstructorResolutionLogic.java <19:30 19:41>]
QUALIFIER: com.github.javaparser [ConstructorResolutionLogic.java <19:19 19:28>]
QUALIFIER: com.github [ConstructorResolutionLogic.java <19:12 19:17>]
QUALIFIER: com [ConstructorResolutionLogic.java <19:8 19:10>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ConstructorResolutionLogic.java <20:60 20:74>]
SYMBOL_PACKAGE com.github.javaparser.symbolsolver.model.resolution
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ConstructorResolutionLogic.java <20:49 20:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ConstructorResolutionLogic.java <20:43 20:47>]
QUALIFIER: com.github.javaparser.symbolsolver [ConstructorResolutionLogic.java <20:30 20:41>]
QUALIFIER: com.github.javaparser [ConstructorResolutionLogic.java <20:19 20:28>]
QUALIFIER: com.github [ConstructorResolutionLogic.java <20:12 20:17>]
QUALIFIER: com [ConstructorResolutionLogic.java <20:8 20:10>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ConstructorResolutionLogic.java <21:60 21:69>]
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ConstructorResolutionLogic.java <21:49 21:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ConstructorResolutionLogic.java <21:43 21:47>]
QUALIFIER: com.github.javaparser.symbolsolver [ConstructorResolutionLogic.java <21:30 21:41>]
QUALIFIER: com.github.javaparser [ConstructorResolutionLogic.java <21:19 21:28>]
QUALIFIER: com.github [ConstructorResolutionLogic.java <21:12 21:17>]
QUALIFIER: com [ConstructorResolutionLogic.java <21:8 21:10>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType [ConstructorResolutionLogic.java <22:60 22:68>]
SYMBOL_PACKAGE com.github.javaparser.symbolsolver.model.typesystem
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ConstructorResolutionLogic.java <22:49 22:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ConstructorResolutionLogic.java <22:43 22:47>]
QUALIFIER: com.github.javaparser.symbolsolver [ConstructorResolutionLogic.java <22:30 22:41>]
QUALIFIER: com.github.javaparser [ConstructorResolutionLogic.java <22:19 22:28>]
QUALIFIER: com.github [ConstructorResolutionLogic.java <22:12 22:17>]
QUALIFIER: com [ConstructorResolutionLogic.java <22:8 22:10>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <23:60 23:63>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ConstructorResolutionLogic.java <23:49 23:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ConstructorResolutionLogic.java <23:43 23:47>]
QUALIFIER: com.github.javaparser.symbolsolver [ConstructorResolutionLogic.java <23:30 23:41>]
QUALIFIER: com.github.javaparser [ConstructorResolutionLogic.java <23:19 23:28>]
QUALIFIER: com.github [ConstructorResolutionLogic.java <23:12 23:17>]
QUALIFIER: com [ConstructorResolutionLogic.java <23:8 23:10>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> java.util.ArrayList<E> [ConstructorResolutionLogic.java <25:18 25:26>]
SYMBOL_PACKAGE java.util
QUALIFIER: java.util [ConstructorResolutionLogic.java <25:13 25:16>]
SYMBOL_PACKAGE java
QUALIFIER: java [ConstructorResolutionLogic.java <25:8 25:11>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> java.util.HashMap<K, V> [ConstructorResolutionLogic.java <26:18 26:24>]
QUALIFIER: java.util [ConstructorResolutionLogic.java <26:13 26:16>]
QUALIFIER: java [ConstructorResolutionLogic.java <26:8 26:11>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> java.util.List<E> [ConstructorResolutionLogic.java <27:18 27:21>]
QUALIFIER: java.util [ConstructorResolutionLogic.java <27:13 27:16>]
QUALIFIER: java [ConstructorResolutionLogic.java <27:8 27:11>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> java.util.Map<K, V> [ConstructorResolutionLogic.java <28:18 28:20>]
QUALIFIER: java.util [ConstructorResolutionLogic.java <28:13 28:16>]
QUALIFIER: java [ConstructorResolutionLogic.java <28:8 28:11>]
REFERENCE_IMPORT ConstructorResolutionLogic.java -> java.util.stream.Collectors [ConstructorResolutionLogic.java <29:25 29:34>]
SYMBOL_PACKAGE java.util.stream
QUALIFIER: java.util.stream [ConstructorResolutionLogic.java <29:18 29:23>]
QUALIFIER: java.util [ConstructorResolutionLogic.java <29:13 29:16>]
QUALIFIER: java [ConstructorResolutionLogic.java <29:8 29:11>]
SYMBOL_CLASS public com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic [ConstructorResolutionLogic.java <34:1 <34:14 34:39> 226:1>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<34:41> [ConstructorResolutionLogic.java <34:41 34:41>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<34:41> [ConstructorResolutionLogic.java <226:1 226:1>]
COMMENT: comment [ConstructorResolutionLogic.java <31:1 33:3>]
SYMBOL_METHOD private static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <36:5 <36:5  <36:31 36:54> 37:73> 48:5>]
REFERENCE_TYPE_USAGE static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<E> [ConstructorResolutionLogic.java <36:20 36:23>]
REFERENCE_TYPE_ARGUMENT static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <36:25 36:28>]
REFERENCE_TYPE_USAGE static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<E> [ConstructorResolutionLogic.java <36:56 36:59>]
REFERENCE_TYPE_ARGUMENT static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <36:61 36:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<0> [ConstructorResolutionLogic.java <36:67 36:80>]
SYMBOL_BUILTIN_TYPE int
REFERENCE_TYPE_USAGE static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> int [ConstructorResolutionLogic.java <36:83 36:85>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<1> [ConstructorResolutionLogic.java <36:87 36:99>]
REFERENCE_TYPE_USAGE static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <37:56 37:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<2> [ConstructorResolutionLogic.java <37:61 37:72>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<37:75> [ConstructorResolutionLogic.java <37:75 37:75>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<37:75> [ConstructorResolutionLogic.java <48:5 48:5>]
REFERENCE_TYPE_USAGE static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<E> [ConstructorResolutionLogic.java <38:9 38:12>]
REFERENCE_TYPE_ARGUMENT static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <38:14 38:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<3> [ConstructorResolutionLogic.java <38:20 38:22>]
SYMBOL_METHOD java.util.ArrayList<E>.ArrayList(java.util.Collection<? extends E>)
REFERENCE_CALL static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.ArrayList<E>.ArrayList(java.util.Collection<? extends E>) [ConstructorResolutionLogic.java <38:30 38:40>]
REFERENCE_TYPE_USAGE static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.ArrayList<E> [ConstructorResolutionLogic.java <38:30 38:38>]
SYMBOL_METHOD java.util.List<java.util.List<E>.E> java.util.List<E>.subList(int, int)
REFERENCE_CALL static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<java.util.List<E>.E> java.util.List<E>.subList(int, int) [ConstructorResolutionLogic.java <38:57 38:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<0> [ConstructorResolutionLogic.java <38:42 38:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<1> [ConstructorResolutionLogic.java <38:68 38:80>]
REFERENCE_TYPE_USAGE static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<E> [ConstructorResolutionLogic.java <39:9 39:12>]
REFERENCE_TYPE_ARGUMENT static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <39:14 39:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<4> [ConstructorResolutionLogic.java <39:20 39:33>]
REFERENCE_CALL static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.util.List<java.util.List<E>.E> java.util.List<E>.subList(int, int) [ConstructorResolutionLogic.java <39:52 39:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<0> [ConstructorResolutionLogic.java <39:37 39:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<1> [ConstructorResolutionLogic.java <39:60 39:72>]
SYMBOL_METHOD int java.util.List<E>.size()
REFERENCE_CALL static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> int java.util.List<E>.size() [ConstructorResolutionLogic.java <39:90 39:93>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<0> [ConstructorResolutionLogic.java <39:75 39:88>]
SYMBOL_METHOD boolean java.util.List<E>.isEmpty()
REFERENCE_CALL static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.util.List<E>.isEmpty() [ConstructorResolutionLogic.java <40:28 40:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<4> [ConstructorResolutionLogic.java <40:13 40:26>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<40:39> [ConstructorResolutionLogic.java <40:39 40:39>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<40:39> [ConstructorResolutionLogic.java <43:9 43:9>]
SYMBOL_METHOD boolean java.util.List<E>.add(java.util.List<E>.E)
REFERENCE_CALL static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.util.List<E>.add(java.util.List<E>.E) [ConstructorResolutionLogic.java <42:17 42:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<3> [ConstructorResolutionLogic.java <42:13 42:15>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<2> [ConstructorResolutionLogic.java <42:21 42:32>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<43:16> [ConstructorResolutionLogic.java <43:16 43:16>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<43:16> [ConstructorResolutionLogic.java <46:9 46:9>]
REFERENCE_TYPE_USAGE static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <44:13 44:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<5> [ConstructorResolutionLogic.java <44:18 44:30>]
SYMBOL_METHOD static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>)
REFERENCE_CALL static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) [ConstructorResolutionLogic.java <44:34 44:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<4> [ConstructorResolutionLogic.java <44:49 44:62>]
REFERENCE_CALL static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.util.List<E>.add(java.util.List<E>.E) [ConstructorResolutionLogic.java <45:17 45:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<3> [ConstructorResolutionLogic.java <45:13 45:15>]
SYMBOL_METHOD com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type)
REFERENCE_CALL static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <45:25 45:33>]
REFERENCE_TYPE_USAGE static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType [ConstructorResolutionLogic.java <45:25 45:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<5> [ConstructorResolutionLogic.java <45:35 45:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues<3> [ConstructorResolutionLogic.java <47:16 47:18>]
SYMBOL_METHOD private static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) [ConstructorResolutionLogic.java <50:5 <50:5  <50:25 50:38> 50:65> 56:5>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <50:20 50:23>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<E> [ConstructorResolutionLogic.java <50:40 50:43>]
REFERENCE_TYPE_ARGUMENT static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <50:45 50:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType<0> [ConstructorResolutionLogic.java <50:51 50:64>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<50:67> [ConstructorResolutionLogic.java <50:67 50:67>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<50:67> [ConstructorResolutionLogic.java <56:5 56:5>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> boolean java.util.List<E>.isEmpty() [ConstructorResolutionLogic.java <51:28 51:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType<0> [ConstructorResolutionLogic.java <51:13 51:26>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<51:39> [ConstructorResolutionLogic.java <51:39 51:39>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<51:39> [ConstructorResolutionLogic.java <53:9 53:9>]
SYMBOL_METHOD java.lang.IllegalArgumentException.IllegalArgumentException()
SYMBOL_PACKAGE java.lang
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.lang.IllegalArgumentException.IllegalArgumentException() [ConstructorResolutionLogic.java <52:23 52:46>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.lang.IllegalArgumentException [ConstructorResolutionLogic.java <52:23 52:46>]
SYMBOL_METHOD java.util.List<E>.E java.util.List<E>.get(int)
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<E>.E java.util.List<E>.get(int) [ConstructorResolutionLogic.java <55:31 55:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findCommonType<0> [ConstructorResolutionLogic.java <55:16 55:29>]
SYMBOL_METHOD public static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ConstructorResolutionLogic.java <58:5 <58:5  <58:27 58:38> 59:61> 61:5>]
SYMBOL_BUILTIN_TYPE boolean
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean [ConstructorResolutionLogic.java <58:19 58:25>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <58:40 58:61>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <58:63 58:73>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.util.List<E> [ConstructorResolutionLogic.java <58:76 58:79>]
REFERENCE_TYPE_ARGUMENT static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <58:81 58:84>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <58:87 58:100>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ConstructorResolutionLogic.java <59:40 59:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<2> [ConstructorResolutionLogic.java <59:51 59:60>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<59:63> [ConstructorResolutionLogic.java <59:63 59:63>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<59:63> [ConstructorResolutionLogic.java <61:5 61:5>]
SYMBOL_METHOD static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean)
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) [ConstructorResolutionLogic.java <60:16 60:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <60:29 60:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <60:42 60:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<2> [ConstructorResolutionLogic.java <60:58 60:67>]
SYMBOL_METHOD private static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) [ConstructorResolutionLogic.java <63:5 <63:5  <63:28 63:39> 64:93> 137:5>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean [ConstructorResolutionLogic.java <63:20 63:26>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <63:41 63:62>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <63:64 63:74>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<E> [ConstructorResolutionLogic.java <63:77 63:80>]
REFERENCE_TYPE_ARGUMENT static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <63:82 63:85>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <63:88 63:101>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ConstructorResolutionLogic.java <64:41 64:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<2> [ConstructorResolutionLogic.java <64:52 64:61>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean [ConstructorResolutionLogic.java <64:64 64:70>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<3> [ConstructorResolutionLogic.java <64:72 64:92>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<64:95> [ConstructorResolutionLogic.java <64:95 64:95>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<64:95> [ConstructorResolutionLogic.java <137:5 137:5>]
SYMBOL_METHOD boolean com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.hasVariadicParameter()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.hasVariadicParameter() [ConstructorResolutionLogic.java <65:25 65:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <65:13 65:23>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<65:49> [ConstructorResolutionLogic.java <65:49 65:49>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<65:49> [ConstructorResolutionLogic.java <92:9 92:9>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int [ConstructorResolutionLogic.java <66:13 66:15>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<4> [ConstructorResolutionLogic.java <66:17 66:19>]
SYMBOL_METHOD int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams() [ConstructorResolutionLogic.java <66:35 66:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <66:23 66:33>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams() [ConstructorResolutionLogic.java <67:29 67:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <67:17 67:27>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int java.util.List<E>.size() [ConstructorResolutionLogic.java <67:67 67:70>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <67:52 67:65>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<67:75> [ConstructorResolutionLogic.java <67:75 67:75>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<67:75> [ConstructorResolutionLogic.java <85:13 85:13>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <69:17 69:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<5> [ConstructorResolutionLogic.java <69:22 69:33>]
SYMBOL_METHOD com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType() [ConstructorResolutionLogic.java <69:64 69:70>]
SYMBOL_METHOD com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getLastParam()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getLastParam() [ConstructorResolutionLogic.java <69:49 69:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <69:37 69:47>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <70:17 70:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<6> [ConstructorResolutionLogic.java <70:22 70:31>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<E>.E java.util.List<E>.get(int) [ConstructorResolutionLogic.java <70:50 70:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <70:35 70:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<4> [ConstructorResolutionLogic.java <70:54 70:56>]
SYMBOL_METHOD boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <71:35 71:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<5> [ConstructorResolutionLogic.java <71:22 71:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<6> [ConstructorResolutionLogic.java <71:50 71:59>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<71:63> [ConstructorResolutionLogic.java <71:63 71:63>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<71:63> [ConstructorResolutionLogic.java <84:17 84:17>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ConstructorResolutionLogic.java <72:26 72:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<7> [ConstructorResolutionLogic.java <72:51 72:52>]
SYMBOL_METHOD java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters() [ConstructorResolutionLogic.java <72:68 72:84>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <72:56 72:66>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<72:89> [ConstructorResolutionLogic.java <72:89 72:89>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<72:89> [ConstructorResolutionLogic.java <74:21 74:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<5> [ConstructorResolutionLogic.java <73:25 73:36>]
SYMBOL_METHOD static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.replaceTypeParam(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.replaceTypeParam(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ConstructorResolutionLogic.java <73:62 73:77>]
QUALIFIER: com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic [ConstructorResolutionLogic.java <73:40 73:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<5> [ConstructorResolutionLogic.java <73:79 73:90>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<7> [ConstructorResolutionLogic.java <73:93 73:94>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<2> [ConstructorResolutionLogic.java <73:97 73:106>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <75:39 75:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<5> [ConstructorResolutionLogic.java <75:26 75:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<6> [ConstructorResolutionLogic.java <75:54 75:63>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<75:67> [ConstructorResolutionLogic.java <75:67 75:67>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<75:67> [ConstructorResolutionLogic.java <83:21 83:21>]
SYMBOL_METHOD boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray() [ConstructorResolutionLogic.java <76:40 76:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<6> [ConstructorResolutionLogic.java <76:29 76:38>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <77:49 77:62>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<5> [ConstructorResolutionLogic.java <77:36 77:47>]
SYMBOL_METHOD com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType() [ConstructorResolutionLogic.java <77:89 77:104>]
SYMBOL_METHOD com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType() [ConstructorResolutionLogic.java <77:75 77:85>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<6> [ConstructorResolutionLogic.java <77:64 77:73>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<77:110> [ConstructorResolutionLogic.java <77:110 77:110>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<77:110> [ConstructorResolutionLogic.java <79:25 79:25>]
SYMBOL_METHOD java.util.List<E>.E java.util.List<E>.set(int, java.util.List<E>.E)
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<E>.E java.util.List<E>.set(int, java.util.List<E>.E) [ConstructorResolutionLogic.java <78:44 78:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <78:29 78:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<4> [ConstructorResolutionLogic.java <78:48 78:50>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType() [ConstructorResolutionLogic.java <78:78 78:93>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType() [ConstructorResolutionLogic.java <78:64 78:74>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<6> [ConstructorResolutionLogic.java <78:53 78:62>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<79:32> [ConstructorResolutionLogic.java <79:32 79:32>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<79:32> [ConstructorResolutionLogic.java <82:25 82:25>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <80:29 80:42>]
SYMBOL_METHOD static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type)
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <80:46 80:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <80:71 80:84>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<4> [ConstructorResolutionLogic.java <80:87 80:89>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType() [ConstructorResolutionLogic.java <81:64 81:70>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getLastParam() [ConstructorResolutionLogic.java <81:49 81:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <81:37 81:47>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<85:20> [ConstructorResolutionLogic.java <85:20 85:20>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<85:20> [ConstructorResolutionLogic.java <91:13 91:13>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<4> [ConstructorResolutionLogic.java <86:21 86:23>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int java.util.List<E>.size() [ConstructorResolutionLogic.java <86:42 86:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <86:27 86:40>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<86:50> [ConstructorResolutionLogic.java <86:50 86:50>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<86:50> [ConstructorResolutionLogic.java <88:17 88:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <89:17 89:30>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.groupVariadicParamValues(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, int, com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <90:25 90:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <90:50 90:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<4> [ConstructorResolutionLogic.java <90:66 90:68>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType() [ConstructorResolutionLogic.java <90:98 90:104>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getLastParam() [ConstructorResolutionLogic.java <90:83 90:94>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <90:71 90:81>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams() [ConstructorResolutionLogic.java <94:25 94:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <94:13 94:23>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int java.util.List<E>.size() [ConstructorResolutionLogic.java <94:63 94:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <94:48 94:61>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<94:71> [ConstructorResolutionLogic.java <94:71 94:71>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<94:71> [ConstructorResolutionLogic.java <96:9 96:9>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.Map<K, V> [ConstructorResolutionLogic.java <97:9 97:11>]
REFERENCE_TYPE_ARGUMENT static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.lang.String [ConstructorResolutionLogic.java <97:13 97:18>]
REFERENCE_TYPE_ARGUMENT static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <97:21 97:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<9> [ConstructorResolutionLogic.java <97:27 97:43>]
SYMBOL_METHOD java.util.HashMap<K, V>.HashMap()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.HashMap<K, V>.HashMap() [ConstructorResolutionLogic.java <97:51 97:59>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.HashMap<K, V> [ConstructorResolutionLogic.java <97:51 97:57>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean [ConstructorResolutionLogic.java <98:9 98:15>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<10> [ConstructorResolutionLogic.java <98:17 98:40>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int [ConstructorResolutionLogic.java <99:14 99:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<11> [ConstructorResolutionLogic.java <99:18 99:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<11> [ConstructorResolutionLogic.java <99:25 99:25>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams() [ConstructorResolutionLogic.java <99:41 99:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <99:29 99:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<11> [ConstructorResolutionLogic.java <99:62 99:62>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<99:67> [ConstructorResolutionLogic.java <99:67 99:67>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<99:67> [ConstructorResolutionLogic.java <135:9 135:9>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <100:13 100:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <100:18 100:29>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType() [ConstructorResolutionLogic.java <100:57 100:63>]
SYMBOL_METHOD com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int)
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int) [ConstructorResolutionLogic.java <100:45 100:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <100:33 100:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<11> [ConstructorResolutionLogic.java <100:54 100:54>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <101:13 101:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<13> [ConstructorResolutionLogic.java <101:18 101:27>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<E>.E java.util.List<E>.get(int) [ConstructorResolutionLogic.java <101:46 101:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<1> [ConstructorResolutionLogic.java <101:31 101:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<11> [ConstructorResolutionLogic.java <101:50 101:50>]
SYMBOL_METHOD boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isTypeVariable()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isTypeVariable() [ConstructorResolutionLogic.java <102:31 102:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <102:18 102:29>]
SYMBOL_METHOD boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isWildcard()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isWildcard() [ConstructorResolutionLogic.java <102:66 102:75>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <102:53 102:64>]
SYMBOL_METHOD boolean com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnMethod()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnMethod() [ConstructorResolutionLogic.java <103:55 103:70>]
SYMBOL_METHOD com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter() [ConstructorResolutionLogic.java <103:37 103:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <103:24 103:35>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<103:75> [ConstructorResolutionLogic.java <103:75 103:75>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<103:75> [ConstructorResolutionLogic.java <106:13 106:13>]
SYMBOL_METHOD java.util.Map<K, V>.V java.util.Map<K, V>.put(java.util.Map<K, V>.K, java.util.Map<K, V>.V)
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.Map<K, V>.V java.util.Map<K, V>.put(java.util.Map<K, V>.K, java.util.Map<K, V>.V) [ConstructorResolutionLogic.java <104:35 104:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<9> [ConstructorResolutionLogic.java <104:17 104:33>]
SYMBOL_METHOD java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName() [ConstructorResolutionLogic.java <104:70 104:76>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter() [ConstructorResolutionLogic.java <104:52 104:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <104:39 104:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<13> [ConstructorResolutionLogic.java <104:81 104:90>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean [ConstructorResolutionLogic.java <107:13 107:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<14> [ConstructorResolutionLogic.java <107:21 107:51>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <108:34 108:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <108:21 108:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<13> [ConstructorResolutionLogic.java <108:49 108:58>]
SYMBOL_METHOD boolean com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration.isVariadic()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration.isVariadic() [ConstructorResolutionLogic.java <108:89 108:98>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int) [ConstructorResolutionLogic.java <108:77 108:84>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <108:65 108:75>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<11> [ConstructorResolutionLogic.java <108:86 108:86>]
SYMBOL_METHOD boolean com.github.javaparser.symbolsolver.model.typesystem.ArrayType.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.ArrayType.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <109:60 109:73>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <109:36 109:44>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType [ConstructorResolutionLogic.java <109:36 109:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <109:46 109:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<13> [ConstructorResolutionLogic.java <109:75 109:84>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<14> [ConstructorResolutionLogic.java <110:18 110:48>]
SYMBOL_METHOD boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType() [ConstructorResolutionLogic.java <110:66 110:80>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <110:53 110:64>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType() [ConstructorResolutionLogic.java <111:35 111:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<13> [ConstructorResolutionLogic.java <111:24 111:33>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<111:54> [ConstructorResolutionLogic.java <111:54 111:54>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<111:54> [ConstructorResolutionLogic.java <114:13 114:13>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<14> [ConstructorResolutionLogic.java <112:17 112:47>]
SYMBOL_METHOD static boolean com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.isAssignableMatchTypeParameters(com.github.javaparser.symbolsolver.model.typesystem.ReferenceType, com.github.javaparser.symbolsolver.model.typesystem.ReferenceType, java.util.Map<java.lang.String, com.github.javaparser.symbolsolver.model.typesystem.Type>)
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static boolean com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.isAssignableMatchTypeParameters(com.github.javaparser.symbolsolver.model.typesystem.ReferenceType, com.github.javaparser.symbolsolver.model.typesystem.ReferenceType, java.util.Map<java.lang.String, com.github.javaparser.symbolsolver.model.typesystem.Type>) [ConstructorResolutionLogic.java <112:73 112:103>]
QUALIFIER: com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic [ConstructorResolutionLogic.java <112:51 112:71>]
SYMBOL_METHOD com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ConstructorResolutionLogic.java <113:38 113:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <113:25 113:36>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ConstructorResolutionLogic.java <113:68 113:82>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<13> [ConstructorResolutionLogic.java <113:57 113:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<9> [ConstructorResolutionLogic.java <113:87 113:103>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<14> [ConstructorResolutionLogic.java <115:18 115:48>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<115:51> [ConstructorResolutionLogic.java <115:51 115:51>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<115:51> [ConstructorResolutionLogic.java <134:13 134:13>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<E> [ConstructorResolutionLogic.java <116:17 116:20>]
REFERENCE_TYPE_ARGUMENT static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ConstructorResolutionLogic.java <116:22 116:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<15> [ConstructorResolutionLogic.java <116:48 116:61>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters() [ConstructorResolutionLogic.java <116:77 116:93>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <116:65 116:75>]
SYMBOL_METHOD boolean java.util.List<E>.addAll(java.util.Collection<? extends E>)
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean java.util.List<E>.addAll(java.util.Collection<? extends E>) [ConstructorResolutionLogic.java <117:32 117:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<15> [ConstructorResolutionLogic.java <117:17 117:30>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters() [ConstructorResolutionLogic.java <117:67 117:83>]
SYMBOL_METHOD com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration.declaringType()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration.declaringType() [ConstructorResolutionLogic.java <117:51 117:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <117:39 117:49>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ConstructorResolutionLogic.java <118:22 118:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<16> [ConstructorResolutionLogic.java <118:47 118:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<15> [ConstructorResolutionLogic.java <118:52 118:65>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<118:68> [ConstructorResolutionLogic.java <118:68 118:68>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<118:68> [ConstructorResolutionLogic.java <120:17 120:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <119:21 119:32>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.replaceTypeParam(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ConstructorResolutionLogic.java <119:58 119:73>]
QUALIFIER: com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic [ConstructorResolutionLogic.java <119:36 119:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <119:75 119:86>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<16> [ConstructorResolutionLogic.java <119:89 119:90>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<2> [ConstructorResolutionLogic.java <119:93 119:102>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <122:35 122:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <122:22 122:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<13> [ConstructorResolutionLogic.java <122:50 122:59>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<122:63> [ConstructorResolutionLogic.java <122:63 122:63>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<122:63> [ConstructorResolutionLogic.java <133:17 133:17>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isWildcard() [ConstructorResolutionLogic.java <123:36 123:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<13> [ConstructorResolutionLogic.java <123:25 123:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<3> [ConstructorResolutionLogic.java <123:52 123:72>]
SYMBOL_METHOD boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive() [ConstructorResolutionLogic.java <123:91 123:101>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <123:78 123:89>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<123:106> [ConstructorResolutionLogic.java <123:106 123:106>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<123:106> [ConstructorResolutionLogic.java <126:21 126:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<10> [ConstructorResolutionLogic.java <124:25 124:48>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.hasVariadicParameter() [ConstructorResolutionLogic.java <127:37 127:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <127:25 127:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<11> [ConstructorResolutionLogic.java <127:63 127:63>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams() [ConstructorResolutionLogic.java <127:80 127:96>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<0> [ConstructorResolutionLogic.java <127:68 127:78>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<127:105> [ConstructorResolutionLogic.java <127:105 127:105>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<127:105> [ConstructorResolutionLogic.java <131:21 131:21>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean com.github.javaparser.symbolsolver.model.typesystem.ArrayType.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <128:57 128:70>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <128:33 128:41>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType [ConstructorResolutionLogic.java <128:33 128:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<12> [ConstructorResolutionLogic.java <128:43 128:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<13> [ConstructorResolutionLogic.java <128:72 128:81>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<128:85> [ConstructorResolutionLogic.java <128:85 128:85>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<128:85> [ConstructorResolutionLogic.java <130:25 130:25>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<3> [ConstructorResolutionLogic.java <136:17 136:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable<10> [ConstructorResolutionLogic.java <136:42 136:65>]
SYMBOL_METHOD public static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ConstructorResolutionLogic.java <146:1 <146:1  <146:59 146:76> 147:104> 154:5>]
COMMENT: comment [ConstructorResolutionLogic.java <139:5 145:7>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ConstructorResolutionLogic.java <146:19 146:33>]
REFERENCE_TYPE_ARGUMENT static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <146:35 146:56>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.util.List<E> [ConstructorResolutionLogic.java <147:13 147:16>]
REFERENCE_TYPE_ARGUMENT static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <147:18 147:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<0> [ConstructorResolutionLogic.java <147:42 147:53>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.util.List<E> [ConstructorResolutionLogic.java <147:56 147:59>]
REFERENCE_TYPE_ARGUMENT static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <147:61 147:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<1> [ConstructorResolutionLogic.java <147:67 147:80>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ConstructorResolutionLogic.java <147:83 147:92>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<2> [ConstructorResolutionLogic.java <147:94 147:103>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<147:106> [ConstructorResolutionLogic.java <147:106 147:106>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<147:106> [ConstructorResolutionLogic.java <154:5 154:5>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ConstructorResolutionLogic.java <148:9 148:23>]
REFERENCE_TYPE_ARGUMENT static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <148:25 148:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<3> [ConstructorResolutionLogic.java <148:49 148:51>]
SYMBOL_METHOD static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean)
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) [ConstructorResolutionLogic.java <149:17 149:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<0> [ConstructorResolutionLogic.java <149:36 149:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<1> [ConstructorResolutionLogic.java <149:50 149:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<2> [ConstructorResolutionLogic.java <149:66 149:75>]
SYMBOL_METHOD boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved()
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.isSolved() [ConstructorResolutionLogic.java <150:17 150:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<3> [ConstructorResolutionLogic.java <150:13 150:15>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<150:29> [ConstructorResolutionLogic.java <150:29 150:29>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<150:29> [ConstructorResolutionLogic.java <152:9 152:9>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<3> [ConstructorResolutionLogic.java <151:20 151:22>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) [ConstructorResolutionLogic.java <153:16 153:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<0> [ConstructorResolutionLogic.java <153:35 153:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<1> [ConstructorResolutionLogic.java <153:49 153:62>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<2> [ConstructorResolutionLogic.java <153:65 153:74>]
SYMBOL_METHOD public static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) [ConstructorResolutionLogic.java <156:5 <156:5  <156:59 156:76> 156:196> 195:5>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ConstructorResolutionLogic.java <156:19 156:33>]
REFERENCE_TYPE_ARGUMENT static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <156:35 156:56>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<E> [ConstructorResolutionLogic.java <156:78 156:81>]
REFERENCE_TYPE_ARGUMENT static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <156:83 156:104>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<0> [ConstructorResolutionLogic.java <156:107 156:118>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<E> [ConstructorResolutionLogic.java <156:121 156:124>]
REFERENCE_TYPE_ARGUMENT static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <156:126 156:129>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<1> [ConstructorResolutionLogic.java <156:132 156:145>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ConstructorResolutionLogic.java <156:148 156:157>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<2> [ConstructorResolutionLogic.java <156:159 156:168>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean [ConstructorResolutionLogic.java <156:171 156:177>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<3> [ConstructorResolutionLogic.java <156:179 156:195>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<156:198> [ConstructorResolutionLogic.java <156:198 156:198>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<156:198> [ConstructorResolutionLogic.java <195:5 195:5>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<E> [ConstructorResolutionLogic.java <157:9 157:12>]
REFERENCE_TYPE_ARGUMENT static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <157:14 157:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<4> [ConstructorResolutionLogic.java <157:38 157:59>]
SYMBOL_METHOD R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>)
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>) [ConstructorResolutionLogic.java <157:163 157:169>]
SYMBOL_METHOD java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>)
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ConstructorResolutionLogic.java <157:85 157:90>]
SYMBOL_METHOD java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream()
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ConstructorResolutionLogic.java <157:76 157:81>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<0> [ConstructorResolutionLogic.java <157:63 157:74>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<6> [ConstructorResolutionLogic.java <157:93 157:93>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) [ConstructorResolutionLogic.java <157:99 157:110>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<6> [ConstructorResolutionLogic.java <157:112 157:112>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<1> [ConstructorResolutionLogic.java <157:115 157:128>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<2> [ConstructorResolutionLogic.java <157:131 157:140>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<3> [ConstructorResolutionLogic.java <157:143 157:159>]
SYMBOL_METHOD static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>()
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>() [ConstructorResolutionLogic.java <157:182 157:187>]
QUALIFIER: java.util.stream.Collectors [ConstructorResolutionLogic.java <157:171 157:180>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean java.util.List<E>.isEmpty() [ConstructorResolutionLogic.java <158:36 158:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<4> [ConstructorResolutionLogic.java <158:13 158:34>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<158:47> [ConstructorResolutionLogic.java <158:47 158:47>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<158:47> [ConstructorResolutionLogic.java <160:9 160:9>]
SYMBOL_METHOD static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.unsolved<S, S2>(java.lang.Class<S2>)
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.unsolved<S, S2>(java.lang.Class<S2>) [ConstructorResolutionLogic.java <159:36 159:43>]
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution.SymbolReference [ConstructorResolutionLogic.java <159:20 159:34>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <159:45 159:66>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int java.util.List<E>.size() [ConstructorResolutionLogic.java <161:36 161:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<4> [ConstructorResolutionLogic.java <161:13 161:34>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<161:49> [ConstructorResolutionLogic.java <161:49 161:49>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<161:49> [ConstructorResolutionLogic.java <163:9 163:9>]
SYMBOL_METHOD static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.solved<S, S2>(S2)
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.solved<S, S2>(S2) [ConstructorResolutionLogic.java <162:36 162:41>]
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution.SymbolReference [ConstructorResolutionLogic.java <162:20 162:34>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<E>.E java.util.List<E>.get(int) [ConstructorResolutionLogic.java <162:66 162:68>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<4> [ConstructorResolutionLogic.java <162:43 162:64>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<163:16> [ConstructorResolutionLogic.java <163:16 163:16>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<163:16> [ConstructorResolutionLogic.java <194:9 194:9>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <164:13 164:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<7> [ConstructorResolutionLogic.java <164:36 164:51>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<E>.E java.util.List<E>.get(int) [ConstructorResolutionLogic.java <164:78 164:80>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<4> [ConstructorResolutionLogic.java <164:55 164:76>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <165:13 165:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<8> [ConstructorResolutionLogic.java <165:36 165:40>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean [ConstructorResolutionLogic.java <166:13 166:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<9> [ConstructorResolutionLogic.java <166:21 166:37>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int [ConstructorResolutionLogic.java <167:18 167:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<10> [ConstructorResolutionLogic.java <167:22 167:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<10> [ConstructorResolutionLogic.java <167:29 167:29>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> int java.util.List<E>.size() [ConstructorResolutionLogic.java <167:56 167:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<4> [ConstructorResolutionLogic.java <167:33 167:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<10> [ConstructorResolutionLogic.java <167:64 167:64>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<167:69> [ConstructorResolutionLogic.java <167:69 167:69>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<167:69> [ConstructorResolutionLogic.java <182:13 182:13>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<8> [ConstructorResolutionLogic.java <168:17 168:21>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.util.List<E>.E java.util.List<E>.get(int) [ConstructorResolutionLogic.java <168:48 168:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<4> [ConstructorResolutionLogic.java <168:25 168:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<10> [ConstructorResolutionLogic.java <168:52 168:52>]
SYMBOL_METHOD static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ConstructorResolutionLogic.java <169:21 169:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<7> [ConstructorResolutionLogic.java <169:36 169:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<8> [ConstructorResolutionLogic.java <169:54 169:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<2> [ConstructorResolutionLogic.java <169:61 169:70>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<169:74> [ConstructorResolutionLogic.java <169:74 169:74>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<169:74> [ConstructorResolutionLogic.java <171:17 171:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<9> [ConstructorResolutionLogic.java <170:21 170:37>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ConstructorResolutionLogic.java <171:28 171:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<8> [ConstructorResolutionLogic.java <171:43 171:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<7> [ConstructorResolutionLogic.java <171:50 171:65>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<2> [ConstructorResolutionLogic.java <171:68 171:77>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<171:81> [ConstructorResolutionLogic.java <171:81 171:81>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<171:81> [ConstructorResolutionLogic.java <174:17 174:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<9> [ConstructorResolutionLogic.java <172:21 172:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<7> [ConstructorResolutionLogic.java <173:21 173:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<8> [ConstructorResolutionLogic.java <173:40 173:44>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<174:24> [ConstructorResolutionLogic.java <174:24 174:24>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<174:24> [ConstructorResolutionLogic.java <181:17 181:17>]
SYMBOL_METHOD boolean java.lang.String.equals(java.lang.Object)
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> boolean java.lang.String.equals(java.lang.Object) [ConstructorResolutionLogic.java <176:30 176:35>]
SYMBOL_METHOD java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ConstructorResolutionLogic.java <175:58 175:73>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration.declaringType() [ConstructorResolutionLogic.java <175:42 175:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<7> [ConstructorResolutionLogic.java <175:25 175:40>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ConstructorResolutionLogic.java <176:59 176:74>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration.declaringType() [ConstructorResolutionLogic.java <176:43 176:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<8> [ConstructorResolutionLogic.java <176:37 176:41>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<176:80> [ConstructorResolutionLogic.java <176:80 176:80>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<176:80> [ConstructorResolutionLogic.java <178:21 178:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<9> [ConstructorResolutionLogic.java <177:25 177:41>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<178:28> [ConstructorResolutionLogic.java <178:28 178:28>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<178:28> [ConstructorResolutionLogic.java <180:21 180:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<9> [ConstructorResolutionLogic.java <183:17 183:33>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<183:36> [ConstructorResolutionLogic.java <183:36 183:36>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<183:36> [ConstructorResolutionLogic.java <192:13 192:13>]
SYMBOL_METHOD static boolean com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.isExactMatch(com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>)
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static boolean com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.isExactMatch(com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) [ConstructorResolutionLogic.java <185:44 185:55>]
QUALIFIER: com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic [ConstructorResolutionLogic.java <185:22 185:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<7> [ConstructorResolutionLogic.java <185:57 185:72>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<1> [ConstructorResolutionLogic.java <185:75 185:88>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<185:92> [ConstructorResolutionLogic.java <185:92 185:92>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<185:92> [ConstructorResolutionLogic.java <191:17 191:17>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static boolean com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.isExactMatch(com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) [ConstructorResolutionLogic.java <186:47 186:58>]
QUALIFIER: com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic [ConstructorResolutionLogic.java <186:25 186:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<8> [ConstructorResolutionLogic.java <186:60 186:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<1> [ConstructorResolutionLogic.java <186:67 186:80>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<186:84> [ConstructorResolutionLogic.java <186:84 186:84>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<186:84> [ConstructorResolutionLogic.java <188:21 188:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<7> [ConstructorResolutionLogic.java <187:25 187:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<8> [ConstructorResolutionLogic.java <187:44 187:48>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<188:28> [ConstructorResolutionLogic.java <188:28 188:28>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<188:28> [ConstructorResolutionLogic.java <190:21 190:21>]
SYMBOL_METHOD com.github.javaparser.symbolsolver.model.declarations.MethodAmbiguityException.MethodAmbiguityException(java.lang.String)
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.MethodAmbiguityException.MethodAmbiguityException(java.lang.String) [ConstructorResolutionLogic.java <189:35 189:58>]
REFERENCE_TYPE_USAGE static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> com.github.javaparser.symbolsolver.model.declarations.MethodAmbiguityException [ConstructorResolutionLogic.java <189:35 189:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<7> [ConstructorResolutionLogic.java <189:136 189:151>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<8> [ConstructorResolutionLogic.java <189:162 189:166>]
REFERENCE_CALL static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.solved<S, S2>(S2) [ConstructorResolutionLogic.java <193:36 193:41>]
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution.SymbolReference [ConstructorResolutionLogic.java <193:20 193:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable<7> [ConstructorResolutionLogic.java <193:43 193:58>]
SYMBOL_METHOD private static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ConstructorResolutionLogic.java <197:5 <197:5  <197:28 197:41> 198:101> 224:5>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean [ConstructorResolutionLogic.java <197:20 197:26>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <197:43 197:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<0> [ConstructorResolutionLogic.java <197:66 197:77>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration [ConstructorResolutionLogic.java <198:43 198:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<1> [ConstructorResolutionLogic.java <198:66 198:77>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ConstructorResolutionLogic.java <198:80 198:89>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<2> [ConstructorResolutionLogic.java <198:91 198:100>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<198:103> [ConstructorResolutionLogic.java <198:103 198:103>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<198:103> [ConstructorResolutionLogic.java <224:5 224:5>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean [ConstructorResolutionLogic.java <199:9 199:15>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<3> [ConstructorResolutionLogic.java <199:17 199:36>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams() [ConstructorResolutionLogic.java <200:26 200:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<0> [ConstructorResolutionLogic.java <200:13 200:24>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams() [ConstructorResolutionLogic.java <200:61 200:77>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<1> [ConstructorResolutionLogic.java <200:48 200:59>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<200:82> [ConstructorResolutionLogic.java <200:82 200:82>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<200:82> [ConstructorResolutionLogic.java <202:9 202:9>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams() [ConstructorResolutionLogic.java <203:26 203:42>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<0> [ConstructorResolutionLogic.java <203:13 203:24>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams() [ConstructorResolutionLogic.java <203:61 203:77>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<1> [ConstructorResolutionLogic.java <203:48 203:59>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<203:82> [ConstructorResolutionLogic.java <203:82 203:82>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<203:82> [ConstructorResolutionLogic.java <205:9 205:9>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int [ConstructorResolutionLogic.java <206:14 206:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<4> [ConstructorResolutionLogic.java <206:18 206:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<4> [ConstructorResolutionLogic.java <206:25 206:25>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams() [ConstructorResolutionLogic.java <206:42 206:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<0> [ConstructorResolutionLogic.java <206:29 206:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<4> [ConstructorResolutionLogic.java <206:63 206:63>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<206:68> [ConstructorResolutionLogic.java <206:68 206:68>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<206:68> [ConstructorResolutionLogic.java <222:9 222:9>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <207:13 207:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<5> [ConstructorResolutionLogic.java <207:18 207:20>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType() [ConstructorResolutionLogic.java <207:49 207:55>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int) [ConstructorResolutionLogic.java <207:37 207:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<0> [ConstructorResolutionLogic.java <207:24 207:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<4> [ConstructorResolutionLogic.java <207:46 207:46>]
REFERENCE_TYPE_USAGE static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ConstructorResolutionLogic.java <208:13 208:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<6> [ConstructorResolutionLogic.java <208:18 208:20>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType() [ConstructorResolutionLogic.java <208:49 208:55>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int) [ConstructorResolutionLogic.java <208:37 208:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<1> [ConstructorResolutionLogic.java <208:24 208:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<4> [ConstructorResolutionLogic.java <208:46 208:46>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <210:21 210:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<6> [ConstructorResolutionLogic.java <210:17 210:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<5> [ConstructorResolutionLogic.java <210:36 210:38>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <210:49 210:62>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<5> [ConstructorResolutionLogic.java <210:45 210:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<6> [ConstructorResolutionLogic.java <210:64 210:66>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<210:70> [ConstructorResolutionLogic.java <210:70 210:70>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<210:70> [ConstructorResolutionLogic.java <212:13 212:13>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<3> [ConstructorResolutionLogic.java <211:17 211:36>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <214:21 214:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<5> [ConstructorResolutionLogic.java <214:17 214:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<6> [ConstructorResolutionLogic.java <214:36 214:38>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ConstructorResolutionLogic.java <214:49 214:62>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<6> [ConstructorResolutionLogic.java <214:45 214:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<5> [ConstructorResolutionLogic.java <214:64 214:66>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<214:70> [ConstructorResolutionLogic.java <214:70 214:70>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<214:70> [ConstructorResolutionLogic.java <216:13 216:13>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<4> [ConstructorResolutionLogic.java <219:17 219:17>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams() [ConstructorResolutionLogic.java <219:36 219:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<0> [ConstructorResolutionLogic.java <219:23 219:34>]
SYMBOL_METHOD int com.github.javaparser.symbolsolver.model.typesystem.Type.arrayLevel()
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int com.github.javaparser.symbolsolver.model.typesystem.Type.arrayLevel() [ConstructorResolutionLogic.java <219:68 219:77>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<5> [ConstructorResolutionLogic.java <219:64 219:66>]
REFERENCE_CALL static boolean com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int com.github.javaparser.symbolsolver.model.typesystem.Type.arrayLevel() [ConstructorResolutionLogic.java <219:87 219:96>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<6> [ConstructorResolutionLogic.java <219:83 219:85>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<219:101> [ConstructorResolutionLogic.java <219:101 219:101>]
LOCAL_SYMBOL: ConstructorResolutionLogic.java<219:101> [ConstructorResolutionLogic.java <221:13 221:13>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isMoreSpecific<3> [ConstructorResolutionLogic.java <223:16 223:35>]
COMMENT: comment [ConstructorResolutionLogic.java <1:1 13:3>]
COMMENT: comment [ConstructorResolutionLogic.java <41:13 41:101>]
COMMENT: comment [ConstructorResolutionLogic.java <54:9 54:39>]
COMMENT: comment [ConstructorResolutionLogic.java <68:17 68:77>]
COMMENT: comment [ConstructorResolutionLogic.java <84:19 84:65>]
COMMENT: comment [ConstructorResolutionLogic.java <179:25 179:112>]
COMMENT: comment [ConstructorResolutionLogic.java <184:17 184:58>]
COMMENT: comment [ConstructorResolutionLogic.java <209:13 209:33>]
COMMENT: comment [ConstructorResolutionLogic.java <213:13 213:33>]
COMMENT: comment [ConstructorResolutionLogic.java <217:13 217:82>]
COMMENT: comment [ConstructorResolutionLogic.java <218:13 218:20>]
