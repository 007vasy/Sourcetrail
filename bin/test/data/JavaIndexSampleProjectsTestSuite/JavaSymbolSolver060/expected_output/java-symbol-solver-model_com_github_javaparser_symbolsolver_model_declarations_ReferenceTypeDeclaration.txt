FILE: ReferenceTypeDeclaration.java
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.declarations [ <1:50 1:61>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <1:44 1:48>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <3:43 3:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <4:43 4:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <5:43 5:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <6:43 6:47>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model
QUALIFIER: com.github.javaparser.symbolsolver [ <1:31 1:42>]
QUALIFIER: com.github.javaparser.symbolsolver [ <3:30 3:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <4:30 4:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <5:30 5:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <6:30 6:41>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver
QUALIFIER: com.github.javaparser [ <1:20 1:29>]
QUALIFIER: com.github.javaparser [ <3:19 3:28>]
QUALIFIER: com.github.javaparser [ <4:19 4:28>]
QUALIFIER: com.github.javaparser [ <5:19 5:28>]
QUALIFIER: com.github.javaparser [ <6:19 6:28>]
SYMBOL_PACKAGE: com.github.javaparser
QUALIFIER: com.github [ <1:13 1:18>]
QUALIFIER: com.github [ <3:12 3:17>]
QUALIFIER: com.github [ <4:12 4:17>]
QUALIFIER: com.github [ <5:12 5:17>]
QUALIFIER: com.github [ <6:12 6:17>]
SYMBOL_PACKAGE: com.github
QUALIFIER: com [ <1:9 1:11>]
QUALIFIER: com [ <3:8 3:10>]
QUALIFIER: com [ <4:8 4:10>]
QUALIFIER: com [ <5:8 5:10>]
QUALIFIER: com [ <6:8 6:10>]
SYMBOL_PACKAGE: com
QUALIFIER: com.github.javaparser.symbolsolver.model.methods [ <3:49 3:55>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.methods
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ <4:49 4:58>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.resolution
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ <5:49 5:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ <6:49 6:58>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.typesystem
QUALIFIER: java.util [ <8:13 8:16>]
QUALIFIER: java.util [ <9:13 9:16>]
QUALIFIER: java.util [ <10:13 10:16>]
QUALIFIER: java.util [ <11:13 11:16>]
QUALIFIER: java.util [ <12:13 12:16>]
SYMBOL_PACKAGE: java.util
QUALIFIER: java [ <8:8 8:11>]
QUALIFIER: java [ <9:8 9:11>]
QUALIFIER: java [ <10:8 10:11>]
QUALIFIER: java [ <11:8 11:11>]
QUALIFIER: java [ <12:8 12:11>]
SYMBOL_PACKAGE: java
QUALIFIER: java.util.stream.Collectors [ <121:26 121:35>]
QUALIFIER: java.util.stream.Collectors [ <128:77 128:86>]
QUALIFIER: java.util.stream.Collectors [ <135:76 135:85>]
QUALIFIER: java.util.stream.Collectors [ <142:127 142:136>]
QUALIFIER: java.util.stream [ <12:18 12:23>]
SYMBOL_PACKAGE: java.util.stream
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <74:44 74:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <98:16 98:19>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <215:44 215:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <220:13 220:16>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <221:20 221:23>]
SYMBOL_INTERFACE: public com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <17:1 <17:18 17:41> 225:1>]
SYMBOL_METHOD: default com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.asReferenceType() [ <19:5 <19:5 <20:38 20:52> 20:54> 22:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asReferenceType()
SYMBOL_PACKAGE: java.lang
SYMBOL_METHOD: default java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors() [ <36:1 <36:1 <36:25 36:36> 36:38> 36:39>]
SYMBOL_METHOD: default java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() [ <42:1 <42:1 <42:33 42:47> 42:49> 56:5>]
SYMBOL_METHOD: java.util.ArrayList<E>.ArrayList()
SYMBOL_METHOD: boolean java.lang.String.equals(java.lang.Object)
SYMBOL_METHOD: java.lang.String java.lang.Class<T>.getCanonicalName()
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
SYMBOL_METHOD: boolean java.util.List<E>.add(java.util.List<E>.E)
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getAllAncestors()
SYMBOL_METHOD: boolean java.util.List<E>.contains(java.lang.Object)
SYMBOL_METHOD: default com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) [ <73:1 <73:1 <73:30 73:37> 73:50> 80:5>]
SYMBOL_METHOD: java.util.Optional<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.findFirst()
SYMBOL_METHOD: java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>)
SYMBOL_METHOD: java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream()
SYMBOL_METHOD: default java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields() [ <113:1 <113:1 <113:28 113:39> 113:41> 113:42>]
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
SYMBOL_METHOD: boolean java.util.Optional<T>.isPresent()
SYMBOL_METHOD: java.util.Optional<T>.T java.util.Optional<T>.get()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.resolution.UnsolvedSymbolException.UnsolvedSymbolException(java.lang.String)
SYMBOL_METHOD: default com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) [ <85:1 <85:1 <85:30 85:44> 85:57> 92:5>]
SYMBOL_METHOD: default java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() [ <118:1 <118:1 <118:36 118:51> 118:53> 122:5>]
SYMBOL_METHOD: java.lang.IllegalArgumentException.IllegalArgumentException()
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) [ <97:1 <97:1 <97:21 97:28> 97:41> 99:5>]
SYMBOL_BUILTIN_TYPE: boolean
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String) [ <104:1 <104:1 <104:21 104:35> 104:48> 106:5>]
SYMBOL_METHOD: R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>)
SYMBOL_METHOD: boolean java.lang.Object.equals(java.lang.Object)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration.declaringType()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.model.declarations.HasAccessLevel.accessLevel()
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.AccessLevel [ <120:83 120:93>]
SYMBOL_FIELD: com.github.javaparser.symbolsolver.model.declarations.AccessLevel.PRIVATE
SYMBOL_METHOD: static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>()
SYMBOL_METHOD: default java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllNonStaticFields() [ <127:1 <127:1 <127:36 127:56> 127:58> 129:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration.isStatic()
SYMBOL_METHOD: default java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllStaticFields() [ <134:1 <134:1 <134:36 134:53> 134:55> 136:5>]
SYMBOL_METHOD: default java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() [ <141:1 <141:1 <141:36 141:52> 141:54> 143:5>]
SYMBOL_METHOD: default java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredMethods() [ <152:1 <152:1 <152:28 152:45> 152:47> 152:48>]
SYMBOL_METHOD: default java.util.Set<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllMethods() [ <158:1 <158:1 <158:22 158:34> 158:36> 158:37>]
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <168:1 <168:1 <168:13 168:26> 168:37> 168:38>]
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <174:1 <174:1 <174:21 174:35> 174:67> 176:5>]
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <182:1 <182:1 <182:13 182:26> 182:58> 182:59>]
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String) [ <191:1 <191:1 <191:13 191:33> 191:55> 191:56>]
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation(java.lang.String) [ <196:1 <196:1 <196:21 196:33> 196:55> 201:5>]
SYMBOL_METHOD: boolean java.util.stream.Stream<T>.anyMatch(java.util.function.Predicate<? super T>)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.asReferenceType()
SYMBOL_METHOD: default boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isFunctionalInterface() [ <207:1 <207:1 <207:13 207:33> 207:35> 207:36>]
SYMBOL_METHOD: default java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) [ <213:5 <213:5 <214:48 214:64> 214:77> 224:5>]
SYMBOL_METHOD: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.findTypeParameter(java.lang.String)
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
SYMBOL_METHOD: static java.util.Optional<T> java.util.Optional<T>.of<T>(T)
QUALIFIER: java.util.Optional [ <217:24 217:31>]
QUALIFIER: java.util.Optional [ <223:16 223:23>]
SYMBOL_METHOD: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType()
SYMBOL_METHOD: static java.util.Optional<T> java.util.Optional<T>.empty<T>()
REFERENCE_IMPORT: ReferenceTypeDeclaration.java -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <3:57 3:67>]
REFERENCE_IMPORT: ReferenceTypeDeclaration.java -> com.github.javaparser.symbolsolver.model.resolution.UnsolvedSymbolException [ <4:60 4:82>]
REFERENCE_IMPORT: ReferenceTypeDeclaration.java -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <5:60 5:72>]
REFERENCE_IMPORT: ReferenceTypeDeclaration.java -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <6:60 6:63>]
REFERENCE_IMPORT: ReferenceTypeDeclaration.java -> java.util.ArrayList<E> [ <8:18 8:26>]
REFERENCE_IMPORT: ReferenceTypeDeclaration.java -> java.util.List<E> [ <9:18 9:21>]
REFERENCE_IMPORT: ReferenceTypeDeclaration.java -> java.util.Optional<T> [ <10:18 10:25>]
REFERENCE_IMPORT: ReferenceTypeDeclaration.java -> java.util.Set<E> [ <11:18 11:20>]
REFERENCE_IMPORT: ReferenceTypeDeclaration.java -> java.util.stream.Collectors [ <12:25 12:34>]
REFERENCE_INHERITANCE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration [ <17:51 17:65>]
REFERENCE_INHERITANCE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration -> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable [ <17:68 17:85>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.asReferenceType() -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asReferenceType() [ <20:38 20:52>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.asReferenceType() -> java.lang.Override [ <19:6 19:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.asReferenceType() -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <20:13 20:36>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <36:10 36:22>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <42:18 42:30>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <43:14 43:26>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors() -> java.util.List<E> [ <36:5 36:8>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <36:10 36:22>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> java.util.List<E> [ <42:13 42:16>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> java.util.List<E> [ <43:9 43:12>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <42:18 42:30>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <43:14 43:26>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <46:18 46:30>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <48:22 48:34>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> java.util.ArrayList<E>.ArrayList() [ <43:45 43:55>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> java.util.ArrayList<E> [ <43:45 43:53>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> boolean java.lang.String.equals(java.lang.Object) [ <45:47 45:52>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <45:28 45:43>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> java.lang.Object [ <45:15 45:20>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ <45:54 45:69>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors() [ <46:43 46:54>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> boolean java.util.List<E>.add(java.util.List<E>.E) [ <47:27 47:29>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> boolean java.util.List<E>.add(java.util.List<E>.E) [ <50:35 50:37>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getAllAncestors() [ <48:65 48:79>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() -> boolean java.util.List<E>.contains(java.lang.Object) [ <49:36 49:43>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <73:13 73:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <74:18 74:33>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> java.lang.String [ <73:39 73:44>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <74:18 74:33>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <86:18 86:33>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> java.util.Optional<T> [ <74:9 74:16>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> java.util.Optional<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.findFirst() [ <74:111 74:119>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <74:73 74:78>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <74:64 74:69>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields() [ <74:49 74:60>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> boolean java.lang.String.equals(java.lang.Object) [ <74:97 74:102>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName() [ <74:87 74:93>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> boolean java.util.Optional<T>.isPresent() [ <75:19 75:27>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <76:26 76:28>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.model.resolution.UnsolvedSymbolException.UnsolvedSymbolException(java.lang.String) [ <78:23 78:45>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.model.resolution.UnsolvedSymbolException [ <78:23 78:45>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <85:13 85:28>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <86:18 86:33>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> java.lang.String [ <85:46 85:51>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> java.util.Optional<T> [ <86:9 86:16>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> java.util.Optional<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.findFirst() [ <86:110 86:118>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <86:72 86:77>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <86:63 86:68>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() [ <86:44 86:59>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> boolean java.lang.String.equals(java.lang.Object) [ <86:96 86:101>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName() [ <86:86 86:92>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> boolean java.util.Optional<T>.isPresent() [ <87:19 87:27>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <88:26 88:28>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> java.lang.IllegalArgumentException.IllegalArgumentException() [ <90:23 90:46>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String) -> java.lang.IllegalArgumentException [ <90:23 90:46>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) -> boolean [ <97:13 97:19>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) -> java.lang.String [ <97:30 97:35>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) -> boolean java.util.Optional<T>.isPresent() [ <98:95 98:103>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) -> java.util.Optional<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.findFirst() [ <98:83 98:91>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <98:45 98:50>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <98:36 98:41>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields() [ <98:21 98:32>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) -> boolean java.lang.String.equals(java.lang.Object) [ <98:69 98:74>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName() [ <98:59 98:65>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String) -> boolean [ <104:13 104:19>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String) -> java.lang.String [ <104:37 104:42>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String) -> boolean java.util.Optional<T>.isPresent() [ <105:94 105:102>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String) -> java.util.Optional<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.findFirst() [ <105:82 105:90>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String) -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <105:44 105:49>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String) -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <105:35 105:40>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() [ <105:16 105:31>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String) -> boolean java.lang.String.equals(java.lang.Object) [ <105:68 105:73>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName() [ <105:58 105:64>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <113:10 113:25>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <118:18 118:33>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <127:18 127:33>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <134:18 134:33>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <141:18 141:33>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields() -> java.util.List<E> [ <113:5 113:8>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields() -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <113:10 113:25>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() -> java.util.List<E> [ <118:13 118:16>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <118:18 118:33>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() -> R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>) [ <121:18 121:24>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <120:18 120:23>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <119:31 119:36>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields() [ <119:16 119:27>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() -> boolean java.lang.Object.equals(java.lang.Object) [ <120:48 120:53>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration.declaringType() [ <120:32 120:44>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.model.declarations.HasAccessLevel.accessLevel() [ <120:66 120:76>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel.PRIVATE [ <120:95 120:101>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields() -> static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>() [ <121:37 121:42>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllNonStaticFields() -> java.util.List<E> [ <127:13 127:16>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllNonStaticFields() -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <127:18 127:33>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllNonStaticFields() -> R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>) [ <128:69 128:75>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllNonStaticFields() -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <128:40 128:45>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllNonStaticFields() -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <128:31 128:36>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllNonStaticFields() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields() [ <128:16 128:27>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllNonStaticFields() -> boolean com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration.isStatic() [ <128:57 128:64>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllNonStaticFields() -> static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>() [ <128:88 128:93>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllStaticFields() -> java.util.List<E> [ <134:13 134:16>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllStaticFields() -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <134:18 134:33>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllStaticFields() -> R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>) [ <135:68 135:74>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllStaticFields() -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <135:40 135:45>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllStaticFields() -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <135:31 135:36>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllStaticFields() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields() [ <135:16 135:27>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllStaticFields() -> boolean com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration.isStatic() [ <135:56 135:63>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllStaticFields() -> static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>() [ <135:87 135:92>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() -> java.util.List<E> [ <141:13 141:16>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <141:18 141:33>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() -> R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>) [ <142:119 142:125>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() -> java.util.stream.Stream<java.util.stream.Stream<T>.T> java.util.stream.Stream<T>.filter(java.util.function.Predicate<? super T>) [ <142:40 142:45>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <142:31 142:36>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields() [ <142:16 142:27>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() -> boolean java.lang.String.equals(java.lang.Object) [ <142:91 142:96>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ <142:72 142:87>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ <142:98 142:113>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() -> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration.declaringType() [ <142:56 142:68>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredFields() -> static java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList<T>() [ <142:138 142:143>]
REFERENCE_TYPE_ARGUMENT: java.util.Set<E> -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <152:9 152:25>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredMethods() -> java.util.Set<E> [ <152:5 152:7>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredMethods() -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <152:9 152:25>]
REFERENCE_TYPE_ARGUMENT: java.util.Set<E> -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <158:9 158:19>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllMethods() -> java.util.Set<E> [ <158:5 158:7>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllMethods() -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <158:9 158:19>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean [ <168:5 168:11>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <168:28 168:31>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean [ <174:13 174:19>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <174:37 174:60>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <175:22 175:35>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean [ <182:5 182:11>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <182:28 182:51>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String) -> boolean [ <191:5 191:11>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String) -> java.lang.String [ <191:35 191:40>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation(java.lang.String) -> boolean [ <196:13 196:19>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation(java.lang.String) -> java.lang.String [ <196:35 196:40>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation(java.lang.String) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String) [ <197:13 197:33>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation(java.lang.String) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String) [ <200:100 200:120>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation(java.lang.String) -> boolean java.util.stream.Stream<T>.anyMatch(java.util.function.Predicate<? super T>) [ <200:43 200:50>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation(java.lang.String) -> java.util.stream.Stream<java.util.Collection<E>.E> java.util.Collection<E>.stream() [ <200:34 200:39>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation(java.lang.String) -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors() [ <200:16 200:30>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration() [ <200:79 200:96>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation(java.lang.String) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.asReferenceType() [ <200:61 200:75>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isFunctionalInterface() -> boolean [ <207:5 207:11>]
REFERENCE_OVERRIDE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.findTypeParameter(java.lang.String) [ <214:48 214:64>]
REFERENCE_ANNOTATION_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> java.lang.Override [ <213:6 213:13>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <214:22 214:45>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> java.util.Optional<T> [ <214:13 214:20>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <214:22 214:45>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <215:14 215:37>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> java.lang.String [ <214:66 214:71>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters() [ <215:49 215:65>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> boolean java.lang.String.equals(java.lang.Object) [ <216:30 216:35>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName() [ <216:20 216:26>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> static java.util.Optional<T> java.util.Optional<T>.of<T>(T) [ <217:33 217:34>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> boolean java.util.Optional<T>.isPresent() [ <220:34 220:42>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType() [ <220:18 220:30>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType() [ <221:25 221:37>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) [ <221:47 221:63>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <221:41 221:43>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String) -> static java.util.Optional<T> java.util.Optional<T>.empty<T>() [ <223:25 223:29>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<104:50> [ <104:50 104:50>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<104:50> [ <106:5 106:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<118:55> [ <118:55 118:55>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<118:55> [ <122:5 122:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<127:60> [ <127:60 127:60>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<127:60> [ <129:5 129:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<134:57> [ <134:57 134:57>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<134:57> [ <136:5 136:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<141:56> [ <141:56 141:56>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<141:56> [ <143:5 143:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<174:69> [ <174:69 174:69>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<174:69> [ <176:5 176:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<17:87> [ <17:87 17:87>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<17:87> [ <225:1 225:1>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<196:57> [ <196:57 196:57>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<196:57> [ <201:5 201:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<197:51> [ <197:51 197:51>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<197:51> [ <199:9 199:9>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<20:56> [ <20:56 20:56>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<20:56> [ <22:5 22:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<214:79> [ <214:79 214:79>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<214:79> [ <224:5 224:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<215:70> [ <215:70 215:70>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<215:70> [ <219:9 219:9>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<216:44> [ <216:44 216:44>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<216:44> [ <218:13 218:13>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<220:47> [ <220:47 220:47>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<220:47> [ <222:9 222:9>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<42:51> [ <42:51 42:51>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<42:51> [ <56:5 56:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<45:76> [ <45:76 45:76>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<45:76> [ <54:9 54:9>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<46:59> [ <46:59 46:59>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<46:59> [ <53:13 53:13>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<48:84> [ <48:84 48:84>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<48:84> [ <52:17 52:17>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<49:65> [ <49:65 49:65>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<49:65> [ <51:21 51:21>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<73:52> [ <73:52 73:52>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<73:52> [ <80:5 80:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<75:32> [ <75:32 75:32>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<75:32> [ <77:9 77:9>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<77:16> [ <77:16 77:16>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<77:16> [ <79:9 79:9>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<85:59> [ <85:59 85:59>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<85:59> [ <92:5 92:5>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<87:32> [ <87:32 87:32>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<87:32> [ <89:9 89:9>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<89:16> [ <89:16 89:16>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<89:16> [ <91:9 91:9>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<97:43> [ <97:43 97:43>]
LOCAL_SYMBOL: ReferenceTypeDeclaration.java<97:43> [ <99:5 99:5>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo<0> [ <174:62 174:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo<0> [ <175:16 175:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter<0> [ <214:73 214:76>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter<0> [ <216:37 216:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter<0> [ <221:65 221:68>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter<1> [ <215:39 215:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter<1> [ <216:17 216:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter<1> [ <217:36 217:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors<0> [ <43:29 43:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors<0> [ <47:17 47:25>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors<0> [ <49:26 49:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors<0> [ <50:25 50:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors<0> [ <55:16 55:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors<1> [ <46:32 46:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors<1> [ <47:31 47:38>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors<1> [ <48:56 48:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors<3> [ <48:36 48:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors<3> [ <49:45 49:61>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors<3> [ <50:39 50:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField<0> [ <73:46 73:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField<0> [ <74:104 74:107>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField<0> [ <78:69 78:72>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField<1> [ <74:36 74:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField<1> [ <75:13 75:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField<1> [ <76:20 76:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField<0> [ <85:53 85:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField<0> [ <86:103 86:106>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField<1> [ <86:36 86:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField<1> [ <87:13 87:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField<1> [ <88:20 88:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation<0> [ <196:42 196:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation<0> [ <197:35 197:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasAnnotation<0> [ <200:122 200:134>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation<0> [ <191:42 191:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField<0> [ <97:37 97:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField<0> [ <98:76 98:79>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField<0> [ <104:44 104:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField<0> [ <105:75 105:78>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy<0> [ <168:33 168:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy<0> [ <182:53 182:57>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<1> [ <120:25 120:25>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<1> [ <120:30 120:30>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<1> [ <120:64 120:64>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<1> [ <128:47 128:48>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<1> [ <128:54 128:55>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<1> [ <135:47 135:48>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<1> [ <135:53 135:54>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<1> [ <142:47 142:48>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<1> [ <142:53 142:54>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<2> [ <98:52 98:52>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<2> [ <98:57 98:57>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<2> [ <105:51 105:51>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<2> [ <105:56 105:56>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<2> [ <200:52 200:53>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<2> [ <200:58 200:59>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<3> [ <74:80 74:80>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<3> [ <74:85 74:85>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<3> [ <86:79 86:79>]
LOCAL_SYMBOL: java.util.function.Predicate<T>.test<3> [ <86:84 86:84>]
COMMENT: comment [ <14:1 16:3>]
COMMENT: comment [ <24:5 24:7>]
COMMENT: comment [ <25:5 25:17>]
COMMENT: comment [ <26:5 26:7>]
COMMENT: comment [ <28:5 35:7>]
COMMENT: comment [ <38:5 41:7>]
COMMENT: comment [ <44:9 44:90>]
COMMENT: comment [ <58:5 58:7>]
COMMENT: comment [ <59:5 59:14>]
COMMENT: comment [ <60:5 60:7>]
COMMENT: comment [ <62:5 72:7>]
COMMENT: comment [ <82:5 84:7>]
COMMENT: comment [ <94:5 96:7>]
COMMENT: comment [ <101:5 103:7>]
COMMENT: comment [ <108:5 112:7>]
COMMENT: comment [ <115:5 117:7>]
COMMENT: comment [ <124:5 126:7>]
COMMENT: comment [ <131:5 133:7>]
COMMENT: comment [ <138:5 140:7>]
COMMENT: comment [ <145:5 145:7>]
COMMENT: comment [ <146:5 146:15>]
COMMENT: comment [ <147:5 147:7>]
COMMENT: comment [ <149:5 151:7>]
COMMENT: comment [ <154:5 157:7>]
COMMENT: comment [ <160:5 160:7>]
COMMENT: comment [ <161:5 161:21>]
COMMENT: comment [ <162:5 162:7>]
COMMENT: comment [ <164:5 167:7>]
COMMENT: comment [ <170:5 173:7>]
COMMENT: comment [ <178:5 181:7>]
COMMENT: comment [ <184:5 184:7>]
COMMENT: comment [ <185:5 185:19>]
COMMENT: comment [ <186:5 186:7>]
COMMENT: comment [ <188:5 190:7>]
COMMENT: comment [ <193:5 195:7>]
COMMENT: comment [ <203:5 206:7>]
COMMENT: comment [ <209:5 209:7>]
COMMENT: comment [ <210:5 210:23>]
COMMENT: comment [ <211:5 211:7>]
