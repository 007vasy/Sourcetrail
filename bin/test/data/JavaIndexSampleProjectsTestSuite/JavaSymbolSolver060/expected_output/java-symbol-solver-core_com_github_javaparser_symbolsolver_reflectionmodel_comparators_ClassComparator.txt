FILE: ClassComparator.java
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.reflectionmodel.comparators [ <1:60 1:70>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel [ <1:44 1:58>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.reflectionmodel
QUALIFIER: com.github.javaparser.symbolsolver [ <1:31 1:42>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver
QUALIFIER: com.github.javaparser [ <1:20 1:29>]
SYMBOL_PACKAGE: com.github.javaparser
QUALIFIER: com.github [ <1:13 1:18>]
SYMBOL_PACKAGE: com.github
QUALIFIER: com [ <1:9 1:11>]
SYMBOL_PACKAGE: com
QUALIFIER: java.util [ <3:13 3:16>]
SYMBOL_PACKAGE: java.util
QUALIFIER: java [ <3:8 3:11>]
SYMBOL_PACKAGE: java
SYMBOL_CLASS: public com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator [ <8:1 <8:14 8:28> 25:1>]
SYMBOL_PACKAGE: java.lang
SYMBOL_METHOD: public int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) [ <10:5 <10:5 <11:16 11:22> 11:48> 24:5>]
SYMBOL_METHOD: int java.util.Comparator<T>.compare(java.util.Comparator<T>.T, java.util.Comparator<T>.T)
SYMBOL_BUILTIN_TYPE: int
SYMBOL_METHOD: int java.lang.String.compareTo(java.lang.String)
SYMBOL_METHOD: java.lang.String java.lang.Class<T>.getCanonicalName()
SYMBOL_METHOD: static int java.lang.Boolean.compare(boolean, boolean)
QUALIFIER: java.lang.Boolean [ <15:22 15:28>]
QUALIFIER: java.lang.Boolean [ <17:22 17:28>]
QUALIFIER: java.lang.Boolean [ <19:22 19:28>]
QUALIFIER: java.lang.Boolean [ <21:22 21:28>]
SYMBOL_METHOD: boolean java.lang.Class<T>.isAnnotation()
SYMBOL_METHOD: boolean java.lang.Class<T>.isArray()
SYMBOL_METHOD: boolean java.lang.Class<T>.isEnum()
SYMBOL_METHOD: boolean java.lang.Class<T>.isInterface()
REFERENCE_IMPORT: ClassComparator.java -> java.util.Comparator<T> [ <3:18 3:27>]
REFERENCE_TYPE_ARGUMENT: java.util.Comparator<T> -> java.lang.Class<T> [ <8:52 8:59>]
REFERENCE_INHERITANCE: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator -> java.util.Comparator<T> [ <8:41 8:50>]
REFERENCE_TYPE_ARGUMENT: java.lang.Class<T> -> ? [ <8:58 8:58>]
REFERENCE_TYPE_ARGUMENT: java.lang.Class<T> -> ? [ <11:30 11:30>]
REFERENCE_TYPE_ARGUMENT: java.lang.Class<T> -> ? [ <11:43 11:43>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator -> java.lang.Class<T> [ <8:52 8:56>]
REFERENCE_OVERRIDE: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> int java.util.Comparator<T>.compare(java.util.Comparator<T>.T, java.util.Comparator<T>.T) [ <11:16 11:22>]
REFERENCE_ANNOTATION_USAGE: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> java.lang.Override [ <10:6 10:13>]
REFERENCE_TYPE_USAGE: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> int [ <11:12 11:14>]
REFERENCE_TYPE_USAGE: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> int [ <12:9 12:11>]
REFERENCE_TYPE_USAGE: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> java.lang.Class<T> [ <11:24 11:28>]
REFERENCE_TYPE_USAGE: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> java.lang.Class<T> [ <11:37 11:41>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> int java.lang.String.compareTo(java.lang.String) [ <13:44 13:52>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <13:25 13:40>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <13:57 13:72>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> static int java.lang.Boolean.compare(boolean, boolean) [ <15:30 15:36>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> static int java.lang.Boolean.compare(boolean, boolean) [ <17:30 17:36>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> static int java.lang.Boolean.compare(boolean, boolean) [ <19:30 19:36>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> static int java.lang.Boolean.compare(boolean, boolean) [ <21:30 21:36>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> boolean java.lang.Class<T>.isAnnotation() [ <15:41 15:52>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> boolean java.lang.Class<T>.isAnnotation() [ <15:60 15:71>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> boolean java.lang.Class<T>.isArray() [ <17:41 17:47>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> boolean java.lang.Class<T>.isArray() [ <17:55 17:61>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> boolean java.lang.Class<T>.isEnum() [ <19:41 19:46>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> boolean java.lang.Class<T>.isEnum() [ <19:54 19:59>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> boolean java.lang.Class<T>.isInterface() [ <21:41 21:51>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>) -> boolean java.lang.Class<T>.isInterface() [ <21:59 21:69>]
LOCAL_SYMBOL: ClassComparator.java<11:50> [ <11:50 11:50>]
LOCAL_SYMBOL: ClassComparator.java<11:50> [ <24:5 24:5>]
LOCAL_SYMBOL: ClassComparator.java<8:62> [ <8:62 8:62>]
LOCAL_SYMBOL: ClassComparator.java<8:62> [ <25:1 25:1>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<0> [ <11:33 11:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<0> [ <13:22 13:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<0> [ <15:38 15:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<0> [ <17:38 17:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<0> [ <19:38 19:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<0> [ <21:38 21:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<1> [ <11:46 11:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<1> [ <13:54 13:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<1> [ <15:57 15:58>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<1> [ <17:52 17:53>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<1> [ <19:51 19:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<1> [ <21:56 21:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <12:13 12:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <13:9 13:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <14:13 14:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <14:37 14:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <15:9 15:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <16:13 16:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <16:37 16:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <17:9 17:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <18:13 18:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <18:37 18:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <19:9 19:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <20:13 20:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <20:37 20:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <21:9 21:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <22:13 22:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare<2> [ <22:37 22:46>]
COMMENT: comment [ <5:1 7:3>]
