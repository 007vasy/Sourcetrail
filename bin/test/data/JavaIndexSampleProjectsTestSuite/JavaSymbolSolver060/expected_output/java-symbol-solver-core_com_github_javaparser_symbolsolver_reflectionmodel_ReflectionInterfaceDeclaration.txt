FILE: ReflectionInterfaceDeclaration.java
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.reflectionmodel [ <17:44 17:58>]
QUALIFIER: com.github.javaparser.symbolsolver [ <17:31 17:42>]
QUALIFIER: com.github.javaparser.symbolsolver [ <20:30 20:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <21:30 21:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <22:30 22:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <23:30 23:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <24:30 24:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <25:30 25:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <26:30 26:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <27:30 27:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <28:30 28:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <29:30 29:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <30:30 30:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <31:30 31:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <32:30 32:41>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver
QUALIFIER: com.github.javaparser [ <17:20 17:29>]
QUALIFIER: com.github.javaparser [ <19:19 19:28>]
QUALIFIER: com.github.javaparser [ <20:19 20:28>]
QUALIFIER: com.github.javaparser [ <21:19 21:28>]
QUALIFIER: com.github.javaparser [ <22:19 22:28>]
QUALIFIER: com.github.javaparser [ <23:19 23:28>]
QUALIFIER: com.github.javaparser [ <24:19 24:28>]
QUALIFIER: com.github.javaparser [ <25:19 25:28>]
QUALIFIER: com.github.javaparser [ <26:19 26:28>]
QUALIFIER: com.github.javaparser [ <27:19 27:28>]
QUALIFIER: com.github.javaparser [ <28:19 28:28>]
QUALIFIER: com.github.javaparser [ <29:19 29:28>]
QUALIFIER: com.github.javaparser [ <30:19 30:28>]
QUALIFIER: com.github.javaparser [ <31:19 31:28>]
QUALIFIER: com.github.javaparser [ <32:19 32:28>]
SYMBOL_PACKAGE: com.github.javaparser
QUALIFIER: com.github [ <17:13 17:18>]
QUALIFIER: com.github [ <19:12 19:17>]
QUALIFIER: com.github [ <20:12 20:17>]
QUALIFIER: com.github [ <21:12 21:17>]
QUALIFIER: com.github [ <22:12 22:17>]
QUALIFIER: com.github [ <23:12 23:17>]
QUALIFIER: com.github [ <24:12 24:17>]
QUALIFIER: com.github [ <25:12 25:17>]
QUALIFIER: com.github [ <26:12 26:17>]
QUALIFIER: com.github [ <27:12 27:17>]
QUALIFIER: com.github [ <28:12 28:17>]
QUALIFIER: com.github [ <29:12 29:17>]
QUALIFIER: com.github [ <30:12 30:17>]
QUALIFIER: com.github [ <31:12 31:17>]
QUALIFIER: com.github [ <32:12 32:17>]
SYMBOL_PACKAGE: com.github
QUALIFIER: com [ <17:9 17:11>]
QUALIFIER: com [ <19:8 19:10>]
QUALIFIER: com [ <20:8 20:10>]
QUALIFIER: com [ <21:8 21:10>]
QUALIFIER: com [ <22:8 22:10>]
QUALIFIER: com [ <23:8 23:10>]
QUALIFIER: com [ <24:8 24:10>]
QUALIFIER: com [ <25:8 25:10>]
QUALIFIER: com [ <26:8 26:10>]
QUALIFIER: com [ <27:8 27:10>]
QUALIFIER: com [ <28:8 28:10>]
QUALIFIER: com [ <29:8 29:10>]
QUALIFIER: com [ <30:8 30:10>]
QUALIFIER: com [ <31:8 31:10>]
QUALIFIER: com [ <32:8 32:10>]
SYMBOL_PACKAGE: com
QUALIFIER: com.github.javaparser.ast [ <19:30 19:32>]
SYMBOL_PACKAGE: com.github.javaparser.ast
QUALIFIER: com.github.javaparser.symbolsolver.core.resolution [ <20:48 20:57>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.core.resolution
QUALIFIER: com.github.javaparser.symbolsolver.core [ <20:43 20:46>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.core
QUALIFIER: com.github.javaparser.symbolsolver.javaparsermodel [ <21:43 21:57>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.javaparsermodel
QUALIFIER: com.github.javaparser.symbolsolver.logic [ <22:43 22:47>]
QUALIFIER: com.github.javaparser.symbolsolver.logic [ <23:43 23:47>]
QUALIFIER: com.github.javaparser.symbolsolver.logic [ <24:43 24:47>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.logic
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.declarations
QUALIFIER: com.github.javaparser.symbolsolver.model [ <25:43 25:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <26:43 26:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <27:43 27:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <28:43 28:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <29:43 29:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <30:43 30:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <31:43 31:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <32:43 32:47>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model
QUALIFIER: com.github.javaparser.symbolsolver.model.methods [ <26:49 26:55>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.methods
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ <27:49 27:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ <28:49 28:58>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.resolution
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ <29:49 29:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ <30:49 30:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ <31:49 31:58>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ <32:49 32:58>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.typesystem
QUALIFIER: java.lang [ <34:13 34:16>]
SYMBOL_PACKAGE: java.lang
QUALIFIER: java [ <34:8 34:11>]
QUALIFIER: java [ <35:8 35:11>]
QUALIFIER: java [ <36:8 36:11>]
SYMBOL_PACKAGE: java
QUALIFIER: java.lang.reflect [ <34:18 34:24>]
SYMBOL_PACKAGE: java.lang.reflect
QUALIFIER: java.util [ <36:13 36:16>]
SYMBOL_PACKAGE: java.util
QUALIFIER: java.util.stream.Collectors [ <283:26 283:35>]
QUALIFIER: java.util.stream [ <36:18 36:23>]
SYMBOL_PACKAGE: java.util.stream
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <60:9 60:12>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <61:9 61:12>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <62:9 62:12>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <173:13 173:16>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <281:30 281:33>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <303:57 303:60>]
SYMBOL_CLASS: public com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <41:1 <41:14 41:43> 305:1>]
SYMBOL_FIELD: private java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <47:22 47:26>]
SYMBOL_FIELD: private com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.typeSolver [ <48:24 48:33>]
SYMBOL_FIELD: private com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.reflectionClassAdapter [ <49:36 49:57>]
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <55:5 <55:5 <55:12 55:41> 55:80> 63:5>]
SYMBOL_METHOD: boolean java.lang.Class<T>.isInterface()
SYMBOL_METHOD: java.lang.IllegalArgumentException.IllegalArgumentException()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.ReflectionClassAdapter(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration)
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <69:5 <69:5 <70:20 70:33> 70:65> 72:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration)
SYMBOL_BUILTIN_TYPE: boolean
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <190:5 <190:5 <191:20 191:33> 191:44> 213:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: public java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName() [ <74:5 <74:5 <75:19 75:32> 75:34> 80:5>]
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getPackageName()
SYMBOL_METHOD: java.lang.Package java.lang.Class<T>.getPackage()
SYMBOL_METHOD: java.lang.String java.lang.Package.getName()
SYMBOL_METHOD: public java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() [ <82:5 <82:5 <83:19 83:30> 83:32> 89:5>]
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getClassName()
SYMBOL_METHOD: java.lang.String java.lang.Class<T>.getCanonicalName()
SYMBOL_METHOD: java.lang.String java.lang.String.substring(int, int)
SYMBOL_METHOD: int java.lang.String.length()
SYMBOL_METHOD: public java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getQualifiedName() [ <91:5 <91:5 <92:19 92:34> 92:36> 94:5>]
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) [ <96:5 <96:5 <97:47 97:57> 97:117> 100:5>]
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodResolutionLogic.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, java.lang.Class)
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodResolutionLogic [ <98:16 98:46>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodResolutionLogic [ <135:37 135:67>]
SYMBOL_METHOD: public java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.toString() [ <102:5 <102:5 <103:19 103:26> 103:28> 107:5>]
SYMBOL_METHOD: java.lang.String java.lang.Object.toString()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getUsage(com.github.javaparser.ast.Node) [ <109:5 <109:5 <109:17 109:24> 109:35> 111:5>]
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) [ <113:5 <113:5 <114:20 114:25> 114:35> 127:5>]
SYMBOL_METHOD: boolean java.lang.Object.equals(java.lang.Object)
SYMBOL_METHOD: boolean java.lang.String.equals(java.lang.Object)
SYMBOL_METHOD: boolean java.util.List<E>.equals(java.lang.Object)
SYMBOL_METHOD: public java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getTypeParameters() [ <296:5 <296:5 <297:43 297:59> 297:61> 299:5>]
SYMBOL_METHOD: public int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hashCode() [ <129:5 <129:5 <130:16 130:23> 130:25> 132:5>]
SYMBOL_METHOD: int java.lang.Object.hashCode()
SYMBOL_BUILTIN_TYPE: int
SYMBOL_METHOD: public java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) [ <134:5 <134:5 <134:34 134:51> 134:173> 163:5>]
SYMBOL_METHOD: static java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodResolutionLogic.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, java.lang.Class)
SYMBOL_METHOD: boolean java.util.Optional<T>.isPresent()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.logic.InferenceContext.InferenceContext(com.github.javaparser.symbolsolver.logic.ObjectProvider)
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider [ <139:70 139:85>]
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider.INSTANCE
SYMBOL_METHOD: java.util.Optional<T>.T java.util.Optional<T>.get()
SYMBOL_METHOD: java.util.LinkedList<E>.LinkedList()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.getParamType(int)
SYMBOL_METHOD: boolean java.util.List<E>.add(java.util.List<E>.E)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.returnType()
SYMBOL_METHOD: int java.util.List<E>.size()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.methods.MethodUsage com.github.javaparser.symbolsolver.model.methods.MethodUsage.replaceParamType(int, com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: java.util.List<E>.E java.util.List<E>.get(int)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.methods.MethodUsage com.github.javaparser.symbolsolver.model.methods.MethodUsage.replaceReturnType(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: static java.util.Optional<T> java.util.Optional<T>.of<T>(T)
QUALIFIER: java.util.Optional [ <156:24 156:31>]
QUALIFIER: java.util.Optional [ <158:24 158:31>]
SYMBOL_METHOD: static java.util.Optional<T> java.util.Optional<T>.empty<T>()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <165:5 <165:5 <166:20 166:34> 166:66> 188:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration.isFunctionalInterface()
SYMBOL_METHOD: java.lang.Class<? super T> java.lang.Class<T>.getSuperclass()
SYMBOL_METHOD: java.lang.Class<?> java.lang.Class<T>.getInterfaces()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray()
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive()
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.typesystem.Type.describe()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isTypeParameter() [ <215:5 <215:5 <216:20 216:34> 216:36> 218:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isTypeParameter()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getField(java.lang.String) [ <220:5 <220:5 <221:29 221:36> 221:49> 223:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getField(java.lang.String)
SYMBOL_METHOD: public java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAllFields() [ <225:5 <225:5 <226:35 226:46> 226:48> 228:5>]
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getAllFields()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <230:5 <230:5 <231:56 231:66> 231:102> 238:5>]
SYMBOL_METHOD: java.lang.reflect.Field java.lang.Class<T>.getFields()
SYMBOL_METHOD: java.lang.String java.lang.reflect.Field.getName()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.solved<S, S2>(S2)
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution.SymbolReference [ <234:24 234:38>]
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution.SymbolReference [ <237:16 237:30>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFieldDeclaration.ReflectionFieldDeclaration(java.lang.reflect.Field, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.unsolved<S, S2>(java.lang.Class<S2>)
SYMBOL_METHOD: public java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAncestors() [ <240:5 <240:5 <241:32 241:43> 241:45> 243:5>]
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors()
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getAncestors()
SYMBOL_METHOD: public java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getDeclaredMethods() [ <245:5 <245:5 <246:35 246:52> 246:54> 248:5>]
SYMBOL_METHOD: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredMethods()
SYMBOL_METHOD: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getDeclaredMethods()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasField(java.lang.String) [ <250:5 <250:5 <251:20 251:27> 251:40> 253:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.hasField(java.lang.String)
SYMBOL_METHOD: public java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getName() [ <255:5 <255:5 <256:19 256:25> 256:27> 258:5>]
SYMBOL_METHOD: java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
SYMBOL_METHOD: java.lang.String java.lang.Class<T>.getSimpleName()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isInterface() [ <260:5 <260:5 <261:20 261:30> 261:32> 263:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration.isInterface()
SYMBOL_METHOD: public java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() [ <265:5 <265:5 <266:32 266:52> 266:54> 272:5>]
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration.getInterfacesExtended()
SYMBOL_METHOD: java.util.ArrayList<E>.ArrayList()
SYMBOL_METHOD: public java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.containerType() [ <274:5 <274:5 <275:47 275:59> 275:61> 277:5>]
SYMBOL_METHOD: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType()
SYMBOL_METHOD: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.containerType()
SYMBOL_METHOD: public java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() [ <279:5 <279:5 <280:42 280:54> 280:56> 284:5>]
SYMBOL_METHOD: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes()
SYMBOL_METHOD: R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>)
SYMBOL_METHOD: java.util.stream.Stream<R> java.util.stream.Stream<T>.map<R>(java.util.function.Function<? super T, ? extends R>)
SYMBOL_METHOD: static java.util.stream.Stream<T> java.util.Arrays.stream<T>(T)
QUALIFIER: java.util.Arrays [ <281:16 281:21>]
SYMBOL_METHOD: java.lang.Class<?> java.lang.Class<T>.getDeclaredClasses()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory [ <282:28 282:44>]
QUALIFIER: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory [ <303:16 303:32>]
SYMBOL_METHOD: static java.util.stream.Collector<T, ?, java.util.Set<T>> java.util.stream.Collectors.toSet<T>()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.asInterface() [ <286:5 <286:5 <287:33 287:43> 287:45> 289:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asInterface()
SYMBOL_METHOD: public boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasDirectlyAnnotation(java.lang.String) [ <291:5 <291:5 <292:20 292:40> 292:62> 294:5>]
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String)
SYMBOL_METHOD: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.hasDirectlyAnnotation(java.lang.String)
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
SYMBOL_METHOD: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getTypeParameters()
SYMBOL_METHOD: public com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.accessLevel() [ <301:5 <301:5 <302:24 302:34> 302:36> 304:5>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.model.declarations.HasAccessLevel.accessLevel()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int)
SYMBOL_METHOD: int java.lang.Class<T>.getModifiers()
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.ast.Node [ <19:34 19:37>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.core.resolution.Context [ <20:59 20:65>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder [ <21:59 21:87>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration [ <22:49 22:71>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.logic.ConfilictingGenericTypesException [ <23:49 23:81>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.logic.InferenceContext [ <24:49 24:64>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.model.declarations [ <25:49 25:60>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <26:57 26:67>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <27:60 27:74>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <28:60 28:69>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.model.typesystem.NullType [ <29:60 29:67>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <30:60 30:72>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <31:60 31:76>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <32:60 32:63>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> java.lang.reflect.Field [ <34:26 34:30>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> java.util [ <35:13 35:16>]
REFERENCE_IMPORT: ReflectionInterfaceDeclaration.java -> java.util.stream.Collectors [ <36:25 36:34>]
REFERENCE_INHERITANCE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration -> com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration [ <41:53 41:75>]
REFERENCE_INHERITANCE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration -> com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration [ <41:88 41:107>]
REFERENCE_TYPE_ARGUMENT: java.lang.Class<T> -> ? [ <47:19 47:19>]
REFERENCE_TYPE_ARGUMENT: java.lang.Class<T> -> ? [ <55:49 55:49>]
REFERENCE_TYPE_USAGE: java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz -> java.lang.Class<T> [ <47:13 47:17>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.typeSolver -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <48:13 48:22>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.reflectionClassAdapter -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter [ <49:13 49:34>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<T> [ <55:43 55:47>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <55:59 55:68>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.Class<T>.isInterface() [ <56:20 56:30>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException.IllegalArgumentException() [ <57:23 57:46>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException [ <57:23 57:46>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <60:14 60:18>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.typeSolver [ <61:14 61:23>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.reflectionClassAdapter [ <62:14 62:35>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.ReflectionClassAdapter(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <62:43 62:64>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter [ <62:43 62:64>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <70:20 70:33>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Override [ <69:6 69:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean [ <70:12 70:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <70:35 70:58>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <71:16 71:29>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <71:35 71:51>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <71:35 71:51>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.typeSolver [ <71:60 71:69>]
REFERENCE_OVERRIDE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getPackageName() [ <75:19 75:32>]
REFERENCE_ANNOTATION_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName() -> java.lang.Override [ <74:6 74:13>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName() -> java.lang.String [ <75:12 75:17>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName() -> java.lang.Package java.lang.Class<T>.getPackage() [ <76:19 76:28>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName() -> java.lang.Package java.lang.Class<T>.getPackage() [ <77:26 77:35>]
REFERENCE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <76:13 76:17>]
REFERENCE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <77:20 77:24>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName() -> java.lang.String java.lang.Package.getName() [ <77:39 77:45>]
REFERENCE_OVERRIDE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getClassName() [ <83:19 83:30>]
REFERENCE_ANNOTATION_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() -> java.lang.Override [ <82:6 82:13>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() -> java.lang.String [ <83:12 83:17>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() -> java.lang.String [ <84:9 84:14>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <84:38 84:53>]
REFERENCE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <84:32 84:36>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() -> java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName() [ <85:38 85:51>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() -> java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName() [ <86:44 86:57>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() -> java.lang.String java.lang.String.substring(int, int) [ <86:34 86:42>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() -> int java.lang.String.length() [ <86:61 86:66>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName() -> int java.lang.String.length() [ <86:89 86:94>]
REFERENCE_OVERRIDE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getQualifiedName() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ <92:19 92:34>]
REFERENCE_ANNOTATION_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getQualifiedName() -> java.lang.Override [ <91:6 91:13>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getQualifiedName() -> java.lang.String [ <92:12 92:17>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getQualifiedName() -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <93:22 93:37>]
REFERENCE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getQualifiedName() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <93:16 93:20>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.lang.Deprecated [ <96:6 96:15>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <97:28 97:44>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <97:12 97:26>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <97:28 97:44>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.lang.String [ <97:59 97:64>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <97:77 97:80>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <134:71 134:74>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <134:148 134:151>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <142:18 142:21>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.util.List<E> [ <97:72 97:75>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <97:77 97:80>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> boolean [ <97:99 97:105>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodResolutionLogic.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, java.lang.Class) [ <98:48 98:58>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.typeSolver [ <99:17 99:26>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <99:34 99:38>]
REFERENCE_OVERRIDE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.toString() -> java.lang.String java.lang.Object.toString() [ <103:19 103:26>]
REFERENCE_ANNOTATION_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.toString() -> java.lang.Override [ <102:6 102:13>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.toString() -> java.lang.String [ <103:12 103:17>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.toString() -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <105:34 105:49>]
REFERENCE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.toString() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <105:28 105:32>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getUsage(com.github.javaparser.ast.Node) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <109:12 109:15>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getUsage(com.github.javaparser.ast.Node) -> com.github.javaparser.ast.Node [ <109:26 109:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getUsage(com.github.javaparser.ast.Node) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <110:20 110:36>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getUsage(com.github.javaparser.ast.Node) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <110:20 110:36>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getUsage(com.github.javaparser.ast.Node) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.typeSolver [ <110:44 110:53>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> boolean java.lang.Object.equals(java.lang.Object) [ <114:20 114:25>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> java.lang.Override [ <113:6 113:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> boolean [ <114:12 114:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> java.lang.Object [ <114:27 114:32>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <116:28 116:57>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <118:9 118:38>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <118:48 118:77>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> boolean java.lang.String.equals(java.lang.Object) [ <120:39 120:44>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <120:20 120:35>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <120:57 120:72>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <120:14 120:18>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <120:51 120:55>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> boolean java.util.List<E>.equals(java.lang.Object) [ <122:34 122:39>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getTypeParameters() [ <122:14 122:30>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals(java.lang.Object) -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getTypeParameters() [ <122:46 122:62>]
REFERENCE_OVERRIDE: int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hashCode() -> int java.lang.Object.hashCode() [ <130:16 130:23>]
REFERENCE_ANNOTATION_USAGE: int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hashCode() -> java.lang.Override [ <129:6 129:13>]
REFERENCE_TYPE_USAGE: int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hashCode() -> int [ <130:12 130:14>]
REFERENCE_CALL: int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hashCode() -> int java.lang.Object.hashCode() [ <131:22 131:29>]
REFERENCE_USAGE: int com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hashCode() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <131:16 131:20>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <134:21 134:31>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <135:18 135:28>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.Optional<T> [ <134:12 134:19>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.Optional<T> [ <135:9 135:16>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <134:21 134:31>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <135:18 135:28>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage [ <140:13 140:23>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.lang.String [ <134:53 134:58>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<E> [ <134:66 134:69>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<E> [ <134:143 134:146>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<E> [ <142:13 142:16>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <134:71 134:74>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <134:148 134:151>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <142:18 142:21>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <143:18 143:21>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <144:17 144:20>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <151:17 151:20>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <134:93 134:102>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.core.resolution.Context [ <134:116 134:122>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> static java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodResolutionLogic.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, java.lang.Class) [ <135:69 135:86>]
REFERENCE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <136:44 136:48>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> boolean java.util.Optional<T>.isPresent() [ <137:17 137:25>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.logic.InferenceContext [ <139:13 139:28>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.logic.InferenceContext [ <139:53 139:68>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.logic.InferenceContext.InferenceContext(com.github.javaparser.symbolsolver.logic.ObjectProvider) [ <139:53 139:68>]
REFERENCE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> static com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider com.github.javaparser.symbolsolver.reflectionmodel.MyObjectProvider.INSTANCE [ <139:87 139:94>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.Optional<T>.T java.util.Optional<T>.get() [ <140:43 140:45>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> int [ <141:13 141:15>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> int [ <152:22 152:24>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.LinkedList<E>.LinkedList() [ <142:41 142:52>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.LinkedList<E> [ <142:41 142:50>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.getParamType(int) [ <144:47 144:58>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> boolean java.util.List<E>.add(java.util.List<E>.E) [ <147:28 147:30>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addPair(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <147:49 147:55>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.addSingle(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <151:52 151:60>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.methods.MethodUsage.returnType() [ <151:74 151:83>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> int java.util.List<E>.size() [ <152:43 152:46>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage com.github.javaparser.symbolsolver.model.methods.MethodUsage.replaceParamType(int, com.github.javaparser.symbolsolver.model.typesystem.Type) [ <153:47 153:62>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <153:84 153:90>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.logic.InferenceContext.resolve(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <155:78 155:84>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> java.util.List<E>.E java.util.List<E>.get(int) [ <153:103 153:105>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.model.methods.MethodUsage com.github.javaparser.symbolsolver.model.methods.MethodUsage.replaceReturnType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <155:43 155:59>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> static java.util.Optional<T> java.util.Optional<T>.of<T>(T) [ <156:33 156:34>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> com.github.javaparser.symbolsolver.logic.ConfilictingGenericTypesException [ <157:22 157:54>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.methods.MethodUsage> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>) -> static java.util.Optional<T> java.util.Optional<T>.empty<T>() [ <158:33 158:37>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <166:20 166:34>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Override [ <165:6 165:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean [ <166:12 166:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <166:36 166:59>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder [ <167:30 167:58>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration.isFunctionalInterface() [ <168:20 168:40>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean java.lang.String.equals(java.lang.Object) [ <170:38 170:43>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean java.lang.String.equals(java.lang.Object) [ <183:38 183:43>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ <170:19 170:34>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName() [ <183:19 183:34>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getQualifiedName() [ <170:45 170:60>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<? super T> java.lang.Class<T>.getSuperclass() [ <173:24 173:36>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<? super T> java.lang.Class<T>.getSuperclass() [ <174:61 174:73>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <173:18 173:22>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <174:55 174:59>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <177:32 177:36>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <174:90 174:104>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <178:75 178:89>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <174:24 174:53>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <178:21 178:50>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <174:24 174:53>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <178:21 178:50>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.typeSolver [ <174:78 174:87>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.typeSolver [ <178:63 178:72>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<T> [ <177:14 177:18>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Class<?> java.lang.Class<T>.getInterfaces() [ <177:38 177:50>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <183:58 183:73>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) -> java.lang.Object [ <183:45 183:50>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <191:20 191:33>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.Override [ <190:6 190:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean [ <191:12 191:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <191:35 191:38>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.NullType [ <192:29 192:36>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder [ <195:29 195:57>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.logic.AbstractTypeDeclaration.isFunctionalInterface() [ <196:20 196:40>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isArray() [ <198:18 198:24>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive() [ <201:18 201:28>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean java.lang.String.equals(java.lang.Object) [ <204:29 204:34>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.model.typesystem.Type.describe() [ <204:18 204:25>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getQualifiedName() [ <204:36 204:51>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <207:29 207:45>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <208:13 208:29>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <208:55 208:71>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration) [ <209:62 209:76>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration() [ <209:41 209:58>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isTypeParameter() -> boolean com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isTypeParameter() [ <216:20 216:34>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isTypeParameter() -> java.lang.Override [ <215:6 215:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isTypeParameter() -> boolean [ <216:12 216:18>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String) [ <221:29 221:36>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getField(java.lang.String) -> java.lang.Override [ <220:6 220:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <221:12 221:27>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getField(java.lang.String) -> java.lang.String [ <221:38 221:43>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getField(java.lang.String) [ <222:39 222:46>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getField(java.lang.String) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.reflectionClassAdapter [ <222:16 222:37>]
REFERENCE_OVERRIDE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAllFields() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields() [ <226:35 226:46>]
REFERENCE_ANNOTATION_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAllFields() -> java.lang.Override [ <225:6 225:13>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <226:17 226:32>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAllFields() -> java.util.List<E> [ <226:12 226:15>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAllFields() -> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration [ <226:17 226:32>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAllFields() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getAllFields() [ <227:39 227:50>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAllFields() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.reflectionClassAdapter [ <227:16 227:37>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Deprecated [ <230:6 230:15>]
REFERENCE_TYPE_ARGUMENT: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> -> ? extends ValueDeclaration [ <231:28 231:53>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> [ <231:12 231:26>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration [ <231:38 231:53>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration [ <237:41 237:56>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.String [ <231:68 231:73>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <231:81 231:90>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Field [ <232:14 232:18>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Field java.lang.Class<T>.getFields() [ <232:34 232:42>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <232:28 232:32>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.String.equals(java.lang.Object) [ <233:33 233:38>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.String java.lang.reflect.Field.getName() [ <233:23 233:29>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.solved<S, S2>(S2) [ <234:40 234:45>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFieldDeclaration.ReflectionFieldDeclaration(java.lang.reflect.Field, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <234:51 234:76>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFieldDeclaration [ <234:51 234:76>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends ValueDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S> com.github.javaparser.symbolsolver.model.resolution.SymbolReference<S>.unsolved<S, S2>(java.lang.Class<S2>) [ <237:32 237:39>]
REFERENCE_OVERRIDE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAncestors() -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors() [ <241:32 241:43>]
REFERENCE_ANNOTATION_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAncestors() -> java.lang.Override [ <240:6 240:13>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <241:17 241:29>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <266:17 266:29>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <267:14 267:26>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAncestors() -> java.util.List<E> [ <241:12 241:15>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAncestors() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <241:17 241:29>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAncestors() -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getAncestors() [ <242:39 242:50>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getAncestors() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.reflectionClassAdapter [ <242:16 242:37>]
REFERENCE_OVERRIDE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getDeclaredMethods() -> java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredMethods() [ <246:35 246:52>]
REFERENCE_ANNOTATION_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getDeclaredMethods() -> java.lang.Override [ <245:6 245:13>]
REFERENCE_TYPE_ARGUMENT: java.util.Set<E> -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <246:16 246:32>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getDeclaredMethods() -> java.util.Set<E> [ <246:12 246:14>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getDeclaredMethods() -> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration [ <246:16 246:32>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getDeclaredMethods() -> java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getDeclaredMethods() [ <247:39 247:56>]
REFERENCE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getDeclaredMethods() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.reflectionClassAdapter [ <247:16 247:37>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasField(java.lang.String) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String) [ <251:20 251:27>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasField(java.lang.String) -> java.lang.Override [ <250:6 250:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasField(java.lang.String) -> boolean [ <251:12 251:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasField(java.lang.String) -> java.lang.String [ <251:29 251:34>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasField(java.lang.String) -> boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.hasField(java.lang.String) [ <252:39 252:46>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasField(java.lang.String) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.reflectionClassAdapter [ <252:16 252:37>]
REFERENCE_OVERRIDE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getName() -> java.lang.String com.github.javaparser.symbolsolver.model.declarations.Declaration.getName() [ <256:19 256:25>]
REFERENCE_ANNOTATION_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getName() -> java.lang.Override [ <255:6 255:13>]
REFERENCE_TYPE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getName() -> java.lang.String [ <256:12 256:17>]
REFERENCE_CALL: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getName() -> java.lang.String java.lang.Class<T>.getSimpleName() [ <257:22 257:34>]
REFERENCE_USAGE: java.lang.String com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getName() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <257:16 257:20>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isInterface() -> boolean com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration.isInterface() [ <261:20 261:30>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isInterface() -> java.lang.Override [ <260:6 260:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isInterface() -> boolean [ <261:12 261:18>]
REFERENCE_OVERRIDE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration.getInterfacesExtended() [ <266:32 266:52>]
REFERENCE_ANNOTATION_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> java.lang.Override [ <265:6 265:13>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> java.util.List<E> [ <266:12 266:15>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> java.util.List<E> [ <267:9 267:12>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <266:17 266:29>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <267:14 267:26>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> java.util.ArrayList<E>.ArrayList() [ <267:39 267:49>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> java.util.ArrayList<E> [ <267:39 267:47>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> java.lang.Class<T> [ <268:14 268:18>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> java.lang.Class<?> java.lang.Class<T>.getInterfaces() [ <268:30 268:42>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <268:24 268:28>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> boolean java.util.List<E>.add(java.util.List<E>.E) [ <269:17 269:19>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <269:25 269:41>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <269:25 269:41>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <269:47 269:76>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <269:47 269:76>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.typeSolver [ <269:81 269:90>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.typesystem.ReferenceType> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended() -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.typeSolver [ <269:94 269:103>]
REFERENCE_OVERRIDE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.containerType() -> java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType() [ <275:47 275:59>]
REFERENCE_ANNOTATION_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.containerType() -> java.lang.Override [ <274:6 274:13>]
REFERENCE_TYPE_ARGUMENT: java.util.Optional<T> -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <275:21 275:44>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.containerType() -> java.util.Optional<T> [ <275:12 275:19>]
REFERENCE_TYPE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.containerType() -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <275:21 275:44>]
REFERENCE_CALL: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.containerType() -> java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.containerType() [ <276:39 276:51>]
REFERENCE_USAGE: java.util.Optional<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.containerType() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.reflectionClassAdapter [ <276:16 276:37>]
REFERENCE_OVERRIDE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes() [ <280:42 280:54>]
REFERENCE_ANNOTATION_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> java.lang.Override [ <279:6 279:13>]
REFERENCE_TYPE_ARGUMENT: java.util.Set<E> -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <280:16 280:39>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> java.util.Set<E> [ <280:12 280:14>]
REFERENCE_TYPE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <280:16 280:39>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> R java.util.stream.Stream<T>.collect<R, A>(java.util.stream.Collector<? super T, A, R>) [ <283:18 283:24>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> java.util.stream.Stream<R> java.util.stream.Stream<T>.map<R>(java.util.function.Function<? super T, ? extends R>) [ <282:18 282:20>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> static java.util.stream.Stream<T> java.util.Arrays.stream<T>(T) [ <281:23 281:28>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> java.lang.Class<?> java.lang.Class<T>.getDeclaredClasses() [ <281:41 281:58>]
REFERENCE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <281:35 281:39>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <282:46 282:63>]
REFERENCE_USAGE: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.typeSolver [ <282:69 282:78>]
REFERENCE_CALL: java.util.Set<com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.internalTypes() -> static java.util.stream.Collector<T, ?, java.util.Set<T>> java.util.stream.Collectors.toSet<T>() [ <283:37 283:41>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.asInterface() -> com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asInterface() [ <287:33 287:43>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.asInterface() -> java.lang.Override [ <286:6 286:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.asInterface() -> com.github.javaparser.symbolsolver.model.declarations.InterfaceDeclaration [ <287:12 287:31>]
REFERENCE_OVERRIDE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasDirectlyAnnotation(java.lang.String) -> boolean com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String) [ <292:20 292:40>]
REFERENCE_ANNOTATION_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasDirectlyAnnotation(java.lang.String) -> java.lang.Override [ <291:6 291:13>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasDirectlyAnnotation(java.lang.String) -> boolean [ <292:12 292:18>]
REFERENCE_TYPE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasDirectlyAnnotation(java.lang.String) -> java.lang.String [ <292:42 292:47>]
REFERENCE_CALL: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasDirectlyAnnotation(java.lang.String) -> boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.hasDirectlyAnnotation(java.lang.String) [ <293:39 293:59>]
REFERENCE_USAGE: boolean com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasDirectlyAnnotation(java.lang.String) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.reflectionClassAdapter [ <293:16 293:37>]
REFERENCE_OVERRIDE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getTypeParameters() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters() [ <297:43 297:59>]
REFERENCE_ANNOTATION_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getTypeParameters() -> java.lang.Override [ <296:6 296:13>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <297:17 297:40>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getTypeParameters() -> java.util.List<E> [ <297:12 297:15>]
REFERENCE_TYPE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getTypeParameters() -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <297:17 297:40>]
REFERENCE_CALL: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getTypeParameters() -> java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getTypeParameters() [ <298:39 298:55>]
REFERENCE_USAGE: java.util.List<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getTypeParameters() -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.reflectionClassAdapter [ <298:16 298:37>]
REFERENCE_OVERRIDE: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.accessLevel() -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.model.declarations.HasAccessLevel.accessLevel() [ <302:24 302:34>]
REFERENCE_ANNOTATION_USAGE: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.accessLevel() -> java.lang.Override [ <301:6 301:13>]
REFERENCE_TYPE_USAGE: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.accessLevel() -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel [ <302:12 302:22>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.accessLevel() -> static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) [ <303:34 303:55>]
REFERENCE_CALL: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.accessLevel() -> int java.lang.Class<T>.getModifiers() [ <303:68 303:79>]
REFERENCE_USAGE: com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.accessLevel() -> java.lang.Class<?> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.clazz [ <303:62 303:66>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<103:30> [ <103:30 103:30>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<103:30> [ <107:5 107:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<109:37> [ <109:37 109:37>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<109:37> [ <111:5 111:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<114:37> [ <114:37 114:37>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<114:37> [ <127:5 127:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<122:68> [ <122:68 122:68>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<122:68> [ <124:9 124:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<130:27> [ <130:27 130:27>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<130:27> [ <132:5 132:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<134:175> [ <134:175 134:175>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<134:175> [ <163:5 163:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<137:30> [ <137:30 137:30>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<137:30> [ <160:9 160:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<143:52> [ <143:52 143:52>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<143:52> [ <149:13 149:13>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<150:17> [ <150:17 150:17>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<150:17> [ <157:13 157:13>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<152:55> [ <152:55 152:55>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<152:55> [ <154:17 154:17>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<157:59> [ <157:59 157:59>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<157:59> [ <159:13 159:13>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<160:16> [ <160:16 160:16>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<160:16> [ <162:9 162:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<166:68> [ <166:68 166:68>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<166:68> [ <188:5 188:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<167:61> [ <167:61 167:61>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<167:61> [ <169:9 169:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<170:66> [ <170:66 170:66>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<170:66> [ <172:9 172:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<174:114> [ <174:114 174:114>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<174:114> [ <176:9 176:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<177:55> [ <177:55 177:55>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<177:55> [ <181:9 181:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<178:99> [ <178:99 178:99>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<178:99> [ <180:13 180:13>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<183:79> [ <183:79 183:79>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<183:79> [ <185:9 185:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<191:46> [ <191:46 191:46>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<191:46> [ <213:5 213:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<192:39> [ <192:39 192:39>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<192:39> [ <194:9 194:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<195:60> [ <195:60 195:60>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<195:60> [ <197:9 197:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<198:29> [ <198:29 198:29>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<198:29> [ <200:9 200:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<201:33> [ <201:33 201:33>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<201:33> [ <203:9 203:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<204:57> [ <204:57 204:57>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<204:57> [ <206:9 206:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<207:48> [ <207:48 207:48>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<207:48> [ <210:9 210:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<216:38> [ <216:38 216:38>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<216:38> [ <218:5 218:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<221:51> [ <221:51 221:51>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<221:51> [ <223:5 223:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<226:50> [ <226:50 226:50>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<226:50> [ <228:5 228:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<231:104> [ <231:104 231:104>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<231:104> [ <238:5 238:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<232:47> [ <232:47 232:47>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<232:47> [ <236:9 236:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<233:47> [ <233:47 233:47>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<233:47> [ <235:13 235:13>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<241:47> [ <241:47 241:47>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<241:47> [ <243:5 243:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<246:56> [ <246:56 246:56>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<246:56> [ <248:5 248:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<251:42> [ <251:42 251:42>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<251:42> [ <253:5 253:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<256:29> [ <256:29 256:29>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<256:29> [ <258:5 258:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<261:34> [ <261:34 261:34>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<261:34> [ <263:5 263:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<266:56> [ <266:56 266:56>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<266:56> [ <272:5 272:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<268:47> [ <268:47 268:47>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<268:47> [ <270:9 270:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<275:63> [ <275:63 275:63>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<275:63> [ <277:5 277:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<280:58> [ <280:58 280:58>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<280:58> [ <284:5 284:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<287:47> [ <287:47 287:47>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<287:47> [ <289:5 289:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<292:64> [ <292:64 292:64>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<292:64> [ <294:5 294:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<297:63> [ <297:63 297:63>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<297:63> [ <299:5 299:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<302:38> [ <302:38 302:38>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<302:38> [ <304:5 304:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<41:109> [ <41:109 41:109>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<41:109> [ <305:1 305:1>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<55:82> [ <55:82 55:82>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<55:82> [ <63:5 63:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<56:35> [ <56:35 56:35>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<56:35> [ <58:9 58:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<70:67> [ <70:67 70:67>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<70:67> [ <72:5 72:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<75:36> [ <75:36 75:36>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<75:36> [ <80:5 80:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<76:41> [ <76:41 76:41>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<76:41> [ <78:9 78:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<83:34> [ <83:34 83:34>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<83:34> [ <89:5 89:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<85:64> [ <85:64 85:64>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<85:64> [ <87:9 87:9>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<92:38> [ <92:38 92:38>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<92:38> [ <94:5 94:5>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<97:119> [ <97:119 97:119>]
LOCAL_SYMBOL: ReflectionInterfaceDeclaration.java<97:119> [ <100:5 100:5>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration<0> [ <55:52 55:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration<0> [ <56:14 56:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration<0> [ <60:22 60:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration<0> [ <62:66 62:70>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration<1> [ <55:70 55:79>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration<1> [ <61:27 61:36>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration<1> [ <62:73 62:82>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo<0> [ <166:61 166:65>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo<0> [ <167:13 167:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo<0> [ <170:13 170:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo<0> [ <174:106 174:110>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo<0> [ <178:91 178:95>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo<0> [ <183:13 183:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo<1> [ <177:20 177:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.canBeAssignedTo<1> [ <178:52 178:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals<0> [ <114:34 114:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals<0> [ <115:21 115:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals<0> [ <116:15 116:15>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals<0> [ <118:80 118:80>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals<1> [ <118:40 118:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals<1> [ <120:46 120:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.equals<1> [ <122:41 122:44>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName<0> [ <84:16 84:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName<0> [ <85:13 85:25>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName<0> [ <86:20 86:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getClassName<0> [ <86:75 86:87>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getField<0> [ <221:45 221:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getField<0> [ <222:48 222:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended<0> [ <267:29 267:31>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended<0> [ <269:13 269:15>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended<0> [ <271:16 271:18>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended<1> [ <268:20 268:20>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getInterfacesExtended<1> [ <269:78 269:78>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getUsage<0> [ <109:31 109:34>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasDirectlyAnnotation<0> [ <292:49 292:61>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasDirectlyAnnotation<0> [ <293:61 293:73>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasField<0> [ <251:36 251:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.hasField<0> [ <252:48 252:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<0> [ <70:60 70:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<0> [ <71:53 71:57>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<0> [ <191:40 191:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<0> [ <192:13 192:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<0> [ <195:13 195:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<0> [ <198:13 198:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<0> [ <201:13 201:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<0> [ <204:13 204:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<0> [ <207:13 207:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<0> [ <208:74 208:77>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<1> [ <208:31 208:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy<1> [ <209:20 209:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod<0> [ <97:66 97:69>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod<0> [ <98:60 98:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod<1> [ <97:83 97:96>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod<1> [ <98:66 98:79>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod<2> [ <97:107 97:116>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethod<2> [ <98:82 98:91>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<0> [ <134:60 134:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<0> [ <135:88 135:91>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<10> [ <143:23 143:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<10> [ <147:69 147:78>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<12> [ <144:22 144:31>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<12> [ <147:57 147:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<13> [ <151:22 151:31>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<13> [ <155:86 155:95>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<14> [ <152:26 152:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<14> [ <152:30 152:30>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<14> [ <152:50 152:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<14> [ <153:64 153:64>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<14> [ <153:107 153:107>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<15> [ <157:56 157:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<1> [ <134:77 134:90>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<1> [ <135:94 135:107>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<1> [ <143:36 143:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<2> [ <134:104 134:113>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<2> [ <135:110 135:119>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<3> [ <134:124 134:140>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<3> [ <135:122 135:138>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<4> [ <134:154 134:172>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<4> [ <136:17 136:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<5> [ <135:31 135:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<5> [ <137:13 137:15>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<5> [ <140:39 140:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<5> [ <161:20 161:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<6> [ <139:30 139:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<6> [ <147:32 147:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<6> [ <151:35 151:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<6> [ <153:67 153:82>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<6> [ <155:61 155:76>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<7> [ <140:25 140:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<7> [ <144:35 144:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<7> [ <151:62 151:72>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<7> [ <153:21 153:31>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<7> [ <153:35 153:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<7> [ <155:17 155:27>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<7> [ <155:31 155:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<7> [ <156:36 156:46>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<8> [ <141:17 141:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<8> [ <144:60 144:60>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<8> [ <148:17 148:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<9> [ <142:24 142:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<9> [ <147:17 147:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<9> [ <152:32 152:41>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveMethodAsUsage<9> [ <153:92 153:101>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol<0> [ <231:75 231:78>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol<0> [ <233:40 233:43>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol<1> [ <231:92 231:101>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol<1> [ <234:85 234:94>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol<2> [ <232:20 232:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol<2> [ <233:17 233:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.solveSymbol<2> [ <234:78 234:82>]
LOCAL_SYMBOL: java.util.function.Function<T, R>.apply<1> [ <282:22 282:23>]
LOCAL_SYMBOL: java.util.function.Function<T, R>.apply<1> [ <282:65 282:66>]
COMMENT: comment [ <1:1 15:3>]
COMMENT: comment [ <38:1 40:3>]
COMMENT: comment [ <43:5 43:7>]
COMMENT: comment [ <44:5 44:14>]
COMMENT: comment [ <45:5 45:7>]
COMMENT: comment [ <51:5 51:7>]
COMMENT: comment [ <52:5 52:19>]
COMMENT: comment [ <53:5 53:7>]
COMMENT: comment [ <65:5 65:7>]
COMMENT: comment [ <66:5 66:22>]
COMMENT: comment [ <67:5 67:7>]
COMMENT: comment [ <138:13 138:71>]
COMMENT: comment [ <145:17 145:107>]
