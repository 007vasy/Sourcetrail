FILE: ReflectionFactory.java
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.reflectionmodel [ <17:44 17:58>]
QUALIFIER: com.github.javaparser.symbolsolver [ <17:31 17:42>]
QUALIFIER: com.github.javaparser.symbolsolver [ <19:30 19:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <20:30 20:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <21:30 21:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <22:30 22:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <23:30 23:41>]
QUALIFIER: com.github.javaparser.symbolsolver [ <57:46 57:57>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver
QUALIFIER: com.github.javaparser [ <17:20 17:29>]
QUALIFIER: com.github.javaparser [ <19:19 19:28>]
QUALIFIER: com.github.javaparser [ <20:19 20:28>]
QUALIFIER: com.github.javaparser [ <21:19 21:28>]
QUALIFIER: com.github.javaparser [ <22:19 22:28>]
QUALIFIER: com.github.javaparser [ <23:19 23:28>]
QUALIFIER: com.github.javaparser [ <57:35 57:44>]
SYMBOL_PACKAGE: com.github.javaparser
QUALIFIER: com.github [ <17:13 17:18>]
QUALIFIER: com.github [ <19:12 19:17>]
QUALIFIER: com.github [ <20:12 20:17>]
QUALIFIER: com.github [ <21:12 21:17>]
QUALIFIER: com.github [ <22:12 22:17>]
QUALIFIER: com.github [ <23:12 23:17>]
QUALIFIER: com.github [ <57:28 57:33>]
SYMBOL_PACKAGE: com.github
QUALIFIER: com [ <17:9 17:11>]
QUALIFIER: com [ <19:8 19:10>]
QUALIFIER: com [ <20:8 20:10>]
QUALIFIER: com [ <21:8 21:10>]
QUALIFIER: com [ <22:8 22:10>]
QUALIFIER: com [ <23:8 23:10>]
QUALIFIER: com [ <57:24 57:26>]
SYMBOL_PACKAGE: com
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.AccessLevel [ <109:20 109:30>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.AccessLevel [ <111:20 111:30>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.AccessLevel [ <113:20 113:30>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations.AccessLevel [ <115:20 115:30>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations [ <19:49 19:60>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations [ <20:49 20:60>]
QUALIFIER: com.github.javaparser.symbolsolver.model.declarations [ <21:49 21:60>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.declarations
QUALIFIER: com.github.javaparser.symbolsolver.model [ <19:43 19:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <20:43 20:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <21:43 21:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <22:43 22:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <23:43 23:47>]
QUALIFIER: com.github.javaparser.symbolsolver.model [ <57:59 57:63>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model
QUALIFIER: com.github.javaparser.symbolsolver.model.resolution [ <22:49 22:58>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.resolution
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem [ <57:65 57:74>]
SYMBOL_PACKAGE: com.github.javaparser.symbolsolver.model.typesystem
QUALIFIER: java.lang [ <25:13 25:16>]
QUALIFIER: java.lang [ <26:13 26:16>]
QUALIFIER: java.lang [ <27:13 27:16>]
QUALIFIER: java.lang [ <28:13 28:16>]
QUALIFIER: java.lang [ <52:42 52:45>]
QUALIFIER: java.lang [ <53:34 53:37>]
QUALIFIER: java.lang [ <54:18 54:21>]
QUALIFIER: java.lang [ <54:58 54:61>]
QUALIFIER: java.lang [ <55:82 55:85>]
QUALIFIER: java.lang [ <61:23 61:26>]
SYMBOL_PACKAGE: java.lang
QUALIFIER: java [ <25:8 25:11>]
QUALIFIER: java [ <26:8 26:11>]
QUALIFIER: java [ <27:8 27:11>]
QUALIFIER: java [ <28:8 28:11>]
QUALIFIER: java [ <29:8 29:11>]
QUALIFIER: java [ <30:8 30:11>]
QUALIFIER: java [ <31:8 31:11>]
QUALIFIER: java [ <52:37 52:40>]
QUALIFIER: java [ <53:29 53:32>]
QUALIFIER: java [ <54:13 54:16>]
QUALIFIER: java [ <54:53 54:56>]
QUALIFIER: java [ <55:77 55:80>]
QUALIFIER: java [ <61:18 61:21>]
SYMBOL_PACKAGE: java
QUALIFIER: java.lang.reflect [ <25:18 25:24>]
QUALIFIER: java.lang.reflect [ <26:18 26:24>]
QUALIFIER: java.lang.reflect [ <27:18 27:24>]
QUALIFIER: java.lang.reflect [ <28:18 28:24>]
QUALIFIER: java.lang.reflect [ <52:47 52:53>]
QUALIFIER: java.lang.reflect [ <53:39 53:45>]
QUALIFIER: java.lang.reflect [ <54:23 54:29>]
QUALIFIER: java.lang.reflect [ <54:63 54:69>]
QUALIFIER: java.lang.reflect [ <55:87 55:93>]
QUALIFIER: java.lang.reflect [ <61:28 61:34>]
SYMBOL_PACKAGE: java.lang.reflect
QUALIFIER: java.lang.reflect.Modifier [ <108:13 108:20>]
QUALIFIER: java.lang.reflect.Modifier [ <110:20 110:27>]
QUALIFIER: java.lang.reflect.Modifier [ <112:20 112:27>]
QUALIFIER: java.util [ <29:13 29:16>]
QUALIFIER: java.util [ <30:13 30:16>]
QUALIFIER: java.util [ <31:13 31:16>]
SYMBOL_PACKAGE: java.util
QUALIFIER: java.util.Arrays [ <62:32 62:37>]
SYMBOL_CLASS: public com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory [ <36:1 <36:14 36:30> 118:1>]
SYMBOL_METHOD: public static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <38:5 <38:5 <38:44 38:61> 38:100> 50:5>]
SYMBOL_METHOD: boolean java.lang.Class<T>.isArray()
SYMBOL_METHOD: java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)
SYMBOL_METHOD: boolean java.lang.Class<T>.isPrimitive()
SYMBOL_METHOD: java.lang.IllegalArgumentException.IllegalArgumentException()
SYMBOL_METHOD: boolean java.lang.Class<T>.isInterface()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: boolean java.lang.Class<T>.isEnum()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionEnumDeclaration.ReflectionEnumDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: public static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <52:5 <52:5 <52:24 52:35> 52:87> 105:5>]
SYMBOL_BUILTIN_TYPE: boolean
SYMBOL_METHOD: java.lang.reflect.TypeVariable<D>.D java.lang.reflect.TypeVariable<D>.getGenericDeclaration()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionTypeParameter.ReflectionTypeParameter(java.lang.reflect.TypeVariable, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.TypeVariable.TypeVariable(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration)
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
SYMBOL_METHOD: java.lang.reflect.Type java.lang.reflect.ParameterizedType.getRawType()
SYMBOL_METHOD: java.util.ArrayList<E>.ArrayList()
SYMBOL_METHOD: boolean java.util.List<E>.addAll(java.util.Collection<? extends E>)
SYMBOL_METHOD: static java.util.List<T> java.util.Arrays.asList<T>(T)
SYMBOL_METHOD: java.lang.reflect.Type java.lang.reflect.ParameterizedType.getActualTypeArguments()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.transformTypeParameters(com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer)
SYMBOL_METHOD: java.util.List<E>.E java.util.List<E>.remove(int)
SYMBOL_METHOD: boolean java.lang.String.equals(java.lang.Object)
SYMBOL_METHOD: java.lang.String java.lang.Class<T>.getName()
QUALIFIER: java.lang.Void [ <69:40 69:43>]
SYMBOL_FIELD: static java.lang.Class<java.lang.Void> java.lang.Void.TYPE
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.VoidType [ <70:28 70:35>]
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.VoidType.INSTANCE
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.byName(java.lang.String)
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType [ <72:28 72:40>]
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_METHOD: java.lang.Class<?> java.lang.Class<T>.getComponentType()
SYMBOL_METHOD: com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
SYMBOL_METHOD: java.lang.reflect.Type java.lang.reflect.GenericArrayType.getGenericComponentType()
SYMBOL_METHOD: java.lang.reflect.Type java.lang.reflect.WildcardType.getLowerBounds()
SYMBOL_FIELD: int length
SYMBOL_METHOD: java.lang.reflect.Type java.lang.reflect.WildcardType.getUpperBounds()
SYMBOL_METHOD: java.lang.String java.lang.reflect.Type.getTypeName()
SYMBOL_METHOD: java.lang.UnsupportedOperationException.UnsupportedOperationException()
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.superBound(com.github.javaparser.symbolsolver.model.typesystem.Type)
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.Wildcard [ <93:24 93:31>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.Wildcard [ <99:24 99:31>]
QUALIFIER: com.github.javaparser.symbolsolver.model.typesystem.Wildcard [ <101:20 101:27>]
SYMBOL_METHOD: static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.extendsBound(com.github.javaparser.symbolsolver.model.typesystem.Type)
SYMBOL_FIELD: static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.UNBOUNDED
SYMBOL_METHOD: java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)
SYMBOL_METHOD: java.lang.String java.lang.Class<T>.getCanonicalName()
SYMBOL_METHOD: java.lang.Class<?> java.lang.Object.getClass()
SYMBOL_METHOD: default static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) [ <107:5 <107:5 <107:24 107:45> 107:66> 117:5>]
SYMBOL_BUILTIN_TYPE: int
SYMBOL_METHOD: static boolean java.lang.reflect.Modifier.isPublic(int)
SYMBOL_FIELD: com.github.javaparser.symbolsolver.model.declarations.AccessLevel.PUBLIC
SYMBOL_METHOD: static boolean java.lang.reflect.Modifier.isProtected(int)
SYMBOL_FIELD: com.github.javaparser.symbolsolver.model.declarations.AccessLevel.PROTECTED
SYMBOL_METHOD: static boolean java.lang.reflect.Modifier.isPrivate(int)
SYMBOL_FIELD: com.github.javaparser.symbolsolver.model.declarations.AccessLevel.PRIVATE
SYMBOL_FIELD: com.github.javaparser.symbolsolver.model.declarations.AccessLevel.PACKAGE_PROTECTED
REFERENCE_IMPORT: ReflectionFactory.java -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel [ <19:62 19:72>]
REFERENCE_IMPORT: ReflectionFactory.java -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <20:62 20:85>]
REFERENCE_IMPORT: ReflectionFactory.java -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <21:62 21:85>]
REFERENCE_IMPORT: ReflectionFactory.java -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <22:60 22:69>]
REFERENCE_IMPORT: ReflectionFactory.java -> com.github.javaparser.symbolsolver.model.typesystem [ <23:49 23:58>]
REFERENCE_IMPORT: ReflectionFactory.java -> java.lang.reflect.GenericArrayType [ <25:26 25:41>]
REFERENCE_IMPORT: ReflectionFactory.java -> java.lang.reflect.Modifier [ <26:26 26:33>]
REFERENCE_IMPORT: ReflectionFactory.java -> java.lang.reflect.ParameterizedType [ <27:26 27:42>]
REFERENCE_IMPORT: ReflectionFactory.java -> java.lang.reflect.WildcardType [ <28:26 28:37>]
REFERENCE_IMPORT: ReflectionFactory.java -> java.util.ArrayList<E> [ <29:18 29:26>]
REFERENCE_IMPORT: ReflectionFactory.java -> java.util.Arrays [ <30:18 30:23>]
REFERENCE_IMPORT: ReflectionFactory.java -> java.util.List<E> [ <31:18 31:21>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration [ <38:19 38:42>]
REFERENCE_TYPE_ARGUMENT: java.lang.Class<T> -> ? [ <38:69 38:69>]
REFERENCE_TYPE_ARGUMENT: java.lang.Class<T> -> ? [ <67:19 67:19>]
REFERENCE_TYPE_ARGUMENT: java.lang.Class<T> -> ? [ <67:33 67:33>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<T> [ <38:63 38:67>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <38:79 38:88>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.Class<T>.isArray() [ <39:19 39:25>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) [ <40:23 40:46>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException [ <40:23 40:46>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException [ <42:23 42:46>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.Class<T>.isPrimitive() [ <41:26 41:36>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.IllegalArgumentException.IllegalArgumentException() [ <42:23 42:46>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.Class<T>.isInterface() [ <43:26 43:36>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.ReflectionInterfaceDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <44:24 44:53>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration [ <44:24 44:53>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.Class<T>.isEnum() [ <45:26 45:31>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionEnumDeclaration.ReflectionEnumDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <46:24 46:48>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionEnumDeclaration [ <46:24 46:48>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.ReflectionClassDeclaration(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <48:24 48:49>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration [ <48:24 48:49>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.Type [ <52:19 52:22>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type [ <52:55 52:58>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type [ <55:95 55:98>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type [ <61:36 61:39>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.resolution.TypeSolver [ <52:66 52:75>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.TypeVariable<D> [ <53:47 53:58>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.TypeVariable<D> [ <54:31 54:42>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.TypeVariable<D> [ <54:71 54:82>]
REFERENCE_TYPE_ARGUMENT: java.lang.reflect.TypeVariable<D> -> ? [ <54:44 54:44>]
REFERENCE_TYPE_ARGUMENT: java.lang.reflect.TypeVariable<D> -> ? [ <54:84 54:84>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean [ <55:13 55:19>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.TypeVariable<D>.D java.lang.reflect.TypeVariable<D>.getGenericDeclaration() [ <55:42 55:62>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration [ <56:13 56:36>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionTypeParameter.ReflectionTypeParameter(java.lang.reflect.TypeVariable, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <56:58 56:80>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionTypeParameter [ <56:58 56:80>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.TypeVariable.TypeVariable(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration) [ <57:24 57:87>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.TypeVariable [ <57:76 57:87>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.ParameterizedType [ <58:36 58:52>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.ParameterizedType [ <59:13 59:29>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.ParameterizedType [ <59:37 59:53>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType [ <60:13 60:25>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ <60:79 60:93>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType() [ <64:110 64:124>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <60:37 60:48>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <64:61 64:72>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <75:38 75:49>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <81:34 81:45>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <93:44 93:55>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <99:46 99:57>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.ParameterizedType.getRawType() [ <60:53 60:62>]
REFERENCE_TYPE_ARGUMENT: java.util.List<E> -> java.lang.reflect.Type [ <61:18 61:39>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.util.List<E> [ <61:13 61:16>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.util.ArrayList<E>.ArrayList() [ <61:60 61:70>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.util.ArrayList<E> [ <61:60 61:68>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.util.List<E>.addAll(java.util.Collection<? extends E>) [ <62:25 62:30>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static java.util.List<T> java.util.Arrays.asList<T>(T) [ <62:39 62:44>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.ParameterizedType.getActualTypeArguments() [ <62:49 62:70>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.transformTypeParameters(com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer) [ <64:31 64:53>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.util.List<E>.E java.util.List<E>.remove(int) [ <64:86 64:91>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<T> [ <66:36 66:40>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<T> [ <67:13 67:17>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<T> [ <67:27 67:31>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.Class<T>.isPrimitive() [ <68:19 68:29>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.String.equals(java.lang.Object) [ <69:33 69:38>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.String.equals(java.lang.Object) [ <85:113 85:118>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.String java.lang.Class<T>.getName() [ <69:23 69:29>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.String java.lang.Class<T>.getName() [ <69:50 69:56>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.String java.lang.Class<T>.getName() [ <72:51 72:57>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static java.lang.Class<java.lang.Void> java.lang.Void.TYPE [ <69:45 69:48>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.VoidType.INSTANCE [ <70:37 70:44>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.byName(java.lang.String) [ <72:42 72:47>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> boolean java.lang.Class<T>.isArray() [ <74:26 74:32>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <75:28 75:36>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType.ArrayType(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <81:24 81:32>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType [ <75:28 75:36>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.ArrayType [ <81:24 81:32>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<?> java.lang.Class<T>.getComponentType() [ <75:53 75:68>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl.ReferenceTypeImpl(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <77:28 77:44>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeImpl [ <77:28 77:44>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) [ <77:46 77:63>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.GenericArrayType [ <79:36 79:51>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.GenericArrayType [ <80:13 80:28>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.GenericArrayType [ <80:50 80:65>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.GenericArrayType.getGenericComponentType() [ <81:64 81:86>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.WildcardType [ <82:36 82:47>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.WildcardType [ <83:13 83:24>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.WildcardType [ <83:42 83:53>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.WildcardType.getLowerBounds() [ <84:30 84:43>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.WildcardType.getLowerBounds() [ <89:30 89:43>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.WildcardType.getLowerBounds() [ <90:34 90:47>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.WildcardType.getLowerBounds() [ <93:70 93:83>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int length [ <84:47 84:52>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int length [ <84:91 84:96>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int length [ <85:51 85:56>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int length [ <89:47 89:52>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int length [ <90:51 90:56>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int length [ <95:47 95:52>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> int length [ <96:51 96:56>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.WildcardType.getUpperBounds() [ <84:74 84:87>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.WildcardType.getUpperBounds() [ <85:34 85:47>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.WildcardType.getUpperBounds() [ <85:79 85:92>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.WildcardType.getUpperBounds() [ <95:30 95:43>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.WildcardType.getUpperBounds() [ <96:34 96:47>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.reflect.Type java.lang.reflect.WildcardType.getUpperBounds() [ <99:72 99:85>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.String java.lang.reflect.Type.getTypeName() [ <85:99 85:109>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.UnsupportedOperationException.UnsupportedOperationException() [ <91:31 91:59>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.UnsupportedOperationException.UnsupportedOperationException() [ <97:31 97:59>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.UnsupportedOperationException [ <91:31 91:59>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.UnsupportedOperationException [ <97:31 97:59>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.UnsupportedOperationException [ <103:23 103:51>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.superBound(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <93:33 93:42>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.extendsBound(com.github.javaparser.symbolsolver.model.typesystem.Type) [ <99:33 99:44>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> static com.github.javaparser.symbolsolver.model.typesystem.Wildcard com.github.javaparser.symbolsolver.model.typesystem.Wildcard.UNBOUNDED [ <101:29 101:37>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) [ <103:23 103:51>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.String java.lang.Class<T>.getCanonicalName() [ <103:69 103:84>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.typesystem.Type com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver) -> java.lang.Class<?> java.lang.Object.getClass() [ <103:58 103:65>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel [ <107:12 107:22>]
REFERENCE_TYPE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) -> int [ <107:53 107:55>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) -> static boolean java.lang.reflect.Modifier.isPublic(int) [ <108:22 108:29>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel.PUBLIC [ <109:32 109:37>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) -> static boolean java.lang.reflect.Modifier.isProtected(int) [ <110:29 110:39>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel.PROTECTED [ <111:32 111:40>]
REFERENCE_CALL: static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) -> static boolean java.lang.reflect.Modifier.isPrivate(int) [ <112:29 112:37>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel.PRIVATE [ <113:32 113:38>]
REFERENCE_USAGE: static com.github.javaparser.symbolsolver.model.declarations.AccessLevel com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int) -> com.github.javaparser.symbolsolver.model.declarations.AccessLevel.PACKAGE_PROTECTED [ <115:32 115:48>]
LOCAL_SYMBOL: ReflectionFactory.java<102:16> [ <102:16 102:16>]
LOCAL_SYMBOL: ReflectionFactory.java<102:16> [ <104:9 104:9>]
LOCAL_SYMBOL: ReflectionFactory.java<107:68> [ <107:68 107:68>]
LOCAL_SYMBOL: ReflectionFactory.java<107:68> [ <117:5 117:5>]
LOCAL_SYMBOL: ReflectionFactory.java<108:43> [ <108:43 108:43>]
LOCAL_SYMBOL: ReflectionFactory.java<108:43> [ <110:9 110:9>]
LOCAL_SYMBOL: ReflectionFactory.java<110:53> [ <110:53 110:53>]
LOCAL_SYMBOL: ReflectionFactory.java<110:53> [ <112:9 112:9>]
LOCAL_SYMBOL: ReflectionFactory.java<112:51> [ <112:51 112:51>]
LOCAL_SYMBOL: ReflectionFactory.java<112:51> [ <114:9 114:9>]
LOCAL_SYMBOL: ReflectionFactory.java<114:16> [ <114:16 114:16>]
LOCAL_SYMBOL: ReflectionFactory.java<114:16> [ <116:9 116:9>]
LOCAL_SYMBOL: ReflectionFactory.java<36:32> [ <36:32 36:32>]
LOCAL_SYMBOL: ReflectionFactory.java<36:32> [ <118:1 118:1>]
LOCAL_SYMBOL: ReflectionFactory.java<38:102> [ <38:102 38:102>]
LOCAL_SYMBOL: ReflectionFactory.java<38:102> [ <50:5 50:5>]
LOCAL_SYMBOL: ReflectionFactory.java<39:30> [ <39:30 39:30>]
LOCAL_SYMBOL: ReflectionFactory.java<39:30> [ <41:9 41:9>]
LOCAL_SYMBOL: ReflectionFactory.java<41:41> [ <41:41 41:41>]
LOCAL_SYMBOL: ReflectionFactory.java<41:41> [ <43:9 43:9>]
LOCAL_SYMBOL: ReflectionFactory.java<43:41> [ <43:41 43:41>]
LOCAL_SYMBOL: ReflectionFactory.java<43:41> [ <45:9 45:9>]
LOCAL_SYMBOL: ReflectionFactory.java<45:36> [ <45:36 45:36>]
LOCAL_SYMBOL: ReflectionFactory.java<45:36> [ <47:9 47:9>]
LOCAL_SYMBOL: ReflectionFactory.java<47:16> [ <47:16 47:16>]
LOCAL_SYMBOL: ReflectionFactory.java<47:16> [ <49:9 49:9>]
LOCAL_SYMBOL: ReflectionFactory.java<52:89> [ <52:89 52:89>]
LOCAL_SYMBOL: ReflectionFactory.java<52:89> [ <105:5 105:5>]
LOCAL_SYMBOL: ReflectionFactory.java<53:61> [ <53:61 53:61>]
LOCAL_SYMBOL: ReflectionFactory.java<53:61> [ <58:9 58:9>]
LOCAL_SYMBOL: ReflectionFactory.java<58:55> [ <58:55 58:55>]
LOCAL_SYMBOL: ReflectionFactory.java<58:55> [ <66:9 66:9>]
LOCAL_SYMBOL: ReflectionFactory.java<66:43> [ <66:43 66:43>]
LOCAL_SYMBOL: ReflectionFactory.java<66:43> [ <79:9 79:9>]
LOCAL_SYMBOL: ReflectionFactory.java<68:34> [ <68:34 68:34>]
LOCAL_SYMBOL: ReflectionFactory.java<68:34> [ <74:13 74:13>]
LOCAL_SYMBOL: ReflectionFactory.java<69:62> [ <69:62 69:62>]
LOCAL_SYMBOL: ReflectionFactory.java<69:62> [ <71:17 71:17>]
LOCAL_SYMBOL: ReflectionFactory.java<71:24> [ <71:24 71:24>]
LOCAL_SYMBOL: ReflectionFactory.java<71:24> [ <73:17 73:17>]
LOCAL_SYMBOL: ReflectionFactory.java<74:37> [ <74:37 74:37>]
LOCAL_SYMBOL: ReflectionFactory.java<74:37> [ <76:13 76:13>]
LOCAL_SYMBOL: ReflectionFactory.java<76:20> [ <76:20 76:20>]
LOCAL_SYMBOL: ReflectionFactory.java<76:20> [ <78:13 78:13>]
LOCAL_SYMBOL: ReflectionFactory.java<79:54> [ <79:54 79:54>]
LOCAL_SYMBOL: ReflectionFactory.java<79:54> [ <82:9 82:9>]
LOCAL_SYMBOL: ReflectionFactory.java<82:50> [ <82:50 82:50>]
LOCAL_SYMBOL: ReflectionFactory.java<82:50> [ <102:9 102:9>]
LOCAL_SYMBOL: ReflectionFactory.java<84:103> [ <84:103 84:103>]
LOCAL_SYMBOL: ReflectionFactory.java<84:103> [ <88:13 88:13>]
LOCAL_SYMBOL: ReflectionFactory.java<85:141> [ <85:141 85:141>]
LOCAL_SYMBOL: ReflectionFactory.java<85:141> [ <87:17 87:17>]
LOCAL_SYMBOL: ReflectionFactory.java<89:59> [ <89:59 89:59>]
LOCAL_SYMBOL: ReflectionFactory.java<89:59> [ <94:13 94:13>]
LOCAL_SYMBOL: ReflectionFactory.java<90:63> [ <90:63 90:63>]
LOCAL_SYMBOL: ReflectionFactory.java<90:63> [ <92:17 92:17>]
LOCAL_SYMBOL: ReflectionFactory.java<95:59> [ <95:59 95:59>]
LOCAL_SYMBOL: ReflectionFactory.java<95:59> [ <100:13 100:13>]
LOCAL_SYMBOL: ReflectionFactory.java<96:63> [ <96:63 96:63>]
LOCAL_SYMBOL: ReflectionFactory.java<96:63> [ <98:17 98:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer.transform<9> [ <64:55 64:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel<0> [ <107:57 107:65>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel<0> [ <108:31 108:39>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel<0> [ <110:41 110:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel<0> [ <112:39 112:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<0> [ <38:72 38:76>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<0> [ <39:13 39:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<0> [ <41:20 41:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<0> [ <43:20 43:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<0> [ <44:55 44:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<0> [ <45:20 45:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<0> [ <46:50 46:54>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<0> [ <48:51 48:55>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<1> [ <38:90 38:99>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<1> [ <44:62 44:71>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<1> [ <46:57 46:66>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor<1> [ <48:58 48:67>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <52:60 52:63>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <53:13 53:16>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <54:88 54:91>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <58:20 58:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <59:56 59:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <66:20 66:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <67:37 67:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <79:20 79:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <80:68 80:71>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <82:20 82:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <83:56 83:59>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <103:53 103:56>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<0> [ <103:96 103:99>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<10> [ <67:22 67:22>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<10> [ <68:17 68:17>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<10> [ <69:21 69:21>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<10> [ <72:49 72:49>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<10> [ <74:24 74:24>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<10> [ <75:51 75:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<10> [ <77:65 77:65>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<11> [ <80:30 80:45>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<11> [ <81:47 81:62>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<12> [ <83:26 83:37>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<12> [ <84:17 84:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<12> [ <84:61 84:72>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<12> [ <85:21 85:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<12> [ <85:66 85:77>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<12> [ <89:17 89:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<12> [ <90:21 90:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<12> [ <93:57 93:68>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<12> [ <95:17 95:28>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<12> [ <96:21 96:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<12> [ <99:59 99:70>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<1> [ <52:77 52:86>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<1> [ <56:103 56:112>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<1> [ <60:67 60:76>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<1> [ <64:97 64:106>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<1> [ <75:73 75:82>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<1> [ <77:68 77:77>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<1> [ <77:81 77:90>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<1> [ <81:91 81:100>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<1> [ <93:91 93:100>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<1> [ <99:93 99:102>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<2> [ <54:47 54:48>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<2> [ <55:39 55:40>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<2> [ <56:82 56:83>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<3> [ <55:21 55:35>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<3> [ <56:86 56:100>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<4> [ <56:38 56:50>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<4> [ <57:89 57:101>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<5> [ <59:31 59:32>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<5> [ <60:50 60:51>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<5> [ <62:46 62:47>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<6> [ <60:27 60:33>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<6> [ <64:13 64:19>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<6> [ <64:23 64:29>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<6> [ <65:20 65:26>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<7> [ <61:42 61:52>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<7> [ <62:13 62:23>]
LOCAL_SYMBOL: com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor<7> [ <64:74 64:84>]
COMMENT: comment [ <1:1 15:3>]
COMMENT: comment [ <33:1 35:3>]
COMMENT: comment [ <63:13 63:42>]
COMMENT: comment [ <86:21 86:45>]
